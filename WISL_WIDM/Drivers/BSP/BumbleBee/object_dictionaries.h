/*
 * object_dictionaries.h
 *
 *  Created on: Oct 27, 2022
 *      Author: mingoo
 */

//code rule exception : 변수 이름 앞에 역할이 명시되어 있으므로 e_ 생략

#ifndef OBJECT_DICTIONARIES_H_
#define OBJECT_DICTIONARIES_H_

#include <stdint.h>
#include "string.h"

#define ROUTINE_MAX_NUM 30
#define SDO_MAX_NUM		60
#define PDO_MAX_NUM		30

/* PACKET SIZE*/
#define NODE_ID_SIZE 	1
#define ERR_CODE_SIZE 	4
#define OBJ_NUMS_SIZE 	1


 typedef enum _NodeID{
 NODE_ID_ALL	=	(uint8_t)0x0,		// switch 0000
 NODE_ID_CM	=	(uint8_t)0x1,		// 0001
 NODE_ID_LH	=	(uint8_t)0x2,		// 0010
 NODE_ID_RH	=	(uint8_t)0x3,		// 0011
 NODE_ID_LK	=	(uint8_t)0x4,		// 0100
 NODE_ID_RK	=	(uint8_t)0x5,		// 0101
 NODE_ID_LA	=	(uint8_t)0x6,		// 0110
 NODE_ID_RA	=	(uint8_t)0x7,		// 0111
// NODE_ID_WIDM_RA = (uint8_t)0x8,		// 1000
 } NodeID;


typedef enum _ObjectDictionaryFNCCode{
	EMCY   		= 	((uint16_t)0x000U),
	SYNC   		=	((uint16_t)0x100U),
	SDO    		= 	((uint16_t)0x200U),
	PDO    		= 	((uint16_t)0x300U),
	TRAJECTORY	= 	((uint16_t)0x400U),
	GUI_SYNC	= 	((uint16_t)0x500U)
} ObjectDictionaryFNCCode;

typedef enum _ObjectDictionaryRoutineOnoff{

	ROUTINE_OFF = (uint8_t)0,
	ROUTINE_ON = (uint8_t)1
} ObjectDictionaryRoutineOnoff;

typedef enum _ObjectDictionaryStateStatus{

	STATE_IDLE,
	STATE_STANDBY,
	STATE_ENABLE,
	STATE_ERROR,
	STATE_NUM
}ObjectDictionaryStateStatus;


typedef enum _ObjectDictionaryDataTypeEnum{

	/* DO NOT CHANGE */
    UINT8_T = 1,
    UINT16_T = 2,
    UINT32_T = 3,
    INT8_T = 4,
    INT16_T = 5,
    INT32_T = 6,
    FLOAT32_T = 7,
    FLOAT64_T = 8,
	STRING10 = 9
	/* DO NOT CHANGE */
} ObjectDictionaryDataTypeEnum;


/*
  _____ _   ___ _  __  ___ ___
 |_   _/_\ / __| |/ / |_ _|   \
   | |/ _ \\__ \ ' <   | || |) |
   |_/_/ \_\___/_|\_\ |___|___/

*/

typedef enum _TaskID{

	/* DO NOT CHANGE */
	TASK_ID_LOWLEVEL = 0,
	TASK_ID_MIDLEVEL,
	TASK_ID_MSG,
	TASK_ID_IMU,
	TASK_ID_SYSMNGT,
	TASK_ID_EXTDEV,
	TASK_NUM
	/* DO NOT CHANGE */
}TaskID;




/*
  ___ ___   ___    ___ ___
 / __|   \ / _ \  |_ _|   \
 \__ \ |) | (_) |  | || |) |
 |___/___/ \___/  |___|___/

*/

typedef enum _SDOStatus{

	SDO_IDLE = 2,
	SDO_REQU = 1,
	SDO_SUCC = 0,
	SDO_FAIL = -1
}SDOStatus;

typedef enum _SDOIDLowLevel{

	SDO_ID_LOWLEVEL_GET_STATE = 0,
	SDO_ID_LOWLEVEL_SET_STATE,
	SDO_ID_LOWLEVEL_GET_ROUTINE,
	SDO_ID_LOWLEVEL_SET_ROUTINE,
	SDO_ID_LOWLEVEL_NAME,
	SDO_ID_LOWLEVEL_POLE_PAIR,
	SDO_ID_LOWLEVEL_ENCODER_RESOLUTION,
	SDO_ID_LOWLEVEL_GEAR_RATIO,
	SDO_ID_LOWLEVEL_TORQUE_CONSTANT,
	SDO_ID_LOWLEVEL_VELOCITY_CONSTANT,
	SDO_ID_LOWLEVEL_PEAK_CURRENT_LIMIT,
	SDO_ID_LOWLEVEL_CONTINUOUS_CURRENT_LIMIT,
	SDO_ID_LOWLEVEL_MAX_VELOCITY,
	SDO_ID_LOWLEVEL_COMMUTATION_DUTY,
	SDO_ID_LOWLEVEL_USER_DIRECTION,
	SDO_ID_LOWLEVEL_ELEC_SYSTEM_ID_MAG,
	SDO_ID_LOWLEVEL_TERMINAL_RESISTANCE,
	SDO_ID_LOWLEVEL_TERMINAL_INDUCTANCE,
	SDO_ID_LOWLEVEL_BEMF_ID_VELOCITY,
	SDO_ID_LOWLEVEL_BEMF_ID_GAIN_PCTG,
	SDO_ID_LOWLEVEL_CURRENT_CTRL_BW_RAD,
	SDO_ID_LOWLEVEL_INERTIA,
	SDO_ID_LOWLEVEL_DAMPING_COEF,
	SDO_ID_LOWLEVEL_MECH_MODEL_A,
	SDO_ID_LOWLEVEL_MECH_MODEL_B,
	SDO_ID_LOWLEVEL_FRICTION_ID_INFO,
	SDO_ID_LOWLEVEL_FRICTION_LUT_INFO,

	SDO_ID_LOWLEVEL_NUM
}SDOIDLowLevel;


typedef enum _SDOIDMidLevel{

	SDO_ID_MIDLEVEL_GET_STATE = 0,
	SDO_ID_MIDLEVEL_SET_STATE,
	SDO_ID_MIDLEVEL_GET_ROUTINE,
	SDO_ID_MIDLEVEL_SET_ROUTINE,

	SDO_ID_MIDLEVEL_IRC_NUMERATOR_LENGTH,
	SDO_ID_MIDLEVEL_IRC_DENOMINATOR_LENGTH,
	SDO_ID_MIDLEVEL_IRC_NUMERATOR,
	SDO_ID_MIDLEVEL_IRC_DENOMINATOR,
	SDO_ID_MIDLEVEL_IRC_SATURATION,

	SDO_ID_MIDLEVEL_IMP_VIRTUAL_STIFFNESS,
	SDO_ID_MIDLEVEL_IMP_VIRTUAL_DAMPER,

	SDO_ID_MIDLEVEL_CURRENT_PERIODIC_SIG_INFO,
	SDO_ID_MIDLEVEL_VELOCITY_PERIODIC_SIG_INFO,
	SDO_ID_MIDLEVEL_POSITION_PERIODIC_SIG_INFO,

	SDO_ID_MIDLEVEL_DOB_Q_BW,
	SDO_ID_MIDLEVEL_DOB_GQ_NUM,
	SDO_ID_MIDLEVEL_DOB_GQ_DEN,
	SDO_ID_MIDLEVEL_DOB_Q_NUM,
	SDO_ID_MIDLEVEL_DOB_Q_DEN,
	SDO_ID_MIDLEVEL_DOB_SATURATION,

	SDO_ID_MIDLEVEL_VELOCITY_CTRL_BW,
	SDO_ID_MIDLEVEL_VELOCITY_CTRL_P_GAIN,
	SDO_ID_MIDLEVEL_VELOCITY_CTRL_I_GAIN,

	SDO_ID_MIDLEVEL_POSITION_CTRL_INPUT_PENALTY,
	SDO_ID_MIDLEVEL_POSITION_CTRL_P_GAIN,
	SDO_ID_MIDLEVEL_POSITION_CTRL_D_GAIN,

	SDO_ID_MIDLEVEL_MID_CTRL_SATURATION,

	SDO_ID_MIDLEVEL_INCENCODER_SET_OFFSET,
	SDO_ID_MIDLEVEL_ABSENCODER_SET_OFFSET,
	SDO_ID_MIDLEVEL_ABSENCODER_CHANGE_DIRECTION,

	SDO_ID_MIDLEVEL_VSD_STIFFNESS,
	SDO_ID_MIDLEVEL_VSD_DAMPER,
	SDO_ID_MIDLEVEL_VSD_DAMPED_RANGE,
	SDO_ID_MIDLEVEL_VSD_STIFF_RANGE,
	SDO_ID_MIDLEVEL_SET_VSD_UPPER_LIMIT,
	SDO_ID_MIDLEVEL_SET_VSD_LOWER_LIMIT,
	SDO_ID_MIDLEVEL_VSD_SATURATION,

	SDO_ID_MIDLEVEL_FEEDFORWARD_NUM,
	SDO_ID_MIDLEVEL_FEEDFORWARD_DEN,

	SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR,
	SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR_LEAD_LAG,
	SDO_ID_MIDLEVEL_ENCODER_RESOLUTION,
	SDO_ID_MIDLEVEL_SYSTEM_ID_SBS_INFO,
	SDO_ID_MIDLEVEL_SYSTEM_ID_VERIFICATION_MAG,

	SDO_ID_MIDLEVEL_UNIT_TRAJECTORY_YD,
	SDO_ID_MIDLEVEL_UNIT_TRAJECTORY_L,
	SDO_ID_MIDLEVEL_UNIT_TRAJECTORY_S0,
	SDO_ID_MIDLEVEL_UNIT_TRAJECTORY_SD,
	SDO_ID_MIDLEVEL_TORQUE_GENERATOR_MODE_IDX,
	SDO_ID_MIDLEVEL_TORQUE_GENERATOR_TMAX,


	SDO_ID_MIDLEVEL_IMPEDANCE_CTRL_EPSILON,
	SDO_ID_MIDLEVEL_IMPEDANCE_CTRL_KP,
	SDO_ID_MIDLEVEL_IMPEDANCE_CTRL_KD,
	SDO_ID_MIDLEVEL_IMPEDANCE_CTRL_LAMBDA,
	SDO_ID_MIDLEVEL_IMPEDANCE_CTRL_DURATION,

	SDO_ID_MIDLEVEL_NUM
}SDOIDMidLevel;


typedef enum _SDOIDMsg{

	SDO_ID_MSG_GET_STATE = 0,
	SDO_ID_MSG_SET_STATE,
	SDO_ID_MSG_GET_ROUTINE,
	SDO_ID_MSG_SET_ROUTINE,
	SDO_ID_MSG_PDO_LIST,
	SDO_ID_MSG_MS_ENUM,
	SDO_ID_MSG_GUI_COMM_ONOFF,
	SDO_ID_MSG_GUI_COMM_COMMAND,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_MSG_NUM
}SDOIDMsg;


typedef enum _SDOIDIMU{ //abbreviation

	SDO_ID_IMU_GET_STATE = 0,
	SDO_ID_IMU_SET_STATE,
	SDO_ID_IMU_GET_ROUTINE,
	SDO_ID_IMU_SET_ROUTINE,
	SDO_ID_IMU_FOR_TEST,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_IMU_NUM
}SDOIDIMU;


typedef enum _SDOIDSysMngt{

	SDO_ID_SYSMNGT_GET_STATE = 0,
	SDO_ID_SYSMNGT_SET_STATE,
	SDO_ID_SYSMNGT_GET_ROUTINE,
	SDO_ID_SYSMNGT_SET_ROUTINE,
	SDO_ID_SYSMNGT_FOR_TEST,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_SYSMNGT_NUM
}SDOIDSysMngt;


typedef enum _SDOIDExtDev{

	SDO_ID_EXTDEV_GET_STATE = 0,
	SDO_ID_EXTDEV_SET_STATE,
	SDO_ID_EXTDEV_GET_ROUTINE,
	SDO_ID_EXTDEV_SET_ROUTINE,
	SDO_ID_EXTDEV_DC_SET_LENGTH,
	SDO_ID_EXTDEV_DC_SET_DIRECT,
	SDO_ID_EXTDEV_FOR_TEST,
	/* USER CODE START*/

	/* USER CODE STOP*/
	SDO_ID_EXTDEV_NUM
}SDOIDExtDev;











/*
  ___ ___   ___    ___ ___
 | _ \   \ / _ \  |_ _|   \
 |  _/ |) | (_) |  | || |) |
 |_| |___/ \___/  |___|___/

*/

typedef enum _PDOIDLowlevel{

	PDO_ID_LOWLEVEL_PHASES_CURRENT,
	PDO_ID_LOWLEVEL_PHASES_VOLTAGE,
	PDO_ID_LOWLEVEL_POSITION,
	PDO_ID_LOWLEVEL_VELOCITY,
	PDO_ID_LOWLEVEL_CLARKE_OUT,
	PDO_ID_LOWLEVEL_PARK_OUT,
	PDO_ID_LOWLEVEL_VOLTAGE_IN,
	PDO_ID_LOWLEVEL_ELEC_ANGLE,
	PDO_ID_LOWLEVEL_PRBS_DATA,
	PDO_ID_LOWLEVEL_RAW_CURRENT,
	PDO_ID_LOWLEVEL_KF_CURRENT,

	PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT,
	PDO_ID_LOWLEVEL_CURRENT_OUTPUT,

	PDO_ID_LOWLEVEL_AUXILIARY_INPUT,
	PDO_ID_LOWLEVEL_LOW_ID_PROCESS_INPUT,
	PDO_ID_LOWLEVEL_FRICTION_COMPENSATOR_INPUT,
	PDO_ID_LOWLEVEL_MID_ID_PROCESS_INPUT,
	PDO_ID_LOWLEVEL_IRC_INPUT,
	PDO_ID_LOWLEVEL_MID_CTRL_INPUT,
	PDO_ID_LOWLEVEL_ANALYZER_INPUT,

	PDO_ID_LOWLEVEL_COMMUTATION_STEP,
	PDO_ID_LOWLEVEL_FRICTION_ID_REF,

	PDO_ID_LOWLEVEL_NUM
}PDOIDLowlevel;


typedef enum _PDOIDMidLevel{

	PDO_ID_MIDLEVEL_LOOP_CNT,
	PDO_ID_MIDLEVEL_REF_POSITION,
	PDO_ID_MIDLEVEL_REF_VELOCITY,
	PDO_ID_MIDLEVEL_ACTUAL_POSITION,
	PDO_ID_MIDLEVEL_ACTUAL_VELOCITY_RAW,
	PDO_ID_MIDLEVEL_SYSTEM_ID_SBS_FREQ,

	PDO_ID_MIDLEVEL_IMP_INPUT,
	PDO_ID_MIDLEVEL_POS_PID_CTRL_INPUT,
	PDO_ID_MIDLEVEL_VEL_PID_CTRL_INPUT,
	PDO_ID_MIDLEVEL_VSD_INPUT,

	PDO_ID_MIDLEVEL_UNIT_TRAJECTORY_BUFF_COUNT,
	PDO_ID_MIDLEVEL_TORQUE_TRAJECTORY_INPUT,
	PDO_ID_MIDLEVEL_ABS_POSITION,
	PDO_ID_MIDLEVEL_DOB_DISTURABNCE,
	PDO_ID_MIDLEVEL_DOB_INPUT,
	PDO_ID_MIDLEVEL_FF_INPUT,
	PDO_ID_MIDLEVEL_VELOCITY_ESTIMATED,


	PDO_ID_MIDLEVEL_NUM
}PDOIDMidLevel;


typedef enum _PDOIDMsg{

	/* USER CODE START*/
	PDO_ID_MSG_TEST1,
	PDO_ID_MSG_TEST2,
	PDO_ID_MSG_TEST3,
	PDO_ID_MSG_TEST4,
	PDO_ID_MSG_TEST5,
	PDO_ID_MSG_TEST6,
	PDO_ID_MSG_TEST7,
	PDO_ID_MSG_TEST8,
	PDO_ID_MSG_TEST9,
	PDO_ID_MSG_TEST10,

	/* USER CODE STOP*/
	PDO_ID_MSG_NUM
}PDOIDMsg;


typedef enum _PDOIDIMU{

	/* USER CODE START*/
	PDO_ID_IMU_ACC_X,
	PDO_ID_IMU_ACC_Y,
	PDO_ID_IMU_ACC_Z,
	PDO_ID_IMU_GYR_X,
	PDO_ID_IMU_GYR_Y,
	PDO_ID_IMU_GYR_Z,
	PDO_ID_IMU_WALKING_STATE,
	PDO_ID_IMU_GAIT_PHASE,
	PDO_ID_IMU_MAG_X,
	PDO_ID_IMU_MAG_Y,
	PDO_ID_IMU_MAG_Z,
	PDO_ID_IMU_TENSION_P,
	PDO_ID_IMU_TENSION_D,
	PDO_ID_IMU_DEG_ACC,
	PDO_ID_IMU_DEG_GYR,
	PDO_ID_IMU_DEG_ACC_FILTERED,
	PDO_ID_IMU_DEG_GYR_FILTERED,
	PDO_ID_DEG_TVCF,

	/* USER CODE STOP*/
	PDO_ID_IMU_NUM
}PDOIDIMU;


typedef enum _PDOIDSysMngt{

	/* USER CODE START*/
	PDO_ID_SYSTEM_VOLT,
	PDO_ID_SYSTEM_CURR,
	PDO_ID_SYSTEM_TEMP,
	/* USER CODE STOP*/
	PDO_ID_SYSMNGT_NUM
}PDOIDSysMngt;


typedef enum _PDOIDExtDev{

	PDO_ID_EXTDEV_FSR,
	PDO_ID_EXTDEV_LP,
	PDO_ID_EXTDEV_DC_LENGTH_REF,
	PDO_ID_EXTDEV_DC_DIRECTION_CMD,
	PDO_ID_EXTDEV_DC_LENGTH_ACT,
	PDO_ID_EXTDEV_DC_DIRECTION_ACT,
	PDO_ID_EXTDEV_DC_BUTTON_STATE,
	/* USER CODE START*/

	/* USER CODE STOP*/
	PDO_ID_EXTDEV_NUM
}PDOIDExtDev;

/*
  ___          _   _            ___ ___
 | _ \___ _  _| |_(_)_ _  ___  |_ _|   \
 |   / _ \ || |  _| | ' \/ -_)  | || |) |
 |_|_\___/\_,_|\__|_|_||_\___| |___|___/

*/


typedef enum _RoutineIDLowlevel{

	ROUTINE_ID_LOWLEVEL_DIRECTION_SET,
	ROUTINE_ID_LOWLEVEL_ELECTRICAL_SYS_ID,
	ROUTINE_ID_LOWLEVEL_ELECTRICAL_BEMF_ID,
	ROUTINE_ID_LOWLEVEL_CURRENT_CTRL,
	ROUTINE_ID_LOWLEVEL_CURRENT_CTRL_BANDWIDTH_CHECK,
	ROUTINE_ID_LOWLEVEL_ADVANCED_FRICTION_ID,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_COMPENSATION,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_ID_VEL_CTRL_EVAL,
	ROUTINE_ID_LOWLEVEL_ADV_FRICTION_COMPENSATION_FF,

	ROUTINE_ID_LOWLEVEL_NUM
}RoutineIDLowlevel;


typedef enum _RoutineIDMidlevel{

	ROUTINE_ID_MIDLEVEL_SYS_ID_SBS,
	ROUTINE_ID_MIDLEVEL_IRC,
	ROUTINE_ID_MIDLEVEL_IMPEDANCE_CONTROL,
	ROUTINE_ID_MIDLEVEL_POSITION_REC_REF,
	ROUTINE_ID_MIDLEVEL_POSITION_SINE_REF,

	ROUTINE_ID_MIDLEVEL_POSITION_CTRL,
	ROUTINE_ID_MIDLEVEL_VELOCITY_CTRL,
    ROUTINE_ID_MIDLEVEL_VELOCITY_SINE_REF,
	ROUTINE_ID_MIDLEVEL_VELOCITY_REC_REF,

	ROUTINE_ID_MIDLEVEL_CURRENT_SINE_REF,
	ROUTINE_ID_MIDLEVEL_CURRENT_REC_REF,
	ROUTINE_ID_MIDLEVEL_CURRENT_TANH_REF,

	ROUTINE_ID_MIDLEVEL_GET_INCENCODER_VALUE,
	ROUTINE_ID_MIDLEVEL_GET_ABSENCODER_VALUE,

	ROUTINE_ID_MIDLEVEL_COMPRESSIONAL_VSD,
	ROUTINE_ID_MIDLEVEL_BACKLASH_TEST,
	ROUTINE_ID_MIDLEVEL_DISTURBANCE_OBS,
	ROUTINE_ID_MIDLEVEL_UNIT_TRAJECTORY_DECODER,
	ROUTINE_ID_MIDLEVEL_TORQUE_GENERATOR,
	ROUTINE_ID_MIDLEVEL_FEEDFORWARD_FILTER,
	ROUTINE_ID_MIDLEVEL_SYS_ID_SBS_VERIFY,

	ROUTINE_ID_MIDLEVEL_CORRIDOR_IMPEDANCE_CONTROL,

	/* USER CODE STOP*/
	ROUTINE_ID_MIDLEVEL_NUM
}RoutineIDMidlevel;


typedef enum _RoutineIDMsg{

	/* USER CODE START*/
	ROUTINE_ID_MSG_PDO_SEND,
	ROUTINE_ID_MSG_PDO_DUMMY_TEST,

	/* USER CODE STOP*/
	ROUTINE_ID_MSG_NUM
}_RoutineIDMsg;


typedef enum _RoutineIDIMU{

	/* USER CODE START*/
	ROUTINE_ID_IMU_6AXIS_GETVALUE,
	ROUTINE_ID_IMU_3AXIS_GETVALUE,
	ROUTINE_ID_IMU_RPY_CAL,
	ROUTINE_ID_IMU_WALKING_STATE,
	ROUTINE_ID_IMU_MAGNET_GETVALUE,
	ROUTINE_ID_IMU_TOTAL_FUNCTION,
	/* USER CODE STOP*/
	ROUTINE_ID_IMU_NUM
}RoutineIDIMU;


typedef enum __RoutineIDSysMngt{

	/* USER CODE START*/
	ROUTINE_ID_GET_POWER_VALUE,
	ROUTINE_ID_CHECK_POWER_STATE,

	/* USER CODE STOP*/
	ROUTINE_ID_SYSMNGT_NUM
}RoutineIDSysMngt;


typedef enum _RoutineIDExtDev{

	ROUTINE_ID_EXTDEV_FOOT,
	ROUTINE_ID_EXTDEV_NTC,
	ROUTINE_ID_EXTDEV_DC_LENGTH_UPDATE,
	ROUTINE_ID_EXTDEV_DC_LENGTH_CMD,
	ROUTINE_ID_EXTDEV_DC_DIRECT_CMD,
	ROUTINE_ID_EXTDEV_DC_BUTTON_CMD,
	ROUTINE_ID_EXTDEV_DC_BUTTON_STATE,
	/* USER CODE START*/

	/* USER CODE STOP*/
	ROUTINE_ID_EXTDEV_NUM
}RoutineIDExtDev;


typedef uint8_t SDOinfo;			// ObjectDictionary_DataTypeEnum
typedef uint8_t PDOinfo[2];			// ObjectDictionary_DataTypeEnum, number of data

extern SDOinfo SDO_Table[TASK_NUM][SDO_MAX_NUM];
extern PDOinfo PDO_Table[TASK_NUM][PDO_MAX_NUM];



/*
  ___             _   _
 | __|  _ _ _  __| |_(_)___ _ _
 | _| || | ' \/ _|  _| / _ \ ' \
 |_| \_,_|_||_\__|\__|_\___/_||_|

*/

uint8_t Convert_DataSize(int t_data_size);
void Create_SDOTable_ObjDictionary(void);
void Create_PDOTable_ObjDictionary(void);



#endif /* OBJECT_DICTIONARIES_H_ */
