
WIDM_CM_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011744  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac8  080119e8  080119e8  000219e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080134b0  080134b0  000234b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080134b4  080134b4  000234b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  24000000  080134b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000d550  24000088  08013540  00030088  2**2
                  ALLOC
  7 .i2c_sec      00002014  30000000  30000000  00040000  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2400d5d8  2400d5d8  0003d5d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300b6  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002387d  00000000  00000000  000300f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004bb0  00000000  00000000  00053976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c68  00000000  00000000  00058528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000015d5  00000000  00000000  0005a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a742  00000000  00000000  0005b765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000b9f3  00000000  00000000  00075ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000082d0  00000000  00000000  0008189c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006f  00000000  00000000  00089b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080119cc 	.word	0x080119cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080119cc 	.word	0x080119cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <MX_DMA_Init+0x6c>)
 8000388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <MX_DMA_Init+0x6c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_DMA_Init+0x6c>)
 8000398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_DMA_Init+0x6c>)
 80003a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80003aa:	4a10      	ldr	r2, [pc, #64]	; (80003ec <MX_DMA_Init+0x6c>)
 80003ac:	f043 0302 	orr.w	r3, r3, #2
 80003b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <MX_DMA_Init+0x6c>)
 80003b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80003ba:	f003 0302 	and.w	r3, r3, #2
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2100      	movs	r1, #0
 80003c6:	200b      	movs	r0, #11
 80003c8:	f001 f95d 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80003cc:	200b      	movs	r0, #11
 80003ce:	f001 f974 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2100      	movs	r1, #0
 80003d6:	2038      	movs	r0, #56	; 0x38
 80003d8:	f001 f955 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80003dc:	2038      	movs	r0, #56	; 0x38
 80003de:	f001 f96c 	bl	80016ba <HAL_NVIC_EnableIRQ>

}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	58024400 	.word	0x58024400

080003f0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80003f4:	4b2f      	ldr	r3, [pc, #188]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 80003f6:	4a30      	ldr	r2, [pc, #192]	; (80004b8 <MX_FDCAN1_Init+0xc8>)
 80003f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80003fa:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 80003fc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000400:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000402:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800040a:	2201      	movs	r2, #1
 800040c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 800040e:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000410:	2201      	movs	r2, #1
 8000412:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000414:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000416:	2200      	movs	r2, #0
 8000418:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800041c:	2201      	movs	r2, #1
 800041e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 32;
 8000420:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000422:	2220      	movs	r2, #32
 8000424:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 127;
 8000426:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000428:	227f      	movs	r2, #127	; 0x7f
 800042a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 32;
 800042c:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800042e:	2220      	movs	r2, #32
 8000430:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000432:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000434:	2201      	movs	r2, #1
 8000436:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800043a:	2204      	movs	r2, #4
 800043c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 800043e:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000440:	220b      	movs	r2, #11
 8000442:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000446:	2204      	movs	r2, #4
 8000448:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800044c:	2200      	movs	r2, #0
 800044e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000452:	2201      	movs	r2, #1
 8000454:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000456:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000458:	2200      	movs	r2, #0
 800045a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800045e:	2204      	movs	r2, #4
 8000460:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000464:	2212      	movs	r2, #18
 8000466:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800046a:	2204      	movs	r2, #4
 800046c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000470:	2212      	movs	r2, #18
 8000472:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000476:	2204      	movs	r2, #4
 8000478:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800047c:	2212      	movs	r2, #18
 800047e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000482:	2204      	movs	r2, #4
 8000484:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 4;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000488:	2204      	movs	r2, #4
 800048a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800048e:	2210      	movs	r2, #16
 8000490:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 8000494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000498:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 800049c:	2212      	movs	r2, #18
 800049e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <MX_FDCAN1_Init+0xc4>)
 80004a2:	f003 fe9d 	bl	80041e0 <HAL_FDCAN_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 80004ac:	f000 fc58 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	240000a4 	.word	0x240000a4
 80004b8:	4000a000 	.word	0x4000a000

080004bc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b0ba      	sub	sp, #232	; 0xe8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	22c0      	movs	r2, #192	; 0xc0
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f00f fdf8 	bl	80100d2 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a33      	ldr	r2, [pc, #204]	; (80005b4 <HAL_FDCAN_MspInit+0xf8>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d15f      	bne.n	80005ac <HAL_FDCAN_MspInit+0xf0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004f0:	f04f 0300 	mov.w	r3, #0
 80004f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4618      	mov	r0, r3
 8000506:	f008 fee3 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000510:	f000 fc26 	bl	8000d60 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <HAL_FDCAN_MspInit+0xfc>)
 8000516:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800051a:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <HAL_FDCAN_MspInit+0xfc>)
 800051c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000520:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <HAL_FDCAN_MspInit+0xfc>)
 8000526:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800052a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <HAL_FDCAN_MspInit+0xfc>)
 8000534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000538:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <HAL_FDCAN_MspInit+0xfc>)
 800053a:	f043 0301 	orr.w	r3, r3, #1
 800053e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <HAL_FDCAN_MspInit+0xfc>)
 8000544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000550:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000554:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	2302      	movs	r3, #2
 800055a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800056a:	2309      	movs	r3, #9
 800056c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000574:	4619      	mov	r1, r3
 8000576:	4811      	ldr	r0, [pc, #68]	; (80005bc <HAL_FDCAN_MspInit+0x100>)
 8000578:	f005 f864 	bl	8005644 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	2013      	movs	r0, #19
 8000582:	f001 f880 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000586:	2013      	movs	r0, #19
 8000588:	f001 f897 	bl	80016ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 1, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2101      	movs	r1, #1
 8000590:	2015      	movs	r0, #21
 8000592:	f001 f878 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000596:	2015      	movs	r0, #21
 8000598:	f001 f88f 	bl	80016ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 14, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	210e      	movs	r1, #14
 80005a0:	203f      	movs	r0, #63	; 0x3f
 80005a2:	f001 f870 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 80005a6:	203f      	movs	r0, #63	; 0x3f
 80005a8:	f001 f887 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80005ac:	bf00      	nop
 80005ae:	37e8      	adds	r7, #232	; 0xe8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	4000a000 	.word	0x4000a000
 80005b8:	58024400 	.word	0x58024400
 80005bc:	58020000 	.word	0x58020000

080005c0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_GPIO_Init+0x8c>)
 80005c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005cc:	4a1f      	ldr	r2, [pc, #124]	; (800064c <MX_GPIO_Init+0x8c>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_GPIO_Init+0x8c>)
 80005d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_GPIO_Init+0x8c>)
 80005e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <MX_GPIO_Init+0x8c>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_GPIO_Init+0x8c>)
 80005f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_GPIO_Init+0x8c>)
 8000604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000608:	4a10      	ldr	r2, [pc, #64]	; (800064c <MX_GPIO_Init+0x8c>)
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_GPIO_Init+0x8c>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000618:	f003 0302 	and.w	r3, r3, #2
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_GPIO_Init+0x8c>)
 8000622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000626:	4a09      	ldr	r2, [pc, #36]	; (800064c <MX_GPIO_Init+0x8c>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_GPIO_Init+0x8c>)
 8000632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	58024400 	.word	0x58024400

08000650 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_I2C1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_I2C1_Init+0x74>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <MX_I2C1_Init+0x7c>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x74>)
 800068c:	f005 fa94 	bl	8005bb8 <HAL_I2C_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000696:	f000 fb63 	bl	8000d60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x74>)
 800069e:	f007 fdbb 	bl	8008218 <HAL_I2CEx_ConfigAnalogFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 fb5a 	bl	8000d60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_I2C1_Init+0x74>)
 80006b0:	f007 fdfd 	bl	80082ae <HAL_I2CEx_ConfigDigitalFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 fb51 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	24000144 	.word	0x24000144
 80006c8:	40005400 	.word	0x40005400
 80006cc:	00b03fdb 	.word	0x00b03fdb

080006d0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_I2C2_Init+0x74>)
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <MX_I2C2_Init+0x78>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_I2C2_Init+0x74>)
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <MX_I2C2_Init+0x7c>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_I2C2_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_I2C2_Init+0x74>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_I2C2_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_I2C2_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C2_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C2_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C2_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <MX_I2C2_Init+0x74>)
 800070c:	f005 fa54 	bl	8005bb8 <HAL_I2C_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000716:	f000 fb23 	bl	8000d60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071a:	2100      	movs	r1, #0
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <MX_I2C2_Init+0x74>)
 800071e:	f007 fd7b 	bl	8008218 <HAL_I2CEx_ConfigAnalogFilter>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000728:	f000 fb1a 	bl	8000d60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800072c:	2100      	movs	r1, #0
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_I2C2_Init+0x74>)
 8000730:	f007 fdbd 	bl	80082ae <HAL_I2CEx_ConfigDigitalFilter>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fb11 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	24000198 	.word	0x24000198
 8000748:	40005800 	.word	0x40005800
 800074c:	00b03fdb 	.word	0x00b03fdb

08000750 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0bc      	sub	sp, #240	; 0xf0
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000768:	f107 0318 	add.w	r3, r7, #24
 800076c:	22c0      	movs	r2, #192	; 0xc0
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f00f fcae 	bl	80100d2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a82      	ldr	r2, [pc, #520]	; (8000984 <HAL_I2C_MspInit+0x234>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d17b      	bne.n	8000878 <HAL_I2C_MspInit+0x128>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000780:	f04f 0208 	mov.w	r2, #8
 8000784:	f04f 0300 	mov.w	r3, #0
 8000788:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800078c:	2300      	movs	r3, #0
 800078e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4618      	mov	r0, r3
 8000798:	f008 fd9a 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80007a2:	f000 fadd 	bl	8000d60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b78      	ldr	r3, [pc, #480]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	4a76      	ldr	r2, [pc, #472]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80007ae:	f043 0302 	orr.w	r3, r3, #2
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b6:	4b74      	ldr	r3, [pc, #464]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007c4:	23c0      	movs	r3, #192	; 0xc0
 80007c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ca:	2312      	movs	r3, #18
 80007cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007dc:	2304      	movs	r3, #4
 80007de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007e6:	4619      	mov	r1, r3
 80007e8:	4868      	ldr	r0, [pc, #416]	; (800098c <HAL_I2C_MspInit+0x23c>)
 80007ea:	f004 ff2b 	bl	8005644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ee:	4b66      	ldr	r3, [pc, #408]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80007f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80007f4:	4a64      	ldr	r2, [pc, #400]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80007f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80007fe:	4b62      	ldr	r3, [pc, #392]	; (8000988 <HAL_I2C_MspInit+0x238>)
 8000800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800080c:	4b60      	ldr	r3, [pc, #384]	; (8000990 <HAL_I2C_MspInit+0x240>)
 800080e:	4a61      	ldr	r2, [pc, #388]	; (8000994 <HAL_I2C_MspInit+0x244>)
 8000810:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000812:	4b5f      	ldr	r3, [pc, #380]	; (8000990 <HAL_I2C_MspInit+0x240>)
 8000814:	2221      	movs	r2, #33	; 0x21
 8000816:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000818:	4b5d      	ldr	r3, [pc, #372]	; (8000990 <HAL_I2C_MspInit+0x240>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800081e:	4b5c      	ldr	r3, [pc, #368]	; (8000990 <HAL_I2C_MspInit+0x240>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000824:	4b5a      	ldr	r3, [pc, #360]	; (8000990 <HAL_I2C_MspInit+0x240>)
 8000826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800082a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800082c:	4b58      	ldr	r3, [pc, #352]	; (8000990 <HAL_I2C_MspInit+0x240>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000832:	4b57      	ldr	r3, [pc, #348]	; (8000990 <HAL_I2C_MspInit+0x240>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000838:	4b55      	ldr	r3, [pc, #340]	; (8000990 <HAL_I2C_MspInit+0x240>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800083e:	4b54      	ldr	r3, [pc, #336]	; (8000990 <HAL_I2C_MspInit+0x240>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000844:	4b52      	ldr	r3, [pc, #328]	; (8000990 <HAL_I2C_MspInit+0x240>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800084a:	4851      	ldr	r0, [pc, #324]	; (8000990 <HAL_I2C_MspInit+0x240>)
 800084c:	f000 ffda 	bl	8001804 <HAL_DMA_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_I2C_MspInit+0x10a>
    {
      Error_Handler();
 8000856:	f000 fa83 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a4c      	ldr	r2, [pc, #304]	; (8000990 <HAL_I2C_MspInit+0x240>)
 800085e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000860:	4a4b      	ldr	r2, [pc, #300]	; (8000990 <HAL_I2C_MspInit+0x240>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2101      	movs	r1, #1
 800086a:	201f      	movs	r0, #31
 800086c:	f000 ff0b 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000870:	201f      	movs	r0, #31
 8000872:	f000 ff22 	bl	80016ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000876:	e080      	b.n	800097a <HAL_I2C_MspInit+0x22a>
  else if(i2cHandle->Instance==I2C2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a46      	ldr	r2, [pc, #280]	; (8000998 <HAL_I2C_MspInit+0x248>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d17b      	bne.n	800097a <HAL_I2C_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000882:	f04f 0208 	mov.w	r2, #8
 8000886:	f04f 0300 	mov.w	r3, #0
 800088a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	4618      	mov	r0, r3
 800089a:	f008 fd19 	bl	80092d0 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_I2C_MspInit+0x158>
      Error_Handler();
 80008a4:	f000 fa5c 	bl	8000d60 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b37      	ldr	r3, [pc, #220]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a36      	ldr	r2, [pc, #216]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b33      	ldr	r3, [pc, #204]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008e0:	2304      	movs	r3, #4
 80008e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008ea:	4619      	mov	r1, r3
 80008ec:	4827      	ldr	r0, [pc, #156]	; (800098c <HAL_I2C_MspInit+0x23c>)
 80008ee:	f004 fea9 	bl	8005644 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80008f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008f8:	4a23      	ldr	r2, [pc, #140]	; (8000988 <HAL_I2C_MspInit+0x238>)
 80008fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <HAL_I2C_MspInit+0x238>)
 8000904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA2_Stream0;
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <HAL_I2C_MspInit+0x24c>)
 8000912:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <HAL_I2C_MspInit+0x250>)
 8000914:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_I2C_MspInit+0x24c>)
 8000918:	2223      	movs	r2, #35	; 0x23
 800091a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <HAL_I2C_MspInit+0x24c>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_I2C_MspInit+0x24c>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_I2C_MspInit+0x24c>)
 800092a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800092e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <HAL_I2C_MspInit+0x24c>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_I2C_MspInit+0x24c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_I2C_MspInit+0x24c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_I2C_MspInit+0x24c>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_I2C_MspInit+0x24c>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <HAL_I2C_MspInit+0x24c>)
 8000950:	f000 ff58 	bl	8001804 <HAL_DMA_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 800095a:	f000 fa01 	bl	8000d60 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_I2C_MspInit+0x24c>)
 8000962:	63da      	str	r2, [r3, #60]	; 0x3c
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <HAL_I2C_MspInit+0x24c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 2, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2102      	movs	r1, #2
 800096e:	2021      	movs	r0, #33	; 0x21
 8000970:	f000 fe89 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000974:	2021      	movs	r0, #33	; 0x21
 8000976:	f000 fea0 	bl	80016ba <HAL_NVIC_EnableIRQ>
}
 800097a:	bf00      	nop
 800097c:	37f0      	adds	r7, #240	; 0xf0
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40005400 	.word	0x40005400
 8000988:	58024400 	.word	0x58024400
 800098c:	58020400 	.word	0x58020400
 8000990:	240001ec 	.word	0x240001ec
 8000994:	40020010 	.word	0x40020010
 8000998:	40005800 	.word	0x40005800
 800099c:	24000264 	.word	0x24000264
 80009a0:	40020410 	.word	0x40020410

080009a4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <HAL_I2C_MspDeInit+0x8c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d118      	bne.n	80009e8 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <HAL_I2C_MspDeInit+0x90>)
 80009b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009bc:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <HAL_I2C_MspDeInit+0x90>)
 80009be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80009c6:	2140      	movs	r1, #64	; 0x40
 80009c8:	481b      	ldr	r0, [pc, #108]	; (8000a38 <HAL_I2C_MspDeInit+0x94>)
 80009ca:	f004 ffeb 	bl	80059a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	4819      	ldr	r0, [pc, #100]	; (8000a38 <HAL_I2C_MspDeInit+0x94>)
 80009d2:	f004 ffe7 	bl	80059a4 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fa6e 	bl	8001ebc <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80009e0:	201f      	movs	r0, #31
 80009e2:	f000 fe78 	bl	80016d6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80009e6:	e01e      	b.n	8000a26 <HAL_I2C_MspDeInit+0x82>
  else if(i2cHandle->Instance==I2C2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_I2C_MspDeInit+0x98>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d119      	bne.n	8000a26 <HAL_I2C_MspDeInit+0x82>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <HAL_I2C_MspDeInit+0x90>)
 80009f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <HAL_I2C_MspDeInit+0x90>)
 80009fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	480c      	ldr	r0, [pc, #48]	; (8000a38 <HAL_I2C_MspDeInit+0x94>)
 8000a08:	f004 ffcc 	bl	80059a4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000a0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <HAL_I2C_MspDeInit+0x94>)
 8000a12:	f004 ffc7 	bl	80059a4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fa4e 	bl	8001ebc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8000a20:	2021      	movs	r0, #33	; 0x21
 8000a22:	f000 fe58 	bl	80016d6 <HAL_NVIC_DisableIRQ>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005400 	.word	0x40005400
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58020400 	.word	0x58020400
 8000a3c:	40005800 	.word	0x40005800

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a46:	4b4f      	ldr	r3, [pc, #316]	; (8000b84 <main+0x144>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d11b      	bne.n	8000a8a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a52:	f3bf 8f4f 	dsb	sy
}
 8000a56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a58:	f3bf 8f6f 	isb	sy
}
 8000a5c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a5e:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <main+0x144>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a66:	f3bf 8f4f 	dsb	sy
}
 8000a6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a6c:	f3bf 8f6f 	isb	sy
}
 8000a70:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a72:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <main+0x144>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a43      	ldr	r2, [pc, #268]	; (8000b84 <main+0x144>)
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7e:	f3bf 8f4f 	dsb	sy
}
 8000a82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a84:	f3bf 8f6f 	isb	sy
}
 8000a88:	e000      	b.n	8000a8c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a8a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <main+0x144>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d138      	bne.n	8000b0a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a98:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <main+0x144>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa0:	f3bf 8f4f 	dsb	sy
}
 8000aa4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <main+0x144>)
 8000aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000aac:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	0b5b      	lsrs	r3, r3, #13
 8000ab2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ab6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	08db      	lsrs	r3, r3, #3
 8000abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ac0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	015a      	lsls	r2, r3, #5
 8000ac6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000aca:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ad0:	492c      	ldr	r1, [pc, #176]	; (8000b84 <main+0x144>)
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1ef      	bne.n	8000ac2 <main+0x82>
    } while(sets-- != 0U);
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1e5a      	subs	r2, r3, #1
 8000ae6:	60ba      	str	r2, [r7, #8]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1e5      	bne.n	8000ab8 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000aec:	f3bf 8f4f 	dsb	sy
}
 8000af0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <main+0x144>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <main+0x144>)
 8000af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000afe:	f3bf 8f4f 	dsb	sy
}
 8000b02:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b04:	f3bf 8f6f 	isb	sy
}
 8000b08:	e000      	b.n	8000b0c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b0a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0c:	f000 fc1e 	bl	800134c <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b10:	f000 f8ee 	bl	8000cf0 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f83e 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f7ff fd52 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b1c:	f7ff fc30 	bl	8000380 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b20:	f7ff fd96 	bl	8000650 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000b24:	f000 fb1c 	bl	8001160 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000b28:	f000 fb68 	bl	80011fc <MX_TIM6_Init>
  MX_FDCAN1_Init();
 8000b2c:	f7ff fc60 	bl	80003f0 <MX_FDCAN1_Init>
  MX_I2C2_Init();
 8000b30:	f7ff fdce 	bl	80006d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // [For Debug, HCLK = 240MHz, SysClk= 480MHz(USED) //
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <main+0x148>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <main+0x148>)
 8000b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b3e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <main+0x148>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <main+0x148>)
 8000b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b4a:	60d3      	str	r3, [r2, #12]
  //DWT->LAR = 0xC5ACCE55;
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <main+0x14c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <main+0x14c>)
 8000b52:	f023 0301 	bic.w	r3, r3, #1
 8000b56:	6013      	str	r3, [r2, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <main+0x14c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <main+0x14c>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <main+0x14c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]

  Create_PDOTable_ObjDictionary();
 8000b6a:	f00a ff8b 	bl	800ba84 <Create_PDOTable_ObjDictionary>
  Create_SDOTable_ObjDictionary();
 8000b6e:	f00a fd3f 	bl	800b5f0 <Create_SDOTable_ObjDictionary>

  MS_enum = IDLE;
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <main+0x150>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]

  Init_Imu_Ctrl();
 8000b78:	f00c f8be 	bl	800ccf8 <Init_Imu_Ctrl>
  Init_Msg_Hdlr();
 8000b7c:	f00e fc32 	bl	800f3e4 <Init_Msg_Hdlr>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <main+0x140>
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00
 8000b88:	e000edf0 	.word	0xe000edf0
 8000b8c:	e0001000 	.word	0xe0001000
 8000b90:	2400d3a8 	.word	0x2400d3a8

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09e      	sub	sp, #120	; 0x78
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9e:	224c      	movs	r2, #76	; 0x4c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f00f fa95 	bl	80100d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2220      	movs	r2, #32
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f00f fa8e 	bl	80100d2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f007 fbc6 	bl	8008348 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b48      	ldr	r3, [pc, #288]	; (8000ce4 <SystemClock_Config+0x150>)
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	4a47      	ldr	r2, [pc, #284]	; (8000ce4 <SystemClock_Config+0x150>)
 8000bc6:	f023 0301 	bic.w	r3, r3, #1
 8000bca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bcc:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <SystemClock_Config+0x150>)
 8000bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b44      	ldr	r3, [pc, #272]	; (8000ce8 <SystemClock_Config+0x154>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a43      	ldr	r2, [pc, #268]	; (8000ce8 <SystemClock_Config+0x154>)
 8000bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <SystemClock_Config+0x154>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bee:	bf00      	nop
 8000bf0:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <SystemClock_Config+0x154>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bfc:	d1f8      	bne.n	8000bf0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <SystemClock_Config+0x158>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c04:	4a39      	ldr	r2, [pc, #228]	; (8000cec <SystemClock_Config+0x158>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c0e:	4b37      	ldr	r3, [pc, #220]	; (8000cec <SystemClock_Config+0x158>)
 8000c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <SystemClock_Config+0x154>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <SystemClock_Config+0x154>)
 8000c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <SystemClock_Config+0x154>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <SystemClock_Config+0x150>)
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ce4 <SystemClock_Config+0x150>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <SystemClock_Config+0x150>)
 8000c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c4e:	bf00      	nop
 8000c50:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <SystemClock_Config+0x154>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5c:	d1f8      	bne.n	8000c50 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c70:	2305      	movs	r3, #5
 8000c72:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c74:	23c0      	movs	r3, #192	; 0xc0
 8000c76:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c84:	2308      	movs	r3, #8
 8000c86:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c94:	4618      	mov	r0, r3
 8000c96:	f007 fb91 	bl	80083bc <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ca0:	f000 f85e 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	233f      	movs	r3, #63	; 0x3f
 8000ca6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cb8:	2340      	movs	r3, #64	; 0x40
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cc2:	2340      	movs	r3, #64	; 0x40
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f007 ffcf 	bl	8008c70 <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000cd8:	f000 f842 	bl	8000d60 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3778      	adds	r7, #120	; 0x78
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58000400 	.word	0x58000400
 8000ce8:	58024800 	.word	0x58024800
 8000cec:	58024400 	.word	0x58024400

08000cf0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d02:	f000 fd03 	bl	800170c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d06:	2301      	movs	r3, #1
 8000d08:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000d0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d12:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000d14:	2310      	movs	r3, #16
 8000d16:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d20:	2303      	movs	r3, #3
 8000d22:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d24:	2301      	movs	r3, #1
 8000d26:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d34:	463b      	mov	r3, r7
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fd20 	bl	800177c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000d40:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000d44:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000d46:	230f      	movs	r3, #15
 8000d48:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fd15 	bl	800177c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000d52:	2006      	movs	r0, #6
 8000d54:	f000 fcf2 	bl	800173c <HAL_MPU_Enable>

}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_MspInit+0x3c>)
 8000d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_MspInit+0x3c>)
 8000d7a:	f043 0302 	orr.w	r3, r3, #2
 8000d7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_MspInit+0x3c>)
 8000d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2101      	movs	r1, #1
 8000d94:	2005      	movs	r0, #5
 8000d96:	f000 fc76 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d9a:	2005      	movs	r0, #5
 8000d9c:	f000 fc8d 	bl	80016ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	58024400 	.word	0x58024400

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 fb1a 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <DMA1_Stream0_IRQHandler+0x10>)
 8000e16:	f001 feb7 	bl	8002b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	240001ec 	.word	0x240001ec

08000e24 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e2a:	f003 ff0f 	bl	8004c4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	240000a4 	.word	0x240000a4

08000e38 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <FDCAN1_IT1_IRQHandler+0x10>)
 8000e3e:	f003 ff05 	bl	8004c4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	240000a4 	.word	0x240000a4

08000e4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM3_IRQHandler+0x10>)
 8000e52:	f009 fe7b 	bl	800ab4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	240002e0 	.word	0x240002e0

08000e60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <I2C1_EV_IRQHandler+0x10>)
 8000e66:	f005 fa69 	bl	800633c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24000144 	.word	0x24000144

08000e74 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <I2C2_EV_IRQHandler+0x10>)
 8000e7a:	f005 fa5f 	bl	800633c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	24000198 	.word	0x24000198

08000e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <TIM6_DAC_IRQHandler+0x10>)
 8000e8e:	f009 fe5d 	bl	800ab4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2400032c 	.word	0x2400032c

08000e9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <DMA2_Stream0_IRQHandler+0x10>)
 8000ea2:	f001 fe71 	bl	8002b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	24000264 	.word	0x24000264

08000eb0 <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <FDCAN_CAL_IRQHandler+0x10>)
 8000eb6:	f003 fec9 	bl	8004c4c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	240000a4 	.word	0x240000a4

08000ec4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return 1;
 8000ec8:	2301      	movs	r3, #1
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_kill>:

int _kill(int pid, int sig)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ede:	f00f f957 	bl	8010190 <__errno>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2216      	movs	r2, #22
 8000ee6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_exit>:

void _exit (int status)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ffe7 	bl	8000ed4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f06:	e7fe      	b.n	8000f06 <_exit+0x12>

08000f08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
  }

  return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e009      	b.n	8000f68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	60ba      	str	r2, [r7, #8]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbf1      	blt.n	8000f54 <_write+0x12>
  }
  return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_close>:

int _close(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa2:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <_isatty>:

int _isatty(int file)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f00f f8bc 	bl	8010190 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	24080000 	.word	0x24080000
 8001044:	00000400 	.word	0x00000400
 8001048:	240002dc 	.word	0x240002dc
 800104c:	2400d5d8 	.word	0x2400d5d8

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001054:	4b37      	ldr	r3, [pc, #220]	; (8001134 <SystemInit+0xe4>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a36      	ldr	r2, [pc, #216]	; (8001134 <SystemInit+0xe4>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <SystemInit+0xe8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	2b06      	cmp	r3, #6
 800106e:	d807      	bhi.n	8001080 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <SystemInit+0xe8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 030f 	bic.w	r3, r3, #15
 8001078:	4a2f      	ldr	r2, [pc, #188]	; (8001138 <SystemInit+0xe8>)
 800107a:	f043 0307 	orr.w	r3, r3, #7
 800107e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <SystemInit+0xec>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a2d      	ldr	r2, [pc, #180]	; (800113c <SystemInit+0xec>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <SystemInit+0xec>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <SystemInit+0xec>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4929      	ldr	r1, [pc, #164]	; (800113c <SystemInit+0xec>)
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <SystemInit+0xf0>)
 800109a:	4013      	ands	r3, r2
 800109c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <SystemInit+0xe8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SystemInit+0xe8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 030f 	bic.w	r3, r3, #15
 80010b2:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemInit+0xe8>)
 80010b4:	f043 0307 	orr.w	r3, r3, #7
 80010b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <SystemInit+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <SystemInit+0xec>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <SystemInit+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <SystemInit+0xec>)
 80010ce:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <SystemInit+0xf4>)
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <SystemInit+0xec>)
 80010d4:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <SystemInit+0xf8>)
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <SystemInit+0xec>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	; (800114c <SystemInit+0xfc>)
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <SystemInit+0xec>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <SystemInit+0xec>)
 80010e6:	4a19      	ldr	r2, [pc, #100]	; (800114c <SystemInit+0xfc>)
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <SystemInit+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <SystemInit+0xec>)
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <SystemInit+0xfc>)
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <SystemInit+0xec>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <SystemInit+0xec>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <SystemInit+0xec>)
 8001102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001106:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <SystemInit+0xec>)
 800110a:	2200      	movs	r2, #0
 800110c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <SystemInit+0x100>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <SystemInit+0x104>)
 8001114:	4013      	ands	r3, r2
 8001116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800111a:	d202      	bcs.n	8001122 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <SystemInit+0x108>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <SystemInit+0x10c>)
 8001124:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001128:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	52002000 	.word	0x52002000
 800113c:	58024400 	.word	0x58024400
 8001140:	eaf6ed7f 	.word	0xeaf6ed7f
 8001144:	02020200 	.word	0x02020200
 8001148:	01ff0000 	.word	0x01ff0000
 800114c:	01010280 	.word	0x01010280
 8001150:	5c001000 	.word	0x5c001000
 8001154:	ffff0000 	.word	0xffff0000
 8001158:	51008108 	.word	0x51008108
 800115c:	52004000 	.word	0x52004000

08001160 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <MX_TIM3_Init+0x98>)
 8001182:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001186:	22ef      	movs	r2, #239	; 0xef
 8001188:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM3_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001192:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_TIM3_Init+0x94>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a4:	4813      	ldr	r0, [pc, #76]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a6:	f009 fc01 	bl	800a9ac <HAL_TIM_Base_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011b0:	f7ff fdd6 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011c2:	f009 fde3 	bl	800ad8c <HAL_TIM_ConfigClockSource>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011cc:	f7ff fdc8 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011de:	f00a f82d 	bl	800b23c <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011e8:	f7ff fdba 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	240002e0 	.word	0x240002e0
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_TIM6_Init+0x64>)
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <MX_TIM6_Init+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_TIM6_Init+0x64>)
 8001214:	22ef      	movs	r2, #239	; 0xef
 8001216:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_TIM6_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_TIM6_Init+0x64>)
 8001220:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001224:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_TIM6_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_TIM6_Init+0x64>)
 800122e:	f009 fbbd 	bl	800a9ac <HAL_TIM_Base_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001238:	f7ff fd92 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_TIM6_Init+0x64>)
 800124a:	f009 fff7 	bl	800b23c <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001254:	f7ff fd84 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2400032c 	.word	0x2400032c
 8001264:	40001000 	.word	0x40001000

08001268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <HAL_TIM_Base_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d117      	bne.n	80012aa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_TIM_Base_MspInit+0x88>)
 800127c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <HAL_TIM_Base_MspInit+0x88>)
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_TIM_Base_MspInit+0x88>)
 800128c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2101      	movs	r1, #1
 800129c:	201d      	movs	r0, #29
 800129e:	f000 f9f2 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012a2:	201d      	movs	r0, #29
 80012a4:	f000 fa09 	bl	80016ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80012a8:	e01b      	b.n	80012e2 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM6)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <HAL_TIM_Base_MspInit+0x8c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d116      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_TIM_Base_MspInit+0x88>)
 80012b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_TIM_Base_MspInit+0x88>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_TIM_Base_MspInit+0x88>)
 80012c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	2036      	movs	r0, #54	; 0x36
 80012d8:	f000 f9d5 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012dc:	2036      	movs	r0, #54	; 0x36
 80012de:	f000 f9ec 	bl	80016ba <HAL_NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40000400 	.word	0x40000400
 80012f0:	58024400 	.word	0x58024400
 80012f4:	40001000 	.word	0x40001000

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012fc:	f7ff fea8 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f00e ff39 	bl	801019c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff fb89 	bl	8000a40 <main>
  bx  lr
 800132e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001334:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001338:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800133c:	080134b8 	.word	0x080134b8
  ldr r2, =_sbss
 8001340:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001344:	2400d5d8 	.word	0x2400d5d8

08001348 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC3_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001352:	2003      	movs	r0, #3
 8001354:	f000 f98c 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001358:	f007 fe40 	bl	8008fdc <HAL_RCC_GetSysClockFreq>
 800135c:	4602      	mov	r2, r0
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_Init+0x68>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	4913      	ldr	r1, [pc, #76]	; (80013b8 <HAL_Init+0x6c>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	f003 031f 	and.w	r3, r3, #31
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_Init+0x68>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_Init+0x6c>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_Init+0x70>)
 800138e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_Init+0x74>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001396:	200f      	movs	r0, #15
 8001398:	f000 f814 	bl	80013c4 <HAL_InitTick>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e002      	b.n	80013ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013a6:	f7ff fce1 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	58024400 	.word	0x58024400
 80013b8:	08011ad4 	.word	0x08011ad4
 80013bc:	24000004 	.word	0x24000004
 80013c0:	24000000 	.word	0x24000000

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_InitTick+0x60>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e021      	b.n	800141c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <HAL_InitTick+0x64>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_InitTick+0x60>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f97f 	bl	80016f2 <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f93b 	bl	8001686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x68>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2400000c 	.word	0x2400000c
 8001428:	24000000 	.word	0x24000000
 800142c:	24000008 	.word	0x24000008

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	2400000c 	.word	0x2400000c
 8001454:	24000378 	.word	0x24000378

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	24000378 	.word	0x24000378

08001470 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetREVID+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0c1b      	lsrs	r3, r3, #16
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	5c001000 	.word	0x5c001000

08001488 <__NVIC_SetPriorityGrouping>:
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <__NVIC_SetPriorityGrouping+0x40>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x40>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00
 80014cc:	05fa0000 	.word	0x05fa0000

080014d0 <__NVIC_GetPriorityGrouping>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	; (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_DisableIRQ>:
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db12      	blt.n	8001560 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	490a      	ldr	r1, [pc, #40]	; (800156c <__NVIC_DisableIRQ+0x44>)
 8001542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	3320      	adds	r3, #32
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001554:	f3bf 8f4f 	dsb	sy
}
 8001558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800155a:	f3bf 8f6f 	isb	sy
}
 800155e:	bf00      	nop
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff8e 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff05 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff1c 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff90 	bl	80015c4 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5f 	bl	8001570 <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff0f 	bl	80014ec <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80016e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff1f 	bl	8001528 <__NVIC_DisableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ff96 	bl	800162c <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001710:	f3bf 8f5f 	dmb	sy
}
 8001714:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <HAL_MPU_Disable+0x28>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_MPU_Disable+0x28>)
 800171c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001720:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_MPU_Disable+0x2c>)
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00
 8001738:	e000ed90 	.word	0xe000ed90

0800173c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_MPU_Enable+0x38>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_MPU_Enable+0x3c>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_MPU_Enable+0x3c>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800175a:	f3bf 8f4f 	dsb	sy
}
 800175e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001760:	f3bf 8f6f 	isb	sy
}
 8001764:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed90 	.word	0xe000ed90
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	785a      	ldrb	r2, [r3, #1]
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
 800178a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d029      	beq.n	80017e8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7b1b      	ldrb	r3, [r3, #12]
 80017a0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7adb      	ldrb	r3, [r3, #11]
 80017a6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7a9b      	ldrb	r3, [r3, #10]
 80017ae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80017b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7b5b      	ldrb	r3, [r3, #13]
 80017b6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7b9b      	ldrb	r3, [r3, #14]
 80017be:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7bdb      	ldrb	r3, [r3, #15]
 80017c6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7a5b      	ldrb	r3, [r3, #9]
 80017ce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7a1b      	ldrb	r3, [r3, #8]
 80017d6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017d8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017e2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017e4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80017e6:	e005      	b.n	80017f4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_MPU_ConfigRegion+0x84>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed90 	.word	0xe000ed90

08001804 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff fe24 	bl	8001458 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e316      	b.n	8001e4a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a66      	ldr	r2, [pc, #408]	; (80019bc <HAL_DMA_Init+0x1b8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d04a      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a65      	ldr	r2, [pc, #404]	; (80019c0 <HAL_DMA_Init+0x1bc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d045      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a63      	ldr	r2, [pc, #396]	; (80019c4 <HAL_DMA_Init+0x1c0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d040      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a62      	ldr	r2, [pc, #392]	; (80019c8 <HAL_DMA_Init+0x1c4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d03b      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a60      	ldr	r2, [pc, #384]	; (80019cc <HAL_DMA_Init+0x1c8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d036      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5f      	ldr	r2, [pc, #380]	; (80019d0 <HAL_DMA_Init+0x1cc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d031      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a5d      	ldr	r2, [pc, #372]	; (80019d4 <HAL_DMA_Init+0x1d0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d02c      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a5c      	ldr	r2, [pc, #368]	; (80019d8 <HAL_DMA_Init+0x1d4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d027      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a5a      	ldr	r2, [pc, #360]	; (80019dc <HAL_DMA_Init+0x1d8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d022      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a59      	ldr	r2, [pc, #356]	; (80019e0 <HAL_DMA_Init+0x1dc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d01d      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a57      	ldr	r2, [pc, #348]	; (80019e4 <HAL_DMA_Init+0x1e0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d018      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <HAL_DMA_Init+0x1e4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d013      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a54      	ldr	r2, [pc, #336]	; (80019ec <HAL_DMA_Init+0x1e8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00e      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a53      	ldr	r2, [pc, #332]	; (80019f0 <HAL_DMA_Init+0x1ec>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a51      	ldr	r2, [pc, #324]	; (80019f4 <HAL_DMA_Init+0x1f0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d004      	beq.n	80018bc <HAL_DMA_Init+0xb8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a50      	ldr	r2, [pc, #320]	; (80019f8 <HAL_DMA_Init+0x1f4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_DMA_Init+0xbc>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_DMA_Init+0xbe>
 80018c0:	2300      	movs	r3, #0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 813b 	beq.w	8001b3e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a37      	ldr	r2, [pc, #220]	; (80019bc <HAL_DMA_Init+0x1b8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d04a      	beq.n	8001978 <HAL_DMA_Init+0x174>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <HAL_DMA_Init+0x1bc>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d045      	beq.n	8001978 <HAL_DMA_Init+0x174>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a34      	ldr	r2, [pc, #208]	; (80019c4 <HAL_DMA_Init+0x1c0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d040      	beq.n	8001978 <HAL_DMA_Init+0x174>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a33      	ldr	r2, [pc, #204]	; (80019c8 <HAL_DMA_Init+0x1c4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d03b      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a31      	ldr	r2, [pc, #196]	; (80019cc <HAL_DMA_Init+0x1c8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d036      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_DMA_Init+0x1cc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d031      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <HAL_DMA_Init+0x1d0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02c      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <HAL_DMA_Init+0x1d4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d027      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2b      	ldr	r2, [pc, #172]	; (80019dc <HAL_DMA_Init+0x1d8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d022      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2a      	ldr	r2, [pc, #168]	; (80019e0 <HAL_DMA_Init+0x1dc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d01d      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a28      	ldr	r2, [pc, #160]	; (80019e4 <HAL_DMA_Init+0x1e0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d018      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <HAL_DMA_Init+0x1e4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <HAL_DMA_Init+0x1e8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00e      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a24      	ldr	r2, [pc, #144]	; (80019f0 <HAL_DMA_Init+0x1ec>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_DMA_Init+0x174>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <HAL_DMA_Init+0x1f0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_DMA_Init+0x174>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <HAL_DMA_Init+0x1f4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d108      	bne.n	800198a <HAL_DMA_Init+0x186>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e007      	b.n	800199a <HAL_DMA_Init+0x196>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800199a:	e02f      	b.n	80019fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199c:	f7ff fd5c 	bl	8001458 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d928      	bls.n	80019fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e246      	b.n	8001e4a <HAL_DMA_Init+0x646>
 80019bc:	40020010 	.word	0x40020010
 80019c0:	40020028 	.word	0x40020028
 80019c4:	40020040 	.word	0x40020040
 80019c8:	40020058 	.word	0x40020058
 80019cc:	40020070 	.word	0x40020070
 80019d0:	40020088 	.word	0x40020088
 80019d4:	400200a0 	.word	0x400200a0
 80019d8:	400200b8 	.word	0x400200b8
 80019dc:	40020410 	.word	0x40020410
 80019e0:	40020428 	.word	0x40020428
 80019e4:	40020440 	.word	0x40020440
 80019e8:	40020458 	.word	0x40020458
 80019ec:	40020470 	.word	0x40020470
 80019f0:	40020488 	.word	0x40020488
 80019f4:	400204a0 	.word	0x400204a0
 80019f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1c8      	bne.n	800199c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4b83      	ldr	r3, [pc, #524]	; (8001c24 <HAL_DMA_Init+0x420>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a22:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d107      	bne.n	8001a60 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a60:	4b71      	ldr	r3, [pc, #452]	; (8001c28 <HAL_DMA_Init+0x424>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b71      	ldr	r3, [pc, #452]	; (8001c2c <HAL_DMA_Init+0x428>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a6c:	d328      	bcc.n	8001ac0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b28      	cmp	r3, #40	; 0x28
 8001a74:	d903      	bls.n	8001a7e <HAL_DMA_Init+0x27a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8001a7c:	d917      	bls.n	8001aae <HAL_DMA_Init+0x2aa>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b3e      	cmp	r3, #62	; 0x3e
 8001a84:	d903      	bls.n	8001a8e <HAL_DMA_Init+0x28a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b42      	cmp	r3, #66	; 0x42
 8001a8c:	d90f      	bls.n	8001aae <HAL_DMA_Init+0x2aa>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b46      	cmp	r3, #70	; 0x46
 8001a94:	d903      	bls.n	8001a9e <HAL_DMA_Init+0x29a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b48      	cmp	r3, #72	; 0x48
 8001a9c:	d907      	bls.n	8001aae <HAL_DMA_Init+0x2aa>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b4e      	cmp	r3, #78	; 0x4e
 8001aa4:	d905      	bls.n	8001ab2 <HAL_DMA_Init+0x2ae>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b52      	cmp	r3, #82	; 0x52
 8001aac:	d801      	bhi.n	8001ab2 <HAL_DMA_Init+0x2ae>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_DMA_Init+0x2b0>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001abe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f023 0307 	bic.w	r3, r3, #7
 8001ad6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d117      	bne.n	8001b1a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f002 f9e5 	bl	8003ecc <DMA_CheckFifoParam>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e197      	b.n	8001e4a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f002 f920 	bl	8003d68 <DMA_CalcBaseAndBitshift>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	223f      	movs	r2, #63	; 0x3f
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	e0cd      	b.n	8001cda <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <HAL_DMA_Init+0x42c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d022      	beq.n	8001b8e <HAL_DMA_Init+0x38a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_DMA_Init+0x430>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01d      	beq.n	8001b8e <HAL_DMA_Init+0x38a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a38      	ldr	r2, [pc, #224]	; (8001c38 <HAL_DMA_Init+0x434>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d018      	beq.n	8001b8e <HAL_DMA_Init+0x38a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a36      	ldr	r2, [pc, #216]	; (8001c3c <HAL_DMA_Init+0x438>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_DMA_Init+0x38a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a35      	ldr	r2, [pc, #212]	; (8001c40 <HAL_DMA_Init+0x43c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00e      	beq.n	8001b8e <HAL_DMA_Init+0x38a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <HAL_DMA_Init+0x440>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d009      	beq.n	8001b8e <HAL_DMA_Init+0x38a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a32      	ldr	r2, [pc, #200]	; (8001c48 <HAL_DMA_Init+0x444>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d004      	beq.n	8001b8e <HAL_DMA_Init+0x38a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a30      	ldr	r2, [pc, #192]	; (8001c4c <HAL_DMA_Init+0x448>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Init+0x38e>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_DMA_Init+0x390>
 8001b92:	2300      	movs	r3, #0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8097 	beq.w	8001cc8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <HAL_DMA_Init+0x42c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d021      	beq.n	8001be8 <HAL_DMA_Init+0x3e4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_DMA_Init+0x430>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01c      	beq.n	8001be8 <HAL_DMA_Init+0x3e4>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <HAL_DMA_Init+0x434>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d017      	beq.n	8001be8 <HAL_DMA_Init+0x3e4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_DMA_Init+0x438>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d012      	beq.n	8001be8 <HAL_DMA_Init+0x3e4>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <HAL_DMA_Init+0x43c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00d      	beq.n	8001be8 <HAL_DMA_Init+0x3e4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_DMA_Init+0x440>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d008      	beq.n	8001be8 <HAL_DMA_Init+0x3e4>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_DMA_Init+0x444>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d003      	beq.n	8001be8 <HAL_DMA_Init+0x3e4>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <HAL_DMA_Init+0x448>)
 8001be6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_DMA_Init+0x44c>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b40      	cmp	r3, #64	; 0x40
 8001c0e:	d021      	beq.n	8001c54 <HAL_DMA_Init+0x450>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d102      	bne.n	8001c1e <HAL_DMA_Init+0x41a>
 8001c18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c1c:	e01b      	b.n	8001c56 <HAL_DMA_Init+0x452>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e019      	b.n	8001c56 <HAL_DMA_Init+0x452>
 8001c22:	bf00      	nop
 8001c24:	fe10803f 	.word	0xfe10803f
 8001c28:	5c001000 	.word	0x5c001000
 8001c2c:	ffff0000 	.word	0xffff0000
 8001c30:	58025408 	.word	0x58025408
 8001c34:	5802541c 	.word	0x5802541c
 8001c38:	58025430 	.word	0x58025430
 8001c3c:	58025444 	.word	0x58025444
 8001c40:	58025458 	.word	0x58025458
 8001c44:	5802546c 	.word	0x5802546c
 8001c48:	58025480 	.word	0x58025480
 8001c4c:	58025494 	.word	0x58025494
 8001c50:	fffe000f 	.word	0xfffe000f
 8001c54:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68d2      	ldr	r2, [r2, #12]
 8001c5a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c84:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b6e      	ldr	r3, [pc, #440]	; (8001e54 <HAL_DMA_Init+0x650>)
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a6e      	ldr	r2, [pc, #440]	; (8001e58 <HAL_DMA_Init+0x654>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	009a      	lsls	r2, r3, #2
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f002 f85b 	bl	8003d68 <DMA_CalcBaseAndBitshift>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	e008      	b.n	8001cda <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2240      	movs	r2, #64	; 0x40
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0b7      	b.n	8001e4a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a5f      	ldr	r2, [pc, #380]	; (8001e5c <HAL_DMA_Init+0x658>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d072      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5d      	ldr	r2, [pc, #372]	; (8001e60 <HAL_DMA_Init+0x65c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d06d      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5c      	ldr	r2, [pc, #368]	; (8001e64 <HAL_DMA_Init+0x660>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d068      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a5a      	ldr	r2, [pc, #360]	; (8001e68 <HAL_DMA_Init+0x664>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d063      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a59      	ldr	r2, [pc, #356]	; (8001e6c <HAL_DMA_Init+0x668>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d05e      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_DMA_Init+0x66c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d059      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a56      	ldr	r2, [pc, #344]	; (8001e74 <HAL_DMA_Init+0x670>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d054      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_DMA_Init+0x674>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d04f      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a53      	ldr	r2, [pc, #332]	; (8001e7c <HAL_DMA_Init+0x678>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d04a      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a51      	ldr	r2, [pc, #324]	; (8001e80 <HAL_DMA_Init+0x67c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d045      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a50      	ldr	r2, [pc, #320]	; (8001e84 <HAL_DMA_Init+0x680>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d040      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <HAL_DMA_Init+0x684>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d03b      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a4d      	ldr	r2, [pc, #308]	; (8001e8c <HAL_DMA_Init+0x688>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d036      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_DMA_Init+0x68c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d031      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_DMA_Init+0x690>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d02c      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a48      	ldr	r2, [pc, #288]	; (8001e98 <HAL_DMA_Init+0x694>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d027      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a47      	ldr	r2, [pc, #284]	; (8001e9c <HAL_DMA_Init+0x698>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d022      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a45      	ldr	r2, [pc, #276]	; (8001ea0 <HAL_DMA_Init+0x69c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01d      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a44      	ldr	r2, [pc, #272]	; (8001ea4 <HAL_DMA_Init+0x6a0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d018      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <HAL_DMA_Init+0x6a4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a41      	ldr	r2, [pc, #260]	; (8001eac <HAL_DMA_Init+0x6a8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00e      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3f      	ldr	r2, [pc, #252]	; (8001eb0 <HAL_DMA_Init+0x6ac>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d009      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a3e      	ldr	r2, [pc, #248]	; (8001eb4 <HAL_DMA_Init+0x6b0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d004      	beq.n	8001dca <HAL_DMA_Init+0x5c6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a3c      	ldr	r2, [pc, #240]	; (8001eb8 <HAL_DMA_Init+0x6b4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_DMA_Init+0x5ca>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_DMA_Init+0x5cc>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d032      	beq.n	8001e3a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f002 f8f5 	bl	8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b80      	cmp	r3, #128	; 0x80
 8001de0:	d102      	bne.n	8001de8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001dfc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_DMA_Init+0x624>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d80c      	bhi.n	8001e28 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f002 f972 	bl	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	e008      	b.n	8001e3a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	a7fdabf8 	.word	0xa7fdabf8
 8001e58:	cccccccd 	.word	0xcccccccd
 8001e5c:	40020010 	.word	0x40020010
 8001e60:	40020028 	.word	0x40020028
 8001e64:	40020040 	.word	0x40020040
 8001e68:	40020058 	.word	0x40020058
 8001e6c:	40020070 	.word	0x40020070
 8001e70:	40020088 	.word	0x40020088
 8001e74:	400200a0 	.word	0x400200a0
 8001e78:	400200b8 	.word	0x400200b8
 8001e7c:	40020410 	.word	0x40020410
 8001e80:	40020428 	.word	0x40020428
 8001e84:	40020440 	.word	0x40020440
 8001e88:	40020458 	.word	0x40020458
 8001e8c:	40020470 	.word	0x40020470
 8001e90:	40020488 	.word	0x40020488
 8001e94:	400204a0 	.word	0x400204a0
 8001e98:	400204b8 	.word	0x400204b8
 8001e9c:	58025408 	.word	0x58025408
 8001ea0:	5802541c 	.word	0x5802541c
 8001ea4:	58025430 	.word	0x58025430
 8001ea8:	58025444 	.word	0x58025444
 8001eac:	58025458 	.word	0x58025458
 8001eb0:	5802546c 	.word	0x5802546c
 8001eb4:	58025480 	.word	0x58025480
 8001eb8:	58025494 	.word	0x58025494

08001ebc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e1a8      	b.n	8002220 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a82      	ldr	r2, [pc, #520]	; (80020dc <HAL_DMA_DeInit+0x220>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d04a      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a80      	ldr	r2, [pc, #512]	; (80020e0 <HAL_DMA_DeInit+0x224>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d045      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7f      	ldr	r2, [pc, #508]	; (80020e4 <HAL_DMA_DeInit+0x228>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d040      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a7d      	ldr	r2, [pc, #500]	; (80020e8 <HAL_DMA_DeInit+0x22c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d03b      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7c      	ldr	r2, [pc, #496]	; (80020ec <HAL_DMA_DeInit+0x230>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d036      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a7a      	ldr	r2, [pc, #488]	; (80020f0 <HAL_DMA_DeInit+0x234>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d031      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a79      	ldr	r2, [pc, #484]	; (80020f4 <HAL_DMA_DeInit+0x238>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d02c      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a77      	ldr	r2, [pc, #476]	; (80020f8 <HAL_DMA_DeInit+0x23c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d027      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a76      	ldr	r2, [pc, #472]	; (80020fc <HAL_DMA_DeInit+0x240>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d022      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a74      	ldr	r2, [pc, #464]	; (8002100 <HAL_DMA_DeInit+0x244>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01d      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a73      	ldr	r2, [pc, #460]	; (8002104 <HAL_DMA_DeInit+0x248>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d018      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a71      	ldr	r2, [pc, #452]	; (8002108 <HAL_DMA_DeInit+0x24c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a70      	ldr	r2, [pc, #448]	; (800210c <HAL_DMA_DeInit+0x250>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00e      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6e      	ldr	r2, [pc, #440]	; (8002110 <HAL_DMA_DeInit+0x254>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6d      	ldr	r2, [pc, #436]	; (8002114 <HAL_DMA_DeInit+0x258>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d004      	beq.n	8001f6e <HAL_DMA_DeInit+0xb2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6b      	ldr	r2, [pc, #428]	; (8002118 <HAL_DMA_DeInit+0x25c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d108      	bne.n	8001f80 <HAL_DMA_DeInit+0xc4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e007      	b.n	8001f90 <HAL_DMA_DeInit+0xd4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a51      	ldr	r2, [pc, #324]	; (80020dc <HAL_DMA_DeInit+0x220>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d04a      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a50      	ldr	r2, [pc, #320]	; (80020e0 <HAL_DMA_DeInit+0x224>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d045      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a4e      	ldr	r2, [pc, #312]	; (80020e4 <HAL_DMA_DeInit+0x228>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d040      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a4d      	ldr	r2, [pc, #308]	; (80020e8 <HAL_DMA_DeInit+0x22c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d03b      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	; (80020ec <HAL_DMA_DeInit+0x230>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d036      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a4a      	ldr	r2, [pc, #296]	; (80020f0 <HAL_DMA_DeInit+0x234>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d031      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a48      	ldr	r2, [pc, #288]	; (80020f4 <HAL_DMA_DeInit+0x238>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02c      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a47      	ldr	r2, [pc, #284]	; (80020f8 <HAL_DMA_DeInit+0x23c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d027      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a45      	ldr	r2, [pc, #276]	; (80020fc <HAL_DMA_DeInit+0x240>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d022      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a44      	ldr	r2, [pc, #272]	; (8002100 <HAL_DMA_DeInit+0x244>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d01d      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a42      	ldr	r2, [pc, #264]	; (8002104 <HAL_DMA_DeInit+0x248>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d018      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a41      	ldr	r2, [pc, #260]	; (8002108 <HAL_DMA_DeInit+0x24c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3f      	ldr	r2, [pc, #252]	; (800210c <HAL_DMA_DeInit+0x250>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00e      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a3e      	ldr	r2, [pc, #248]	; (8002110 <HAL_DMA_DeInit+0x254>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d009      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <HAL_DMA_DeInit+0x258>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d004      	beq.n	8002030 <HAL_DMA_DeInit+0x174>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <HAL_DMA_DeInit+0x25c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_DMA_DeInit+0x178>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_DMA_DeInit+0x17a>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d025      	beq.n	8002086 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2221      	movs	r2, #33	; 0x21
 8002068:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f001 fe7c 	bl	8003d68 <DMA_CalcBaseAndBitshift>
 8002070:	4603      	mov	r3, r0
 8002072:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	223f      	movs	r2, #63	; 0x3f
 800207e:	409a      	lsls	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	e081      	b.n	800218a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a24      	ldr	r2, [pc, #144]	; (800211c <HAL_DMA_DeInit+0x260>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <HAL_DMA_DeInit+0x21a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a22      	ldr	r2, [pc, #136]	; (8002120 <HAL_DMA_DeInit+0x264>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01d      	beq.n	80020d6 <HAL_DMA_DeInit+0x21a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a21      	ldr	r2, [pc, #132]	; (8002124 <HAL_DMA_DeInit+0x268>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d018      	beq.n	80020d6 <HAL_DMA_DeInit+0x21a>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_DMA_DeInit+0x26c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_DMA_DeInit+0x21a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1e      	ldr	r2, [pc, #120]	; (800212c <HAL_DMA_DeInit+0x270>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00e      	beq.n	80020d6 <HAL_DMA_DeInit+0x21a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_DMA_DeInit+0x274>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d009      	beq.n	80020d6 <HAL_DMA_DeInit+0x21a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_DMA_DeInit+0x278>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d004      	beq.n	80020d6 <HAL_DMA_DeInit+0x21a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_DMA_DeInit+0x27c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d132      	bne.n	800213c <HAL_DMA_DeInit+0x280>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e031      	b.n	800213e <HAL_DMA_DeInit+0x282>
 80020da:	bf00      	nop
 80020dc:	40020010 	.word	0x40020010
 80020e0:	40020028 	.word	0x40020028
 80020e4:	40020040 	.word	0x40020040
 80020e8:	40020058 	.word	0x40020058
 80020ec:	40020070 	.word	0x40020070
 80020f0:	40020088 	.word	0x40020088
 80020f4:	400200a0 	.word	0x400200a0
 80020f8:	400200b8 	.word	0x400200b8
 80020fc:	40020410 	.word	0x40020410
 8002100:	40020428 	.word	0x40020428
 8002104:	40020440 	.word	0x40020440
 8002108:	40020458 	.word	0x40020458
 800210c:	40020470 	.word	0x40020470
 8002110:	40020488 	.word	0x40020488
 8002114:	400204a0 	.word	0x400204a0
 8002118:	400204b8 	.word	0x400204b8
 800211c:	58025408 	.word	0x58025408
 8002120:	5802541c 	.word	0x5802541c
 8002124:	58025430 	.word	0x58025430
 8002128:	58025444 	.word	0x58025444
 800212c:	58025458 	.word	0x58025458
 8002130:	5802546c 	.word	0x5802546c
 8002134:	58025480 	.word	0x58025480
 8002138:	58025494 	.word	0x58025494
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d021      	beq.n	8002186 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f001 fdfc 	bl	8003d68 <DMA_CalcBaseAndBitshift>
 8002170:	4603      	mov	r3, r0
 8002172:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2201      	movs	r2, #1
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	e001      	b.n	800218a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e04a      	b.n	8002220 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f001 ff1a 	bl	8003fc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021a8:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00f      	beq.n	80021d2 <HAL_DMA_DeInit+0x316>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d80b      	bhi.n	80021d2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f001 ff9c 	bl	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021d0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e226      	b.n	8002692 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_DMA_Start_IT+0x2a>
 800224e:	2302      	movs	r3, #2
 8002250:	e21f      	b.n	8002692 <HAL_DMA_Start_IT+0x46a>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	f040 820a 	bne.w	800267c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a68      	ldr	r2, [pc, #416]	; (800241c <HAL_DMA_Start_IT+0x1f4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d04a      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a66      	ldr	r2, [pc, #408]	; (8002420 <HAL_DMA_Start_IT+0x1f8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d045      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a65      	ldr	r2, [pc, #404]	; (8002424 <HAL_DMA_Start_IT+0x1fc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d040      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a63      	ldr	r2, [pc, #396]	; (8002428 <HAL_DMA_Start_IT+0x200>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d03b      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a62      	ldr	r2, [pc, #392]	; (800242c <HAL_DMA_Start_IT+0x204>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d036      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a60      	ldr	r2, [pc, #384]	; (8002430 <HAL_DMA_Start_IT+0x208>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d031      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a5f      	ldr	r2, [pc, #380]	; (8002434 <HAL_DMA_Start_IT+0x20c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d02c      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a5d      	ldr	r2, [pc, #372]	; (8002438 <HAL_DMA_Start_IT+0x210>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d027      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a5c      	ldr	r2, [pc, #368]	; (800243c <HAL_DMA_Start_IT+0x214>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a5a      	ldr	r2, [pc, #360]	; (8002440 <HAL_DMA_Start_IT+0x218>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a59      	ldr	r2, [pc, #356]	; (8002444 <HAL_DMA_Start_IT+0x21c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d018      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a57      	ldr	r2, [pc, #348]	; (8002448 <HAL_DMA_Start_IT+0x220>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a56      	ldr	r2, [pc, #344]	; (800244c <HAL_DMA_Start_IT+0x224>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a54      	ldr	r2, [pc, #336]	; (8002450 <HAL_DMA_Start_IT+0x228>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a53      	ldr	r2, [pc, #332]	; (8002454 <HAL_DMA_Start_IT+0x22c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_DMA_Start_IT+0xee>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a51      	ldr	r2, [pc, #324]	; (8002458 <HAL_DMA_Start_IT+0x230>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d108      	bne.n	8002328 <HAL_DMA_Start_IT+0x100>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e007      	b.n	8002338 <HAL_DMA_Start_IT+0x110>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f001 fb66 	bl	8003a10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a34      	ldr	r2, [pc, #208]	; (800241c <HAL_DMA_Start_IT+0x1f4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d04a      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a33      	ldr	r2, [pc, #204]	; (8002420 <HAL_DMA_Start_IT+0x1f8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d045      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a31      	ldr	r2, [pc, #196]	; (8002424 <HAL_DMA_Start_IT+0x1fc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d040      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a30      	ldr	r2, [pc, #192]	; (8002428 <HAL_DMA_Start_IT+0x200>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d03b      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a2e      	ldr	r2, [pc, #184]	; (800242c <HAL_DMA_Start_IT+0x204>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d036      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2d      	ldr	r2, [pc, #180]	; (8002430 <HAL_DMA_Start_IT+0x208>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d031      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <HAL_DMA_Start_IT+0x20c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d02c      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <HAL_DMA_Start_IT+0x210>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d027      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <HAL_DMA_Start_IT+0x214>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d022      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_DMA_Start_IT+0x218>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d01d      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a25      	ldr	r2, [pc, #148]	; (8002444 <HAL_DMA_Start_IT+0x21c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d018      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a24      	ldr	r2, [pc, #144]	; (8002448 <HAL_DMA_Start_IT+0x220>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a22      	ldr	r2, [pc, #136]	; (800244c <HAL_DMA_Start_IT+0x224>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00e      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_DMA_Start_IT+0x228>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <HAL_DMA_Start_IT+0x22c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_DMA_Start_IT+0x1bc>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_DMA_Start_IT+0x230>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_DMA_Start_IT+0x1c0>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_DMA_Start_IT+0x1c2>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d036      	beq.n	800245c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 021e 	bic.w	r2, r3, #30
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0216 	orr.w	r2, r2, #22
 8002400:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d03e      	beq.n	8002488 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0208 	orr.w	r2, r2, #8
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e035      	b.n	8002488 <HAL_DMA_Start_IT+0x260>
 800241c:	40020010 	.word	0x40020010
 8002420:	40020028 	.word	0x40020028
 8002424:	40020040 	.word	0x40020040
 8002428:	40020058 	.word	0x40020058
 800242c:	40020070 	.word	0x40020070
 8002430:	40020088 	.word	0x40020088
 8002434:	400200a0 	.word	0x400200a0
 8002438:	400200b8 	.word	0x400200b8
 800243c:	40020410 	.word	0x40020410
 8002440:	40020428 	.word	0x40020428
 8002444:	40020440 	.word	0x40020440
 8002448:	40020458 	.word	0x40020458
 800244c:	40020470 	.word	0x40020470
 8002450:	40020488 	.word	0x40020488
 8002454:	400204a0 	.word	0x400204a0
 8002458:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 020e 	bic.w	r2, r3, #14
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 020a 	orr.w	r2, r2, #10
 800246e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0204 	orr.w	r2, r2, #4
 8002486:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a83      	ldr	r2, [pc, #524]	; (800269c <HAL_DMA_Start_IT+0x474>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d072      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a82      	ldr	r2, [pc, #520]	; (80026a0 <HAL_DMA_Start_IT+0x478>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d06d      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a80      	ldr	r2, [pc, #512]	; (80026a4 <HAL_DMA_Start_IT+0x47c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d068      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a7f      	ldr	r2, [pc, #508]	; (80026a8 <HAL_DMA_Start_IT+0x480>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d063      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a7d      	ldr	r2, [pc, #500]	; (80026ac <HAL_DMA_Start_IT+0x484>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d05e      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7c      	ldr	r2, [pc, #496]	; (80026b0 <HAL_DMA_Start_IT+0x488>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d059      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a7a      	ldr	r2, [pc, #488]	; (80026b4 <HAL_DMA_Start_IT+0x48c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d054      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a79      	ldr	r2, [pc, #484]	; (80026b8 <HAL_DMA_Start_IT+0x490>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d04f      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a77      	ldr	r2, [pc, #476]	; (80026bc <HAL_DMA_Start_IT+0x494>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d04a      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a76      	ldr	r2, [pc, #472]	; (80026c0 <HAL_DMA_Start_IT+0x498>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d045      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a74      	ldr	r2, [pc, #464]	; (80026c4 <HAL_DMA_Start_IT+0x49c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d040      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a73      	ldr	r2, [pc, #460]	; (80026c8 <HAL_DMA_Start_IT+0x4a0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d03b      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a71      	ldr	r2, [pc, #452]	; (80026cc <HAL_DMA_Start_IT+0x4a4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d036      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a70      	ldr	r2, [pc, #448]	; (80026d0 <HAL_DMA_Start_IT+0x4a8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d031      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a6e      	ldr	r2, [pc, #440]	; (80026d4 <HAL_DMA_Start_IT+0x4ac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d02c      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6d      	ldr	r2, [pc, #436]	; (80026d8 <HAL_DMA_Start_IT+0x4b0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d027      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6b      	ldr	r2, [pc, #428]	; (80026dc <HAL_DMA_Start_IT+0x4b4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d022      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6a      	ldr	r2, [pc, #424]	; (80026e0 <HAL_DMA_Start_IT+0x4b8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d01d      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <HAL_DMA_Start_IT+0x4bc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d018      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a67      	ldr	r2, [pc, #412]	; (80026e8 <HAL_DMA_Start_IT+0x4c0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d013      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a65      	ldr	r2, [pc, #404]	; (80026ec <HAL_DMA_Start_IT+0x4c4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00e      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a64      	ldr	r2, [pc, #400]	; (80026f0 <HAL_DMA_Start_IT+0x4c8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a62      	ldr	r2, [pc, #392]	; (80026f4 <HAL_DMA_Start_IT+0x4cc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_DMA_Start_IT+0x350>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a61      	ldr	r2, [pc, #388]	; (80026f8 <HAL_DMA_Start_IT+0x4d0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d101      	bne.n	800257c <HAL_DMA_Start_IT+0x354>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_DMA_Start_IT+0x356>
 800257c:	2300      	movs	r3, #0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01a      	beq.n	80025b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800259e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a37      	ldr	r2, [pc, #220]	; (800269c <HAL_DMA_Start_IT+0x474>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d04a      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a36      	ldr	r2, [pc, #216]	; (80026a0 <HAL_DMA_Start_IT+0x478>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d045      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a34      	ldr	r2, [pc, #208]	; (80026a4 <HAL_DMA_Start_IT+0x47c>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d040      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a33      	ldr	r2, [pc, #204]	; (80026a8 <HAL_DMA_Start_IT+0x480>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d03b      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a31      	ldr	r2, [pc, #196]	; (80026ac <HAL_DMA_Start_IT+0x484>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d036      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <HAL_DMA_Start_IT+0x488>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d031      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2e      	ldr	r2, [pc, #184]	; (80026b4 <HAL_DMA_Start_IT+0x48c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02c      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2d      	ldr	r2, [pc, #180]	; (80026b8 <HAL_DMA_Start_IT+0x490>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d027      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2b      	ldr	r2, [pc, #172]	; (80026bc <HAL_DMA_Start_IT+0x494>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d022      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2a      	ldr	r2, [pc, #168]	; (80026c0 <HAL_DMA_Start_IT+0x498>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d01d      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <HAL_DMA_Start_IT+0x49c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d018      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <HAL_DMA_Start_IT+0x4a0>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a25      	ldr	r2, [pc, #148]	; (80026cc <HAL_DMA_Start_IT+0x4a4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00e      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <HAL_DMA_Start_IT+0x4a8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d009      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a22      	ldr	r2, [pc, #136]	; (80026d4 <HAL_DMA_Start_IT+0x4ac>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d004      	beq.n	8002658 <HAL_DMA_Start_IT+0x430>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a21      	ldr	r2, [pc, #132]	; (80026d8 <HAL_DMA_Start_IT+0x4b0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <HAL_DMA_Start_IT+0x442>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e012      	b.n	8002690 <HAL_DMA_Start_IT+0x468>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e009      	b.n	8002690 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002682:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002690:	7dfb      	ldrb	r3, [r7, #23]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40020010 	.word	0x40020010
 80026a0:	40020028 	.word	0x40020028
 80026a4:	40020040 	.word	0x40020040
 80026a8:	40020058 	.word	0x40020058
 80026ac:	40020070 	.word	0x40020070
 80026b0:	40020088 	.word	0x40020088
 80026b4:	400200a0 	.word	0x400200a0
 80026b8:	400200b8 	.word	0x400200b8
 80026bc:	40020410 	.word	0x40020410
 80026c0:	40020428 	.word	0x40020428
 80026c4:	40020440 	.word	0x40020440
 80026c8:	40020458 	.word	0x40020458
 80026cc:	40020470 	.word	0x40020470
 80026d0:	40020488 	.word	0x40020488
 80026d4:	400204a0 	.word	0x400204a0
 80026d8:	400204b8 	.word	0x400204b8
 80026dc:	58025408 	.word	0x58025408
 80026e0:	5802541c 	.word	0x5802541c
 80026e4:	58025430 	.word	0x58025430
 80026e8:	58025444 	.word	0x58025444
 80026ec:	58025458 	.word	0x58025458
 80026f0:	5802546c 	.word	0x5802546c
 80026f4:	58025480 	.word	0x58025480
 80026f8:	58025494 	.word	0x58025494

080026fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e237      	b.n	8002b7e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d004      	beq.n	8002724 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e22c      	b.n	8002b7e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5c      	ldr	r2, [pc, #368]	; (800289c <HAL_DMA_Abort_IT+0x1a0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d04a      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5b      	ldr	r2, [pc, #364]	; (80028a0 <HAL_DMA_Abort_IT+0x1a4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d045      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a59      	ldr	r2, [pc, #356]	; (80028a4 <HAL_DMA_Abort_IT+0x1a8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d040      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <HAL_DMA_Abort_IT+0x1ac>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d03b      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_DMA_Abort_IT+0x1b0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d036      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a55      	ldr	r2, [pc, #340]	; (80028b0 <HAL_DMA_Abort_IT+0x1b4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d031      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a53      	ldr	r2, [pc, #332]	; (80028b4 <HAL_DMA_Abort_IT+0x1b8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d02c      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_DMA_Abort_IT+0x1bc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d027      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a50      	ldr	r2, [pc, #320]	; (80028bc <HAL_DMA_Abort_IT+0x1c0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d022      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a4f      	ldr	r2, [pc, #316]	; (80028c0 <HAL_DMA_Abort_IT+0x1c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d01d      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a4d      	ldr	r2, [pc, #308]	; (80028c4 <HAL_DMA_Abort_IT+0x1c8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d018      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a4c      	ldr	r2, [pc, #304]	; (80028c8 <HAL_DMA_Abort_IT+0x1cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_DMA_Abort_IT+0x1d0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00e      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a49      	ldr	r2, [pc, #292]	; (80028d0 <HAL_DMA_Abort_IT+0x1d4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_DMA_Abort_IT+0x1d8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_DMA_Abort_IT+0xc8>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a46      	ldr	r2, [pc, #280]	; (80028d8 <HAL_DMA_Abort_IT+0x1dc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d101      	bne.n	80027c8 <HAL_DMA_Abort_IT+0xcc>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_DMA_Abort_IT+0xce>
 80027c8:	2300      	movs	r3, #0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8086 	beq.w	80028dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2204      	movs	r2, #4
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2f      	ldr	r2, [pc, #188]	; (800289c <HAL_DMA_Abort_IT+0x1a0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d04a      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2e      	ldr	r2, [pc, #184]	; (80028a0 <HAL_DMA_Abort_IT+0x1a4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d045      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a2c      	ldr	r2, [pc, #176]	; (80028a4 <HAL_DMA_Abort_IT+0x1a8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d040      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2b      	ldr	r2, [pc, #172]	; (80028a8 <HAL_DMA_Abort_IT+0x1ac>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d03b      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a29      	ldr	r2, [pc, #164]	; (80028ac <HAL_DMA_Abort_IT+0x1b0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d036      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a28      	ldr	r2, [pc, #160]	; (80028b0 <HAL_DMA_Abort_IT+0x1b4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d031      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a26      	ldr	r2, [pc, #152]	; (80028b4 <HAL_DMA_Abort_IT+0x1b8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02c      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <HAL_DMA_Abort_IT+0x1bc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d027      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <HAL_DMA_Abort_IT+0x1c0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d022      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_DMA_Abort_IT+0x1c4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01d      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <HAL_DMA_Abort_IT+0x1c8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d018      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_DMA_Abort_IT+0x1cc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_DMA_Abort_IT+0x1d0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00e      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_DMA_Abort_IT+0x1d4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1a      	ldr	r2, [pc, #104]	; (80028d4 <HAL_DMA_Abort_IT+0x1d8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_DMA_Abort_IT+0x17c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_DMA_Abort_IT+0x1dc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d108      	bne.n	800288a <HAL_DMA_Abort_IT+0x18e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e178      	b.n	8002b7c <HAL_DMA_Abort_IT+0x480>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e16f      	b.n	8002b7c <HAL_DMA_Abort_IT+0x480>
 800289c:	40020010 	.word	0x40020010
 80028a0:	40020028 	.word	0x40020028
 80028a4:	40020040 	.word	0x40020040
 80028a8:	40020058 	.word	0x40020058
 80028ac:	40020070 	.word	0x40020070
 80028b0:	40020088 	.word	0x40020088
 80028b4:	400200a0 	.word	0x400200a0
 80028b8:	400200b8 	.word	0x400200b8
 80028bc:	40020410 	.word	0x40020410
 80028c0:	40020428 	.word	0x40020428
 80028c4:	40020440 	.word	0x40020440
 80028c8:	40020458 	.word	0x40020458
 80028cc:	40020470 	.word	0x40020470
 80028d0:	40020488 	.word	0x40020488
 80028d4:	400204a0 	.word	0x400204a0
 80028d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 020e 	bic.w	r2, r2, #14
 80028ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a6c      	ldr	r2, [pc, #432]	; (8002aa4 <HAL_DMA_Abort_IT+0x3a8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d04a      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a6b      	ldr	r2, [pc, #428]	; (8002aa8 <HAL_DMA_Abort_IT+0x3ac>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d045      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a69      	ldr	r2, [pc, #420]	; (8002aac <HAL_DMA_Abort_IT+0x3b0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d040      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a68      	ldr	r2, [pc, #416]	; (8002ab0 <HAL_DMA_Abort_IT+0x3b4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d03b      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a66      	ldr	r2, [pc, #408]	; (8002ab4 <HAL_DMA_Abort_IT+0x3b8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d036      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a65      	ldr	r2, [pc, #404]	; (8002ab8 <HAL_DMA_Abort_IT+0x3bc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d031      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a63      	ldr	r2, [pc, #396]	; (8002abc <HAL_DMA_Abort_IT+0x3c0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d02c      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a62      	ldr	r2, [pc, #392]	; (8002ac0 <HAL_DMA_Abort_IT+0x3c4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d027      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a60      	ldr	r2, [pc, #384]	; (8002ac4 <HAL_DMA_Abort_IT+0x3c8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d022      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <HAL_DMA_Abort_IT+0x3cc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d01d      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5d      	ldr	r2, [pc, #372]	; (8002acc <HAL_DMA_Abort_IT+0x3d0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d018      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5c      	ldr	r2, [pc, #368]	; (8002ad0 <HAL_DMA_Abort_IT+0x3d4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a5a      	ldr	r2, [pc, #360]	; (8002ad4 <HAL_DMA_Abort_IT+0x3d8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00e      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a59      	ldr	r2, [pc, #356]	; (8002ad8 <HAL_DMA_Abort_IT+0x3dc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_DMA_Abort_IT+0x3e0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_DMA_Abort_IT+0x290>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_DMA_Abort_IT+0x3e4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d108      	bne.n	800299e <HAL_DMA_Abort_IT+0x2a2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	e007      	b.n	80029ae <HAL_DMA_Abort_IT+0x2b2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0201 	bic.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3c      	ldr	r2, [pc, #240]	; (8002aa4 <HAL_DMA_Abort_IT+0x3a8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d072      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <HAL_DMA_Abort_IT+0x3ac>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d06d      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a39      	ldr	r2, [pc, #228]	; (8002aac <HAL_DMA_Abort_IT+0x3b0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d068      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a37      	ldr	r2, [pc, #220]	; (8002ab0 <HAL_DMA_Abort_IT+0x3b4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d063      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a36      	ldr	r2, [pc, #216]	; (8002ab4 <HAL_DMA_Abort_IT+0x3b8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d05e      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <HAL_DMA_Abort_IT+0x3bc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d059      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_DMA_Abort_IT+0x3c0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d054      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <HAL_DMA_Abort_IT+0x3c4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04f      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a30      	ldr	r2, [pc, #192]	; (8002ac4 <HAL_DMA_Abort_IT+0x3c8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d04a      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ac8 <HAL_DMA_Abort_IT+0x3cc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d045      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <HAL_DMA_Abort_IT+0x3d0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d040      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_DMA_Abort_IT+0x3d4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d03b      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <HAL_DMA_Abort_IT+0x3d8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d036      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_DMA_Abort_IT+0x3dc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d031      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a27      	ldr	r2, [pc, #156]	; (8002adc <HAL_DMA_Abort_IT+0x3e0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d02c      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <HAL_DMA_Abort_IT+0x3e4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d027      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <HAL_DMA_Abort_IT+0x3e8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <HAL_DMA_Abort_IT+0x3ec>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01d      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <HAL_DMA_Abort_IT+0x3f0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d018      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <HAL_DMA_Abort_IT+0x3f4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_DMA_Abort_IT+0x3f8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	; (8002af8 <HAL_DMA_Abort_IT+0x3fc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <HAL_DMA_Abort_IT+0x400>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x3a2>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <HAL_DMA_Abort_IT+0x404>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d132      	bne.n	8002b04 <HAL_DMA_Abort_IT+0x408>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e031      	b.n	8002b06 <HAL_DMA_Abort_IT+0x40a>
 8002aa2:	bf00      	nop
 8002aa4:	40020010 	.word	0x40020010
 8002aa8:	40020028 	.word	0x40020028
 8002aac:	40020040 	.word	0x40020040
 8002ab0:	40020058 	.word	0x40020058
 8002ab4:	40020070 	.word	0x40020070
 8002ab8:	40020088 	.word	0x40020088
 8002abc:	400200a0 	.word	0x400200a0
 8002ac0:	400200b8 	.word	0x400200b8
 8002ac4:	40020410 	.word	0x40020410
 8002ac8:	40020428 	.word	0x40020428
 8002acc:	40020440 	.word	0x40020440
 8002ad0:	40020458 	.word	0x40020458
 8002ad4:	40020470 	.word	0x40020470
 8002ad8:	40020488 	.word	0x40020488
 8002adc:	400204a0 	.word	0x400204a0
 8002ae0:	400204b8 	.word	0x400204b8
 8002ae4:	58025408 	.word	0x58025408
 8002ae8:	5802541c 	.word	0x5802541c
 8002aec:	58025430 	.word	0x58025430
 8002af0:	58025444 	.word	0x58025444
 8002af4:	58025458 	.word	0x58025458
 8002af8:	5802546c 	.word	0x5802546c
 8002afc:	58025480 	.word	0x58025480
 8002b00:	58025494 	.word	0x58025494
 8002b04:	2300      	movs	r3, #0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d028      	beq.n	8002b5c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b18:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2201      	movs	r2, #1
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b38:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b50:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b5a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop

08002b88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b94:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <HAL_DMA_IRQHandler+0x1ac>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <HAL_DMA_IRQHandler+0x1b0>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0a9b      	lsrs	r3, r3, #10
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a5f      	ldr	r2, [pc, #380]	; (8002d3c <HAL_DMA_IRQHandler+0x1b4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04a      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a5d      	ldr	r2, [pc, #372]	; (8002d40 <HAL_DMA_IRQHandler+0x1b8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d045      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5c      	ldr	r2, [pc, #368]	; (8002d44 <HAL_DMA_IRQHandler+0x1bc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d040      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5a      	ldr	r2, [pc, #360]	; (8002d48 <HAL_DMA_IRQHandler+0x1c0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d03b      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a59      	ldr	r2, [pc, #356]	; (8002d4c <HAL_DMA_IRQHandler+0x1c4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d036      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a57      	ldr	r2, [pc, #348]	; (8002d50 <HAL_DMA_IRQHandler+0x1c8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d031      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a56      	ldr	r2, [pc, #344]	; (8002d54 <HAL_DMA_IRQHandler+0x1cc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d02c      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a54      	ldr	r2, [pc, #336]	; (8002d58 <HAL_DMA_IRQHandler+0x1d0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d027      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a53      	ldr	r2, [pc, #332]	; (8002d5c <HAL_DMA_IRQHandler+0x1d4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a51      	ldr	r2, [pc, #324]	; (8002d60 <HAL_DMA_IRQHandler+0x1d8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01d      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a50      	ldr	r2, [pc, #320]	; (8002d64 <HAL_DMA_IRQHandler+0x1dc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a4e      	ldr	r2, [pc, #312]	; (8002d68 <HAL_DMA_IRQHandler+0x1e0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4d      	ldr	r2, [pc, #308]	; (8002d6c <HAL_DMA_IRQHandler+0x1e4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	; (8002d70 <HAL_DMA_IRQHandler+0x1e8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <HAL_DMA_IRQHandler+0x1ec>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_DMA_IRQHandler+0xd2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a48      	ldr	r2, [pc, #288]	; (8002d78 <HAL_DMA_IRQHandler+0x1f0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_DMA_IRQHandler+0xd6>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_DMA_IRQHandler+0xd8>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 842b 	beq.w	80034bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2208      	movs	r2, #8
 8002c70:	409a      	lsls	r2, r3
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80a2 	beq.w	8002dc0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2e      	ldr	r2, [pc, #184]	; (8002d3c <HAL_DMA_IRQHandler+0x1b4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d04a      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2d      	ldr	r2, [pc, #180]	; (8002d40 <HAL_DMA_IRQHandler+0x1b8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d045      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2b      	ldr	r2, [pc, #172]	; (8002d44 <HAL_DMA_IRQHandler+0x1bc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d040      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <HAL_DMA_IRQHandler+0x1c0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d03b      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <HAL_DMA_IRQHandler+0x1c4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d036      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <HAL_DMA_IRQHandler+0x1c8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d031      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a25      	ldr	r2, [pc, #148]	; (8002d54 <HAL_DMA_IRQHandler+0x1cc>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02c      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_DMA_IRQHandler+0x1d0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d027      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_DMA_IRQHandler+0x1d4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d022      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <HAL_DMA_IRQHandler+0x1d8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d01d      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_DMA_IRQHandler+0x1dc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d018      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_DMA_IRQHandler+0x1e0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d013      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_DMA_IRQHandler+0x1e4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00e      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_DMA_IRQHandler+0x1e8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d009      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_DMA_IRQHandler+0x1ec>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x194>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <HAL_DMA_IRQHandler+0x1f0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d12f      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x1f4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	e02e      	b.n	8002d90 <HAL_DMA_IRQHandler+0x208>
 8002d32:	bf00      	nop
 8002d34:	24000000 	.word	0x24000000
 8002d38:	1b4e81b5 	.word	0x1b4e81b5
 8002d3c:	40020010 	.word	0x40020010
 8002d40:	40020028 	.word	0x40020028
 8002d44:	40020040 	.word	0x40020040
 8002d48:	40020058 	.word	0x40020058
 8002d4c:	40020070 	.word	0x40020070
 8002d50:	40020088 	.word	0x40020088
 8002d54:	400200a0 	.word	0x400200a0
 8002d58:	400200b8 	.word	0x400200b8
 8002d5c:	40020410 	.word	0x40020410
 8002d60:	40020428 	.word	0x40020428
 8002d64:	40020440 	.word	0x40020440
 8002d68:	40020458 	.word	0x40020458
 8002d6c:	40020470 	.word	0x40020470
 8002d70:	40020488 	.word	0x40020488
 8002d74:	400204a0 	.word	0x400204a0
 8002d78:	400204b8 	.word	0x400204b8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0204 	bic.w	r2, r2, #4
 8002da2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2208      	movs	r2, #8
 8002dae:	409a      	lsls	r2, r3
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d06e      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a69      	ldr	r2, [pc, #420]	; (8002f80 <HAL_DMA_IRQHandler+0x3f8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d04a      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a67      	ldr	r2, [pc, #412]	; (8002f84 <HAL_DMA_IRQHandler+0x3fc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d045      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a66      	ldr	r2, [pc, #408]	; (8002f88 <HAL_DMA_IRQHandler+0x400>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d040      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a64      	ldr	r2, [pc, #400]	; (8002f8c <HAL_DMA_IRQHandler+0x404>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d03b      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a63      	ldr	r2, [pc, #396]	; (8002f90 <HAL_DMA_IRQHandler+0x408>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d036      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a61      	ldr	r2, [pc, #388]	; (8002f94 <HAL_DMA_IRQHandler+0x40c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d031      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a60      	ldr	r2, [pc, #384]	; (8002f98 <HAL_DMA_IRQHandler+0x410>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d02c      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a5e      	ldr	r2, [pc, #376]	; (8002f9c <HAL_DMA_IRQHandler+0x414>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d027      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a5d      	ldr	r2, [pc, #372]	; (8002fa0 <HAL_DMA_IRQHandler+0x418>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a5b      	ldr	r2, [pc, #364]	; (8002fa4 <HAL_DMA_IRQHandler+0x41c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01d      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5a      	ldr	r2, [pc, #360]	; (8002fa8 <HAL_DMA_IRQHandler+0x420>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d018      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a58      	ldr	r2, [pc, #352]	; (8002fac <HAL_DMA_IRQHandler+0x424>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a57      	ldr	r2, [pc, #348]	; (8002fb0 <HAL_DMA_IRQHandler+0x428>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a55      	ldr	r2, [pc, #340]	; (8002fb4 <HAL_DMA_IRQHandler+0x42c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a54      	ldr	r2, [pc, #336]	; (8002fb8 <HAL_DMA_IRQHandler+0x430>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x2ee>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_DMA_IRQHandler+0x434>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10a      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x304>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e003      	b.n	8002e94 <HAL_DMA_IRQHandler+0x30c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00d      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f043 0202 	orr.w	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 808f 	beq.w	8002fe8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <HAL_DMA_IRQHandler+0x3f8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d04a      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <HAL_DMA_IRQHandler+0x3fc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d045      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <HAL_DMA_IRQHandler+0x400>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d040      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a27      	ldr	r2, [pc, #156]	; (8002f8c <HAL_DMA_IRQHandler+0x404>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d03b      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <HAL_DMA_IRQHandler+0x408>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d036      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a24      	ldr	r2, [pc, #144]	; (8002f94 <HAL_DMA_IRQHandler+0x40c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d031      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <HAL_DMA_IRQHandler+0x410>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d02c      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a21      	ldr	r2, [pc, #132]	; (8002f9c <HAL_DMA_IRQHandler+0x414>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d027      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a20      	ldr	r2, [pc, #128]	; (8002fa0 <HAL_DMA_IRQHandler+0x418>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_DMA_IRQHandler+0x41c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01d      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <HAL_DMA_IRQHandler+0x420>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d018      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1b      	ldr	r2, [pc, #108]	; (8002fac <HAL_DMA_IRQHandler+0x424>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_DMA_IRQHandler+0x428>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00e      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_DMA_IRQHandler+0x42c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_DMA_IRQHandler+0x430>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x3e2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_DMA_IRQHandler+0x434>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d12a      	bne.n	8002fc0 <HAL_DMA_IRQHandler+0x438>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e023      	b.n	8002fc8 <HAL_DMA_IRQHandler+0x440>
 8002f80:	40020010 	.word	0x40020010
 8002f84:	40020028 	.word	0x40020028
 8002f88:	40020040 	.word	0x40020040
 8002f8c:	40020058 	.word	0x40020058
 8002f90:	40020070 	.word	0x40020070
 8002f94:	40020088 	.word	0x40020088
 8002f98:	400200a0 	.word	0x400200a0
 8002f9c:	400200b8 	.word	0x400200b8
 8002fa0:	40020410 	.word	0x40020410
 8002fa4:	40020428 	.word	0x40020428
 8002fa8:	40020440 	.word	0x40020440
 8002fac:	40020458 	.word	0x40020458
 8002fb0:	40020470 	.word	0x40020470
 8002fb4:	40020488 	.word	0x40020488
 8002fb8:	400204a0 	.word	0x400204a0
 8002fbc:	400204b8 	.word	0x400204b8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f043 0204 	orr.w	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a6 	beq.w	800314a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a85      	ldr	r2, [pc, #532]	; (8003218 <HAL_DMA_IRQHandler+0x690>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d04a      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a83      	ldr	r2, [pc, #524]	; (800321c <HAL_DMA_IRQHandler+0x694>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d045      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a82      	ldr	r2, [pc, #520]	; (8003220 <HAL_DMA_IRQHandler+0x698>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d040      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a80      	ldr	r2, [pc, #512]	; (8003224 <HAL_DMA_IRQHandler+0x69c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d03b      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a7f      	ldr	r2, [pc, #508]	; (8003228 <HAL_DMA_IRQHandler+0x6a0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d036      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a7d      	ldr	r2, [pc, #500]	; (800322c <HAL_DMA_IRQHandler+0x6a4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d031      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7c      	ldr	r2, [pc, #496]	; (8003230 <HAL_DMA_IRQHandler+0x6a8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d02c      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7a      	ldr	r2, [pc, #488]	; (8003234 <HAL_DMA_IRQHandler+0x6ac>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d027      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a79      	ldr	r2, [pc, #484]	; (8003238 <HAL_DMA_IRQHandler+0x6b0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a77      	ldr	r2, [pc, #476]	; (800323c <HAL_DMA_IRQHandler+0x6b4>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01d      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a76      	ldr	r2, [pc, #472]	; (8003240 <HAL_DMA_IRQHandler+0x6b8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d018      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a74      	ldr	r2, [pc, #464]	; (8003244 <HAL_DMA_IRQHandler+0x6bc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a73      	ldr	r2, [pc, #460]	; (8003248 <HAL_DMA_IRQHandler+0x6c0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00e      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a71      	ldr	r2, [pc, #452]	; (800324c <HAL_DMA_IRQHandler+0x6c4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a70      	ldr	r2, [pc, #448]	; (8003250 <HAL_DMA_IRQHandler+0x6c8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_DMA_IRQHandler+0x516>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a6e      	ldr	r2, [pc, #440]	; (8003254 <HAL_DMA_IRQHandler+0x6cc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10a      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x52c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e009      	b.n	80030c8 <HAL_DMA_IRQHandler+0x540>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf14      	ite	ne
 80030c2:	2301      	movne	r3, #1
 80030c4:	2300      	moveq	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d03e      	beq.n	800314a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2210      	movs	r2, #16
 80030d6:	409a      	lsls	r2, r3
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d018      	beq.n	800311c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d108      	bne.n	800310a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d024      	beq.n	800314a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
 8003108:	e01f      	b.n	800314a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01b      	beq.n	800314a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
 800311a:	e016      	b.n	800314a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0208 	bic.w	r2, r2, #8
 8003138:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2220      	movs	r2, #32
 8003154:	409a      	lsls	r2, r3
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8110 	beq.w	8003380 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2c      	ldr	r2, [pc, #176]	; (8003218 <HAL_DMA_IRQHandler+0x690>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d04a      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2b      	ldr	r2, [pc, #172]	; (800321c <HAL_DMA_IRQHandler+0x694>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d045      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a29      	ldr	r2, [pc, #164]	; (8003220 <HAL_DMA_IRQHandler+0x698>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d040      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a28      	ldr	r2, [pc, #160]	; (8003224 <HAL_DMA_IRQHandler+0x69c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d03b      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a26      	ldr	r2, [pc, #152]	; (8003228 <HAL_DMA_IRQHandler+0x6a0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d036      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a25      	ldr	r2, [pc, #148]	; (800322c <HAL_DMA_IRQHandler+0x6a4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d031      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a23      	ldr	r2, [pc, #140]	; (8003230 <HAL_DMA_IRQHandler+0x6a8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d02c      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a22      	ldr	r2, [pc, #136]	; (8003234 <HAL_DMA_IRQHandler+0x6ac>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d027      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a20      	ldr	r2, [pc, #128]	; (8003238 <HAL_DMA_IRQHandler+0x6b0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d022      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1f      	ldr	r2, [pc, #124]	; (800323c <HAL_DMA_IRQHandler+0x6b4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d01d      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <HAL_DMA_IRQHandler+0x6b8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d018      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <HAL_DMA_IRQHandler+0x6bc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <HAL_DMA_IRQHandler+0x6c0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a19      	ldr	r2, [pc, #100]	; (800324c <HAL_DMA_IRQHandler+0x6c4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a17      	ldr	r2, [pc, #92]	; (8003250 <HAL_DMA_IRQHandler+0x6c8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_DMA_IRQHandler+0x678>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_DMA_IRQHandler+0x6cc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d12b      	bne.n	8003258 <HAL_DMA_IRQHandler+0x6d0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	e02a      	b.n	800326c <HAL_DMA_IRQHandler+0x6e4>
 8003216:	bf00      	nop
 8003218:	40020010 	.word	0x40020010
 800321c:	40020028 	.word	0x40020028
 8003220:	40020040 	.word	0x40020040
 8003224:	40020058 	.word	0x40020058
 8003228:	40020070 	.word	0x40020070
 800322c:	40020088 	.word	0x40020088
 8003230:	400200a0 	.word	0x400200a0
 8003234:	400200b8 	.word	0x400200b8
 8003238:	40020410 	.word	0x40020410
 800323c:	40020428 	.word	0x40020428
 8003240:	40020440 	.word	0x40020440
 8003244:	40020458 	.word	0x40020458
 8003248:	40020470 	.word	0x40020470
 800324c:	40020488 	.word	0x40020488
 8003250:	400204a0 	.word	0x400204a0
 8003254:	400204b8 	.word	0x400204b8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8087 	beq.w	8003380 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2220      	movs	r2, #32
 800327c:	409a      	lsls	r2, r3
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b04      	cmp	r3, #4
 800328c:	d139      	bne.n	8003302 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0216 	bic.w	r2, r2, #22
 800329c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_DMA_IRQHandler+0x736>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0208 	bic.w	r2, r2, #8
 80032cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	223f      	movs	r2, #63	; 0x3f
 80032d8:	409a      	lsls	r2, r3
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 834a 	beq.w	800398c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
          }
          return;
 8003300:	e344      	b.n	800398c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d018      	beq.n	8003342 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02c      	beq.n	8003380 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
 800332e:	e027      	b.n	8003380 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d023      	beq.n	8003380 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
 8003340:	e01e      	b.n	8003380 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10f      	bne.n	8003370 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0210 	bic.w	r2, r2, #16
 800335e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8306 	beq.w	8003996 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8088 	beq.w	80034a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2204      	movs	r2, #4
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a7a      	ldr	r2, [pc, #488]	; (8003590 <HAL_DMA_IRQHandler+0xa08>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d04a      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a79      	ldr	r2, [pc, #484]	; (8003594 <HAL_DMA_IRQHandler+0xa0c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d045      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a77      	ldr	r2, [pc, #476]	; (8003598 <HAL_DMA_IRQHandler+0xa10>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d040      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a76      	ldr	r2, [pc, #472]	; (800359c <HAL_DMA_IRQHandler+0xa14>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d03b      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a74      	ldr	r2, [pc, #464]	; (80035a0 <HAL_DMA_IRQHandler+0xa18>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d036      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a73      	ldr	r2, [pc, #460]	; (80035a4 <HAL_DMA_IRQHandler+0xa1c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d031      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a71      	ldr	r2, [pc, #452]	; (80035a8 <HAL_DMA_IRQHandler+0xa20>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d02c      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a70      	ldr	r2, [pc, #448]	; (80035ac <HAL_DMA_IRQHandler+0xa24>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d027      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a6e      	ldr	r2, [pc, #440]	; (80035b0 <HAL_DMA_IRQHandler+0xa28>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d022      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6d      	ldr	r2, [pc, #436]	; (80035b4 <HAL_DMA_IRQHandler+0xa2c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d01d      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a6b      	ldr	r2, [pc, #428]	; (80035b8 <HAL_DMA_IRQHandler+0xa30>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d018      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6a      	ldr	r2, [pc, #424]	; (80035bc <HAL_DMA_IRQHandler+0xa34>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a68      	ldr	r2, [pc, #416]	; (80035c0 <HAL_DMA_IRQHandler+0xa38>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00e      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a67      	ldr	r2, [pc, #412]	; (80035c4 <HAL_DMA_IRQHandler+0xa3c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d009      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a65      	ldr	r2, [pc, #404]	; (80035c8 <HAL_DMA_IRQHandler+0xa40>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_DMA_IRQHandler+0x8b8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a64      	ldr	r2, [pc, #400]	; (80035cc <HAL_DMA_IRQHandler+0xa44>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <HAL_DMA_IRQHandler+0x8ca>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e007      	b.n	8003462 <HAL_DMA_IRQHandler+0x8da>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3301      	adds	r3, #1
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346a:	429a      	cmp	r2, r3
 800346c:	d307      	bcc.n	800347e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f2      	bne.n	8003462 <HAL_DMA_IRQHandler+0x8da>
 800347c:	e000      	b.n	8003480 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800347e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2203      	movs	r2, #3
 8003492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003496:	e003      	b.n	80034a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8272 	beq.w	8003996 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
 80034ba:	e26c      	b.n	8003996 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a43      	ldr	r2, [pc, #268]	; (80035d0 <HAL_DMA_IRQHandler+0xa48>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d022      	beq.n	800350c <HAL_DMA_IRQHandler+0x984>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a42      	ldr	r2, [pc, #264]	; (80035d4 <HAL_DMA_IRQHandler+0xa4c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d01d      	beq.n	800350c <HAL_DMA_IRQHandler+0x984>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a40      	ldr	r2, [pc, #256]	; (80035d8 <HAL_DMA_IRQHandler+0xa50>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d018      	beq.n	800350c <HAL_DMA_IRQHandler+0x984>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3f      	ldr	r2, [pc, #252]	; (80035dc <HAL_DMA_IRQHandler+0xa54>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <HAL_DMA_IRQHandler+0x984>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3d      	ldr	r2, [pc, #244]	; (80035e0 <HAL_DMA_IRQHandler+0xa58>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_DMA_IRQHandler+0x984>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a3c      	ldr	r2, [pc, #240]	; (80035e4 <HAL_DMA_IRQHandler+0xa5c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_DMA_IRQHandler+0x984>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3a      	ldr	r2, [pc, #232]	; (80035e8 <HAL_DMA_IRQHandler+0xa60>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_DMA_IRQHandler+0x984>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a39      	ldr	r2, [pc, #228]	; (80035ec <HAL_DMA_IRQHandler+0xa64>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_DMA_IRQHandler+0x988>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_DMA_IRQHandler+0x98a>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 823f 	beq.w	8003996 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2204      	movs	r2, #4
 800352a:	409a      	lsls	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80cd 	beq.w	80036d0 <HAL_DMA_IRQHandler+0xb48>
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80c7 	beq.w	80036d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2204      	movs	r2, #4
 800354c:	409a      	lsls	r2, r3
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d049      	beq.n	80035f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8210 	beq.w	8003990 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003578:	e20a      	b.n	8003990 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8206 	beq.w	8003990 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800358c:	e200      	b.n	8003990 <HAL_DMA_IRQHandler+0xe08>
 800358e:	bf00      	nop
 8003590:	40020010 	.word	0x40020010
 8003594:	40020028 	.word	0x40020028
 8003598:	40020040 	.word	0x40020040
 800359c:	40020058 	.word	0x40020058
 80035a0:	40020070 	.word	0x40020070
 80035a4:	40020088 	.word	0x40020088
 80035a8:	400200a0 	.word	0x400200a0
 80035ac:	400200b8 	.word	0x400200b8
 80035b0:	40020410 	.word	0x40020410
 80035b4:	40020428 	.word	0x40020428
 80035b8:	40020440 	.word	0x40020440
 80035bc:	40020458 	.word	0x40020458
 80035c0:	40020470 	.word	0x40020470
 80035c4:	40020488 	.word	0x40020488
 80035c8:	400204a0 	.word	0x400204a0
 80035cc:	400204b8 	.word	0x400204b8
 80035d0:	58025408 	.word	0x58025408
 80035d4:	5802541c 	.word	0x5802541c
 80035d8:	58025430 	.word	0x58025430
 80035dc:	58025444 	.word	0x58025444
 80035e0:	58025458 	.word	0x58025458
 80035e4:	5802546c 	.word	0x5802546c
 80035e8:	58025480 	.word	0x58025480
 80035ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d160      	bne.n	80036bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7f      	ldr	r2, [pc, #508]	; (80037fc <HAL_DMA_IRQHandler+0xc74>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d04a      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7d      	ldr	r2, [pc, #500]	; (8003800 <HAL_DMA_IRQHandler+0xc78>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d045      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7c      	ldr	r2, [pc, #496]	; (8003804 <HAL_DMA_IRQHandler+0xc7c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d040      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7a      	ldr	r2, [pc, #488]	; (8003808 <HAL_DMA_IRQHandler+0xc80>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d03b      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a79      	ldr	r2, [pc, #484]	; (800380c <HAL_DMA_IRQHandler+0xc84>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d036      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a77      	ldr	r2, [pc, #476]	; (8003810 <HAL_DMA_IRQHandler+0xc88>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d031      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a76      	ldr	r2, [pc, #472]	; (8003814 <HAL_DMA_IRQHandler+0xc8c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d02c      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a74      	ldr	r2, [pc, #464]	; (8003818 <HAL_DMA_IRQHandler+0xc90>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d027      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	; (800381c <HAL_DMA_IRQHandler+0xc94>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a71      	ldr	r2, [pc, #452]	; (8003820 <HAL_DMA_IRQHandler+0xc98>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01d      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a70      	ldr	r2, [pc, #448]	; (8003824 <HAL_DMA_IRQHandler+0xc9c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6e      	ldr	r2, [pc, #440]	; (8003828 <HAL_DMA_IRQHandler+0xca0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6d      	ldr	r2, [pc, #436]	; (800382c <HAL_DMA_IRQHandler+0xca4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6b      	ldr	r2, [pc, #428]	; (8003830 <HAL_DMA_IRQHandler+0xca8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6a      	ldr	r2, [pc, #424]	; (8003834 <HAL_DMA_IRQHandler+0xcac>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_DMA_IRQHandler+0xb12>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a68      	ldr	r2, [pc, #416]	; (8003838 <HAL_DMA_IRQHandler+0xcb0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d108      	bne.n	80036ac <HAL_DMA_IRQHandler+0xb24>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0208 	bic.w	r2, r2, #8
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e007      	b.n	80036bc <HAL_DMA_IRQHandler+0xb34>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8165 	beq.w	8003990 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ce:	e15f      	b.n	8003990 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2202      	movs	r2, #2
 80036da:	409a      	lsls	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80c5 	beq.w	8003870 <HAL_DMA_IRQHandler+0xce8>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80bf 	beq.w	8003870 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2202      	movs	r2, #2
 80036fc:	409a      	lsls	r2, r3
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d018      	beq.n	800373e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 813a 	beq.w	8003994 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003728:	e134      	b.n	8003994 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8130 	beq.w	8003994 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800373c:	e12a      	b.n	8003994 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 8089 	bne.w	800385c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2b      	ldr	r2, [pc, #172]	; (80037fc <HAL_DMA_IRQHandler+0xc74>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d04a      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a29      	ldr	r2, [pc, #164]	; (8003800 <HAL_DMA_IRQHandler+0xc78>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d045      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a28      	ldr	r2, [pc, #160]	; (8003804 <HAL_DMA_IRQHandler+0xc7c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d040      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a26      	ldr	r2, [pc, #152]	; (8003808 <HAL_DMA_IRQHandler+0xc80>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d03b      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a25      	ldr	r2, [pc, #148]	; (800380c <HAL_DMA_IRQHandler+0xc84>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d036      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a23      	ldr	r2, [pc, #140]	; (8003810 <HAL_DMA_IRQHandler+0xc88>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d031      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a22      	ldr	r2, [pc, #136]	; (8003814 <HAL_DMA_IRQHandler+0xc8c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d02c      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <HAL_DMA_IRQHandler+0xc90>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d027      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1f      	ldr	r2, [pc, #124]	; (800381c <HAL_DMA_IRQHandler+0xc94>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <HAL_DMA_IRQHandler+0xc98>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <HAL_DMA_IRQHandler+0xc9c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <HAL_DMA_IRQHandler+0xca0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_DMA_IRQHandler+0xca4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a17      	ldr	r2, [pc, #92]	; (8003830 <HAL_DMA_IRQHandler+0xca8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a16      	ldr	r2, [pc, #88]	; (8003834 <HAL_DMA_IRQHandler+0xcac>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_DMA_IRQHandler+0xc62>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a14      	ldr	r2, [pc, #80]	; (8003838 <HAL_DMA_IRQHandler+0xcb0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d128      	bne.n	800383c <HAL_DMA_IRQHandler+0xcb4>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0214 	bic.w	r2, r2, #20
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e027      	b.n	800384c <HAL_DMA_IRQHandler+0xcc4>
 80037fc:	40020010 	.word	0x40020010
 8003800:	40020028 	.word	0x40020028
 8003804:	40020040 	.word	0x40020040
 8003808:	40020058 	.word	0x40020058
 800380c:	40020070 	.word	0x40020070
 8003810:	40020088 	.word	0x40020088
 8003814:	400200a0 	.word	0x400200a0
 8003818:	400200b8 	.word	0x400200b8
 800381c:	40020410 	.word	0x40020410
 8003820:	40020428 	.word	0x40020428
 8003824:	40020440 	.word	0x40020440
 8003828:	40020458 	.word	0x40020458
 800382c:	40020470 	.word	0x40020470
 8003830:	40020488 	.word	0x40020488
 8003834:	400204a0 	.word	0x400204a0
 8003838:	400204b8 	.word	0x400204b8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 020a 	bic.w	r2, r2, #10
 800384a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8097 	beq.w	8003994 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800386e:	e091      	b.n	8003994 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	2208      	movs	r2, #8
 800387a:	409a      	lsls	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8088 	beq.w	8003996 <HAL_DMA_IRQHandler+0xe0e>
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8082 	beq.w	8003996 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a41      	ldr	r2, [pc, #260]	; (800399c <HAL_DMA_IRQHandler+0xe14>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d04a      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3f      	ldr	r2, [pc, #252]	; (80039a0 <HAL_DMA_IRQHandler+0xe18>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d045      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3e      	ldr	r2, [pc, #248]	; (80039a4 <HAL_DMA_IRQHandler+0xe1c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d040      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3c      	ldr	r2, [pc, #240]	; (80039a8 <HAL_DMA_IRQHandler+0xe20>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d03b      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3b      	ldr	r2, [pc, #236]	; (80039ac <HAL_DMA_IRQHandler+0xe24>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d036      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a39      	ldr	r2, [pc, #228]	; (80039b0 <HAL_DMA_IRQHandler+0xe28>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d031      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a38      	ldr	r2, [pc, #224]	; (80039b4 <HAL_DMA_IRQHandler+0xe2c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d02c      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a36      	ldr	r2, [pc, #216]	; (80039b8 <HAL_DMA_IRQHandler+0xe30>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d027      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a35      	ldr	r2, [pc, #212]	; (80039bc <HAL_DMA_IRQHandler+0xe34>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d022      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a33      	ldr	r2, [pc, #204]	; (80039c0 <HAL_DMA_IRQHandler+0xe38>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01d      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a32      	ldr	r2, [pc, #200]	; (80039c4 <HAL_DMA_IRQHandler+0xe3c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a30      	ldr	r2, [pc, #192]	; (80039c8 <HAL_DMA_IRQHandler+0xe40>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2f      	ldr	r2, [pc, #188]	; (80039cc <HAL_DMA_IRQHandler+0xe44>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <HAL_DMA_IRQHandler+0xe48>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2c      	ldr	r2, [pc, #176]	; (80039d4 <HAL_DMA_IRQHandler+0xe4c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_IRQHandler+0xdaa>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <HAL_DMA_IRQHandler+0xe50>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <HAL_DMA_IRQHandler+0xdbc>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 021c 	bic.w	r2, r2, #28
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e007      	b.n	8003954 <HAL_DMA_IRQHandler+0xdcc>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 020e 	bic.w	r2, r2, #14
 8003952:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2201      	movs	r2, #1
 800395e:	409a      	lsls	r2, r3
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
 800398a:	e004      	b.n	8003996 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800398c:	bf00      	nop
 800398e:	e002      	b.n	8003996 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003994:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003996:	3728      	adds	r7, #40	; 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40020010 	.word	0x40020010
 80039a0:	40020028 	.word	0x40020028
 80039a4:	40020040 	.word	0x40020040
 80039a8:	40020058 	.word	0x40020058
 80039ac:	40020070 	.word	0x40020070
 80039b0:	40020088 	.word	0x40020088
 80039b4:	400200a0 	.word	0x400200a0
 80039b8:	400200b8 	.word	0x400200b8
 80039bc:	40020410 	.word	0x40020410
 80039c0:	40020428 	.word	0x40020428
 80039c4:	40020440 	.word	0x40020440
 80039c8:	40020458 	.word	0x40020458
 80039cc:	40020470 	.word	0x40020470
 80039d0:	40020488 	.word	0x40020488
 80039d4:	400204a0 	.word	0x400204a0
 80039d8:	400204b8 	.word	0x400204b8

080039dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ea:	b2db      	uxtb	r3, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7f      	ldr	r2, [pc, #508]	; (8003c2c <DMA_SetConfig+0x21c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d072      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7d      	ldr	r2, [pc, #500]	; (8003c30 <DMA_SetConfig+0x220>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d06d      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7c      	ldr	r2, [pc, #496]	; (8003c34 <DMA_SetConfig+0x224>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d068      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7a      	ldr	r2, [pc, #488]	; (8003c38 <DMA_SetConfig+0x228>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d063      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a79      	ldr	r2, [pc, #484]	; (8003c3c <DMA_SetConfig+0x22c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d05e      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a77      	ldr	r2, [pc, #476]	; (8003c40 <DMA_SetConfig+0x230>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d059      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a76      	ldr	r2, [pc, #472]	; (8003c44 <DMA_SetConfig+0x234>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d054      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a74      	ldr	r2, [pc, #464]	; (8003c48 <DMA_SetConfig+0x238>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d04f      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a73      	ldr	r2, [pc, #460]	; (8003c4c <DMA_SetConfig+0x23c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d04a      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a71      	ldr	r2, [pc, #452]	; (8003c50 <DMA_SetConfig+0x240>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d045      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a70      	ldr	r2, [pc, #448]	; (8003c54 <DMA_SetConfig+0x244>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d040      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a6e      	ldr	r2, [pc, #440]	; (8003c58 <DMA_SetConfig+0x248>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d03b      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6d      	ldr	r2, [pc, #436]	; (8003c5c <DMA_SetConfig+0x24c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d036      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a6b      	ldr	r2, [pc, #428]	; (8003c60 <DMA_SetConfig+0x250>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d031      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6a      	ldr	r2, [pc, #424]	; (8003c64 <DMA_SetConfig+0x254>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d02c      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a68      	ldr	r2, [pc, #416]	; (8003c68 <DMA_SetConfig+0x258>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d027      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a67      	ldr	r2, [pc, #412]	; (8003c6c <DMA_SetConfig+0x25c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a65      	ldr	r2, [pc, #404]	; (8003c70 <DMA_SetConfig+0x260>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01d      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a64      	ldr	r2, [pc, #400]	; (8003c74 <DMA_SetConfig+0x264>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a62      	ldr	r2, [pc, #392]	; (8003c78 <DMA_SetConfig+0x268>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a61      	ldr	r2, [pc, #388]	; (8003c7c <DMA_SetConfig+0x26c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a5f      	ldr	r2, [pc, #380]	; (8003c80 <DMA_SetConfig+0x270>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a5e      	ldr	r2, [pc, #376]	; (8003c84 <DMA_SetConfig+0x274>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <DMA_SetConfig+0x10a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5c      	ldr	r2, [pc, #368]	; (8003c88 <DMA_SetConfig+0x278>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <DMA_SetConfig+0x10e>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <DMA_SetConfig+0x110>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a39      	ldr	r2, [pc, #228]	; (8003c2c <DMA_SetConfig+0x21c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d04a      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a38      	ldr	r2, [pc, #224]	; (8003c30 <DMA_SetConfig+0x220>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d045      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a36      	ldr	r2, [pc, #216]	; (8003c34 <DMA_SetConfig+0x224>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d040      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a35      	ldr	r2, [pc, #212]	; (8003c38 <DMA_SetConfig+0x228>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d03b      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a33      	ldr	r2, [pc, #204]	; (8003c3c <DMA_SetConfig+0x22c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d036      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a32      	ldr	r2, [pc, #200]	; (8003c40 <DMA_SetConfig+0x230>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d031      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a30      	ldr	r2, [pc, #192]	; (8003c44 <DMA_SetConfig+0x234>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d02c      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2f      	ldr	r2, [pc, #188]	; (8003c48 <DMA_SetConfig+0x238>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d027      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2d      	ldr	r2, [pc, #180]	; (8003c4c <DMA_SetConfig+0x23c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d022      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2c      	ldr	r2, [pc, #176]	; (8003c50 <DMA_SetConfig+0x240>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d01d      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	; (8003c54 <DMA_SetConfig+0x244>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a29      	ldr	r2, [pc, #164]	; (8003c58 <DMA_SetConfig+0x248>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <DMA_SetConfig+0x24c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a26      	ldr	r2, [pc, #152]	; (8003c60 <DMA_SetConfig+0x250>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a24      	ldr	r2, [pc, #144]	; (8003c64 <DMA_SetConfig+0x254>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <DMA_SetConfig+0x1d0>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a23      	ldr	r2, [pc, #140]	; (8003c68 <DMA_SetConfig+0x258>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <DMA_SetConfig+0x1d4>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <DMA_SetConfig+0x1d6>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d059      	beq.n	8003c9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	223f      	movs	r2, #63	; 0x3f
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d138      	bne.n	8003c8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c2a:	e086      	b.n	8003d3a <DMA_SetConfig+0x32a>
 8003c2c:	40020010 	.word	0x40020010
 8003c30:	40020028 	.word	0x40020028
 8003c34:	40020040 	.word	0x40020040
 8003c38:	40020058 	.word	0x40020058
 8003c3c:	40020070 	.word	0x40020070
 8003c40:	40020088 	.word	0x40020088
 8003c44:	400200a0 	.word	0x400200a0
 8003c48:	400200b8 	.word	0x400200b8
 8003c4c:	40020410 	.word	0x40020410
 8003c50:	40020428 	.word	0x40020428
 8003c54:	40020440 	.word	0x40020440
 8003c58:	40020458 	.word	0x40020458
 8003c5c:	40020470 	.word	0x40020470
 8003c60:	40020488 	.word	0x40020488
 8003c64:	400204a0 	.word	0x400204a0
 8003c68:	400204b8 	.word	0x400204b8
 8003c6c:	58025408 	.word	0x58025408
 8003c70:	5802541c 	.word	0x5802541c
 8003c74:	58025430 	.word	0x58025430
 8003c78:	58025444 	.word	0x58025444
 8003c7c:	58025458 	.word	0x58025458
 8003c80:	5802546c 	.word	0x5802546c
 8003c84:	58025480 	.word	0x58025480
 8003c88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]
}
 8003c9c:	e04d      	b.n	8003d3a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <DMA_SetConfig+0x338>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d022      	beq.n	8003cee <DMA_SetConfig+0x2de>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <DMA_SetConfig+0x33c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01d      	beq.n	8003cee <DMA_SetConfig+0x2de>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <DMA_SetConfig+0x340>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <DMA_SetConfig+0x2de>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <DMA_SetConfig+0x344>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <DMA_SetConfig+0x2de>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a23      	ldr	r2, [pc, #140]	; (8003d58 <DMA_SetConfig+0x348>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <DMA_SetConfig+0x2de>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a21      	ldr	r2, [pc, #132]	; (8003d5c <DMA_SetConfig+0x34c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <DMA_SetConfig+0x2de>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <DMA_SetConfig+0x350>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <DMA_SetConfig+0x2de>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <DMA_SetConfig+0x354>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <DMA_SetConfig+0x2e2>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <DMA_SetConfig+0x2e4>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2201      	movs	r2, #1
 8003d02:	409a      	lsls	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d108      	bne.n	8003d2a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	60da      	str	r2, [r3, #12]
}
 8003d28:	e007      	b.n	8003d3a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	60da      	str	r2, [r3, #12]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	58025408 	.word	0x58025408
 8003d4c:	5802541c 	.word	0x5802541c
 8003d50:	58025430 	.word	0x58025430
 8003d54:	58025444 	.word	0x58025444
 8003d58:	58025458 	.word	0x58025458
 8003d5c:	5802546c 	.word	0x5802546c
 8003d60:	58025480 	.word	0x58025480
 8003d64:	58025494 	.word	0x58025494

08003d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a42      	ldr	r2, [pc, #264]	; (8003e80 <DMA_CalcBaseAndBitshift+0x118>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d04a      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a41      	ldr	r2, [pc, #260]	; (8003e84 <DMA_CalcBaseAndBitshift+0x11c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d045      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a3f      	ldr	r2, [pc, #252]	; (8003e88 <DMA_CalcBaseAndBitshift+0x120>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d040      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a3e      	ldr	r2, [pc, #248]	; (8003e8c <DMA_CalcBaseAndBitshift+0x124>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d03b      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <DMA_CalcBaseAndBitshift+0x128>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d036      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <DMA_CalcBaseAndBitshift+0x12c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d031      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a39      	ldr	r2, [pc, #228]	; (8003e98 <DMA_CalcBaseAndBitshift+0x130>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02c      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a38      	ldr	r2, [pc, #224]	; (8003e9c <DMA_CalcBaseAndBitshift+0x134>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d027      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a36      	ldr	r2, [pc, #216]	; (8003ea0 <DMA_CalcBaseAndBitshift+0x138>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d022      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a35      	ldr	r2, [pc, #212]	; (8003ea4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d01d      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a33      	ldr	r2, [pc, #204]	; (8003ea8 <DMA_CalcBaseAndBitshift+0x140>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a32      	ldr	r2, [pc, #200]	; (8003eac <DMA_CalcBaseAndBitshift+0x144>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a30      	ldr	r2, [pc, #192]	; (8003eb0 <DMA_CalcBaseAndBitshift+0x148>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2d      	ldr	r2, [pc, #180]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x150>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <DMA_CalcBaseAndBitshift+0xa8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <DMA_CalcBaseAndBitshift+0x154>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <DMA_CalcBaseAndBitshift+0xac>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <DMA_CalcBaseAndBitshift+0xae>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d024      	beq.n	8003e64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3b10      	subs	r3, #16
 8003e22:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <DMA_CalcBaseAndBitshift+0x158>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003e34:	5cd3      	ldrb	r3, [r2, r3]
 8003e36:	461a      	mov	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d908      	bls.n	8003e54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x160>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	1d1a      	adds	r2, r3, #4
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	659a      	str	r2, [r3, #88]	; 0x58
 8003e52:	e00d      	b.n	8003e70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <DMA_CalcBaseAndBitshift+0x160>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6593      	str	r3, [r2, #88]	; 0x58
 8003e62:	e005      	b.n	8003e70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40020010 	.word	0x40020010
 8003e84:	40020028 	.word	0x40020028
 8003e88:	40020040 	.word	0x40020040
 8003e8c:	40020058 	.word	0x40020058
 8003e90:	40020070 	.word	0x40020070
 8003e94:	40020088 	.word	0x40020088
 8003e98:	400200a0 	.word	0x400200a0
 8003e9c:	400200b8 	.word	0x400200b8
 8003ea0:	40020410 	.word	0x40020410
 8003ea4:	40020428 	.word	0x40020428
 8003ea8:	40020440 	.word	0x40020440
 8003eac:	40020458 	.word	0x40020458
 8003eb0:	40020470 	.word	0x40020470
 8003eb4:	40020488 	.word	0x40020488
 8003eb8:	400204a0 	.word	0x400204a0
 8003ebc:	400204b8 	.word	0x400204b8
 8003ec0:	aaaaaaab 	.word	0xaaaaaaab
 8003ec4:	08011ae4 	.word	0x08011ae4
 8003ec8:	fffffc00 	.word	0xfffffc00

08003ecc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d120      	bne.n	8003f22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d858      	bhi.n	8003f9a <DMA_CheckFifoParam+0xce>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <DMA_CheckFifoParam+0x24>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f13 	.word	0x08003f13
 8003ef8:	08003f01 	.word	0x08003f01
 8003efc:	08003f9b 	.word	0x08003f9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d048      	beq.n	8003f9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f10:	e045      	b.n	8003f9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f1a:	d142      	bne.n	8003fa2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f20:	e03f      	b.n	8003fa2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2a:	d123      	bne.n	8003f74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d838      	bhi.n	8003fa6 <DMA_CheckFifoParam+0xda>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <DMA_CheckFifoParam+0x70>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f53 	.word	0x08003f53
 8003f44:	08003f4d 	.word	0x08003f4d
 8003f48:	08003f65 	.word	0x08003f65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
        break;
 8003f50:	e030      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d025      	beq.n	8003faa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f62:	e022      	b.n	8003faa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f6c:	d11f      	bne.n	8003fae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f72:	e01c      	b.n	8003fae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d902      	bls.n	8003f82 <DMA_CheckFifoParam+0xb6>
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d003      	beq.n	8003f88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f80:	e018      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
        break;
 8003f86:	e015      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
    break;
 8003f98:	e00b      	b.n	8003fb2 <DMA_CheckFifoParam+0xe6>
        break;
 8003f9a:	bf00      	nop
 8003f9c:	e00a      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003f9e:	bf00      	nop
 8003fa0:	e008      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e006      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <DMA_CheckFifoParam+0xe8>
    break;
 8003fb2:	bf00      	nop
    }
  }

  return status;
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop

08003fc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a38      	ldr	r2, [pc, #224]	; (80040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a36      	ldr	r2, [pc, #216]	; (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01d      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a35      	ldr	r2, [pc, #212]	; (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a33      	ldr	r2, [pc, #204]	; (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a32      	ldr	r2, [pc, #200]	; (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a30      	ldr	r2, [pc, #192]	; (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2f      	ldr	r2, [pc, #188]	; (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2d      	ldr	r2, [pc, #180]	; (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004026:	2300      	movs	r3, #0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01a      	beq.n	8004062 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	3b08      	subs	r3, #8
 8004034:	4a28      	ldr	r2, [pc, #160]	; (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4b26      	ldr	r3, [pc, #152]	; (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	461a      	mov	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a24      	ldr	r2, [pc, #144]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004050:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2201      	movs	r2, #1
 800405a:	409a      	lsls	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004060:	e024      	b.n	80040ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	3b10      	subs	r3, #16
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d806      	bhi.n	800408a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d902      	bls.n	800408a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3308      	adds	r3, #8
 8004088:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800409c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	2201      	movs	r2, #1
 80040a6:	409a      	lsls	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	58025408 	.word	0x58025408
 80040bc:	5802541c 	.word	0x5802541c
 80040c0:	58025430 	.word	0x58025430
 80040c4:	58025444 	.word	0x58025444
 80040c8:	58025458 	.word	0x58025458
 80040cc:	5802546c 	.word	0x5802546c
 80040d0:	58025480 	.word	0x58025480
 80040d4:	58025494 	.word	0x58025494
 80040d8:	cccccccd 	.word	0xcccccccd
 80040dc:	16009600 	.word	0x16009600
 80040e0:	58025880 	.word	0x58025880
 80040e4:	aaaaaaab 	.word	0xaaaaaaab
 80040e8:	400204b8 	.word	0x400204b8
 80040ec:	4002040f 	.word	0x4002040f
 80040f0:	10008200 	.word	0x10008200
 80040f4:	40020880 	.word	0x40020880

080040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d04a      	beq.n	80041a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d847      	bhi.n	80041a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a25      	ldr	r2, [pc, #148]	; (80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a24      	ldr	r2, [pc, #144]	; (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01d      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a21      	ldr	r2, [pc, #132]	; (80041bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004180:	671a      	str	r2, [r3, #112]	; 0x70
 8004182:	e009      	b.n	8004198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a11      	ldr	r2, [pc, #68]	; (80041dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004196:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	2201      	movs	r2, #1
 800419e:	409a      	lsls	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	58025408 	.word	0x58025408
 80041b4:	5802541c 	.word	0x5802541c
 80041b8:	58025430 	.word	0x58025430
 80041bc:	58025444 	.word	0x58025444
 80041c0:	58025458 	.word	0x58025458
 80041c4:	5802546c 	.word	0x5802546c
 80041c8:	58025480 	.word	0x58025480
 80041cc:	58025494 	.word	0x58025494
 80041d0:	1600963f 	.word	0x1600963f
 80041d4:	58025940 	.word	0x58025940
 80041d8:	1000823f 	.word	0x1000823f
 80041dc:	40020940 	.word	0x40020940

080041e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b098      	sub	sp, #96	; 0x60
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80041e8:	4a84      	ldr	r2, [pc, #528]	; (80043fc <HAL_FDCAN_Init+0x21c>)
 80041ea:	f107 030c 	add.w	r3, r7, #12
 80041ee:	4611      	mov	r1, r2
 80041f0:	224c      	movs	r2, #76	; 0x4c
 80041f2:	4618      	mov	r0, r3
 80041f4:	f00b fff8 	bl	80101e8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1c6      	b.n	8004590 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7e      	ldr	r2, [pc, #504]	; (8004400 <HAL_FDCAN_Init+0x220>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d106      	bne.n	800421a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004214:	461a      	mov	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc f944 	bl	80004bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0210 	bic.w	r2, r2, #16
 8004242:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004244:	f7fd f908 	bl	8001458 <HAL_GetTick>
 8004248:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800424a:	e014      	b.n	8004276 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800424c:	f7fd f904 	bl	8001458 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b0a      	cmp	r3, #10
 8004258:	d90d      	bls.n	8004276 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2203      	movs	r2, #3
 800426e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e18c      	b.n	8004590 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d0e3      	beq.n	800424c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004294:	f7fd f8e0 	bl	8001458 <HAL_GetTick>
 8004298:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800429a:	e014      	b.n	80042c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800429c:	f7fd f8dc 	bl	8001458 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b0a      	cmp	r3, #10
 80042a8:	d90d      	bls.n	80042c6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b0:	f043 0201 	orr.w	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2203      	movs	r2, #3
 80042be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e164      	b.n	8004590 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0e3      	beq.n	800429c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0202 	orr.w	r2, r2, #2
 80042e2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7c1b      	ldrb	r3, [r3, #16]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d108      	bne.n	80042fe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fa:	619a      	str	r2, [r3, #24]
 80042fc:	e007      	b.n	800430e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800430c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7c5b      	ldrb	r3, [r3, #17]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d108      	bne.n	8004328 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699a      	ldr	r2, [r3, #24]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004324:	619a      	str	r2, [r3, #24]
 8004326:	e007      	b.n	8004338 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004336:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7c9b      	ldrb	r3, [r3, #18]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d108      	bne.n	8004352 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800434e:	619a      	str	r2, [r3, #24]
 8004350:	e007      	b.n	8004362 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699a      	ldr	r2, [r3, #24]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004360:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004386:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0210 	bic.w	r2, r2, #16
 8004396:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d108      	bne.n	80043b2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0204 	orr.w	r2, r2, #4
 80043ae:	619a      	str	r2, [r3, #24]
 80043b0:	e030      	b.n	8004414 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d02c      	beq.n	8004414 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d020      	beq.n	8004404 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043d0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0210 	orr.w	r2, r2, #16
 80043e0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d114      	bne.n	8004414 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0220 	orr.w	r2, r2, #32
 80043f8:	619a      	str	r2, [r3, #24]
 80043fa:	e00b      	b.n	8004414 <HAL_FDCAN_Init+0x234>
 80043fc:	080119e8 	.word	0x080119e8
 8004400:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0220 	orr.w	r2, r2, #32
 8004412:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	3b01      	subs	r3, #1
 800441a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	3b01      	subs	r3, #1
 8004422:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004424:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800442c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	3b01      	subs	r3, #1
 8004436:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800443c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800443e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004448:	d115      	bne.n	8004476 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	3b01      	subs	r3, #1
 8004456:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004458:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	3b01      	subs	r3, #1
 8004460:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004462:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	3b01      	subs	r3, #1
 800446c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004472:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004474:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449c:	4413      	add	r3, r2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d011      	beq.n	80044c6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80044aa:	f023 0107 	bic.w	r1, r3, #7
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	3360      	adds	r3, #96	; 0x60
 80044b6:	443b      	add	r3, r7
 80044b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d011      	beq.n	80044f2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80044d6:	f023 0107 	bic.w	r1, r3, #7
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	3360      	adds	r3, #96	; 0x60
 80044e2:	443b      	add	r3, r7
 80044e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d012      	beq.n	8004520 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004502:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	3360      	adds	r3, #96	; 0x60
 800450e:	443b      	add	r3, r7
 8004510:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004514:	011a      	lsls	r2, r3, #4
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	2b00      	cmp	r3, #0
 8004526:	d012      	beq.n	800454e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004530:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	3360      	adds	r3, #96	; 0x60
 800453c:	443b      	add	r3, r7
 800453e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a11      	ldr	r2, [pc, #68]	; (8004598 <HAL_FDCAN_Init+0x3b8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d107      	bne.n	8004568 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f022 0203 	bic.w	r2, r2, #3
 8004566:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fe5b 	bl	800523c <FDCAN_CalcultateRamBlockAddresses>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800458c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004590:	4618      	mov	r0, r3
 8004592:	3760      	adds	r7, #96	; 0x60
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	4000a000 	.word	0x4000a000

0800459c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80045ac:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d002      	beq.n	80045ba <HAL_FDCAN_ConfigFilter+0x1e>
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d157      	bne.n	800466a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d12b      	bne.n	800461a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b07      	cmp	r3, #7
 80045c8:	d10d      	bne.n	80045e6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80045d6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80045dc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80045de:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e00e      	b.n	8004604 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80045f2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80045fa:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e025      	b.n	8004666 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	075a      	lsls	r2, r3, #29
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b07      	cmp	r3, #7
 800462e:	d103      	bne.n	8004638 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	e006      	b.n	8004646 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	079a      	lsls	r2, r3, #30
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3304      	adds	r3, #4
 800465e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e008      	b.n	800467c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004670:	f043 0202 	orr.w	r2, r3, #2
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d110      	bne.n	80046c4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80046aa:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80046b0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80046bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e008      	b.n	80046d6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ca:	f043 0204 	orr.w	r2, r3, #4
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_FDCAN_ConfigTxDelayCompensation>:
  * @param  TdcFilter Transmitter Delay Compensation Filter Window Length.
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset, uint32_t TdcFilter)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d108      	bne.n	800470c <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	0219      	lsls	r1, r3, #8
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	430a      	orrs	r2, r1
 8004706:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	e008      	b.n	800471e <HAL_FDCAN_ConfigTxDelayCompensation+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004712:	f043 0204 	orr.w	r2, r3, #4
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d109      	bne.n	8004752 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800474c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e008      	b.n	8004764 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004758:	f043 0204 	orr.w	r2, r3, #4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
  }
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	d111      	bne.n	80047a8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e008      	b.n	80047ba <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ae:	f043 0204 	orr.w	r2, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
  }
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d141      	bne.n	8004862 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047e6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e038      	b.n	8004874 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800480a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004818:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e026      	b.n	8004874 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fe83 	bl	8005548 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2101      	movs	r1, #1
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	fa01 f202 	lsl.w	r2, r1, r2
 800484e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004852:	2201      	movs	r2, #1
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	409a      	lsls	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e008      	b.n	8004874 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004868:	f043 0208 	orr.w	r2, r3, #8
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800487c:	b480      	push	{r7}
 800487e:	b08b      	sub	sp, #44	; 0x2c
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004894:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004896:	7efb      	ldrb	r3, [r7, #27]
 8004898:	2b02      	cmp	r3, #2
 800489a:	f040 814b 	bne.w	8004b34 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d14d      	bne.n	8004940 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e13e      	b.n	8004b46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e12c      	b.n	8004b46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10b      	bne.n	8004916 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004906:	0fdb      	lsrs	r3, r3, #31
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004910:	d101      	bne.n	8004916 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004912:	2301      	movs	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	69f9      	ldr	r1, [r7, #28]
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
 800493e:	e069      	b.n	8004a14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b41      	cmp	r3, #65	; 0x41
 8004944:	d14d      	bne.n	80049e2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800494e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e0ed      	b.n	8004b46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004976:	2b00      	cmp	r3, #0
 8004978:	d109      	bne.n	800498e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004980:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e0db      	b.n	8004b46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004996:	0e1b      	lsrs	r3, r3, #24
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10b      	bne.n	80049b8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049a8:	0fdb      	lsrs	r3, r3, #31
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b2:	d101      	bne.n	80049b8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80049b4:	2301      	movs	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d4:	69f9      	ldr	r1, [r7, #28]
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
 80049e0:	e018      	b.n	8004a14 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d309      	bcc.n	8004a00 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0a2      	b.n	8004b46 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d107      	bne.n	8004a38 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0c9b      	lsrs	r3, r3, #18
 8004a2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e005      	b.n	8004a44 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	3304      	adds	r3, #4
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	0e1b      	lsrs	r3, r3, #24
 8004a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	0fda      	lsrs	r2, r3, #31
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	3304      	adds	r3, #4
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	623b      	str	r3, [r7, #32]
 8004ab6:	e00a      	b.n	8004ace <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	441a      	add	r2, r3
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	440b      	add	r3, r1
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	3301      	adds	r3, #1
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d3eb      	bcc.n	8004ab8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d105      	bne.n	8004af2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004af0:	e01e      	b.n	8004b30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b41      	cmp	r3, #65	; 0x41
 8004af6:	d105      	bne.n	8004b04 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004b02:	e015      	b.n	8004b30 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b1f      	cmp	r3, #31
 8004b08:	d808      	bhi.n	8004b1c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	fa01 f202 	lsl.w	r2, r1, r2
 8004b16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004b1a:	e009      	b.n	8004b30 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 021f 	and.w	r2, r3, #31
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2101      	movs	r1, #1
 8004b28:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e008      	b.n	8004b46 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b3a:	f043 0208 	orr.w	r2, r3, #8
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
  }
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	372c      	adds	r7, #44	; 0x2c
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	08011aec 	.word	0x08011aec

08004b58 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004b6a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d002      	beq.n	8004b78 <HAL_FDCAN_ActivateNotification+0x20>
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d155      	bne.n	8004c24 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b96:	e014      	b.n	8004bc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d108      	bne.n	8004bba <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0202 	orr.w	r2, r2, #2
 8004bb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bb8:	e003      	b.n	8004bc2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <HAL_FDCAN_ActivateNotification+0xec>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	6553      	str	r3, [r2, #84]	; 0x54
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	0f9b      	lsrs	r3, r3, #30
 8004c1a:	490b      	ldr	r1, [pc, #44]	; (8004c48 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e008      	b.n	8004c36 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c2a:	f043 0202 	orr.w	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	3fcfffff 	.word	0x3fcfffff
 8004c48:	4000a800 	.word	0x4000a800

08004c4c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b096      	sub	sp, #88	; 0x58
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004c54:	4b95      	ldr	r3, [pc, #596]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	079b      	lsls	r3, r3, #30
 8004c5a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004c5c:	4b93      	ldr	r3, [pc, #588]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	079b      	lsls	r3, r3, #30
 8004c62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c64:	4013      	ands	r3, r2
 8004c66:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c72:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c94:	4013      	ands	r3, r2
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cac:	4013      	ands	r3, r2
 8004cae:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8004cba:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cce:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8004cd2:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cdc:	4013      	ands	r3, r2
 8004cde:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00f      	beq.n	8004d1a <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
 8004d0e:	4b67      	ldr	r3, [pc, #412]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fa44 	bl	80051a2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01c      	beq.n	8004d5e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d017      	beq.n	8004d5e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d42:	4013      	ands	r3, r2
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4e:	651a      	str	r2, [r3, #80]	; 0x50
 8004d50:	4b56      	ldr	r3, [pc, #344]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004d56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f9f9 	bl	8005150 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d6a:	4b51      	ldr	r3, [pc, #324]	; (8004eb0 <HAL_FDCAN_IRQHandler+0x264>)
 8004d6c:	400b      	ands	r3, r1
 8004d6e:	6513      	str	r3, [r2, #80]	; 0x50
 8004d70:	4a4e      	ldr	r2, [pc, #312]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d74:	0f9b      	lsrs	r3, r3, #30
 8004d76:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f9b2 	bl	80050e4 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00d      	beq.n	8004da2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d8c:	4b48      	ldr	r3, [pc, #288]	; (8004eb0 <HAL_FDCAN_IRQHandler+0x264>)
 8004d8e:	400b      	ands	r3, r1
 8004d90:	6513      	str	r3, [r2, #80]	; 0x50
 8004d92:	4a46      	ldr	r2, [pc, #280]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d96:	0f9b      	lsrs	r3, r3, #30
 8004d98:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004d9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f9ac 	bl	80050fa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004dae:	4b40      	ldr	r3, [pc, #256]	; (8004eb0 <HAL_FDCAN_IRQHandler+0x264>)
 8004db0:	400b      	ands	r3, r1
 8004db2:	6513      	str	r3, [r2, #80]	; 0x50
 8004db4:	4a3d      	ldr	r2, [pc, #244]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db8:	0f9b      	lsrs	r3, r3, #30
 8004dba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004dbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f007 fa6a 	bl	800c298 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004dd0:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <HAL_FDCAN_IRQHandler+0x264>)
 8004dd2:	400b      	ands	r3, r1
 8004dd4:	6513      	str	r3, [r2, #80]	; 0x50
 8004dd6:	4a35      	ldr	r2, [pc, #212]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dda:	0f9b      	lsrs	r3, r3, #30
 8004ddc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004dde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f995 	bl	8005110 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00f      	beq.n	8004e10 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e02:	651a      	str	r2, [r3, #80]	; 0x50
 8004e04:	4b29      	ldr	r3, [pc, #164]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f98b 	bl	8005126 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d01c      	beq.n	8004e54 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d017      	beq.n	8004e54 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e2c:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e38:	4013      	ands	r3, r2
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e44:	651a      	str	r2, [r3, #80]	; 0x50
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f973 	bl	800513a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00f      	beq.n	8004e7e <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e70:	651a      	str	r2, [r3, #80]	; 0x50
 8004e72:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f974 	bl	8005166 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d015      	beq.n	8004eb4 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d010      	beq.n	8004eb4 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e9a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <HAL_FDCAN_IRQHandler+0x260>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f969 	bl	800517a <HAL_FDCAN_TimestampWraparoundCallback>
 8004ea8:	e004      	b.n	8004eb4 <HAL_FDCAN_IRQHandler+0x268>
 8004eaa:	bf00      	nop
 8004eac:	4000a800 	.word	0x4000a800
 8004eb0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00f      	beq.n	8004ede <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004ed0:	651a      	str	r2, [r3, #80]	; 0x50
 8004ed2:	4b81      	ldr	r3, [pc, #516]	; (80050d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f958 	bl	800518e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d014      	beq.n	8004f12 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00f      	beq.n	8004f12 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004efa:	651a      	str	r2, [r3, #80]	; 0x50
 8004efc:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f1e:	4b6f      	ldr	r3, [pc, #444]	; (80050dc <HAL_FDCAN_IRQHandler+0x490>)
 8004f20:	400b      	ands	r3, r1
 8004f22:	6513      	str	r3, [r2, #80]	; 0x50
 8004f24:	4a6c      	ldr	r2, [pc, #432]	; (80050d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8004f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f28:	0f9b      	lsrs	r3, r3, #30
 8004f2a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004f2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f94b 	bl	80051ca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d011      	beq.n	8004f5e <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f40:	4b66      	ldr	r3, [pc, #408]	; (80050dc <HAL_FDCAN_IRQHandler+0x490>)
 8004f42:	400b      	ands	r3, r1
 8004f44:	6513      	str	r3, [r2, #80]	; 0x50
 8004f46:	4a64      	ldr	r2, [pc, #400]	; (80050d8 <HAL_FDCAN_IRQHandler+0x48c>)
 8004f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4a:	0f9b      	lsrs	r3, r3, #30
 8004f4c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a5f      	ldr	r2, [pc, #380]	; (80050e0 <HAL_FDCAN_IRQHandler+0x494>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	f040 80aa 	bne.w	80050be <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a2 	beq.w	80050be <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8e:	4013      	ands	r3, r2
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004fcc:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	6a3a      	ldr	r2, [r7, #32]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004fe4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800500e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8e4 	bl	80051e0 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005024:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f8e4 	bl	80051f6 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d019      	beq.n	800506c <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d014      	beq.n	800506c <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	b29b      	uxth	r3, r3
 800504c:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005058:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2240      	movs	r2, #64	; 0x40
 8005060:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	6939      	ldr	r1, [r7, #16]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8d0 	bl	800520c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800507a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8d1 	bl	8005224 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	6a3a      	ldr	r2, [r7, #32]
 800508e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	69fa      	ldr	r2, [r7, #28]
 80050ac:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f874 	bl	80051b6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80050ce:	bf00      	nop
 80050d0:	3758      	adds	r7, #88	; 0x58
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	4000a800 	.word	0x4000a800
 80050dc:	3fcfffff 	.word	0x3fcfffff
 80050e0:	4000a000 	.word	0x4000a000

080050e4 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005248:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005252:	4ba7      	ldr	r3, [pc, #668]	; (80054f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005254:	4013      	ands	r3, r2
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	0091      	lsls	r1, r2, #2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	430b      	orrs	r3, r1
 8005260:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	041a      	lsls	r2, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	4413      	add	r3, r2
 8005288:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005292:	4b97      	ldr	r3, [pc, #604]	; (80054f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005294:	4013      	ands	r3, r2
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	0091      	lsls	r1, r2, #2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	430b      	orrs	r3, r1
 80052a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b4:	041a      	lsls	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4413      	add	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80052d4:	4b86      	ldr	r3, [pc, #536]	; (80054f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	0091      	lsls	r1, r2, #2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	430b      	orrs	r3, r1
 80052e2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052ee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	041a      	lsls	r2, r3, #16
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	4413      	add	r3, r2
 8005312:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800531c:	4b74      	ldr	r3, [pc, #464]	; (80054f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800531e:	4013      	ands	r3, r2
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	0091      	lsls	r1, r2, #2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	430b      	orrs	r3, r1
 800532a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005336:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533e:	041a      	lsls	r2, r3, #16
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4413      	add	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005364:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005366:	4013      	ands	r3, r2
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	0091      	lsls	r1, r2, #2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	430b      	orrs	r3, r1
 8005372:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4413      	add	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005390:	4b57      	ldr	r3, [pc, #348]	; (80054f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005392:	4013      	ands	r3, r2
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	0091      	lsls	r1, r2, #2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	430b      	orrs	r3, r1
 800539e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053aa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b2:	041a      	lsls	r2, r3, #16
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	4413      	add	r3, r2
 80053c8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80053d2:	4b47      	ldr	r3, [pc, #284]	; (80054f0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	0091      	lsls	r1, r2, #2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	430b      	orrs	r3, r1
 80053e0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053ec:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f4:	041a      	lsls	r2, r3, #16
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005408:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005410:	061a      	lsls	r2, r3, #24
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005420:	4b34      	ldr	r3, [pc, #208]	; (80054f4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005422:	4413      	add	r3, r2
 8005424:	009a      	lsls	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	441a      	add	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	441a      	add	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	441a      	add	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005486:	fb01 f303 	mul.w	r3, r1, r3
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	441a      	add	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	441a      	add	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	4a04      	ldr	r2, [pc, #16]	; (80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d915      	bls.n	8005518 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80054ec:	e006      	b.n	80054fc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80054ee:	bf00      	nop
 80054f0:	ffff0003 	.word	0xffff0003
 80054f4:	10002b00 	.word	0x10002b00
 80054f8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2203      	movs	r2, #3
 8005510:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e010      	b.n	800553a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e005      	b.n	800552c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3304      	adds	r3, #4
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d3f3      	bcc.n	8005520 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop

08005548 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005548:	b480      	push	{r7}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005566:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800556e:	4313      	orrs	r3, r2
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	e00a      	b.n	800558a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800557c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005582:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005588:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005594:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800559a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80055a0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b4:	6839      	ldr	r1, [r7, #0]
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	3304      	adds	r3, #4
 80055ca:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	3304      	adds	r3, #4
 80055d6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e020      	b.n	8005620 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	3303      	adds	r3, #3
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	3302      	adds	r3, #2
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	440b      	add	r3, r1
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80055f6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	3301      	adds	r3, #1
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	440b      	add	r3, r1
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005604:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	440a      	add	r2, r1
 800560c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800560e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	3304      	adds	r3, #4
 8005618:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	3304      	adds	r3, #4
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	4a06      	ldr	r2, [pc, #24]	; (8005640 <FDCAN_CopyMessageToRAM+0xf8>)
 8005628:	5cd3      	ldrb	r3, [r2, r3]
 800562a:	461a      	mov	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4293      	cmp	r3, r2
 8005630:	d3d5      	bcc.n	80055de <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	3724      	adds	r7, #36	; 0x24
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	08011aec 	.word	0x08011aec

08005644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005652:	4b89      	ldr	r3, [pc, #548]	; (8005878 <HAL_GPIO_Init+0x234>)
 8005654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005656:	e194      	b.n	8005982 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	2101      	movs	r1, #1
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa01 f303 	lsl.w	r3, r1, r3
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 8186 	beq.w	800597c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d005      	beq.n	8005688 <HAL_GPIO_Init+0x44>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d130      	bne.n	80056ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	2203      	movs	r2, #3
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056be:	2201      	movs	r2, #1
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43db      	mvns	r3, r3
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	4013      	ands	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	f003 0201 	and.w	r2, r3, #1
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d017      	beq.n	8005726 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	2203      	movs	r2, #3
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d123      	bne.n	800577a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	08da      	lsrs	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3208      	adds	r2, #8
 800573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	220f      	movs	r2, #15
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	08da      	lsrs	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3208      	adds	r2, #8
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	2203      	movs	r2, #3
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 0203 	and.w	r2, r3, #3
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80e0 	beq.w	800597c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057bc:	4b2f      	ldr	r3, [pc, #188]	; (800587c <HAL_GPIO_Init+0x238>)
 80057be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057c2:	4a2e      	ldr	r2, [pc, #184]	; (800587c <HAL_GPIO_Init+0x238>)
 80057c4:	f043 0302 	orr.w	r3, r3, #2
 80057c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80057cc:	4b2b      	ldr	r3, [pc, #172]	; (800587c <HAL_GPIO_Init+0x238>)
 80057ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057da:	4a29      	ldr	r2, [pc, #164]	; (8005880 <HAL_GPIO_Init+0x23c>)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	3302      	adds	r3, #2
 80057e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	220f      	movs	r2, #15
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4013      	ands	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a20      	ldr	r2, [pc, #128]	; (8005884 <HAL_GPIO_Init+0x240>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d052      	beq.n	80058ac <HAL_GPIO_Init+0x268>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <HAL_GPIO_Init+0x244>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d031      	beq.n	8005872 <HAL_GPIO_Init+0x22e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1e      	ldr	r2, [pc, #120]	; (800588c <HAL_GPIO_Init+0x248>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02b      	beq.n	800586e <HAL_GPIO_Init+0x22a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <HAL_GPIO_Init+0x24c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d025      	beq.n	800586a <HAL_GPIO_Init+0x226>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <HAL_GPIO_Init+0x250>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01f      	beq.n	8005866 <HAL_GPIO_Init+0x222>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_GPIO_Init+0x254>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d019      	beq.n	8005862 <HAL_GPIO_Init+0x21e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1a      	ldr	r2, [pc, #104]	; (800589c <HAL_GPIO_Init+0x258>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_GPIO_Init+0x21a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <HAL_GPIO_Init+0x25c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00d      	beq.n	800585a <HAL_GPIO_Init+0x216>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <HAL_GPIO_Init+0x260>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <HAL_GPIO_Init+0x212>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <HAL_GPIO_Init+0x264>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d101      	bne.n	8005852 <HAL_GPIO_Init+0x20e>
 800584e:	2309      	movs	r3, #9
 8005850:	e02d      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 8005852:	230a      	movs	r3, #10
 8005854:	e02b      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 8005856:	2308      	movs	r3, #8
 8005858:	e029      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 800585a:	2307      	movs	r3, #7
 800585c:	e027      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 800585e:	2306      	movs	r3, #6
 8005860:	e025      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 8005862:	2305      	movs	r3, #5
 8005864:	e023      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 8005866:	2304      	movs	r3, #4
 8005868:	e021      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 800586a:	2303      	movs	r3, #3
 800586c:	e01f      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 800586e:	2302      	movs	r3, #2
 8005870:	e01d      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 8005872:	2301      	movs	r3, #1
 8005874:	e01b      	b.n	80058ae <HAL_GPIO_Init+0x26a>
 8005876:	bf00      	nop
 8005878:	58000080 	.word	0x58000080
 800587c:	58024400 	.word	0x58024400
 8005880:	58000400 	.word	0x58000400
 8005884:	58020000 	.word	0x58020000
 8005888:	58020400 	.word	0x58020400
 800588c:	58020800 	.word	0x58020800
 8005890:	58020c00 	.word	0x58020c00
 8005894:	58021000 	.word	0x58021000
 8005898:	58021400 	.word	0x58021400
 800589c:	58021800 	.word	0x58021800
 80058a0:	58021c00 	.word	0x58021c00
 80058a4:	58022000 	.word	0x58022000
 80058a8:	58022400 	.word	0x58022400
 80058ac:	2300      	movs	r3, #0
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	f002 0203 	and.w	r2, r2, #3
 80058b4:	0092      	lsls	r2, r2, #2
 80058b6:	4093      	lsls	r3, r2
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058be:	4938      	ldr	r1, [pc, #224]	; (80059a0 <HAL_GPIO_Init+0x35c>)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	089b      	lsrs	r3, r3, #2
 80058c4:	3302      	adds	r3, #2
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	43db      	mvns	r3, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4013      	ands	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	43db      	mvns	r3, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4013      	ands	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3301      	adds	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	f47f ae63 	bne.w	8005658 <HAL_GPIO_Init+0x14>
  }
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	3724      	adds	r7, #36	; 0x24
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	58000400 	.word	0x58000400

080059a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059b2:	4b75      	ldr	r3, [pc, #468]	; (8005b88 <HAL_GPIO_DeInit+0x1e4>)
 80059b4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80059b6:	e0d9      	b.n	8005b6c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80059b8:	2201      	movs	r2, #1
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	4013      	ands	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80cc 	beq.w	8005b66 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80059ce:	4a6f      	ldr	r2, [pc, #444]	; (8005b8c <HAL_GPIO_DeInit+0x1e8>)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	089b      	lsrs	r3, r3, #2
 80059d4:	3302      	adds	r3, #2
 80059d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059da:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	220f      	movs	r2, #15
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	4013      	ands	r3, r2
 80059ee:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a67      	ldr	r2, [pc, #412]	; (8005b90 <HAL_GPIO_DeInit+0x1ec>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d037      	beq.n	8005a68 <HAL_GPIO_DeInit+0xc4>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a66      	ldr	r2, [pc, #408]	; (8005b94 <HAL_GPIO_DeInit+0x1f0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d031      	beq.n	8005a64 <HAL_GPIO_DeInit+0xc0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a65      	ldr	r2, [pc, #404]	; (8005b98 <HAL_GPIO_DeInit+0x1f4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d02b      	beq.n	8005a60 <HAL_GPIO_DeInit+0xbc>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a64      	ldr	r2, [pc, #400]	; (8005b9c <HAL_GPIO_DeInit+0x1f8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d025      	beq.n	8005a5c <HAL_GPIO_DeInit+0xb8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a63      	ldr	r2, [pc, #396]	; (8005ba0 <HAL_GPIO_DeInit+0x1fc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d01f      	beq.n	8005a58 <HAL_GPIO_DeInit+0xb4>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a62      	ldr	r2, [pc, #392]	; (8005ba4 <HAL_GPIO_DeInit+0x200>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d019      	beq.n	8005a54 <HAL_GPIO_DeInit+0xb0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a61      	ldr	r2, [pc, #388]	; (8005ba8 <HAL_GPIO_DeInit+0x204>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_GPIO_DeInit+0xac>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a60      	ldr	r2, [pc, #384]	; (8005bac <HAL_GPIO_DeInit+0x208>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00d      	beq.n	8005a4c <HAL_GPIO_DeInit+0xa8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a5f      	ldr	r2, [pc, #380]	; (8005bb0 <HAL_GPIO_DeInit+0x20c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <HAL_GPIO_DeInit+0xa4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a5e      	ldr	r2, [pc, #376]	; (8005bb4 <HAL_GPIO_DeInit+0x210>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d101      	bne.n	8005a44 <HAL_GPIO_DeInit+0xa0>
 8005a40:	2309      	movs	r3, #9
 8005a42:	e012      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a44:	230a      	movs	r3, #10
 8005a46:	e010      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	e00e      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a4c:	2307      	movs	r3, #7
 8005a4e:	e00c      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a50:	2306      	movs	r3, #6
 8005a52:	e00a      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a54:	2305      	movs	r3, #5
 8005a56:	e008      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	e006      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e004      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e002      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_GPIO_DeInit+0xc6>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	f002 0203 	and.w	r2, r2, #3
 8005a70:	0092      	lsls	r2, r2, #2
 8005a72:	4093      	lsls	r3, r2
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d136      	bne.n	8005ae8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	43db      	mvns	r3, r3
 8005a82:	401a      	ands	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	401a      	ands	r2, r3
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	220f      	movs	r2, #15
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005aca:	4a30      	ldr	r2, [pc, #192]	; (8005b8c <HAL_GPIO_DeInit+0x1e8>)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	089b      	lsrs	r3, r3, #2
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	43da      	mvns	r2, r3
 8005ada:	482c      	ldr	r0, [pc, #176]	; (8005b8c <HAL_GPIO_DeInit+0x1e8>)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	089b      	lsrs	r3, r3, #2
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	2103      	movs	r1, #3
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	08da      	lsrs	r2, r3, #3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3208      	adds	r2, #8
 8005b04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	220f      	movs	r2, #15
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	43db      	mvns	r3, r3
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	08d2      	lsrs	r2, r2, #3
 8005b1c:	4019      	ands	r1, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3208      	adds	r2, #8
 8005b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	2103      	movs	r1, #3
 8005b30:	fa01 f303 	lsl.w	r3, r1, r3
 8005b34:	43db      	mvns	r3, r3
 8005b36:	401a      	ands	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	2101      	movs	r1, #1
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	2103      	movs	r1, #3
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	401a      	ands	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f47f af1f 	bne.w	80059b8 <HAL_GPIO_DeInit+0x14>
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	58000080 	.word	0x58000080
 8005b8c:	58000400 	.word	0x58000400
 8005b90:	58020000 	.word	0x58020000
 8005b94:	58020400 	.word	0x58020400
 8005b98:	58020800 	.word	0x58020800
 8005b9c:	58020c00 	.word	0x58020c00
 8005ba0:	58021000 	.word	0x58021000
 8005ba4:	58021400 	.word	0x58021400
 8005ba8:	58021800 	.word	0x58021800
 8005bac:	58021c00 	.word	0x58021c00
 8005bb0:	58022000 	.word	0x58022000
 8005bb4:	58022400 	.word	0x58022400

08005bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e07f      	b.n	8005cca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fa fdb6 	bl	8000750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2224      	movs	r2, #36	; 0x24
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d107      	bne.n	8005c32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c2e:	609a      	str	r2, [r3, #8]
 8005c30:	e006      	b.n	8005c40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d104      	bne.n	8005c52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_I2C_Init+0x11c>)
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1a      	ldr	r2, [r3, #32]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	02008000 	.word	0x02008000

08005cd8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e021      	b.n	8005d2e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2224      	movs	r2, #36	; 0x24
 8005cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0201 	bic.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fa fe4e 	bl	80009a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	4608      	mov	r0, r1
 8005d42:	4611      	mov	r1, r2
 8005d44:	461a      	mov	r2, r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	817b      	strh	r3, [r7, #10]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	813b      	strh	r3, [r7, #8]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	f040 80f9 	bne.w	8005f52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_I2C_Mem_Write+0x34>
 8005d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d105      	bne.n	8005d78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e0ed      	b.n	8005f54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_I2C_Mem_Write+0x4e>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e0e6      	b.n	8005f54 <HAL_I2C_Mem_Write+0x21c>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d8e:	f7fb fb63 	bl	8001458 <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	2319      	movs	r3, #25
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f001 ff85 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e0d1      	b.n	8005f54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2221      	movs	r2, #33	; 0x21
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2240      	movs	r2, #64	; 0x40
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a3a      	ldr	r2, [r7, #32]
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dd8:	88f8      	ldrh	r0, [r7, #6]
 8005dda:	893a      	ldrh	r2, [r7, #8]
 8005ddc:	8979      	ldrh	r1, [r7, #10]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	4603      	mov	r3, r0
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 ffff 	bl	8006dec <I2C_RequestMemoryWrite>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e0a9      	b.n	8005f54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2bff      	cmp	r3, #255	; 0xff
 8005e08:	d90e      	bls.n	8005e28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	22ff      	movs	r2, #255	; 0xff
 8005e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	8979      	ldrh	r1, [r7, #10]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f002 f8ff 	bl	8008024 <I2C_TransferConfig>
 8005e26:	e00f      	b.n	8005e48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	8979      	ldrh	r1, [r7, #10]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f002 f8ee 	bl	8008024 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f001 ff7e 	bl	8007d4e <I2C_WaitOnTXISFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e07b      	b.n	8005f54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	781a      	ldrb	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d034      	beq.n	8005f00 <HAL_I2C_Mem_Write+0x1c8>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d130      	bne.n	8005f00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	2180      	movs	r1, #128	; 0x80
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f001 ff01 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e04d      	b.n	8005f54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2bff      	cmp	r3, #255	; 0xff
 8005ec0:	d90e      	bls.n	8005ee0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	22ff      	movs	r2, #255	; 0xff
 8005ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	8979      	ldrh	r1, [r7, #10]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f002 f8a3 	bl	8008024 <I2C_TransferConfig>
 8005ede:	e00f      	b.n	8005f00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	8979      	ldrh	r1, [r7, #10]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f002 f892 	bl	8008024 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d19e      	bne.n	8005e48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 ff64 	bl	8007ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e01a      	b.n	8005f54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2220      	movs	r2, #32
 8005f24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6859      	ldr	r1, [r3, #4]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <HAL_I2C_Mem_Write+0x224>)
 8005f32:	400b      	ands	r3, r1
 8005f34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e000      	b.n	8005f54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f52:	2302      	movs	r3, #2
  }
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3718      	adds	r7, #24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	fe00e800 	.word	0xfe00e800

08005f60 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	4608      	mov	r0, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	817b      	strh	r3, [r7, #10]
 8005f72:	460b      	mov	r3, r1
 8005f74:	813b      	strh	r3, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	f040 80c2 	bne.w	800610c <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_I2C_Mem_Read_DMA+0x34>
 8005f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0b6      	b.n	800610e <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fae:	d101      	bne.n	8005fb4 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e0ac      	b.n	800610e <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_I2C_Mem_Read_DMA+0x62>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e0a5      	b.n	800610e <HAL_I2C_Mem_Read_DMA+0x1ae>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2222      	movs	r2, #34	; 0x22
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2240      	movs	r2, #64	; 0x40
 8005fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a3a      	ldr	r2, [r7, #32]
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4a4a      	ldr	r2, [pc, #296]	; (8006118 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8005ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4a49      	ldr	r2, [pc, #292]	; (800611c <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8005ff6:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8005ff8:	897a      	ldrh	r2, [r7, #10]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006002:	b29b      	uxth	r3, r3
 8006004:	2bff      	cmp	r3, #255	; 0xff
 8006006:	d903      	bls.n	8006010 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	22ff      	movs	r2, #255	; 0xff
 800600c:	851a      	strh	r2, [r3, #40]	; 0x28
 800600e:	e004      	b.n	800601a <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d109      	bne.n	8006034 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006020:	893b      	ldrh	r3, [r7, #8]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f04f 32ff 	mov.w	r2, #4294967295
 8006030:	651a      	str	r2, [r3, #80]	; 0x50
 8006032:	e00b      	b.n	800604c <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006034:	893b      	ldrh	r3, [r7, #8]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	b29b      	uxth	r3, r3
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8006042:	893b      	ldrh	r3, [r7, #8]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d020      	beq.n	8006096 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006058:	4a31      	ldr	r2, [pc, #196]	; (8006120 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 800605a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	4a30      	ldr	r2, [pc, #192]	; (8006124 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8006062:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006068:	2200      	movs	r2, #0
 800606a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006070:	2200      	movs	r2, #0
 8006072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3324      	adds	r3, #36	; 0x24
 800607e:	4619      	mov	r1, r3
 8006080:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006086:	f7fc f8cf 	bl	8002228 <HAL_DMA_Start_IT>
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d127      	bne.n	80060e4 <HAL_I2C_Mem_Read_DMA+0x184>
 8006094:	e013      	b.n	80060be <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e027      	b.n	800610e <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	8979      	ldrh	r1, [r7, #10]
 80060c4:	4b18      	ldr	r3, [pc, #96]	; (8006128 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2300      	movs	r3, #0
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f001 ffaa 	bl	8008024 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060d8:	2101      	movs	r1, #1
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f001 ffd4 	bl	8008088 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e014      	b.n	800610e <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f8:	f043 0210 	orr.w	r2, r3, #16
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	ffff0000 	.word	0xffff0000
 800611c:	08006809 	.word	0x08006809
 8006120:	0800796b 	.word	0x0800796b
 8006124:	08007a01 	.word	0x08007a01
 8006128:	80002000 	.word	0x80002000

0800612c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	; 0x28
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	607a      	str	r2, [r7, #4]
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	460b      	mov	r3, r1
 800613a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b20      	cmp	r3, #32
 800614a:	f040 80ef 	bne.w	800632c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615c:	d101      	bne.n	8006162 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
 8006160:	e0e5      	b.n	800632e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_I2C_IsDeviceReady+0x44>
 800616c:	2302      	movs	r3, #2
 800616e:	e0de      	b.n	800632e <HAL_I2C_IsDeviceReady+0x202>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2224      	movs	r2, #36	; 0x24
 800617c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d105      	bne.n	800619a <HAL_I2C_IsDeviceReady+0x6e>
 800618e:	897b      	ldrh	r3, [r7, #10]
 8006190:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006194:	4b68      	ldr	r3, [pc, #416]	; (8006338 <HAL_I2C_IsDeviceReady+0x20c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	e004      	b.n	80061a4 <HAL_I2C_IsDeviceReady+0x78>
 800619a:	897b      	ldrh	r3, [r7, #10]
 800619c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80061aa:	f7fb f955 	bl	8001458 <HAL_GetTick>
 80061ae:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	bf0c      	ite	eq
 80061be:	2301      	moveq	r3, #1
 80061c0:	2300      	movne	r3, #0
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	bf0c      	ite	eq
 80061d4:	2301      	moveq	r3, #1
 80061d6:	2300      	movne	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80061dc:	e034      	b.n	8006248 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d01a      	beq.n	800621c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061e6:	f7fb f937 	bl	8001458 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d302      	bcc.n	80061fc <HAL_I2C_IsDeviceReady+0xd0>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10f      	bne.n	800621c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006208:	f043 0220 	orr.w	r2, r3, #32
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e088      	b.n	800632e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	2b20      	cmp	r3, #32
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b10      	cmp	r3, #16
 800623e:	bf0c      	ite	eq
 8006240:	2301      	moveq	r3, #1
 8006242:	2300      	movne	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006248:	7ffb      	ldrb	r3, [r7, #31]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <HAL_I2C_IsDeviceReady+0x128>
 800624e:	7fbb      	ldrb	r3, [r7, #30]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0c4      	beq.n	80061de <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b10      	cmp	r3, #16
 8006260:	d01a      	beq.n	8006298 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	2120      	movs	r1, #32
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f001 fd1f 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e058      	b.n	800632e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2220      	movs	r2, #32
 8006282:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e04a      	b.n	800632e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	2120      	movs	r1, #32
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f001 fd04 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e03d      	b.n	800632e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2210      	movs	r2, #16
 80062b8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2220      	movs	r2, #32
 80062c0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d118      	bne.n	80062fc <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062d8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2120      	movs	r1, #32
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f001 fce3 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e01c      	b.n	800632e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2220      	movs	r2, #32
 80062fa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	3301      	adds	r3, #1
 8006300:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	429a      	cmp	r2, r3
 8006308:	f63f af3d 	bhi.w	8006186 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006318:	f043 0220 	orr.w	r2, r3, #32
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800632c:	2302      	movs	r3, #2
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	02002000 	.word	0x02002000

0800633c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	68f9      	ldr	r1, [r7, #12]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
  }
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
 80063cc:	4613      	mov	r3, r2
 80063ce:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <I2C_Slave_ISR_IT+0x24>
 8006460:	2302      	movs	r3, #2
 8006462:	e0e1      	b.n	8006628 <I2C_Slave_ISR_IT+0x1e8>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d008      	beq.n	8006488 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006480:	6939      	ldr	r1, [r7, #16]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 feec 	bl	8007260 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b00      	cmp	r3, #0
 8006490:	d04b      	beq.n	800652a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006498:	2b00      	cmp	r3, #0
 800649a:	d046      	beq.n	800652a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d128      	bne.n	80064f8 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b28      	cmp	r3, #40	; 0x28
 80064b0:	d108      	bne.n	80064c4 <I2C_Slave_ISR_IT+0x84>
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064b8:	d104      	bne.n	80064c4 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80064ba:	6939      	ldr	r1, [r7, #16]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f001 f8c5 	bl	800764c <I2C_ITListenCplt>
 80064c2:	e031      	b.n	8006528 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b29      	cmp	r3, #41	; 0x29
 80064ce:	d10e      	bne.n	80064ee <I2C_Slave_ISR_IT+0xae>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064d6:	d00a      	beq.n	80064ee <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2210      	movs	r2, #16
 80064de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f001 fa1e 	bl	8007922 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fd95 	bl	8007016 <I2C_ITSlaveSeqCplt>
 80064ec:	e01c      	b.n	8006528 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2210      	movs	r2, #16
 80064f4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80064f6:	e08f      	b.n	8006618 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2210      	movs	r2, #16
 80064fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006504:	f043 0204 	orr.w	r2, r3, #4
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <I2C_Slave_ISR_IT+0xda>
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006518:	d17e      	bne.n	8006618 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651e:	4619      	mov	r1, r3
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f001 f8e7 	bl	80076f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006526:	e077      	b.n	8006618 <I2C_Slave_ISR_IT+0x1d8>
 8006528:	e076      	b.n	8006618 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d02f      	beq.n	8006594 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800653a:	2b00      	cmp	r3, #0
 800653c:	d02a      	beq.n	8006594 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d018      	beq.n	800657a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d14b      	bne.n	800661c <I2C_Slave_ISR_IT+0x1dc>
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800658a:	d047      	beq.n	800661c <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fd42 	bl	8007016 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006592:	e043      	b.n	800661c <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80065a8:	6939      	ldr	r1, [r7, #16]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fc72 	bl	8006e94 <I2C_ITAddrCplt>
 80065b0:	e035      	b.n	800661e <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d030      	beq.n	800661e <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d02b      	beq.n	800661e <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d018      	beq.n	8006602 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8006600:	e00d      	b.n	800661e <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006608:	d002      	beq.n	8006610 <I2C_Slave_ISR_IT+0x1d0>
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fd00 	bl	8007016 <I2C_ITSlaveSeqCplt>
 8006616:	e002      	b.n	800661e <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006618:	bf00      	nop
 800661a:	e000      	b.n	800661e <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800661c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af02      	add	r7, sp, #8
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <I2C_Master_ISR_DMA+0x1a>
 8006646:	2302      	movs	r3, #2
 8006648:	e0d9      	b.n	80067fe <I2C_Master_ISR_DMA+0x1ce>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	d016      	beq.n	800668a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006662:	2b00      	cmp	r3, #0
 8006664:	d011      	beq.n	800668a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2210      	movs	r2, #16
 800666c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	f043 0204 	orr.w	r2, r3, #4
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800667a:	2120      	movs	r1, #32
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f001 fd03 	bl	8008088 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 f94d 	bl	8007922 <I2C_Flush_TXDR>
 8006688:	e0b4      	b.n	80067f4 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006690:	2b00      	cmp	r3, #0
 8006692:	d071      	beq.n	8006778 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800669a:	2b00      	cmp	r3, #0
 800669c:	d06c      	beq.n	8006778 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ac:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d04e      	beq.n	8006756 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2bff      	cmp	r3, #255	; 0xff
 80066ce:	d906      	bls.n	80066de <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	22ff      	movs	r2, #255	; 0xff
 80066d4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80066d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e010      	b.n	8006700 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066f0:	d003      	beq.n	80066fa <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e002      	b.n	8006700 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80066fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066fe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006704:	b2da      	uxtb	r2, r3
 8006706:	8a79      	ldrh	r1, [r7, #18]
 8006708:	2300      	movs	r3, #0
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f001 fc88 	bl	8008024 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b22      	cmp	r3, #34	; 0x22
 8006730:	d108      	bne.n	8006744 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006740:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006742:	e057      	b.n	80067f4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006752:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006754:	e04e      	b.n	80067f4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006764:	d003      	beq.n	800676e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fc18 	bl	8006f9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800676c:	e042      	b.n	80067f4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800676e:	2140      	movs	r1, #64	; 0x40
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 ffbf 	bl	80076f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006776:	e03d      	b.n	80067f4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d028      	beq.n	80067d4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006788:	2b00      	cmp	r3, #0
 800678a:	d023      	beq.n	80067d4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d119      	bne.n	80067ca <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067a4:	d025      	beq.n	80067f2 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067ae:	d108      	bne.n	80067c2 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067be:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80067c0:	e017      	b.n	80067f2 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fbea 	bl	8006f9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80067c8:	e013      	b.n	80067f2 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80067ca:	2140      	movs	r1, #64	; 0x40
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 ff91 	bl	80076f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067d2:	e00e      	b.n	80067f2 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 fc70 	bl	80070d0 <I2C_ITMasterCplt>
 80067f0:	e000      	b.n	80067f4 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80067f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006814:	4b87      	ldr	r3, [pc, #540]	; (8006a34 <I2C_Mem_ISR_DMA+0x22c>)
 8006816:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <I2C_Mem_ISR_DMA+0x1e>
 8006822:	2302      	movs	r3, #2
 8006824:	e102      	b.n	8006a2c <I2C_Mem_ISR_DMA+0x224>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b00      	cmp	r3, #0
 8006836:	d016      	beq.n	8006866 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800683e:	2b00      	cmp	r3, #0
 8006840:	d011      	beq.n	8006866 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2210      	movs	r2, #16
 8006848:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	f043 0204 	orr.w	r2, r3, #4
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006856:	2120      	movs	r1, #32
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f001 fc15 	bl	8008088 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f001 f85f 	bl	8007922 <I2C_Flush_TXDR>
 8006864:	e0dd      	b.n	8006a22 <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00e      	beq.n	800688e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006882:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f04f 32ff 	mov.w	r2, #4294967295
 800688a:	651a      	str	r2, [r3, #80]	; 0x50
 800688c:	e0c9      	b.n	8006a22 <I2C_Mem_ISR_DMA+0x21a>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006894:	2b00      	cmp	r3, #0
 8006896:	d05b      	beq.n	8006950 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d056      	beq.n	8006950 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80068a2:	2110      	movs	r1, #16
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f001 fbef 	bl	8008088 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d048      	beq.n	8006946 <I2C_Mem_ISR_DMA+0x13e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2bff      	cmp	r3, #255	; 0xff
 80068bc:	d910      	bls.n	80068e0 <I2C_Mem_ISR_DMA+0xd8>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c8:	b299      	uxth	r1, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	2300      	movs	r3, #0
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f001 fba3 	bl	8008024 <I2C_TransferConfig>
 80068de:	e011      	b.n	8006904 <I2C_Mem_ISR_DMA+0xfc>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ee:	b299      	uxth	r1, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	2300      	movs	r3, #0
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f001 fb90 	bl	8008024 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b22      	cmp	r3, #34	; 0x22
 8006920:	d108      	bne.n	8006934 <I2C_Mem_ISR_DMA+0x12c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006930:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006932:	e076      	b.n	8006a22 <I2C_Mem_ISR_DMA+0x21a>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006942:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006944:	e06d      	b.n	8006a22 <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006946:	2140      	movs	r1, #64	; 0x40
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fed3 	bl	80076f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800694e:	e068      	b.n	8006a22 <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d055      	beq.n	8006a06 <I2C_Mem_ISR_DMA+0x1fe>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006960:	2b00      	cmp	r3, #0
 8006962:	d050      	beq.n	8006a06 <I2C_Mem_ISR_DMA+0x1fe>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b22      	cmp	r3, #34	; 0x22
 800696e:	d101      	bne.n	8006974 <I2C_Mem_ISR_DMA+0x16c>
    {
      direction = I2C_GENERATE_START_READ;
 8006970:	4b31      	ldr	r3, [pc, #196]	; (8006a38 <I2C_Mem_ISR_DMA+0x230>)
 8006972:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006978:	b29b      	uxth	r3, r3
 800697a:	2bff      	cmp	r3, #255	; 0xff
 800697c:	d910      	bls.n	80069a0 <I2C_Mem_ISR_DMA+0x198>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	22ff      	movs	r2, #255	; 0xff
 8006982:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006988:	b299      	uxth	r1, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698e:	b2da      	uxtb	r2, r3
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f001 fb43 	bl	8008024 <I2C_TransferConfig>
 800699e:	e011      	b.n	80069c4 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ae:	b299      	uxth	r1, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f001 fb30 	bl	8008024 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b22      	cmp	r3, #34	; 0x22
 80069e0:	d108      	bne.n	80069f4 <I2C_Mem_ISR_DMA+0x1ec>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069f0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069f2:	e016      	b.n	8006a22 <I2C_Mem_ISR_DMA+0x21a>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a02:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a04:	e00d      	b.n	8006a22 <I2C_Mem_ISR_DMA+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d008      	beq.n	8006a22 <I2C_Mem_ISR_DMA+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <I2C_Mem_ISR_DMA+0x21a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006a1a:	68b9      	ldr	r1, [r7, #8]
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 fb57 	bl	80070d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	80002000 	.word	0x80002000
 8006a38:	80002400 	.word	0x80002400

08006a3c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <I2C_Slave_ISR_DMA+0x24>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e1c0      	b.n	8006de2 <I2C_Slave_ISR_DMA+0x3a6>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fbee 	bl	8007260 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8196 	beq.w	8006dbc <I2C_Slave_ISR_DMA+0x380>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 8190 	beq.w	8006dbc <I2C_Slave_ISR_DMA+0x380>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d105      	bne.n	8006ab2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 817e 	beq.w	8006dae <I2C_Slave_ISR_DMA+0x372>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d07b      	beq.n	8006bb2 <I2C_Slave_ISR_DMA+0x176>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d076      	beq.n	8006bb2 <I2C_Slave_ISR_DMA+0x176>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a74      	ldr	r2, [pc, #464]	; (8006c9c <I2C_Slave_ISR_DMA+0x260>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d059      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a72      	ldr	r2, [pc, #456]	; (8006ca0 <I2C_Slave_ISR_DMA+0x264>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d053      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a70      	ldr	r2, [pc, #448]	; (8006ca4 <I2C_Slave_ISR_DMA+0x268>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d04d      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a6e      	ldr	r2, [pc, #440]	; (8006ca8 <I2C_Slave_ISR_DMA+0x26c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d047      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a6c      	ldr	r2, [pc, #432]	; (8006cac <I2C_Slave_ISR_DMA+0x270>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d041      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a6a      	ldr	r2, [pc, #424]	; (8006cb0 <I2C_Slave_ISR_DMA+0x274>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d03b      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a68      	ldr	r2, [pc, #416]	; (8006cb4 <I2C_Slave_ISR_DMA+0x278>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d035      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a66      	ldr	r2, [pc, #408]	; (8006cb8 <I2C_Slave_ISR_DMA+0x27c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d02f      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a64      	ldr	r2, [pc, #400]	; (8006cbc <I2C_Slave_ISR_DMA+0x280>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d029      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a62      	ldr	r2, [pc, #392]	; (8006cc0 <I2C_Slave_ISR_DMA+0x284>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d023      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a60      	ldr	r2, [pc, #384]	; (8006cc4 <I2C_Slave_ISR_DMA+0x288>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d01d      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a5e      	ldr	r2, [pc, #376]	; (8006cc8 <I2C_Slave_ISR_DMA+0x28c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d017      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a5c      	ldr	r2, [pc, #368]	; (8006ccc <I2C_Slave_ISR_DMA+0x290>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d011      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a5a      	ldr	r2, [pc, #360]	; (8006cd0 <I2C_Slave_ISR_DMA+0x294>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00b      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a58      	ldr	r2, [pc, #352]	; (8006cd4 <I2C_Slave_ISR_DMA+0x298>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d005      	beq.n	8006b84 <I2C_Slave_ISR_DMA+0x148>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a56      	ldr	r2, [pc, #344]	; (8006cd8 <I2C_Slave_ISR_DMA+0x29c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d109      	bne.n	8006b98 <I2C_Slave_ISR_DMA+0x15c>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	bf0c      	ite	eq
 8006b90:	2301      	moveq	r3, #1
 8006b92:	2300      	movne	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	e008      	b.n	8006baa <I2C_Slave_ISR_DMA+0x16e>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	bf0c      	ite	eq
 8006ba4:	2301      	moveq	r3, #1
 8006ba6:	2300      	movne	r3, #0
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <I2C_Slave_ISR_DMA+0x176>
          {
            treatdmanack = 1U;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 809d 	beq.w	8006cf6 <I2C_Slave_ISR_DMA+0x2ba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 8097 	beq.w	8006cf6 <I2C_Slave_ISR_DMA+0x2ba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a33      	ldr	r2, [pc, #204]	; (8006c9c <I2C_Slave_ISR_DMA+0x260>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d059      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a31      	ldr	r2, [pc, #196]	; (8006ca0 <I2C_Slave_ISR_DMA+0x264>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d053      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2f      	ldr	r2, [pc, #188]	; (8006ca4 <I2C_Slave_ISR_DMA+0x268>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d04d      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2d      	ldr	r2, [pc, #180]	; (8006ca8 <I2C_Slave_ISR_DMA+0x26c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d047      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2b      	ldr	r2, [pc, #172]	; (8006cac <I2C_Slave_ISR_DMA+0x270>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d041      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a29      	ldr	r2, [pc, #164]	; (8006cb0 <I2C_Slave_ISR_DMA+0x274>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d03b      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a27      	ldr	r2, [pc, #156]	; (8006cb4 <I2C_Slave_ISR_DMA+0x278>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d035      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a25      	ldr	r2, [pc, #148]	; (8006cb8 <I2C_Slave_ISR_DMA+0x27c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d02f      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a23      	ldr	r2, [pc, #140]	; (8006cbc <I2C_Slave_ISR_DMA+0x280>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d029      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a21      	ldr	r2, [pc, #132]	; (8006cc0 <I2C_Slave_ISR_DMA+0x284>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d023      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <I2C_Slave_ISR_DMA+0x288>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d01d      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1d      	ldr	r2, [pc, #116]	; (8006cc8 <I2C_Slave_ISR_DMA+0x28c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d017      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1b      	ldr	r2, [pc, #108]	; (8006ccc <I2C_Slave_ISR_DMA+0x290>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d011      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a19      	ldr	r2, [pc, #100]	; (8006cd0 <I2C_Slave_ISR_DMA+0x294>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <I2C_Slave_ISR_DMA+0x298>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d005      	beq.n	8006c88 <I2C_Slave_ISR_DMA+0x24c>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <I2C_Slave_ISR_DMA+0x29c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d129      	bne.n	8006cdc <I2C_Slave_ISR_DMA+0x2a0>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bf0c      	ite	eq
 8006c94:	2301      	moveq	r3, #1
 8006c96:	2300      	movne	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	e028      	b.n	8006cee <I2C_Slave_ISR_DMA+0x2b2>
 8006c9c:	40020010 	.word	0x40020010
 8006ca0:	40020028 	.word	0x40020028
 8006ca4:	40020040 	.word	0x40020040
 8006ca8:	40020058 	.word	0x40020058
 8006cac:	40020070 	.word	0x40020070
 8006cb0:	40020088 	.word	0x40020088
 8006cb4:	400200a0 	.word	0x400200a0
 8006cb8:	400200b8 	.word	0x400200b8
 8006cbc:	40020410 	.word	0x40020410
 8006cc0:	40020428 	.word	0x40020428
 8006cc4:	40020440 	.word	0x40020440
 8006cc8:	40020458 	.word	0x40020458
 8006ccc:	40020470 	.word	0x40020470
 8006cd0:	40020488 	.word	0x40020488
 8006cd4:	400204a0 	.word	0x400204a0
 8006cd8:	400204b8 	.word	0x400204b8
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	bf0c      	ite	eq
 8006ce8:	2301      	moveq	r3, #1
 8006cea:	2300      	movne	r3, #0
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <I2C_Slave_ISR_DMA+0x2ba>
          {
            treatdmanack = 1U;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d128      	bne.n	8006d4e <I2C_Slave_ISR_DMA+0x312>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b28      	cmp	r3, #40	; 0x28
 8006d06:	d108      	bne.n	8006d1a <I2C_Slave_ISR_DMA+0x2de>
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d0e:	d104      	bne.n	8006d1a <I2C_Slave_ISR_DMA+0x2de>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fc9a 	bl	800764c <I2C_ITListenCplt>
 8006d18:	e048      	b.n	8006dac <I2C_Slave_ISR_DMA+0x370>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b29      	cmp	r3, #41	; 0x29
 8006d24:	d10e      	bne.n	8006d44 <I2C_Slave_ISR_DMA+0x308>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d2c:	d00a      	beq.n	8006d44 <I2C_Slave_ISR_DMA+0x308>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2210      	movs	r2, #16
 8006d34:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fdf3 	bl	8007922 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f96a 	bl	8007016 <I2C_ITSlaveSeqCplt>
 8006d42:	e033      	b.n	8006dac <I2C_Slave_ISR_DMA+0x370>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2210      	movs	r2, #16
 8006d4a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006d4c:	e034      	b.n	8006db8 <I2C_Slave_ISR_DMA+0x37c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2210      	movs	r2, #16
 8006d54:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5a:	f043 0204 	orr.w	r2, r3, #4
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d68:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <I2C_Slave_ISR_DMA+0x33c>
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d76:	d11f      	bne.n	8006db8 <I2C_Slave_ISR_DMA+0x37c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b21      	cmp	r3, #33	; 0x21
 8006d7c:	d002      	beq.n	8006d84 <I2C_Slave_ISR_DMA+0x348>
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	2b29      	cmp	r3, #41	; 0x29
 8006d82:	d103      	bne.n	8006d8c <I2C_Slave_ISR_DMA+0x350>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2221      	movs	r2, #33	; 0x21
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30
 8006d8a:	e008      	b.n	8006d9e <I2C_Slave_ISR_DMA+0x362>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	2b22      	cmp	r3, #34	; 0x22
 8006d90:	d002      	beq.n	8006d98 <I2C_Slave_ISR_DMA+0x35c>
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b2a      	cmp	r3, #42	; 0x2a
 8006d96:	d102      	bne.n	8006d9e <I2C_Slave_ISR_DMA+0x362>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2222      	movs	r2, #34	; 0x22
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	4619      	mov	r1, r3
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fca5 	bl	80076f4 <I2C_ITError>
      if (treatdmanack == 1U)
 8006daa:	e005      	b.n	8006db8 <I2C_Slave_ISR_DMA+0x37c>
 8006dac:	e004      	b.n	8006db8 <I2C_Slave_ISR_DMA+0x37c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2210      	movs	r2, #16
 8006db4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006db6:	e00f      	b.n	8006dd8 <I2C_Slave_ISR_DMA+0x39c>
      if (treatdmanack == 1U)
 8006db8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dba:	e00d      	b.n	8006dd8 <I2C_Slave_ISR_DMA+0x39c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d008      	beq.n	8006dd8 <I2C_Slave_ISR_DMA+0x39c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <I2C_Slave_ISR_DMA+0x39c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f85e 	bl	8006e94 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop

08006dec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	817b      	strh	r3, [r7, #10]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	813b      	strh	r3, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	8979      	ldrh	r1, [r7, #10]
 8006e0c:	4b20      	ldr	r3, [pc, #128]	; (8006e90 <I2C_RequestMemoryWrite+0xa4>)
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f001 f905 	bl	8008024 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	69b9      	ldr	r1, [r7, #24]
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 ff95 	bl	8007d4e <I2C_WaitOnTXISFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e02c      	b.n	8006e88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d105      	bne.n	8006e40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e34:	893b      	ldrh	r3, [r7, #8]
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28
 8006e3e:	e015      	b.n	8006e6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e40:	893b      	ldrh	r3, [r7, #8]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	69b9      	ldr	r1, [r7, #24]
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 ff7b 	bl	8007d4e <I2C_WaitOnTXISFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e012      	b.n	8006e88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e62:	893b      	ldrh	r3, [r7, #8]
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2200      	movs	r2, #0
 8006e74:	2180      	movs	r1, #128	; 0x80
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 ff1a 	bl	8007cb0 <I2C_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	80002000 	.word	0x80002000

08006e94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006eaa:	2b28      	cmp	r3, #40	; 0x28
 8006eac:	d16a      	bne.n	8006f84 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	0c1b      	lsrs	r3, r3, #16
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ecc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eda:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ee8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d138      	bne.n	8006f64 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006ef2:	897b      	ldrh	r3, [r7, #10]
 8006ef4:	09db      	lsrs	r3, r3, #7
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	89bb      	ldrh	r3, [r7, #12]
 8006efa:	4053      	eors	r3, r2
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	f003 0306 	and.w	r3, r3, #6
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d11c      	bne.n	8006f40 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006f06:	897b      	ldrh	r3, [r7, #10]
 8006f08:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d13b      	bne.n	8006f94 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2208      	movs	r2, #8
 8006f28:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f32:	89ba      	ldrh	r2, [r7, #12]
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fa41 	bl	80063c0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f3e:	e029      	b.n	8006f94 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006f40:	893b      	ldrh	r3, [r7, #8]
 8006f42:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 f907 	bl	800815c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f56:	89ba      	ldrh	r2, [r7, #12]
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff fa2f 	bl	80063c0 <HAL_I2C_AddrCallback>
}
 8006f62:	e017      	b.n	8006f94 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f8f7 	bl	800815c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f76:	89ba      	ldrh	r2, [r7, #12]
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff fa1f 	bl	80063c0 <HAL_I2C_AddrCallback>
}
 8006f82:	e007      	b.n	8006f94 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b21      	cmp	r3, #33	; 0x21
 8006fb6:	d115      	bne.n	8006fe4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2211      	movs	r2, #17
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fcc:	2101      	movs	r1, #1
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f001 f8c4 	bl	800815c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff f9c7 	bl	8006370 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fe2:	e014      	b.n	800700e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2212      	movs	r2, #18
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 f8ae 	bl	800815c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff f9bb 	bl	8006384 <HAL_I2C_MasterRxCpltCallback>
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d008      	beq.n	800704a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e00c      	b.n	8007064 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007062:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b29      	cmp	r3, #41	; 0x29
 800706e:	d112      	bne.n	8007096 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2228      	movs	r2, #40	; 0x28
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2221      	movs	r2, #33	; 0x21
 800707c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800707e:	2101      	movs	r1, #1
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f86b 	bl	800815c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff f982 	bl	8006398 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007094:	e017      	b.n	80070c6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b2a      	cmp	r3, #42	; 0x2a
 80070a0:	d111      	bne.n	80070c6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2228      	movs	r2, #40	; 0x28
 80070a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2222      	movs	r2, #34	; 0x22
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070b0:	2102      	movs	r1, #2
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 f852 	bl	800815c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff f973 	bl	80063ac <HAL_I2C_SlaveRxCpltCallback>
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2220      	movs	r2, #32
 80070e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b21      	cmp	r3, #33	; 0x21
 80070f0:	d107      	bne.n	8007102 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070f2:	2101      	movs	r1, #1
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 f831 	bl	800815c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2211      	movs	r2, #17
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007100:	e00c      	b.n	800711c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b22      	cmp	r3, #34	; 0x22
 800710c:	d106      	bne.n	800711c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800710e:	2102      	movs	r1, #2
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f823 	bl	800815c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2212      	movs	r2, #18
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6859      	ldr	r1, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b4c      	ldr	r3, [pc, #304]	; (8007258 <I2C_ITMasterCplt+0x188>)
 8007128:	400b      	ands	r3, r1
 800712a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a49      	ldr	r2, [pc, #292]	; (800725c <I2C_ITMasterCplt+0x18c>)
 8007136:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f003 0310 	and.w	r3, r3, #16
 800713e:	2b00      	cmp	r3, #0
 8007140:	d009      	beq.n	8007156 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2210      	movs	r2, #16
 8007148:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714e:	f043 0204 	orr.w	r2, r3, #4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b60      	cmp	r3, #96	; 0x60
 8007160:	d10a      	bne.n	8007178 <I2C_ITMasterCplt+0xa8>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	b2db      	uxtb	r3, r3
 8007174:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007176:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fbd2 	bl	8007922 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b60      	cmp	r3, #96	; 0x60
 800718e:	d002      	beq.n	8007196 <I2C_ITMasterCplt+0xc6>
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d006      	beq.n	80071a4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 faa9 	bl	80076f4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80071a2:	e054      	b.n	800724e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b21      	cmp	r3, #33	; 0x21
 80071ae:	d124      	bne.n	80071fa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d10b      	bne.n	80071e2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff f908 	bl	80063f0 <HAL_I2C_MemTxCpltCallback>
}
 80071e0:	e035      	b.n	800724e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7ff f8bc 	bl	8006370 <HAL_I2C_MasterTxCpltCallback>
}
 80071f8:	e029      	b.n	800724e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b22      	cmp	r3, #34	; 0x22
 8007204:	d123      	bne.n	800724e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d10b      	bne.n	8007238 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff f8e7 	bl	8006404 <HAL_I2C_MemRxCpltCallback>
}
 8007236:	e00a      	b.n	800724e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff f89b 	bl	8006384 <HAL_I2C_MasterRxCpltCallback>
}
 800724e:	bf00      	nop
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	fe00e800 	.word	0xfe00e800
 800725c:	ffff0000 	.word	0xffff0000

08007260 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800727c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2220      	movs	r2, #32
 8007284:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	2b21      	cmp	r3, #33	; 0x21
 800728a:	d002      	beq.n	8007292 <I2C_ITSlaveCplt+0x32>
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	2b29      	cmp	r3, #41	; 0x29
 8007290:	d108      	bne.n	80072a4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007292:	f248 0101 	movw	r1, #32769	; 0x8001
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 ff60 	bl	800815c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2221      	movs	r2, #33	; 0x21
 80072a0:	631a      	str	r2, [r3, #48]	; 0x30
 80072a2:	e00d      	b.n	80072c0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	2b22      	cmp	r3, #34	; 0x22
 80072a8:	d002      	beq.n	80072b0 <I2C_ITSlaveCplt+0x50>
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b2a      	cmp	r3, #42	; 0x2a
 80072ae:	d107      	bne.n	80072c0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80072b0:	f248 0102 	movw	r1, #32770	; 0x8002
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 ff51 	bl	800815c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2222      	movs	r2, #34	; 0x22
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6859      	ldr	r1, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	4b7f      	ldr	r3, [pc, #508]	; (80074d8 <I2C_ITSlaveCplt+0x278>)
 80072dc:	400b      	ands	r3, r1
 80072de:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fb1e 	bl	8007922 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d07a      	beq.n	80073e6 <I2C_ITSlaveCplt+0x186>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8110 	beq.w	800752a <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a72      	ldr	r2, [pc, #456]	; (80074dc <I2C_ITSlaveCplt+0x27c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d059      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a70      	ldr	r2, [pc, #448]	; (80074e0 <I2C_ITSlaveCplt+0x280>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d053      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a6e      	ldr	r2, [pc, #440]	; (80074e4 <I2C_ITSlaveCplt+0x284>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d04d      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a6c      	ldr	r2, [pc, #432]	; (80074e8 <I2C_ITSlaveCplt+0x288>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d047      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a6a      	ldr	r2, [pc, #424]	; (80074ec <I2C_ITSlaveCplt+0x28c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d041      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a68      	ldr	r2, [pc, #416]	; (80074f0 <I2C_ITSlaveCplt+0x290>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d03b      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a66      	ldr	r2, [pc, #408]	; (80074f4 <I2C_ITSlaveCplt+0x294>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d035      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a64      	ldr	r2, [pc, #400]	; (80074f8 <I2C_ITSlaveCplt+0x298>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d02f      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a62      	ldr	r2, [pc, #392]	; (80074fc <I2C_ITSlaveCplt+0x29c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d029      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a60      	ldr	r2, [pc, #384]	; (8007500 <I2C_ITSlaveCplt+0x2a0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d023      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a5e      	ldr	r2, [pc, #376]	; (8007504 <I2C_ITSlaveCplt+0x2a4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01d      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a5c      	ldr	r2, [pc, #368]	; (8007508 <I2C_ITSlaveCplt+0x2a8>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d017      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a5a      	ldr	r2, [pc, #360]	; (800750c <I2C_ITSlaveCplt+0x2ac>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d011      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a58      	ldr	r2, [pc, #352]	; (8007510 <I2C_ITSlaveCplt+0x2b0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00b      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a56      	ldr	r2, [pc, #344]	; (8007514 <I2C_ITSlaveCplt+0x2b4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d005      	beq.n	80073ca <I2C_ITSlaveCplt+0x16a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a54      	ldr	r2, [pc, #336]	; (8007518 <I2C_ITSlaveCplt+0x2b8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d105      	bne.n	80073d6 <I2C_ITSlaveCplt+0x176>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	e004      	b.n	80073e0 <I2C_ITSlaveCplt+0x180>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	8553      	strh	r3, [r2, #42]	; 0x2a
 80073e4:	e0a1      	b.n	800752a <I2C_ITSlaveCplt+0x2ca>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 809c 	beq.w	800752a <I2C_ITSlaveCplt+0x2ca>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007400:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 808f 	beq.w	800752a <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a32      	ldr	r2, [pc, #200]	; (80074dc <I2C_ITSlaveCplt+0x27c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d059      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a30      	ldr	r2, [pc, #192]	; (80074e0 <I2C_ITSlaveCplt+0x280>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d053      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2e      	ldr	r2, [pc, #184]	; (80074e4 <I2C_ITSlaveCplt+0x284>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d04d      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a2c      	ldr	r2, [pc, #176]	; (80074e8 <I2C_ITSlaveCplt+0x288>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d047      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2a      	ldr	r2, [pc, #168]	; (80074ec <I2C_ITSlaveCplt+0x28c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d041      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a28      	ldr	r2, [pc, #160]	; (80074f0 <I2C_ITSlaveCplt+0x290>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d03b      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a26      	ldr	r2, [pc, #152]	; (80074f4 <I2C_ITSlaveCplt+0x294>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d035      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a24      	ldr	r2, [pc, #144]	; (80074f8 <I2C_ITSlaveCplt+0x298>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d02f      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a22      	ldr	r2, [pc, #136]	; (80074fc <I2C_ITSlaveCplt+0x29c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d029      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a20      	ldr	r2, [pc, #128]	; (8007500 <I2C_ITSlaveCplt+0x2a0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d023      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <I2C_ITSlaveCplt+0x2a4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d01d      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1c      	ldr	r2, [pc, #112]	; (8007508 <I2C_ITSlaveCplt+0x2a8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d017      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a1a      	ldr	r2, [pc, #104]	; (800750c <I2C_ITSlaveCplt+0x2ac>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d011      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a18      	ldr	r2, [pc, #96]	; (8007510 <I2C_ITSlaveCplt+0x2b0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00b      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a16      	ldr	r2, [pc, #88]	; (8007514 <I2C_ITSlaveCplt+0x2b4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d005      	beq.n	80074cc <I2C_ITSlaveCplt+0x26c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a14      	ldr	r2, [pc, #80]	; (8007518 <I2C_ITSlaveCplt+0x2b8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d127      	bne.n	800751c <I2C_ITSlaveCplt+0x2bc>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	e026      	b.n	8007526 <I2C_ITSlaveCplt+0x2c6>
 80074d8:	fe00e800 	.word	0xfe00e800
 80074dc:	40020010 	.word	0x40020010
 80074e0:	40020028 	.word	0x40020028
 80074e4:	40020040 	.word	0x40020040
 80074e8:	40020058 	.word	0x40020058
 80074ec:	40020070 	.word	0x40020070
 80074f0:	40020088 	.word	0x40020088
 80074f4:	400200a0 	.word	0x400200a0
 80074f8:	400200b8 	.word	0x400200b8
 80074fc:	40020410 	.word	0x40020410
 8007500:	40020428 	.word	0x40020428
 8007504:	40020440 	.word	0x40020440
 8007508:	40020458 	.word	0x40020458
 800750c:	40020470 	.word	0x40020470
 8007510:	40020488 	.word	0x40020488
 8007514:	400204a0 	.word	0x400204a0
 8007518:	400204b8 	.word	0x400204b8
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	b29b      	uxth	r3, r3
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	d020      	beq.n	8007576 <I2C_ITSlaveCplt+0x316>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f023 0304 	bic.w	r3, r3, #4
 800753a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00c      	beq.n	8007576 <I2C_ITSlaveCplt+0x316>
    {
      hi2c->XferSize--;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <I2C_ITSlaveCplt+0x32c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007584:	f043 0204 	orr.w	r2, r3, #4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d010      	beq.n	80075c4 <I2C_ITSlaveCplt+0x364>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f8a3 	bl	80076f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b28      	cmp	r3, #40	; 0x28
 80075b8:	d141      	bne.n	800763e <I2C_ITSlaveCplt+0x3de>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80075ba:	6979      	ldr	r1, [r7, #20]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f845 	bl	800764c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075c2:	e03c      	b.n	800763e <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075cc:	d014      	beq.n	80075f8 <I2C_ITSlaveCplt+0x398>
    I2C_ITSlaveSeqCplt(hi2c);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fd21 	bl	8007016 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <I2C_ITSlaveCplt+0x3e8>)
 80075d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7fe fef3 	bl	80063dc <HAL_I2C_ListenCpltCallback>
}
 80075f6:	e022      	b.n	800763e <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b22      	cmp	r3, #34	; 0x22
 8007602:	d10e      	bne.n	8007622 <I2C_ITSlaveCplt+0x3c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fe fec6 	bl	80063ac <HAL_I2C_SlaveRxCpltCallback>
}
 8007620:	e00d      	b.n	800763e <I2C_ITSlaveCplt+0x3de>
    hi2c->State = HAL_I2C_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7fe fead 	bl	8006398 <HAL_I2C_SlaveTxCpltCallback>
}
 800763e:	bf00      	nop
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	ffff0000 	.word	0xffff0000

0800764c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a25      	ldr	r2, [pc, #148]	; (80076f0 <I2C_ITListenCplt+0xa4>)
 800765a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	f003 0304 	and.w	r3, r3, #4
 800767e:	2b00      	cmp	r3, #0
 8007680:	d022      	beq.n	80076c8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d012      	beq.n	80076c8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c0:	f043 0204 	orr.w	r2, r3, #4
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076c8:	f248 0103 	movw	r1, #32771	; 0x8003
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fd45 	bl	800815c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2210      	movs	r2, #16
 80076d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7fe fe7a 	bl	80063dc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	ffff0000 	.word	0xffff0000

080076f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a6d      	ldr	r2, [pc, #436]	; (80078c8 <I2C_ITError+0x1d4>)
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	2b28      	cmp	r3, #40	; 0x28
 800772a:	d005      	beq.n	8007738 <I2C_ITError+0x44>
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b29      	cmp	r3, #41	; 0x29
 8007730:	d002      	beq.n	8007738 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	2b2a      	cmp	r3, #42	; 0x2a
 8007736:	d10b      	bne.n	8007750 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007738:	2103      	movs	r1, #3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fd0e 	bl	800815c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2228      	movs	r2, #40	; 0x28
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a60      	ldr	r2, [pc, #384]	; (80078cc <I2C_ITError+0x1d8>)
 800774c:	635a      	str	r2, [r3, #52]	; 0x34
 800774e:	e030      	b.n	80077b2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007750:	f248 0103 	movw	r1, #32771	; 0x8003
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fd01 	bl	800815c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f8e1 	bl	8007922 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b60      	cmp	r3, #96	; 0x60
 800776a:	d01f      	beq.n	80077ac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b20      	cmp	r3, #32
 8007780:	d114      	bne.n	80077ac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	f003 0310 	and.w	r3, r3, #16
 800778c:	2b10      	cmp	r3, #16
 800778e:	d109      	bne.n	80077a4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2210      	movs	r2, #16
 8007796:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779c:	f043 0204 	orr.w	r2, r3, #4
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2220      	movs	r2, #32
 80077aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d039      	beq.n	8007834 <I2C_ITError+0x140>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b11      	cmp	r3, #17
 80077c4:	d002      	beq.n	80077cc <I2C_ITError+0xd8>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b21      	cmp	r3, #33	; 0x21
 80077ca:	d133      	bne.n	8007834 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077da:	d107      	bne.n	80077ec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fc f8f3 	bl	80039dc <HAL_DMA_GetState>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d017      	beq.n	800782c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	4a33      	ldr	r2, [pc, #204]	; (80078d0 <I2C_ITError+0x1dc>)
 8007802:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	4618      	mov	r0, r3
 8007812:	f7fa ff73 	bl	80026fc <HAL_DMA_Abort_IT>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d04d      	beq.n	80078b8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007826:	4610      	mov	r0, r2
 8007828:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800782a:	e045      	b.n	80078b8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f851 	bl	80078d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007832:	e041      	b.n	80078b8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d039      	beq.n	80078b0 <I2C_ITError+0x1bc>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b12      	cmp	r3, #18
 8007840:	d002      	beq.n	8007848 <I2C_ITError+0x154>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b22      	cmp	r3, #34	; 0x22
 8007846:	d133      	bne.n	80078b0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007856:	d107      	bne.n	8007868 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007866:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786c:	4618      	mov	r0, r3
 800786e:	f7fc f8b5 	bl	80039dc <HAL_DMA_GetState>
 8007872:	4603      	mov	r3, r0
 8007874:	2b01      	cmp	r3, #1
 8007876:	d017      	beq.n	80078a8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787c:	4a14      	ldr	r2, [pc, #80]	; (80078d0 <I2C_ITError+0x1dc>)
 800787e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788c:	4618      	mov	r0, r3
 800788e:	f7fa ff35 	bl	80026fc <HAL_DMA_Abort_IT>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d011      	beq.n	80078bc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80078a2:	4610      	mov	r0, r2
 80078a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078a6:	e009      	b.n	80078bc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f813 	bl	80078d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078ae:	e005      	b.n	80078bc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f80f 	bl	80078d4 <I2C_TreatErrorCallback>
  }
}
 80078b6:	e002      	b.n	80078be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078bc:	bf00      	nop
}
 80078be:	bf00      	nop
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	ffff0000 	.word	0xffff0000
 80078cc:	08006441 	.word	0x08006441
 80078d0:	08007c75 	.word	0x08007c75

080078d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b60      	cmp	r3, #96	; 0x60
 80078e6:	d10e      	bne.n	8007906 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fe fd94 	bl	800642c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007904:	e009      	b.n	800791a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7fe fd7f 	bl	8006418 <HAL_I2C_ErrorCallback>
}
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b02      	cmp	r3, #2
 8007936:	d103      	bne.n	8007940 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2200      	movs	r2, #0
 800793e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b01      	cmp	r3, #1
 800794c:	d007      	beq.n	800795e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f042 0201 	orr.w	r2, r2, #1
 800795c:	619a      	str	r2, [r3, #24]
  }
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007976:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007986:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007992:	2120      	movs	r1, #32
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 fb77 	bl	8008088 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800799a:	e02d      	b.n	80079f8 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80079a4:	441a      	add	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2bff      	cmp	r3, #255	; 0xff
 80079b2:	d903      	bls.n	80079bc <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	22ff      	movs	r2, #255	; 0xff
 80079b8:	851a      	strh	r2, [r3, #40]	; 0x28
 80079ba:	e004      	b.n	80079c6 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3324      	adds	r3, #36	; 0x24
 80079d0:	4619      	mov	r1, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80079dc:	f7fa fc24 	bl	8002228 <HAL_DMA_Start_IT>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80079e6:	2110      	movs	r1, #16
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f7ff fe83 	bl	80076f4 <I2C_ITError>
}
 80079ee:	e003      	b.n	80079f8 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80079f0:	2140      	movs	r1, #64	; 0x40
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fb48 	bl	8008088 <I2C_Enable_IRQ>
}
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d076      	beq.n	8007b08 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a71      	ldr	r2, [pc, #452]	; (8007be8 <I2C_DMAError+0x1e8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d059      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a6f      	ldr	r2, [pc, #444]	; (8007bec <I2C_DMAError+0x1ec>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d053      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a6d      	ldr	r2, [pc, #436]	; (8007bf0 <I2C_DMAError+0x1f0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d04d      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a6b      	ldr	r2, [pc, #428]	; (8007bf4 <I2C_DMAError+0x1f4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d047      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a69      	ldr	r2, [pc, #420]	; (8007bf8 <I2C_DMAError+0x1f8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d041      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a67      	ldr	r2, [pc, #412]	; (8007bfc <I2C_DMAError+0x1fc>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d03b      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a65      	ldr	r2, [pc, #404]	; (8007c00 <I2C_DMAError+0x200>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d035      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a63      	ldr	r2, [pc, #396]	; (8007c04 <I2C_DMAError+0x204>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d02f      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a61      	ldr	r2, [pc, #388]	; (8007c08 <I2C_DMAError+0x208>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d029      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a5f      	ldr	r2, [pc, #380]	; (8007c0c <I2C_DMAError+0x20c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d023      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a5d      	ldr	r2, [pc, #372]	; (8007c10 <I2C_DMAError+0x210>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01d      	beq.n	8007ada <I2C_DMAError+0xda>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a5b      	ldr	r2, [pc, #364]	; (8007c14 <I2C_DMAError+0x214>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d017      	beq.n	8007ada <I2C_DMAError+0xda>
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a59      	ldr	r2, [pc, #356]	; (8007c18 <I2C_DMAError+0x218>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d011      	beq.n	8007ada <I2C_DMAError+0xda>
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a57      	ldr	r2, [pc, #348]	; (8007c1c <I2C_DMAError+0x21c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00b      	beq.n	8007ada <I2C_DMAError+0xda>
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a55      	ldr	r2, [pc, #340]	; (8007c20 <I2C_DMAError+0x220>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d005      	beq.n	8007ada <I2C_DMAError+0xda>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a53      	ldr	r2, [pc, #332]	; (8007c24 <I2C_DMAError+0x224>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d109      	bne.n	8007aee <I2C_DMAError+0xee>
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf0c      	ite	eq
 8007ae6:	2301      	moveq	r3, #1
 8007ae8:	2300      	movne	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	e008      	b.n	8007b00 <I2C_DMAError+0x100>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bf0c      	ite	eq
 8007afa:	2301      	moveq	r3, #1
 8007afc:	2300      	movne	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8007b04:	2301      	movs	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8098 	beq.w	8007c42 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a33      	ldr	r2, [pc, #204]	; (8007be8 <I2C_DMAError+0x1e8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d059      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a31      	ldr	r2, [pc, #196]	; (8007bec <I2C_DMAError+0x1ec>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d053      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a2f      	ldr	r2, [pc, #188]	; (8007bf0 <I2C_DMAError+0x1f0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d04d      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a2d      	ldr	r2, [pc, #180]	; (8007bf4 <I2C_DMAError+0x1f4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d047      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a2b      	ldr	r2, [pc, #172]	; (8007bf8 <I2C_DMAError+0x1f8>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d041      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a29      	ldr	r2, [pc, #164]	; (8007bfc <I2C_DMAError+0x1fc>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d03b      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a27      	ldr	r2, [pc, #156]	; (8007c00 <I2C_DMAError+0x200>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d035      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a25      	ldr	r2, [pc, #148]	; (8007c04 <I2C_DMAError+0x204>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d02f      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a23      	ldr	r2, [pc, #140]	; (8007c08 <I2C_DMAError+0x208>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d029      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a21      	ldr	r2, [pc, #132]	; (8007c0c <I2C_DMAError+0x20c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d023      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <I2C_DMAError+0x210>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01d      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <I2C_DMAError+0x214>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d017      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1b      	ldr	r2, [pc, #108]	; (8007c18 <I2C_DMAError+0x218>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d011      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a19      	ldr	r2, [pc, #100]	; (8007c1c <I2C_DMAError+0x21c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d00b      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a17      	ldr	r2, [pc, #92]	; (8007c20 <I2C_DMAError+0x220>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d005      	beq.n	8007bd2 <I2C_DMAError+0x1d2>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a15      	ldr	r2, [pc, #84]	; (8007c24 <I2C_DMAError+0x224>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d12a      	bne.n	8007c28 <I2C_DMAError+0x228>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bf0c      	ite	eq
 8007bde:	2301      	moveq	r3, #1
 8007be0:	2300      	movne	r3, #0
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	e029      	b.n	8007c3a <I2C_DMAError+0x23a>
 8007be6:	bf00      	nop
 8007be8:	40020010 	.word	0x40020010
 8007bec:	40020028 	.word	0x40020028
 8007bf0:	40020040 	.word	0x40020040
 8007bf4:	40020058 	.word	0x40020058
 8007bf8:	40020070 	.word	0x40020070
 8007bfc:	40020088 	.word	0x40020088
 8007c00:	400200a0 	.word	0x400200a0
 8007c04:	400200b8 	.word	0x400200b8
 8007c08:	40020410 	.word	0x40020410
 8007c0c:	40020428 	.word	0x40020428
 8007c10:	40020440 	.word	0x40020440
 8007c14:	40020458 	.word	0x40020458
 8007c18:	40020470 	.word	0x40020470
 8007c1c:	40020488 	.word	0x40020488
 8007c20:	400204a0 	.word	0x400204a0
 8007c24:	400204b8 	.word	0x400204b8
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bf0c      	ite	eq
 8007c34:	2301      	moveq	r3, #1
 8007c36:	2300      	movne	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fb fed8 	bl	80039f8 <HAL_DMA_GetError>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d00e      	beq.n	8007c6c <I2C_DMAError+0x26c>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c62:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007c64:	2110      	movs	r1, #16
 8007c66:	68b8      	ldr	r0, [r7, #8]
 8007c68:	f7ff fd44 	bl	80076f4 <I2C_ITError>
  }
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	2200      	movs	r2, #0
 8007c90:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f7ff fe16 	bl	80078d4 <I2C_TreatErrorCallback>
}
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cc0:	e031      	b.n	8007d26 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc8:	d02d      	beq.n	8007d26 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cca:	f7f9 fbc5 	bl	8001458 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d302      	bcc.n	8007ce0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d122      	bne.n	8007d26 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	699a      	ldr	r2, [r3, #24]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	bf0c      	ite	eq
 8007cf0:	2301      	moveq	r3, #1
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	79fb      	ldrb	r3, [r7, #7]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d113      	bne.n	8007d26 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d02:	f043 0220 	orr.w	r2, r3, #32
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e00f      	b.n	8007d46 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699a      	ldr	r2, [r3, #24]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	bf0c      	ite	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	2300      	movne	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d0be      	beq.n	8007cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d5a:	e033      	b.n	8007dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	68b9      	ldr	r1, [r7, #8]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f87f 	bl	8007e64 <I2C_IsErrorOccurred>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e031      	b.n	8007dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d025      	beq.n	8007dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d78:	f7f9 fb6e 	bl	8001458 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d302      	bcc.n	8007d8e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d11a      	bne.n	8007dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d013      	beq.n	8007dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da0:	f043 0220 	orr.w	r2, r3, #32
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e007      	b.n	8007dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d1c4      	bne.n	8007d5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007de8:	e02f      	b.n	8007e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 f838 	bl	8007e64 <I2C_IsErrorOccurred>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e02d      	b.n	8007e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dfe:	f7f9 fb2b 	bl	8001458 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d302      	bcc.n	8007e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d11a      	bne.n	8007e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d013      	beq.n	8007e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	f043 0220 	orr.w	r2, r3, #32
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e007      	b.n	8007e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	d1c8      	bne.n	8007dea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08a      	sub	sp, #40	; 0x28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	f003 0310 	and.w	r3, r3, #16
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d068      	beq.n	8007f62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2210      	movs	r2, #16
 8007e96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e98:	e049      	b.n	8007f2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea0:	d045      	beq.n	8007f2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007ea2:	f7f9 fad9 	bl	8001458 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d302      	bcc.n	8007eb8 <I2C_IsErrorOccurred+0x54>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d13a      	bne.n	8007f2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ec2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007eca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eda:	d121      	bne.n	8007f20 <I2C_IsErrorOccurred+0xbc>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ee2:	d01d      	beq.n	8007f20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007ee4:	7cfb      	ldrb	r3, [r7, #19]
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d01a      	beq.n	8007f20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ef8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007efa:	f7f9 faad 	bl	8001458 <HAL_GetTick>
 8007efe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f00:	e00e      	b.n	8007f20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f02:	f7f9 faa9 	bl	8001458 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b19      	cmp	r3, #25
 8007f0e:	d907      	bls.n	8007f20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	f043 0320 	orr.w	r3, r3, #32
 8007f16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007f1e:	e006      	b.n	8007f2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	f003 0320 	and.w	r3, r3, #32
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d1e9      	bne.n	8007f02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	d003      	beq.n	8007f44 <I2C_IsErrorOccurred+0xe0>
 8007f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0aa      	beq.n	8007e9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2220      	movs	r2, #32
 8007f52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	f043 0304 	orr.w	r3, r3, #4
 8007f5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00b      	beq.n	8007f8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	f043 0301 	orr.w	r3, r3, #1
 8007f7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	f043 0308 	orr.w	r3, r3, #8
 8007f9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00b      	beq.n	8007fd0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	f043 0302 	orr.w	r3, r3, #2
 8007fbe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01c      	beq.n	8008012 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fca2 	bl	8007922 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6859      	ldr	r1, [r3, #4]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <I2C_IsErrorOccurred+0x1bc>)
 8007fea:	400b      	ands	r3, r1
 8007fec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008016:	4618      	mov	r0, r3
 8008018:	3728      	adds	r7, #40	; 0x28
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	fe00e800 	.word	0xfe00e800

08008024 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	607b      	str	r3, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	817b      	strh	r3, [r7, #10]
 8008032:	4613      	mov	r3, r2
 8008034:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008036:	897b      	ldrh	r3, [r7, #10]
 8008038:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800803c:	7a7b      	ldrb	r3, [r7, #9]
 800803e:	041b      	lsls	r3, r3, #16
 8008040:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008044:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	4313      	orrs	r3, r2
 800804e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008052:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	0d5b      	lsrs	r3, r3, #21
 800805e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008062:	4b08      	ldr	r3, [pc, #32]	; (8008084 <I2C_TransferConfig+0x60>)
 8008064:	430b      	orrs	r3, r1
 8008066:	43db      	mvns	r3, r3
 8008068:	ea02 0103 	and.w	r1, r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	430a      	orrs	r2, r1
 8008074:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	03ff63ff 	.word	0x03ff63ff

08008088 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809c:	4a2d      	ldr	r2, [pc, #180]	; (8008154 <I2C_Enable_IRQ+0xcc>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80080a6:	4a2c      	ldr	r2, [pc, #176]	; (8008158 <I2C_Enable_IRQ+0xd0>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d11d      	bne.n	80080e8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80080ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	da03      	bge.n	80080bc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80080ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80080bc:	887b      	ldrh	r3, [r7, #2]
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d103      	bne.n	80080ca <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80080c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80080ca:	887b      	ldrh	r3, [r7, #2]
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d103      	bne.n	80080d8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80080d8:	887b      	ldrh	r3, [r7, #2]
 80080da:	2b40      	cmp	r3, #64	; 0x40
 80080dc:	d12c      	bne.n	8008138 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80080e6:	e027      	b.n	8008138 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80080e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	da03      	bge.n	80080f8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80080f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80080f8:	887b      	ldrh	r3, [r7, #2]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008108:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800810a:	887b      	ldrh	r3, [r7, #2]
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800811a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800811c:	887b      	ldrh	r3, [r7, #2]
 800811e:	2b10      	cmp	r3, #16
 8008120:	d103      	bne.n	800812a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008128:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800812a:	887b      	ldrh	r3, [r7, #2]
 800812c:	2b20      	cmp	r3, #32
 800812e:	d103      	bne.n	8008138 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f043 0320 	orr.w	r3, r3, #32
 8008136:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6819      	ldr	r1, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	430a      	orrs	r2, r1
 8008146:	601a      	str	r2, [r3, #0]
}
 8008148:	bf00      	nop
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	08006631 	.word	0x08006631
 8008158:	08006a3d 	.word	0x08006a3d

0800815c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800816c:	887b      	ldrh	r3, [r7, #2]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00f      	beq.n	8008196 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800817c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800818a:	2b28      	cmp	r3, #40	; 0x28
 800818c:	d003      	beq.n	8008196 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008194:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008196:	887b      	ldrh	r3, [r7, #2]
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00f      	beq.n	80081c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80081a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081b4:	2b28      	cmp	r3, #40	; 0x28
 80081b6:	d003      	beq.n	80081c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80081be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80081c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	da03      	bge.n	80081d0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80081ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80081d0:	887b      	ldrh	r3, [r7, #2]
 80081d2:	2b10      	cmp	r3, #16
 80081d4:	d103      	bne.n	80081de <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80081dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80081de:	887b      	ldrh	r3, [r7, #2]
 80081e0:	2b20      	cmp	r3, #32
 80081e2:	d103      	bne.n	80081ec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f043 0320 	orr.w	r3, r3, #32
 80081ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80081ec:	887b      	ldrh	r3, [r7, #2]
 80081ee:	2b40      	cmp	r3, #64	; 0x40
 80081f0:	d103      	bne.n	80081fa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	6819      	ldr	r1, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	43da      	mvns	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	400a      	ands	r2, r1
 800820a:	601a      	str	r2, [r3, #0]
}
 800820c:	bf00      	nop
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b20      	cmp	r3, #32
 800822c:	d138      	bne.n	80082a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008234:	2b01      	cmp	r3, #1
 8008236:	d101      	bne.n	800823c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008238:	2302      	movs	r3, #2
 800823a:	e032      	b.n	80082a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2224      	movs	r2, #36	; 0x24
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0201 	bic.w	r2, r2, #1
 800825a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800826a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6819      	ldr	r1, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0201 	orr.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2220      	movs	r2, #32
 8008290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800829c:	2300      	movs	r3, #0
 800829e:	e000      	b.n	80082a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80082a0:	2302      	movs	r3, #2
  }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80082ae:	b480      	push	{r7}
 80082b0:	b085      	sub	sp, #20
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b20      	cmp	r3, #32
 80082c2:	d139      	bne.n	8008338 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e033      	b.n	800833a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2224      	movs	r2, #36	; 0x24
 80082de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0201 	bic.w	r2, r2, #1
 80082f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008300:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2220      	movs	r2, #32
 8008328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	e000      	b.n	800833a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008338:	2302      	movs	r3, #2
  }
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008350:	4b19      	ldr	r3, [pc, #100]	; (80083b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b04      	cmp	r3, #4
 800835a:	d00a      	beq.n	8008372 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800835c:	4b16      	ldr	r3, [pc, #88]	; (80083b8 <HAL_PWREx_ConfigSupply+0x70>)
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	429a      	cmp	r2, r3
 8008368:	d001      	beq.n	800836e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e01f      	b.n	80083ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	e01d      	b.n	80083ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008372:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f023 0207 	bic.w	r2, r3, #7
 800837a:	490f      	ldr	r1, [pc, #60]	; (80083b8 <HAL_PWREx_ConfigSupply+0x70>)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4313      	orrs	r3, r2
 8008380:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008382:	f7f9 f869 	bl	8001458 <HAL_GetTick>
 8008386:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008388:	e009      	b.n	800839e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800838a:	f7f9 f865 	bl	8001458 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008398:	d901      	bls.n	800839e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e007      	b.n	80083ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800839e:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <HAL_PWREx_ConfigSupply+0x70>)
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083aa:	d1ee      	bne.n	800838a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	58024800 	.word	0x58024800

080083bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08c      	sub	sp, #48	; 0x30
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	f000 bc48 	b.w	8008c60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 8088 	beq.w	80084ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083de:	4b99      	ldr	r3, [pc, #612]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083e8:	4b96      	ldr	r3, [pc, #600]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d007      	beq.n	8008404 <HAL_RCC_OscConfig+0x48>
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	2b18      	cmp	r3, #24
 80083f8:	d111      	bne.n	800841e <HAL_RCC_OscConfig+0x62>
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	2b02      	cmp	r3, #2
 8008402:	d10c      	bne.n	800841e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008404:	4b8f      	ldr	r3, [pc, #572]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d06d      	beq.n	80084ec <HAL_RCC_OscConfig+0x130>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d169      	bne.n	80084ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	f000 bc21 	b.w	8008c60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008426:	d106      	bne.n	8008436 <HAL_RCC_OscConfig+0x7a>
 8008428:	4b86      	ldr	r3, [pc, #536]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a85      	ldr	r2, [pc, #532]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800842e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	e02e      	b.n	8008494 <HAL_RCC_OscConfig+0xd8>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10c      	bne.n	8008458 <HAL_RCC_OscConfig+0x9c>
 800843e:	4b81      	ldr	r3, [pc, #516]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a80      	ldr	r2, [pc, #512]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	4b7e      	ldr	r3, [pc, #504]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a7d      	ldr	r2, [pc, #500]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	e01d      	b.n	8008494 <HAL_RCC_OscConfig+0xd8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008460:	d10c      	bne.n	800847c <HAL_RCC_OscConfig+0xc0>
 8008462:	4b78      	ldr	r3, [pc, #480]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a77      	ldr	r2, [pc, #476]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	4b75      	ldr	r3, [pc, #468]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a74      	ldr	r2, [pc, #464]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e00b      	b.n	8008494 <HAL_RCC_OscConfig+0xd8>
 800847c:	4b71      	ldr	r3, [pc, #452]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a70      	ldr	r2, [pc, #448]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	4b6e      	ldr	r3, [pc, #440]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a6d      	ldr	r2, [pc, #436]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800848e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d013      	beq.n	80084c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849c:	f7f8 ffdc 	bl	8001458 <HAL_GetTick>
 80084a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084a2:	e008      	b.n	80084b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084a4:	f7f8 ffd8 	bl	8001458 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b64      	cmp	r3, #100	; 0x64
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e3d4      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084b6:	4b63      	ldr	r3, [pc, #396]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0f0      	beq.n	80084a4 <HAL_RCC_OscConfig+0xe8>
 80084c2:	e014      	b.n	80084ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c4:	f7f8 ffc8 	bl	8001458 <HAL_GetTick>
 80084c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084cc:	f7f8 ffc4 	bl	8001458 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b64      	cmp	r3, #100	; 0x64
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e3c0      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084de:	4b59      	ldr	r3, [pc, #356]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f0      	bne.n	80084cc <HAL_RCC_OscConfig+0x110>
 80084ea:	e000      	b.n	80084ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 80ca 	beq.w	8008690 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084fc:	4b51      	ldr	r3, [pc, #324]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008504:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008506:	4b4f      	ldr	r3, [pc, #316]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <HAL_RCC_OscConfig+0x166>
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	2b18      	cmp	r3, #24
 8008516:	d156      	bne.n	80085c6 <HAL_RCC_OscConfig+0x20a>
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d151      	bne.n	80085c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008522:	4b48      	ldr	r3, [pc, #288]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <HAL_RCC_OscConfig+0x17e>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e392      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800853a:	4b42      	ldr	r3, [pc, #264]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f023 0219 	bic.w	r2, r3, #25
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	493f      	ldr	r1, [pc, #252]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008548:	4313      	orrs	r3, r2
 800854a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854c:	f7f8 ff84 	bl	8001458 <HAL_GetTick>
 8008550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008552:	e008      	b.n	8008566 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008554:	f7f8 ff80 	bl	8001458 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e37c      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008566:	4b37      	ldr	r3, [pc, #220]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0304 	and.w	r3, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0f0      	beq.n	8008554 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008572:	f7f8 ff7d 	bl	8001470 <HAL_GetREVID>
 8008576:	4603      	mov	r3, r0
 8008578:	f241 0203 	movw	r2, #4099	; 0x1003
 800857c:	4293      	cmp	r3, r2
 800857e:	d817      	bhi.n	80085b0 <HAL_RCC_OscConfig+0x1f4>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	2b40      	cmp	r3, #64	; 0x40
 8008586:	d108      	bne.n	800859a <HAL_RCC_OscConfig+0x1de>
 8008588:	4b2e      	ldr	r3, [pc, #184]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008590:	4a2c      	ldr	r2, [pc, #176]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008596:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008598:	e07a      	b.n	8008690 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800859a:	4b2a      	ldr	r3, [pc, #168]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	031b      	lsls	r3, r3, #12
 80085a8:	4926      	ldr	r1, [pc, #152]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085ae:	e06f      	b.n	8008690 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085b0:	4b24      	ldr	r3, [pc, #144]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	061b      	lsls	r3, r3, #24
 80085be:	4921      	ldr	r1, [pc, #132]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085c4:	e064      	b.n	8008690 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d047      	beq.n	800865e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085ce:	4b1d      	ldr	r3, [pc, #116]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f023 0219 	bic.w	r2, r3, #25
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	491a      	ldr	r1, [pc, #104]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e0:	f7f8 ff3a 	bl	8001458 <HAL_GetTick>
 80085e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085e6:	e008      	b.n	80085fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085e8:	f7f8 ff36 	bl	8001458 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e332      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085fa:	4b12      	ldr	r3, [pc, #72]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f0      	beq.n	80085e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008606:	f7f8 ff33 	bl	8001470 <HAL_GetREVID>
 800860a:	4603      	mov	r3, r0
 800860c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008610:	4293      	cmp	r3, r2
 8008612:	d819      	bhi.n	8008648 <HAL_RCC_OscConfig+0x28c>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b40      	cmp	r3, #64	; 0x40
 800861a:	d108      	bne.n	800862e <HAL_RCC_OscConfig+0x272>
 800861c:	4b09      	ldr	r3, [pc, #36]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008624:	4a07      	ldr	r2, [pc, #28]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800862a:	6053      	str	r3, [r2, #4]
 800862c:	e030      	b.n	8008690 <HAL_RCC_OscConfig+0x2d4>
 800862e:	4b05      	ldr	r3, [pc, #20]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	031b      	lsls	r3, r3, #12
 800863c:	4901      	ldr	r1, [pc, #4]	; (8008644 <HAL_RCC_OscConfig+0x288>)
 800863e:	4313      	orrs	r3, r2
 8008640:	604b      	str	r3, [r1, #4]
 8008642:	e025      	b.n	8008690 <HAL_RCC_OscConfig+0x2d4>
 8008644:	58024400 	.word	0x58024400
 8008648:	4b9a      	ldr	r3, [pc, #616]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	061b      	lsls	r3, r3, #24
 8008656:	4997      	ldr	r1, [pc, #604]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008658:	4313      	orrs	r3, r2
 800865a:	604b      	str	r3, [r1, #4]
 800865c:	e018      	b.n	8008690 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800865e:	4b95      	ldr	r3, [pc, #596]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a94      	ldr	r2, [pc, #592]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008664:	f023 0301 	bic.w	r3, r3, #1
 8008668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866a:	f7f8 fef5 	bl	8001458 <HAL_GetTick>
 800866e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008670:	e008      	b.n	8008684 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008672:	f7f8 fef1 	bl	8001458 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d901      	bls.n	8008684 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e2ed      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008684:	4b8b      	ldr	r3, [pc, #556]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1f0      	bne.n	8008672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0310 	and.w	r3, r3, #16
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 80a9 	beq.w	80087f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800869e:	4b85      	ldr	r3, [pc, #532]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086a8:	4b82      	ldr	r3, [pc, #520]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d007      	beq.n	80086c4 <HAL_RCC_OscConfig+0x308>
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	2b18      	cmp	r3, #24
 80086b8:	d13a      	bne.n	8008730 <HAL_RCC_OscConfig+0x374>
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d135      	bne.n	8008730 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086c4:	4b7b      	ldr	r3, [pc, #492]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <HAL_RCC_OscConfig+0x320>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	2b80      	cmp	r3, #128	; 0x80
 80086d6:	d001      	beq.n	80086dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e2c1      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086dc:	f7f8 fec8 	bl	8001470 <HAL_GetREVID>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d817      	bhi.n	800871a <HAL_RCC_OscConfig+0x35e>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	d108      	bne.n	8008704 <HAL_RCC_OscConfig+0x348>
 80086f2:	4b70      	ldr	r3, [pc, #448]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086fa:	4a6e      	ldr	r2, [pc, #440]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80086fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008700:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008702:	e075      	b.n	80087f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008704:	4b6b      	ldr	r3, [pc, #428]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	069b      	lsls	r3, r3, #26
 8008712:	4968      	ldr	r1, [pc, #416]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008714:	4313      	orrs	r3, r2
 8008716:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008718:	e06a      	b.n	80087f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800871a:	4b66      	ldr	r3, [pc, #408]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	061b      	lsls	r3, r3, #24
 8008728:	4962      	ldr	r1, [pc, #392]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800872a:	4313      	orrs	r3, r2
 800872c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800872e:	e05f      	b.n	80087f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d042      	beq.n	80087be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008738:	4b5e      	ldr	r3, [pc, #376]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a5d      	ldr	r2, [pc, #372]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800873e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7f8 fe88 	bl	8001458 <HAL_GetTick>
 8008748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800874c:	f7f8 fe84 	bl	8001458 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e280      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800875e:	4b55      	ldr	r3, [pc, #340]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0f0      	beq.n	800874c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800876a:	f7f8 fe81 	bl	8001470 <HAL_GetREVID>
 800876e:	4603      	mov	r3, r0
 8008770:	f241 0203 	movw	r2, #4099	; 0x1003
 8008774:	4293      	cmp	r3, r2
 8008776:	d817      	bhi.n	80087a8 <HAL_RCC_OscConfig+0x3ec>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	2b20      	cmp	r3, #32
 800877e:	d108      	bne.n	8008792 <HAL_RCC_OscConfig+0x3d6>
 8008780:	4b4c      	ldr	r3, [pc, #304]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008788:	4a4a      	ldr	r2, [pc, #296]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800878a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800878e:	6053      	str	r3, [r2, #4]
 8008790:	e02e      	b.n	80087f0 <HAL_RCC_OscConfig+0x434>
 8008792:	4b48      	ldr	r3, [pc, #288]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	069b      	lsls	r3, r3, #26
 80087a0:	4944      	ldr	r1, [pc, #272]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	604b      	str	r3, [r1, #4]
 80087a6:	e023      	b.n	80087f0 <HAL_RCC_OscConfig+0x434>
 80087a8:	4b42      	ldr	r3, [pc, #264]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	061b      	lsls	r3, r3, #24
 80087b6:	493f      	ldr	r1, [pc, #252]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60cb      	str	r3, [r1, #12]
 80087bc:	e018      	b.n	80087f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087be:	4b3d      	ldr	r3, [pc, #244]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a3c      	ldr	r2, [pc, #240]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80087c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ca:	f7f8 fe45 	bl	8001458 <HAL_GetTick>
 80087ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087d0:	e008      	b.n	80087e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80087d2:	f7f8 fe41 	bl	8001458 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e23d      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087e4:	4b33      	ldr	r3, [pc, #204]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1f0      	bne.n	80087d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d036      	beq.n	800886a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d019      	beq.n	8008838 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008804:	4b2b      	ldr	r3, [pc, #172]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008808:	4a2a      	ldr	r2, [pc, #168]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800880a:	f043 0301 	orr.w	r3, r3, #1
 800880e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008810:	f7f8 fe22 	bl	8001458 <HAL_GetTick>
 8008814:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008818:	f7f8 fe1e 	bl	8001458 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e21a      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800882a:	4b22      	ldr	r3, [pc, #136]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800882c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0f0      	beq.n	8008818 <HAL_RCC_OscConfig+0x45c>
 8008836:	e018      	b.n	800886a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008838:	4b1e      	ldr	r3, [pc, #120]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800883a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883c:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008844:	f7f8 fe08 	bl	8001458 <HAL_GetTick>
 8008848:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800884a:	e008      	b.n	800885e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800884c:	f7f8 fe04 	bl	8001458 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d901      	bls.n	800885e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e200      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800885e:	4b15      	ldr	r3, [pc, #84]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008862:	f003 0302 	and.w	r3, r3, #2
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1f0      	bne.n	800884c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	d039      	beq.n	80088ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d01c      	beq.n	80088b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800887e:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a0c      	ldr	r2, [pc, #48]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 8008884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008888:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800888a:	f7f8 fde5 	bl	8001458 <HAL_GetTick>
 800888e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008890:	e008      	b.n	80088a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008892:	f7f8 fde1 	bl	8001458 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b02      	cmp	r3, #2
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e1dd      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088a4:	4b03      	ldr	r3, [pc, #12]	; (80088b4 <HAL_RCC_OscConfig+0x4f8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0f0      	beq.n	8008892 <HAL_RCC_OscConfig+0x4d6>
 80088b0:	e01b      	b.n	80088ea <HAL_RCC_OscConfig+0x52e>
 80088b2:	bf00      	nop
 80088b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088b8:	4b9b      	ldr	r3, [pc, #620]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a9a      	ldr	r2, [pc, #616]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 80088be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088c4:	f7f8 fdc8 	bl	8001458 <HAL_GetTick>
 80088c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088ca:	e008      	b.n	80088de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088cc:	f7f8 fdc4 	bl	8001458 <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d901      	bls.n	80088de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e1c0      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088de:	4b92      	ldr	r3, [pc, #584]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1f0      	bne.n	80088cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 8081 	beq.w	80089fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088f8:	4b8c      	ldr	r3, [pc, #560]	; (8008b2c <HAL_RCC_OscConfig+0x770>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a8b      	ldr	r2, [pc, #556]	; (8008b2c <HAL_RCC_OscConfig+0x770>)
 80088fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008902:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008904:	f7f8 fda8 	bl	8001458 <HAL_GetTick>
 8008908:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800890c:	f7f8 fda4 	bl	8001458 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b64      	cmp	r3, #100	; 0x64
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e1a0      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800891e:	4b83      	ldr	r3, [pc, #524]	; (8008b2c <HAL_RCC_OscConfig+0x770>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0f0      	beq.n	800890c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d106      	bne.n	8008940 <HAL_RCC_OscConfig+0x584>
 8008932:	4b7d      	ldr	r3, [pc, #500]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008936:	4a7c      	ldr	r2, [pc, #496]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	6713      	str	r3, [r2, #112]	; 0x70
 800893e:	e02d      	b.n	800899c <HAL_RCC_OscConfig+0x5e0>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10c      	bne.n	8008962 <HAL_RCC_OscConfig+0x5a6>
 8008948:	4b77      	ldr	r3, [pc, #476]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894c:	4a76      	ldr	r2, [pc, #472]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 800894e:	f023 0301 	bic.w	r3, r3, #1
 8008952:	6713      	str	r3, [r2, #112]	; 0x70
 8008954:	4b74      	ldr	r3, [pc, #464]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008958:	4a73      	ldr	r2, [pc, #460]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 800895a:	f023 0304 	bic.w	r3, r3, #4
 800895e:	6713      	str	r3, [r2, #112]	; 0x70
 8008960:	e01c      	b.n	800899c <HAL_RCC_OscConfig+0x5e0>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	2b05      	cmp	r3, #5
 8008968:	d10c      	bne.n	8008984 <HAL_RCC_OscConfig+0x5c8>
 800896a:	4b6f      	ldr	r3, [pc, #444]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 800896c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896e:	4a6e      	ldr	r2, [pc, #440]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008970:	f043 0304 	orr.w	r3, r3, #4
 8008974:	6713      	str	r3, [r2, #112]	; 0x70
 8008976:	4b6c      	ldr	r3, [pc, #432]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897a:	4a6b      	ldr	r2, [pc, #428]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 800897c:	f043 0301 	orr.w	r3, r3, #1
 8008980:	6713      	str	r3, [r2, #112]	; 0x70
 8008982:	e00b      	b.n	800899c <HAL_RCC_OscConfig+0x5e0>
 8008984:	4b68      	ldr	r3, [pc, #416]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008988:	4a67      	ldr	r2, [pc, #412]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 800898a:	f023 0301 	bic.w	r3, r3, #1
 800898e:	6713      	str	r3, [r2, #112]	; 0x70
 8008990:	4b65      	ldr	r3, [pc, #404]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008994:	4a64      	ldr	r2, [pc, #400]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008996:	f023 0304 	bic.w	r3, r3, #4
 800899a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d015      	beq.n	80089d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a4:	f7f8 fd58 	bl	8001458 <HAL_GetTick>
 80089a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089aa:	e00a      	b.n	80089c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ac:	f7f8 fd54 	bl	8001458 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d901      	bls.n	80089c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e14e      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c2:	4b59      	ldr	r3, [pc, #356]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 80089c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0ee      	beq.n	80089ac <HAL_RCC_OscConfig+0x5f0>
 80089ce:	e014      	b.n	80089fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d0:	f7f8 fd42 	bl	8001458 <HAL_GetTick>
 80089d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089d6:	e00a      	b.n	80089ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089d8:	f7f8 fd3e 	bl	8001458 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e138      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089ee:	4b4e      	ldr	r3, [pc, #312]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1ee      	bne.n	80089d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 812d 	beq.w	8008c5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a04:	4b48      	ldr	r3, [pc, #288]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a0c:	2b18      	cmp	r3, #24
 8008a0e:	f000 80bd 	beq.w	8008b8c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	f040 809e 	bne.w	8008b58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a1c:	4b42      	ldr	r3, [pc, #264]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a41      	ldr	r2, [pc, #260]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a28:	f7f8 fd16 	bl	8001458 <HAL_GetTick>
 8008a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a2e:	e008      	b.n	8008a42 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a30:	f7f8 fd12 	bl	8001458 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d901      	bls.n	8008a42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e10e      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a42:	4b39      	ldr	r3, [pc, #228]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f0      	bne.n	8008a30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a4e:	4b36      	ldr	r3, [pc, #216]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a52:	4b37      	ldr	r3, [pc, #220]	; (8008b30 <HAL_RCC_OscConfig+0x774>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a5e:	0112      	lsls	r2, r2, #4
 8008a60:	430a      	orrs	r2, r1
 8008a62:	4931      	ldr	r1, [pc, #196]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008a64:	4313      	orrs	r3, r2
 8008a66:	628b      	str	r3, [r1, #40]	; 0x28
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a76:	3b01      	subs	r3, #1
 8008a78:	025b      	lsls	r3, r3, #9
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	3b01      	subs	r3, #1
 8008a84:	041b      	lsls	r3, r3, #16
 8008a86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a90:	3b01      	subs	r3, #1
 8008a92:	061b      	lsls	r3, r3, #24
 8008a94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a98:	4923      	ldr	r1, [pc, #140]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a9e:	4b22      	ldr	r3, [pc, #136]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa2:	4a21      	ldr	r2, [pc, #132]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008aa4:	f023 0301 	bic.w	r3, r3, #1
 8008aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008aaa:	4b1f      	ldr	r3, [pc, #124]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aae:	4b21      	ldr	r3, [pc, #132]	; (8008b34 <HAL_RCC_OscConfig+0x778>)
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ab6:	00d2      	lsls	r2, r2, #3
 8008ab8:	491b      	ldr	r1, [pc, #108]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008abe:	4b1a      	ldr	r3, [pc, #104]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac2:	f023 020c 	bic.w	r2, r3, #12
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	4917      	ldr	r1, [pc, #92]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ad0:	4b15      	ldr	r3, [pc, #84]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	f023 0202 	bic.w	r2, r3, #2
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008adc:	4912      	ldr	r1, [pc, #72]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ae2:	4b11      	ldr	r3, [pc, #68]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	4a10      	ldr	r2, [pc, #64]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aee:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	4a0d      	ldr	r2, [pc, #52]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008af8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008afa:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	4a0a      	ldr	r2, [pc, #40]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008b06:	4b08      	ldr	r3, [pc, #32]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	4a07      	ldr	r2, [pc, #28]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008b0c:	f043 0301 	orr.w	r3, r3, #1
 8008b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b12:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a04      	ldr	r2, [pc, #16]	; (8008b28 <HAL_RCC_OscConfig+0x76c>)
 8008b18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b1e:	f7f8 fc9b 	bl	8001458 <HAL_GetTick>
 8008b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b24:	e011      	b.n	8008b4a <HAL_RCC_OscConfig+0x78e>
 8008b26:	bf00      	nop
 8008b28:	58024400 	.word	0x58024400
 8008b2c:	58024800 	.word	0x58024800
 8008b30:	fffffc0c 	.word	0xfffffc0c
 8008b34:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b38:	f7f8 fc8e 	bl	8001458 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e08a      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b4a:	4b47      	ldr	r3, [pc, #284]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0f0      	beq.n	8008b38 <HAL_RCC_OscConfig+0x77c>
 8008b56:	e082      	b.n	8008c5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b58:	4b43      	ldr	r3, [pc, #268]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a42      	ldr	r2, [pc, #264]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b64:	f7f8 fc78 	bl	8001458 <HAL_GetTick>
 8008b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b6c:	f7f8 fc74 	bl	8001458 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e070      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b7e:	4b3a      	ldr	r3, [pc, #232]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <HAL_RCC_OscConfig+0x7b0>
 8008b8a:	e068      	b.n	8008c5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b8c:	4b36      	ldr	r3, [pc, #216]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b92:	4b35      	ldr	r3, [pc, #212]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d031      	beq.n	8008c04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f003 0203 	and.w	r2, r3, #3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d12a      	bne.n	8008c04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	091b      	lsrs	r3, r3, #4
 8008bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d122      	bne.n	8008c04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d11a      	bne.n	8008c04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	0a5b      	lsrs	r3, r3, #9
 8008bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d111      	bne.n	8008c04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	0c1b      	lsrs	r3, r3, #16
 8008be4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d108      	bne.n	8008c04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	0e1b      	lsrs	r3, r3, #24
 8008bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d001      	beq.n	8008c08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e02b      	b.n	8008c60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008c08:	4b17      	ldr	r3, [pc, #92]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0c:	08db      	lsrs	r3, r3, #3
 8008c0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d01f      	beq.n	8008c5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008c1e:	4b12      	ldr	r3, [pc, #72]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	4a11      	ldr	r2, [pc, #68]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008c24:	f023 0301 	bic.w	r3, r3, #1
 8008c28:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c2a:	f7f8 fc15 	bl	8001458 <HAL_GetTick>
 8008c2e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008c30:	bf00      	nop
 8008c32:	f7f8 fc11 	bl	8001458 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d0f9      	beq.n	8008c32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c3e:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c42:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <HAL_RCC_OscConfig+0x8b0>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008c4a:	00d2      	lsls	r2, r2, #3
 8008c4c:	4906      	ldr	r1, [pc, #24]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008c52:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	4a04      	ldr	r2, [pc, #16]	; (8008c68 <HAL_RCC_OscConfig+0x8ac>)
 8008c58:	f043 0301 	orr.w	r3, r3, #1
 8008c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3730      	adds	r7, #48	; 0x30
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	58024400 	.word	0x58024400
 8008c6c:	ffff0007 	.word	0xffff0007

08008c70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e19c      	b.n	8008fbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c84:	4b8a      	ldr	r3, [pc, #552]	; (8008eb0 <HAL_RCC_ClockConfig+0x240>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 030f 	and.w	r3, r3, #15
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d910      	bls.n	8008cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c92:	4b87      	ldr	r3, [pc, #540]	; (8008eb0 <HAL_RCC_ClockConfig+0x240>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f023 020f 	bic.w	r2, r3, #15
 8008c9a:	4985      	ldr	r1, [pc, #532]	; (8008eb0 <HAL_RCC_ClockConfig+0x240>)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ca2:	4b83      	ldr	r3, [pc, #524]	; (8008eb0 <HAL_RCC_ClockConfig+0x240>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d001      	beq.n	8008cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e184      	b.n	8008fbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d010      	beq.n	8008ce2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691a      	ldr	r2, [r3, #16]
 8008cc4:	4b7b      	ldr	r3, [pc, #492]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d908      	bls.n	8008ce2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cd0:	4b78      	ldr	r3, [pc, #480]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	4975      	ldr	r1, [pc, #468]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0308 	and.w	r3, r3, #8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d010      	beq.n	8008d10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	695a      	ldr	r2, [r3, #20]
 8008cf2:	4b70      	ldr	r3, [pc, #448]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d908      	bls.n	8008d10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cfe:	4b6d      	ldr	r3, [pc, #436]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	496a      	ldr	r1, [pc, #424]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0310 	and.w	r3, r3, #16
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d010      	beq.n	8008d3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699a      	ldr	r2, [r3, #24]
 8008d20:	4b64      	ldr	r3, [pc, #400]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d908      	bls.n	8008d3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d2c:	4b61      	ldr	r3, [pc, #388]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	495e      	ldr	r1, [pc, #376]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d010      	beq.n	8008d6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69da      	ldr	r2, [r3, #28]
 8008d4e:	4b59      	ldr	r3, [pc, #356]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d908      	bls.n	8008d6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008d5a:	4b56      	ldr	r3, [pc, #344]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	4953      	ldr	r1, [pc, #332]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d010      	beq.n	8008d9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	4b4d      	ldr	r3, [pc, #308]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f003 030f 	and.w	r3, r3, #15
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d908      	bls.n	8008d9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d88:	4b4a      	ldr	r3, [pc, #296]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	f023 020f 	bic.w	r2, r3, #15
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	4947      	ldr	r1, [pc, #284]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d055      	beq.n	8008e52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008da6:	4b43      	ldr	r3, [pc, #268]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	4940      	ldr	r1, [pc, #256]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d107      	bne.n	8008dd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008dc0:	4b3c      	ldr	r3, [pc, #240]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d121      	bne.n	8008e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e0f6      	b.n	8008fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d107      	bne.n	8008de8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dd8:	4b36      	ldr	r3, [pc, #216]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d115      	bne.n	8008e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e0ea      	b.n	8008fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d107      	bne.n	8008e00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008df0:	4b30      	ldr	r3, [pc, #192]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d109      	bne.n	8008e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e0de      	b.n	8008fbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e00:	4b2c      	ldr	r3, [pc, #176]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0304 	and.w	r3, r3, #4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e0d6      	b.n	8008fbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e10:	4b28      	ldr	r3, [pc, #160]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	f023 0207 	bic.w	r2, r3, #7
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	4925      	ldr	r1, [pc, #148]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e22:	f7f8 fb19 	bl	8001458 <HAL_GetTick>
 8008e26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e28:	e00a      	b.n	8008e40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e2a:	f7f8 fb15 	bl	8001458 <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d901      	bls.n	8008e40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e0be      	b.n	8008fbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e40:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d1eb      	bne.n	8008e2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d010      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	4b14      	ldr	r3, [pc, #80]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	f003 030f 	and.w	r3, r3, #15
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d208      	bcs.n	8008e80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e6e:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	f023 020f 	bic.w	r2, r3, #15
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	490e      	ldr	r1, [pc, #56]	; (8008eb4 <HAL_RCC_ClockConfig+0x244>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e80:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <HAL_RCC_ClockConfig+0x240>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 030f 	and.w	r3, r3, #15
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d214      	bcs.n	8008eb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e8e:	4b08      	ldr	r3, [pc, #32]	; (8008eb0 <HAL_RCC_ClockConfig+0x240>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f023 020f 	bic.w	r2, r3, #15
 8008e96:	4906      	ldr	r1, [pc, #24]	; (8008eb0 <HAL_RCC_ClockConfig+0x240>)
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e9e:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <HAL_RCC_ClockConfig+0x240>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d005      	beq.n	8008eb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e086      	b.n	8008fbe <HAL_RCC_ClockConfig+0x34e>
 8008eb0:	52002000 	.word	0x52002000
 8008eb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0304 	and.w	r3, r3, #4
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d010      	beq.n	8008ee6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691a      	ldr	r2, [r3, #16]
 8008ec8:	4b3f      	ldr	r3, [pc, #252]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d208      	bcs.n	8008ee6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ed4:	4b3c      	ldr	r3, [pc, #240]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	4939      	ldr	r1, [pc, #228]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0308 	and.w	r3, r3, #8
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d010      	beq.n	8008f14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695a      	ldr	r2, [r3, #20]
 8008ef6:	4b34      	ldr	r3, [pc, #208]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d208      	bcs.n	8008f14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f02:	4b31      	ldr	r3, [pc, #196]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	492e      	ldr	r1, [pc, #184]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0310 	and.w	r3, r3, #16
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d010      	beq.n	8008f42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	699a      	ldr	r2, [r3, #24]
 8008f24:	4b28      	ldr	r3, [pc, #160]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d208      	bcs.n	8008f42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f30:	4b25      	ldr	r3, [pc, #148]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	4922      	ldr	r1, [pc, #136]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d010      	beq.n	8008f70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	69da      	ldr	r2, [r3, #28]
 8008f52:	4b1d      	ldr	r3, [pc, #116]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d208      	bcs.n	8008f70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f5e:	4b1a      	ldr	r3, [pc, #104]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	4917      	ldr	r1, [pc, #92]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f70:	f000 f834 	bl	8008fdc <HAL_RCC_GetSysClockFreq>
 8008f74:	4602      	mov	r2, r0
 8008f76:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	0a1b      	lsrs	r3, r3, #8
 8008f7c:	f003 030f 	and.w	r3, r3, #15
 8008f80:	4912      	ldr	r1, [pc, #72]	; (8008fcc <HAL_RCC_ClockConfig+0x35c>)
 8008f82:	5ccb      	ldrb	r3, [r1, r3]
 8008f84:	f003 031f 	and.w	r3, r3, #31
 8008f88:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <HAL_RCC_ClockConfig+0x358>)
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	4a0d      	ldr	r2, [pc, #52]	; (8008fcc <HAL_RCC_ClockConfig+0x35c>)
 8008f98:	5cd3      	ldrb	r3, [r2, r3]
 8008f9a:	f003 031f 	and.w	r3, r3, #31
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa4:	4a0a      	ldr	r2, [pc, #40]	; (8008fd0 <HAL_RCC_ClockConfig+0x360>)
 8008fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008fa8:	4a0a      	ldr	r2, [pc, #40]	; (8008fd4 <HAL_RCC_ClockConfig+0x364>)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008fae:	4b0a      	ldr	r3, [pc, #40]	; (8008fd8 <HAL_RCC_ClockConfig+0x368>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7f8 fa06 	bl	80013c4 <HAL_InitTick>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	58024400 	.word	0x58024400
 8008fcc:	08011ad4 	.word	0x08011ad4
 8008fd0:	24000004 	.word	0x24000004
 8008fd4:	24000000 	.word	0x24000000
 8008fd8:	24000008 	.word	0x24000008

08008fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b089      	sub	sp, #36	; 0x24
 8008fe0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fe2:	4bb3      	ldr	r3, [pc, #716]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fea:	2b18      	cmp	r3, #24
 8008fec:	f200 8155 	bhi.w	800929a <HAL_RCC_GetSysClockFreq+0x2be>
 8008ff0:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff6:	bf00      	nop
 8008ff8:	0800905d 	.word	0x0800905d
 8008ffc:	0800929b 	.word	0x0800929b
 8009000:	0800929b 	.word	0x0800929b
 8009004:	0800929b 	.word	0x0800929b
 8009008:	0800929b 	.word	0x0800929b
 800900c:	0800929b 	.word	0x0800929b
 8009010:	0800929b 	.word	0x0800929b
 8009014:	0800929b 	.word	0x0800929b
 8009018:	08009083 	.word	0x08009083
 800901c:	0800929b 	.word	0x0800929b
 8009020:	0800929b 	.word	0x0800929b
 8009024:	0800929b 	.word	0x0800929b
 8009028:	0800929b 	.word	0x0800929b
 800902c:	0800929b 	.word	0x0800929b
 8009030:	0800929b 	.word	0x0800929b
 8009034:	0800929b 	.word	0x0800929b
 8009038:	08009089 	.word	0x08009089
 800903c:	0800929b 	.word	0x0800929b
 8009040:	0800929b 	.word	0x0800929b
 8009044:	0800929b 	.word	0x0800929b
 8009048:	0800929b 	.word	0x0800929b
 800904c:	0800929b 	.word	0x0800929b
 8009050:	0800929b 	.word	0x0800929b
 8009054:	0800929b 	.word	0x0800929b
 8009058:	0800908f 	.word	0x0800908f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800905c:	4b94      	ldr	r3, [pc, #592]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0320 	and.w	r3, r3, #32
 8009064:	2b00      	cmp	r3, #0
 8009066:	d009      	beq.n	800907c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009068:	4b91      	ldr	r3, [pc, #580]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	08db      	lsrs	r3, r3, #3
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	4a90      	ldr	r2, [pc, #576]	; (80092b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009074:	fa22 f303 	lsr.w	r3, r2, r3
 8009078:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800907a:	e111      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800907c:	4b8d      	ldr	r3, [pc, #564]	; (80092b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800907e:	61bb      	str	r3, [r7, #24]
      break;
 8009080:	e10e      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009082:	4b8d      	ldr	r3, [pc, #564]	; (80092b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009084:	61bb      	str	r3, [r7, #24]
      break;
 8009086:	e10b      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009088:	4b8c      	ldr	r3, [pc, #560]	; (80092bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800908a:	61bb      	str	r3, [r7, #24]
      break;
 800908c:	e108      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800908e:	4b88      	ldr	r3, [pc, #544]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009098:	4b85      	ldr	r3, [pc, #532]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909c:	091b      	lsrs	r3, r3, #4
 800909e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80090a4:	4b82      	ldr	r3, [pc, #520]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80090ae:	4b80      	ldr	r3, [pc, #512]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	08db      	lsrs	r3, r3, #3
 80090b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 80e1 	beq.w	8009294 <HAL_RCC_GetSysClockFreq+0x2b8>
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	f000 8083 	beq.w	80091e0 <HAL_RCC_GetSysClockFreq+0x204>
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	f200 80a1 	bhi.w	8009224 <HAL_RCC_GetSysClockFreq+0x248>
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <HAL_RCC_GetSysClockFreq+0x114>
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d056      	beq.n	800919c <HAL_RCC_GetSysClockFreq+0x1c0>
 80090ee:	e099      	b.n	8009224 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090f0:	4b6f      	ldr	r3, [pc, #444]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d02d      	beq.n	8009158 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090fc:	4b6c      	ldr	r3, [pc, #432]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	08db      	lsrs	r3, r3, #3
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	4a6b      	ldr	r2, [pc, #428]	; (80092b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009108:	fa22 f303 	lsr.w	r3, r2, r3
 800910c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	ee07 3a90 	vmov	s15, r3
 8009114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009126:	4b62      	ldr	r3, [pc, #392]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009136:	ed97 6a02 	vldr	s12, [r7, #8]
 800913a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80092c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800913e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800914a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800914e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009152:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009156:	e087      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	eddf 6a58 	vldr	s13, [pc, #352]	; 80092c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916a:	4b51      	ldr	r3, [pc, #324]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917a:	ed97 6a02 	vldr	s12, [r7, #8]
 800917e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80092c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800918e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800919a:	e065      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80092c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ae:	4b40      	ldr	r3, [pc, #256]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091be:	ed97 6a02 	vldr	s12, [r7, #8]
 80091c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80092c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091de:	e043      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80092cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80091ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f2:	4b2f      	ldr	r3, [pc, #188]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009202:	ed97 6a02 	vldr	s12, [r7, #8]
 8009206:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80092c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800920a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009222:	e021      	b.n	8009268 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80092c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009236:	4b1e      	ldr	r3, [pc, #120]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009246:	ed97 6a02 	vldr	s12, [r7, #8]
 800924a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80092c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800924e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800925a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009266:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009268:	4b11      	ldr	r3, [pc, #68]	; (80092b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800926a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926c:	0a5b      	lsrs	r3, r3, #9
 800926e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009272:	3301      	adds	r3, #1
 8009274:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009280:	edd7 6a07 	vldr	s13, [r7, #28]
 8009284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800928c:	ee17 3a90 	vmov	r3, s15
 8009290:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009292:	e005      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	61bb      	str	r3, [r7, #24]
      break;
 8009298:	e002      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800929a:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800929c:	61bb      	str	r3, [r7, #24]
      break;
 800929e:	bf00      	nop
  }

  return sysclockfreq;
 80092a0:	69bb      	ldr	r3, [r7, #24]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3724      	adds	r7, #36	; 0x24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	58024400 	.word	0x58024400
 80092b4:	03d09000 	.word	0x03d09000
 80092b8:	003d0900 	.word	0x003d0900
 80092bc:	017d7840 	.word	0x017d7840
 80092c0:	46000000 	.word	0x46000000
 80092c4:	4c742400 	.word	0x4c742400
 80092c8:	4a742400 	.word	0x4a742400
 80092cc:	4bbebc20 	.word	0x4bbebc20

080092d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092d4:	b0ca      	sub	sp, #296	; 0x128
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092dc:	2300      	movs	r3, #0
 80092de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092e2:	2300      	movs	r3, #0
 80092e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80092f4:	2500      	movs	r5, #0
 80092f6:	ea54 0305 	orrs.w	r3, r4, r5
 80092fa:	d049      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009302:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009306:	d02f      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009308:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800930c:	d828      	bhi.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800930e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009312:	d01a      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009318:	d822      	bhi.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800931e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009322:	d007      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009324:	e01c      	b.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009326:	4bb8      	ldr	r3, [pc, #736]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	4ab7      	ldr	r2, [pc, #732]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800932c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009332:	e01a      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009338:	3308      	adds	r3, #8
 800933a:	2102      	movs	r1, #2
 800933c:	4618      	mov	r0, r3
 800933e:	f001 f9d1 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009342:	4603      	mov	r3, r0
 8009344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009348:	e00f      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800934a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934e:	3328      	adds	r3, #40	; 0x28
 8009350:	2102      	movs	r1, #2
 8009352:	4618      	mov	r0, r3
 8009354:	f001 fa78 	bl	800a848 <RCCEx_PLL3_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800935e:	e004      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009366:	e000      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800936a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009372:	4ba5      	ldr	r3, [pc, #660]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009376:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800937a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800937e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009380:	4aa1      	ldr	r2, [pc, #644]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009382:	430b      	orrs	r3, r1
 8009384:	6513      	str	r3, [r2, #80]	; 0x50
 8009386:	e003      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800938c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800939c:	f04f 0900 	mov.w	r9, #0
 80093a0:	ea58 0309 	orrs.w	r3, r8, r9
 80093a4:	d047      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80093a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ac:	2b04      	cmp	r3, #4
 80093ae:	d82a      	bhi.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093b0:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	080093cd 	.word	0x080093cd
 80093bc:	080093db 	.word	0x080093db
 80093c0:	080093f1 	.word	0x080093f1
 80093c4:	0800940f 	.word	0x0800940f
 80093c8:	0800940f 	.word	0x0800940f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093cc:	4b8e      	ldr	r3, [pc, #568]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	4a8d      	ldr	r2, [pc, #564]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093d8:	e01a      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093de:	3308      	adds	r3, #8
 80093e0:	2100      	movs	r1, #0
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 f97e 	bl	800a6e4 <RCCEx_PLL2_Config>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093ee:	e00f      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f4:	3328      	adds	r3, #40	; 0x28
 80093f6:	2100      	movs	r1, #0
 80093f8:	4618      	mov	r0, r3
 80093fa:	f001 fa25 	bl	800a848 <RCCEx_PLL3_Config>
 80093fe:	4603      	mov	r3, r0
 8009400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009404:	e004      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800940c:	e000      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800940e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10a      	bne.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009418:	4b7b      	ldr	r3, [pc, #492]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800941a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800941c:	f023 0107 	bic.w	r1, r3, #7
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009426:	4a78      	ldr	r2, [pc, #480]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009428:	430b      	orrs	r3, r1
 800942a:	6513      	str	r3, [r2, #80]	; 0x50
 800942c:	e003      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009442:	f04f 0b00 	mov.w	fp, #0
 8009446:	ea5a 030b 	orrs.w	r3, sl, fp
 800944a:	d04c      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800944c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009456:	d030      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945c:	d829      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800945e:	2bc0      	cmp	r3, #192	; 0xc0
 8009460:	d02d      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009462:	2bc0      	cmp	r3, #192	; 0xc0
 8009464:	d825      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009466:	2b80      	cmp	r3, #128	; 0x80
 8009468:	d018      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800946a:	2b80      	cmp	r3, #128	; 0x80
 800946c:	d821      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800946e:	2b00      	cmp	r3, #0
 8009470:	d002      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009472:	2b40      	cmp	r3, #64	; 0x40
 8009474:	d007      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009476:	e01c      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009478:	4b63      	ldr	r3, [pc, #396]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	4a62      	ldr	r2, [pc, #392]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800947e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009484:	e01c      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800948a:	3308      	adds	r3, #8
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f001 f928 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009494:	4603      	mov	r3, r0
 8009496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800949a:	e011      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a0:	3328      	adds	r3, #40	; 0x28
 80094a2:	2100      	movs	r1, #0
 80094a4:	4618      	mov	r0, r3
 80094a6:	f001 f9cf 	bl	800a848 <RCCEx_PLL3_Config>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094b0:	e006      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094b8:	e002      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094ba:	bf00      	nop
 80094bc:	e000      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80094be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80094c8:	4b4f      	ldr	r3, [pc, #316]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094cc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d6:	4a4c      	ldr	r2, [pc, #304]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094d8:	430b      	orrs	r3, r1
 80094da:	6513      	str	r3, [r2, #80]	; 0x50
 80094dc:	e003      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80094f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80094f6:	2300      	movs	r3, #0
 80094f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80094fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009500:	460b      	mov	r3, r1
 8009502:	4313      	orrs	r3, r2
 8009504:	d053      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800950e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009512:	d035      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009518:	d82e      	bhi.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800951a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800951e:	d031      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009520:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009524:	d828      	bhi.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800952a:	d01a      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800952c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009530:	d822      	bhi.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800953a:	d007      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800953c:	e01c      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800953e:	4b32      	ldr	r3, [pc, #200]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	4a31      	ldr	r2, [pc, #196]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800954a:	e01c      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800954c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009550:	3308      	adds	r3, #8
 8009552:	2100      	movs	r1, #0
 8009554:	4618      	mov	r0, r3
 8009556:	f001 f8c5 	bl	800a6e4 <RCCEx_PLL2_Config>
 800955a:	4603      	mov	r3, r0
 800955c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009560:	e011      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009566:	3328      	adds	r3, #40	; 0x28
 8009568:	2100      	movs	r1, #0
 800956a:	4618      	mov	r0, r3
 800956c:	f001 f96c 	bl	800a848 <RCCEx_PLL3_Config>
 8009570:	4603      	mov	r3, r0
 8009572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009576:	e006      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800957e:	e002      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009580:	bf00      	nop
 8009582:	e000      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009586:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10b      	bne.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800958e:	4b1e      	ldr	r3, [pc, #120]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009592:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800959e:	4a1a      	ldr	r2, [pc, #104]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095a0:	430b      	orrs	r3, r1
 80095a2:	6593      	str	r3, [r2, #88]	; 0x58
 80095a4:	e003      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80095ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095be:	2300      	movs	r3, #0
 80095c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80095c8:	460b      	mov	r3, r1
 80095ca:	4313      	orrs	r3, r2
 80095cc:	d056      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095da:	d038      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80095dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095e0:	d831      	bhi.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095e6:	d034      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80095e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095ec:	d82b      	bhi.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095f2:	d01d      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80095f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095f8:	d825      	bhi.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d006      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80095fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009602:	d00a      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009604:	e01f      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009606:	bf00      	nop
 8009608:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800960c:	4ba2      	ldr	r3, [pc, #648]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	4aa1      	ldr	r2, [pc, #644]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009616:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009618:	e01c      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961e:	3308      	adds	r3, #8
 8009620:	2100      	movs	r1, #0
 8009622:	4618      	mov	r0, r3
 8009624:	f001 f85e 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800962e:	e011      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009634:	3328      	adds	r3, #40	; 0x28
 8009636:	2100      	movs	r1, #0
 8009638:	4618      	mov	r0, r3
 800963a:	f001 f905 	bl	800a848 <RCCEx_PLL3_Config>
 800963e:	4603      	mov	r3, r0
 8009640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009644:	e006      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800964c:	e002      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800964e:	bf00      	nop
 8009650:	e000      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10b      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800965c:	4b8e      	ldr	r3, [pc, #568]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800965e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009660:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009668:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800966c:	4a8a      	ldr	r2, [pc, #552]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800966e:	430b      	orrs	r3, r1
 8009670:	6593      	str	r3, [r2, #88]	; 0x58
 8009672:	e003      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800967c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800968c:	2300      	movs	r3, #0
 800968e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009692:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009696:	460b      	mov	r3, r1
 8009698:	4313      	orrs	r3, r2
 800969a:	d03a      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800969c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a2:	2b30      	cmp	r3, #48	; 0x30
 80096a4:	d01f      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80096a6:	2b30      	cmp	r3, #48	; 0x30
 80096a8:	d819      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096aa:	2b20      	cmp	r3, #32
 80096ac:	d00c      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80096ae:	2b20      	cmp	r3, #32
 80096b0:	d815      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d019      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d111      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ba:	4b77      	ldr	r3, [pc, #476]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096be:	4a76      	ldr	r2, [pc, #472]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80096c6:	e011      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096cc:	3308      	adds	r3, #8
 80096ce:	2102      	movs	r1, #2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 f807 	bl	800a6e4 <RCCEx_PLL2_Config>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80096dc:	e006      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096e4:	e002      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80096ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096f4:	4b68      	ldr	r3, [pc, #416]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80096fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009702:	4a65      	ldr	r2, [pc, #404]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009704:	430b      	orrs	r3, r1
 8009706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009708:	e003      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800970e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800971e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009722:	2300      	movs	r3, #0
 8009724:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009728:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800972c:	460b      	mov	r3, r1
 800972e:	4313      	orrs	r3, r2
 8009730:	d051      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800973c:	d035      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800973e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009742:	d82e      	bhi.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009744:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009748:	d031      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800974a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800974e:	d828      	bhi.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009754:	d01a      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800975a:	d822      	bhi.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800975c:	2b00      	cmp	r3, #0
 800975e:	d003      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009764:	d007      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009766:	e01c      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009768:	4b4b      	ldr	r3, [pc, #300]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800976a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976c:	4a4a      	ldr	r2, [pc, #296]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800976e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009774:	e01c      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977a:	3308      	adds	r3, #8
 800977c:	2100      	movs	r1, #0
 800977e:	4618      	mov	r0, r3
 8009780:	f000 ffb0 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009784:	4603      	mov	r3, r0
 8009786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800978a:	e011      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800978c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009790:	3328      	adds	r3, #40	; 0x28
 8009792:	2100      	movs	r1, #0
 8009794:	4618      	mov	r0, r3
 8009796:	f001 f857 	bl	800a848 <RCCEx_PLL3_Config>
 800979a:	4603      	mov	r3, r0
 800979c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097a0:	e006      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097a8:	e002      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097aa:	bf00      	nop
 80097ac:	e000      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10a      	bne.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80097b8:	4b37      	ldr	r3, [pc, #220]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80097c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c6:	4a34      	ldr	r2, [pc, #208]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097c8:	430b      	orrs	r3, r1
 80097ca:	6513      	str	r3, [r2, #80]	; 0x50
 80097cc:	e003      	b.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80097d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80097e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097e6:	2300      	movs	r3, #0
 80097e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80097f0:	460b      	mov	r3, r1
 80097f2:	4313      	orrs	r3, r2
 80097f4:	d056      	beq.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80097f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009800:	d033      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009802:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009806:	d82c      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800980c:	d02f      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800980e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009812:	d826      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009814:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009818:	d02b      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800981a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800981e:	d820      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009824:	d012      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800982a:	d81a      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800982c:	2b00      	cmp	r3, #0
 800982e:	d022      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009834:	d115      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800983a:	3308      	adds	r3, #8
 800983c:	2101      	movs	r1, #1
 800983e:	4618      	mov	r0, r3
 8009840:	f000 ff50 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009844:	4603      	mov	r3, r0
 8009846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800984a:	e015      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009850:	3328      	adds	r3, #40	; 0x28
 8009852:	2101      	movs	r1, #1
 8009854:	4618      	mov	r0, r3
 8009856:	f000 fff7 	bl	800a848 <RCCEx_PLL3_Config>
 800985a:	4603      	mov	r3, r0
 800985c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009860:	e00a      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009868:	e006      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800986a:	bf00      	nop
 800986c:	e004      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800986e:	bf00      	nop
 8009870:	e002      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009872:	bf00      	nop
 8009874:	e000      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10d      	bne.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009880:	4b05      	ldr	r3, [pc, #20]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009884:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800988e:	4a02      	ldr	r2, [pc, #8]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009890:	430b      	orrs	r3, r1
 8009892:	6513      	str	r3, [r2, #80]	; 0x50
 8009894:	e006      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009896:	bf00      	nop
 8009898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80098b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098b4:	2300      	movs	r3, #0
 80098b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80098be:	460b      	mov	r3, r1
 80098c0:	4313      	orrs	r3, r2
 80098c2:	d055      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80098c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098d0:	d033      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80098d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098d6:	d82c      	bhi.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098dc:	d02f      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80098de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098e2:	d826      	bhi.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098e8:	d02b      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80098ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80098ee:	d820      	bhi.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f4:	d012      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80098f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098fa:	d81a      	bhi.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d022      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009904:	d115      	bne.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990a:	3308      	adds	r3, #8
 800990c:	2101      	movs	r1, #1
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fee8 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800991a:	e015      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800991c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009920:	3328      	adds	r3, #40	; 0x28
 8009922:	2101      	movs	r1, #1
 8009924:	4618      	mov	r0, r3
 8009926:	f000 ff8f 	bl	800a848 <RCCEx_PLL3_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009930:	e00a      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009938:	e006      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800993a:	bf00      	nop
 800993c:	e004      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800993e:	bf00      	nop
 8009940:	e002      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009942:	bf00      	nop
 8009944:	e000      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10b      	bne.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009950:	4ba3      	ldr	r3, [pc, #652]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009954:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009960:	4a9f      	ldr	r2, [pc, #636]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009962:	430b      	orrs	r3, r1
 8009964:	6593      	str	r3, [r2, #88]	; 0x58
 8009966:	e003      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800996c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800997c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009980:	2300      	movs	r3, #0
 8009982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009986:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800998a:	460b      	mov	r3, r1
 800998c:	4313      	orrs	r3, r2
 800998e:	d037      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800999a:	d00e      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800999c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099a0:	d816      	bhi.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d018      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80099a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099aa:	d111      	bne.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ac:	4b8c      	ldr	r3, [pc, #560]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b0:	4a8b      	ldr	r2, [pc, #556]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099b8:	e00f      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099be:	3308      	adds	r3, #8
 80099c0:	2101      	movs	r1, #1
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fe8e 	bl	800a6e4 <RCCEx_PLL2_Config>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80099ce:	e004      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099d6:	e000      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80099d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10a      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099e2:	4b7f      	ldr	r3, [pc, #508]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80099ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f0:	4a7b      	ldr	r2, [pc, #492]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099f2:	430b      	orrs	r3, r1
 80099f4:	6513      	str	r3, [r2, #80]	; 0x50
 80099f6:	e003      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a10:	2300      	movs	r3, #0
 8009a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	d039      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	d81c      	bhi.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009a2a:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009a6d 	.word	0x08009a6d
 8009a34:	08009a41 	.word	0x08009a41
 8009a38:	08009a4f 	.word	0x08009a4f
 8009a3c:	08009a6d 	.word	0x08009a6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a40:	4b67      	ldr	r3, [pc, #412]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a44:	4a66      	ldr	r2, [pc, #408]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a4c:	e00f      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a52:	3308      	adds	r3, #8
 8009a54:	2102      	movs	r1, #2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fe44 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a62:	e004      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a64:	2301      	movs	r3, #1
 8009a66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a6a:	e000      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10a      	bne.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009a76:	4b5a      	ldr	r3, [pc, #360]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7a:	f023 0103 	bic.w	r1, r3, #3
 8009a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a84:	4a56      	ldr	r2, [pc, #344]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a86:	430b      	orrs	r3, r1
 8009a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a8a:	e003      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009aa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009aaa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	f000 809f 	beq.w	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ab6:	4b4b      	ldr	r3, [pc, #300]	; (8009be4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a4a      	ldr	r2, [pc, #296]	; (8009be4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ac2:	f7f7 fcc9 	bl	8001458 <HAL_GetTick>
 8009ac6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009aca:	e00b      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009acc:	f7f7 fcc4 	bl	8001458 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	2b64      	cmp	r3, #100	; 0x64
 8009ada:	d903      	bls.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ae2:	e005      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ae4:	4b3f      	ldr	r3, [pc, #252]	; (8009be4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0ed      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d179      	bne.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009af8:	4b39      	ldr	r3, [pc, #228]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009afa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b04:	4053      	eors	r3, r2
 8009b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d015      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b0e:	4b34      	ldr	r3, [pc, #208]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b1a:	4b31      	ldr	r3, [pc, #196]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1e:	4a30      	ldr	r2, [pc, #192]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b26:	4b2e      	ldr	r3, [pc, #184]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2a:	4a2d      	ldr	r2, [pc, #180]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b32:	4a2b      	ldr	r2, [pc, #172]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b46:	d118      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b48:	f7f7 fc86 	bl	8001458 <HAL_GetTick>
 8009b4c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b50:	e00d      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b52:	f7f7 fc81 	bl	8001458 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009b5c:	1ad2      	subs	r2, r2, r3
 8009b5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d903      	bls.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009b6c:	e005      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b6e:	4b1c      	ldr	r3, [pc, #112]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b72:	f003 0302 	and.w	r3, r3, #2
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0eb      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d129      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b92:	d10e      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009b94:	4b12      	ldr	r3, [pc, #72]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ba4:	091a      	lsrs	r2, r3, #4
 8009ba6:	4b10      	ldr	r3, [pc, #64]	; (8009be8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009ba8:	4013      	ands	r3, r2
 8009baa:	4a0d      	ldr	r2, [pc, #52]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bac:	430b      	orrs	r3, r1
 8009bae:	6113      	str	r3, [r2, #16]
 8009bb0:	e005      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009bb2:	4b0b      	ldr	r3, [pc, #44]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	4a0a      	ldr	r2, [pc, #40]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009bbc:	6113      	str	r3, [r2, #16]
 8009bbe:	4b08      	ldr	r3, [pc, #32]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bc0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bce:	4a04      	ldr	r2, [pc, #16]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8009bd4:	e00e      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009bde:	e009      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009be0:	58024400 	.word	0x58024400
 8009be4:	58024800 	.word	0x58024800
 8009be8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	f002 0301 	and.w	r3, r2, #1
 8009c00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c04:	2300      	movs	r3, #0
 8009c06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c0e:	460b      	mov	r3, r1
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f000 8089 	beq.w	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c1c:	2b28      	cmp	r3, #40	; 0x28
 8009c1e:	d86b      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009d01 	.word	0x08009d01
 8009c2c:	08009cf9 	.word	0x08009cf9
 8009c30:	08009cf9 	.word	0x08009cf9
 8009c34:	08009cf9 	.word	0x08009cf9
 8009c38:	08009cf9 	.word	0x08009cf9
 8009c3c:	08009cf9 	.word	0x08009cf9
 8009c40:	08009cf9 	.word	0x08009cf9
 8009c44:	08009cf9 	.word	0x08009cf9
 8009c48:	08009ccd 	.word	0x08009ccd
 8009c4c:	08009cf9 	.word	0x08009cf9
 8009c50:	08009cf9 	.word	0x08009cf9
 8009c54:	08009cf9 	.word	0x08009cf9
 8009c58:	08009cf9 	.word	0x08009cf9
 8009c5c:	08009cf9 	.word	0x08009cf9
 8009c60:	08009cf9 	.word	0x08009cf9
 8009c64:	08009cf9 	.word	0x08009cf9
 8009c68:	08009ce3 	.word	0x08009ce3
 8009c6c:	08009cf9 	.word	0x08009cf9
 8009c70:	08009cf9 	.word	0x08009cf9
 8009c74:	08009cf9 	.word	0x08009cf9
 8009c78:	08009cf9 	.word	0x08009cf9
 8009c7c:	08009cf9 	.word	0x08009cf9
 8009c80:	08009cf9 	.word	0x08009cf9
 8009c84:	08009cf9 	.word	0x08009cf9
 8009c88:	08009d01 	.word	0x08009d01
 8009c8c:	08009cf9 	.word	0x08009cf9
 8009c90:	08009cf9 	.word	0x08009cf9
 8009c94:	08009cf9 	.word	0x08009cf9
 8009c98:	08009cf9 	.word	0x08009cf9
 8009c9c:	08009cf9 	.word	0x08009cf9
 8009ca0:	08009cf9 	.word	0x08009cf9
 8009ca4:	08009cf9 	.word	0x08009cf9
 8009ca8:	08009d01 	.word	0x08009d01
 8009cac:	08009cf9 	.word	0x08009cf9
 8009cb0:	08009cf9 	.word	0x08009cf9
 8009cb4:	08009cf9 	.word	0x08009cf9
 8009cb8:	08009cf9 	.word	0x08009cf9
 8009cbc:	08009cf9 	.word	0x08009cf9
 8009cc0:	08009cf9 	.word	0x08009cf9
 8009cc4:	08009cf9 	.word	0x08009cf9
 8009cc8:	08009d01 	.word	0x08009d01
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fd05 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009ce0:	e00f      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce6:	3328      	adds	r3, #40	; 0x28
 8009ce8:	2101      	movs	r1, #1
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 fdac 	bl	800a848 <RCCEx_PLL3_Config>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009cf6:	e004      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cfe:	e000      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d0a:	4bbf      	ldr	r3, [pc, #764]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d18:	4abb      	ldr	r2, [pc, #748]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d1a:	430b      	orrs	r3, r1
 8009d1c:	6553      	str	r3, [r2, #84]	; 0x54
 8009d1e:	e003      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f002 0302 	and.w	r3, r2, #2
 8009d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009d42:	460b      	mov	r3, r1
 8009d44:	4313      	orrs	r3, r2
 8009d46:	d041      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d4e:	2b05      	cmp	r3, #5
 8009d50:	d824      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009d52:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d58:	08009da5 	.word	0x08009da5
 8009d5c:	08009d71 	.word	0x08009d71
 8009d60:	08009d87 	.word	0x08009d87
 8009d64:	08009da5 	.word	0x08009da5
 8009d68:	08009da5 	.word	0x08009da5
 8009d6c:	08009da5 	.word	0x08009da5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d74:	3308      	adds	r3, #8
 8009d76:	2101      	movs	r1, #1
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 fcb3 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d84:	e00f      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8a:	3328      	adds	r3, #40	; 0x28
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fd5a 	bl	800a848 <RCCEx_PLL3_Config>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d9a:	e004      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009da2:	e000      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009da6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009dae:	4b96      	ldr	r3, [pc, #600]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db2:	f023 0107 	bic.w	r1, r3, #7
 8009db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dbc:	4a92      	ldr	r2, [pc, #584]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009dbe:	430b      	orrs	r3, r1
 8009dc0:	6553      	str	r3, [r2, #84]	; 0x54
 8009dc2:	e003      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	f002 0304 	and.w	r3, r2, #4
 8009dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009de2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009de6:	460b      	mov	r3, r1
 8009de8:	4313      	orrs	r3, r2
 8009dea:	d044      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009df4:	2b05      	cmp	r3, #5
 8009df6:	d825      	bhi.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009df8:	a201      	add	r2, pc, #4	; (adr r2, 8009e00 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e4d 	.word	0x08009e4d
 8009e04:	08009e19 	.word	0x08009e19
 8009e08:	08009e2f 	.word	0x08009e2f
 8009e0c:	08009e4d 	.word	0x08009e4d
 8009e10:	08009e4d 	.word	0x08009e4d
 8009e14:	08009e4d 	.word	0x08009e4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	2101      	movs	r1, #1
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fc5f 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e2c:	e00f      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e32:	3328      	adds	r3, #40	; 0x28
 8009e34:	2101      	movs	r1, #1
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fd06 	bl	800a848 <RCCEx_PLL3_Config>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e42:	e004      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e4a:	e000      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10b      	bne.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e56:	4b6c      	ldr	r3, [pc, #432]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5a:	f023 0107 	bic.w	r1, r3, #7
 8009e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e66:	4a68      	ldr	r2, [pc, #416]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e68:	430b      	orrs	r3, r1
 8009e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8009e6c:	e003      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	f002 0320 	and.w	r3, r2, #32
 8009e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e86:	2300      	movs	r3, #0
 8009e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e90:	460b      	mov	r3, r1
 8009e92:	4313      	orrs	r3, r2
 8009e94:	d055      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ea2:	d033      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ea8:	d82c      	bhi.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eae:	d02f      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb4:	d826      	bhi.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009eb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009eba:	d02b      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009ebc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ec0:	d820      	bhi.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ec6:	d012      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ecc:	d81a      	bhi.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d022      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ed6:	d115      	bne.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009edc:	3308      	adds	r3, #8
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fbff 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009eec:	e015      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef2:	3328      	adds	r3, #40	; 0x28
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fca6 	bl	800a848 <RCCEx_PLL3_Config>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f02:	e00a      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f0a:	e006      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f0c:	bf00      	nop
 8009f0e:	e004      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f10:	bf00      	nop
 8009f12:	e002      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f14:	bf00      	nop
 8009f16:	e000      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10b      	bne.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f22:	4b39      	ldr	r3, [pc, #228]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f26:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f32:	4a35      	ldr	r2, [pc, #212]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f34:	430b      	orrs	r3, r1
 8009f36:	6553      	str	r3, [r2, #84]	; 0x54
 8009f38:	e003      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f52:	2300      	movs	r3, #0
 8009f54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	d058      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f6e:	d033      	beq.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009f70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009f74:	d82c      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7a:	d02f      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f80:	d826      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f86:	d02b      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009f88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f8c:	d820      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f92:	d012      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f98:	d81a      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d022      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa2:	d115      	bne.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa8:	3308      	adds	r3, #8
 8009faa:	2100      	movs	r1, #0
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fb99 	bl	800a6e4 <RCCEx_PLL2_Config>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009fb8:	e015      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fbe:	3328      	adds	r3, #40	; 0x28
 8009fc0:	2102      	movs	r1, #2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 fc40 	bl	800a848 <RCCEx_PLL3_Config>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009fce:	e00a      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fd6:	e006      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fd8:	bf00      	nop
 8009fda:	e004      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fdc:	bf00      	nop
 8009fde:	e002      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fe0:	bf00      	nop
 8009fe2:	e000      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10e      	bne.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009fee:	4b06      	ldr	r3, [pc, #24]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ffe:	4a02      	ldr	r2, [pc, #8]	; (800a008 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a000:	430b      	orrs	r3, r1
 800a002:	6593      	str	r3, [r2, #88]	; 0x58
 800a004:	e006      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a006:	bf00      	nop
 800a008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a00c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a010:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a024:	2300      	movs	r3, #0
 800a026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a02a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a02e:	460b      	mov	r3, r1
 800a030:	4313      	orrs	r3, r2
 800a032:	d055      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a038:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a03c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a040:	d033      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a042:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a046:	d82c      	bhi.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a04c:	d02f      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a04e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a052:	d826      	bhi.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a054:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a058:	d02b      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a05a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a05e:	d820      	bhi.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a064:	d012      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a06a:	d81a      	bhi.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d022      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a074:	d115      	bne.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07a:	3308      	adds	r3, #8
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fb30 	bl	800a6e4 <RCCEx_PLL2_Config>
 800a084:	4603      	mov	r3, r0
 800a086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a08a:	e015      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a08c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a090:	3328      	adds	r3, #40	; 0x28
 800a092:	2102      	movs	r1, #2
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fbd7 	bl	800a848 <RCCEx_PLL3_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0a0:	e00a      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0a8:	e006      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0aa:	bf00      	nop
 800a0ac:	e004      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0ae:	bf00      	nop
 800a0b0:	e002      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0b2:	bf00      	nop
 800a0b4:	e000      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10b      	bne.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0c0:	4ba1      	ldr	r3, [pc, #644]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0d0:	4a9d      	ldr	r2, [pc, #628]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0d2:	430b      	orrs	r3, r1
 800a0d4:	6593      	str	r3, [r2, #88]	; 0x58
 800a0d6:	e003      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	f002 0308 	and.w	r3, r2, #8
 800a0ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	d01e      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a10c:	d10c      	bne.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a112:	3328      	adds	r3, #40	; 0x28
 800a114:	2102      	movs	r1, #2
 800a116:	4618      	mov	r0, r3
 800a118:	f000 fb96 	bl	800a848 <RCCEx_PLL3_Config>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a128:	4b87      	ldr	r3, [pc, #540]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a138:	4a83      	ldr	r2, [pc, #524]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a13a:	430b      	orrs	r3, r1
 800a13c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f002 0310 	and.w	r3, r2, #16
 800a14a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a14e:	2300      	movs	r3, #0
 800a150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a154:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a158:	460b      	mov	r3, r1
 800a15a:	4313      	orrs	r3, r2
 800a15c:	d01e      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a16a:	d10c      	bne.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a170:	3328      	adds	r3, #40	; 0x28
 800a172:	2102      	movs	r1, #2
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fb67 	bl	800a848 <RCCEx_PLL3_Config>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a186:	4b70      	ldr	r3, [pc, #448]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a18a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a196:	4a6c      	ldr	r2, [pc, #432]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a198:	430b      	orrs	r3, r1
 800a19a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a1a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	d03e      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1c8:	d022      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a1ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1ce:	d81b      	bhi.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d003      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a1d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d8:	d00b      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a1da:	e015      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 fa7d 	bl	800a6e4 <RCCEx_PLL2_Config>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a1f0:	e00f      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f6:	3328      	adds	r3, #40	; 0x28
 800a1f8:	2102      	movs	r1, #2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fb24 	bl	800a848 <RCCEx_PLL3_Config>
 800a200:	4603      	mov	r3, r0
 800a202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a206:	e004      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a20e:	e000      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a210:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10b      	bne.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a21a:	4b4b      	ldr	r3, [pc, #300]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a226:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a22a:	4a47      	ldr	r2, [pc, #284]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a22c:	430b      	orrs	r3, r1
 800a22e:	6593      	str	r3, [r2, #88]	; 0x58
 800a230:	e003      	b.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a236:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a246:	67bb      	str	r3, [r7, #120]	; 0x78
 800a248:	2300      	movs	r3, #0
 800a24a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a24c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a250:	460b      	mov	r3, r1
 800a252:	4313      	orrs	r3, r2
 800a254:	d03b      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a262:	d01f      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a264:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a268:	d818      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a26a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a26e:	d003      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a270:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a274:	d007      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a276:	e011      	b.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a278:	4b33      	ldr	r3, [pc, #204]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	4a32      	ldr	r2, [pc, #200]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a27e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a284:	e00f      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28a:	3328      	adds	r3, #40	; 0x28
 800a28c:	2101      	movs	r1, #1
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fada 	bl	800a848 <RCCEx_PLL3_Config>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a29a:	e004      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2a2:	e000      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a2a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10b      	bne.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2ae:	4b26      	ldr	r3, [pc, #152]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2be:	4a22      	ldr	r2, [pc, #136]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2c0:	430b      	orrs	r3, r1
 800a2c2:	6553      	str	r3, [r2, #84]	; 0x54
 800a2c4:	e003      	b.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a2da:	673b      	str	r3, [r7, #112]	; 0x70
 800a2dc:	2300      	movs	r3, #0
 800a2de:	677b      	str	r3, [r7, #116]	; 0x74
 800a2e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	d034      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a2f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f8:	d007      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a2fa:	e011      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2fc:	4b12      	ldr	r3, [pc, #72]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a300:	4a11      	ldr	r2, [pc, #68]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a308:	e00e      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a30e:	3308      	adds	r3, #8
 800a310:	2102      	movs	r1, #2
 800a312:	4618      	mov	r0, r3
 800a314:	f000 f9e6 	bl	800a6e4 <RCCEx_PLL2_Config>
 800a318:	4603      	mov	r3, r0
 800a31a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a31e:	e003      	b.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a326:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10d      	bne.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a330:	4b05      	ldr	r3, [pc, #20]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a33e:	4a02      	ldr	r2, [pc, #8]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a340:	430b      	orrs	r3, r1
 800a342:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a344:	e006      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a346:	bf00      	nop
 800a348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a360:	66bb      	str	r3, [r7, #104]	; 0x68
 800a362:	2300      	movs	r3, #0
 800a364:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a366:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a36a:	460b      	mov	r3, r1
 800a36c:	4313      	orrs	r3, r2
 800a36e:	d00c      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a374:	3328      	adds	r3, #40	; 0x28
 800a376:	2102      	movs	r1, #2
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 fa65 	bl	800a848 <RCCEx_PLL3_Config>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a392:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a396:	663b      	str	r3, [r7, #96]	; 0x60
 800a398:	2300      	movs	r3, #0
 800a39a:	667b      	str	r3, [r7, #100]	; 0x64
 800a39c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	d038      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3b2:	d018      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a3b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3b8:	d811      	bhi.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3be:	d014      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c4:	d80b      	bhi.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d011      	beq.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ce:	d106      	bne.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3d0:	4bc3      	ldr	r3, [pc, #780]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	4ac2      	ldr	r2, [pc, #776]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a3dc:	e008      	b.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3e4:	e004      	b.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a3e6:	bf00      	nop
 800a3e8:	e002      	b.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a3ea:	bf00      	nop
 800a3ec:	e000      	b.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a3ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10b      	bne.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a3f8:	4bb9      	ldr	r3, [pc, #740]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a408:	4ab5      	ldr	r2, [pc, #724]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a40a:	430b      	orrs	r3, r1
 800a40c:	6553      	str	r3, [r2, #84]	; 0x54
 800a40e:	e003      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a414:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a424:	65bb      	str	r3, [r7, #88]	; 0x58
 800a426:	2300      	movs	r3, #0
 800a428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a42a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a42e:	460b      	mov	r3, r1
 800a430:	4313      	orrs	r3, r2
 800a432:	d009      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a434:	4baa      	ldr	r3, [pc, #680]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a438:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a442:	4aa7      	ldr	r2, [pc, #668]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a444:	430b      	orrs	r3, r1
 800a446:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a454:	653b      	str	r3, [r7, #80]	; 0x50
 800a456:	2300      	movs	r3, #0
 800a458:	657b      	str	r3, [r7, #84]	; 0x54
 800a45a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a45e:	460b      	mov	r3, r1
 800a460:	4313      	orrs	r3, r2
 800a462:	d00a      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a464:	4b9e      	ldr	r3, [pc, #632]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a46c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a470:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a474:	4a9a      	ldr	r2, [pc, #616]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a476:	430b      	orrs	r3, r1
 800a478:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a486:	64bb      	str	r3, [r7, #72]	; 0x48
 800a488:	2300      	movs	r3, #0
 800a48a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a48c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a490:	460b      	mov	r3, r1
 800a492:	4313      	orrs	r3, r2
 800a494:	d009      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a496:	4b92      	ldr	r3, [pc, #584]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a49a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4a4:	4a8e      	ldr	r2, [pc, #568]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4a6:	430b      	orrs	r3, r1
 800a4a8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a4b6:	643b      	str	r3, [r7, #64]	; 0x40
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	647b      	str	r3, [r7, #68]	; 0x44
 800a4bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	d00e      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4c6:	4b86      	ldr	r3, [pc, #536]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	4a85      	ldr	r2, [pc, #532]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4d0:	6113      	str	r3, [r2, #16]
 800a4d2:	4b83      	ldr	r3, [pc, #524]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4d4:	6919      	ldr	r1, [r3, #16]
 800a4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a4de:	4a80      	ldr	r2, [pc, #512]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a4f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	d009      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a500:	4b77      	ldr	r3, [pc, #476]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a504:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50e:	4a74      	ldr	r2, [pc, #464]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a510:	430b      	orrs	r3, r1
 800a512:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a520:	633b      	str	r3, [r7, #48]	; 0x30
 800a522:	2300      	movs	r3, #0
 800a524:	637b      	str	r3, [r7, #52]	; 0x34
 800a526:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a52a:	460b      	mov	r3, r1
 800a52c:	4313      	orrs	r3, r2
 800a52e:	d00a      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a530:	4b6b      	ldr	r3, [pc, #428]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a534:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a540:	4a67      	ldr	r2, [pc, #412]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a542:	430b      	orrs	r3, r1
 800a544:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54e:	2100      	movs	r1, #0
 800a550:	62b9      	str	r1, [r7, #40]	; 0x28
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a558:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a55c:	460b      	mov	r3, r1
 800a55e:	4313      	orrs	r3, r2
 800a560:	d011      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a566:	3308      	adds	r3, #8
 800a568:	2100      	movs	r1, #0
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 f8ba 	bl	800a6e4 <RCCEx_PLL2_Config>
 800a570:	4603      	mov	r3, r0
 800a572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a57e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	2100      	movs	r1, #0
 800a590:	6239      	str	r1, [r7, #32]
 800a592:	f003 0302 	and.w	r3, r3, #2
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
 800a598:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a59c:	460b      	mov	r3, r1
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	d011      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 f89a 	bl	800a6e4 <RCCEx_PLL2_Config>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	61b9      	str	r1, [r7, #24]
 800a5d2:	f003 0304 	and.w	r3, r3, #4
 800a5d6:	61fb      	str	r3, [r7, #28]
 800a5d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	d011      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e6:	3308      	adds	r3, #8
 800a5e8:	2102      	movs	r1, #2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 f87a 	bl	800a6e4 <RCCEx_PLL2_Config>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	2100      	movs	r1, #0
 800a610:	6139      	str	r1, [r7, #16]
 800a612:	f003 0308 	and.w	r3, r3, #8
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a61c:	460b      	mov	r3, r1
 800a61e:	4313      	orrs	r3, r2
 800a620:	d011      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a626:	3328      	adds	r3, #40	; 0x28
 800a628:	2100      	movs	r1, #0
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 f90c 	bl	800a848 <RCCEx_PLL3_Config>
 800a630:	4603      	mov	r3, r0
 800a632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a63e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64e:	2100      	movs	r1, #0
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	f003 0310 	and.w	r3, r3, #16
 800a656:	60fb      	str	r3, [r7, #12]
 800a658:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a65c:	460b      	mov	r3, r1
 800a65e:	4313      	orrs	r3, r2
 800a660:	d011      	beq.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a666:	3328      	adds	r3, #40	; 0x28
 800a668:	2101      	movs	r1, #1
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 f8ec 	bl	800a848 <RCCEx_PLL3_Config>
 800a670:	4603      	mov	r3, r0
 800a672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a67e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	2100      	movs	r1, #0
 800a690:	6039      	str	r1, [r7, #0]
 800a692:	f003 0320 	and.w	r3, r3, #32
 800a696:	607b      	str	r3, [r7, #4]
 800a698:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a69c:	460b      	mov	r3, r1
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	d011      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a6:	3328      	adds	r3, #40	; 0x28
 800a6a8:	2102      	movs	r1, #2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 f8cc 	bl	800a848 <RCCEx_PLL3_Config>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a6c6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e000      	b.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6e0:	58024400 	.word	0x58024400

0800a6e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6f2:	4b53      	ldr	r3, [pc, #332]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f6:	f003 0303 	and.w	r3, r3, #3
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d101      	bne.n	800a702 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e099      	b.n	800a836 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a702:	4b4f      	ldr	r3, [pc, #316]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a4e      	ldr	r2, [pc, #312]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a708:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a70c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a70e:	f7f6 fea3 	bl	8001458 <HAL_GetTick>
 800a712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a714:	e008      	b.n	800a728 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a716:	f7f6 fe9f 	bl	8001458 <HAL_GetTick>
 800a71a:	4602      	mov	r2, r0
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	2b02      	cmp	r3, #2
 800a722:	d901      	bls.n	800a728 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e086      	b.n	800a836 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a728:	4b45      	ldr	r3, [pc, #276]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1f0      	bne.n	800a716 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a734:	4b42      	ldr	r3, [pc, #264]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a738:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	031b      	lsls	r3, r3, #12
 800a742:	493f      	ldr	r1, [pc, #252]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a744:	4313      	orrs	r3, r2
 800a746:	628b      	str	r3, [r1, #40]	; 0x28
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	3b01      	subs	r3, #1
 800a758:	025b      	lsls	r3, r3, #9
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	3b01      	subs	r3, #1
 800a764:	041b      	lsls	r3, r3, #16
 800a766:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a76a:	431a      	orrs	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	3b01      	subs	r3, #1
 800a772:	061b      	lsls	r3, r3, #24
 800a774:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a778:	4931      	ldr	r1, [pc, #196]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a77e:	4b30      	ldr	r3, [pc, #192]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	492d      	ldr	r1, [pc, #180]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a78c:	4313      	orrs	r3, r2
 800a78e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a790:	4b2b      	ldr	r3, [pc, #172]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	f023 0220 	bic.w	r2, r3, #32
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	4928      	ldr	r1, [pc, #160]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a7a2:	4b27      	ldr	r3, [pc, #156]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a6:	4a26      	ldr	r2, [pc, #152]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7a8:	f023 0310 	bic.w	r3, r3, #16
 800a7ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a7ae:	4b24      	ldr	r3, [pc, #144]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7b2:	4b24      	ldr	r3, [pc, #144]	; (800a844 <RCCEx_PLL2_Config+0x160>)
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	69d2      	ldr	r2, [r2, #28]
 800a7ba:	00d2      	lsls	r2, r2, #3
 800a7bc:	4920      	ldr	r1, [pc, #128]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a7c2:	4b1f      	ldr	r3, [pc, #124]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c6:	4a1e      	ldr	r2, [pc, #120]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7c8:	f043 0310 	orr.w	r3, r3, #16
 800a7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d106      	bne.n	800a7e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7d4:	4b1a      	ldr	r3, [pc, #104]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	4a19      	ldr	r2, [pc, #100]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7e0:	e00f      	b.n	800a802 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d106      	bne.n	800a7f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a7e8:	4b15      	ldr	r3, [pc, #84]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	4a14      	ldr	r2, [pc, #80]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7f4:	e005      	b.n	800a802 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a7f6:	4b12      	ldr	r3, [pc, #72]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fa:	4a11      	ldr	r2, [pc, #68]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a7fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a800:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a802:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a0e      	ldr	r2, [pc, #56]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a80c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a80e:	f7f6 fe23 	bl	8001458 <HAL_GetTick>
 800a812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a814:	e008      	b.n	800a828 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a816:	f7f6 fe1f 	bl	8001458 <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	2b02      	cmp	r3, #2
 800a822:	d901      	bls.n	800a828 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e006      	b.n	800a836 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a828:	4b05      	ldr	r3, [pc, #20]	; (800a840 <RCCEx_PLL2_Config+0x15c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a830:	2b00      	cmp	r3, #0
 800a832:	d0f0      	beq.n	800a816 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a834:	7bfb      	ldrb	r3, [r7, #15]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	58024400 	.word	0x58024400
 800a844:	ffff0007 	.word	0xffff0007

0800a848 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a856:	4b53      	ldr	r3, [pc, #332]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85a:	f003 0303 	and.w	r3, r3, #3
 800a85e:	2b03      	cmp	r3, #3
 800a860:	d101      	bne.n	800a866 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e099      	b.n	800a99a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a866:	4b4f      	ldr	r3, [pc, #316]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a4e      	ldr	r2, [pc, #312]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a86c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a872:	f7f6 fdf1 	bl	8001458 <HAL_GetTick>
 800a876:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a878:	e008      	b.n	800a88c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a87a:	f7f6 fded 	bl	8001458 <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	d901      	bls.n	800a88c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e086      	b.n	800a99a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a88c:	4b45      	ldr	r3, [pc, #276]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1f0      	bne.n	800a87a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a898:	4b42      	ldr	r3, [pc, #264]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	051b      	lsls	r3, r3, #20
 800a8a6:	493f      	ldr	r1, [pc, #252]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	628b      	str	r3, [r1, #40]	; 0x28
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	025b      	lsls	r3, r3, #9
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	431a      	orrs	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	041b      	lsls	r3, r3, #16
 800a8ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	061b      	lsls	r3, r3, #24
 800a8d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8dc:	4931      	ldr	r1, [pc, #196]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8e2:	4b30      	ldr	r3, [pc, #192]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	492d      	ldr	r1, [pc, #180]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a8f4:	4b2b      	ldr	r3, [pc, #172]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	4928      	ldr	r1, [pc, #160]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a902:	4313      	orrs	r3, r2
 800a904:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a906:	4b27      	ldr	r3, [pc, #156]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90a:	4a26      	ldr	r2, [pc, #152]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a90c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a912:	4b24      	ldr	r3, [pc, #144]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a916:	4b24      	ldr	r3, [pc, #144]	; (800a9a8 <RCCEx_PLL3_Config+0x160>)
 800a918:	4013      	ands	r3, r2
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	69d2      	ldr	r2, [r2, #28]
 800a91e:	00d2      	lsls	r2, r2, #3
 800a920:	4920      	ldr	r1, [pc, #128]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a922:	4313      	orrs	r3, r2
 800a924:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a926:	4b1f      	ldr	r3, [pc, #124]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92a:	4a1e      	ldr	r2, [pc, #120]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a92c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d106      	bne.n	800a946 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a938:	4b1a      	ldr	r3, [pc, #104]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93c:	4a19      	ldr	r2, [pc, #100]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a93e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a942:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a944:	e00f      	b.n	800a966 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d106      	bne.n	800a95a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a94c:	4b15      	ldr	r3, [pc, #84]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	4a14      	ldr	r2, [pc, #80]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a956:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a958:	e005      	b.n	800a966 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a95a:	4b12      	ldr	r3, [pc, #72]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95e:	4a11      	ldr	r2, [pc, #68]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a964:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a966:	4b0f      	ldr	r3, [pc, #60]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a0e      	ldr	r2, [pc, #56]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a96c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a972:	f7f6 fd71 	bl	8001458 <HAL_GetTick>
 800a976:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a978:	e008      	b.n	800a98c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a97a:	f7f6 fd6d 	bl	8001458 <HAL_GetTick>
 800a97e:	4602      	mov	r2, r0
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	2b02      	cmp	r3, #2
 800a986:	d901      	bls.n	800a98c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a988:	2303      	movs	r3, #3
 800a98a:	e006      	b.n	800a99a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a98c:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <RCCEx_PLL3_Config+0x15c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d0f0      	beq.n	800a97a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	58024400 	.word	0x58024400
 800a9a8:	ffff0007 	.word	0xffff0007

0800a9ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e049      	b.n	800aa52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d106      	bne.n	800a9d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7f6 fc48 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f000 faee 	bl	800afcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
	...

0800aa5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d001      	beq.n	800aa74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e054      	b.n	800ab1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f042 0201 	orr.w	r2, r2, #1
 800aa8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a26      	ldr	r2, [pc, #152]	; (800ab2c <HAL_TIM_Base_Start_IT+0xd0>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d022      	beq.n	800aadc <HAL_TIM_Base_Start_IT+0x80>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa9e:	d01d      	beq.n	800aadc <HAL_TIM_Base_Start_IT+0x80>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a22      	ldr	r2, [pc, #136]	; (800ab30 <HAL_TIM_Base_Start_IT+0xd4>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d018      	beq.n	800aadc <HAL_TIM_Base_Start_IT+0x80>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a21      	ldr	r2, [pc, #132]	; (800ab34 <HAL_TIM_Base_Start_IT+0xd8>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d013      	beq.n	800aadc <HAL_TIM_Base_Start_IT+0x80>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a1f      	ldr	r2, [pc, #124]	; (800ab38 <HAL_TIM_Base_Start_IT+0xdc>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d00e      	beq.n	800aadc <HAL_TIM_Base_Start_IT+0x80>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a1e      	ldr	r2, [pc, #120]	; (800ab3c <HAL_TIM_Base_Start_IT+0xe0>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d009      	beq.n	800aadc <HAL_TIM_Base_Start_IT+0x80>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a1c      	ldr	r2, [pc, #112]	; (800ab40 <HAL_TIM_Base_Start_IT+0xe4>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d004      	beq.n	800aadc <HAL_TIM_Base_Start_IT+0x80>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a1b      	ldr	r2, [pc, #108]	; (800ab44 <HAL_TIM_Base_Start_IT+0xe8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d115      	bne.n	800ab08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689a      	ldr	r2, [r3, #8]
 800aae2:	4b19      	ldr	r3, [pc, #100]	; (800ab48 <HAL_TIM_Base_Start_IT+0xec>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2b06      	cmp	r3, #6
 800aaec:	d015      	beq.n	800ab1a <HAL_TIM_Base_Start_IT+0xbe>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf4:	d011      	beq.n	800ab1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f042 0201 	orr.w	r2, r2, #1
 800ab04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab06:	e008      	b.n	800ab1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f042 0201 	orr.w	r2, r2, #1
 800ab16:	601a      	str	r2, [r3, #0]
 800ab18:	e000      	b.n	800ab1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	40010000 	.word	0x40010000
 800ab30:	40000400 	.word	0x40000400
 800ab34:	40000800 	.word	0x40000800
 800ab38:	40000c00 	.word	0x40000c00
 800ab3c:	40010400 	.word	0x40010400
 800ab40:	40001800 	.word	0x40001800
 800ab44:	40014000 	.word	0x40014000
 800ab48:	00010007 	.word	0x00010007

0800ab4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	f003 0302 	and.w	r3, r3, #2
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d122      	bne.n	800aba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d11b      	bne.n	800aba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f06f 0202 	mvn.w	r2, #2
 800ab78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f9fe 	bl	800af90 <HAL_TIM_IC_CaptureCallback>
 800ab94:	e005      	b.n	800aba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f9f0 	bl	800af7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fa01 	bl	800afa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	f003 0304 	and.w	r3, r3, #4
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	d122      	bne.n	800abfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	f003 0304 	and.w	r3, r3, #4
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d11b      	bne.n	800abfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f06f 0204 	mvn.w	r2, #4
 800abcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2202      	movs	r2, #2
 800abd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f9d4 	bl	800af90 <HAL_TIM_IC_CaptureCallback>
 800abe8:	e005      	b.n	800abf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f9c6 	bl	800af7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f9d7 	bl	800afa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	f003 0308 	and.w	r3, r3, #8
 800ac06:	2b08      	cmp	r3, #8
 800ac08:	d122      	bne.n	800ac50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	f003 0308 	and.w	r3, r3, #8
 800ac14:	2b08      	cmp	r3, #8
 800ac16:	d11b      	bne.n	800ac50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f06f 0208 	mvn.w	r2, #8
 800ac20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2204      	movs	r2, #4
 800ac26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f9aa 	bl	800af90 <HAL_TIM_IC_CaptureCallback>
 800ac3c:	e005      	b.n	800ac4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f99c 	bl	800af7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f9ad 	bl	800afa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	f003 0310 	and.w	r3, r3, #16
 800ac5a:	2b10      	cmp	r3, #16
 800ac5c:	d122      	bne.n	800aca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	f003 0310 	and.w	r3, r3, #16
 800ac68:	2b10      	cmp	r3, #16
 800ac6a:	d11b      	bne.n	800aca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f06f 0210 	mvn.w	r2, #16
 800ac74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2208      	movs	r2, #8
 800ac7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	69db      	ldr	r3, [r3, #28]
 800ac82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d003      	beq.n	800ac92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f980 	bl	800af90 <HAL_TIM_IC_CaptureCallback>
 800ac90:	e005      	b.n	800ac9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f972 	bl	800af7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f983 	bl	800afa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	f003 0301 	and.w	r3, r3, #1
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d10e      	bne.n	800acd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d107      	bne.n	800acd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f06f 0201 	mvn.w	r2, #1
 800acc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f001 fb3c 	bl	800c348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acda:	2b80      	cmp	r3, #128	; 0x80
 800acdc:	d10e      	bne.n	800acfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace8:	2b80      	cmp	r3, #128	; 0x80
 800acea:	d107      	bne.n	800acfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800acf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fb38 	bl	800b36c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad0a:	d10e      	bne.n	800ad2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad16:	2b80      	cmp	r3, #128	; 0x80
 800ad18:	d107      	bne.n	800ad2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ad22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fb2b 	bl	800b380 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad34:	2b40      	cmp	r3, #64	; 0x40
 800ad36:	d10e      	bne.n	800ad56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad42:	2b40      	cmp	r3, #64	; 0x40
 800ad44:	d107      	bne.n	800ad56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f931 	bl	800afb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	f003 0320 	and.w	r3, r3, #32
 800ad60:	2b20      	cmp	r3, #32
 800ad62:	d10e      	bne.n	800ad82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	f003 0320 	and.w	r3, r3, #32
 800ad6e:	2b20      	cmp	r3, #32
 800ad70:	d107      	bne.n	800ad82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f06f 0220 	mvn.w	r2, #32
 800ad7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 faeb 	bl	800b358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d101      	bne.n	800ada8 <HAL_TIM_ConfigClockSource+0x1c>
 800ada4:	2302      	movs	r3, #2
 800ada6:	e0dc      	b.n	800af62 <HAL_TIM_ConfigClockSource+0x1d6>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2202      	movs	r2, #2
 800adb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	4b6a      	ldr	r3, [pc, #424]	; (800af6c <HAL_TIM_ConfigClockSource+0x1e0>)
 800adc4:	4013      	ands	r3, r2
 800adc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68ba      	ldr	r2, [r7, #8]
 800add6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a64      	ldr	r2, [pc, #400]	; (800af70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	f000 80a9 	beq.w	800af36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ade4:	4a62      	ldr	r2, [pc, #392]	; (800af70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	f200 80ae 	bhi.w	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800adec:	4a61      	ldr	r2, [pc, #388]	; (800af74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	f000 80a1 	beq.w	800af36 <HAL_TIM_ConfigClockSource+0x1aa>
 800adf4:	4a5f      	ldr	r2, [pc, #380]	; (800af74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	f200 80a6 	bhi.w	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800adfc:	4a5e      	ldr	r2, [pc, #376]	; (800af78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	f000 8099 	beq.w	800af36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae04:	4a5c      	ldr	r2, [pc, #368]	; (800af78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	f200 809e 	bhi.w	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae10:	f000 8091 	beq.w	800af36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae18:	f200 8096 	bhi.w	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae20:	f000 8089 	beq.w	800af36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae28:	f200 808e 	bhi.w	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae30:	d03e      	beq.n	800aeb0 <HAL_TIM_ConfigClockSource+0x124>
 800ae32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae36:	f200 8087 	bhi.w	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae3e:	f000 8086 	beq.w	800af4e <HAL_TIM_ConfigClockSource+0x1c2>
 800ae42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae46:	d87f      	bhi.n	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae48:	2b70      	cmp	r3, #112	; 0x70
 800ae4a:	d01a      	beq.n	800ae82 <HAL_TIM_ConfigClockSource+0xf6>
 800ae4c:	2b70      	cmp	r3, #112	; 0x70
 800ae4e:	d87b      	bhi.n	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae50:	2b60      	cmp	r3, #96	; 0x60
 800ae52:	d050      	beq.n	800aef6 <HAL_TIM_ConfigClockSource+0x16a>
 800ae54:	2b60      	cmp	r3, #96	; 0x60
 800ae56:	d877      	bhi.n	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae58:	2b50      	cmp	r3, #80	; 0x50
 800ae5a:	d03c      	beq.n	800aed6 <HAL_TIM_ConfigClockSource+0x14a>
 800ae5c:	2b50      	cmp	r3, #80	; 0x50
 800ae5e:	d873      	bhi.n	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae60:	2b40      	cmp	r3, #64	; 0x40
 800ae62:	d058      	beq.n	800af16 <HAL_TIM_ConfigClockSource+0x18a>
 800ae64:	2b40      	cmp	r3, #64	; 0x40
 800ae66:	d86f      	bhi.n	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae68:	2b30      	cmp	r3, #48	; 0x30
 800ae6a:	d064      	beq.n	800af36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae6c:	2b30      	cmp	r3, #48	; 0x30
 800ae6e:	d86b      	bhi.n	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae70:	2b20      	cmp	r3, #32
 800ae72:	d060      	beq.n	800af36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae74:	2b20      	cmp	r3, #32
 800ae76:	d867      	bhi.n	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d05c      	beq.n	800af36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae7c:	2b10      	cmp	r3, #16
 800ae7e:	d05a      	beq.n	800af36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae80:	e062      	b.n	800af48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae92:	f000 f9b3 	bl	800b1fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aea4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	609a      	str	r2, [r3, #8]
      break;
 800aeae:	e04f      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aec0:	f000 f99c 	bl	800b1fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	689a      	ldr	r2, [r3, #8]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aed2:	609a      	str	r2, [r3, #8]
      break;
 800aed4:	e03c      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aee2:	461a      	mov	r2, r3
 800aee4:	f000 f90c 	bl	800b100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2150      	movs	r1, #80	; 0x50
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 f966 	bl	800b1c0 <TIM_ITRx_SetConfig>
      break;
 800aef4:	e02c      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af02:	461a      	mov	r2, r3
 800af04:	f000 f92b 	bl	800b15e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2160      	movs	r1, #96	; 0x60
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f956 	bl	800b1c0 <TIM_ITRx_SetConfig>
      break;
 800af14:	e01c      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af22:	461a      	mov	r2, r3
 800af24:	f000 f8ec 	bl	800b100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2140      	movs	r1, #64	; 0x40
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 f946 	bl	800b1c0 <TIM_ITRx_SetConfig>
      break;
 800af34:	e00c      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4619      	mov	r1, r3
 800af40:	4610      	mov	r0, r2
 800af42:	f000 f93d 	bl	800b1c0 <TIM_ITRx_SetConfig>
      break;
 800af46:	e003      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	73fb      	strb	r3, [r7, #15]
      break;
 800af4c:	e000      	b.n	800af50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800af4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af60:	7bfb      	ldrb	r3, [r7, #15]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	ffceff88 	.word	0xffceff88
 800af70:	00100040 	.word	0x00100040
 800af74:	00100030 	.word	0x00100030
 800af78:	00100020 	.word	0x00100020

0800af7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800afac:	bf00      	nop
 800afae:	370c      	adds	r7, #12
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800afc0:	bf00      	nop
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a40      	ldr	r2, [pc, #256]	; (800b0e0 <TIM_Base_SetConfig+0x114>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d013      	beq.n	800b00c <TIM_Base_SetConfig+0x40>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afea:	d00f      	beq.n	800b00c <TIM_Base_SetConfig+0x40>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a3d      	ldr	r2, [pc, #244]	; (800b0e4 <TIM_Base_SetConfig+0x118>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d00b      	beq.n	800b00c <TIM_Base_SetConfig+0x40>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a3c      	ldr	r2, [pc, #240]	; (800b0e8 <TIM_Base_SetConfig+0x11c>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d007      	beq.n	800b00c <TIM_Base_SetConfig+0x40>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a3b      	ldr	r2, [pc, #236]	; (800b0ec <TIM_Base_SetConfig+0x120>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d003      	beq.n	800b00c <TIM_Base_SetConfig+0x40>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a3a      	ldr	r2, [pc, #232]	; (800b0f0 <TIM_Base_SetConfig+0x124>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d108      	bne.n	800b01e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a2f      	ldr	r2, [pc, #188]	; (800b0e0 <TIM_Base_SetConfig+0x114>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d01f      	beq.n	800b066 <TIM_Base_SetConfig+0x9a>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b02c:	d01b      	beq.n	800b066 <TIM_Base_SetConfig+0x9a>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a2c      	ldr	r2, [pc, #176]	; (800b0e4 <TIM_Base_SetConfig+0x118>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d017      	beq.n	800b066 <TIM_Base_SetConfig+0x9a>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a2b      	ldr	r2, [pc, #172]	; (800b0e8 <TIM_Base_SetConfig+0x11c>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d013      	beq.n	800b066 <TIM_Base_SetConfig+0x9a>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a2a      	ldr	r2, [pc, #168]	; (800b0ec <TIM_Base_SetConfig+0x120>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d00f      	beq.n	800b066 <TIM_Base_SetConfig+0x9a>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a29      	ldr	r2, [pc, #164]	; (800b0f0 <TIM_Base_SetConfig+0x124>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d00b      	beq.n	800b066 <TIM_Base_SetConfig+0x9a>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a28      	ldr	r2, [pc, #160]	; (800b0f4 <TIM_Base_SetConfig+0x128>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d007      	beq.n	800b066 <TIM_Base_SetConfig+0x9a>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a27      	ldr	r2, [pc, #156]	; (800b0f8 <TIM_Base_SetConfig+0x12c>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d003      	beq.n	800b066 <TIM_Base_SetConfig+0x9a>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a26      	ldr	r2, [pc, #152]	; (800b0fc <TIM_Base_SetConfig+0x130>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d108      	bne.n	800b078 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b06c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	4313      	orrs	r3, r2
 800b076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	695b      	ldr	r3, [r3, #20]
 800b082:	4313      	orrs	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	689a      	ldr	r2, [r3, #8]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a10      	ldr	r2, [pc, #64]	; (800b0e0 <TIM_Base_SetConfig+0x114>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d00f      	beq.n	800b0c4 <TIM_Base_SetConfig+0xf8>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a12      	ldr	r2, [pc, #72]	; (800b0f0 <TIM_Base_SetConfig+0x124>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d00b      	beq.n	800b0c4 <TIM_Base_SetConfig+0xf8>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a11      	ldr	r2, [pc, #68]	; (800b0f4 <TIM_Base_SetConfig+0x128>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d007      	beq.n	800b0c4 <TIM_Base_SetConfig+0xf8>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a10      	ldr	r2, [pc, #64]	; (800b0f8 <TIM_Base_SetConfig+0x12c>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d003      	beq.n	800b0c4 <TIM_Base_SetConfig+0xf8>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a0f      	ldr	r2, [pc, #60]	; (800b0fc <TIM_Base_SetConfig+0x130>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d103      	bne.n	800b0cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	691a      	ldr	r2, [r3, #16]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	615a      	str	r2, [r3, #20]
}
 800b0d2:	bf00      	nop
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	40010000 	.word	0x40010000
 800b0e4:	40000400 	.word	0x40000400
 800b0e8:	40000800 	.word	0x40000800
 800b0ec:	40000c00 	.word	0x40000c00
 800b0f0:	40010400 	.word	0x40010400
 800b0f4:	40014000 	.word	0x40014000
 800b0f8:	40014400 	.word	0x40014400
 800b0fc:	40014800 	.word	0x40014800

0800b100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	f023 0201 	bic.w	r2, r3, #1
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b12a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	011b      	lsls	r3, r3, #4
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	4313      	orrs	r3, r2
 800b134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f023 030a 	bic.w	r3, r3, #10
 800b13c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	4313      	orrs	r3, r2
 800b144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	621a      	str	r2, [r3, #32]
}
 800b152:	bf00      	nop
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b15e:	b480      	push	{r7}
 800b160:	b087      	sub	sp, #28
 800b162:	af00      	add	r7, sp, #0
 800b164:	60f8      	str	r0, [r7, #12]
 800b166:	60b9      	str	r1, [r7, #8]
 800b168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	f023 0210 	bic.w	r2, r3, #16
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6a1b      	ldr	r3, [r3, #32]
 800b180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b188:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	031b      	lsls	r3, r3, #12
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	4313      	orrs	r3, r2
 800b192:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b19a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	011b      	lsls	r3, r3, #4
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	621a      	str	r2, [r3, #32]
}
 800b1b2:	bf00      	nop
 800b1b4:	371c      	adds	r7, #28
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4b09      	ldr	r3, [pc, #36]	; (800b1f8 <TIM_ITRx_SetConfig+0x38>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	f043 0307 	orr.w	r3, r3, #7
 800b1e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	609a      	str	r2, [r3, #8]
}
 800b1ea:	bf00      	nop
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	ffcfff8f 	.word	0xffcfff8f

0800b1fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	021a      	lsls	r2, r3, #8
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	431a      	orrs	r2, r3
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	4313      	orrs	r3, r2
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	4313      	orrs	r3, r2
 800b228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	609a      	str	r2, [r3, #8]
}
 800b230:	bf00      	nop
 800b232:	371c      	adds	r7, #28
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d101      	bne.n	800b254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b250:	2302      	movs	r3, #2
 800b252:	e06d      	b.n	800b330 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a30      	ldr	r2, [pc, #192]	; (800b33c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d004      	beq.n	800b288 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a2f      	ldr	r2, [pc, #188]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d108      	bne.n	800b29a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b28e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a20      	ldr	r2, [pc, #128]	; (800b33c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d022      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c6:	d01d      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a1d      	ldr	r2, [pc, #116]	; (800b344 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d018      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a1c      	ldr	r2, [pc, #112]	; (800b348 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d013      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a1a      	ldr	r2, [pc, #104]	; (800b34c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d00e      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a15      	ldr	r2, [pc, #84]	; (800b340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d009      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a16      	ldr	r2, [pc, #88]	; (800b350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d004      	beq.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a15      	ldr	r2, [pc, #84]	; (800b354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d10c      	bne.n	800b31e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b30a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	4313      	orrs	r3, r2
 800b314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	40010000 	.word	0x40010000
 800b340:	40010400 	.word	0x40010400
 800b344:	40000400 	.word	0x40000400
 800b348:	40000800 	.word	0x40000800
 800b34c:	40000c00 	.word	0x40000c00
 800b350:	40001800 	.word	0x40001800
 800b354:	40014000 	.word	0x40014000

0800b358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <Initialize_BM>:
//I2C_HandleTypeDef hi2c2;
uint8_t I2C2_RxBuff[BM_BUFF_SIZE] __attribute__((section(".I2C2_RxBuff")));


void Initialize_BM(BMObject* t_bm_obj)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
	memset(t_bm_obj, 0, sizeof(BMObject));
 800b39c:	2214      	movs	r2, #20
 800b39e:	2100      	movs	r1, #0
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f004 fe96 	bl	80100d2 <memset>
	t_bm_obj->i2cport = &hi2c2;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a04      	ldr	r2, [pc, #16]	; (800b3bc <Initialize_BM+0x28>)
 800b3aa:	601a      	str	r2, [r3, #0]
	t_bm_obj->addr    = BM1422AGMV_DEV_ADDR;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	221c      	movs	r2, #28
 800b3b0:	809a      	strh	r2, [r3, #4]
}
 800b3b2:	bf00      	nop
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	24000198 	.word	0x24000198

0800b3c0 <IsDevReady_BM>:

uint8_t IsDevReady_BM(BMObject* t_bm_obj)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
	uint8_t t_res = HAL_I2C_IsDeviceReady(t_bm_obj->i2cport, t_bm_obj->addr, BM_I2C_TRIALS, BM_I2C_TIMEOUT);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	8899      	ldrh	r1, [r3, #4]
 800b3d0:	2305      	movs	r3, #5
 800b3d2:	220a      	movs	r2, #10
 800b3d4:	f7fa feaa 	bl	800612c <HAL_I2C_IsDeviceReady>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73fb      	strb	r3, [r7, #15]
	return t_res;
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <Init_BM>:

uint8_t Init_BM(BMObject* t_bm_obj)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
	uint8_t t_res = HAL_I2C_Init(t_bm_obj->i2cport);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fa fbe0 	bl	8005bb8 <HAL_I2C_Init>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]
	return t_res;
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <DeInit_BM>:

uint8_t DeInit_BM(BMObject* t_bm_obj)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
	uint8_t t_res = HAL_I2C_DeInit(t_bm_obj->i2cport);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4618      	mov	r0, r3
 800b414:	f7fa fc60 	bl	8005cd8 <HAL_I2C_DeInit>
 800b418:	4603      	mov	r3, r0
 800b41a:	73fb      	strb	r3, [r7, #15]
	return t_res;
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
	...

0800b428 <Read_Data_BM>:


uint8_t Read_Data_BM(BMObject* t_bm_obj)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	75fb      	strb	r3, [r7, #23]

	//Mem_Read ver//
//	t_res = HAL_I2C_Mem_Read(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_DATAX_REG, I2C_MEMADD_SIZE_8BIT, t_buff, 6, BM_I2C_TIMEOUT);

	//DMA ver//
	t_res = HAL_I2C_Mem_Read_DMA(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_DATAX_REG, I2C_MEMADD_SIZE_8BIT, I2C2_RxBuff, 6);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6818      	ldr	r0, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	8899      	ldrh	r1, [r3, #4]
 800b43c:	2306      	movs	r3, #6
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	4b22      	ldr	r3, [pc, #136]	; (800b4cc <Read_Data_BM+0xa4>)
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	2301      	movs	r3, #1
 800b446:	2210      	movs	r2, #16
 800b448:	f7fa fd8a 	bl	8005f60 <HAL_I2C_Mem_Read_DMA>
 800b44c:	4603      	mov	r3, r0
 800b44e:	75fb      	strb	r3, [r7, #23]
	memcpy(t_buff, I2C2_RxBuff, 6);
 800b450:	4a1e      	ldr	r2, [pc, #120]	; (800b4cc <Read_Data_BM+0xa4>)
 800b452:	f107 0308 	add.w	r3, r7, #8
 800b456:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b45a:	6018      	str	r0, [r3, #0]
 800b45c:	3304      	adds	r3, #4
 800b45e:	8019      	strh	r1, [r3, #0]

    int16_t t_magX = (int16_t)(t_buff[0] | t_buff[1] << 8);
 800b460:	7a3b      	ldrb	r3, [r7, #8]
 800b462:	b21a      	sxth	r2, r3
 800b464:	7a7b      	ldrb	r3, [r7, #9]
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	b21b      	sxth	r3, r3
 800b46a:	4313      	orrs	r3, r2
 800b46c:	82bb      	strh	r3, [r7, #20]
    int16_t t_magY = (int16_t)(t_buff[2] | t_buff[3] << 8);
 800b46e:	7abb      	ldrb	r3, [r7, #10]
 800b470:	b21a      	sxth	r2, r3
 800b472:	7afb      	ldrb	r3, [r7, #11]
 800b474:	021b      	lsls	r3, r3, #8
 800b476:	b21b      	sxth	r3, r3
 800b478:	4313      	orrs	r3, r2
 800b47a:	827b      	strh	r3, [r7, #18]
    int16_t t_magZ = (int16_t)(t_buff[4] | t_buff[5] << 8);
 800b47c:	7b3b      	ldrb	r3, [r7, #12]
 800b47e:	b21a      	sxth	r2, r3
 800b480:	7b7b      	ldrb	r3, [r7, #13]
 800b482:	021b      	lsls	r3, r3, #8
 800b484:	b21b      	sxth	r3, r3
 800b486:	4313      	orrs	r3, r2
 800b488:	823b      	strh	r3, [r7, #16]

	/* NEED TO BE SCALED */
    t_bm_obj->mag_x = (float)t_magX;
 800b48a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	edc3 7a02 	vstr	s15, [r3, #8]
	t_bm_obj->mag_y = (float)t_magY;
 800b49c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b4a0:	ee07 3a90 	vmov	s15, r3
 800b4a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	edc3 7a03 	vstr	s15, [r3, #12]
	t_bm_obj->mag_z = (float)t_magZ;
 800b4ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b4b2:	ee07 3a90 	vmov	s15, r3
 800b4b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	edc3 7a04 	vstr	s15, [r3, #16]

	return t_res;
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	30002000 	.word	0x30002000

0800b4d0 <Write_Data_BM>:


uint8_t Write_Data_BM(BMObject* t_bm_obj)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af04      	add	r7, sp, #16
 800b4d6:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	73fb      	strb	r3, [r7, #15]

	uint8_t conf_1 = BM1422AGMV_CNTL1_VALUE;
 800b4dc:	23d8      	movs	r3, #216	; 0xd8
 800b4de:	73bb      	strb	r3, [r7, #14]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL1_REG, I2C_MEMADD_SIZE_8BIT, &conf_1, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6818      	ldr	r0, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	8899      	ldrh	r1, [r3, #4]
 800b4e8:	2305      	movs	r3, #5
 800b4ea:	9302      	str	r3, [sp, #8]
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	9301      	str	r3, [sp, #4]
 800b4f0:	f107 030e 	add.w	r3, r7, #14
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	221b      	movs	r2, #27
 800b4fa:	f7fa fc1d 	bl	8005d38 <HAL_I2C_Mem_Write>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_2 = BM1422AGMV_CNTL2_VALUE;
 800b502:	2300      	movs	r3, #0
 800b504:	737b      	strb	r3, [r7, #13]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL2_REG, I2C_MEMADD_SIZE_8BIT, &conf_2, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6818      	ldr	r0, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	8899      	ldrh	r1, [r3, #4]
 800b50e:	2305      	movs	r3, #5
 800b510:	9302      	str	r3, [sp, #8]
 800b512:	2301      	movs	r3, #1
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	f107 030d 	add.w	r3, r7, #13
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	2301      	movs	r3, #1
 800b51e:	221c      	movs	r2, #28
 800b520:	f7fa fc0a 	bl	8005d38 <HAL_I2C_Mem_Write>
 800b524:	4603      	mov	r3, r0
 800b526:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_4 = BM1422AGMV_CNTL4_H_VALUE;
 800b528:	2300      	movs	r3, #0
 800b52a:	733b      	strb	r3, [r7, #12]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL4_REG_H, I2C_MEMADD_SIZE_8BIT, &conf_4, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6818      	ldr	r0, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	8899      	ldrh	r1, [r3, #4]
 800b534:	2305      	movs	r3, #5
 800b536:	9302      	str	r3, [sp, #8]
 800b538:	2301      	movs	r3, #1
 800b53a:	9301      	str	r3, [sp, #4]
 800b53c:	f107 030c 	add.w	r3, r7, #12
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	2301      	movs	r3, #1
 800b544:	225d      	movs	r2, #93	; 0x5d
 800b546:	f7fa fbf7 	bl	8005d38 <HAL_I2C_Mem_Write>
 800b54a:	4603      	mov	r3, r0
 800b54c:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_5 = BM1422AGMV_CNTL4_L_VALUE;
 800b54e:	2300      	movs	r3, #0
 800b550:	72fb      	strb	r3, [r7, #11]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL4_REG_L, I2C_MEMADD_SIZE_8BIT, &conf_5, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6818      	ldr	r0, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	8899      	ldrh	r1, [r3, #4]
 800b55a:	2305      	movs	r3, #5
 800b55c:	9302      	str	r3, [sp, #8]
 800b55e:	2301      	movs	r3, #1
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	f107 030b 	add.w	r3, r7, #11
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	2301      	movs	r3, #1
 800b56a:	225c      	movs	r2, #92	; 0x5c
 800b56c:	f7fa fbe4 	bl	8005d38 <HAL_I2C_Mem_Write>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]


    // CNTL3 should be set at LAST //
    uint8_t conf_3 = BM1422AGMV_CNTL3_VALUE;
 800b574:	2340      	movs	r3, #64	; 0x40
 800b576:	72bb      	strb	r3, [r7, #10]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL3_REG, I2C_MEMADD_SIZE_8BIT, &conf_3, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6818      	ldr	r0, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	8899      	ldrh	r1, [r3, #4]
 800b580:	2305      	movs	r3, #5
 800b582:	9302      	str	r3, [sp, #8]
 800b584:	2301      	movs	r3, #1
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	f107 030a 	add.w	r3, r7, #10
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	2301      	movs	r3, #1
 800b590:	221d      	movs	r2, #29
 800b592:	f7fa fbd1 	bl	8005d38 <HAL_I2C_Mem_Write>
 800b596:	4603      	mov	r3, r0
 800b598:	73fb      	strb	r3, [r7, #15]


    return t_res;
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <Assemble_SDO>:
	default:			return 0;		break;
	}
}

static void Assemble_SDO(SDOinfo* t_do_addr, uint8_t t_data_type)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	70fb      	strb	r3, [r7, #3]
	SDOinfo temp = t_data_type;
 800b5b0:	78fb      	ldrb	r3, [r7, #3]
 800b5b2:	73fb      	strb	r3, [r7, #15]
 800b5b4:	7bfa      	ldrb	r2, [r7, #15]
	memcpy(t_do_addr, &temp, sizeof(SDOinfo));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	701a      	strb	r2, [r3, #0]
}
 800b5ba:	bf00      	nop
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <Assemble_PDO>:

static void Assemble_PDO(PDOinfo* t_do_addr, uint8_t t_data_type, uint8_t t_num_of_data)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	70fb      	strb	r3, [r7, #3]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	70bb      	strb	r3, [r7, #2]
	PDOinfo temp = {t_data_type, t_num_of_data};
 800b5d6:	78fb      	ldrb	r3, [r7, #3]
 800b5d8:	733b      	strb	r3, [r7, #12]
 800b5da:	78bb      	ldrb	r3, [r7, #2]
 800b5dc:	737b      	strb	r3, [r7, #13]
 800b5de:	89ba      	ldrh	r2, [r7, #12]
	memcpy(t_do_addr, &temp, sizeof(PDOinfo));
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	801a      	strh	r2, [r3, #0]
}
 800b5e4:	bf00      	nop
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <Create_SDOTable_ObjDictionary>:
   |_/_/ \_\___/____|___|

*/

void Create_SDOTable_ObjDictionary()
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	af00      	add	r7, sp, #0
	//********************************************************************************//
	//						|	  Task_ID	  |			SDO_ID			| DATA_TYPE | //
	//********************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_STATE],  	    			UINT8_T);
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	48c2      	ldr	r0, [pc, #776]	; (800b900 <Create_SDOTable_ObjDictionary+0x310>)
 800b5f8:	f7ff ffd4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_STATE],  	    			UINT8_T);
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	48c1      	ldr	r0, [pc, #772]	; (800b904 <Create_SDOTable_ObjDictionary+0x314>)
 800b600:	f7ff ffd0 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_ROUTINE],  				UINT8_T);
 800b604:	2101      	movs	r1, #1
 800b606:	48c0      	ldr	r0, [pc, #768]	; (800b908 <Create_SDOTable_ObjDictionary+0x318>)
 800b608:	f7ff ffcc 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_ROUTINE],  				UINT8_T);
 800b60c:	2101      	movs	r1, #1
 800b60e:	48bf      	ldr	r0, [pc, #764]	; (800b90c <Create_SDOTable_ObjDictionary+0x31c>)
 800b610:	f7ff ffc8 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_NAME],  						STRING10);
 800b614:	2109      	movs	r1, #9
 800b616:	48be      	ldr	r0, [pc, #760]	; (800b910 <Create_SDOTable_ObjDictionary+0x320>)
 800b618:	f7ff ffc4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_POLE_PAIR],  					UINT8_T);
 800b61c:	2101      	movs	r1, #1
 800b61e:	48bd      	ldr	r0, [pc, #756]	; (800b914 <Create_SDOTable_ObjDictionary+0x324>)
 800b620:	f7ff ffc0 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ENCODER_RESOLUTION],  			UINT16_T);
 800b624:	2102      	movs	r1, #2
 800b626:	48bc      	ldr	r0, [pc, #752]	; (800b918 <Create_SDOTable_ObjDictionary+0x328>)
 800b628:	f7ff ffbc 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GEAR_RATIO],  					FLOAT32_T);
 800b62c:	2107      	movs	r1, #7
 800b62e:	48bb      	ldr	r0, [pc, #748]	; (800b91c <Create_SDOTable_ObjDictionary+0x32c>)
 800b630:	f7ff ffb8 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TORQUE_CONSTANT],  			FLOAT32_T);
 800b634:	2107      	movs	r1, #7
 800b636:	48ba      	ldr	r0, [pc, #744]	; (800b920 <Create_SDOTable_ObjDictionary+0x330>)
 800b638:	f7ff ffb4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_VELOCITY_CONSTANT],  			FLOAT32_T);
 800b63c:	2107      	movs	r1, #7
 800b63e:	48b9      	ldr	r0, [pc, #740]	; (800b924 <Create_SDOTable_ObjDictionary+0x334>)
 800b640:	f7ff ffb0 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_PEAK_CURRENT_LIMIT],  			FLOAT32_T);
 800b644:	2107      	movs	r1, #7
 800b646:	48b8      	ldr	r0, [pc, #736]	; (800b928 <Create_SDOTable_ObjDictionary+0x338>)
 800b648:	f7ff ffac 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CONTINUOUS_CURRENT_LIMIT],  	FLOAT32_T);
 800b64c:	2107      	movs	r1, #7
 800b64e:	48b7      	ldr	r0, [pc, #732]	; (800b92c <Create_SDOTable_ObjDictionary+0x33c>)
 800b650:	f7ff ffa8 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MAX_VELOCITY],		  			FLOAT32_T);
 800b654:	2107      	movs	r1, #7
 800b656:	48b6      	ldr	r0, [pc, #728]	; (800b930 <Create_SDOTable_ObjDictionary+0x340>)
 800b658:	f7ff ffa4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_COMMUTATION_DUTY],  			UINT16_T);
 800b65c:	2102      	movs	r1, #2
 800b65e:	48b5      	ldr	r0, [pc, #724]	; (800b934 <Create_SDOTable_ObjDictionary+0x344>)
 800b660:	f7ff ffa0 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_USER_DIRECTION],  				FLOAT32_T);
 800b664:	2107      	movs	r1, #7
 800b666:	48b4      	ldr	r0, [pc, #720]	; (800b938 <Create_SDOTable_ObjDictionary+0x348>)
 800b668:	f7ff ff9c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ELEC_SYSTEM_ID_MAG],  			FLOAT32_T);
 800b66c:	2107      	movs	r1, #7
 800b66e:	48b3      	ldr	r0, [pc, #716]	; (800b93c <Create_SDOTable_ObjDictionary+0x34c>)
 800b670:	f7ff ff98 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_RESISTANCE],  		FLOAT32_T);
 800b674:	2107      	movs	r1, #7
 800b676:	48b2      	ldr	r0, [pc, #712]	; (800b940 <Create_SDOTable_ObjDictionary+0x350>)
 800b678:	f7ff ff94 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_INDUCTANCE],  		FLOAT32_T);
 800b67c:	2107      	movs	r1, #7
 800b67e:	48b1      	ldr	r0, [pc, #708]	; (800b944 <Create_SDOTable_ObjDictionary+0x354>)
 800b680:	f7ff ff90 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_VELOCITY],  			FLOAT32_T);
 800b684:	2107      	movs	r1, #7
 800b686:	48b0      	ldr	r0, [pc, #704]	; (800b948 <Create_SDOTable_ObjDictionary+0x358>)
 800b688:	f7ff ff8c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_GAIN_PCTG],  			UINT8_T);
 800b68c:	2101      	movs	r1, #1
 800b68e:	48af      	ldr	r0, [pc, #700]	; (800b94c <Create_SDOTable_ObjDictionary+0x35c>)
 800b690:	f7ff ff88 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CURRENT_CTRL_BW_RAD],  		FLOAT32_T);
 800b694:	2107      	movs	r1, #7
 800b696:	48ae      	ldr	r0, [pc, #696]	; (800b950 <Create_SDOTable_ObjDictionary+0x360>)
 800b698:	f7ff ff84 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_INERTIA],  					FLOAT32_T);
 800b69c:	2107      	movs	r1, #7
 800b69e:	48ad      	ldr	r0, [pc, #692]	; (800b954 <Create_SDOTable_ObjDictionary+0x364>)
 800b6a0:	f7ff ff80 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_DAMPING_COEF],  				FLOAT32_T);
 800b6a4:	2107      	movs	r1, #7
 800b6a6:	48ac      	ldr	r0, [pc, #688]	; (800b958 <Create_SDOTable_ObjDictionary+0x368>)
 800b6a8:	f7ff ff7c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_A],  				FLOAT32_T);
 800b6ac:	2107      	movs	r1, #7
 800b6ae:	48ab      	ldr	r0, [pc, #684]	; (800b95c <Create_SDOTable_ObjDictionary+0x36c>)
 800b6b0:	f7ff ff78 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_B],  				FLOAT32_T);
 800b6b4:	2107      	movs	r1, #7
 800b6b6:	48aa      	ldr	r0, [pc, #680]	; (800b960 <Create_SDOTable_ObjDictionary+0x370>)
 800b6b8:	f7ff ff74 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_ID_INFO],  			FLOAT32_T);
 800b6bc:	2107      	movs	r1, #7
 800b6be:	48a9      	ldr	r0, [pc, #676]	; (800b964 <Create_SDOTable_ObjDictionary+0x374>)
 800b6c0:	f7ff ff70 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_LUT_INFO],  			FLOAT32_T);
 800b6c4:	2107      	movs	r1, #7
 800b6c6:	48a8      	ldr	r0, [pc, #672]	; (800b968 <Create_SDOTable_ObjDictionary+0x378>)
 800b6c8:	f7ff ff6c 	bl	800b5a4 <Assemble_SDO>




	/*Joint Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_STATE],  					UINT8_T);
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	48a7      	ldr	r0, [pc, #668]	; (800b96c <Create_SDOTable_ObjDictionary+0x37c>)
 800b6d0:	f7ff ff68 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_STATE],  					UINT8_T);
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	48a6      	ldr	r0, [pc, #664]	; (800b970 <Create_SDOTable_ObjDictionary+0x380>)
 800b6d8:	f7ff ff64 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_ROUTINE], 					UINT8_T);
 800b6dc:	2101      	movs	r1, #1
 800b6de:	48a5      	ldr	r0, [pc, #660]	; (800b974 <Create_SDOTable_ObjDictionary+0x384>)
 800b6e0:	f7ff ff60 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_ROUTINE], 					UINT8_T);
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	48a4      	ldr	r0, [pc, #656]	; (800b978 <Create_SDOTable_ObjDictionary+0x388>)
 800b6e8:	f7ff ff5c 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR_LENGTH],	 		UINT8_T);
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	48a3      	ldr	r0, [pc, #652]	; (800b97c <Create_SDOTable_ObjDictionary+0x38c>)
 800b6f0:	f7ff ff58 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR_LENGTH],		UINT8_T);
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	48a2      	ldr	r0, [pc, #648]	; (800b980 <Create_SDOTable_ObjDictionary+0x390>)
 800b6f8:	f7ff ff54 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR],	  			FLOAT32_T);
 800b6fc:	2107      	movs	r1, #7
 800b6fe:	48a1      	ldr	r0, [pc, #644]	; (800b984 <Create_SDOTable_ObjDictionary+0x394>)
 800b700:	f7ff ff50 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR],	  			FLOAT32_T);
 800b704:	2107      	movs	r1, #7
 800b706:	48a0      	ldr	r0, [pc, #640]	; (800b988 <Create_SDOTable_ObjDictionary+0x398>)
 800b708:	f7ff ff4c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_SATURATION],	  			FLOAT32_T);
 800b70c:	2107      	movs	r1, #7
 800b70e:	489f      	ldr	r0, [pc, #636]	; (800b98c <Create_SDOTable_ObjDictionary+0x39c>)
 800b710:	f7ff ff48 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_STIFFNESS],	  	FLOAT32_T);
 800b714:	2107      	movs	r1, #7
 800b716:	489e      	ldr	r0, [pc, #632]	; (800b990 <Create_SDOTable_ObjDictionary+0x3a0>)
 800b718:	f7ff ff44 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_DAMPER],	  		FLOAT32_T);
 800b71c:	2107      	movs	r1, #7
 800b71e:	489d      	ldr	r0, [pc, #628]	; (800b994 <Create_SDOTable_ObjDictionary+0x3a4>)
 800b720:	f7ff ff40 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_PERIODIC_SIG_INFO],	FLOAT32_T);
 800b724:	2107      	movs	r1, #7
 800b726:	489c      	ldr	r0, [pc, #624]	; (800b998 <Create_SDOTable_ObjDictionary+0x3a8>)
 800b728:	f7ff ff3c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_PERIODIC_SIG_INFO],	FLOAT32_T);
 800b72c:	2107      	movs	r1, #7
 800b72e:	489b      	ldr	r0, [pc, #620]	; (800b99c <Create_SDOTable_ObjDictionary+0x3ac>)
 800b730:	f7ff ff38 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_BW],						FLOAT32_T);
 800b734:	2107      	movs	r1, #7
 800b736:	489a      	ldr	r0, [pc, #616]	; (800b9a0 <Create_SDOTable_ObjDictionary+0x3b0>)
 800b738:	f7ff ff34 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_NUM],					FLOAT32_T);
 800b73c:	2107      	movs	r1, #7
 800b73e:	4899      	ldr	r0, [pc, #612]	; (800b9a4 <Create_SDOTable_ObjDictionary+0x3b4>)
 800b740:	f7ff ff30 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_DEN],					FLOAT32_T);
 800b744:	2107      	movs	r1, #7
 800b746:	4898      	ldr	r0, [pc, #608]	; (800b9a8 <Create_SDOTable_ObjDictionary+0x3b8>)
 800b748:	f7ff ff2c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_NUM],					FLOAT32_T);
 800b74c:	2107      	movs	r1, #7
 800b74e:	4897      	ldr	r0, [pc, #604]	; (800b9ac <Create_SDOTable_ObjDictionary+0x3bc>)
 800b750:	f7ff ff28 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_DEN],					FLOAT32_T);
 800b754:	2107      	movs	r1, #7
 800b756:	4896      	ldr	r0, [pc, #600]	; (800b9b0 <Create_SDOTable_ObjDictionary+0x3c0>)
 800b758:	f7ff ff24 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_SATURATION],				FLOAT32_T);
 800b75c:	2107      	movs	r1, #7
 800b75e:	4895      	ldr	r0, [pc, #596]	; (800b9b4 <Create_SDOTable_ObjDictionary+0x3c4>)
 800b760:	f7ff ff20 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_BW],				FLOAT32_T);
 800b764:	2107      	movs	r1, #7
 800b766:	4894      	ldr	r0, [pc, #592]	; (800b9b8 <Create_SDOTable_ObjDictionary+0x3c8>)
 800b768:	f7ff ff1c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_P_GAIN],			FLOAT32_T);
 800b76c:	2107      	movs	r1, #7
 800b76e:	4893      	ldr	r0, [pc, #588]	; (800b9bc <Create_SDOTable_ObjDictionary+0x3cc>)
 800b770:	f7ff ff18 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_I_GAIN],			FLOAT32_T);
 800b774:	2107      	movs	r1, #7
 800b776:	4892      	ldr	r0, [pc, #584]	; (800b9c0 <Create_SDOTable_ObjDictionary+0x3d0>)
 800b778:	f7ff ff14 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_INPUT_PENALTY],	FLOAT32_T);
 800b77c:	2107      	movs	r1, #7
 800b77e:	4891      	ldr	r0, [pc, #580]	; (800b9c4 <Create_SDOTable_ObjDictionary+0x3d4>)
 800b780:	f7ff ff10 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_P_GAIN],			FLOAT32_T);
 800b784:	2107      	movs	r1, #7
 800b786:	4890      	ldr	r0, [pc, #576]	; (800b9c8 <Create_SDOTable_ObjDictionary+0x3d8>)
 800b788:	f7ff ff0c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_D_GAIN],			FLOAT32_T);
 800b78c:	2107      	movs	r1, #7
 800b78e:	488f      	ldr	r0, [pc, #572]	; (800b9cc <Create_SDOTable_ObjDictionary+0x3dc>)
 800b790:	f7ff ff08 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_MID_CTRL_SATURATION],			FLOAT32_T);
 800b794:	2107      	movs	r1, #7
 800b796:	488e      	ldr	r0, [pc, #568]	; (800b9d0 <Create_SDOTable_ObjDictionary+0x3e0>)
 800b798:	f7ff ff04 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_INCENCODER_SET_OFFSET],		UINT8_T);
 800b79c:	2101      	movs	r1, #1
 800b79e:	488d      	ldr	r0, [pc, #564]	; (800b9d4 <Create_SDOTable_ObjDictionary+0x3e4>)
 800b7a0:	f7ff ff00 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_SET_OFFSET],		UINT8_T);
 800b7a4:	2101      	movs	r1, #1
 800b7a6:	488c      	ldr	r0, [pc, #560]	; (800b9d8 <Create_SDOTable_ObjDictionary+0x3e8>)
 800b7a8:	f7ff fefc 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_CHANGE_DIRECTION],	UINT8_T);
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	488b      	ldr	r0, [pc, #556]	; (800b9dc <Create_SDOTable_ObjDictionary+0x3ec>)
 800b7b0:	f7ff fef8 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFFNESS],				FLOAT32_T);
 800b7b4:	2107      	movs	r1, #7
 800b7b6:	488a      	ldr	r0, [pc, #552]	; (800b9e0 <Create_SDOTable_ObjDictionary+0x3f0>)
 800b7b8:	f7ff fef4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPER],					FLOAT32_T);
 800b7bc:	2107      	movs	r1, #7
 800b7be:	4889      	ldr	r0, [pc, #548]	; (800b9e4 <Create_SDOTable_ObjDictionary+0x3f4>)
 800b7c0:	f7ff fef0 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPED_RANGE],				FLOAT32_T);
 800b7c4:	2107      	movs	r1, #7
 800b7c6:	4888      	ldr	r0, [pc, #544]	; (800b9e8 <Create_SDOTable_ObjDictionary+0x3f8>)
 800b7c8:	f7ff feec 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFF_RANGE],				FLOAT32_T);
 800b7cc:	2107      	movs	r1, #7
 800b7ce:	4887      	ldr	r0, [pc, #540]	; (800b9ec <Create_SDOTable_ObjDictionary+0x3fc>)
 800b7d0:	f7ff fee8 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_UPPER_LIMIT],			UINT8_T);
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4886      	ldr	r0, [pc, #536]	; (800b9f0 <Create_SDOTable_ObjDictionary+0x400>)
 800b7d8:	f7ff fee4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_LOWER_LIMIT],			UINT8_T);
 800b7dc:	2101      	movs	r1, #1
 800b7de:	4885      	ldr	r0, [pc, #532]	; (800b9f4 <Create_SDOTable_ObjDictionary+0x404>)
 800b7e0:	f7ff fee0 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_SATURATION],				FLOAT32_T);
 800b7e4:	2107      	movs	r1, #7
 800b7e6:	4884      	ldr	r0, [pc, #528]	; (800b9f8 <Create_SDOTable_ObjDictionary+0x408>)
 800b7e8:	f7ff fedc 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_NUM],				FLOAT32_T);
 800b7ec:	2107      	movs	r1, #7
 800b7ee:	4883      	ldr	r0, [pc, #524]	; (800b9fc <Create_SDOTable_ObjDictionary+0x40c>)
 800b7f0:	f7ff fed8 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_DEN],				FLOAT32_T);
 800b7f4:	2107      	movs	r1, #7
 800b7f6:	4882      	ldr	r0, [pc, #520]	; (800ba00 <Create_SDOTable_ObjDictionary+0x410>)
 800b7f8:	f7ff fed4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR],			UINT8_T);
 800b7fc:	2101      	movs	r1, #1
 800b7fe:	4881      	ldr	r0, [pc, #516]	; (800ba04 <Create_SDOTable_ObjDictionary+0x414>)
 800b800:	f7ff fed0 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR_LEAD_LAG],	FLOAT32_T);
 800b804:	2107      	movs	r1, #7
 800b806:	4880      	ldr	r0, [pc, #512]	; (800ba08 <Create_SDOTable_ObjDictionary+0x418>)
 800b808:	f7ff fecc 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ENCODER_RESOLUTION],			UINT16_T);
 800b80c:	2102      	movs	r1, #2
 800b80e:	487f      	ldr	r0, [pc, #508]	; (800ba0c <Create_SDOTable_ObjDictionary+0x41c>)
 800b810:	f7ff fec8 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_SBS_INFO],			FLOAT32_T);
 800b814:	2107      	movs	r1, #7
 800b816:	487e      	ldr	r0, [pc, #504]	; (800ba10 <Create_SDOTable_ObjDictionary+0x420>)
 800b818:	f7ff fec4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_VERIFICATION_MAG],	FLOAT32_T);
 800b81c:	2107      	movs	r1, #7
 800b81e:	487d      	ldr	r0, [pc, #500]	; (800ba14 <Create_SDOTable_ObjDictionary+0x424>)
 800b820:	f7ff fec0 	bl	800b5a4 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_MODE_IDX],	UINT8_T);
 800b824:	2101      	movs	r1, #1
 800b826:	487c      	ldr	r0, [pc, #496]	; (800ba18 <Create_SDOTable_ObjDictionary+0x428>)
 800b828:	f7ff febc 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_TMAX],		INT16_T);
 800b82c:	2105      	movs	r1, #5
 800b82e:	487b      	ldr	r0, [pc, #492]	; (800ba1c <Create_SDOTable_ObjDictionary+0x42c>)
 800b830:	f7ff feb8 	bl	800b5a4 <Assemble_SDO>



	/*MSG Handler Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_STATE],  	    UINT8_T);
 800b834:	2101      	movs	r1, #1
 800b836:	487a      	ldr	r0, [pc, #488]	; (800ba20 <Create_SDOTable_ObjDictionary+0x430>)
 800b838:	f7ff feb4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_STATE],  	    UINT8_T);
 800b83c:	2101      	movs	r1, #1
 800b83e:	4879      	ldr	r0, [pc, #484]	; (800ba24 <Create_SDOTable_ObjDictionary+0x434>)
 800b840:	f7ff feb0 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_ROUTINE],  		UINT8_T);
 800b844:	2101      	movs	r1, #1
 800b846:	4878      	ldr	r0, [pc, #480]	; (800ba28 <Create_SDOTable_ObjDictionary+0x438>)
 800b848:	f7ff feac 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_ROUTINE],  		UINT8_T);
 800b84c:	2101      	movs	r1, #1
 800b84e:	4877      	ldr	r0, [pc, #476]	; (800ba2c <Create_SDOTable_ObjDictionary+0x43c>)
 800b850:	f7ff fea8 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_PDO_LIST], 			UINT16_T);
 800b854:	2102      	movs	r1, #2
 800b856:	4876      	ldr	r0, [pc, #472]	; (800ba30 <Create_SDOTable_ObjDictionary+0x440>)
 800b858:	f7ff fea4 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_MS_ENUM],  			UINT8_T);
 800b85c:	2101      	movs	r1, #1
 800b85e:	4875      	ldr	r0, [pc, #468]	; (800ba34 <Create_SDOTable_ObjDictionary+0x444>)
 800b860:	f7ff fea0 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_ONOFF],  	UINT8_T);
 800b864:	2101      	movs	r1, #1
 800b866:	4874      	ldr	r0, [pc, #464]	; (800ba38 <Create_SDOTable_ObjDictionary+0x448>)
 800b868:	f7ff fe9c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_COMMAND],  	UINT8_T);
 800b86c:	2101      	movs	r1, #1
 800b86e:	4873      	ldr	r0, [pc, #460]	; (800ba3c <Create_SDOTable_ObjDictionary+0x44c>)
 800b870:	f7ff fe98 	bl	800b5a4 <Assemble_SDO>

	/*IMU Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_STATE],  		UINT8_T);
 800b874:	2101      	movs	r1, #1
 800b876:	4872      	ldr	r0, [pc, #456]	; (800ba40 <Create_SDOTable_ObjDictionary+0x450>)
 800b878:	f7ff fe94 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_STATE],  		UINT8_T);
 800b87c:	2101      	movs	r1, #1
 800b87e:	4871      	ldr	r0, [pc, #452]	; (800ba44 <Create_SDOTable_ObjDictionary+0x454>)
 800b880:	f7ff fe90 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_ROUTINE],  	    UINT8_T);
 800b884:	2101      	movs	r1, #1
 800b886:	4870      	ldr	r0, [pc, #448]	; (800ba48 <Create_SDOTable_ObjDictionary+0x458>)
 800b888:	f7ff fe8c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_ROUTINE],  	    UINT8_T);
 800b88c:	2101      	movs	r1, #1
 800b88e:	486f      	ldr	r0, [pc, #444]	; (800ba4c <Create_SDOTable_ObjDictionary+0x45c>)
 800b890:	f7ff fe88 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_FOR_TEST],  			UINT16_T);
 800b894:	2102      	movs	r1, #2
 800b896:	486e      	ldr	r0, [pc, #440]	; (800ba50 <Create_SDOTable_ObjDictionary+0x460>)
 800b898:	f7ff fe84 	bl	800b5a4 <Assemble_SDO>


	/*SYSMNGT Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_STATE],  	UINT8_T);
 800b89c:	2101      	movs	r1, #1
 800b89e:	486d      	ldr	r0, [pc, #436]	; (800ba54 <Create_SDOTable_ObjDictionary+0x464>)
 800b8a0:	f7ff fe80 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_STATE],  	UINT8_T);
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	486c      	ldr	r0, [pc, #432]	; (800ba58 <Create_SDOTable_ObjDictionary+0x468>)
 800b8a8:	f7ff fe7c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_ROUTINE],  	UINT8_T);
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	486b      	ldr	r0, [pc, #428]	; (800ba5c <Create_SDOTable_ObjDictionary+0x46c>)
 800b8b0:	f7ff fe78 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_ROUTINE],  	UINT8_T);
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	486a      	ldr	r0, [pc, #424]	; (800ba60 <Create_SDOTable_ObjDictionary+0x470>)
 800b8b8:	f7ff fe74 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_FOR_TEST],  		UINT16_T);
 800b8bc:	2102      	movs	r1, #2
 800b8be:	4869      	ldr	r0, [pc, #420]	; (800ba64 <Create_SDOTable_ObjDictionary+0x474>)
 800b8c0:	f7ff fe70 	bl	800b5a4 <Assemble_SDO>


	/*EXTDEV Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_STATE],  		UINT8_T);
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	4868      	ldr	r0, [pc, #416]	; (800ba68 <Create_SDOTable_ObjDictionary+0x478>)
 800b8c8:	f7ff fe6c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_STATE],  		UINT8_T);
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	4867      	ldr	r0, [pc, #412]	; (800ba6c <Create_SDOTable_ObjDictionary+0x47c>)
 800b8d0:	f7ff fe68 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_ROUTINE],  	UINT8_T);
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	4866      	ldr	r0, [pc, #408]	; (800ba70 <Create_SDOTable_ObjDictionary+0x480>)
 800b8d8:	f7ff fe64 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_ROUTINE],  	UINT8_T);
 800b8dc:	2101      	movs	r1, #1
 800b8de:	4865      	ldr	r0, [pc, #404]	; (800ba74 <Create_SDOTable_ObjDictionary+0x484>)
 800b8e0:	f7ff fe60 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_LENGTH],  	FLOAT32_T);
 800b8e4:	2107      	movs	r1, #7
 800b8e6:	4864      	ldr	r0, [pc, #400]	; (800ba78 <Create_SDOTable_ObjDictionary+0x488>)
 800b8e8:	f7ff fe5c 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_DIRECT],  	UINT8_T);
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	4863      	ldr	r0, [pc, #396]	; (800ba7c <Create_SDOTable_ObjDictionary+0x48c>)
 800b8f0:	f7ff fe58 	bl	800b5a4 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_FOR_TEST],  		INT16_T);
 800b8f4:	2105      	movs	r1, #5
 800b8f6:	4862      	ldr	r0, [pc, #392]	; (800ba80 <Create_SDOTable_ObjDictionary+0x490>)
 800b8f8:	f7ff fe54 	bl	800b5a4 <Assemble_SDO>
}
 800b8fc:	bf00      	nop
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	2400037c 	.word	0x2400037c
 800b904:	2400037d 	.word	0x2400037d
 800b908:	2400037e 	.word	0x2400037e
 800b90c:	2400037f 	.word	0x2400037f
 800b910:	24000380 	.word	0x24000380
 800b914:	24000381 	.word	0x24000381
 800b918:	24000382 	.word	0x24000382
 800b91c:	24000383 	.word	0x24000383
 800b920:	24000384 	.word	0x24000384
 800b924:	24000385 	.word	0x24000385
 800b928:	24000386 	.word	0x24000386
 800b92c:	24000387 	.word	0x24000387
 800b930:	24000388 	.word	0x24000388
 800b934:	24000389 	.word	0x24000389
 800b938:	2400038a 	.word	0x2400038a
 800b93c:	2400038b 	.word	0x2400038b
 800b940:	2400038c 	.word	0x2400038c
 800b944:	2400038d 	.word	0x2400038d
 800b948:	2400038e 	.word	0x2400038e
 800b94c:	2400038f 	.word	0x2400038f
 800b950:	24000390 	.word	0x24000390
 800b954:	24000391 	.word	0x24000391
 800b958:	24000392 	.word	0x24000392
 800b95c:	24000393 	.word	0x24000393
 800b960:	24000394 	.word	0x24000394
 800b964:	24000395 	.word	0x24000395
 800b968:	24000396 	.word	0x24000396
 800b96c:	240003b8 	.word	0x240003b8
 800b970:	240003b9 	.word	0x240003b9
 800b974:	240003ba 	.word	0x240003ba
 800b978:	240003bb 	.word	0x240003bb
 800b97c:	240003bc 	.word	0x240003bc
 800b980:	240003bd 	.word	0x240003bd
 800b984:	240003be 	.word	0x240003be
 800b988:	240003bf 	.word	0x240003bf
 800b98c:	240003c0 	.word	0x240003c0
 800b990:	240003c1 	.word	0x240003c1
 800b994:	240003c2 	.word	0x240003c2
 800b998:	240003c4 	.word	0x240003c4
 800b99c:	240003c5 	.word	0x240003c5
 800b9a0:	240003c6 	.word	0x240003c6
 800b9a4:	240003c7 	.word	0x240003c7
 800b9a8:	240003c8 	.word	0x240003c8
 800b9ac:	240003c9 	.word	0x240003c9
 800b9b0:	240003ca 	.word	0x240003ca
 800b9b4:	240003cb 	.word	0x240003cb
 800b9b8:	240003cc 	.word	0x240003cc
 800b9bc:	240003cd 	.word	0x240003cd
 800b9c0:	240003ce 	.word	0x240003ce
 800b9c4:	240003cf 	.word	0x240003cf
 800b9c8:	240003d0 	.word	0x240003d0
 800b9cc:	240003d1 	.word	0x240003d1
 800b9d0:	240003d2 	.word	0x240003d2
 800b9d4:	240003d3 	.word	0x240003d3
 800b9d8:	240003d4 	.word	0x240003d4
 800b9dc:	240003d5 	.word	0x240003d5
 800b9e0:	240003d6 	.word	0x240003d6
 800b9e4:	240003d7 	.word	0x240003d7
 800b9e8:	240003d8 	.word	0x240003d8
 800b9ec:	240003d9 	.word	0x240003d9
 800b9f0:	240003da 	.word	0x240003da
 800b9f4:	240003db 	.word	0x240003db
 800b9f8:	240003dc 	.word	0x240003dc
 800b9fc:	240003dd 	.word	0x240003dd
 800ba00:	240003de 	.word	0x240003de
 800ba04:	240003df 	.word	0x240003df
 800ba08:	240003e0 	.word	0x240003e0
 800ba0c:	240003e1 	.word	0x240003e1
 800ba10:	240003e2 	.word	0x240003e2
 800ba14:	240003e3 	.word	0x240003e3
 800ba18:	240003e8 	.word	0x240003e8
 800ba1c:	240003e9 	.word	0x240003e9
 800ba20:	240003f4 	.word	0x240003f4
 800ba24:	240003f5 	.word	0x240003f5
 800ba28:	240003f6 	.word	0x240003f6
 800ba2c:	240003f7 	.word	0x240003f7
 800ba30:	240003f8 	.word	0x240003f8
 800ba34:	240003f9 	.word	0x240003f9
 800ba38:	240003fa 	.word	0x240003fa
 800ba3c:	240003fb 	.word	0x240003fb
 800ba40:	24000430 	.word	0x24000430
 800ba44:	24000431 	.word	0x24000431
 800ba48:	24000432 	.word	0x24000432
 800ba4c:	24000433 	.word	0x24000433
 800ba50:	24000434 	.word	0x24000434
 800ba54:	2400046c 	.word	0x2400046c
 800ba58:	2400046d 	.word	0x2400046d
 800ba5c:	2400046e 	.word	0x2400046e
 800ba60:	2400046f 	.word	0x2400046f
 800ba64:	24000470 	.word	0x24000470
 800ba68:	240004a8 	.word	0x240004a8
 800ba6c:	240004a9 	.word	0x240004a9
 800ba70:	240004aa 	.word	0x240004aa
 800ba74:	240004ab 	.word	0x240004ab
 800ba78:	240004ac 	.word	0x240004ac
 800ba7c:	240004ad 	.word	0x240004ad
 800ba80:	240004ae 	.word	0x240004ae

0800ba84 <Create_PDOTable_ObjDictionary>:


void Create_PDOTable_ObjDictionary()
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	af00      	add	r7, sp, #0
	//**************************************************************************************************//
	//							   |	  Task_ID	  |				PDO_ID				| DATA_TYPE | #_of_DATA //
	//**************************************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_CURRENT],  			UINT16_T, 	 	3);
 800ba88:	2203      	movs	r2, #3
 800ba8a:	2102      	movs	r1, #2
 800ba8c:	48bd      	ldr	r0, [pc, #756]	; (800bd84 <Create_PDOTable_ObjDictionary+0x300>)
 800ba8e:	f7ff fd9a 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_VOLTAGE],  			UINT16_T,  		3);
 800ba92:	2203      	movs	r2, #3
 800ba94:	2102      	movs	r1, #2
 800ba96:	48bc      	ldr	r0, [pc, #752]	; (800bd88 <Create_PDOTable_ObjDictionary+0x304>)
 800ba98:	f7ff fd95 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_POSITION],  					FLOAT32_T,  	1);
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	2107      	movs	r1, #7
 800baa0:	48ba      	ldr	r0, [pc, #744]	; (800bd8c <Create_PDOTable_ObjDictionary+0x308>)
 800baa2:	f7ff fd90 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VELOCITY],  					INT32_T,  		2);
 800baa6:	2202      	movs	r2, #2
 800baa8:	2106      	movs	r1, #6
 800baaa:	48b9      	ldr	r0, [pc, #740]	; (800bd90 <Create_PDOTable_ObjDictionary+0x30c>)
 800baac:	f7ff fd8b 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CLARKE_OUT],  				INT32_T,  		2);
 800bab0:	2202      	movs	r2, #2
 800bab2:	2106      	movs	r1, #6
 800bab4:	48b7      	ldr	r0, [pc, #732]	; (800bd94 <Create_PDOTable_ObjDictionary+0x310>)
 800bab6:	f7ff fd86 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PARK_OUT],  					FLOAT32_T,  	3);
 800baba:	2203      	movs	r2, #3
 800babc:	2107      	movs	r1, #7
 800babe:	48b6      	ldr	r0, [pc, #728]	; (800bd98 <Create_PDOTable_ObjDictionary+0x314>)
 800bac0:	f7ff fd81 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VOLTAGE_IN],	    			FLOAT32_T,  	3);
 800bac4:	2203      	movs	r2, #3
 800bac6:	2107      	movs	r1, #7
 800bac8:	48b4      	ldr	r0, [pc, #720]	; (800bd9c <Create_PDOTable_ObjDictionary+0x318>)
 800baca:	f7ff fd7c 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ELEC_ANGLE],	    			UINT16_T,  		1);
 800bace:	2201      	movs	r2, #1
 800bad0:	2102      	movs	r1, #2
 800bad2:	48b3      	ldr	r0, [pc, #716]	; (800bda0 <Create_PDOTable_ObjDictionary+0x31c>)
 800bad4:	f7ff fd77 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PRBS_DATA],	    			FLOAT32_T, 		2);
 800bad8:	2202      	movs	r2, #2
 800bada:	2107      	movs	r1, #7
 800badc:	48b1      	ldr	r0, [pc, #708]	; (800bda4 <Create_PDOTable_ObjDictionary+0x320>)
 800bade:	f7ff fd72 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_RAW_CURRENT],	    			INT32_T,  		3);
 800bae2:	2203      	movs	r2, #3
 800bae4:	2106      	movs	r1, #6
 800bae6:	48b0      	ldr	r0, [pc, #704]	; (800bda8 <Create_PDOTable_ObjDictionary+0x324>)
 800bae8:	f7ff fd6d 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_KF_CURRENT],	    			FLOAT32_T, 		3);
 800baec:	2203      	movs	r2, #3
 800baee:	2107      	movs	r1, #7
 800baf0:	48ae      	ldr	r0, [pc, #696]	; (800bdac <Create_PDOTable_ObjDictionary+0x328>)
 800baf2:	f7ff fd68 	bl	800b5c6 <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT],			FLOAT32_T, 		1);
 800baf6:	2201      	movs	r2, #1
 800baf8:	2107      	movs	r1, #7
 800bafa:	48ad      	ldr	r0, [pc, #692]	; (800bdb0 <Create_PDOTable_ObjDictionary+0x32c>)
 800bafc:	f7ff fd63 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CURRENT_OUTPUT],  			FLOAT32_T,  	1);
 800bb00:	2201      	movs	r2, #1
 800bb02:	2107      	movs	r1, #7
 800bb04:	48ab      	ldr	r0, [pc, #684]	; (800bdb4 <Create_PDOTable_ObjDictionary+0x330>)
 800bb06:	f7ff fd5e 	bl	800b5c6 <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_AUXILIARY_INPUT],  			FLOAT32_T,  	1);
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	2107      	movs	r1, #7
 800bb0e:	48aa      	ldr	r0, [pc, #680]	; (800bdb8 <Create_PDOTable_ObjDictionary+0x334>)
 800bb10:	f7ff fd59 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_LOW_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 800bb14:	2201      	movs	r2, #1
 800bb16:	2107      	movs	r1, #7
 800bb18:	48a8      	ldr	r0, [pc, #672]	; (800bdbc <Create_PDOTable_ObjDictionary+0x338>)
 800bb1a:	f7ff fd54 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_FRICTION_COMPENSATOR_INPUT],  FLOAT32_T,  	1);
 800bb1e:	2201      	movs	r2, #1
 800bb20:	2107      	movs	r1, #7
 800bb22:	48a7      	ldr	r0, [pc, #668]	; (800bdc0 <Create_PDOTable_ObjDictionary+0x33c>)
 800bb24:	f7ff fd4f 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 800bb28:	2201      	movs	r2, #1
 800bb2a:	2107      	movs	r1, #7
 800bb2c:	48a5      	ldr	r0, [pc, #660]	; (800bdc4 <Create_PDOTable_ObjDictionary+0x340>)
 800bb2e:	f7ff fd4a 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_IRC_INPUT],					FLOAT32_T, 		1);
 800bb32:	2201      	movs	r2, #1
 800bb34:	2107      	movs	r1, #7
 800bb36:	48a4      	ldr	r0, [pc, #656]	; (800bdc8 <Create_PDOTable_ObjDictionary+0x344>)
 800bb38:	f7ff fd45 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_CTRL_INPUT],  			FLOAT32_T,  	1);
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	2107      	movs	r1, #7
 800bb40:	48a2      	ldr	r0, [pc, #648]	; (800bdcc <Create_PDOTable_ObjDictionary+0x348>)
 800bb42:	f7ff fd40 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ANALYZER_INPUT],				FLOAT32_T, 		1);
 800bb46:	2201      	movs	r2, #1
 800bb48:	2107      	movs	r1, #7
 800bb4a:	48a1      	ldr	r0, [pc, #644]	; (800bdd0 <Create_PDOTable_ObjDictionary+0x34c>)
 800bb4c:	f7ff fd3b 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_COMMUTATION_STEP],			UINT8_T, 		1);
 800bb50:	2201      	movs	r2, #1
 800bb52:	2101      	movs	r1, #1
 800bb54:	489f      	ldr	r0, [pc, #636]	; (800bdd4 <Create_PDOTable_ObjDictionary+0x350>)
 800bb56:	f7ff fd36 	bl	800b5c6 <Assemble_PDO>


	/*Joint Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_LOOP_CNT],			UINT32_T, 		1);
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	2103      	movs	r1, #3
 800bb5e:	489e      	ldr	r0, [pc, #632]	; (800bdd8 <Create_PDOTable_ObjDictionary+0x354>)
 800bb60:	f7ff fd31 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_POSITION],  		FLOAT32_T,  	1);
 800bb64:	2201      	movs	r2, #1
 800bb66:	2107      	movs	r1, #7
 800bb68:	489c      	ldr	r0, [pc, #624]	; (800bddc <Create_PDOTable_ObjDictionary+0x358>)
 800bb6a:	f7ff fd2c 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_VELOCITY],  		FLOAT32_T,  	1);
 800bb6e:	2201      	movs	r2, #1
 800bb70:	2107      	movs	r1, #7
 800bb72:	489b      	ldr	r0, [pc, #620]	; (800bde0 <Create_PDOTable_ObjDictionary+0x35c>)
 800bb74:	f7ff fd27 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_POSITION], 	FLOAT32_T, 		1);
 800bb78:	2201      	movs	r2, #1
 800bb7a:	2107      	movs	r1, #7
 800bb7c:	4899      	ldr	r0, [pc, #612]	; (800bde4 <Create_PDOTable_ObjDictionary+0x360>)
 800bb7e:	f7ff fd22 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_VELOCITY_RAW], FLOAT32_T,  	1);
 800bb82:	2201      	movs	r2, #1
 800bb84:	2107      	movs	r1, #7
 800bb86:	4898      	ldr	r0, [pc, #608]	; (800bde8 <Create_PDOTable_ObjDictionary+0x364>)
 800bb88:	f7ff fd1d 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_SYSTEM_ID_SBS_FREQ],	FLOAT32_T, 		1);
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	2107      	movs	r1, #7
 800bb90:	4896      	ldr	r0, [pc, #600]	; (800bdec <Create_PDOTable_ObjDictionary+0x368>)
 800bb92:	f7ff fd18 	bl	800b5c6 <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_IMP_INPUT], 					FLOAT32_T,  	1);
 800bb96:	2201      	movs	r2, #1
 800bb98:	2107      	movs	r1, #7
 800bb9a:	4895      	ldr	r0, [pc, #596]	; (800bdf0 <Create_PDOTable_ObjDictionary+0x36c>)
 800bb9c:	f7ff fd13 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_POS_PID_CTRL_INPUT], 			FLOAT32_T,  	1);
 800bba0:	2201      	movs	r2, #1
 800bba2:	2107      	movs	r1, #7
 800bba4:	4893      	ldr	r0, [pc, #588]	; (800bdf4 <Create_PDOTable_ObjDictionary+0x370>)
 800bba6:	f7ff fd0e 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VEL_PID_CTRL_INPUT],			FLOAT32_T, 		1);
 800bbaa:	2201      	movs	r2, #1
 800bbac:	2107      	movs	r1, #7
 800bbae:	4892      	ldr	r0, [pc, #584]	; (800bdf8 <Create_PDOTable_ObjDictionary+0x374>)
 800bbb0:	f7ff fd09 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VSD_INPUT],					FLOAT32_T, 		1);
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	2107      	movs	r1, #7
 800bbb8:	4890      	ldr	r0, [pc, #576]	; (800bdfc <Create_PDOTable_ObjDictionary+0x378>)
 800bbba:	f7ff fd04 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_UNIT_TRAJECTORY_BUFF_COUNT],	FLOAT32_T, 		1);
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	2107      	movs	r1, #7
 800bbc2:	488f      	ldr	r0, [pc, #572]	; (800be00 <Create_PDOTable_ObjDictionary+0x37c>)
 800bbc4:	f7ff fcff 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_TORQUE_TRAJECTORY_INPUT],		FLOAT32_T, 		1);
 800bbc8:	2201      	movs	r2, #1
 800bbca:	2107      	movs	r1, #7
 800bbcc:	488d      	ldr	r0, [pc, #564]	; (800be04 <Create_PDOTable_ObjDictionary+0x380>)
 800bbce:	f7ff fcfa 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ABS_POSITION],				FLOAT32_T, 		1);
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	2107      	movs	r1, #7
 800bbd6:	488c      	ldr	r0, [pc, #560]	; (800be08 <Create_PDOTable_ObjDictionary+0x384>)
 800bbd8:	f7ff fcf5 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_DISTURABNCE],				FLOAT32_T, 		1);
 800bbdc:	2201      	movs	r2, #1
 800bbde:	2107      	movs	r1, #7
 800bbe0:	488a      	ldr	r0, [pc, #552]	; (800be0c <Create_PDOTable_ObjDictionary+0x388>)
 800bbe2:	f7ff fcf0 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_INPUT],					FLOAT32_T, 		1);
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	2107      	movs	r1, #7
 800bbea:	4889      	ldr	r0, [pc, #548]	; (800be10 <Create_PDOTable_ObjDictionary+0x38c>)
 800bbec:	f7ff fceb 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_FF_INPUT],					FLOAT32_T, 		1);
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	2107      	movs	r1, #7
 800bbf4:	4887      	ldr	r0, [pc, #540]	; (800be14 <Create_PDOTable_ObjDictionary+0x390>)
 800bbf6:	f7ff fce6 	bl	800b5c6 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VELOCITY_ESTIMATED],			FLOAT32_T, 		1);
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	2107      	movs	r1, #7
 800bbfe:	4886      	ldr	r0, [pc, #536]	; (800be18 <Create_PDOTable_ObjDictionary+0x394>)
 800bc00:	f7ff fce1 	bl	800b5c6 <Assemble_PDO>



	/*COMM Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST1],  			INT32_T,  	1);
 800bc04:	2201      	movs	r2, #1
 800bc06:	2106      	movs	r1, #6
 800bc08:	4884      	ldr	r0, [pc, #528]	; (800be1c <Create_PDOTable_ObjDictionary+0x398>)
 800bc0a:	f7ff fcdc 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST2],  			INT32_T,  	1);
 800bc0e:	2201      	movs	r2, #1
 800bc10:	2106      	movs	r1, #6
 800bc12:	4883      	ldr	r0, [pc, #524]	; (800be20 <Create_PDOTable_ObjDictionary+0x39c>)
 800bc14:	f7ff fcd7 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST3],  			INT32_T,  	1);
 800bc18:	2201      	movs	r2, #1
 800bc1a:	2106      	movs	r1, #6
 800bc1c:	4881      	ldr	r0, [pc, #516]	; (800be24 <Create_PDOTable_ObjDictionary+0x3a0>)
 800bc1e:	f7ff fcd2 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST4],  			INT32_T,  	1);
 800bc22:	2201      	movs	r2, #1
 800bc24:	2106      	movs	r1, #6
 800bc26:	4880      	ldr	r0, [pc, #512]	; (800be28 <Create_PDOTable_ObjDictionary+0x3a4>)
 800bc28:	f7ff fccd 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST5],  			INT32_T,  	1);
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	2106      	movs	r1, #6
 800bc30:	487e      	ldr	r0, [pc, #504]	; (800be2c <Create_PDOTable_ObjDictionary+0x3a8>)
 800bc32:	f7ff fcc8 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST6],  			INT32_T,  	1);
 800bc36:	2201      	movs	r2, #1
 800bc38:	2106      	movs	r1, #6
 800bc3a:	487d      	ldr	r0, [pc, #500]	; (800be30 <Create_PDOTable_ObjDictionary+0x3ac>)
 800bc3c:	f7ff fcc3 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST7],  			INT32_T,  	1);
 800bc40:	2201      	movs	r2, #1
 800bc42:	2106      	movs	r1, #6
 800bc44:	487b      	ldr	r0, [pc, #492]	; (800be34 <Create_PDOTable_ObjDictionary+0x3b0>)
 800bc46:	f7ff fcbe 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST8],  			INT32_T,  	1);
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	2106      	movs	r1, #6
 800bc4e:	487a      	ldr	r0, [pc, #488]	; (800be38 <Create_PDOTable_ObjDictionary+0x3b4>)
 800bc50:	f7ff fcb9 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST9],  			INT32_T,  	1);
 800bc54:	2201      	movs	r2, #1
 800bc56:	2106      	movs	r1, #6
 800bc58:	4878      	ldr	r0, [pc, #480]	; (800be3c <Create_PDOTable_ObjDictionary+0x3b8>)
 800bc5a:	f7ff fcb4 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST10],  			INT32_T,  	1);
 800bc5e:	2201      	movs	r2, #1
 800bc60:	2106      	movs	r1, #6
 800bc62:	4877      	ldr	r0, [pc, #476]	; (800be40 <Create_PDOTable_ObjDictionary+0x3bc>)
 800bc64:	f7ff fcaf 	bl	800b5c6 <Assemble_PDO>

	/*IMU Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_X],  			FLOAT32_T,  	1);
 800bc68:	2201      	movs	r2, #1
 800bc6a:	2107      	movs	r1, #7
 800bc6c:	4875      	ldr	r0, [pc, #468]	; (800be44 <Create_PDOTable_ObjDictionary+0x3c0>)
 800bc6e:	f7ff fcaa 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Y],  			FLOAT32_T,  	1);
 800bc72:	2201      	movs	r2, #1
 800bc74:	2107      	movs	r1, #7
 800bc76:	4874      	ldr	r0, [pc, #464]	; (800be48 <Create_PDOTable_ObjDictionary+0x3c4>)
 800bc78:	f7ff fca5 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Z],  			FLOAT32_T,  	1);
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	2107      	movs	r1, #7
 800bc80:	4872      	ldr	r0, [pc, #456]	; (800be4c <Create_PDOTable_ObjDictionary+0x3c8>)
 800bc82:	f7ff fca0 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_X],  			FLOAT32_T,  	1);
 800bc86:	2201      	movs	r2, #1
 800bc88:	2107      	movs	r1, #7
 800bc8a:	4871      	ldr	r0, [pc, #452]	; (800be50 <Create_PDOTable_ObjDictionary+0x3cc>)
 800bc8c:	f7ff fc9b 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Y],  			FLOAT32_T,  	1);
 800bc90:	2201      	movs	r2, #1
 800bc92:	2107      	movs	r1, #7
 800bc94:	486f      	ldr	r0, [pc, #444]	; (800be54 <Create_PDOTable_ObjDictionary+0x3d0>)
 800bc96:	f7ff fc96 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Z],  			FLOAT32_T,  	1);
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	2107      	movs	r1, #7
 800bc9e:	486e      	ldr	r0, [pc, #440]	; (800be58 <Create_PDOTable_ObjDictionary+0x3d4>)
 800bca0:	f7ff fc91 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_WALKING_STATE],  	FLOAT32_T,  	1);
 800bca4:	2201      	movs	r2, #1
 800bca6:	2107      	movs	r1, #7
 800bca8:	486c      	ldr	r0, [pc, #432]	; (800be5c <Create_PDOTable_ObjDictionary+0x3d8>)
 800bcaa:	f7ff fc8c 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GAIT_PHASE],  		FLOAT32_T,  	1);
 800bcae:	2201      	movs	r2, #1
 800bcb0:	2107      	movs	r1, #7
 800bcb2:	486b      	ldr	r0, [pc, #428]	; (800be60 <Create_PDOTable_ObjDictionary+0x3dc>)
 800bcb4:	f7ff fc87 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_X],  			FLOAT32_T,  	1);
 800bcb8:	2201      	movs	r2, #1
 800bcba:	2107      	movs	r1, #7
 800bcbc:	4869      	ldr	r0, [pc, #420]	; (800be64 <Create_PDOTable_ObjDictionary+0x3e0>)
 800bcbe:	f7ff fc82 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Y],  			FLOAT32_T,  	1);
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	2107      	movs	r1, #7
 800bcc6:	4868      	ldr	r0, [pc, #416]	; (800be68 <Create_PDOTable_ObjDictionary+0x3e4>)
 800bcc8:	f7ff fc7d 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Z],  			FLOAT32_T,  	1);
 800bccc:	2201      	movs	r2, #1
 800bcce:	2107      	movs	r1, #7
 800bcd0:	4866      	ldr	r0, [pc, #408]	; (800be6c <Create_PDOTable_ObjDictionary+0x3e8>)
 800bcd2:	f7ff fc78 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_P],  		FLOAT32_T,  	1);
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	2107      	movs	r1, #7
 800bcda:	4865      	ldr	r0, [pc, #404]	; (800be70 <Create_PDOTable_ObjDictionary+0x3ec>)
 800bcdc:	f7ff fc73 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_D],  		FLOAT32_T,  	1);
 800bce0:	2201      	movs	r2, #1
 800bce2:	2107      	movs	r1, #7
 800bce4:	4863      	ldr	r0, [pc, #396]	; (800be74 <Create_PDOTable_ObjDictionary+0x3f0>)
 800bce6:	f7ff fc6e 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC],  		FLOAT32_T,  	1);
 800bcea:	2201      	movs	r2, #1
 800bcec:	2107      	movs	r1, #7
 800bcee:	4862      	ldr	r0, [pc, #392]	; (800be78 <Create_PDOTable_ObjDictionary+0x3f4>)
 800bcf0:	f7ff fc69 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR],  		FLOAT32_T,  	1);
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	2107      	movs	r1, #7
 800bcf8:	4860      	ldr	r0, [pc, #384]	; (800be7c <Create_PDOTable_ObjDictionary+0x3f8>)
 800bcfa:	f7ff fc64 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC_FILTERED], FLOAT32_T,  	1);
 800bcfe:	2201      	movs	r2, #1
 800bd00:	2107      	movs	r1, #7
 800bd02:	485f      	ldr	r0, [pc, #380]	; (800be80 <Create_PDOTable_ObjDictionary+0x3fc>)
 800bd04:	f7ff fc5f 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR_FILTERED], FLOAT32_T,  	1);
 800bd08:	2201      	movs	r2, #1
 800bd0a:	2107      	movs	r1, #7
 800bd0c:	485d      	ldr	r0, [pc, #372]	; (800be84 <Create_PDOTable_ObjDictionary+0x400>)
 800bd0e:	f7ff fc5a 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_DEG_TVCF],  			FLOAT32_T,  	1);
 800bd12:	2201      	movs	r2, #1
 800bd14:	2107      	movs	r1, #7
 800bd16:	485c      	ldr	r0, [pc, #368]	; (800be88 <Create_PDOTable_ObjDictionary+0x404>)
 800bd18:	f7ff fc55 	bl	800b5c6 <Assemble_PDO>


	/*SYSMNGT Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_VOLT],  			FLOAT32_T,  	1);
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	2107      	movs	r1, #7
 800bd20:	485a      	ldr	r0, [pc, #360]	; (800be8c <Create_PDOTable_ObjDictionary+0x408>)
 800bd22:	f7ff fc50 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_CURR],  			FLOAT32_T,  	1);
 800bd26:	2201      	movs	r2, #1
 800bd28:	2107      	movs	r1, #7
 800bd2a:	4859      	ldr	r0, [pc, #356]	; (800be90 <Create_PDOTable_ObjDictionary+0x40c>)
 800bd2c:	f7ff fc4b 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_TEMP],  			FLOAT32_T,  	1);
 800bd30:	2201      	movs	r2, #1
 800bd32:	2107      	movs	r1, #7
 800bd34:	4857      	ldr	r0, [pc, #348]	; (800be94 <Create_PDOTable_ObjDictionary+0x410>)
 800bd36:	f7ff fc46 	bl	800b5c6 <Assemble_PDO>

	/*EXTDEV Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_FSR],  				FLOAT32_T,  	1);
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	2107      	movs	r1, #7
 800bd3e:	4856      	ldr	r0, [pc, #344]	; (800be98 <Create_PDOTable_ObjDictionary+0x414>)
 800bd40:	f7ff fc41 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_LP],  				FLOAT32_T,  	1);
 800bd44:	2201      	movs	r2, #1
 800bd46:	2107      	movs	r1, #7
 800bd48:	4854      	ldr	r0, [pc, #336]	; (800be9c <Create_PDOTable_ObjDictionary+0x418>)
 800bd4a:	f7ff fc3c 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_REF],  	FLOAT32_T,  	1);
 800bd4e:	2201      	movs	r2, #1
 800bd50:	2107      	movs	r1, #7
 800bd52:	4853      	ldr	r0, [pc, #332]	; (800bea0 <Create_PDOTable_ObjDictionary+0x41c>)
 800bd54:	f7ff fc37 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_CMD],  	UINT8_T,  		1);
 800bd58:	2201      	movs	r2, #1
 800bd5a:	2101      	movs	r1, #1
 800bd5c:	4851      	ldr	r0, [pc, #324]	; (800bea4 <Create_PDOTable_ObjDictionary+0x420>)
 800bd5e:	f7ff fc32 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_ACT],  	FLOAT32_T,  	1);
 800bd62:	2201      	movs	r2, #1
 800bd64:	2107      	movs	r1, #7
 800bd66:	4850      	ldr	r0, [pc, #320]	; (800bea8 <Create_PDOTable_ObjDictionary+0x424>)
 800bd68:	f7ff fc2d 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_ACT],  	UINT8_T,  		1);
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	2101      	movs	r1, #1
 800bd70:	484e      	ldr	r0, [pc, #312]	; (800beac <Create_PDOTable_ObjDictionary+0x428>)
 800bd72:	f7ff fc28 	bl	800b5c6 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_BUTTON_STATE],  	UINT8_T,  		1);
 800bd76:	2201      	movs	r2, #1
 800bd78:	2101      	movs	r1, #1
 800bd7a:	484d      	ldr	r0, [pc, #308]	; (800beb0 <Create_PDOTable_ObjDictionary+0x42c>)
 800bd7c:	f7ff fc23 	bl	800b5c6 <Assemble_PDO>
}
 800bd80:	bf00      	nop
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	240004e4 	.word	0x240004e4
 800bd88:	240004e6 	.word	0x240004e6
 800bd8c:	240004e8 	.word	0x240004e8
 800bd90:	240004ea 	.word	0x240004ea
 800bd94:	240004ec 	.word	0x240004ec
 800bd98:	240004ee 	.word	0x240004ee
 800bd9c:	240004f0 	.word	0x240004f0
 800bda0:	240004f2 	.word	0x240004f2
 800bda4:	240004f4 	.word	0x240004f4
 800bda8:	240004f6 	.word	0x240004f6
 800bdac:	240004f8 	.word	0x240004f8
 800bdb0:	240004fa 	.word	0x240004fa
 800bdb4:	240004fc 	.word	0x240004fc
 800bdb8:	240004fe 	.word	0x240004fe
 800bdbc:	24000500 	.word	0x24000500
 800bdc0:	24000502 	.word	0x24000502
 800bdc4:	24000504 	.word	0x24000504
 800bdc8:	24000506 	.word	0x24000506
 800bdcc:	24000508 	.word	0x24000508
 800bdd0:	2400050a 	.word	0x2400050a
 800bdd4:	2400050c 	.word	0x2400050c
 800bdd8:	24000520 	.word	0x24000520
 800bddc:	24000522 	.word	0x24000522
 800bde0:	24000524 	.word	0x24000524
 800bde4:	24000526 	.word	0x24000526
 800bde8:	24000528 	.word	0x24000528
 800bdec:	2400052a 	.word	0x2400052a
 800bdf0:	2400052c 	.word	0x2400052c
 800bdf4:	2400052e 	.word	0x2400052e
 800bdf8:	24000530 	.word	0x24000530
 800bdfc:	24000532 	.word	0x24000532
 800be00:	24000534 	.word	0x24000534
 800be04:	24000536 	.word	0x24000536
 800be08:	24000538 	.word	0x24000538
 800be0c:	2400053a 	.word	0x2400053a
 800be10:	2400053c 	.word	0x2400053c
 800be14:	2400053e 	.word	0x2400053e
 800be18:	24000540 	.word	0x24000540
 800be1c:	2400055c 	.word	0x2400055c
 800be20:	2400055e 	.word	0x2400055e
 800be24:	24000560 	.word	0x24000560
 800be28:	24000562 	.word	0x24000562
 800be2c:	24000564 	.word	0x24000564
 800be30:	24000566 	.word	0x24000566
 800be34:	24000568 	.word	0x24000568
 800be38:	2400056a 	.word	0x2400056a
 800be3c:	2400056c 	.word	0x2400056c
 800be40:	2400056e 	.word	0x2400056e
 800be44:	24000598 	.word	0x24000598
 800be48:	2400059a 	.word	0x2400059a
 800be4c:	2400059c 	.word	0x2400059c
 800be50:	2400059e 	.word	0x2400059e
 800be54:	240005a0 	.word	0x240005a0
 800be58:	240005a2 	.word	0x240005a2
 800be5c:	240005a4 	.word	0x240005a4
 800be60:	240005a6 	.word	0x240005a6
 800be64:	240005a8 	.word	0x240005a8
 800be68:	240005aa 	.word	0x240005aa
 800be6c:	240005ac 	.word	0x240005ac
 800be70:	240005ae 	.word	0x240005ae
 800be74:	240005b0 	.word	0x240005b0
 800be78:	240005b2 	.word	0x240005b2
 800be7c:	240005b4 	.word	0x240005b4
 800be80:	240005b6 	.word	0x240005b6
 800be84:	240005b8 	.word	0x240005b8
 800be88:	240005ba 	.word	0x240005ba
 800be8c:	240005d4 	.word	0x240005d4
 800be90:	240005d6 	.word	0x240005d6
 800be94:	240005d8 	.word	0x240005d8
 800be98:	24000610 	.word	0x24000610
 800be9c:	24000612 	.word	0x24000612
 800bea0:	24000614 	.word	0x24000614
 800bea4:	24000616 	.word	0x24000616
 800bea8:	24000618 	.word	0x24000618
 800beac:	2400061a 	.word	0x2400061a
 800beb0:	2400061c 	.word	0x2400061c

0800beb4 <Initialize_ICM>:
uint8_t I2C1_RxBuff[ICM_BUFF_SIZE] __attribute__((section(".I2C1_RxBuff")));

//I2C_HandleTypeDef hi2c1;

void Initialize_ICM(ICMObject* t_icm_obj)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	memset(t_icm_obj, 0, sizeof(ICMObject));
 800bebc:	2220      	movs	r2, #32
 800bebe:	2100      	movs	r1, #0
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f004 f906 	bl	80100d2 <memset>
	t_icm_obj->i2cport = &hi2c1;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a04      	ldr	r2, [pc, #16]	; (800bedc <Initialize_ICM+0x28>)
 800beca:	601a      	str	r2, [r3, #0]
	t_icm_obj->addr    = ICM20608G_DEV_ADDR;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	22d2      	movs	r2, #210	; 0xd2
 800bed0:	809a      	strh	r2, [r3, #4]
}
 800bed2:	bf00      	nop
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	24000144 	.word	0x24000144

0800bee0 <IsDevReady_ICM>:

uint8_t IsDevReady_ICM(ICMObject* t_icm_obj)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
	uint8_t t_res = HAL_I2C_IsDeviceReady(t_icm_obj->i2cport, t_icm_obj->addr, ICM_I2C_TRIALS, ICM_I2C_TIMEOUT);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6818      	ldr	r0, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	8899      	ldrh	r1, [r3, #4]
 800bef0:	2305      	movs	r3, #5
 800bef2:	220a      	movs	r2, #10
 800bef4:	f7fa f91a 	bl	800612c <HAL_I2C_IsDeviceReady>
 800bef8:	4603      	mov	r3, r0
 800befa:	73fb      	strb	r3, [r7, #15]
	return t_res;
 800befc:	7bfb      	ldrb	r3, [r7, #15]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <Init_ICM>:

uint8_t Init_ICM(ICMObject* t_icm_obj)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
	uint8_t t_res = HAL_I2C_Init(t_icm_obj->i2cport);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7f9 fe50 	bl	8005bb8 <HAL_I2C_Init>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73fb      	strb	r3, [r7, #15]
	return t_res;
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <DeInit_ICM>:

uint8_t DeInit_ICM(ICMObject* t_icm_obj)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
	uint8_t t_res = HAL_I2C_DeInit(t_icm_obj->i2cport);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7f9 fed0 	bl	8005cd8 <HAL_I2C_DeInit>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73fb      	strb	r3, [r7, #15]
	return t_res;
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
	...

0800bf48 <Read_Data_ICM>:


uint8_t Read_Data_ICM(ICMObject* t_icm_obj)
{
 800bf48:	b590      	push	{r4, r7, lr}
 800bf4a:	b08d      	sub	sp, #52	; 0x34
 800bf4c:	af02      	add	r7, sp, #8
 800bf4e:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Mem_Read ver//
//	t_res = HAL_I2C_Mem_Read(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, t_buff, 14, ICM_I2C_TIMEOUT);

	//DMA_ver//
	t_res = HAL_I2C_Mem_Read_DMA(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, I2C1_RxBuff, 14);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	8899      	ldrh	r1, [r3, #4]
 800bf5e:	230e      	movs	r3, #14
 800bf60:	9301      	str	r3, [sp, #4]
 800bf62:	4b46      	ldr	r3, [pc, #280]	; (800c07c <Read_Data_ICM+0x134>)
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	2301      	movs	r3, #1
 800bf68:	223b      	movs	r2, #59	; 0x3b
 800bf6a:	f7f9 fff9 	bl	8005f60 <HAL_I2C_Mem_Read_DMA>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	memcpy(t_buff, I2C1_RxBuff, 14);
 800bf74:	4b41      	ldr	r3, [pc, #260]	; (800c07c <Read_Data_ICM+0x134>)
 800bf76:	f107 040c 	add.w	r4, r7, #12
 800bf7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf7c:	c407      	stmia	r4!, {r0, r1, r2}
 800bf7e:	8023      	strh	r3, [r4, #0]

	int16_t t_Xacc = (int16_t)(t_buff[0]  << 8 | t_buff[1]);
 800bf80:	7b3b      	ldrb	r3, [r7, #12]
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	b21a      	sxth	r2, r3
 800bf86:	7b7b      	ldrb	r3, [r7, #13]
 800bf88:	b21b      	sxth	r3, r3
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t t_Yacc = (int16_t)(t_buff[2]  << 8 | t_buff[3]);
 800bf8e:	7bbb      	ldrb	r3, [r7, #14]
 800bf90:	021b      	lsls	r3, r3, #8
 800bf92:	b21a      	sxth	r2, r3
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	b21b      	sxth	r3, r3
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t t_Zacc = (int16_t)(t_buff[4]  << 8 | t_buff[5]);
 800bf9c:	7c3b      	ldrb	r3, [r7, #16]
 800bf9e:	021b      	lsls	r3, r3, #8
 800bfa0:	b21a      	sxth	r2, r3
 800bfa2:	7c7b      	ldrb	r3, [r7, #17]
 800bfa4:	b21b      	sxth	r3, r3
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	843b      	strh	r3, [r7, #32]
	int16_t t_Xgyr = (int16_t)(t_buff[8]  << 8 | t_buff[9]);
 800bfaa:	7d3b      	ldrb	r3, [r7, #20]
 800bfac:	021b      	lsls	r3, r3, #8
 800bfae:	b21a      	sxth	r2, r3
 800bfb0:	7d7b      	ldrb	r3, [r7, #21]
 800bfb2:	b21b      	sxth	r3, r3
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	83fb      	strh	r3, [r7, #30]
	int16_t t_Ygyr = (int16_t)(t_buff[10] << 8 | t_buff[11]);
 800bfb8:	7dbb      	ldrb	r3, [r7, #22]
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	b21a      	sxth	r2, r3
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	b21b      	sxth	r3, r3
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	83bb      	strh	r3, [r7, #28]
	int16_t t_Zgyr = (int16_t)(t_buff[12] << 8 | t_buff[13]);
 800bfc6:	7e3b      	ldrb	r3, [r7, #24]
 800bfc8:	021b      	lsls	r3, r3, #8
 800bfca:	b21a      	sxth	r2, r3
 800bfcc:	7e7b      	ldrb	r3, [r7, #25]
 800bfce:	b21b      	sxth	r3, r3
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	837b      	strh	r3, [r7, #26]

	/* NEED TO BE SCALED */
	t_icm_obj->acc_x = (float)(t_Xacc / 8192.0f);
 800bfd4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bfd8:	ee07 3a90 	vmov	s15, r3
 800bfdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bfe0:	eddf 6a27 	vldr	s13, [pc, #156]	; 800c080 <Read_Data_ICM+0x138>
 800bfe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	edc3 7a02 	vstr	s15, [r3, #8]
	t_icm_obj->acc_y = (float)(t_Yacc / 8192.0f);
 800bfee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bffa:	eddf 6a21 	vldr	s13, [pc, #132]	; 800c080 <Read_Data_ICM+0x138>
 800bffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	edc3 7a03 	vstr	s15, [r3, #12]
	t_icm_obj->acc_z = (float)(t_Zacc / 8192.0f);
 800c008:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c00c:	ee07 3a90 	vmov	s15, r3
 800c010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c014:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800c080 <Read_Data_ICM+0x138>
 800c018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	edc3 7a04 	vstr	s15, [r3, #16]
	t_icm_obj->gyr_x = (float)(t_Xgyr / 65.5f); //65.5f
 800c022:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c026:	ee07 3a90 	vmov	s15, r3
 800c02a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c02e:	eddf 6a15 	vldr	s13, [pc, #84]	; 800c084 <Read_Data_ICM+0x13c>
 800c032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	edc3 7a05 	vstr	s15, [r3, #20]
	t_icm_obj->gyr_y = (float)(t_Ygyr / 65.5f);
 800c03c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c040:	ee07 3a90 	vmov	s15, r3
 800c044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c048:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800c084 <Read_Data_ICM+0x13c>
 800c04c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	edc3 7a06 	vstr	s15, [r3, #24]
	t_icm_obj->gyr_z = (float)(t_Zgyr / 65.5f);
 800c056:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c05a:	ee07 3a90 	vmov	s15, r3
 800c05e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c062:	eddf 6a08 	vldr	s13, [pc, #32]	; 800c084 <Read_Data_ICM+0x13c>
 800c066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	edc3 7a07 	vstr	s15, [r3, #28]

	return t_res;
 800c070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c074:	4618      	mov	r0, r3
 800c076:	372c      	adds	r7, #44	; 0x2c
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd90      	pop	{r4, r7, pc}
 800c07c:	30000000 	.word	0x30000000
 800c080:	46000000 	.word	0x46000000
 800c084:	42830000 	.word	0x42830000

0800c088 <Write_Data_ICM>:


uint8_t Write_Data_ICM(ICMObject* t_icm_obj)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af04      	add	r7, sp, #16
 800c08e:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	73fb      	strb	r3, [r7, #15]

    uint8_t conf_1 = ICM20608G_PWR_MGMT_1_ONE;
 800c094:	2300      	movs	r3, #0
 800c096:	73bb      	strb	r3, [r7, #14]
    t_res = HAL_I2C_Mem_Write(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &conf_1, ICM20608G_CONTROL_SIZE, ICM_I2C_TIMEOUT);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6818      	ldr	r0, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	8899      	ldrh	r1, [r3, #4]
 800c0a0:	2305      	movs	r3, #5
 800c0a2:	9302      	str	r3, [sp, #8]
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	9301      	str	r3, [sp, #4]
 800c0a8:	f107 030e 	add.w	r3, r7, #14
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	226b      	movs	r2, #107	; 0x6b
 800c0b2:	f7f9 fe41 	bl	8005d38 <HAL_I2C_Mem_Write>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_2 = ICM20608G_PWR_MGMT_2_ONE;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	737b      	strb	r3, [r7, #13]
    t_res = HAL_I2C_Mem_Write(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_PWR_MGMT_2, I2C_MEMADD_SIZE_8BIT, &conf_2, ICM20608G_CONTROL_SIZE, ICM_I2C_TIMEOUT);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6818      	ldr	r0, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	8899      	ldrh	r1, [r3, #4]
 800c0c6:	2305      	movs	r3, #5
 800c0c8:	9302      	str	r3, [sp, #8]
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	f107 030d 	add.w	r3, r7, #13
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	226c      	movs	r2, #108	; 0x6c
 800c0d8:	f7f9 fe2e 	bl	8005d38 <HAL_I2C_Mem_Write>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_3 = ICM20608G_GYR_CONFIG_ONE;
 800c0e0:	2308      	movs	r3, #8
 800c0e2:	733b      	strb	r3, [r7, #12]
    t_res = HAL_I2C_Mem_Write(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &conf_3, ICM20608G_CONTROL_SIZE, ICM_I2C_TIMEOUT);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6818      	ldr	r0, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	8899      	ldrh	r1, [r3, #4]
 800c0ec:	2305      	movs	r3, #5
 800c0ee:	9302      	str	r3, [sp, #8]
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	9301      	str	r3, [sp, #4]
 800c0f4:	f107 030c 	add.w	r3, r7, #12
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	221b      	movs	r2, #27
 800c0fe:	f7f9 fe1b 	bl	8005d38 <HAL_I2C_Mem_Write>
 800c102:	4603      	mov	r3, r0
 800c104:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_4 = ICM20608G_ACC_CONFIG_ONE;
 800c106:	2308      	movs	r3, #8
 800c108:	72fb      	strb	r3, [r7, #11]
    t_res = HAL_I2C_Mem_Write(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &conf_4, ICM20608G_CONTROL_SIZE, ICM_I2C_TIMEOUT);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	8899      	ldrh	r1, [r3, #4]
 800c112:	2305      	movs	r3, #5
 800c114:	9302      	str	r3, [sp, #8]
 800c116:	2301      	movs	r3, #1
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	f107 030b 	add.w	r3, r7, #11
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	2301      	movs	r3, #1
 800c122:	221c      	movs	r2, #28
 800c124:	f7f9 fe08 	bl	8005d38 <HAL_I2C_Mem_Write>
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]

    return t_res;
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <Init_IOIF_Fdcan>:

uint8_t RxData1[64];
uint8_t RxData2[64];

void Init_IOIF_Fdcan(uint32_t t_Mask, uint32_t t_FilterID1, uint32_t t_FilterID2)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af02      	add	r7, sp, #8
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
	fdcan1_obj.hfdcan = &hfdcan1;
 800c144:	4b42      	ldr	r3, [pc, #264]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c146:	4a43      	ldr	r2, [pc, #268]	; (800c254 <Init_IOIF_Fdcan+0x11c>)
 800c148:	601a      	str	r2, [r3, #0]
	fdcan1_obj.mask_window = t_Mask;
 800c14a:	4a41      	ldr	r2, [pc, #260]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6713      	str	r3, [r2, #112]	; 0x70
	fdcan1_obj.filter1 = t_FilterID1;
 800c150:	4a3f      	ldr	r2, [pc, #252]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	6753      	str	r3, [r2, #116]	; 0x74
	fdcan1_obj.filter2 = t_FilterID2;
 800c156:	4a3e      	ldr	r2, [pc, #248]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6793      	str	r3, [r2, #120]	; 0x78

	fdcan1_obj.sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800c15c:	4b3c      	ldr	r3, [pc, #240]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c15e:	2200      	movs	r2, #0
 800c160:	605a      	str	r2, [r3, #4]
	fdcan1_obj.sFilterConfig.FilterIndex = 0;
 800c162:	4b3b      	ldr	r3, [pc, #236]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c164:	2200      	movs	r2, #0
 800c166:	609a      	str	r2, [r3, #8]
	fdcan1_obj.sFilterConfig.FilterType = FDCAN_FILTER_RANGE; //FDCAN_FILTER_RANGE;
 800c168:	4b39      	ldr	r3, [pc, #228]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	60da      	str	r2, [r3, #12]
	fdcan1_obj.sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800c16e:	4b38      	ldr	r3, [pc, #224]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c170:	2201      	movs	r2, #1
 800c172:	611a      	str	r2, [r3, #16]
	fdcan1_obj.sFilterConfig.FilterID1 = 0x000;	// Filter ID1
 800c174:	4b36      	ldr	r3, [pc, #216]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c176:	2200      	movs	r2, #0
 800c178:	615a      	str	r2, [r3, #20]
	fdcan1_obj.sFilterConfig.FilterID2 = 0x7FF;	// Filter ID2
 800c17a:	4b35      	ldr	r3, [pc, #212]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c17c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c180:	619a      	str	r2, [r3, #24]

	fdcan1_obj.TxHeader.IdType = FDCAN_STANDARD_ID;
 800c182:	4b33      	ldr	r3, [pc, #204]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c184:	2200      	movs	r2, #0
 800c186:	629a      	str	r2, [r3, #40]	; 0x28
	fdcan1_obj.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800c188:	4b31      	ldr	r3, [pc, #196]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	62da      	str	r2, [r3, #44]	; 0x2c
	fdcan1_obj.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800c18e:	4b30      	ldr	r3, [pc, #192]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c190:	2200      	movs	r2, #0
 800c192:	635a      	str	r2, [r3, #52]	; 0x34
	fdcan1_obj.TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800c194:	4b2e      	ldr	r3, [pc, #184]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c196:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c19a:	639a      	str	r2, [r3, #56]	; 0x38
	fdcan1_obj.TxHeader.FDFormat = FDCAN_FD_CAN;
 800c19c:	4b2c      	ldr	r3, [pc, #176]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c19e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c1a2:	63da      	str	r2, [r3, #60]	; 0x3c
	fdcan1_obj.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800c1a4:	4b2a      	ldr	r3, [pc, #168]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	641a      	str	r2, [r3, #64]	; 0x40
	fdcan1_obj.TxHeader.MessageMarker = 0;
 800c1aa:	4b29      	ldr	r3, [pc, #164]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	645a      	str	r2, [r3, #68]	; 0x44
 
	/* Fault Check */
	if ( HAL_FDCAN_ConfigGlobalFilter ( fdcan1_obj.hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE ) != HAL_OK ){
 800c1b0:	4b27      	ldr	r3, [pc, #156]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c1b2:	6818      	ldr	r0, [r3, #0]
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	2102      	movs	r1, #2
 800c1be:	f7f8 fa63 	bl	8004688 <HAL_FDCAN_ConfigGlobalFilter>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d001      	beq.n	800c1cc <Init_IOIF_Fdcan+0x94>
		Error_Handler ( );  // Configure Filter
 800c1c8:	f7f4 fdca 	bl	8000d60 <Error_Handler>
	}

	if ( HAL_FDCAN_ConfigFilter ( fdcan1_obj.hfdcan, &fdcan1_obj.sFilterConfig ) != HAL_OK ){
 800c1cc:	4b20      	ldr	r3, [pc, #128]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4921      	ldr	r1, [pc, #132]	; (800c258 <Init_IOIF_Fdcan+0x120>)
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7f8 f9e2 	bl	800459c <HAL_FDCAN_ConfigFilter>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <Init_IOIF_Fdcan+0xaa>
		Error_Handler ( );  // Configure Filter
 800c1de:	f7f4 fdbf 	bl	8000d60 <Error_Handler>
	}

	if ( HAL_FDCAN_ActivateNotification ( fdcan1_obj.hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0 ) != HAL_OK ) {
 800c1e2:	4b1b      	ldr	r3, [pc, #108]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7f8 fcb4 	bl	8004b58 <HAL_FDCAN_ActivateNotification>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <Init_IOIF_Fdcan+0xc2>
		Error_Handler ( );
 800c1f6:	f7f4 fdb3 	bl	8000d60 <Error_Handler>
	}

	if ( HAL_FDCAN_ConfigTxDelayCompensation ( fdcan1_obj.hfdcan, fdcan1_obj.hfdcan->Init.DataPrescaler * fdcan1_obj.hfdcan->Init.DataTimeSeg1, 0 ) != HAL_OK ) {
 800c1fa:	4b15      	ldr	r3, [pc, #84]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c1fc:	6818      	ldr	r0, [r3, #0]
 800c1fe:	4b14      	ldr	r3, [pc, #80]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c204:	4a12      	ldr	r2, [pc, #72]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c206:	6812      	ldr	r2, [r2, #0]
 800c208:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c20a:	fb02 f303 	mul.w	r3, r2, r3
 800c20e:	2200      	movs	r2, #0
 800c210:	4619      	mov	r1, r3
 800c212:	f7f8 fa66 	bl	80046e2 <HAL_FDCAN_ConfigTxDelayCompensation>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <Init_IOIF_Fdcan+0xe8>
		Error_Handler ( );
 800c21c:	f7f4 fda0 	bl	8000d60 <Error_Handler>
	}

	if ( HAL_FDCAN_EnableTxDelayCompensation ( fdcan1_obj.hfdcan ) != HAL_OK ) {
 800c220:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4618      	mov	r0, r3
 800c226:	f7f8 fa80 	bl	800472a <HAL_FDCAN_EnableTxDelayCompensation>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <Init_IOIF_Fdcan+0xfc>
		Error_Handler ( );
 800c230:	f7f4 fd96 	bl	8000d60 <Error_Handler>
	}

	if ( HAL_FDCAN_Start ( fdcan1_obj.hfdcan ) != HAL_OK ) {
 800c234:	4b06      	ldr	r3, [pc, #24]	; (800c250 <Init_IOIF_Fdcan+0x118>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4618      	mov	r0, r3
 800c23a:	f7f8 fa99 	bl	8004770 <HAL_FDCAN_Start>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d001      	beq.n	800c248 <Init_IOIF_Fdcan+0x110>
		Error_Handler ( );
 800c244:	f7f4 fd8c 	bl	8000d60 <Error_Handler>
	}
}
 800c248:	bf00      	nop
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	24000650 	.word	0x24000650
 800c254:	240000a4 	.word	0x240000a4
 800c258:	24000654 	.word	0x24000654

0800c25c <Transmit_IOIF_Fdcan>:

int Transmit_IOIF_Fdcan(uint16_t t_COB_ID, uint32_t t_len, uint8_t* t_tx_data)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	4603      	mov	r3, r0
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	81fb      	strh	r3, [r7, #14]
	fdcan1_obj.TxHeader.Identifier = t_COB_ID;
 800c26a:	89fb      	ldrh	r3, [r7, #14]
 800c26c:	4a08      	ldr	r2, [pc, #32]	; (800c290 <Transmit_IOIF_Fdcan+0x34>)
 800c26e:	6253      	str	r3, [r2, #36]	; 0x24
	fdcan1_obj.TxHeader.DataLength = t_len; //FDCAN_DLC_BYTES_64 //FDCAN_DLC_BYTES_32 //FDCAN_DLC_BYTES_20
 800c270:	4a07      	ldr	r2, [pc, #28]	; (800c290 <Transmit_IOIF_Fdcan+0x34>)
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	6313      	str	r3, [r2, #48]	; 0x30

	return HAL_FDCAN_AddMessageToTxFifoQ(fdcan1_obj.hfdcan, &fdcan1_obj.TxHeader, t_tx_data);
 800c276:	4b06      	ldr	r3, [pc, #24]	; (800c290 <Transmit_IOIF_Fdcan+0x34>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	4905      	ldr	r1, [pc, #20]	; (800c294 <Transmit_IOIF_Fdcan+0x38>)
 800c27e:	4618      	mov	r0, r3
 800c280:	f7f8 faa1 	bl	80047c6 <HAL_FDCAN_AddMessageToTxFifoQ>
 800c284:	4603      	mov	r3, r0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	24000650 	.word	0x24000650
 800c294:	24000674 	.word	0x24000674

0800c298 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
	/* Recieve Message */
	if (hfdcan->Instance == FDCAN1){
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a19      	ldr	r2, [pc, #100]	; (800c30c <HAL_FDCAN_RxFifo0Callback+0x74>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d12b      	bne.n	800c304 <HAL_FDCAN_RxFifo0Callback+0x6c>
		if (HAL_FDCAN_GetRxMessage(fdcan1_obj.hfdcan, FDCAN_RX_FIFO0, &fdcan1_obj.RxHeader, RxData1) != HAL_OK) {
 800c2ac:	4b18      	ldr	r3, [pc, #96]	; (800c310 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800c2ae:	6818      	ldr	r0, [r3, #0]
 800c2b0:	4b18      	ldr	r3, [pc, #96]	; (800c314 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800c2b2:	4a19      	ldr	r2, [pc, #100]	; (800c318 <HAL_FDCAN_RxFifo0Callback+0x80>)
 800c2b4:	2140      	movs	r1, #64	; 0x40
 800c2b6:	f7f8 fae1 	bl	800487c <HAL_FDCAN_GetRxMessage>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d001      	beq.n	800c2c4 <HAL_FDCAN_RxFifo0Callback+0x2c>
			Error_Handler();
 800c2c0:	f7f4 fd4e 	bl	8000d60 <Error_Handler>
		}
		
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 800c2c4:	4b12      	ldr	r3, [pc, #72]	; (800c310 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800c2c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2c8:	4b11      	ldr	r3, [pc, #68]	; (800c310 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800c2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2cc:	401a      	ands	r2, r3
 800c2ce:	4b10      	ldr	r3, [pc, #64]	; (800c310 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800c2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d008      	beq.n	800c2e8 <HAL_FDCAN_RxFifo0Callback+0x50>
			((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter2)){
 800c2d6:	4b0e      	ldr	r3, [pc, #56]	; (800c310 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800c2d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2da:	4b0d      	ldr	r3, [pc, #52]	; (800c310 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800c2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2de:	401a      	ands	r2, r3
 800c2e0:	4b0b      	ldr	r3, [pc, #44]	; (800c310 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800c2e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d10c      	bne.n	800c302 <HAL_FDCAN_RxFifo0Callback+0x6a>
			return;
		}

		if (fdcan_rx_callback_ptr != NULL) {
 800c2e8:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <HAL_FDCAN_RxFifo0Callback+0x84>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d009      	beq.n	800c304 <HAL_FDCAN_RxFifo0Callback+0x6c>
			fdcan_rx_callback_ptr(fdcan1_obj.RxHeader.Identifier, RxData1);
 800c2f0:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <HAL_FDCAN_RxFifo0Callback+0x84>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a06      	ldr	r2, [pc, #24]	; (800c310 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800c2f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c2f8:	b292      	uxth	r2, r2
 800c2fa:	4906      	ldr	r1, [pc, #24]	; (800c314 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	4798      	blx	r3
 800c300:	e000      	b.n	800c304 <HAL_FDCAN_RxFifo0Callback+0x6c>
			return;
 800c302:	bf00      	nop
		}
	}
}
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	4000a000 	.word	0x4000a000
 800c310:	24000650 	.word	0x24000650
 800c314:	240006cc 	.word	0x240006cc
 800c318:	24000698 	.word	0x24000698
 800c31c:	2400064c 	.word	0x2400064c

0800c320 <Start_TIM3>:
TimCallback ioif_tim16_callback_ptr = NULL;
TimCallback ioif_tim17_callback_ptr = NULL;

int Start_TIM1()    {return HAL_TIM_Base_Start_IT(&htim1);}
int Start_TIM2()    {return HAL_TIM_Base_Start_IT(&htim2);}
int Start_TIM3()    {return HAL_TIM_Base_Start_IT(&htim3);}
 800c320:	b580      	push	{r7, lr}
 800c322:	af00      	add	r7, sp, #0
 800c324:	4802      	ldr	r0, [pc, #8]	; (800c330 <Start_TIM3+0x10>)
 800c326:	f7fe fb99 	bl	800aa5c <HAL_TIM_Base_Start_IT>
 800c32a:	4603      	mov	r3, r0
 800c32c:	4618      	mov	r0, r3
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	240002e0 	.word	0x240002e0

0800c334 <Start_TIM6>:
int Start_TIM4()    {return HAL_TIM_Base_Start_IT(&htim4);}
int Start_TIM5()    {return HAL_TIM_Base_Start_IT(&htim5);}
int Start_TIM6()    {return HAL_TIM_Base_Start_IT(&htim6);}
 800c334:	b580      	push	{r7, lr}
 800c336:	af00      	add	r7, sp, #0
 800c338:	4802      	ldr	r0, [pc, #8]	; (800c344 <Start_TIM6+0x10>)
 800c33a:	f7fe fb8f 	bl	800aa5c <HAL_TIM_Base_Start_IT>
 800c33e:	4603      	mov	r3, r0
 800c340:	4618      	mov	r0, r3
 800c342:	bd80      	pop	{r7, pc}
 800c344:	2400032c 	.word	0x2400032c

0800c348 <HAL_TIM_PeriodElapsedCallback>:
{
	t_semaphore->semaphore = 0; // Release the semaphore
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
	/* Timer 3(APB1) - Imu Ctrl Task CallBack*/
	if (htim->Instance == htim3.Instance) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	4b0d      	ldr	r3, [pc, #52]	; (800c38c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d106      	bne.n	800c36a <HAL_TIM_PeriodElapsedCallback+0x22>
		if (ioif_tim3_callback_ptr != NULL) {
 800c35c:	4b0c      	ldr	r3, [pc, #48]	; (800c390 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <HAL_TIM_PeriodElapsedCallback+0x22>
			ioif_tim3_callback_ptr( );
 800c364:	4b0a      	ldr	r3, [pc, #40]	; (800c390 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4798      	blx	r3
		}
	}

	/* Timer 6(APB1) - Msg hdlr Task CallBack*/
	if (htim->Instance == htim6.Instance) {
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	4b09      	ldr	r3, [pc, #36]	; (800c394 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	429a      	cmp	r2, r3
 800c374:	d106      	bne.n	800c384 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (ioif_tim6_callback_ptr != NULL) {
 800c376:	4b08      	ldr	r3, [pc, #32]	; (800c398 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d002      	beq.n	800c384 <HAL_TIM_PeriodElapsedCallback+0x3c>
			ioif_tim6_callback_ptr( );
 800c37e:	4b06      	ldr	r3, [pc, #24]	; (800c398 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4798      	blx	r3
		}
	}
}
 800c384:	bf00      	nop
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	240002e0 	.word	0x240002e0
 800c390:	2400070c 	.word	0x2400070c
 800c394:	2400032c 	.word	0x2400032c
 800c398:	24000710 	.word	0x24000710

0800c39c <Reset_Parameters>:

*/

/* Reset Value Zero */
static void Reset_Parameters( )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b0d4      	sub	sp, #336	; 0x150
 800c3a0:	af00      	add	r7, sp, #0
	sensor_params 		= 	(Sensor_Params){0};
 800c3a2:	4b28      	ldr	r3, [pc, #160]	; (800c444 <Reset_Parameters+0xa8>)
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	2348      	movs	r3, #72	; 0x48
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	f003 fe91 	bl	80100d2 <memset>
	norm_params 		= 	(Normalization_Params){0};
 800c3b0:	4b25      	ldr	r3, [pc, #148]	; (800c448 <Reset_Parameters+0xac>)
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	2334      	movs	r3, #52	; 0x34
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	f003 fe8a 	bl	80100d2 <memset>
	gait_params 		= 	(Gait_Params){0};
 800c3be:	4b23      	ldr	r3, [pc, #140]	; (800c44c <Reset_Parameters+0xb0>)
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	6013      	str	r3, [r2, #0]
 800c3c6:	6053      	str	r3, [r2, #4]
 800c3c8:	6093      	str	r3, [r2, #8]
	fuzzy_params 		= 	(Fuzzy_Params){0};
 800c3ca:	4b21      	ldr	r3, [pc, #132]	; (800c450 <Reset_Parameters+0xb4>)
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	232c      	movs	r3, #44	; 0x2c
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	f003 fe7d 	bl	80100d2 <memset>
	thigh_angle_params 	= 	(Thigh_Angle_Params){0};
 800c3d8:	4b1e      	ldr	r3, [pc, #120]	; (800c454 <Reset_Parameters+0xb8>)
 800c3da:	4618      	mov	r0, r3
 800c3dc:	2348      	movs	r3, #72	; 0x48
 800c3de:	461a      	mov	r2, r3
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	f003 fe76 	bl	80100d2 <memset>
	th_params 			= 	(Threshold_Params){0};
 800c3e6:	4b1c      	ldr	r3, [pc, #112]	; (800c458 <Reset_Parameters+0xbc>)
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	6053      	str	r3, [r2, #4]
 800c3f0:	6093      	str	r3, [r2, #8]
 800c3f2:	60d3      	str	r3, [r2, #12]
	plantar_params      = 	(Plantar_Params){0};
 800c3f4:	4b19      	ldr	r3, [pc, #100]	; (800c45c <Reset_Parameters+0xc0>)
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	6013      	str	r3, [r2, #0]
 800c3fc:	6053      	str	r3, [r2, #4]
 800c3fe:	6093      	str	r3, [r2, #8]
 800c400:	60d3      	str	r3, [r2, #12]
 800c402:	6113      	str	r3, [r2, #16]
 800c404:	6153      	str	r3, [r2, #20]
 800c406:	6193      	str	r3, [r2, #24]
	dorsi_params		= 	(Dorsi_Params){0};
 800c408:	4b15      	ldr	r3, [pc, #84]	; (800c460 <Reset_Parameters+0xc4>)
 800c40a:	461a      	mov	r2, r3
 800c40c:	2300      	movs	r3, #0
 800c40e:	6013      	str	r3, [r2, #0]
 800c410:	6053      	str	r3, [r2, #4]
 800c412:	6093      	str	r3, [r2, #8]
 800c414:	60d3      	str	r3, [r2, #12]
 800c416:	6113      	str	r3, [r2, #16]
 800c418:	6153      	str	r3, [r2, #20]
 800c41a:	6193      	str	r3, [r2, #24]
	assist_params		= 	(Assist_Params){0};
 800c41c:	4b11      	ldr	r3, [pc, #68]	; (800c464 <Reset_Parameters+0xc8>)
 800c41e:	2200      	movs	r2, #0
 800c420:	601a      	str	r2, [r3, #0]
 800c422:	809a      	strh	r2, [r3, #4]

	walking 				=	0;
 800c424:	4b10      	ldr	r3, [pc, #64]	; (800c468 <Reset_Parameters+0xcc>)
 800c426:	2200      	movs	r2, #0
 800c428:	701a      	strb	r2, [r3, #0]
	attach_plane 			=	e_LEFT_SAGITAL;
 800c42a:	4b10      	ldr	r3, [pc, #64]	; (800c46c <Reset_Parameters+0xd0>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	701a      	strb	r2, [r3, #0]
	wc_test					= 	0.0;
 800c430:	4b0f      	ldr	r3, [pc, #60]	; (800c470 <Reset_Parameters+0xd4>)
 800c432:	f04f 0200 	mov.w	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
}
 800c438:	bf00      	nop
 800c43a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	24000810 	.word	0x24000810
 800c448:	24000858 	.word	0x24000858
 800c44c:	2400088c 	.word	0x2400088c
 800c450:	24000898 	.word	0x24000898
 800c454:	240008c4 	.word	0x240008c4
 800c458:	2400090c 	.word	0x2400090c
 800c45c:	2400091c 	.word	0x2400091c
 800c460:	24000938 	.word	0x24000938
 800c464:	24000954 	.word	0x24000954
 800c468:	24000960 	.word	0x24000960
 800c46c:	24000961 	.word	0x24000961
 800c470:	2400095c 	.word	0x2400095c

0800c474 <Set_Initial_Angle_Values>:


static void Set_Initial_Angle_Values(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, float t_initial_angle)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	ed87 0a01 	vstr	s0, [r7, #4]
    t_thigh_angle_params->deg_acc_filtered = t_initial_angle;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	60da      	str	r2, [r3, #12]
    t_thigh_angle_params->deg_gyr_filtered = 0;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f04f 0200 	mov.w	r2, #0
 800c48e:	611a      	str	r2, [r3, #16]
    t_thigh_angle_params->deg_LPF_1st[0] = t_initial_angle;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	629a      	str	r2, [r3, #40]	; 0x28
    t_thigh_angle_params->deg_LPF_1st[1] = t_initial_angle;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	62da      	str	r2, [r3, #44]	; 0x2c
    t_thigh_angle_params->deg_LPF_2nd[0] = t_initial_angle;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	631a      	str	r2, [r3, #48]	; 0x30
    t_thigh_angle_params->deg_LPF_2nd[1] = t_initial_angle;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	635a      	str	r2, [r3, #52]	; 0x34
    t_norm_params->deg_o = t_initial_angle;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	601a      	str	r2, [r3, #0]
}
 800c4ae:	bf00      	nop
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <Calculate_Initial_Thigh_Angle>:

/*
 *Function to calculate the initial thigh angle
*/
static void Calculate_Initial_Thigh_Angle(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, ICMObject* t_icm_obj, Sensor_Params* t_sensor_params, AttachPlane t_attach_plane)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b088      	sub	sp, #32
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	60f8      	str	r0, [r7, #12]
 800c4c2:	60b9      	str	r1, [r7, #8]
 800c4c4:	607a      	str	r2, [r7, #4]
 800c4c6:	603b      	str	r3, [r7, #0]
	uint8_t t_total_samples = 100;
 800c4c8:	2364      	movs	r3, #100	; 0x64
 800c4ca:	75bb      	strb	r3, [r7, #22]
	float t_accumulated_angle = 0.0;
 800c4cc:	f04f 0300 	mov.w	r3, #0
 800c4d0:	61fb      	str	r3, [r7, #28]
	uint8_t data_check = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	757b      	strb	r3, [r7, #21]
	float t_init_thigh_angle = 0.0;
 800c4d6:	f04f 0300 	mov.w	r3, #0
 800c4da:	61bb      	str	r3, [r7, #24]

	for (uint8_t i = 1; i <= t_total_samples; i++){
 800c4dc:	2301      	movs	r3, #1
 800c4de:	75fb      	strb	r3, [r7, #23]
 800c4e0:	e034      	b.n	800c54c <Calculate_Initial_Thigh_Angle+0x92>
        data_check = Read_Data_ICM(t_icm_obj);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fd30 	bl	800bf48 <Read_Data_ICM>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	757b      	strb	r3, [r7, #21]

    	t_sensor_params->accX[0] = t_icm_obj->acc_x;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	601a      	str	r2, [r3, #0]
    	t_sensor_params->accY[0] = t_icm_obj->acc_y;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68da      	ldr	r2, [r3, #12]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	609a      	str	r2, [r3, #8]
    	t_sensor_params->gyrZ[0] = t_icm_obj->gyr_z;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	69da      	ldr	r2, [r3, #28]
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	629a      	str	r2, [r3, #40]	; 0x28

        if (data_check == 0){
 800c504:	7d7b      	ldrb	r3, [r7, #21]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d11d      	bne.n	800c546 <Calculate_Initial_Thigh_Angle+0x8c>
    		/* Calculate the accelerometer angle (in degrees) */
            float accelerometer_angle = 0.0;
 800c50a:	f04f 0300 	mov.w	r3, #0
 800c50e:	613b      	str	r3, [r7, #16]

            accelerometer_angle = Get_Angle_Scenario(t_sensor_params, t_attach_plane);
 800c510:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c514:	4619      	mov	r1, r3
 800c516:	6838      	ldr	r0, [r7, #0]
 800c518:	f001 fb26 	bl	800db68 <Get_Angle_Scenario>
 800c51c:	ed87 0a04 	vstr	s0, [r7, #16]

    		/* Accumulate the accelerometer angle */
            t_accumulated_angle += accelerometer_angle;
 800c520:	ed97 7a07 	vldr	s14, [r7, #28]
 800c524:	edd7 7a04 	vldr	s15, [r7, #16]
 800c528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c52c:	edc7 7a07 	vstr	s15, [r7, #28]

    		/* Calculate and update the initial thigh angle (average) */
            t_init_thigh_angle = t_accumulated_angle / ((float)i);
 800c530:	7dfb      	ldrb	r3, [r7, #23]
 800c532:	ee07 3a90 	vmov	s15, r3
 800c536:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c53a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c53e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c542:	edc7 7a06 	vstr	s15, [r7, #24]
	for (uint8_t i = 1; i <= t_total_samples; i++){
 800c546:	7dfb      	ldrb	r3, [r7, #23]
 800c548:	3301      	adds	r3, #1
 800c54a:	75fb      	strb	r3, [r7, #23]
 800c54c:	7dfa      	ldrb	r2, [r7, #23]
 800c54e:	7dbb      	ldrb	r3, [r7, #22]
 800c550:	429a      	cmp	r2, r3
 800c552:	d9c6      	bls.n	800c4e2 <Calculate_Initial_Thigh_Angle+0x28>
        }
    }

	t_thigh_angle_params->angle_init = t_init_thigh_angle;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	69ba      	ldr	r2, [r7, #24]
 800c558:	601a      	str	r2, [r3, #0]
    Set_Initial_Angle_Values(t_thigh_angle_params, t_norm_params, t_init_thigh_angle);
 800c55a:	ed97 0a06 	vldr	s0, [r7, #24]
 800c55e:	68b9      	ldr	r1, [r7, #8]
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7ff ff87 	bl	800c474 <Set_Initial_Angle_Values>
}
 800c566:	bf00      	nop
 800c568:	3720      	adds	r7, #32
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <Run_Complementary_Filter>:

/*
 *Function to execute the time-varying complementary filter (with Fuzzy Logic - wc)
*/
static void Run_Complementary_Filter(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Fuzzy_Params* t_fuzzy_params, float t_sampling_Period, AttachPlane t_attach_plane)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b086      	sub	sp, #24
 800c572:	af00      	add	r7, sp, #0
 800c574:	6178      	str	r0, [r7, #20]
 800c576:	6139      	str	r1, [r7, #16]
 800c578:	60fa      	str	r2, [r7, #12]
 800c57a:	ed87 0a02 	vstr	s0, [r7, #8]
 800c57e:	71fb      	strb	r3, [r7, #7]
	/* Apply time-varying complementary filter on the sensor data using fuzzy logic(wc) and update the thigh angle parameters */
	Run_TVCF(t_sensor_params, t_thigh_angle_params, t_fuzzy_params->wc, t_sampling_Period, t_attach_plane);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	edd3 7a04 	vldr	s15, [r3, #16]
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	461a      	mov	r2, r3
 800c58a:	edd7 0a02 	vldr	s1, [r7, #8]
 800c58e:	eeb0 0a67 	vmov.f32	s0, s15
 800c592:	6939      	ldr	r1, [r7, #16]
 800c594:	6978      	ldr	r0, [r7, #20]
 800c596:	f000 ffd8 	bl	800d54a <Run_TVCF>
	/* Update the unfiltered thigh angle to be the same as the filtered thigh angle */
	t_thigh_angle_params->deg_tvcf[0] = t_thigh_angle_params->deg_tvcf_filtered;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	695a      	ldr	r2, [r3, #20]
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	621a      	str	r2, [r3, #32]
}
 800c5a2:	bf00      	nop
 800c5a4:	3718      	adds	r7, #24
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <Run_Normalization_And_Get_Gait_Phase>:

/*
 *Function to normalize sensor data and calculate the current phase of the gait
*/
static void Run_Normalization_And_Get_Gait_Phase(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b084      	sub	sp, #16
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	60f8      	str	r0, [r7, #12]
 800c5b2:	60b9      	str	r1, [r7, #8]
 800c5b4:	607a      	str	r2, [r7, #4]
	/* Prepare for circular normalization by finding the center point of the original ellipse */
	Prepare_for_Circular_Normalization(t_thigh_angle_params, t_norm_params, t_gait_params);
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	68b9      	ldr	r1, [r7, #8]
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f001 f91e 	bl	800d7fc <Prepare_for_Circular_Normalization>

	/* Normalize degree and velocity data based on calculated origin and amplitude */
	t_norm_params->deg_norm = (t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o) / t_norm_params->A_deg;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	edd3 7a00 	vldr	s15, [r3]
 800c5cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800c5d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	t_norm_params->vel_norm = (t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o) / t_norm_params->A_vel;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	edd3 7a01 	vldr	s15, [r3, #4]
 800c5ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800c5f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	/* Calculate and update the current phase of the gait */
	t_gait_params->gait_phase = Get_Current_Gait_Phase(t_norm_params, t_gait_params); // Current phase (0 ~ 100%)
 800c600:	6879      	ldr	r1, [r7, #4]
 800c602:	68b8      	ldr	r0, [r7, #8]
 800c604:	f001 f934 	bl	800d870 <Get_Current_Gait_Phase>
 800c608:	eef0 7a40 	vmov.f32	s15, s0
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800c612:	bf00      	nop
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	0000      	movs	r0, r0
 800c61c:	0000      	movs	r0, r0
	...

0800c620 <Reduce_Noise_In_Sensor_Data>:

/*
 *Function to reduce noise in sensor data
*/
static void Reduce_Noise_In_Sensor_Data(Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
	float t_dt = 1000.0;
 800c62a:	4b49      	ldr	r3, [pc, #292]	; (800c750 <Reduce_Noise_In_Sensor_Data+0x130>)
 800c62c:	617b      	str	r3, [r7, #20]
	float w_target = Get_Max_Float(0.3, t_dt/t_gait_params->gait_period);
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	881b      	ldrh	r3, [r3, #0]
 800c632:	ee07 3a90 	vmov	s15, r3
 800c636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c63a:	ed97 7a05 	vldr	s14, [r7, #20]
 800c63e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c642:	eef0 0a66 	vmov.f32	s1, s13
 800c646:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800c754 <Reduce_Noise_In_Sensor_Data+0x134>
 800c64a:	f000 ffd2 	bl	800d5f2 <Get_Max_Float>
 800c64e:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_lpf_freq = 2.5 * w_target * 2 * PI;
 800c652:	edd7 7a04 	vldr	s15, [r7, #16]
 800c656:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c65a:	eeb0 6b04 	vmov.f64	d6, #4	; 0x40200000  2.5
 800c65e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c662:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c666:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800c748 <Reduce_Noise_In_Sensor_Data+0x128>
 800c66a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c66e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c672:	edc7 7a03 	vstr	s15, [r7, #12]

	/* First LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_1st[0] = Perform_LPF_on_Acc(
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	edd3 7a08 	vldr	s15, [r3, #32]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800c682:	eddf 1a35 	vldr	s3, [pc, #212]	; 800c758 <Reduce_Noise_In_Sensor_Data+0x138>
 800c686:	ed97 1a03 	vldr	s2, [r7, #12]
 800c68a:	eef0 0a47 	vmov.f32	s1, s14
 800c68e:	eeb0 0a67 	vmov.f32	s0, s15
 800c692:	f000 fefc 	bl	800d48e <Perform_LPF_on_Acc>
 800c696:	eef0 7a40 	vmov.f32	s15, s0
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_2nd[0] = Perform_LPF_on_Acc(
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800c6ac:	eddf 1a2a 	vldr	s3, [pc, #168]	; 800c758 <Reduce_Noise_In_Sensor_Data+0x138>
 800c6b0:	ed97 1a03 	vldr	s2, [r7, #12]
 800c6b4:	eef0 0a47 	vmov.f32	s1, s14
 800c6b8:	eeb0 0a67 	vmov.f32	s0, s15
 800c6bc:	f000 fee7 	bl	800d48e <Perform_LPF_on_Acc>
 800c6c0:	eef0 7a40 	vmov.f32	s15, s0
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Compute raw velocity from angle data */
	t_thigh_angle_params->vel_raw[0] = (t_thigh_angle_params->deg_tvcf[0] - t_thigh_angle_params->deg_tvcf[1]) * t_dt;											// dt = 0.001sec
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	ed93 7a08 	vldr	s14, [r3, #32]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800c6d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6da:	edd7 7a05 	vldr	s15, [r7, #20]
 800c6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	edc3 7a06 	vstr	s15, [r3, #24]

	/* First LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_1st[0] = Perform_LPF_on_Acc(
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	edd3 7a06 	vldr	s15, [r3, #24]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800c6f4:	eddf 1a18 	vldr	s3, [pc, #96]	; 800c758 <Reduce_Noise_In_Sensor_Data+0x138>
 800c6f8:	ed97 1a03 	vldr	s2, [r7, #12]
 800c6fc:	eef0 0a47 	vmov.f32	s1, s14
 800c700:	eeb0 0a67 	vmov.f32	s0, s15
 800c704:	f000 fec3 	bl	800d48e <Perform_LPF_on_Acc>
 800c708:	eef0 7a40 	vmov.f32	s15, s0
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_2nd[0] = Perform_LPF_on_Acc(
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800c71e:	eddf 1a0e 	vldr	s3, [pc, #56]	; 800c758 <Reduce_Noise_In_Sensor_Data+0x138>
 800c722:	ed97 1a03 	vldr	s2, [r7, #12]
 800c726:	eef0 0a47 	vmov.f32	s1, s14
 800c72a:	eeb0 0a67 	vmov.f32	s0, s15
 800c72e:	f000 feae 	bl	800d48e <Perform_LPF_on_Acc>
 800c732:	eef0 7a40 	vmov.f32	s15, s0
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		t_thigh_angle_params->vel_LPF_1st[0],
		t_thigh_angle_params->vel_LPF_2nd[1],
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);
}
 800c73c:	bf00      	nop
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	f3af 8000 	nop.w
 800c748:	fc8b007a 	.word	0xfc8b007a
 800c74c:	400921fa 	.word	0x400921fa
 800c750:	447a0000 	.word	0x447a0000
 800c754:	3e99999a 	.word	0x3e99999a
 800c758:	3a83126f 	.word	0x3a83126f

0800c75c <Compute_Phase_Radius>:

/*
 *This function calculates and returns the phase radius
*/
static float Compute_Phase_Radius(float t_deg_diff, float t_deg_th, float t_vel_diff, float t_vel_th)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	ed87 0a03 	vstr	s0, [r7, #12]
 800c766:	edc7 0a02 	vstr	s1, [r7, #8]
 800c76a:	ed87 1a01 	vstr	s2, [r7, #4]
 800c76e:	edc7 1a00 	vstr	s3, [r7]
    /* Calculate degree ratio */
    float t_deg_ratio = t_deg_diff / t_deg_th;
 800c772:	edd7 6a03 	vldr	s13, [r7, #12]
 800c776:	ed97 7a02 	vldr	s14, [r7, #8]
 800c77a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c77e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Calculate velocity ratio */
    float t_vel_ratio = t_vel_diff / t_vel_th;
 800c782:	edd7 6a01 	vldr	s13, [r7, #4]
 800c786:	ed97 7a00 	vldr	s14, [r7]
 800c78a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c78e:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Calculate and return the phase radius */
    return Calculate_Square_Root_Sum(t_deg_ratio, t_vel_ratio);
 800c792:	edd7 0a04 	vldr	s1, [r7, #16]
 800c796:	ed97 0a05 	vldr	s0, [r7, #20]
 800c79a:	f000 fd17 	bl	800d1cc <Calculate_Square_Root_Sum>
 800c79e:	eef0 7a40 	vmov.f32	s15, s0
}
 800c7a2:	eeb0 0a67 	vmov.f32	s0, s15
 800c7a6:	3718      	adds	r7, #24
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <Update_Walking_State>:

/*
 *This function updates the walking state based on the phase radii and sum_i
*/
static void Update_Walking_State(uint8_t* t_walking, float t_phase_radius_start, float t_phase_radius_stop, int16_t t_sum_i)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	ed87 0a02 	vstr	s0, [r7, #8]
 800c7b8:	edc7 0a01 	vstr	s1, [r7, #4]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	807b      	strh	r3, [r7, #2]
    /* The walking state is updated based on the current walking state, phase radii, and t_sum_i */
    switch (*t_walking)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d01d      	beq.n	800c804 <Update_Walking_State+0x58>
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	dc23      	bgt.n	800c814 <Update_Walking_State+0x68>
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <Update_Walking_State+0x2a>
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d00e      	beq.n	800c7f2 <Update_Walking_State+0x46>
 800c7d4:	e01e      	b.n	800c814 <Update_Walking_State+0x68>
    {
        case e_STOP:
            /* If the start phase radius is greater than 1, set the walking state to 1 */
            if (t_phase_radius_start > 1){
 800c7d6:	edd7 7a02 	vldr	s15, [r7, #8]
 800c7da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e6:	dc00      	bgt.n	800c7ea <Update_Walking_State+0x3e>
                *t_walking = 1;
            }
            break;
 800c7e8:	e025      	b.n	800c836 <Update_Walking_State+0x8a>
                *t_walking = 1;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	701a      	strb	r2, [r3, #0]
            break;
 800c7f0:	e021      	b.n	800c836 <Update_Walking_State+0x8a>
        case e_WALKING_START:
            /* If sum_i is greater than 1000, set the walking state to 2 */
            if (t_sum_i > 1000){
 800c7f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7fa:	dd19      	ble.n	800c830 <Update_Walking_State+0x84>
                *t_walking = 2;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2202      	movs	r2, #2
 800c800:	701a      	strb	r2, [r3, #0]
            }
            break;
 800c802:	e015      	b.n	800c830 <Update_Walking_State+0x84>
        case e_WALKING_HALF:
            /* If sum_i is 0, set the walking state to 3 */
            if (t_sum_i == 0){
 800c804:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d113      	bne.n	800c834 <Update_Walking_State+0x88>
                *t_walking = 3;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2203      	movs	r2, #3
 800c810:	701a      	strb	r2, [r3, #0]
            }
            break;
 800c812:	e00f      	b.n	800c834 <Update_Walking_State+0x88>
        default:
            /* If the stop phase radius is less than 1, set the walking state to 0 */
            if (t_phase_radius_stop < 1){
 800c814:	edd7 7a01 	vldr	s15, [r7, #4]
 800c818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c81c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c824:	d400      	bmi.n	800c828 <Update_Walking_State+0x7c>
                *t_walking = 0;
            }
            break;
 800c826:	e006      	b.n	800c836 <Update_Walking_State+0x8a>
                *t_walking = 0;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	701a      	strb	r2, [r3, #0]
            break;
 800c82e:	e002      	b.n	800c836 <Update_Walking_State+0x8a>
            break;
 800c830:	bf00      	nop
 800c832:	e000      	b.n	800c836 <Update_Walking_State+0x8a>
            break;
 800c834:	bf00      	nop
    }
}
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
	...

0800c844 <Check_Walking_State>:

/*
*This function checks the walking state using the walking parameters and IMU system information
*/
static void Check_Walking_State(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Threshold_Params* t_th_params, Gait_Params* t_gait_params, uint8_t* t_walking)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
	float t_deg_diff = 0.0;
 800c852:	f04f 0300 	mov.w	r3, #0
 800c856:	61fb      	str	r3, [r7, #28]
	float t_vel_diff = 0.0;
 800c858:	f04f 0300 	mov.w	r3, #0
 800c85c:	61bb      	str	r3, [r7, #24]
	float t_phase_radius_start = 0.0;
 800c85e:	f04f 0300 	mov.w	r3, #0
 800c862:	617b      	str	r3, [r7, #20]
	float t_phase_radius_stop = 0.0;
 800c864:	f04f 0300 	mov.w	r3, #0
 800c868:	613b      	str	r3, [r7, #16]

    /* Get the relevant values from the walking parameters and IMU system */
    t_deg_diff = t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	edd3 7a00 	vldr	s15, [r3]
 800c876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c87a:	edc7 7a07 	vstr	s15, [r7, #28]
    t_vel_diff = t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	edd3 7a01 	vldr	s15, [r3, #4]
 800c88a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c88e:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Calculate the start and stop phase radii */
    t_phase_radius_start = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_start, t_vel_diff, t_th_params->vel_th_start);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	edd3 7a00 	vldr	s15, [r3]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c89e:	eef0 1a47 	vmov.f32	s3, s14
 800c8a2:	ed97 1a06 	vldr	s2, [r7, #24]
 800c8a6:	eef0 0a67 	vmov.f32	s1, s15
 800c8aa:	ed97 0a07 	vldr	s0, [r7, #28]
 800c8ae:	f7ff ff55 	bl	800c75c <Compute_Phase_Radius>
 800c8b2:	ed87 0a05 	vstr	s0, [r7, #20]
    t_phase_radius_stop = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_stop, t_vel_diff, t_th_params->vel_th_stop);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	edd3 7a02 	vldr	s15, [r3, #8]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	ed93 7a03 	vldr	s14, [r3, #12]
 800c8c2:	eef0 1a47 	vmov.f32	s3, s14
 800c8c6:	ed97 1a06 	vldr	s2, [r7, #24]
 800c8ca:	eef0 0a67 	vmov.f32	s1, s15
 800c8ce:	ed97 0a07 	vldr	s0, [r7, #28]
 800c8d2:	f7ff ff43 	bl	800c75c <Compute_Phase_Radius>
 800c8d6:	ed87 0a04 	vstr	s0, [r7, #16]

    /* Update the walking state based on the phase radii and sum_i */
    Update_Walking_State(t_walking, t_phase_radius_start, t_phase_radius_stop, t_norm_params->sum_i);
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	8a1b      	ldrh	r3, [r3, #16]
 800c8de:	b21b      	sxth	r3, r3
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	edd7 0a04 	vldr	s1, [r7, #16]
 800c8e6:	ed97 0a05 	vldr	s0, [r7, #20]
 800c8ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ec:	f7ff ff5e 	bl	800c7ac <Update_Walking_State>

    /* If the walking state is 0 or 1, set the gait phase to -100 */
    if (*t_walking == 0 || *t_walking == 1){
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d003      	beq.n	800c900 <Check_Walking_State+0xbc>
 800c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d102      	bne.n	800c906 <Check_Walking_State+0xc2>
        t_gait_params->gait_phase = -100;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	4a03      	ldr	r2, [pc, #12]	; (800c910 <Check_Walking_State+0xcc>)
 800c904:	605a      	str	r2, [r3, #4]
    }
}
 800c906:	bf00      	nop
 800c908:	3720      	adds	r7, #32
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	c2c80000 	.word	0xc2c80000

0800c914 <Setting_Assist_Time>:


static void Setting_Assist_Time(Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
 800c920:	603b      	str	r3, [r7, #0]
	Set_Assist_Force_Timing_Params(t_plantar_params, t_dorsi_params, t_assist_params, t_gait_params);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	68b9      	ldr	r1, [r7, #8]
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f001 f8bf 	bl	800daac <Set_Assist_Force_Timing_Params>
}
 800c92e:	bf00      	nop
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <Update_IMU_Raw_Value>:

/*
*The function Update_IMU_Raw_Value updates the IMU raw values.
*/
static void Update_IMU_Raw_Value(Sensor_Params* t_sensor_params, ICMObject* t_icm_obj, BMObject* t_bm_obj, AttachPlane t_attach_plane)
{
 800c936:	b480      	push	{r7}
 800c938:	b085      	sub	sp, #20
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	607a      	str	r2, [r7, #4]
 800c942:	70fb      	strb	r3, [r7, #3]
	t_sensor_params->accX[0] = t_icm_obj->acc_x;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	689a      	ldr	r2, [r3, #8]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	601a      	str	r2, [r3, #0]
	t_sensor_params->accY[0] = t_icm_obj->acc_y;
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	68da      	ldr	r2, [r3, #12]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	609a      	str	r2, [r3, #8]
	t_sensor_params->accZ[0] = t_icm_obj->acc_z;
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	691a      	ldr	r2, [r3, #16]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	611a      	str	r2, [r3, #16]

	t_sensor_params->gyrX[0] = t_icm_obj->gyr_x;
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	695a      	ldr	r2, [r3, #20]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	619a      	str	r2, [r3, #24]
	t_sensor_params->gyrY[0] = t_icm_obj->gyr_y;
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	699a      	ldr	r2, [r3, #24]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	621a      	str	r2, [r3, #32]

	if (t_attach_plane < 4){
 800c96c:	78fb      	ldrb	r3, [r7, #3]
 800c96e:	2b03      	cmp	r3, #3
 800c970:	d808      	bhi.n	800c984 <Update_IMU_Raw_Value+0x4e>
		t_sensor_params->gyrZ[0] = (-1) * (t_icm_obj->gyr_z); 	// For Left Sagital case
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	edd3 7a07 	vldr	s15, [r3, #28]
 800c978:	eef1 7a67 	vneg.f32	s15, s15
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		t_sensor_params->gyrZ[0] = t_icm_obj->gyr_z; 	// For Right Sagital case
	}
//	t_sensor_params->magX[0] = t_mag_data->mag_x;
//	t_sensor_params->magY[0] = t_mag_data->mag_y;
//	t_sensor_params->magZ[0] = t_mag_data->mag_z;
}
 800c982:	e006      	b.n	800c992 <Update_IMU_Raw_Value+0x5c>
	else if (t_attach_plane >= 4){
 800c984:	78fb      	ldrb	r3, [r7, #3]
 800c986:	2b03      	cmp	r3, #3
 800c988:	d903      	bls.n	800c992 <Update_IMU_Raw_Value+0x5c>
		t_sensor_params->gyrZ[0] = t_icm_obj->gyr_z; 	// For Right Sagital case
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	69da      	ldr	r2, [r3, #28]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c992:	bf00      	nop
 800c994:	3714      	adds	r7, #20
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
	...

0800c9a0 <Run_Total_function>:

 */


static int Run_Total_function()
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af02      	add	r7, sp, #8
//	thigh_angle_tvcf_demo = (-1) * thigh_angle_params.deg_tvcf_filtered;

	Save_Previous_Value(&sensor_params, &thigh_angle_params, &gait_params);
 800c9a6:	4a23      	ldr	r2, [pc, #140]	; (800ca34 <Run_Total_function+0x94>)
 800c9a8:	4923      	ldr	r1, [pc, #140]	; (800ca38 <Run_Total_function+0x98>)
 800c9aa:	4824      	ldr	r0, [pc, #144]	; (800ca3c <Run_Total_function+0x9c>)
 800c9ac:	f000 fbda 	bl	800d164 <Save_Previous_Value>

//	uint8_t t_3axis_res = Get_Value_3Axis_IMU(&mag_data);
//	if (t_3axis_res != NO_ERROR) { Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR; }
	uint8_t t_6axis_res = Read_Data_ICM(&icm20608g_obj);
 800c9b0:	4823      	ldr	r0, [pc, #140]	; (800ca40 <Run_Total_function+0xa0>)
 800c9b2:	f7ff fac9 	bl	800bf48 <Read_Data_ICM>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	71fb      	strb	r3, [r7, #7]
	uint8_t t_3axis_res = Read_Data_BM(&bm1422agmv_obj);
 800c9ba:	4822      	ldr	r0, [pc, #136]	; (800ca44 <Run_Total_function+0xa4>)
 800c9bc:	f7fe fd34 	bl	800b428 <Read_Data_BM>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	71bb      	strb	r3, [r7, #6]
//	if (t_6axis_res != NO_ERROR) { Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR; }

	Update_IMU_Raw_Value(&sensor_params, &icm20608g_obj, &bm1422agmv_obj, attach_plane);
 800c9c4:	4b20      	ldr	r3, [pc, #128]	; (800ca48 <Run_Total_function+0xa8>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	4a1e      	ldr	r2, [pc, #120]	; (800ca44 <Run_Total_function+0xa4>)
 800c9ca:	491d      	ldr	r1, [pc, #116]	; (800ca40 <Run_Total_function+0xa0>)
 800c9cc:	481b      	ldr	r0, [pc, #108]	; (800ca3c <Run_Total_function+0x9c>)
 800c9ce:	f7ff ffb2 	bl	800c936 <Update_IMU_Raw_Value>

	Generate_Fuzzy_Input(&sensor_params, &fuzzy_params);
 800c9d2:	491e      	ldr	r1, [pc, #120]	; (800ca4c <Run_Total_function+0xac>)
 800c9d4:	4819      	ldr	r0, [pc, #100]	; (800ca3c <Run_Total_function+0x9c>)
 800c9d6:	f000 fcab 	bl	800d330 <Generate_Fuzzy_Input>
	wc_test = Calculate_Fuzzy_Wc(&fuzzy_params);
 800c9da:	481c      	ldr	r0, [pc, #112]	; (800ca4c <Run_Total_function+0xac>)
 800c9dc:	f000 fd0c 	bl	800d3f8 <Calculate_Fuzzy_Wc>
 800c9e0:	eef0 7a40 	vmov.f32	s15, s0
 800c9e4:	4b1a      	ldr	r3, [pc, #104]	; (800ca50 <Run_Total_function+0xb0>)
 800c9e6:	edc3 7a00 	vstr	s15, [r3]

	Run_Complementary_Filter(&sensor_params, &thigh_angle_params, &fuzzy_params, IMU_CONTROL_PERIOD, attach_plane);
 800c9ea:	4b17      	ldr	r3, [pc, #92]	; (800ca48 <Run_Total_function+0xa8>)
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ca54 <Run_Total_function+0xb4>
 800c9f2:	4a16      	ldr	r2, [pc, #88]	; (800ca4c <Run_Total_function+0xac>)
 800c9f4:	4910      	ldr	r1, [pc, #64]	; (800ca38 <Run_Total_function+0x98>)
 800c9f6:	4811      	ldr	r0, [pc, #68]	; (800ca3c <Run_Total_function+0x9c>)
 800c9f8:	f7ff fdb9 	bl	800c56e <Run_Complementary_Filter>

	Reduce_Noise_In_Sensor_Data(&thigh_angle_params, &gait_params);
 800c9fc:	490d      	ldr	r1, [pc, #52]	; (800ca34 <Run_Total_function+0x94>)
 800c9fe:	480e      	ldr	r0, [pc, #56]	; (800ca38 <Run_Total_function+0x98>)
 800ca00:	f7ff fe0e 	bl	800c620 <Reduce_Noise_In_Sensor_Data>

	Run_Normalization_And_Get_Gait_Phase(&thigh_angle_params, &norm_params, &gait_params);
 800ca04:	4a0b      	ldr	r2, [pc, #44]	; (800ca34 <Run_Total_function+0x94>)
 800ca06:	4914      	ldr	r1, [pc, #80]	; (800ca58 <Run_Total_function+0xb8>)
 800ca08:	480b      	ldr	r0, [pc, #44]	; (800ca38 <Run_Total_function+0x98>)
 800ca0a:	f7ff fdce 	bl	800c5aa <Run_Normalization_And_Get_Gait_Phase>

	Check_Walking_State(&thigh_angle_params, &norm_params, &th_params, &gait_params, &walking);
 800ca0e:	4b13      	ldr	r3, [pc, #76]	; (800ca5c <Run_Total_function+0xbc>)
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	4b08      	ldr	r3, [pc, #32]	; (800ca34 <Run_Total_function+0x94>)
 800ca14:	4a12      	ldr	r2, [pc, #72]	; (800ca60 <Run_Total_function+0xc0>)
 800ca16:	4910      	ldr	r1, [pc, #64]	; (800ca58 <Run_Total_function+0xb8>)
 800ca18:	4807      	ldr	r0, [pc, #28]	; (800ca38 <Run_Total_function+0x98>)
 800ca1a:	f7ff ff13 	bl	800c844 <Check_Walking_State>

	Setting_Assist_Time(&plantar_params, &dorsi_params, &assist_params, &gait_params);
 800ca1e:	4b05      	ldr	r3, [pc, #20]	; (800ca34 <Run_Total_function+0x94>)
 800ca20:	4a10      	ldr	r2, [pc, #64]	; (800ca64 <Run_Total_function+0xc4>)
 800ca22:	4911      	ldr	r1, [pc, #68]	; (800ca68 <Run_Total_function+0xc8>)
 800ca24:	4811      	ldr	r0, [pc, #68]	; (800ca6c <Run_Total_function+0xcc>)
 800ca26:	f7ff ff75 	bl	800c914 <Setting_Assist_Time>

//	// Msg_Hdlr problem //
//	Setting_Assist_Force_and_Time(&assist_params, &gait_params);
//	Set_Trigger(&assist_params, &gait_params, walking);

	return 0;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	2400088c 	.word	0x2400088c
 800ca38:	240008c4 	.word	0x240008c4
 800ca3c:	24000810 	.word	0x24000810
 800ca40:	240007dc 	.word	0x240007dc
 800ca44:	240007fc 	.word	0x240007fc
 800ca48:	24000961 	.word	0x24000961
 800ca4c:	24000898 	.word	0x24000898
 800ca50:	2400095c 	.word	0x2400095c
 800ca54:	3a83126f 	.word	0x3a83126f
 800ca58:	24000858 	.word	0x24000858
 800ca5c:	24000960 	.word	0x24000960
 800ca60:	2400090c 	.word	0x2400090c
 800ca64:	24000954 	.word	0x24000954
 800ca68:	24000938 	.word	0x24000938
 800ca6c:	2400091c 	.word	0x2400091c

0800ca70 <Get_State_Callback>:
 \__ \ |) | (_) | | (__/ _` | | | '_ \/ _` / _| / /(_-<
 |___/___/ \___/   \___\__,_|_|_|_.__/\__,_\__|_\_\/__/

 */

MSG_COMMON_SDO_CALLBACK(imu_ctrl_task)
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	711a      	strb	r2, [r3, #4]
 800ca80:	2001      	movs	r0, #1
 800ca82:	f003 f92d 	bl	800fce0 <malloc>
 800ca86:	4603      	mov	r3, r0
 800ca88:	461a      	mov	r2, r3
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	601a      	str	r2, [r3, #0]
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a04      	ldr	r2, [pc, #16]	; (800caa4 <Get_State_Callback+0x34>)
 800ca94:	7b12      	ldrb	r2, [r2, #12]
 800ca96:	701a      	strb	r2, [r3, #0]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	721a      	strb	r2, [r3, #8]
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	24000714 	.word	0x24000714

0800caa8 <Set_State_Callback>:
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	73fb      	strb	r3, [r7, #15]
 800caba:	7bfb      	ldrb	r3, [r7, #15]
 800cabc:	4619      	mov	r1, r3
 800cabe:	4807      	ldr	r0, [pc, #28]	; (800cadc <Set_State_Callback+0x34>)
 800cac0:	f003 f866 	bl	800fb90 <Transition_State>
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	2200      	movs	r2, #0
 800cac8:	601a      	str	r2, [r3, #0]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2200      	movs	r2, #0
 800cace:	711a      	strb	r2, [r3, #4]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2200      	movs	r2, #0
 800cad4:	721a      	strb	r2, [r3, #8]
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	24000720 	.word	0x24000720

0800cae0 <Get_Routine_Callback>:
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2200      	movs	r2, #0
 800caee:	721a      	strb	r2, [r3, #8]
 800caf0:	4b18      	ldr	r3, [pc, #96]	; (800cb54 <Get_Routine_Callback+0x74>)
 800caf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	711a      	strb	r2, [r3, #4]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	791b      	ldrb	r3, [r3, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d024      	beq.n	800cb4c <Get_Routine_Callback+0x6c>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	88db      	ldrh	r3, [r3, #6]
 800cb06:	461a      	mov	r2, r3
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	791b      	ldrb	r3, [r3, #4]
 800cb0c:	fb02 f303 	mul.w	r3, r2, r3
 800cb10:	4618      	mov	r0, r3
 800cb12:	f003 f8e5 	bl	800fce0 <malloc>
 800cb16:	4603      	mov	r3, r0
 800cb18:	461a      	mov	r2, r3
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60fb      	str	r3, [r7, #12]
 800cb22:	e00d      	b.n	800cb40 <Get_Routine_Callback+0x60>
 800cb24:	4a0b      	ldr	r2, [pc, #44]	; (800cb54 <Get_Routine_Callback+0x74>)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	3310      	adds	r3, #16
 800cb2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	4413      	add	r3, r2
 800cb36:	b2ca      	uxtb	r2, r1
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	60fb      	str	r3, [r7, #12]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	791b      	ldrb	r3, [r3, #4]
 800cb44:	461a      	mov	r2, r3
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	dbeb      	blt.n	800cb24 <Get_Routine_Callback+0x44>
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	24000714 	.word	0x24000714

0800cb58 <Set_Routine_Callback>:
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2200      	movs	r2, #0
 800cb66:	711a      	strb	r2, [r3, #4]
 800cb68:	4828      	ldr	r0, [pc, #160]	; (800cc0c <Set_Routine_Callback+0xb4>)
 800cb6a:	f002 feb9 	bl	800f8e0 <Clear_Routines>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	791b      	ldrb	r3, [r3, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d103      	bne.n	800cb7e <Set_Routine_Callback+0x26>
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	721a      	strb	r2, [r3, #8]
 800cb7c:	e043      	b.n	800cc06 <Set_Routine_Callback+0xae>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	88db      	ldrh	r3, [r3, #6]
 800cb82:	461a      	mov	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	791b      	ldrb	r3, [r3, #4]
 800cb88:	fb02 f303 	mul.w	r3, r2, r3
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f003 f8a7 	bl	800fce0 <malloc>
 800cb92:	4603      	mov	r3, r0
 800cb94:	461a      	mov	r2, r3
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60fb      	str	r3, [r7, #12]
 800cb9e:	e020      	b.n	800cbe2 <Set_Routine_Callback+0x8a>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	4413      	add	r3, r2
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	72fb      	strb	r3, [r7, #11]
 800cbac:	7afb      	ldrb	r3, [r7, #11]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	4816      	ldr	r0, [pc, #88]	; (800cc0c <Set_Routine_Callback+0xb4>)
 800cbb2:	f002 feb1 	bl	800f918 <Push_Routine>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10f      	bne.n	800cbdc <Set_Routine_Callback+0x84>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	441a      	add	r2, r3
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	6819      	ldr	r1, [r3, #0]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	440b      	add	r3, r1
 800cbcc:	7812      	ldrb	r2, [r2, #0]
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	791b      	ldrb	r3, [r3, #4]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	b2da      	uxtb	r2, r3
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	711a      	strb	r2, [r3, #4]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	60fb      	str	r3, [r7, #12]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	791b      	ldrb	r3, [r3, #4]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	4293      	cmp	r3, r2
 800cbec:	dbd8      	blt.n	800cba0 <Set_Routine_Callback+0x48>
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	791a      	ldrb	r2, [r3, #4]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	791b      	ldrb	r3, [r3, #4]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d002      	beq.n	800cc00 <Set_Routine_Callback+0xa8>
 800cbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfe:	e000      	b.n	800cc02 <Set_Routine_Callback+0xaa>
 800cc00:	2200      	movs	r2, #0
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	721a      	strb	r2, [r3, #8]
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	24000754 	.word	0x24000754

0800cc10 <StateOff_Run>:
 \__ \  _/ _` |  _/ -_) | _| || | ' \/ _|  _| / _ \ ' \(_-<
 |___/\__\__,_|\__\___| |_| \_,_|_||_\__|\__|_\___/_||_/__/

 */
static void StateOff_Run( )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
	// TODO: I2C Initialization0


	i2c_6axis_res = Read_Data_ICM(&icm20608g_obj);
 800cc14:	4816      	ldr	r0, [pc, #88]	; (800cc70 <StateOff_Run+0x60>)
 800cc16:	f7ff f997 	bl	800bf48 <Read_Data_ICM>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4b15      	ldr	r3, [pc, #84]	; (800cc74 <StateOff_Run+0x64>)
 800cc20:	701a      	strb	r2, [r3, #0]
	i2c_3axis_res = Read_Data_BM(&bm1422agmv_obj);
 800cc22:	4815      	ldr	r0, [pc, #84]	; (800cc78 <StateOff_Run+0x68>)
 800cc24:	f7fe fc00 	bl	800b428 <Read_Data_BM>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	4b13      	ldr	r3, [pc, #76]	; (800cc7c <StateOff_Run+0x6c>)
 800cc2e:	701a      	strb	r2, [r3, #0]

	if (i2c_3axis_res == NO_ERROR && i2c_6axis_res == NO_ERROR){
 800cc30:	4b12      	ldr	r3, [pc, #72]	; (800cc7c <StateOff_Run+0x6c>)
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10c      	bne.n	800cc52 <StateOff_Run+0x42>
 800cc38:	4b0e      	ldr	r3, [pc, #56]	; (800cc74 <StateOff_Run+0x64>)
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d108      	bne.n	800cc52 <StateOff_Run+0x42>
		Push_Routine(&imu_ctrl_task.routine, ROUTINE_ID_IMU_TOTAL_FUNCTION);
 800cc40:	2105      	movs	r1, #5
 800cc42:	480f      	ldr	r0, [pc, #60]	; (800cc80 <StateOff_Run+0x70>)
 800cc44:	f002 fe68 	bl	800f918 <Push_Routine>
		Transition_State(&imu_ctrl_task.state_machine, e_State_Standby);
 800cc48:	2101      	movs	r1, #1
 800cc4a:	480e      	ldr	r0, [pc, #56]	; (800cc84 <StateOff_Run+0x74>)
 800cc4c:	f002 ffa0 	bl	800fb90 <Transition_State>
 800cc50:	e00c      	b.n	800cc6c <StateOff_Run+0x5c>
	}
	else{
		DeInit_ICM(&icm20608g_obj);
 800cc52:	4807      	ldr	r0, [pc, #28]	; (800cc70 <StateOff_Run+0x60>)
 800cc54:	f7ff f967 	bl	800bf26 <DeInit_ICM>
		DeInit_BM(&bm1422agmv_obj);
 800cc58:	4807      	ldr	r0, [pc, #28]	; (800cc78 <StateOff_Run+0x68>)
 800cc5a:	f7fe fbd4 	bl	800b406 <DeInit_BM>
		Init_ICM(&icm20608g_obj);
 800cc5e:	4804      	ldr	r0, [pc, #16]	; (800cc70 <StateOff_Run+0x60>)
 800cc60:	f7ff f951 	bl	800bf06 <Init_ICM>
		Init_BM(&bm1422agmv_obj);
 800cc64:	4804      	ldr	r0, [pc, #16]	; (800cc78 <StateOff_Run+0x68>)
 800cc66:	f7fe fbbe 	bl	800b3e6 <Init_BM>
	}

}
 800cc6a:	bf00      	nop
 800cc6c:	bf00      	nop
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	240007dc 	.word	0x240007dc
 800cc74:	2400000f 	.word	0x2400000f
 800cc78:	240007fc 	.word	0x240007fc
 800cc7c:	24000010 	.word	0x24000010
 800cc80:	24000754 	.word	0x24000754
 800cc84:	24000720 	.word	0x24000720

0800cc88 <StateStandby_Run>:

static void StateStandby_Run( )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	af00      	add	r7, sp, #0
	Transition_State(&imu_ctrl_task.state_machine, e_State_Enable);
 800cc8c:	2102      	movs	r1, #2
 800cc8e:	4802      	ldr	r0, [pc, #8]	; (800cc98 <StateStandby_Run+0x10>)
 800cc90:	f002 ff7e 	bl	800fb90 <Transition_State>
}
 800cc94:	bf00      	nop
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	24000720 	.word	0x24000720

0800cc9c <StateEnable_Ent>:

static void StateEnable_Ent()
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	af00      	add	r7, sp, #0

}
 800cca0:	bf00      	nop
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
	...

0800ccac <StateEnable_Run>:

static void StateEnable_Run( )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	af00      	add	r7, sp, #0
	Run_Routines(&imu_ctrl_task.routine);
 800ccb0:	4802      	ldr	r0, [pc, #8]	; (800ccbc <StateEnable_Run+0x10>)
 800ccb2:	f002 fd9f 	bl	800f7f4 <Run_Routines>
}
 800ccb6:	bf00      	nop
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	24000754 	.word	0x24000754

0800ccc0 <StateEnable_Ext>:

static void StateEnable_Ext()
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	af00      	add	r7, sp, #0

}
 800ccc4:	bf00      	nop
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr

0800ccce <StateError_Run>:

static void StateError_Run()
{
 800ccce:	b480      	push	{r7}
 800ccd0:	af00      	add	r7, sp, #0

}
 800ccd2:	bf00      	nop
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <Initial_ICM>:

static void Initial_ICM(uint8_t* aaa)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	*aaa = 13;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	220d      	movs	r2, #13
 800cce8:	701a      	strb	r2, [r3, #0]
}
 800ccea:	bf00      	nop
 800ccec:	370c      	adds	r7, #12
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
	...

0800ccf8 <Init_Imu_Ctrl>:
 |_|  |_\__,_|_|_||_|

 */

void Init_Imu_Ctrl(void)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b094      	sub	sp, #80	; 0x50
 800ccfc:	af04      	add	r7, sp, #16
    Init_Task(&imu_ctrl_task);
 800ccfe:	4896      	ldr	r0, [pc, #600]	; (800cf58 <Init_Imu_Ctrl+0x260>)
 800cd00:	f002 ff68 	bl	800fbd4 <Init_Task>

	/* State Definition */
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Off,      NULL,   			StateOff_Run,       NULL,         		 true);
 800cd04:	1d38      	adds	r0, r7, #4
 800cd06:	2300      	movs	r3, #0
 800cd08:	4a94      	ldr	r2, [pc, #592]	; (800cf5c <Init_Imu_Ctrl+0x264>)
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	f002 fe82 	bl	800fa14 <Create_State_Entity>
 800cd10:	2301      	movs	r3, #1
 800cd12:	9301      	str	r3, [sp, #4]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	1d3b      	adds	r3, r7, #4
 800cd1a:	cb0c      	ldmia	r3, {r2, r3}
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	488e      	ldr	r0, [pc, #568]	; (800cf58 <Init_Imu_Ctrl+0x260>)
 800cd20:	f002 ff77 	bl	800fc12 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Standby,  NULL,   			StateStandby_Run,	NULL,         		 false);
 800cd24:	f107 0010 	add.w	r0, r7, #16
 800cd28:	2300      	movs	r3, #0
 800cd2a:	4a8d      	ldr	r2, [pc, #564]	; (800cf60 <Init_Imu_Ctrl+0x268>)
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	f002 fe71 	bl	800fa14 <Create_State_Entity>
 800cd32:	2300      	movs	r3, #0
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	f107 0310 	add.w	r3, r7, #16
 800cd3e:	cb0c      	ldmia	r3, {r2, r3}
 800cd40:	2101      	movs	r1, #1
 800cd42:	4885      	ldr	r0, [pc, #532]	; (800cf58 <Init_Imu_Ctrl+0x260>)
 800cd44:	f002 ff65 	bl	800fc12 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Enable,   StateEnable_Ent,  	StateEnable_Run, 	StateEnable_Ext,	 false);
 800cd48:	f107 001c 	add.w	r0, r7, #28
 800cd4c:	4b85      	ldr	r3, [pc, #532]	; (800cf64 <Init_Imu_Ctrl+0x26c>)
 800cd4e:	4a86      	ldr	r2, [pc, #536]	; (800cf68 <Init_Imu_Ctrl+0x270>)
 800cd50:	4986      	ldr	r1, [pc, #536]	; (800cf6c <Init_Imu_Ctrl+0x274>)
 800cd52:	f002 fe5f 	bl	800fa14 <Create_State_Entity>
 800cd56:	2300      	movs	r3, #0
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	f107 031c 	add.w	r3, r7, #28
 800cd62:	cb0c      	ldmia	r3, {r2, r3}
 800cd64:	2102      	movs	r1, #2
 800cd66:	487c      	ldr	r0, [pc, #496]	; (800cf58 <Init_Imu_Ctrl+0x260>)
 800cd68:	f002 ff53 	bl	800fc12 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Error,    NULL,			  	StateError_Run,    	NULL,				 false);
 800cd6c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cd70:	2300      	movs	r3, #0
 800cd72:	4a7f      	ldr	r2, [pc, #508]	; (800cf70 <Init_Imu_Ctrl+0x278>)
 800cd74:	2100      	movs	r1, #0
 800cd76:	f002 fe4d 	bl	800fa14 <Create_State_Entity>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	9301      	str	r3, [sp, #4]
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd86:	cb0c      	ldmia	r3, {r2, r3}
 800cd88:	2103      	movs	r1, #3
 800cd8a:	4873      	ldr	r0, [pc, #460]	; (800cf58 <Init_Imu_Ctrl+0x260>)
 800cd8c:	f002 ff41 	bl	800fc12 <Set_Task_State_Entity>

	/* Routine Definition */
	TASK_CREATE_ROUTINE(&imu_ctrl_task, ROUTINE_ID_IMU_TOTAL_FUNCTION, 		NULL, Run_Total_function, 		NULL);
 800cd90:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800cd94:	2300      	movs	r3, #0
 800cd96:	4a77      	ldr	r2, [pc, #476]	; (800cf74 <Init_Imu_Ctrl+0x27c>)
 800cd98:	2100      	movs	r1, #0
 800cd9a:	f002 fc97 	bl	800f6cc <Create_Routine_Entity>
 800cd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cda6:	cb0c      	ldmia	r3, {r2, r3}
 800cda8:	2105      	movs	r1, #5
 800cdaa:	486b      	ldr	r0, [pc, #428]	; (800cf58 <Init_Imu_Ctrl+0x260>)
 800cdac:	f002 ff5a 	bl	800fc64 <Set_Task_Routine_Entity>

	/* DOD Definition */
	// DOD
	Create_DOD(TASK_ID_IMU);
 800cdb0:	2003      	movs	r0, #3
 800cdb2:	f000 ffef 	bl	800dd94 <Create_DOD>

	// PDO
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_X, e_Float32, 1, &icm20608g_obj.acc_x);
 800cdb6:	4b70      	ldr	r3, [pc, #448]	; (800cf78 <Init_Imu_Ctrl+0x280>)
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	2301      	movs	r3, #1
 800cdbc:	2207      	movs	r2, #7
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	2003      	movs	r0, #3
 800cdc2:	f000 ffff 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Y, e_Float32, 1, &icm20608g_obj.acc_y);
 800cdc6:	4b6d      	ldr	r3, [pc, #436]	; (800cf7c <Init_Imu_Ctrl+0x284>)
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	2301      	movs	r3, #1
 800cdcc:	2207      	movs	r2, #7
 800cdce:	2101      	movs	r1, #1
 800cdd0:	2003      	movs	r0, #3
 800cdd2:	f000 fff7 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Z, e_Float32, 1, &icm20608g_obj.acc_z);
 800cdd6:	4b6a      	ldr	r3, [pc, #424]	; (800cf80 <Init_Imu_Ctrl+0x288>)
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	2301      	movs	r3, #1
 800cddc:	2207      	movs	r2, #7
 800cdde:	2102      	movs	r1, #2
 800cde0:	2003      	movs	r0, #3
 800cde2:	f000 ffef 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_X, e_Float32, 1, &icm20608g_obj.gyr_x);
 800cde6:	4b67      	ldr	r3, [pc, #412]	; (800cf84 <Init_Imu_Ctrl+0x28c>)
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	2301      	movs	r3, #1
 800cdec:	2207      	movs	r2, #7
 800cdee:	2103      	movs	r1, #3
 800cdf0:	2003      	movs	r0, #3
 800cdf2:	f000 ffe7 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Y, e_Float32, 1, &icm20608g_obj.gyr_y);
 800cdf6:	4b64      	ldr	r3, [pc, #400]	; (800cf88 <Init_Imu_Ctrl+0x290>)
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	2207      	movs	r2, #7
 800cdfe:	2104      	movs	r1, #4
 800ce00:	2003      	movs	r0, #3
 800ce02:	f000 ffdf 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Z, e_Float32, 1, &icm20608g_obj.gyr_z);
 800ce06:	4b61      	ldr	r3, [pc, #388]	; (800cf8c <Init_Imu_Ctrl+0x294>)
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	2207      	movs	r2, #7
 800ce0e:	2105      	movs	r1, #5
 800ce10:	2003      	movs	r0, #3
 800ce12:	f000 ffd7 	bl	800ddc4 <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC,          e_Float32, 1, &thigh_angle_params.deg_acc);
 800ce16:	4b5e      	ldr	r3, [pc, #376]	; (800cf90 <Init_Imu_Ctrl+0x298>)
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	2207      	movs	r2, #7
 800ce1e:	210d      	movs	r1, #13
 800ce20:	2003      	movs	r0, #3
 800ce22:	f000 ffcf 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR,          e_Float32, 1, &thigh_angle_params.deg_gyr);
 800ce26:	4b5b      	ldr	r3, [pc, #364]	; (800cf94 <Init_Imu_Ctrl+0x29c>)
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	2207      	movs	r2, #7
 800ce2e:	210e      	movs	r1, #14
 800ce30:	2003      	movs	r0, #3
 800ce32:	f000 ffc7 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC_FILTERED, e_Float32, 1, &thigh_angle_params.deg_acc_filtered);
 800ce36:	4b58      	ldr	r3, [pc, #352]	; (800cf98 <Init_Imu_Ctrl+0x2a0>)
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	2207      	movs	r2, #7
 800ce3e:	210f      	movs	r1, #15
 800ce40:	2003      	movs	r0, #3
 800ce42:	f000 ffbf 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR_FILTERED, e_Float32, 1, &thigh_angle_params.deg_gyr_filtered);
 800ce46:	4b55      	ldr	r3, [pc, #340]	; (800cf9c <Init_Imu_Ctrl+0x2a4>)
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	2207      	movs	r2, #7
 800ce4e:	2110      	movs	r1, #16
 800ce50:	2003      	movs	r0, #3
 800ce52:	f000 ffb7 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_DEG_TVCF,             e_Float32, 1, &thigh_angle_params.deg_tvcf_filtered);
 800ce56:	4b52      	ldr	r3, [pc, #328]	; (800cfa0 <Init_Imu_Ctrl+0x2a8>)
 800ce58:	9300      	str	r3, [sp, #0]
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	2207      	movs	r2, #7
 800ce5e:	2111      	movs	r1, #17
 800ce60:	2003      	movs	r0, #3
 800ce62:	f000 ffaf 	bl	800ddc4 <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_WALKING_STATE, 	e_UInt8, 	1, &walking);
 800ce66:	4b4f      	ldr	r3, [pc, #316]	; (800cfa4 <Init_Imu_Ctrl+0x2ac>)
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	2106      	movs	r1, #6
 800ce70:	2003      	movs	r0, #3
 800ce72:	f000 ffa7 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GAIT_PHASE, 		e_Float32,  1, &gait_params.gait_phase);
 800ce76:	4b4c      	ldr	r3, [pc, #304]	; (800cfa8 <Init_Imu_Ctrl+0x2b0>)
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	2207      	movs	r2, #7
 800ce7e:	2107      	movs	r1, #7
 800ce80:	2003      	movs	r0, #3
 800ce82:	f000 ff9f 	bl	800ddc4 <Create_PDO>

	// Assist mode //
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_P, e_Float32, 1, &plantar_params.Plantar_ref);
 800ce86:	4b49      	ldr	r3, [pc, #292]	; (800cfac <Init_Imu_Ctrl+0x2b4>)
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	2207      	movs	r2, #7
 800ce8e:	210b      	movs	r1, #11
 800ce90:	2003      	movs	r0, #3
 800ce92:	f000 ff97 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_D, e_Float32, 1, &dorsi_params.Dorsi_ref);
 800ce96:	4b46      	ldr	r3, [pc, #280]	; (800cfb0 <Init_Imu_Ctrl+0x2b8>)
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	2207      	movs	r2, #7
 800ce9e:	210c      	movs	r1, #12
 800cea0:	2003      	movs	r0, #3
 800cea2:	f000 ff8f 	bl	800ddc4 <Create_PDO>

	// SDO
	MSG_COMMON_SDO_CREATE(TASK_ID_IMU)
 800cea6:	4b43      	ldr	r3, [pc, #268]	; (800cfb4 <Init_Imu_Ctrl+0x2bc>)
 800cea8:	2201      	movs	r2, #1
 800ceaa:	2100      	movs	r1, #0
 800ceac:	2003      	movs	r0, #3
 800ceae:	f001 f843 	bl	800df38 <Create_SDO>
 800ceb2:	4b41      	ldr	r3, [pc, #260]	; (800cfb8 <Init_Imu_Ctrl+0x2c0>)
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	2101      	movs	r1, #1
 800ceb8:	2003      	movs	r0, #3
 800ceba:	f001 f83d 	bl	800df38 <Create_SDO>
 800cebe:	4b3f      	ldr	r3, [pc, #252]	; (800cfbc <Init_Imu_Ctrl+0x2c4>)
 800cec0:	2201      	movs	r2, #1
 800cec2:	2102      	movs	r1, #2
 800cec4:	2003      	movs	r0, #3
 800cec6:	f001 f837 	bl	800df38 <Create_SDO>
 800ceca:	4b3d      	ldr	r3, [pc, #244]	; (800cfc0 <Init_Imu_Ctrl+0x2c8>)
 800cecc:	2201      	movs	r2, #1
 800cece:	2103      	movs	r1, #3
 800ced0:	2003      	movs	r0, #3
 800ced2:	f001 f831 	bl	800df38 <Create_SDO>





	Initial_ICM(&ads);
 800ced6:	483b      	ldr	r0, [pc, #236]	; (800cfc4 <Init_Imu_Ctrl+0x2cc>)
 800ced8:	f7ff ff00 	bl	800ccdc <Initial_ICM>

	Initialize_ICM(&icm20608g_obj);
 800cedc:	483a      	ldr	r0, [pc, #232]	; (800cfc8 <Init_Imu_Ctrl+0x2d0>)
 800cede:	f7fe ffe9 	bl	800beb4 <Initialize_ICM>
	err_chk_icm = IsDevReady_ICM(&icm20608g_obj);
 800cee2:	4839      	ldr	r0, [pc, #228]	; (800cfc8 <Init_Imu_Ctrl+0x2d0>)
 800cee4:	f7fe fffc 	bl	800bee0 <IsDevReady_ICM>
 800cee8:	4603      	mov	r3, r0
 800ceea:	461a      	mov	r2, r3
 800ceec:	4b37      	ldr	r3, [pc, #220]	; (800cfcc <Init_Imu_Ctrl+0x2d4>)
 800ceee:	701a      	strb	r2, [r3, #0]
	Write_Data_ICM(&icm20608g_obj);
 800cef0:	4835      	ldr	r0, [pc, #212]	; (800cfc8 <Init_Imu_Ctrl+0x2d0>)
 800cef2:	f7ff f8c9 	bl	800c088 <Write_Data_ICM>

	Initialize_BM(&bm1422agmv_obj);
 800cef6:	4836      	ldr	r0, [pc, #216]	; (800cfd0 <Init_Imu_Ctrl+0x2d8>)
 800cef8:	f7fe fa4c 	bl	800b394 <Initialize_BM>
	err_chk_bm = IsDevReady_BM(&bm1422agmv_obj);
 800cefc:	4834      	ldr	r0, [pc, #208]	; (800cfd0 <Init_Imu_Ctrl+0x2d8>)
 800cefe:	f7fe fa5f 	bl	800b3c0 <IsDevReady_BM>
 800cf02:	4603      	mov	r3, r0
 800cf04:	461a      	mov	r2, r3
 800cf06:	4b33      	ldr	r3, [pc, #204]	; (800cfd4 <Init_Imu_Ctrl+0x2dc>)
 800cf08:	701a      	strb	r2, [r3, #0]
	Write_Data_BM(&bm1422agmv_obj);
 800cf0a:	4831      	ldr	r0, [pc, #196]	; (800cfd0 <Init_Imu_Ctrl+0x2d8>)
 800cf0c:	f7fe fae0 	bl	800b4d0 <Write_Data_BM>

	Reset_Parameters();
 800cf10:	f7ff fa44 	bl	800c39c <Reset_Parameters>
	attach_plane = e_CM_TEST;		// WIDM Attached Plane Selection
 800cf14:	4b30      	ldr	r3, [pc, #192]	; (800cfd8 <Init_Imu_Ctrl+0x2e0>)
 800cf16:	2202      	movs	r2, #2
 800cf18:	701a      	strb	r2, [r3, #0]
	Set_Init_Parameters(&norm_params, &gait_params, &fuzzy_params, &th_params, &plantar_params, &dorsi_params, &assist_params);
 800cf1a:	4b30      	ldr	r3, [pc, #192]	; (800cfdc <Init_Imu_Ctrl+0x2e4>)
 800cf1c:	9302      	str	r3, [sp, #8]
 800cf1e:	4b30      	ldr	r3, [pc, #192]	; (800cfe0 <Init_Imu_Ctrl+0x2e8>)
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	4b30      	ldr	r3, [pc, #192]	; (800cfe4 <Init_Imu_Ctrl+0x2ec>)
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	4b30      	ldr	r3, [pc, #192]	; (800cfe8 <Init_Imu_Ctrl+0x2f0>)
 800cf28:	4a30      	ldr	r2, [pc, #192]	; (800cfec <Init_Imu_Ctrl+0x2f4>)
 800cf2a:	4931      	ldr	r1, [pc, #196]	; (800cff0 <Init_Imu_Ctrl+0x2f8>)
 800cf2c:	4831      	ldr	r0, [pc, #196]	; (800cff4 <Init_Imu_Ctrl+0x2fc>)
 800cf2e:	f000 f88d 	bl	800d04c <Set_Init_Parameters>
	Calculate_Initial_Thigh_Angle(&thigh_angle_params, &norm_params, &icm20608g_obj, &sensor_params, attach_plane);
 800cf32:	4b29      	ldr	r3, [pc, #164]	; (800cfd8 <Init_Imu_Ctrl+0x2e0>)
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	4b2f      	ldr	r3, [pc, #188]	; (800cff8 <Init_Imu_Ctrl+0x300>)
 800cf3a:	4a23      	ldr	r2, [pc, #140]	; (800cfc8 <Init_Imu_Ctrl+0x2d0>)
 800cf3c:	492d      	ldr	r1, [pc, #180]	; (800cff4 <Init_Imu_Ctrl+0x2fc>)
 800cf3e:	482f      	ldr	r0, [pc, #188]	; (800cffc <Init_Imu_Ctrl+0x304>)
 800cf40:	f7ff fabb 	bl	800c4ba <Calculate_Initial_Thigh_Angle>



	/* Callback Allocation */
    if (Start_TIM3() > 0) {
 800cf44:	f7ff f9ec 	bl	800c320 <Start_TIM3>
        //TODO: ERROR PROCESS
    }
    ioif_tim3_callback_ptr = Run_Imu_Ctrl;
 800cf48:	4b2d      	ldr	r3, [pc, #180]	; (800d000 <Init_Imu_Ctrl+0x308>)
 800cf4a:	4a2e      	ldr	r2, [pc, #184]	; (800d004 <Init_Imu_Ctrl+0x30c>)
 800cf4c:	601a      	str	r2, [r3, #0]
}
 800cf4e:	bf00      	nop
 800cf50:	3740      	adds	r7, #64	; 0x40
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	24000714 	.word	0x24000714
 800cf5c:	0800cc11 	.word	0x0800cc11
 800cf60:	0800cc89 	.word	0x0800cc89
 800cf64:	0800ccc1 	.word	0x0800ccc1
 800cf68:	0800ccad 	.word	0x0800ccad
 800cf6c:	0800cc9d 	.word	0x0800cc9d
 800cf70:	0800cccf 	.word	0x0800cccf
 800cf74:	0800c9a1 	.word	0x0800c9a1
 800cf78:	240007e4 	.word	0x240007e4
 800cf7c:	240007e8 	.word	0x240007e8
 800cf80:	240007ec 	.word	0x240007ec
 800cf84:	240007f0 	.word	0x240007f0
 800cf88:	240007f4 	.word	0x240007f4
 800cf8c:	240007f8 	.word	0x240007f8
 800cf90:	240008c8 	.word	0x240008c8
 800cf94:	240008cc 	.word	0x240008cc
 800cf98:	240008d0 	.word	0x240008d0
 800cf9c:	240008d4 	.word	0x240008d4
 800cfa0:	240008d8 	.word	0x240008d8
 800cfa4:	24000960 	.word	0x24000960
 800cfa8:	24000890 	.word	0x24000890
 800cfac:	24000930 	.word	0x24000930
 800cfb0:	2400094c 	.word	0x2400094c
 800cfb4:	0800ca71 	.word	0x0800ca71
 800cfb8:	0800caa9 	.word	0x0800caa9
 800cfbc:	0800cae1 	.word	0x0800cae1
 800cfc0:	0800cb59 	.word	0x0800cb59
 800cfc4:	24000968 	.word	0x24000968
 800cfc8:	240007dc 	.word	0x240007dc
 800cfcc:	2400000d 	.word	0x2400000d
 800cfd0:	240007fc 	.word	0x240007fc
 800cfd4:	2400000e 	.word	0x2400000e
 800cfd8:	24000961 	.word	0x24000961
 800cfdc:	24000954 	.word	0x24000954
 800cfe0:	24000938 	.word	0x24000938
 800cfe4:	2400091c 	.word	0x2400091c
 800cfe8:	2400090c 	.word	0x2400090c
 800cfec:	24000898 	.word	0x24000898
 800cff0:	2400088c 	.word	0x2400088c
 800cff4:	24000858 	.word	0x24000858
 800cff8:	24000810 	.word	0x24000810
 800cffc:	240008c4 	.word	0x240008c4
 800d000:	2400070c 	.word	0x2400070c
 800d004:	0800d009 	.word	0x0800d009

0800d008 <Run_Imu_Ctrl>:




void Run_Imu_Ctrl(void)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
	uint32_t imu_ctrl_loop_time_cnt_1 = DWT->CYCCNT;
 800d00e:	4b0b      	ldr	r3, [pc, #44]	; (800d03c <Run_Imu_Ctrl+0x34>)
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	607b      	str	r3, [r7, #4]

	/*Run Device */
	Run_Task(&imu_ctrl_task);
 800d014:	480a      	ldr	r0, [pc, #40]	; (800d040 <Run_Imu_Ctrl+0x38>)
 800d016:	f002 fdef 	bl	800fbf8 <Run_Task>

	uint32_t imu_ctrl_loop_time_cnt_2 = DWT->CYCCNT;
 800d01a:	4b08      	ldr	r3, [pc, #32]	; (800d03c <Run_Imu_Ctrl+0x34>)
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	603b      	str	r3, [r7, #0]

	/* Elapsed Time Check */
	imu_us = (imu_ctrl_loop_time_cnt_2 - imu_ctrl_loop_time_cnt_1)/480;	// in microsecond
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	4a07      	ldr	r2, [pc, #28]	; (800d044 <Run_Imu_Ctrl+0x3c>)
 800d028:	fba2 2303 	umull	r2, r3, r2, r3
 800d02c:	0a1b      	lsrs	r3, r3, #8
 800d02e:	4a06      	ldr	r2, [pc, #24]	; (800d048 <Run_Imu_Ctrl+0x40>)
 800d030:	6013      	str	r3, [r2, #0]
}
 800d032:	bf00      	nop
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	e0001000 	.word	0xe0001000
 800d040:	24000714 	.word	0x24000714
 800d044:	88888889 	.word	0x88888889
 800d048:	24000964 	.word	0x24000964

0800d04c <Set_Init_Parameters>:

*/

/* Set Specific Value */
void Set_Init_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params, Fuzzy_Params* t_fuzzy_params, Threshold_Params* t_th_params, Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	603b      	str	r3, [r7, #0]
	t_norm_params->A_deg = 30.0; //30
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	4a37      	ldr	r2, [pc, #220]	; (800d13c <Set_Init_Parameters+0xf0>)
 800d05e:	62da      	str	r2, [r3, #44]	; 0x2c
	t_norm_params->A_vel = 400.0; //400
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	4a37      	ldr	r2, [pc, #220]	; (800d140 <Set_Init_Parameters+0xf4>)
 800d064:	631a      	str	r2, [r3, #48]	; 0x30

	t_gait_params->gait_period 	  = 1000;
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d06c:	801a      	strh	r2, [r3, #0]
	t_gait_params->gait_phase 	  = -100.0;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	4a34      	ldr	r2, [pc, #208]	; (800d144 <Set_Init_Parameters+0xf8>)
 800d072:	605a      	str	r2, [r3, #4]
	t_gait_params->gait_phase_pre = -100.0;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	4a33      	ldr	r2, [pc, #204]	; (800d144 <Set_Init_Parameters+0xf8>)
 800d078:	609a      	str	r2, [r3, #8]

	t_fuzzy_params->wl 		= 0.5;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800d080:	615a      	str	r2, [r3, #20]
	t_fuzzy_params->wh 		= 10.0;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a30      	ldr	r2, [pc, #192]	; (800d148 <Set_Init_Parameters+0xfc>)
 800d086:	619a      	str	r2, [r3, #24]
	t_fuzzy_params->var[0] 	= 8.0;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800d08e:	61da      	str	r2, [r3, #28]
	t_fuzzy_params->var[1] 	= 30.0;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a2a      	ldr	r2, [pc, #168]	; (800d13c <Set_Init_Parameters+0xf0>)
 800d094:	621a      	str	r2, [r3, #32]
	t_fuzzy_params->var[2] 	= 5.8;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	4a2c      	ldr	r2, [pc, #176]	; (800d14c <Set_Init_Parameters+0x100>)
 800d09a:	625a      	str	r2, [r3, #36]	; 0x24
	t_fuzzy_params->var[3] 	= 320.0;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4a2c      	ldr	r2, [pc, #176]	; (800d150 <Set_Init_Parameters+0x104>)
 800d0a0:	629a      	str	r2, [r3, #40]	; 0x28

	t_th_params->deg_th_start	= 5.0;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	4a2b      	ldr	r2, [pc, #172]	; (800d154 <Set_Init_Parameters+0x108>)
 800d0a6:	601a      	str	r2, [r3, #0]
	t_th_params->vel_th_start	= 20.0;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	4a2b      	ldr	r2, [pc, #172]	; (800d158 <Set_Init_Parameters+0x10c>)
 800d0ac:	605a      	str	r2, [r3, #4]
	t_th_params->deg_th_stop 	= 5.0;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	4a28      	ldr	r2, [pc, #160]	; (800d154 <Set_Init_Parameters+0x108>)
 800d0b2:	609a      	str	r2, [r3, #8]
	t_th_params->vel_th_stop 	= 3.0;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	4a29      	ldr	r2, [pc, #164]	; (800d15c <Set_Init_Parameters+0x110>)
 800d0b8:	60da      	str	r2, [r3, #12]

	t_plantar_params->t_P_start	  = 35;
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	2223      	movs	r2, #35	; 0x23
 800d0be:	801a      	strh	r2, [r3, #0]
	t_plantar_params->t_r_P_end   = 35;
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	2223      	movs	r2, #35	; 0x23
 800d0c4:	805a      	strh	r2, [r3, #2]
	t_plantar_params->t_c_P_end   = 55;
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	2237      	movs	r2, #55	; 0x37
 800d0ca:	809a      	strh	r2, [r3, #4]
	t_plantar_params->t_f_P_end   = 60;
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	223c      	movs	r2, #60	; 0x3c
 800d0d0:	80da      	strh	r2, [r3, #6]
	t_plantar_params->t_r_P       = 100;
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	2264      	movs	r2, #100	; 0x64
 800d0d6:	811a      	strh	r2, [r3, #8]
	t_plantar_params->t_c_P 	  = 400;
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d0de:	815a      	strh	r2, [r3, #10]
	t_plantar_params->t_f_P 	  = 100;
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	2264      	movs	r2, #100	; 0x64
 800d0e4:	819a      	strh	r2, [r3, #12]
	t_plantar_params->Amplitude_P = 60.0;
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	4a1d      	ldr	r2, [pc, #116]	; (800d160 <Set_Init_Parameters+0x114>)
 800d0ea:	619a      	str	r2, [r3, #24]

	t_dorsi_params->t_D_start 	  = 50;
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	2232      	movs	r2, #50	; 0x32
 800d0f0:	801a      	strh	r2, [r3, #0]
	t_dorsi_params->t_r_D_end 	  = 53;
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	2235      	movs	r2, #53	; 0x35
 800d0f6:	805a      	strh	r2, [r3, #2]
	t_dorsi_params->t_c_D_end 	  = 70;
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	2246      	movs	r2, #70	; 0x46
 800d0fc:	809a      	strh	r2, [r3, #4]
	t_dorsi_params->t_f_D_end 	  = 80;
 800d0fe:	69fb      	ldr	r3, [r7, #28]
 800d100:	2250      	movs	r2, #80	; 0x50
 800d102:	80da      	strh	r2, [r3, #6]
	t_dorsi_params->t_r_D 		  = 100;
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	2264      	movs	r2, #100	; 0x64
 800d108:	811a      	strh	r2, [r3, #8]
	t_dorsi_params->t_c_D 		  = 400;
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d110:	815a      	strh	r2, [r3, #10]
	t_dorsi_params->t_f_D 		  = 100;
 800d112:	69fb      	ldr	r3, [r7, #28]
 800d114:	2264      	movs	r2, #100	; 0x64
 800d116:	819a      	strh	r2, [r3, #12]
	t_dorsi_params->Amplitude_D   = 60.0;
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	4a11      	ldr	r2, [pc, #68]	; (800d160 <Set_Init_Parameters+0x114>)
 800d11c:	619a      	str	r2, [r3, #24]

	t_assist_params->t_r_limit 	 = 20;
 800d11e:	6a3b      	ldr	r3, [r7, #32]
 800d120:	2214      	movs	r2, #20
 800d122:	801a      	strh	r2, [r3, #0]
	t_assist_params->t_f_limit 	 = 20;
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	2214      	movs	r2, #20
 800d128:	805a      	strh	r2, [r3, #2]
	t_assist_params->ref_shape 	 = TRAPEZOIDAL;
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	2200      	movs	r2, #0
 800d12e:	711a      	strb	r2, [r3, #4]
}
 800d130:	bf00      	nop
 800d132:	3714      	adds	r7, #20
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr
 800d13c:	41f00000 	.word	0x41f00000
 800d140:	43c80000 	.word	0x43c80000
 800d144:	c2c80000 	.word	0xc2c80000
 800d148:	41200000 	.word	0x41200000
 800d14c:	40b9999a 	.word	0x40b9999a
 800d150:	43a00000 	.word	0x43a00000
 800d154:	40a00000 	.word	0x40a00000
 800d158:	41a00000 	.word	0x41a00000
 800d15c:	40400000 	.word	0x40400000
 800d160:	42700000 	.word	0x42700000

0800d164 <Save_Previous_Value>:


*/

void Save_Previous_Value(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
	t_sensor_params->accX[1] = t_sensor_params->accX[0];
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	605a      	str	r2, [r3, #4]
	t_sensor_params->accY[1] = t_sensor_params->accY[0];
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	689a      	ldr	r2, [r3, #8]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	60da      	str	r2, [r3, #12]
	t_sensor_params->gyrZ[1] = t_sensor_params->gyrZ[0];
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	62da      	str	r2, [r3, #44]	; 0x2c

	t_thigh_angle_params->vel_raw[1] = t_thigh_angle_params->vel_raw[0];
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	699a      	ldr	r2, [r3, #24]
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	61da      	str	r2, [r3, #28]

	t_thigh_angle_params->deg_tvcf[1] = t_thigh_angle_params->deg_tvcf[0];
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	6a1a      	ldr	r2, [r3, #32]
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	625a      	str	r2, [r3, #36]	; 0x24

	t_thigh_angle_params->deg_LPF_1st[1] = t_thigh_angle_params->deg_LPF_1st[0];
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	62da      	str	r2, [r3, #44]	; 0x2c
	t_thigh_angle_params->deg_LPF_2nd[1] = t_thigh_angle_params->deg_LPF_2nd[0];
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	635a      	str	r2, [r3, #52]	; 0x34
	t_thigh_angle_params->vel_LPF_1st[1] = t_thigh_angle_params->vel_LPF_1st[0];
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	63da      	str	r2, [r3, #60]	; 0x3c
	t_thigh_angle_params->vel_LPF_2nd[1] = t_thigh_angle_params->vel_LPF_2nd[0];
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	645a      	str	r2, [r3, #68]	; 0x44

	t_gait_params->gait_phase_pre = t_gait_params->gait_phase;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685a      	ldr	r2, [r3, #4]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	609a      	str	r2, [r3, #8]
}
 800d1c0:	bf00      	nop
 800d1c2:	3714      	adds	r7, #20
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <Calculate_Square_Root_Sum>:
                      |___/              |___/

*/

float Calculate_Square_Root_Sum(float t_x, float t_y)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	ed2d 8b02 	vpush	{d8}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	ed87 0a01 	vstr	s0, [r7, #4]
 800d1da:	edc7 0a00 	vstr	s1, [r7]
	return sqrt(pow(t_x, 2) + pow(t_y, 2));
 800d1de:	edd7 7a01 	vldr	s15, [r7, #4]
 800d1e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d1e6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800d1ea:	eeb0 0b47 	vmov.f64	d0, d7
 800d1ee:	f004 f8d7 	bl	80113a0 <pow>
 800d1f2:	eeb0 8b40 	vmov.f64	d8, d0
 800d1f6:	edd7 7a00 	vldr	s15, [r7]
 800d1fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d1fe:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800d202:	eeb0 0b47 	vmov.f64	d0, d7
 800d206:	f004 f8cb 	bl	80113a0 <pow>
 800d20a:	eeb0 7b40 	vmov.f64	d7, d0
 800d20e:	ee38 7b07 	vadd.f64	d7, d8, d7
 800d212:	eeb0 0b47 	vmov.f64	d0, d7
 800d216:	f003 fd33 	bl	8010c80 <sqrt>
 800d21a:	eeb0 7b40 	vmov.f64	d7, d0
 800d21e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800d222:	eeb0 0a67 	vmov.f32	s0, s15
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	ecbd 8b02 	vpop	{d8}
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <Calculate_Absolute_Value_Float>:

float Calculate_Absolute_Value_Float(float t_value)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	ed87 0a01 	vstr	s0, [r7, #4]
	return fabs(t_value);
 800d23a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d23e:	eef0 7ae7 	vabs.f32	s15, s15
}
 800d242:	eeb0 0a67 	vmov.f32	s0, s15
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <Calculate_Delta>:

float Calculate_Delta(float t_current, float t_previous)
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	ed87 0a01 	vstr	s0, [r7, #4]
 800d25a:	edc7 0a00 	vstr	s1, [r7]
	return (t_current - t_previous) / IMU_CONTROL_PERIOD;
 800d25e:	ed97 7a01 	vldr	s14, [r7, #4]
 800d262:	edd7 7a00 	vldr	s15, [r7]
 800d266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d26a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800d26e:	ed9f 5b06 	vldr	d5, [pc, #24]	; 800d288 <Calculate_Delta+0x38>
 800d272:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d276:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800d27a:	eeb0 0a67 	vmov.f32	s0, s15
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr
 800d288:	d2f1a9fc 	.word	0xd2f1a9fc
 800d28c:	3f50624d 	.word	0x3f50624d

0800d290 <Calculate_xbar_Update_mu>:

void Calculate_xbar_Update_mu(float t_var_i, float t_fuzzy_input, float* t_mu)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b088      	sub	sp, #32
 800d294:	af00      	add	r7, sp, #0
 800d296:	ed87 0a03 	vstr	s0, [r7, #12]
 800d29a:	edc7 0a02 	vstr	s1, [r7, #8]
 800d29e:	6078      	str	r0, [r7, #4]
	/* t_var_i is measurement value (initially set value in Set_Init_Parameters) */
	float t_xoi = 3 * t_var_i;											// Threshold Value (maybe middle value)
 800d2a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2a4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800d2a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d2ac:	edc7 7a07 	vstr	s15, [r7, #28]
	float t_si = log(3) / t_var_i;										// Sensor Sensitivity (natural logarithm)
 800d2b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800d2b8:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 800d328 <Calculate_xbar_Update_mu+0x98>
 800d2bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800d2c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d2c4:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_xbar = 0.5 * (1 + tanh(t_si * (t_fuzzy_input - t_xoi)));	// Fuzzy Logic Relational Expressions
 800d2c8:	ed97 7a02 	vldr	s14, [r7, #8]
 800d2cc:	edd7 7a07 	vldr	s15, [r7, #28]
 800d2d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d2d4:	edd7 7a06 	vldr	s15, [r7, #24]
 800d2d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d2e0:	eeb0 0b47 	vmov.f64	d0, d7
 800d2e4:	f003 fdf0 	bl	8010ec8 <tanh>
 800d2e8:	eeb0 7b40 	vmov.f64	d7, d0
 800d2ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d2f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d2f4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d2f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d300:	edc7 7a05 	vstr	s15, [r7, #20]
	*t_mu *= (1 - t_xbar);	// Update mu for TVCF cutoff frequency(wc)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	ed93 7a00 	vldr	s14, [r3]
 800d30a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d30e:	edd7 7a05 	vldr	s15, [r7, #20]
 800d312:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	edc3 7a00 	vstr	s15, [r3]
}
 800d320:	bf00      	nop
 800d322:	3720      	adds	r7, #32
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	7aad030b 	.word	0x7aad030b
 800d32c:	3ff193ea 	.word	0x3ff193ea

0800d330 <Generate_Fuzzy_Input>:

/*
*Generate Fuzzy Logic Input (Acc, Jerk, Angular Velocity, Angular Accerleration)
*/
void Generate_Fuzzy_Input(Sensor_Params* t_sensor_params, Fuzzy_Params* t_fuzzy_params)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
	float t_jerk_x = Calculate_Delta(t_sensor_params->accX[0], t_sensor_params->accX[1]);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	edd3 7a00 	vldr	s15, [r3]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	ed93 7a01 	vldr	s14, [r3, #4]
 800d346:	eef0 0a47 	vmov.f32	s1, s14
 800d34a:	eeb0 0a67 	vmov.f32	s0, s15
 800d34e:	f7ff ff7f 	bl	800d250 <Calculate_Delta>
 800d352:	ed87 0a05 	vstr	s0, [r7, #20]
	float t_jerk_y = Calculate_Delta(t_sensor_params->accY[0], t_sensor_params->accY[1]);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	edd3 7a02 	vldr	s15, [r3, #8]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	ed93 7a03 	vldr	s14, [r3, #12]
 800d362:	eef0 0a47 	vmov.f32	s1, s14
 800d366:	eeb0 0a67 	vmov.f32	s0, s15
 800d36a:	f7ff ff71 	bl	800d250 <Calculate_Delta>
 800d36e:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_wdot_z = Calculate_Delta(t_sensor_params->gyrZ[0], t_sensor_params->gyrZ[1]);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800d37e:	eef0 0a47 	vmov.f32	s1, s14
 800d382:	eeb0 0a67 	vmov.f32	s0, s15
 800d386:	f7ff ff63 	bl	800d250 <Calculate_Delta>
 800d38a:	ed87 0a03 	vstr	s0, [r7, #12]

	// absolute ACC
	t_fuzzy_params->Fuzzy_input[0] = Calculate_Square_Root_Sum(t_sensor_params->accX[0], t_sensor_params->accY[0]);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	edd3 7a00 	vldr	s15, [r3]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	ed93 7a02 	vldr	s14, [r3, #8]
 800d39a:	eef0 0a47 	vmov.f32	s1, s14
 800d39e:	eeb0 0a67 	vmov.f32	s0, s15
 800d3a2:	f7ff ff13 	bl	800d1cc <Calculate_Square_Root_Sum>
 800d3a6:	eef0 7a40 	vmov.f32	s15, s0
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	edc3 7a00 	vstr	s15, [r3]
	// absolute Jerk
	t_fuzzy_params->Fuzzy_input[1] = Calculate_Square_Root_Sum(t_jerk_x, t_jerk_y);
 800d3b0:	edd7 0a04 	vldr	s1, [r7, #16]
 800d3b4:	ed97 0a05 	vldr	s0, [r7, #20]
 800d3b8:	f7ff ff08 	bl	800d1cc <Calculate_Square_Root_Sum>
 800d3bc:	eef0 7a40 	vmov.f32	s15, s0
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	edc3 7a01 	vstr	s15, [r3, #4]
	// absolute Gyr(Angular Velocity)
	t_fuzzy_params->Fuzzy_input[2] = Calculate_Absolute_Value_Float(t_sensor_params->gyrZ[0]);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d3cc:	eeb0 0a67 	vmov.f32	s0, s15
 800d3d0:	f7ff ff2e 	bl	800d230 <Calculate_Absolute_Value_Float>
 800d3d4:	eef0 7a40 	vmov.f32	s15, s0
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	edc3 7a02 	vstr	s15, [r3, #8]
	// absolute Wdot(Angular Acceleration)
	t_fuzzy_params->Fuzzy_input[3] = Calculate_Absolute_Value_Float(t_wdot_z);
 800d3de:	ed97 0a03 	vldr	s0, [r7, #12]
 800d3e2:	f7ff ff25 	bl	800d230 <Calculate_Absolute_Value_Float>
 800d3e6:	eef0 7a40 	vmov.f32	s15, s0
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800d3f0:	bf00      	nop
 800d3f2:	3718      	adds	r7, #24
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <Calculate_Fuzzy_Wc>:

/*
*Calculate Wc(CutOff Frequency)
*/
float Calculate_Fuzzy_Wc(Fuzzy_Params* t_fuzzy_params)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
	t_fuzzy_params->wc = 0;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f04f 0200 	mov.w	r2, #0
 800d406:	611a      	str	r2, [r3, #16]
	float t_mu = 1;
 800d408:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d40c:	60bb      	str	r3, [r7, #8]

	/* Perform calculations for each fuzzy input (Acc, Jerk, Angular Velocity, Angular Accerleration) */
	for (int i = 0; i < 4; i++) {
 800d40e:	2300      	movs	r3, #0
 800d410:	60fb      	str	r3, [r7, #12]
 800d412:	e019      	b.n	800d448 <Calculate_Fuzzy_Wc+0x50>
		Calculate_xbar_Update_mu(t_fuzzy_params->var[i], t_fuzzy_params->Fuzzy_input[i], &t_mu);
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	3306      	adds	r3, #6
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	3304      	adds	r3, #4
 800d420:	edd3 7a00 	vldr	s15, [r3]
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	4413      	add	r3, r2
 800d42c:	ed93 7a00 	vldr	s14, [r3]
 800d430:	f107 0308 	add.w	r3, r7, #8
 800d434:	4618      	mov	r0, r3
 800d436:	eef0 0a47 	vmov.f32	s1, s14
 800d43a:	eeb0 0a67 	vmov.f32	s0, s15
 800d43e:	f7ff ff27 	bl	800d290 <Calculate_xbar_Update_mu>
	for (int i = 0; i < 4; i++) {
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3301      	adds	r3, #1
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2b03      	cmp	r3, #3
 800d44c:	dde2      	ble.n	800d414 <Calculate_Fuzzy_Wc+0x1c>
	}

	t_fuzzy_params->wc = t_mu * (t_fuzzy_params->wh) + (1 - t_mu) * (t_fuzzy_params->wl);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	ed93 7a06 	vldr	s14, [r3, #24]
 800d454:	edd7 7a02 	vldr	s15, [r7, #8]
 800d458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d45c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d464:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	edd3 7a05 	vldr	s15, [r3, #20]
 800d46e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d472:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	edc3 7a04 	vstr	s15, [r3, #16]

	return t_fuzzy_params->wc;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	691b      	ldr	r3, [r3, #16]
 800d480:	ee07 3a90 	vmov	s15, r3
}
 800d484:	eeb0 0a67 	vmov.f32	s0, s15
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <Perform_LPF_on_Acc>:

/*
*Low pass filtering for deg_acc
*/
float Perform_LPF_on_Acc(float t_curr_acc, float t_prev_filtered_acc, float t_cutoff_frequency, float t_sampling_Period)
{
 800d48e:	b480      	push	{r7}
 800d490:	b087      	sub	sp, #28
 800d492:	af00      	add	r7, sp, #0
 800d494:	ed87 0a03 	vstr	s0, [r7, #12]
 800d498:	edc7 0a02 	vstr	s1, [r7, #8]
 800d49c:	ed87 1a01 	vstr	s2, [r7, #4]
 800d4a0:	edc7 1a00 	vstr	s3, [r7]
	float filtered_acc = (t_cutoff_frequency * t_sampling_Period * t_curr_acc + t_prev_filtered_acc) / (t_cutoff_frequency * t_sampling_Period + 1);
 800d4a4:	ed97 7a01 	vldr	s14, [r7, #4]
 800d4a8:	edd7 7a00 	vldr	s15, [r7]
 800d4ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d4b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4b8:	edd7 7a02 	vldr	s15, [r7, #8]
 800d4bc:	ee77 6a27 	vadd.f32	s13, s14, s15
 800d4c0:	ed97 7a01 	vldr	s14, [r7, #4]
 800d4c4:	edd7 7a00 	vldr	s15, [r7]
 800d4c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4d8:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_acc;
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	ee07 3a90 	vmov	s15, r3
}
 800d4e2:	eeb0 0a67 	vmov.f32	s0, s15
 800d4e6:	371c      	adds	r7, #28
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <Perform_HPF_on_Gyro>:

/*
*High pass filtering + Integral for gyr
*/
float Perform_HPF_on_Gyro(float t_curr_gyro, float t_prev_filtered_gyro, float t_cutoff_frequency, float t_sampling_Period)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	ed87 0a03 	vstr	s0, [r7, #12]
 800d4fa:	edc7 0a02 	vstr	s1, [r7, #8]
 800d4fe:	ed87 1a01 	vstr	s2, [r7, #4]
 800d502:	edc7 1a00 	vstr	s3, [r7]
	float filtered_gyro = (t_curr_gyro*t_sampling_Period + t_prev_filtered_gyro) / (t_cutoff_frequency * t_sampling_Period + 1);
 800d506:	ed97 7a03 	vldr	s14, [r7, #12]
 800d50a:	edd7 7a00 	vldr	s15, [r7]
 800d50e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d512:	edd7 7a02 	vldr	s15, [r7, #8]
 800d516:	ee77 6a27 	vadd.f32	s13, s14, s15
 800d51a:	ed97 7a01 	vldr	s14, [r7, #4]
 800d51e:	edd7 7a00 	vldr	s15, [r7]
 800d522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d52a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d52e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d532:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_gyro;
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	ee07 3a90 	vmov	s15, r3
}
 800d53c:	eeb0 0a67 	vmov.f32	s0, s15
 800d540:	371c      	adds	r7, #28
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <Run_TVCF>:

/*
*Function to apply a Time Variant Complementary Filter (TVCF) to an angle
*/
void Run_TVCF(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, float t_cutoff_frequency, float t_sampling_Period, AttachPlane t_attach_plane)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b08a      	sub	sp, #40	; 0x28
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6178      	str	r0, [r7, #20]
 800d552:	6139      	str	r1, [r7, #16]
 800d554:	ed87 0a03 	vstr	s0, [r7, #12]
 800d558:	edc7 0a02 	vstr	s1, [r7, #8]
 800d55c:	4613      	mov	r3, r2
 800d55e:	71fb      	strb	r3, [r7, #7]
	/* Calculate the angle using accelerometer measurements and convert it to degrees */
    /* Thigh Angle Degree */
	float t_deg_acc = 0.0;
 800d560:	f04f 0300 	mov.w	r3, #0
 800d564:	627b      	str	r3, [r7, #36]	; 0x24
	float t_deg_acc_filtered_update = 0.0;
 800d566:	f04f 0300 	mov.w	r3, #0
 800d56a:	623b      	str	r3, [r7, #32]
	float t_deg_gyr_filtered_update = 0.0;
 800d56c:	f04f 0300 	mov.w	r3, #0
 800d570:	61fb      	str	r3, [r7, #28]
	float t_deg_tvcf = 0.0;
 800d572:	f04f 0300 	mov.w	r3, #0
 800d576:	61bb      	str	r3, [r7, #24]

	t_deg_acc = Get_Angle_Scenario(t_sensor_params, t_attach_plane);
 800d578:	79fb      	ldrb	r3, [r7, #7]
 800d57a:	4619      	mov	r1, r3
 800d57c:	6978      	ldr	r0, [r7, #20]
 800d57e:	f000 faf3 	bl	800db68 <Get_Angle_Scenario>
 800d582:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	/* Apply Low Pass Filter (LPF) on accelerometer angle */
	t_deg_acc_filtered_update = Perform_LPF_on_Acc(t_deg_acc, t_thigh_angle_params->deg_acc_filtered, t_cutoff_frequency, t_sampling_Period);
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	edd3 7a03 	vldr	s15, [r3, #12]
 800d58c:	edd7 1a02 	vldr	s3, [r7, #8]
 800d590:	ed97 1a03 	vldr	s2, [r7, #12]
 800d594:	eef0 0a67 	vmov.f32	s1, s15
 800d598:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800d59c:	f7ff ff77 	bl	800d48e <Perform_LPF_on_Acc>
 800d5a0:	ed87 0a08 	vstr	s0, [r7, #32]

	/* Apply High Pass Filter (HPF) on gyroscope measurements */
	t_deg_gyr_filtered_update = Perform_HPF_on_Gyro(t_sensor_params->gyrZ[0], t_thigh_angle_params->deg_gyr_filtered, t_cutoff_frequency, t_sampling_Period);
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	ed93 7a04 	vldr	s14, [r3, #16]
 800d5b0:	edd7 1a02 	vldr	s3, [r7, #8]
 800d5b4:	ed97 1a03 	vldr	s2, [r7, #12]
 800d5b8:	eef0 0a47 	vmov.f32	s1, s14
 800d5bc:	eeb0 0a67 	vmov.f32	s0, s15
 800d5c0:	f7ff ff96 	bl	800d4f0 <Perform_HPF_on_Gyro>
 800d5c4:	ed87 0a07 	vstr	s0, [r7, #28]

	/* Combine filtered accelerometer and gyroscope measurements */
	t_deg_tvcf = t_deg_acc_filtered_update + t_deg_gyr_filtered_update;
 800d5c8:	ed97 7a08 	vldr	s14, [r7, #32]
 800d5cc:	edd7 7a07 	vldr	s15, [r7, #28]
 800d5d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5d4:	edc7 7a06 	vstr	s15, [r7, #24]

	t_thigh_angle_params->deg_acc_filtered = t_deg_acc_filtered_update;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	6a3a      	ldr	r2, [r7, #32]
 800d5dc:	60da      	str	r2, [r3, #12]
	t_thigh_angle_params->deg_gyr_filtered = t_deg_gyr_filtered_update;
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	69fa      	ldr	r2, [r7, #28]
 800d5e2:	611a      	str	r2, [r3, #16]
	t_thigh_angle_params->deg_tvcf_filtered = t_deg_tvcf;
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	69ba      	ldr	r2, [r7, #24]
 800d5e8:	615a      	str	r2, [r3, #20]
}
 800d5ea:	bf00      	nop
 800d5ec:	3728      	adds	r7, #40	; 0x28
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <Get_Max_Float>:

/*
*Get Max or Min Value between two variables for Normalization
*/
float Get_Max_Float(float t_x, float t_y)
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	ed87 0a01 	vstr	s0, [r7, #4]
 800d5fc:	edc7 0a00 	vstr	s1, [r7]
	return (t_x > t_y) ? t_x: t_y;
 800d600:	ed97 7a01 	vldr	s14, [r7, #4]
 800d604:	edd7 7a00 	vldr	s15, [r7]
 800d608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d610:	dd01      	ble.n	800d616 <Get_Max_Float+0x24>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	e000      	b.n	800d618 <Get_Max_Float+0x26>
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	ee07 3a90 	vmov	s15, r3
}
 800d61c:	eeb0 0a67 	vmov.f32	s0, s15
 800d620:	370c      	adds	r7, #12
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr

0800d62a <Get_Min_Float>:

float Get_Min_Float(float t_x, float t_y)
{
 800d62a:	b480      	push	{r7}
 800d62c:	b083      	sub	sp, #12
 800d62e:	af00      	add	r7, sp, #0
 800d630:	ed87 0a01 	vstr	s0, [r7, #4]
 800d634:	edc7 0a00 	vstr	s1, [r7]
	return (t_x < t_y) ? t_x : t_y;
 800d638:	ed97 7a01 	vldr	s14, [r7, #4]
 800d63c:	edd7 7a00 	vldr	s15, [r7]
 800d640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d648:	d501      	bpl.n	800d64e <Get_Min_Float+0x24>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	e000      	b.n	800d650 <Get_Min_Float+0x26>
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	ee07 3a90 	vmov	s15, r3
}
 800d654:	eeb0 0a67 	vmov.f32	s0, s15
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <Set_First_Half_Gait_Phase_Parameters>:

void Set_First_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 800d662:	b480      	push	{r7}
 800d664:	b083      	sub	sp, #12
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	6039      	str	r1, [r7, #0]
	t_norm_params->deg_o = t_norm_params->sum_deg / t_norm_params->sum_i;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	edd3 6a02 	vldr	s13, [r3, #8]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	8a1b      	ldrh	r3, [r3, #16]
 800d676:	ee07 3a90 	vmov	s15, r3
 800d67a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d67e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	edc3 7a00 	vstr	s15, [r3]
	t_norm_params->vel_o = t_norm_params->sum_vel / t_norm_params->sum_i;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	edd3 6a03 	vldr	s13, [r3, #12]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	8a1b      	ldrh	r3, [r3, #16]
 800d692:	ee07 3a90 	vmov	s15, r3
 800d696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d69a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	edc3 7a01 	vstr	s15, [r3, #4]

	t_gait_params->gait_period = t_norm_params->sum_i;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	8a1a      	ldrh	r2, [r3, #16]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	801a      	strh	r2, [r3, #0]

	t_norm_params->A_deg = (t_norm_params->deg_max - t_norm_params->deg_min) / 2;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	ed93 7a05 	vldr	s14, [r3, #20]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	edd3 7a06 	vldr	s15, [r3, #24]
 800d6b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d6bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d6c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	t_norm_params->A_vel = (t_norm_params->vel_max - t_norm_params->vel_min) / 2;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	ed93 7a07 	vldr	s14, [r3, #28]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	edd3 7a08 	vldr	s15, [r3, #32]
 800d6d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d6da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d6de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	t_norm_params->sum_i = 0;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg = 0;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f04f 0200 	mov.w	r2, #0
 800d6f4:	609a      	str	r2, [r3, #8]
	t_norm_params->sum_vel = 0;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f04f 0200 	mov.w	r2, #0
 800d6fc:	60da      	str	r2, [r3, #12]
	t_norm_params->deg_max = 0;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f04f 0200 	mov.w	r2, #0
 800d704:	615a      	str	r2, [r3, #20]
	t_norm_params->vel_max = 0;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f04f 0200 	mov.w	r2, #0
 800d70c:	61da      	str	r2, [r3, #28]
	t_norm_params->deg_min = 0;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f04f 0200 	mov.w	r2, #0
 800d714:	619a      	str	r2, [r3, #24]
	t_norm_params->vel_min = 0;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f04f 0200 	mov.w	r2, #0
 800d71c:	621a      	str	r2, [r3, #32]
}
 800d71e:	bf00      	nop
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <Set_Second_Half_Gait_Phase_Parameters>:

void Set_Second_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Thigh_Angle_Params* t_thigh_angle_params)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b082      	sub	sp, #8
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	6039      	str	r1, [r7, #0]
	t_norm_params->sum_i++;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	8a1b      	ldrh	r3, [r3, #16]
 800d738:	3301      	adds	r3, #1
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg += t_thigh_angle_params->deg_LPF_2nd[0];
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	ed93 7a02 	vldr	s14, [r3, #8]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d74c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	edc3 7a02 	vstr	s15, [r3, #8]
	t_norm_params->sum_vel += t_thigh_angle_params->vel_LPF_2nd[0];
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	ed93 7a03 	vldr	s14, [r3, #12]
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d762:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	edc3 7a03 	vstr	s15, [r3, #12]
	t_norm_params->deg_max = Get_Max_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_max);
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	ed93 7a05 	vldr	s14, [r3, #20]
 800d778:	eef0 0a47 	vmov.f32	s1, s14
 800d77c:	eeb0 0a67 	vmov.f32	s0, s15
 800d780:	f7ff ff37 	bl	800d5f2 <Get_Max_Float>
 800d784:	eef0 7a40 	vmov.f32	s15, s0
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	edc3 7a05 	vstr	s15, [r3, #20]
	t_norm_params->deg_min = Get_Min_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_min);
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	ed93 7a06 	vldr	s14, [r3, #24]
 800d79a:	eef0 0a47 	vmov.f32	s1, s14
 800d79e:	eeb0 0a67 	vmov.f32	s0, s15
 800d7a2:	f7ff ff42 	bl	800d62a <Get_Min_Float>
 800d7a6:	eef0 7a40 	vmov.f32	s15, s0
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	edc3 7a06 	vstr	s15, [r3, #24]
	t_norm_params->vel_max = Get_Max_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_max);
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	ed93 7a07 	vldr	s14, [r3, #28]
 800d7bc:	eef0 0a47 	vmov.f32	s1, s14
 800d7c0:	eeb0 0a67 	vmov.f32	s0, s15
 800d7c4:	f7ff ff15 	bl	800d5f2 <Get_Max_Float>
 800d7c8:	eef0 7a40 	vmov.f32	s15, s0
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	edc3 7a07 	vstr	s15, [r3, #28]
	t_norm_params->vel_min = Get_Min_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_min);
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	ed93 7a08 	vldr	s14, [r3, #32]
 800d7de:	eef0 0a47 	vmov.f32	s1, s14
 800d7e2:	eeb0 0a67 	vmov.f32	s0, s15
 800d7e6:	f7ff ff20 	bl	800d62a <Get_Min_Float>
 800d7ea:	eef0 7a40 	vmov.f32	s15, s0
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800d7f4:	bf00      	nop
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <Prepare_for_Circular_Normalization>:

/*
*Function to Prepare for Circular Normalization
*/
void Prepare_for_Circular_Normalization(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
	if (t_thigh_angle_params->vel_LPF_2nd[0] < 0 && t_thigh_angle_params->vel_LPF_2nd[1] > 0
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d80e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d816:	d521      	bpl.n	800d85c <Prepare_for_Circular_Normalization+0x60>
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800d81e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d826:	dd19      	ble.n	800d85c <Prepare_for_Circular_Normalization+0x60>
		&& t_norm_params->sum_i > (t_gait_params->gait_period)*0.5) {
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	8a1b      	ldrh	r3, [r3, #16]
 800d82c:	ee07 3a90 	vmov	s15, r3
 800d830:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	ee07 3a90 	vmov	s15, r3
 800d83c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d840:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d844:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d848:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d850:	dd04      	ble.n	800d85c <Prepare_for_Circular_Normalization+0x60>
		Set_First_Half_Gait_Phase_Parameters(t_norm_params, t_gait_params);
 800d852:	6879      	ldr	r1, [r7, #4]
 800d854:	68b8      	ldr	r0, [r7, #8]
 800d856:	f7ff ff04 	bl	800d662 <Set_First_Half_Gait_Phase_Parameters>
 800d85a:	e004      	b.n	800d866 <Prepare_for_Circular_Normalization+0x6a>
	}
	else{
		Set_Second_Half_Gait_Phase_Parameters(t_norm_params, t_thigh_angle_params);
 800d85c:	68f9      	ldr	r1, [r7, #12]
 800d85e:	68b8      	ldr	r0, [r7, #8]
 800d860:	f7ff ff63 	bl	800d72a <Set_Second_Half_Gait_Phase_Parameters>
	}
}
 800d864:	bf00      	nop
 800d866:	bf00      	nop
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <Get_Current_Gait_Phase>:

/*
*Function to calculate the current phase of the gait (0~100%)
*/
float Get_Current_Gait_Phase(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
	/* Calculate initial phase using atan function */
	float t_gait_phase = atan((-1) * (t_norm_params->vel_norm) / (t_norm_params->deg_norm));
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d880:	eef1 6a67 	vneg.f32	s13, s15
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800d88a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d88e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d892:	eeb0 0b47 	vmov.f64	d0, d7
 800d896:	f003 fa13 	bl	8010cc0 <atan>
 800d89a:	eeb0 7b40 	vmov.f64	d7, d0
 800d89e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d8a2:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Adjust phase based on the value of normalized degree */
    if (t_norm_params->deg_norm < 0){
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d8ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b4:	d50c      	bpl.n	800d8d0 <Get_Current_Gait_Phase+0x60>
        t_gait_phase += PI;
 800d8b6:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d8be:	ed9f 6b40 	vldr	d6, [pc, #256]	; 800d9c0 <Get_Current_Gait_Phase+0x150>
 800d8c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d8c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d8ca:	edc7 7a03 	vstr	s15, [r7, #12]
 800d8ce:	e01b      	b.n	800d908 <Get_Current_Gait_Phase+0x98>
    } else if (t_norm_params->deg_norm > 0 && t_norm_params->vel_norm > 0){
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d8d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8de:	dd13      	ble.n	800d908 <Get_Current_Gait_Phase+0x98>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d8e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ee:	dd0b      	ble.n	800d908 <Get_Current_Gait_Phase+0x98>
        t_gait_phase += 2 * PI;
 800d8f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d8f8:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800d9c8 <Get_Current_Gait_Phase+0x158>
 800d8fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d900:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d904:	edc7 7a03 	vstr	s15, [r7, #12]
    }

	/* Convert phase from radians to custom scale */
    t_gait_phase = t_gait_phase * 50.0f / PI;
 800d908:	edd7 7a03 	vldr	s15, [r7, #12]
 800d90c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d9d8 <Get_Current_Gait_Phase+0x168>
 800d910:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d914:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800d918:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d9c0 <Get_Current_Gait_Phase+0x150>
 800d91c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d920:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d924:	edc7 7a03 	vstr	s15, [r7, #12]
    t_gait_phase -= 12.11;
 800d928:	edd7 7a03 	vldr	s15, [r7, #12]
 800d92c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d930:	ed9f 6b27 	vldr	d6, [pc, #156]	; 800d9d0 <Get_Current_Gait_Phase+0x160>
 800d934:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d938:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d93c:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Adjust phase if it falls outside the range 0-100 */
    if (t_gait_phase < 0 && t_gait_phase != -100){
 800d940:	edd7 7a03 	vldr	s15, [r7, #12]
 800d944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d94c:	d510      	bpl.n	800d970 <Get_Current_Gait_Phase+0x100>
 800d94e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d952:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800d9dc <Get_Current_Gait_Phase+0x16c>
 800d956:	eef4 7a47 	vcmp.f32	s15, s14
 800d95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95e:	d007      	beq.n	800d970 <Get_Current_Gait_Phase+0x100>
        t_gait_phase += 100;
 800d960:	edd7 7a03 	vldr	s15, [r7, #12]
 800d964:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d9e0 <Get_Current_Gait_Phase+0x170>
 800d968:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d96c:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    /* Compare phase with the stored gait phase in gaitInfo */
    if (t_gait_phase > 5 && t_gait_phase < 95){
 800d970:	edd7 7a03 	vldr	s15, [r7, #12]
 800d974:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800d978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d980:	dd13      	ble.n	800d9aa <Get_Current_Gait_Phase+0x13a>
 800d982:	edd7 7a03 	vldr	s15, [r7, #12]
 800d986:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d9e4 <Get_Current_Gait_Phase+0x174>
 800d98a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d992:	d50a      	bpl.n	800d9aa <Get_Current_Gait_Phase+0x13a>
        t_gait_phase = Get_Max_Float(t_gait_phase, t_gait_params->gait_phase);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	edd3 7a01 	vldr	s15, [r3, #4]
 800d99a:	eef0 0a67 	vmov.f32	s1, s15
 800d99e:	ed97 0a03 	vldr	s0, [r7, #12]
 800d9a2:	f7ff fe26 	bl	800d5f2 <Get_Max_Float>
 800d9a6:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	return t_gait_phase;	// 0 ~ 100%
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	ee07 3a90 	vmov	s15, r3
}
 800d9b0:	eeb0 0a67 	vmov.f32	s0, s15
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	f3af 8000 	nop.w
 800d9c0:	fc8b007a 	.word	0xfc8b007a
 800d9c4:	400921fa 	.word	0x400921fa
 800d9c8:	fc8b007a 	.word	0xfc8b007a
 800d9cc:	401921fa 	.word	0x401921fa
 800d9d0:	eb851eb8 	.word	0xeb851eb8
 800d9d4:	40283851 	.word	0x40283851
 800d9d8:	42480000 	.word	0x42480000
 800d9dc:	c2c80000 	.word	0xc2c80000
 800d9e0:	42c80000 	.word	0x42c80000
 800d9e4:	42be0000 	.word	0x42be0000

0800d9e8 <Calculate_Assist_Force_Timing_Params>:

/*
*Function to Calculate timing parameters for Plantar&Dorsi assistance force
*/
static void Calculate_Assist_Force_Timing_Params(uint16_t* t_r, uint16_t* t_c, uint16_t* t_f, uint16_t t_r_end, uint16_t t_start, uint16_t t_c_end, uint16_t t_f_end, uint16_t t_t_r_limit, uint16_t t_t_f_limit, uint16_t t_gait_period)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	807b      	strh	r3, [r7, #2]
	*t_r = (t_r_end - t_start) * t_gait_period / 100;
 800d9f6:	887a      	ldrh	r2, [r7, #2]
 800d9f8:	8b3b      	ldrh	r3, [r7, #24]
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d9fe:	fb02 f303 	mul.w	r3, r2, r3
 800da02:	4a29      	ldr	r2, [pc, #164]	; (800daa8 <Calculate_Assist_Force_Timing_Params+0xc0>)
 800da04:	fb82 1203 	smull	r1, r2, r2, r3
 800da08:	1152      	asrs	r2, r2, #5
 800da0a:	17db      	asrs	r3, r3, #31
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	b29a      	uxth	r2, r3
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	801a      	strh	r2, [r3, #0]
	*t_c = (t_c_end - t_r_end) * t_gait_period / 100;
 800da14:	8bba      	ldrh	r2, [r7, #28]
 800da16:	887b      	ldrh	r3, [r7, #2]
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800da1c:	fb02 f303 	mul.w	r3, r2, r3
 800da20:	4a21      	ldr	r2, [pc, #132]	; (800daa8 <Calculate_Assist_Force_Timing_Params+0xc0>)
 800da22:	fb82 1203 	smull	r1, r2, r2, r3
 800da26:	1152      	asrs	r2, r2, #5
 800da28:	17db      	asrs	r3, r3, #31
 800da2a:	1ad3      	subs	r3, r2, r3
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	801a      	strh	r2, [r3, #0]
	*t_f = (t_f_end - t_c_end) * t_gait_period / 100;
 800da32:	8c3a      	ldrh	r2, [r7, #32]
 800da34:	8bbb      	ldrh	r3, [r7, #28]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800da3a:	fb02 f303 	mul.w	r3, r2, r3
 800da3e:	4a1a      	ldr	r2, [pc, #104]	; (800daa8 <Calculate_Assist_Force_Timing_Params+0xc0>)
 800da40:	fb82 1203 	smull	r1, r2, r2, r3
 800da44:	1152      	asrs	r2, r2, #5
 800da46:	17db      	asrs	r3, r3, #31
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	801a      	strh	r2, [r3, #0]

	if (*t_r < t_t_r_limit){
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da56:	429a      	cmp	r2, r3
 800da58:	d90d      	bls.n	800da76 <Calculate_Assist_Force_Timing_Params+0x8e>
		*t_c = *t_c - t_t_r_limit + *t_r;
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	881a      	ldrh	r2, [r3, #0]
 800da5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	b29a      	uxth	r2, r3
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	881b      	ldrh	r3, [r3, #0]
 800da68:	4413      	add	r3, r2
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	801a      	strh	r2, [r3, #0]
		*t_r = t_t_r_limit;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da74:	801a      	strh	r2, [r3, #0]
	}
	if (*t_f < t_t_f_limit){
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	881b      	ldrh	r3, [r3, #0]
 800da7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d90d      	bls.n	800da9c <Calculate_Assist_Force_Timing_Params+0xb4>
		*t_c = *t_c - t_t_f_limit + *t_f;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	881a      	ldrh	r2, [r3, #0]
 800da84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	b29a      	uxth	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	881b      	ldrh	r3, [r3, #0]
 800da8e:	4413      	add	r3, r2
 800da90:	b29a      	uxth	r2, r3
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	801a      	strh	r2, [r3, #0]
		*t_f = t_t_f_limit;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800da9a:	801a      	strh	r2, [r3, #0]
	}
	if (*t_c < 0){
		*t_c = 0;
	}
}
 800da9c:	bf00      	nop
 800da9e:	3714      	adds	r7, #20
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr
 800daa8:	51eb851f 	.word	0x51eb851f

0800daac <Set_Assist_Force_Timing_Params>:
/*
*Function to Set timing parameters for Plantar&Dorsi assistance force(rising, continuous, falling time)
*/

void Set_Assist_Force_Timing_Params(Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 800daac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab0:	b08a      	sub	sp, #40	; 0x28
 800dab2:	af06      	add	r7, sp, #24
 800dab4:	60f8      	str	r0, [r7, #12]
 800dab6:	60b9      	str	r1, [r7, #8]
 800dab8:	607a      	str	r2, [r7, #4]
 800daba:	603b      	str	r3, [r7, #0]
	if (t_gait_params->gait_period > 2000){
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	881b      	ldrh	r3, [r3, #0]
 800dac0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800dac4:	d903      	bls.n	800dace <Set_Assist_Force_Timing_Params+0x22>
		t_gait_params->gait_period = 2000;
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800dacc:	801a      	strh	r2, [r3, #0]
	}

	/* Calculate timing parameters for Plantar assistance force */
	Calculate_Assist_Force_Timing_Params(
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f103 0608 	add.w	r6, r3, #8
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f103 0c0a 	add.w	ip, r3, #10
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f103 0e0c 	add.w	lr, r3, #12
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	8892      	ldrh	r2, [r2, #4]
 800daee:	68f9      	ldr	r1, [r7, #12]
 800daf0:	88c9      	ldrh	r1, [r1, #6]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	8800      	ldrh	r0, [r0, #0]
 800daf6:	687c      	ldr	r4, [r7, #4]
 800daf8:	8864      	ldrh	r4, [r4, #2]
 800dafa:	683d      	ldr	r5, [r7, #0]
 800dafc:	882d      	ldrh	r5, [r5, #0]
 800dafe:	9505      	str	r5, [sp, #20]
 800db00:	9404      	str	r4, [sp, #16]
 800db02:	9003      	str	r0, [sp, #12]
 800db04:	9102      	str	r1, [sp, #8]
 800db06:	9201      	str	r2, [sp, #4]
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	4643      	mov	r3, r8
 800db0c:	4672      	mov	r2, lr
 800db0e:	4661      	mov	r1, ip
 800db10:	4630      	mov	r0, r6
 800db12:	f7ff ff69 	bl	800d9e8 <Calculate_Assist_Force_Timing_Params>
            t_assist_params->t_r_limit,    	// Rising time limit
            t_assist_params->t_f_limit,    	// Falling time limit
            t_gait_params->gait_period      // Gait period
	);
	/* Calculate timing parameters for Dorsiflexion assistance force */
	Calculate_Assist_Force_Timing_Params(
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	f103 0608 	add.w	r6, r3, #8
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	f103 0c0a 	add.w	ip, r3, #10
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	f103 0e0c 	add.w	lr, r3, #12
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	8892      	ldrh	r2, [r2, #4]
 800db36:	68b9      	ldr	r1, [r7, #8]
 800db38:	88c9      	ldrh	r1, [r1, #6]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	8800      	ldrh	r0, [r0, #0]
 800db3e:	687c      	ldr	r4, [r7, #4]
 800db40:	8864      	ldrh	r4, [r4, #2]
 800db42:	683d      	ldr	r5, [r7, #0]
 800db44:	882d      	ldrh	r5, [r5, #0]
 800db46:	9505      	str	r5, [sp, #20]
 800db48:	9404      	str	r4, [sp, #16]
 800db4a:	9003      	str	r0, [sp, #12]
 800db4c:	9102      	str	r1, [sp, #8]
 800db4e:	9201      	str	r2, [sp, #4]
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	4643      	mov	r3, r8
 800db54:	4672      	mov	r2, lr
 800db56:	4661      	mov	r1, ip
 800db58:	4630      	mov	r0, r6
 800db5a:	f7ff ff45 	bl	800d9e8 <Calculate_Assist_Force_Timing_Params>
			t_dorsi_params->t_f_D_end,     // Dorsi falling end time
            t_assist_params->t_r_limit,    	// Rising time limit
            t_assist_params->t_f_limit,   	// Falling time limit
            t_gait_params->gait_period      // Gait period
	);
}
 800db5e:	bf00      	nop
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db68 <Get_Angle_Scenario>:


float Get_Angle_Scenario(Sensor_Params* t_sensor_params, AttachPlane t_attach_plane)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	460b      	mov	r3, r1
 800db72:	70fb      	strb	r3, [r7, #3]
	float estimated_angle = 0.0;
 800db74:	f04f 0300 	mov.w	r3, #0
 800db78:	60fb      	str	r3, [r7, #12]

	switch (t_attach_plane)
 800db7a:	78fb      	ldrb	r3, [r7, #3]
 800db7c:	2b04      	cmp	r3, #4
 800db7e:	f200 8085 	bhi.w	800dc8c <Get_Angle_Scenario+0x124>
 800db82:	a201      	add	r2, pc, #4	; (adr r2, 800db88 <Get_Angle_Scenario+0x20>)
 800db84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db88:	0800db9d 	.word	0x0800db9d
 800db8c:	0800dc19 	.word	0x0800dc19
 800db90:	0800dc55 	.word	0x0800dc55
 800db94:	0800dc8d 	.word	0x0800dc8d
 800db98:	0800dbdd 	.word	0x0800dbdd
	{
		case (e_LEFT_SAGITAL):
			estimated_angle = atan2((t_sensor_params->accY[0])*(-1), (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(-y/-x) : Left Sagital case
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	edd3 7a02 	vldr	s15, [r3, #8]
 800dba2:	eef1 7a67 	vneg.f32	s15, s15
 800dba6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	edd3 6a00 	vldr	s13, [r3]
 800dbb0:	eef1 6a66 	vneg.f32	s13, s13
 800dbb4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800dbb8:	eeb0 1b46 	vmov.f64	d1, d6
 800dbbc:	eeb0 0b47 	vmov.f64	d0, d7
 800dbc0:	f003 f85c 	bl	8010c7c <atan2>
 800dbc4:	eeb0 7b40 	vmov.f64	d7, d0
 800dbc8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 800dca0 <Get_Angle_Scenario+0x138>
 800dbcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dbd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dbd4:	edc7 7a03 	vstr	s15, [r7, #12]
			return estimated_angle;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	e058      	b.n	800dc8e <Get_Angle_Scenario+0x126>

		case (e_RIGHT_SAGITAL):
			estimated_angle = atan2(t_sensor_params->accY[0], (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(y/-x) : Right Sagital case
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	edd3 7a02 	vldr	s15, [r3, #8]
 800dbe2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	edd3 6a00 	vldr	s13, [r3]
 800dbec:	eef1 6a66 	vneg.f32	s13, s13
 800dbf0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800dbf4:	eeb0 1b46 	vmov.f64	d1, d6
 800dbf8:	eeb0 0b47 	vmov.f64	d0, d7
 800dbfc:	f003 f83e 	bl	8010c7c <atan2>
 800dc00:	eeb0 7b40 	vmov.f64	d7, d0
 800dc04:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800dca0 <Get_Angle_Scenario+0x138>
 800dc08:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dc10:	edc7 7a03 	vstr	s15, [r7, #12]
			return estimated_angle;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	e03a      	b.n	800dc8e <Get_Angle_Scenario+0x126>

		case (e_LEFT_SAGITAL_DEMO):
			estimated_angle = atan2(t_sensor_params->accX[0], (t_sensor_params->accY[0])*(-1)) * (180 / PI);	// arctan(x/-y) : Left Sagital DEMO ver case
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	edd3 7a00 	vldr	s15, [r3]
 800dc1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	edd3 6a02 	vldr	s13, [r3, #8]
 800dc28:	eef1 6a66 	vneg.f32	s13, s13
 800dc2c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800dc30:	eeb0 1b46 	vmov.f64	d1, d6
 800dc34:	eeb0 0b47 	vmov.f64	d0, d7
 800dc38:	f003 f820 	bl	8010c7c <atan2>
 800dc3c:	eeb0 7b40 	vmov.f64	d7, d0
 800dc40:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800dca0 <Get_Angle_Scenario+0x138>
 800dc44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dc4c:	edc7 7a03 	vstr	s15, [r7, #12]
			return estimated_angle;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	e01c      	b.n	800dc8e <Get_Angle_Scenario+0x126>

		case (e_CM_TEST):
			estimated_angle = atan2(t_sensor_params->accX[0], (t_sensor_params->accY[0])*(-1)) * (180 / PI);	// arctan(x/-y) : FOR CM TEST
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	edd3 7a00 	vldr	s15, [r3]
 800dc5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	edd3 6a02 	vldr	s13, [r3, #8]
 800dc64:	eef1 6a66 	vneg.f32	s13, s13
 800dc68:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800dc6c:	eeb0 1b46 	vmov.f64	d1, d6
 800dc70:	eeb0 0b47 	vmov.f64	d0, d7
 800dc74:	f003 f802 	bl	8010c7c <atan2>
 800dc78:	eeb0 7b40 	vmov.f64	d7, d0
 800dc7c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800dca0 <Get_Angle_Scenario+0x138>
 800dc80:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dc88:	edc7 7a03 	vstr	s15, [r7, #12]

		default:
			return estimated_angle;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
	}
}
 800dc8e:	ee07 3a90 	vmov	s15, r3
 800dc92:	eeb0 0a67 	vmov.f32	s0, s15
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	f3af 8000 	nop.w
 800dca0:	7e61df46 	.word	0x7e61df46
 800dca4:	404ca5dc 	.word	0x404ca5dc

0800dca8 <Get_Msg_Data_Type_Info>:
#include "msg_data_object.h"

MsgDataObjectDictionary msg_dods[TASK_NUM];

MsgDataTypeInfoStruct Get_Msg_Data_Type_Info(MsgDataTypeEnum t_type)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	70fb      	strb	r3, [r7, #3]
	MsgDataTypeInfoStruct t_res;

    switch (t_type) {
 800dcb4:	78fb      	ldrb	r3, [r7, #3]
 800dcb6:	2b09      	cmp	r3, #9
 800dcb8:	d848      	bhi.n	800dd4c <Get_Msg_Data_Type_Info+0xa4>
 800dcba:	a201      	add	r2, pc, #4	; (adr r2, 800dcc0 <Get_Msg_Data_Type_Info+0x18>)
 800dcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcc0:	0800dce9 	.word	0x0800dce9
 800dcc4:	0800dcf3 	.word	0x0800dcf3
 800dcc8:	0800dcfd 	.word	0x0800dcfd
 800dccc:	0800dd07 	.word	0x0800dd07
 800dcd0:	0800dd11 	.word	0x0800dd11
 800dcd4:	0800dd1b 	.word	0x0800dd1b
 800dcd8:	0800dd25 	.word	0x0800dd25
 800dcdc:	0800dd2f 	.word	0x0800dd2f
 800dce0:	0800dd39 	.word	0x0800dd39
 800dce4:	0800dd43 	.word	0x0800dd43
    case e_Char   : t_res.name = "char"   ; t_res.size = sizeof(char);     break;
 800dce8:	4b20      	ldr	r3, [pc, #128]	; (800dd6c <Get_Msg_Data_Type_Info+0xc4>)
 800dcea:	60bb      	str	r3, [r7, #8]
 800dcec:	2301      	movs	r3, #1
 800dcee:	733b      	strb	r3, [r7, #12]
 800dcf0:	e02d      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt8  : t_res.name = "uint8"  ; t_res.size = sizeof(uint8_t);  break;
 800dcf2:	4b1f      	ldr	r3, [pc, #124]	; (800dd70 <Get_Msg_Data_Type_Info+0xc8>)
 800dcf4:	60bb      	str	r3, [r7, #8]
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	733b      	strb	r3, [r7, #12]
 800dcfa:	e028      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt16 : t_res.name = "uint16" ; t_res.size = sizeof(uint16_t); break;
 800dcfc:	4b1d      	ldr	r3, [pc, #116]	; (800dd74 <Get_Msg_Data_Type_Info+0xcc>)
 800dcfe:	60bb      	str	r3, [r7, #8]
 800dd00:	2302      	movs	r3, #2
 800dd02:	733b      	strb	r3, [r7, #12]
 800dd04:	e023      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt32 : t_res.name = "uint32" ; t_res.size = sizeof(uint32_t); break;
 800dd06:	4b1c      	ldr	r3, [pc, #112]	; (800dd78 <Get_Msg_Data_Type_Info+0xd0>)
 800dd08:	60bb      	str	r3, [r7, #8]
 800dd0a:	2304      	movs	r3, #4
 800dd0c:	733b      	strb	r3, [r7, #12]
 800dd0e:	e01e      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    case e_Int8   : t_res.name = "int8"   ; t_res.size = sizeof(int8_t);   break;
 800dd10:	4b1a      	ldr	r3, [pc, #104]	; (800dd7c <Get_Msg_Data_Type_Info+0xd4>)
 800dd12:	60bb      	str	r3, [r7, #8]
 800dd14:	2301      	movs	r3, #1
 800dd16:	733b      	strb	r3, [r7, #12]
 800dd18:	e019      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    case e_Int16  : t_res.name = "int16"  ; t_res.size = sizeof(int16_t);  break;
 800dd1a:	4b19      	ldr	r3, [pc, #100]	; (800dd80 <Get_Msg_Data_Type_Info+0xd8>)
 800dd1c:	60bb      	str	r3, [r7, #8]
 800dd1e:	2302      	movs	r3, #2
 800dd20:	733b      	strb	r3, [r7, #12]
 800dd22:	e014      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    case e_Int32  : t_res.name = "int32"  ; t_res.size = sizeof(int32_t);  break;
 800dd24:	4b17      	ldr	r3, [pc, #92]	; (800dd84 <Get_Msg_Data_Type_Info+0xdc>)
 800dd26:	60bb      	str	r3, [r7, #8]
 800dd28:	2304      	movs	r3, #4
 800dd2a:	733b      	strb	r3, [r7, #12]
 800dd2c:	e00f      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    case e_Float32: t_res.name = "float32"; t_res.size = sizeof(float);    break;
 800dd2e:	4b16      	ldr	r3, [pc, #88]	; (800dd88 <Get_Msg_Data_Type_Info+0xe0>)
 800dd30:	60bb      	str	r3, [r7, #8]
 800dd32:	2304      	movs	r3, #4
 800dd34:	733b      	strb	r3, [r7, #12]
 800dd36:	e00a      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    case e_Float64: t_res.name = "float64"; t_res.size = sizeof(double);   break;
 800dd38:	4b14      	ldr	r3, [pc, #80]	; (800dd8c <Get_Msg_Data_Type_Info+0xe4>)
 800dd3a:	60bb      	str	r3, [r7, #8]
 800dd3c:	2308      	movs	r3, #8
 800dd3e:	733b      	strb	r3, [r7, #12]
 800dd40:	e005      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    case e_String10: t_res.name = "string10"; t_res.size = 32*sizeof(char);   break;
 800dd42:	4b13      	ldr	r3, [pc, #76]	; (800dd90 <Get_Msg_Data_Type_Info+0xe8>)
 800dd44:	60bb      	str	r3, [r7, #8]
 800dd46:	2320      	movs	r3, #32
 800dd48:	733b      	strb	r3, [r7, #12]
 800dd4a:	e000      	b.n	800dd4e <Get_Msg_Data_Type_Info+0xa6>
    default: break;
 800dd4c:	bf00      	nop
    }
    return t_res;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	461a      	mov	r2, r3
 800dd52:	f107 0308 	add.w	r3, r7, #8
 800dd56:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dd5a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	3714      	adds	r7, #20
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	08011a34 	.word	0x08011a34
 800dd70:	08011a3c 	.word	0x08011a3c
 800dd74:	08011a44 	.word	0x08011a44
 800dd78:	08011a4c 	.word	0x08011a4c
 800dd7c:	08011a54 	.word	0x08011a54
 800dd80:	08011a5c 	.word	0x08011a5c
 800dd84:	08011a64 	.word	0x08011a64
 800dd88:	08011a6c 	.word	0x08011a6c
 800dd8c:	08011a74 	.word	0x08011a74
 800dd90:	08011a7c 	.word	0x08011a7c

0800dd94 <Create_DOD>:
                                |__/                                                |__/ 
*/

// Create Data Object & Dictionary
void Create_DOD(uint8_t t_dod_id)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	71fb      	strb	r3, [r7, #7]
	msg_dods[t_dod_id].id = t_dod_id;
 800dd9e:	79fb      	ldrb	r3, [r7, #7]
 800dda0:	4a07      	ldr	r2, [pc, #28]	; (800ddc0 <Create_DOD+0x2c>)
 800dda2:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800dda6:	fb01 f303 	mul.w	r3, r1, r3
 800ddaa:	4413      	add	r3, r2
 800ddac:	3304      	adds	r3, #4
 800ddae:	79fa      	ldrb	r2, [r7, #7]
 800ddb0:	701a      	strb	r2, [r3, #0]
}
 800ddb2:	bf00      	nop
 800ddb4:	370c      	adds	r7, #12
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	2400096c 	.word	0x2400096c

0800ddc4 <Create_PDO>:

void Create_PDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, uint8_t t_size, void* t_addr)
{
 800ddc4:	b5b0      	push	{r4, r5, r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	4604      	mov	r4, r0
 800ddcc:	4608      	mov	r0, r1
 800ddce:	4611      	mov	r1, r2
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	4623      	mov	r3, r4
 800ddd4:	71fb      	strb	r3, [r7, #7]
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	71bb      	strb	r3, [r7, #6]
 800ddda:	460b      	mov	r3, r1
 800dddc:	717b      	strb	r3, [r7, #5]
 800ddde:	4613      	mov	r3, r2
 800dde0:	713b      	strb	r3, [r7, #4]
    msg_dods[t_dod_id].pdos[t_obj_id].id   = t_obj_id;
 800dde2:	79f9      	ldrb	r1, [r7, #7]
 800dde4:	79ba      	ldrb	r2, [r7, #6]
 800dde6:	4853      	ldr	r0, [pc, #332]	; (800df34 <Create_PDO+0x170>)
 800dde8:	4613      	mov	r3, r2
 800ddea:	005b      	lsls	r3, r3, #1
 800ddec:	4413      	add	r3, r2
 800ddee:	00db      	lsls	r3, r3, #3
 800ddf0:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800ddf4:	fb01 f202 	mul.w	r2, r1, r2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	4403      	add	r3, r0
 800ddfc:	3308      	adds	r3, #8
 800ddfe:	79ba      	ldrb	r2, [r7, #6]
 800de00:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].type = t_type;
 800de02:	79f9      	ldrb	r1, [r7, #7]
 800de04:	79ba      	ldrb	r2, [r7, #6]
 800de06:	484b      	ldr	r0, [pc, #300]	; (800df34 <Create_PDO+0x170>)
 800de08:	4613      	mov	r3, r2
 800de0a:	005b      	lsls	r3, r3, #1
 800de0c:	4413      	add	r3, r2
 800de0e:	00db      	lsls	r3, r3, #3
 800de10:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800de14:	fb01 f202 	mul.w	r2, r1, r2
 800de18:	4413      	add	r3, r2
 800de1a:	4403      	add	r3, r0
 800de1c:	3310      	adds	r3, #16
 800de1e:	797a      	ldrb	r2, [r7, #5]
 800de20:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].size  = t_size;
 800de22:	79f9      	ldrb	r1, [r7, #7]
 800de24:	79ba      	ldrb	r2, [r7, #6]
 800de26:	4843      	ldr	r0, [pc, #268]	; (800df34 <Create_PDO+0x170>)
 800de28:	4613      	mov	r3, r2
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	4413      	add	r3, r2
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800de34:	fb01 f202 	mul.w	r2, r1, r2
 800de38:	4413      	add	r3, r2
 800de3a:	4403      	add	r3, r0
 800de3c:	3311      	adds	r3, #17
 800de3e:	793a      	ldrb	r2, [r7, #4]
 800de40:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].addr = t_addr;
 800de42:	79f9      	ldrb	r1, [r7, #7]
 800de44:	79ba      	ldrb	r2, [r7, #6]
 800de46:	483b      	ldr	r0, [pc, #236]	; (800df34 <Create_PDO+0x170>)
 800de48:	4613      	mov	r3, r2
 800de4a:	005b      	lsls	r3, r3, #1
 800de4c:	4413      	add	r3, r2
 800de4e:	00db      	lsls	r3, r3, #3
 800de50:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800de54:	fb01 f202 	mul.w	r2, r1, r2
 800de58:	4413      	add	r3, r2
 800de5a:	4403      	add	r3, r0
 800de5c:	3314      	adds	r3, #20
 800de5e:	6a3a      	ldr	r2, [r7, #32]
 800de60:	601a      	str	r2, [r3, #0]

    msg_dods[t_dod_id].pdos[t_obj_id].data_size  = Get_Msg_Data_Type_Info(t_type).size * t_size;
 800de62:	f107 0308 	add.w	r3, r7, #8
 800de66:	797a      	ldrb	r2, [r7, #5]
 800de68:	4611      	mov	r1, r2
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7ff ff1c 	bl	800dca8 <Get_Msg_Data_Type_Info>
 800de70:	7b3a      	ldrb	r2, [r7, #12]
 800de72:	79f9      	ldrb	r1, [r7, #7]
 800de74:	79bb      	ldrb	r3, [r7, #6]
 800de76:	7938      	ldrb	r0, [r7, #4]
 800de78:	fb10 f202 	smulbb	r2, r0, r2
 800de7c:	b2d4      	uxtb	r4, r2
 800de7e:	482d      	ldr	r0, [pc, #180]	; (800df34 <Create_PDO+0x170>)
 800de80:	1c5a      	adds	r2, r3, #1
 800de82:	4613      	mov	r3, r2
 800de84:	005b      	lsls	r3, r3, #1
 800de86:	4413      	add	r3, r2
 800de88:	00db      	lsls	r3, r3, #3
 800de8a:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800de8e:	fb01 f202 	mul.w	r2, r1, r2
 800de92:	4413      	add	r3, r2
 800de94:	4403      	add	r3, r0
 800de96:	3304      	adds	r3, #4
 800de98:	4622      	mov	r2, r4
 800de9a:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].last_pub = malloc(msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 800de9c:	79f9      	ldrb	r1, [r7, #7]
 800de9e:	79bb      	ldrb	r3, [r7, #6]
 800dea0:	4824      	ldr	r0, [pc, #144]	; (800df34 <Create_PDO+0x170>)
 800dea2:	1c5a      	adds	r2, r3, #1
 800dea4:	4613      	mov	r3, r2
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	4413      	add	r3, r2
 800deaa:	00db      	lsls	r3, r3, #3
 800deac:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800deb0:	fb01 f202 	mul.w	r2, r1, r2
 800deb4:	4413      	add	r3, r2
 800deb6:	4403      	add	r3, r0
 800deb8:	3304      	adds	r3, #4
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	79fc      	ldrb	r4, [r7, #7]
 800debe:	79bd      	ldrb	r5, [r7, #6]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f001 ff0d 	bl	800fce0 <malloc>
 800dec6:	4603      	mov	r3, r0
 800dec8:	4618      	mov	r0, r3
 800deca:	491a      	ldr	r1, [pc, #104]	; (800df34 <Create_PDO+0x170>)
 800decc:	1c6a      	adds	r2, r5, #1
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800deda:	fb04 f202 	mul.w	r2, r4, r2
 800dede:	4413      	add	r3, r2
 800dee0:	440b      	add	r3, r1
 800dee2:	6018      	str	r0, [r3, #0]

    memset(msg_dods[t_dod_id].pdos[t_obj_id].last_pub, 0xFF, msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 800dee4:	79f9      	ldrb	r1, [r7, #7]
 800dee6:	79bb      	ldrb	r3, [r7, #6]
 800dee8:	4812      	ldr	r0, [pc, #72]	; (800df34 <Create_PDO+0x170>)
 800deea:	1c5a      	adds	r2, r3, #1
 800deec:	4613      	mov	r3, r2
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	4413      	add	r3, r2
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800def8:	fb01 f202 	mul.w	r2, r1, r2
 800defc:	4413      	add	r3, r2
 800defe:	4403      	add	r3, r0
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	79f9      	ldrb	r1, [r7, #7]
 800df04:	79bb      	ldrb	r3, [r7, #6]
 800df06:	4c0b      	ldr	r4, [pc, #44]	; (800df34 <Create_PDO+0x170>)
 800df08:	1c5a      	adds	r2, r3, #1
 800df0a:	4613      	mov	r3, r2
 800df0c:	005b      	lsls	r3, r3, #1
 800df0e:	4413      	add	r3, r2
 800df10:	00db      	lsls	r3, r3, #3
 800df12:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800df16:	fb01 f202 	mul.w	r2, r1, r2
 800df1a:	4413      	add	r3, r2
 800df1c:	4423      	add	r3, r4
 800df1e:	3304      	adds	r3, #4
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	21ff      	movs	r1, #255	; 0xff
 800df26:	f002 f8d4 	bl	80100d2 <memset>
}
 800df2a:	bf00      	nop
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bdb0      	pop	{r4, r5, r7, pc}
 800df32:	bf00      	nop
 800df34:	2400096c 	.word	0x2400096c

0800df38 <Create_SDO>:

void Create_SDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, MsgSDOCallback t_callback)
{
 800df38:	b590      	push	{r4, r7, lr}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	4603      	mov	r3, r0
 800df42:	71fb      	strb	r3, [r7, #7]
 800df44:	460b      	mov	r3, r1
 800df46:	71bb      	strb	r3, [r7, #6]
 800df48:	4613      	mov	r3, r2
 800df4a:	717b      	strb	r3, [r7, #5]
	msg_dods[t_dod_id].sdos[t_obj_id].id        = t_obj_id;
 800df4c:	79f9      	ldrb	r1, [r7, #7]
 800df4e:	79ba      	ldrb	r2, [r7, #6]
 800df50:	4840      	ldr	r0, [pc, #256]	; (800e054 <Create_SDO+0x11c>)
 800df52:	4613      	mov	r3, r2
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	4413      	add	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800df5e:	fb01 f202 	mul.w	r2, r1, r2
 800df62:	4413      	add	r3, r2
 800df64:	4403      	add	r3, r0
 800df66:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800df6a:	79ba      	ldrb	r2, [r7, #6]
 800df6c:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].type      = t_type;
 800df6e:	79f9      	ldrb	r1, [r7, #7]
 800df70:	79ba      	ldrb	r2, [r7, #6]
 800df72:	4838      	ldr	r0, [pc, #224]	; (800e054 <Create_SDO+0x11c>)
 800df74:	4613      	mov	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800df80:	fb01 f202 	mul.w	r2, r1, r2
 800df84:	4413      	add	r3, r2
 800df86:	4403      	add	r3, r0
 800df88:	f203 23d9 	addw	r3, r3, #729	; 0x2d9
 800df8c:	797a      	ldrb	r2, [r7, #5]
 800df8e:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].callback  = t_callback;
 800df90:	79f9      	ldrb	r1, [r7, #7]
 800df92:	79ba      	ldrb	r2, [r7, #6]
 800df94:	482f      	ldr	r0, [pc, #188]	; (800e054 <Create_SDO+0x11c>)
 800df96:	4613      	mov	r3, r2
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	4413      	add	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800dfa2:	fb01 f202 	mul.w	r2, r1, r2
 800dfa6:	4413      	add	r3, r2
 800dfa8:	4403      	add	r3, r0
 800dfaa:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800dfae:	683a      	ldr	r2, [r7, #0]
 800dfb0:	601a      	str	r2, [r3, #0]

	msg_dods[t_dod_id].sdos[t_obj_id].args.status = DATA_OBJECT_SDO_IDLE;
 800dfb2:	79f9      	ldrb	r1, [r7, #7]
 800dfb4:	79ba      	ldrb	r2, [r7, #6]
 800dfb6:	4827      	ldr	r0, [pc, #156]	; (800e054 <Create_SDO+0x11c>)
 800dfb8:	4613      	mov	r3, r2
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	4413      	add	r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800dfc4:	fb01 f202 	mul.w	r2, r1, r2
 800dfc8:	4413      	add	r3, r2
 800dfca:	4403      	add	r3, r0
 800dfcc:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.size   = 0;
 800dfd4:	79f9      	ldrb	r1, [r7, #7]
 800dfd6:	79ba      	ldrb	r2, [r7, #6]
 800dfd8:	481e      	ldr	r0, [pc, #120]	; (800e054 <Create_SDO+0x11c>)
 800dfda:	4613      	mov	r3, r2
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4413      	add	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800dfe6:	fb01 f202 	mul.w	r2, r1, r2
 800dfea:	4413      	add	r3, r2
 800dfec:	4403      	add	r3, r0
 800dfee:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800dff2:	2200      	movs	r2, #0
 800dff4:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data   = NULL;
 800dff6:	79f9      	ldrb	r1, [r7, #7]
 800dff8:	79ba      	ldrb	r2, [r7, #6]
 800dffa:	4816      	ldr	r0, [pc, #88]	; (800e054 <Create_SDO+0x11c>)
 800dffc:	4613      	mov	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800e008:	fb01 f202 	mul.w	r2, r1, r2
 800e00c:	4413      	add	r3, r2
 800e00e:	4403      	add	r3, r0
 800e010:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800e014:	2200      	movs	r2, #0
 800e016:	601a      	str	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data_size = Get_Msg_Data_Type_Info(t_type).size;
 800e018:	f107 0308 	add.w	r3, r7, #8
 800e01c:	797a      	ldrb	r2, [r7, #5]
 800e01e:	4611      	mov	r1, r2
 800e020:	4618      	mov	r0, r3
 800e022:	f7ff fe41 	bl	800dca8 <Get_Msg_Data_Type_Info>
 800e026:	7b3b      	ldrb	r3, [r7, #12]
 800e028:	79f9      	ldrb	r1, [r7, #7]
 800e02a:	79ba      	ldrb	r2, [r7, #6]
 800e02c:	b29c      	uxth	r4, r3
 800e02e:	4809      	ldr	r0, [pc, #36]	; (800e054 <Create_SDO+0x11c>)
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800e03c:	fb01 f202 	mul.w	r2, r1, r2
 800e040:	4413      	add	r3, r2
 800e042:	4403      	add	r3, r0
 800e044:	f203 23e6 	addw	r3, r3, #742	; 0x2e6
 800e048:	4622      	mov	r2, r4
 800e04a:	801a      	strh	r2, [r3, #0]
}
 800e04c:	bf00      	nop
 800e04e:	3714      	adds	r7, #20
 800e050:	46bd      	mov	sp, r7
 800e052:	bd90      	pop	{r4, r7, pc}
 800e054:	2400096c 	.word	0x2400096c

0800e058 <Find_PDO>:

MsgPDOStruct* Find_PDO(uint8_t t_dod_id, uint8_t t_id)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	4603      	mov	r3, r0
 800e060:	460a      	mov	r2, r1
 800e062:	71fb      	strb	r3, [r7, #7]
 800e064:	4613      	mov	r3, r2
 800e066:	71bb      	strb	r3, [r7, #6]
	return &msg_dods[t_dod_id].pdos[t_id];
 800e068:	79f9      	ldrb	r1, [r7, #7]
 800e06a:	79ba      	ldrb	r2, [r7, #6]
 800e06c:	4613      	mov	r3, r2
 800e06e:	005b      	lsls	r3, r3, #1
 800e070:	4413      	add	r3, r2
 800e072:	00db      	lsls	r3, r3, #3
 800e074:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800e078:	fb01 f202 	mul.w	r2, r1, r2
 800e07c:	4413      	add	r3, r2
 800e07e:	3308      	adds	r3, #8
 800e080:	4a03      	ldr	r2, [pc, #12]	; (800e090 <Find_PDO+0x38>)
 800e082:	4413      	add	r3, r2
}
 800e084:	4618      	mov	r0, r3
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr
 800e090:	2400096c 	.word	0x2400096c

0800e094 <Find_SDO>:

MsgSDOStruct* Find_SDO(uint8_t t_dod_id, uint8_t t_id)
{
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	4603      	mov	r3, r0
 800e09c:	460a      	mov	r2, r1
 800e09e:	71fb      	strb	r3, [r7, #7]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	71bb      	strb	r3, [r7, #6]
	return &msg_dods[t_dod_id].sdos[t_id];
 800e0a4:	79f9      	ldrb	r1, [r7, #7]
 800e0a6:	79ba      	ldrb	r2, [r7, #6]
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800e0b4:	fb01 f202 	mul.w	r2, r1, r2
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800e0be:	4a04      	ldr	r2, [pc, #16]	; (800e0d0 <Find_SDO+0x3c>)
 800e0c0:	4413      	add	r3, r2
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	370c      	adds	r7, #12
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop
 800e0d0:	2400096c 	.word	0x2400096c

0800e0d4 <Set_PDO>:

uint16_t Set_PDO(MsgPDOStruct* t_pdo, void* t_data)
{    
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
    memcpy(t_data, t_pdo->addr, t_pdo->data_size);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	68d9      	ldr	r1, [r3, #12]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	7d1b      	ldrb	r3, [r3, #20]
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	6838      	ldr	r0, [r7, #0]
 800e0ea:	f002 f87d 	bl	80101e8 <memcpy>
    memcpy(t_pdo->last_pub, t_pdo->addr, t_pdo->data_size);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6918      	ldr	r0, [r3, #16]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	68d9      	ldr	r1, [r3, #12]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	7d1b      	ldrb	r3, [r3, #20]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f002 f874 	bl	80101e8 <memcpy>
    return t_pdo->data_size;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	7d1b      	ldrb	r3, [r3, #20]
 800e104:	b29b      	uxth	r3, r3
}
 800e106:	4618      	mov	r0, r3
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <Get_PDO>:

uint16_t Get_PDO(MsgPDOStruct* t_pdo, void* t_data)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b082      	sub	sp, #8
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	6039      	str	r1, [r7, #0]
    memcpy(t_pdo->addr, t_data, t_pdo->data_size);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68d8      	ldr	r0, [r3, #12]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	7d1b      	ldrb	r3, [r3, #20]
 800e120:	461a      	mov	r2, r3
 800e122:	6839      	ldr	r1, [r7, #0]
 800e124:	f002 f860 	bl	80101e8 <memcpy>
    return t_pdo->data_size;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	7d1b      	ldrb	r3, [r3, #20]
 800e12c:	b29b      	uxth	r3, r3
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3708      	adds	r7, #8
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <Call_SDO>:

uint16_t Call_SDO(MsgSDOStruct* t_sdo, MsgSDOargs* t_req)
{
 800e136:	b580      	push	{r7, lr}
 800e138:	b082      	sub	sp, #8
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
 800e13e:	6039      	str	r1, [r7, #0]
    if (t_sdo->args.data != NULL) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d007      	beq.n	800e158 <Call_SDO+0x22>
        free(t_sdo->args.data);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f001 fdcf 	bl	800fcf0 <free>
        t_sdo->args.data = NULL;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2200      	movs	r2, #0
 800e156:	609a      	str	r2, [r3, #8]
    }

    t_sdo->args.status = DATA_OBJECT_SDO_IDLE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2202      	movs	r2, #2
 800e15c:	741a      	strb	r2, [r3, #16]
    t_sdo->callback(t_req, &t_sdo->args);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	3208      	adds	r2, #8
 800e166:	4611      	mov	r1, r2
 800e168:	6838      	ldr	r0, [r7, #0]
 800e16a:	4798      	blx	r3
    return t_req->size * t_sdo->args.data_size;
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	791b      	ldrb	r3, [r3, #4]
 800e170:	b29a      	uxth	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	89db      	ldrh	r3, [r3, #14]
 800e176:	fb12 f303 	smulbb	r3, r2, r3
 800e17a:	b29b      	uxth	r3, r3
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <Set_SDO_args>:

    return &t_sdo->args;
}

uint16_t Set_SDO_args(MsgSDOStruct* t_sdo, MsgSDOargs* t_args)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	6039      	str	r1, [r7, #0]
    // Copy status
	t_sdo->args.status = t_args->status;
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	741a      	strb	r2, [r3, #16]
    
    // Copy size
    int total_size = t_sdo->args.data_size * t_args->size;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	89db      	ldrh	r3, [r3, #14]
 800e19c:	461a      	mov	r2, r3
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	791b      	ldrb	r3, [r3, #4]
 800e1a2:	fb02 f303 	mul.w	r3, r2, r3
 800e1a6:	60fb      	str	r3, [r7, #12]
    t_sdo->args.size = t_args->size;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	791a      	ldrb	r2, [r3, #4]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	731a      	strb	r2, [r3, #12]
    if (total_size <= 0) {
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	dc01      	bgt.n	800e1ba <Set_SDO_args+0x36>
        return 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e01d      	b.n	800e1f6 <Set_SDO_args+0x72>
    }

    // Copy data
    if (t_sdo->args.data != NULL) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d007      	beq.n	800e1d2 <Set_SDO_args+0x4e>
        free(t_sdo->args.data);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f001 fd92 	bl	800fcf0 <free>
        t_sdo->args.data = NULL;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	609a      	str	r2, [r3, #8]
    }
    t_sdo->args.data = malloc(total_size);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f001 fd83 	bl	800fce0 <malloc>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	461a      	mov	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	609a      	str	r2, [r3, #8]
    memcpy(t_sdo->args.data, t_args->data, total_size);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6898      	ldr	r0, [r3, #8]
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	f001 fffb 	bl	80101e8 <memcpy>

    return total_size;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	b29b      	uxth	r3, r3
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <Convert_Byte_Length>:
//
//    return ((temp1<<3)|(temp2<<2)|(temp3<<1)|(temp4));
//}

static int Convert_Byte_Length(uint8_t t_length)
{
 800e1fe:	b480      	push	{r7}
 800e200:	b083      	sub	sp, #12
 800e202:	af00      	add	r7, sp, #0
 800e204:	4603      	mov	r3, r0
 800e206:	71fb      	strb	r3, [r7, #7]
    if(t_length == 0 )                       		{return FDCAN_DLC_BYTES_0; }
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d101      	bne.n	800e212 <Convert_Byte_Length+0x14>
 800e20e:	2300      	movs	r3, #0
 800e210:	e06f      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if(t_length == 1 )                  		{return FDCAN_DLC_BYTES_1; }
 800e212:	79fb      	ldrb	r3, [r7, #7]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d102      	bne.n	800e21e <Convert_Byte_Length+0x20>
 800e218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e21c:	e069      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if(t_length == 2 )                  		{return FDCAN_DLC_BYTES_2; }
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	2b02      	cmp	r3, #2
 800e222:	d102      	bne.n	800e22a <Convert_Byte_Length+0x2c>
 800e224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e228:	e063      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if(t_length == 3 )                  		{return FDCAN_DLC_BYTES_3; }
 800e22a:	79fb      	ldrb	r3, [r7, #7]
 800e22c:	2b03      	cmp	r3, #3
 800e22e:	d102      	bne.n	800e236 <Convert_Byte_Length+0x38>
 800e230:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800e234:	e05d      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if(t_length == 4 )                  		{return FDCAN_DLC_BYTES_4; }
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	2b04      	cmp	r3, #4
 800e23a:	d102      	bne.n	800e242 <Convert_Byte_Length+0x44>
 800e23c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e240:	e057      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if(t_length == 5 )                  		{return FDCAN_DLC_BYTES_5; }
 800e242:	79fb      	ldrb	r3, [r7, #7]
 800e244:	2b05      	cmp	r3, #5
 800e246:	d102      	bne.n	800e24e <Convert_Byte_Length+0x50>
 800e248:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800e24c:	e051      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if(t_length == 6 )                  		{return FDCAN_DLC_BYTES_6; }
 800e24e:	79fb      	ldrb	r3, [r7, #7]
 800e250:	2b06      	cmp	r3, #6
 800e252:	d102      	bne.n	800e25a <Convert_Byte_Length+0x5c>
 800e254:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800e258:	e04b      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if(t_length == 7 )                  		{return FDCAN_DLC_BYTES_7; }
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	2b07      	cmp	r3, #7
 800e25e:	d102      	bne.n	800e266 <Convert_Byte_Length+0x68>
 800e260:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800e264:	e045      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if(t_length == 8 )                  		{return FDCAN_DLC_BYTES_8; }
 800e266:	79fb      	ldrb	r3, [r7, #7]
 800e268:	2b08      	cmp	r3, #8
 800e26a:	d102      	bne.n	800e272 <Convert_Byte_Length+0x74>
 800e26c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e270:	e03f      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if((t_length > 8 ) && (t_length <= 12 )) 	{return FDCAN_DLC_BYTES_12; }
 800e272:	79fb      	ldrb	r3, [r7, #7]
 800e274:	2b08      	cmp	r3, #8
 800e276:	d905      	bls.n	800e284 <Convert_Byte_Length+0x86>
 800e278:	79fb      	ldrb	r3, [r7, #7]
 800e27a:	2b0c      	cmp	r3, #12
 800e27c:	d802      	bhi.n	800e284 <Convert_Byte_Length+0x86>
 800e27e:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800e282:	e036      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if((t_length > 12 ) && (t_length <= 16 ))	{return FDCAN_DLC_BYTES_16; }
 800e284:	79fb      	ldrb	r3, [r7, #7]
 800e286:	2b0c      	cmp	r3, #12
 800e288:	d905      	bls.n	800e296 <Convert_Byte_Length+0x98>
 800e28a:	79fb      	ldrb	r3, [r7, #7]
 800e28c:	2b10      	cmp	r3, #16
 800e28e:	d802      	bhi.n	800e296 <Convert_Byte_Length+0x98>
 800e290:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800e294:	e02d      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if((t_length > 16 ) && (t_length <= 20 ))	{return FDCAN_DLC_BYTES_20; }
 800e296:	79fb      	ldrb	r3, [r7, #7]
 800e298:	2b10      	cmp	r3, #16
 800e29a:	d905      	bls.n	800e2a8 <Convert_Byte_Length+0xaa>
 800e29c:	79fb      	ldrb	r3, [r7, #7]
 800e29e:	2b14      	cmp	r3, #20
 800e2a0:	d802      	bhi.n	800e2a8 <Convert_Byte_Length+0xaa>
 800e2a2:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 800e2a6:	e024      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if((t_length > 20 ) && (t_length <= 24 ))	{return FDCAN_DLC_BYTES_24; }
 800e2a8:	79fb      	ldrb	r3, [r7, #7]
 800e2aa:	2b14      	cmp	r3, #20
 800e2ac:	d905      	bls.n	800e2ba <Convert_Byte_Length+0xbc>
 800e2ae:	79fb      	ldrb	r3, [r7, #7]
 800e2b0:	2b18      	cmp	r3, #24
 800e2b2:	d802      	bhi.n	800e2ba <Convert_Byte_Length+0xbc>
 800e2b4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800e2b8:	e01b      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if((t_length > 24 ) && (t_length <= 32 ))	{return FDCAN_DLC_BYTES_32; }
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	2b18      	cmp	r3, #24
 800e2be:	d905      	bls.n	800e2cc <Convert_Byte_Length+0xce>
 800e2c0:	79fb      	ldrb	r3, [r7, #7]
 800e2c2:	2b20      	cmp	r3, #32
 800e2c4:	d802      	bhi.n	800e2cc <Convert_Byte_Length+0xce>
 800e2c6:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 800e2ca:	e012      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if((t_length > 32 ) && (t_length <= 48 ))	{return FDCAN_DLC_BYTES_48; }
 800e2cc:	79fb      	ldrb	r3, [r7, #7]
 800e2ce:	2b20      	cmp	r3, #32
 800e2d0:	d905      	bls.n	800e2de <Convert_Byte_Length+0xe0>
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	2b30      	cmp	r3, #48	; 0x30
 800e2d6:	d802      	bhi.n	800e2de <Convert_Byte_Length+0xe0>
 800e2d8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800e2dc:	e009      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else if((t_length > 48 ) && (t_length <= 64 ))	{return FDCAN_DLC_BYTES_64; }
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	2b30      	cmp	r3, #48	; 0x30
 800e2e2:	d905      	bls.n	800e2f0 <Convert_Byte_Length+0xf2>
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	2b40      	cmp	r3, #64	; 0x40
 800e2e8:	d802      	bhi.n	800e2f0 <Convert_Byte_Length+0xf2>
 800e2ea:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800e2ee:	e000      	b.n	800e2f2 <Convert_Byte_Length+0xf4>
    else                                			{return FDCAN_DLC_BYTES_0; }
 800e2f0:	2300      	movs	r3, #0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	370c      	adds	r7, #12
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <Get_Header>:

static MsgDataObjectHeader Get_Header(uint8_t* t_byte_arr)
{
 800e2fe:	b480      	push	{r7}
 800e300:	b085      	sub	sp, #20
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	b29b      	uxth	r3, r3
	MsgDataObjectHeader t_header;
    memcpy(&t_header, t_byte_arr, sizeof(MsgDataObjectHeader));
 800e30c:	813b      	strh	r3, [r7, #8]
    return t_header;
 800e30e:	893b      	ldrh	r3, [r7, #8]
 800e310:	81bb      	strh	r3, [r7, #12]
 800e312:	2300      	movs	r3, #0
 800e314:	7b3a      	ldrb	r2, [r7, #12]
 800e316:	f362 0307 	bfi	r3, r2, #0, #8
 800e31a:	7b7a      	ldrb	r2, [r7, #13]
 800e31c:	f362 230f 	bfi	r3, r2, #8, #8
}
 800e320:	4618      	mov	r0, r3
 800e322:	3714      	adds	r7, #20
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <Recv_EMCY>:
    free(t_tx_data);
    t_tx_data = NULL;
}

static void Recv_EMCY(uint8_t* t_byte_arr, uint32_t* t_err_code)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	6039      	str	r1, [r7, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	461a      	mov	r2, r3
    memcpy(t_err_code, t_byte_arr, ERR_CODE_SIZE);
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	601a      	str	r2, [r3, #0]
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <Convert_Bytes_to_SDO_req>:
 |___/___/ \___/  |_|_\/_/\_\
                             
*/

static MsgSDOargs Convert_Bytes_to_SDO_req(uint8_t* t_byte_arr, uint16_t *t_byte_len)
{
 800e34c:	b590      	push	{r4, r7, lr}
 800e34e:	b08b      	sub	sp, #44	; 0x2c
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
	MsgSDOargs t_req;
    *t_byte_len = 0;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2200      	movs	r2, #0
 800e35c:	801a      	strh	r2, [r3, #0]

    int t_idx = sizeof(t_req.status);
 800e35e:	2301      	movs	r3, #1
 800e360:	627b      	str	r3, [r7, #36]	; 0x24
    int t_len = sizeof(t_req.size);
 800e362:	2301      	movs	r3, #1
 800e364:	623b      	str	r3, [r7, #32]

    memcpy(&t_req.size, &t_byte_arr[t_idx], t_len);
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	18d1      	adds	r1, r2, r3
 800e36c:	6a3a      	ldr	r2, [r7, #32]
 800e36e:	f107 0314 	add.w	r3, r7, #20
 800e372:	3304      	adds	r3, #4
 800e374:	4618      	mov	r0, r3
 800e376:	f001 ff37 	bl	80101e8 <memcpy>
    *t_byte_len += t_len;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	881a      	ldrh	r2, [r3, #0]
 800e37e:	6a3b      	ldr	r3, [r7, #32]
 800e380:	b29b      	uxth	r3, r3
 800e382:	4413      	add	r3, r2
 800e384:	b29a      	uxth	r2, r3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	801a      	strh	r2, [r3, #0]

    t_req.data = &t_byte_arr[t_idx + t_len];
 800e38a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	4413      	add	r3, r2
 800e390:	461a      	mov	r2, r3
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	4413      	add	r3, r2
 800e396:	617b      	str	r3, [r7, #20]

    t_req.status = t_byte_arr[0];
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	b25b      	sxtb	r3, r3
 800e39e:	773b      	strb	r3, [r7, #28]
    *t_byte_len += 1;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	881b      	ldrh	r3, [r3, #0]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	b29a      	uxth	r2, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	801a      	strh	r2, [r3, #0]

    return t_req;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	461c      	mov	r4, r3
 800e3b0:	f107 0314 	add.w	r3, r7, #20
 800e3b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e3bc:	68f8      	ldr	r0, [r7, #12]
 800e3be:	372c      	adds	r7, #44	; 0x2c
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd90      	pop	{r4, r7, pc}

0800e3c4 <Read_SDO>:

static int Read_SDO(uint8_t* t_byte_arr)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b090      	sub	sp, #64	; 0x40
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
    int t_byte_read = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	63bb      	str	r3, [r7, #56]	; 0x38
    MsgDataObjectHeader t_header = Get_Header(t_byte_arr);
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7ff ff94 	bl	800e2fe <Get_Header>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	83bb      	strh	r3, [r7, #28]
    t_byte_read += sizeof(MsgDataObjectHeader);
 800e3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3dc:	3302      	adds	r3, #2
 800e3de:	63bb      	str	r3, [r7, #56]	; 0x38

    MsgSDOStruct* t_sdo = Find_SDO(t_header.dod_id, t_header.obj_id);
 800e3e0:	7f3b      	ldrb	r3, [r7, #28]
 800e3e2:	7f7a      	ldrb	r2, [r7, #29]
 800e3e4:	4611      	mov	r1, r2
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7ff fe54 	bl	800e094 <Find_SDO>
 800e3ec:	6378      	str	r0, [r7, #52]	; 0x34
    if (t_sdo == NULL) {
 800e3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d102      	bne.n	800e3fa <Read_SDO+0x36>
        //TODO: Cannot Find SDO ERROR
        return -2;
 800e3f4:	f06f 0301 	mvn.w	r3, #1
 800e3f8:	e0c9      	b.n	800e58e <Read_SDO+0x1ca>
    }

    uint16_t t_req_bytes = 0;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	837b      	strh	r3, [r7, #26]
    MsgSDOargs t_req = Convert_Bytes_to_SDO_req(t_byte_arr + t_byte_read, &t_req_bytes);
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	18d1      	adds	r1, r2, r3
 800e404:	f107 030c 	add.w	r3, r7, #12
 800e408:	f107 021a 	add.w	r2, r7, #26
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7ff ff9d 	bl	800e34c <Convert_Bytes_to_SDO_req>
    t_req.data_size = t_sdo->args.data_size; // Copy SDO info
 800e412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e414:	89db      	ldrh	r3, [r3, #14]
 800e416:	827b      	strh	r3, [r7, #18]
    t_byte_read += t_req_bytes;
 800e418:	8b7b      	ldrh	r3, [r7, #26]
 800e41a:	461a      	mov	r2, r3
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	4413      	add	r3, r2
 800e420:	63bb      	str	r3, [r7, #56]	; 0x38

    uint16_t t_n_bytes = 0;
 800e422:	2300      	movs	r3, #0
 800e424:	87fb      	strh	r3, [r7, #62]	; 0x3e
    if (t_req.status == DATA_OBJECT_SDO_REQU) {
 800e426:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	f040 8095 	bne.w	800e55a <Read_SDO+0x196>
    	t_n_bytes = Call_SDO(t_sdo, &t_req);
 800e430:	f107 030c 	add.w	r3, r7, #12
 800e434:	4619      	mov	r1, r3
 800e436:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e438:	f7ff fe7d 	bl	800e136 <Call_SDO>
 800e43c:	4603      	mov	r3, r0
 800e43e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        cvector_push_back(sdo_res_list, t_header); // Assign Response
 800e440:	4b55      	ldr	r3, [pc, #340]	; (800e598 <Read_SDO+0x1d4>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d004      	beq.n	800e452 <Read_SDO+0x8e>
 800e448:	4b53      	ldr	r3, [pc, #332]	; (800e598 <Read_SDO+0x1d4>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3b04      	subs	r3, #4
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	e000      	b.n	800e454 <Read_SDO+0x90>
 800e452:	2300      	movs	r3, #0
 800e454:	633b      	str	r3, [r7, #48]	; 0x30
 800e456:	4b50      	ldr	r3, [pc, #320]	; (800e598 <Read_SDO+0x1d4>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d004      	beq.n	800e468 <Read_SDO+0xa4>
 800e45e:	4b4e      	ldr	r3, [pc, #312]	; (800e598 <Read_SDO+0x1d4>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800e466:	e000      	b.n	800e46a <Read_SDO+0xa6>
 800e468:	2300      	movs	r3, #0
 800e46a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d34d      	bcc.n	800e50c <Read_SDO+0x148>
 800e470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e472:	3305      	adds	r3, #5
 800e474:	005b      	lsls	r3, r3, #1
 800e476:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e478:	4b47      	ldr	r3, [pc, #284]	; (800e598 <Read_SDO+0x1d4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d020      	beq.n	800e4c2 <Read_SDO+0xfe>
 800e480:	4b45      	ldr	r3, [pc, #276]	; (800e598 <Read_SDO+0x1d4>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3b08      	subs	r3, #8
 800e486:	627b      	str	r3, [r7, #36]	; 0x24
 800e488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e48a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e48c:	f001 fce4 	bl	800fe58 <realloc>
 800e490:	6238      	str	r0, [r7, #32]
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d105      	bne.n	800e4a4 <Read_SDO+0xe0>
 800e498:	4b40      	ldr	r3, [pc, #256]	; (800e59c <Read_SDO+0x1d8>)
 800e49a:	4a41      	ldr	r2, [pc, #260]	; (800e5a0 <Read_SDO+0x1dc>)
 800e49c:	21a5      	movs	r1, #165	; 0xa5
 800e49e:	4841      	ldr	r0, [pc, #260]	; (800e5a4 <Read_SDO+0x1e0>)
 800e4a0:	f001 fc00 	bl	800fca4 <__assert_func>
 800e4a4:	6a3b      	ldr	r3, [r7, #32]
 800e4a6:	3308      	adds	r3, #8
 800e4a8:	4a3b      	ldr	r2, [pc, #236]	; (800e598 <Read_SDO+0x1d4>)
 800e4aa:	6013      	str	r3, [r2, #0]
 800e4ac:	4b3a      	ldr	r3, [pc, #232]	; (800e598 <Read_SDO+0x1d4>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d02b      	beq.n	800e50c <Read_SDO+0x148>
 800e4b4:	4b38      	ldr	r3, [pc, #224]	; (800e598 <Read_SDO+0x1d4>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3b04      	subs	r3, #4
 800e4ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4bc:	3201      	adds	r2, #1
 800e4be:	601a      	str	r2, [r3, #0]
 800e4c0:	e024      	b.n	800e50c <Read_SDO+0x148>
 800e4c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4c4:	f001 fc0c 	bl	800fce0 <malloc>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d105      	bne.n	800e4de <Read_SDO+0x11a>
 800e4d2:	4b35      	ldr	r3, [pc, #212]	; (800e5a8 <Read_SDO+0x1e4>)
 800e4d4:	4a32      	ldr	r2, [pc, #200]	; (800e5a0 <Read_SDO+0x1dc>)
 800e4d6:	21a5      	movs	r1, #165	; 0xa5
 800e4d8:	4832      	ldr	r0, [pc, #200]	; (800e5a4 <Read_SDO+0x1e0>)
 800e4da:	f001 fbe3 	bl	800fca4 <__assert_func>
 800e4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e0:	3308      	adds	r3, #8
 800e4e2:	4a2d      	ldr	r2, [pc, #180]	; (800e598 <Read_SDO+0x1d4>)
 800e4e4:	6013      	str	r3, [r2, #0]
 800e4e6:	4b2c      	ldr	r3, [pc, #176]	; (800e598 <Read_SDO+0x1d4>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d005      	beq.n	800e4fa <Read_SDO+0x136>
 800e4ee:	4b2a      	ldr	r3, [pc, #168]	; (800e598 <Read_SDO+0x1d4>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	3b04      	subs	r3, #4
 800e4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4f6:	3201      	adds	r2, #1
 800e4f8:	601a      	str	r2, [r3, #0]
 800e4fa:	4b27      	ldr	r3, [pc, #156]	; (800e598 <Read_SDO+0x1d4>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d004      	beq.n	800e50c <Read_SDO+0x148>
 800e502:	4b25      	ldr	r3, [pc, #148]	; (800e598 <Read_SDO+0x1d4>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3b08      	subs	r3, #8
 800e508:	2200      	movs	r2, #0
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	4b22      	ldr	r3, [pc, #136]	; (800e598 <Read_SDO+0x1d4>)
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	4b21      	ldr	r3, [pc, #132]	; (800e598 <Read_SDO+0x1d4>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d005      	beq.n	800e524 <Read_SDO+0x160>
 800e518:	4b1f      	ldr	r3, [pc, #124]	; (800e598 <Read_SDO+0x1d4>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3b08      	subs	r3, #8
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	005b      	lsls	r3, r3, #1
 800e522:	e000      	b.n	800e526 <Read_SDO+0x162>
 800e524:	2300      	movs	r3, #0
 800e526:	4413      	add	r3, r2
 800e528:	461a      	mov	r2, r3
 800e52a:	f107 031c 	add.w	r3, r7, #28
 800e52e:	881b      	ldrh	r3, [r3, #0]
 800e530:	8013      	strh	r3, [r2, #0]
 800e532:	4b19      	ldr	r3, [pc, #100]	; (800e598 <Read_SDO+0x1d4>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d024      	beq.n	800e584 <Read_SDO+0x1c0>
 800e53a:	4b17      	ldr	r3, [pc, #92]	; (800e598 <Read_SDO+0x1d4>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d005      	beq.n	800e54e <Read_SDO+0x18a>
 800e542:	4b15      	ldr	r3, [pc, #84]	; (800e598 <Read_SDO+0x1d4>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3b08      	subs	r3, #8
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	3301      	adds	r3, #1
 800e54c:	e000      	b.n	800e550 <Read_SDO+0x18c>
 800e54e:	2301      	movs	r3, #1
 800e550:	4a11      	ldr	r2, [pc, #68]	; (800e598 <Read_SDO+0x1d4>)
 800e552:	6812      	ldr	r2, [r2, #0]
 800e554:	3a08      	subs	r2, #8
 800e556:	6013      	str	r3, [r2, #0]
 800e558:	e014      	b.n	800e584 <Read_SDO+0x1c0>
    } else if(t_req.status == DATA_OBJECT_SDO_SUCC || t_req.status == DATA_OBJECT_SDO_FAIL) {
 800e55a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d004      	beq.n	800e56c <Read_SDO+0x1a8>
 800e562:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e56a:	d108      	bne.n	800e57e <Read_SDO+0x1ba>
    	t_n_bytes = Set_SDO_args(t_sdo, &t_req);
 800e56c:	f107 030c 	add.w	r3, r7, #12
 800e570:	4619      	mov	r1, r3
 800e572:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e574:	f7ff fe06 	bl	800e184 <Set_SDO_args>
 800e578:	4603      	mov	r3, r0
 800e57a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if (t_n_bytes < 0) {
 800e57c:	e002      	b.n	800e584 <Read_SDO+0x1c0>
            //TODO: Set SDO Argument ERROR
            return -1;
        }
    } else {
        //TODO: Read SDO Status ERROR
        return -1;
 800e57e:	f04f 33ff 	mov.w	r3, #4294967295
 800e582:	e004      	b.n	800e58e <Read_SDO+0x1ca>
    }

    t_byte_read += t_n_bytes;
 800e584:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e588:	4413      	add	r3, r2
 800e58a:	63bb      	str	r3, [r7, #56]	; 0x38
    return t_byte_read;
 800e58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3740      	adds	r7, #64	; 0x40
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	2400d3b4 	.word	0x2400d3b4
 800e59c:	08011a88 	.word	0x08011a88
 800e5a0:	08011afc 	.word	0x08011afc
 800e5a4:	08011a90 	.word	0x08011a90
 800e5a8:	08011acc 	.word	0x08011acc

0800e5ac <Unpack_SDO>:

static int Unpack_SDO(uint8_t* t_byte_arr)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b086      	sub	sp, #24
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
    int t_cursor = 0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	617b      	str	r3, [r7, #20]

    // Get # of SDOs
    uint16_t t_n_sdo = 0;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	817b      	strh	r3, [r7, #10]
    memcpy(&t_n_sdo, &t_byte_arr[t_cursor], OBJ_NUMS_SIZE);
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	72bb      	strb	r3, [r7, #10]
    t_cursor += OBJ_NUMS_SIZE;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	617b      	str	r3, [r7, #20]

    // Call & Respond SDOs
    if (t_n_sdo > 0) {
 800e5cc:	897b      	ldrh	r3, [r7, #10]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d01f      	beq.n	800e612 <Unpack_SDO+0x66>
        for (int i = 0; i < t_n_sdo; ++i) {
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	613b      	str	r3, [r7, #16]
 800e5d6:	e017      	b.n	800e608 <Unpack_SDO+0x5c>
            int temp_cursor = Read_SDO(&t_byte_arr[t_cursor]);
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	4413      	add	r3, r2
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7ff fef0 	bl	800e3c4 <Read_SDO>
 800e5e4:	60f8      	str	r0, [r7, #12]
            if (temp_cursor > 0) {
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	dd04      	ble.n	800e5f6 <Unpack_SDO+0x4a>
            	t_cursor += temp_cursor;
 800e5ec:	697a      	ldr	r2, [r7, #20]
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	4413      	add	r3, r2
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	e005      	b.n	800e602 <Unpack_SDO+0x56>
            } else if (temp_cursor < 0) {
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	da02      	bge.n	800e602 <Unpack_SDO+0x56>
                //TODO: Unpack SDO ERROR
                return MSG_SDO_FAULT;
 800e5fc:	f06f 0301 	mvn.w	r3, #1
 800e600:	e008      	b.n	800e614 <Unpack_SDO+0x68>
        for (int i = 0; i < t_n_sdo; ++i) {
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	3301      	adds	r3, #1
 800e606:	613b      	str	r3, [r7, #16]
 800e608:	897b      	ldrh	r3, [r7, #10]
 800e60a:	461a      	mov	r2, r3
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	4293      	cmp	r3, r2
 800e610:	dbe2      	blt.n	800e5d8 <Unpack_SDO+0x2c>
            }
        }
    }

    return MSG_DO_SUCCESS;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3718      	adds	r7, #24
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <Convert_SDOres_to_Bytes>:
 |___/___/ \___/    |_| /_/\_\
                              
*/

static int Convert_SDOres_to_Bytes(MsgDataObjectHeader* t_header, uint8_t* t_byte_arr)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
    int t_byte_written = 0;
 800e626:	2300      	movs	r3, #0
 800e628:	617b      	str	r3, [r7, #20]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	881b      	ldrh	r3, [r3, #0]
 800e62e:	b29a      	uxth	r2, r3
    // Set SDO Header
    memcpy(t_byte_arr, t_header, sizeof(MsgDataObjectHeader));
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	801a      	strh	r2, [r3, #0]
    t_byte_written += sizeof(MsgDataObjectHeader);
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	3302      	adds	r3, #2
 800e638:	617b      	str	r3, [r7, #20]

    // Return Response
    MsgSDOStruct* t_sdo = Find_SDO(t_header->dod_id, t_header->obj_id);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	781a      	ldrb	r2, [r3, #0]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	785b      	ldrb	r3, [r3, #1]
 800e642:	4619      	mov	r1, r3
 800e644:	4610      	mov	r0, r2
 800e646:	f7ff fd25 	bl	800e094 <Find_SDO>
 800e64a:	6138      	str	r0, [r7, #16]
    if (t_sdo == NULL) {
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d102      	bne.n	800e658 <Convert_SDOres_to_Bytes+0x3c>
        //TODO: Cannot Find SDO ERROR
        return -2;
 800e652:	f06f 0301 	mvn.w	r3, #1
 800e656:	e029      	b.n	800e6ac <Convert_SDOres_to_Bytes+0x90>
    }

    memcpy(t_byte_arr + t_byte_written, &t_sdo->args.status, sizeof(t_sdo->args.status));
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	683a      	ldr	r2, [r7, #0]
 800e65c:	4413      	add	r3, r2
 800e65e:	693a      	ldr	r2, [r7, #16]
 800e660:	3210      	adds	r2, #16
 800e662:	7812      	ldrb	r2, [r2, #0]
 800e664:	701a      	strb	r2, [r3, #0]
    t_byte_written += sizeof(t_sdo->args.status);
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	3301      	adds	r3, #1
 800e66a:	617b      	str	r3, [r7, #20]
    memcpy(t_byte_arr + t_byte_written, &t_sdo->args.size,   sizeof(t_sdo->args.size));
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	683a      	ldr	r2, [r7, #0]
 800e670:	4413      	add	r3, r2
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	320c      	adds	r2, #12
 800e676:	7812      	ldrb	r2, [r2, #0]
 800e678:	701a      	strb	r2, [r3, #0]
    t_byte_written += sizeof(t_sdo->args.size);
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	3301      	adds	r3, #1
 800e67e:	617b      	str	r3, [r7, #20]

    int t_data_len = t_sdo->args.size * t_sdo->args.data_size;
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	7b1b      	ldrb	r3, [r3, #12]
 800e684:	461a      	mov	r2, r3
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	89db      	ldrh	r3, [r3, #14]
 800e68a:	fb02 f303 	mul.w	r3, r2, r3
 800e68e:	60fb      	str	r3, [r7, #12]
    memcpy(t_byte_arr + t_byte_written, t_sdo->args.data, t_data_len);
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	683a      	ldr	r2, [r7, #0]
 800e694:	18d0      	adds	r0, r2, r3
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	4619      	mov	r1, r3
 800e69e:	f001 fda3 	bl	80101e8 <memcpy>

    t_byte_written += t_data_len;
 800e6a2:	697a      	ldr	r2, [r7, #20]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	617b      	str	r3, [r7, #20]

    return t_byte_written;
 800e6aa:	697b      	ldr	r3, [r7, #20]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <Pack_SDO>:

static int Pack_SDO(uint8_t* t_byte_arr, uint8_t* t_byte_len)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08c      	sub	sp, #48	; 0x30
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
	// check send list whether these are empty or not 
	if ((sdo_res_list == NULL) && (sdo_req_list == NULL)){
 800e6be:	4b53      	ldr	r3, [pc, #332]	; (800e80c <Pack_SDO+0x158>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d105      	bne.n	800e6d2 <Pack_SDO+0x1e>
 800e6c6:	4b52      	ldr	r3, [pc, #328]	; (800e810 <Pack_SDO+0x15c>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d101      	bne.n	800e6d2 <Pack_SDO+0x1e>
		return MSG_SDO_NOTHING;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e098      	b.n	800e804 <Pack_SDO+0x150>
	}

	// Message Packaging
    int t_cursor = 0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Res SDOs
    int t_n_sdo_cursor = t_cursor;
 800e6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d8:	623b      	str	r3, [r7, #32]
    t_cursor += OBJ_NUMS_SIZE;
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	3301      	adds	r3, #1
 800e6de:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t t_n_sdo = 0;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73fb      	strb	r3, [r7, #15]
    
    if (sdo_res_list != NULL) {
 800e6e4:	4b49      	ldr	r3, [pc, #292]	; (800e80c <Pack_SDO+0x158>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d03e      	beq.n	800e76a <Pack_SDO+0xb6>
        for(int i = 0; i < cvector_size(sdo_res_list); ++i) {
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800e6f0:	e020      	b.n	800e734 <Pack_SDO+0x80>
            int temp_cursor = Convert_SDOres_to_Bytes(&sdo_res_list[i], &t_byte_arr[t_cursor]);
 800e6f2:	4b46      	ldr	r3, [pc, #280]	; (800e80c <Pack_SDO+0x158>)
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f8:	005b      	lsls	r3, r3, #1
 800e6fa:	18d0      	adds	r0, r2, r3
 800e6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	4413      	add	r3, r2
 800e702:	4619      	mov	r1, r3
 800e704:	f7ff ff8a 	bl	800e61c <Convert_SDOres_to_Bytes>
 800e708:	61b8      	str	r0, [r7, #24]
            if (temp_cursor > 0) {
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	dd08      	ble.n	800e722 <Pack_SDO+0x6e>
            	t_cursor += temp_cursor;
 800e710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e712:	69bb      	ldr	r3, [r7, #24]
 800e714:	4413      	add	r3, r2
 800e716:	62fb      	str	r3, [r7, #44]	; 0x2c
                ++t_n_sdo;
 800e718:	7bfb      	ldrb	r3, [r7, #15]
 800e71a:	3301      	adds	r3, #1
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	73fb      	strb	r3, [r7, #15]
 800e720:	e005      	b.n	800e72e <Pack_SDO+0x7a>
            } else if (temp_cursor < 0) {
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	2b00      	cmp	r3, #0
 800e726:	da02      	bge.n	800e72e <Pack_SDO+0x7a>
                //TODO: Pack Response SDO Error
                return MSG_SDO_FAULT;
 800e728:	f06f 0301 	mvn.w	r3, #1
 800e72c:	e06a      	b.n	800e804 <Pack_SDO+0x150>
        for(int i = 0; i < cvector_size(sdo_res_list); ++i) {
 800e72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e730:	3301      	adds	r3, #1
 800e732:	62bb      	str	r3, [r7, #40]	; 0x28
 800e734:	4b35      	ldr	r3, [pc, #212]	; (800e80c <Pack_SDO+0x158>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d004      	beq.n	800e746 <Pack_SDO+0x92>
 800e73c:	4b33      	ldr	r3, [pc, #204]	; (800e80c <Pack_SDO+0x158>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	3b08      	subs	r3, #8
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	e000      	b.n	800e748 <Pack_SDO+0x94>
 800e746:	2300      	movs	r3, #0
 800e748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d8d1      	bhi.n	800e6f2 <Pack_SDO+0x3e>
            }
        }
        cvector_free(sdo_res_list);
 800e74e:	4b2f      	ldr	r3, [pc, #188]	; (800e80c <Pack_SDO+0x158>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d006      	beq.n	800e764 <Pack_SDO+0xb0>
 800e756:	4b2d      	ldr	r3, [pc, #180]	; (800e80c <Pack_SDO+0x158>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3b08      	subs	r3, #8
 800e75c:	61fb      	str	r3, [r7, #28]
 800e75e:	69f8      	ldr	r0, [r7, #28]
 800e760:	f001 fac6 	bl	800fcf0 <free>
        sdo_res_list = NULL;
 800e764:	4b29      	ldr	r3, [pc, #164]	; (800e80c <Pack_SDO+0x158>)
 800e766:	2200      	movs	r2, #0
 800e768:	601a      	str	r2, [r3, #0]
    }

    // Req SDOs
    if (sdo_req_list != NULL) {
 800e76a:	4b29      	ldr	r3, [pc, #164]	; (800e810 <Pack_SDO+0x15c>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d03e      	beq.n	800e7f0 <Pack_SDO+0x13c>
        for(int i = 0; i < cvector_size(sdo_req_list); ++i) {
 800e772:	2300      	movs	r3, #0
 800e774:	627b      	str	r3, [r7, #36]	; 0x24
 800e776:	e020      	b.n	800e7ba <Pack_SDO+0x106>
            int temp_cursor = Convert_SDOres_to_Bytes(&sdo_req_list[i], &t_byte_arr[t_cursor]);
 800e778:	4b25      	ldr	r3, [pc, #148]	; (800e810 <Pack_SDO+0x15c>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	18d0      	adds	r0, r2, r3
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	4413      	add	r3, r2
 800e788:	4619      	mov	r1, r3
 800e78a:	f7ff ff47 	bl	800e61c <Convert_SDOres_to_Bytes>
 800e78e:	6138      	str	r0, [r7, #16]
            if (temp_cursor > 0) {
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	2b00      	cmp	r3, #0
 800e794:	dd08      	ble.n	800e7a8 <Pack_SDO+0xf4>
            	t_cursor += temp_cursor;
 800e796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	4413      	add	r3, r2
 800e79c:	62fb      	str	r3, [r7, #44]	; 0x2c
                ++t_n_sdo;
 800e79e:	7bfb      	ldrb	r3, [r7, #15]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	73fb      	strb	r3, [r7, #15]
 800e7a6:	e005      	b.n	800e7b4 <Pack_SDO+0x100>
            } else if (temp_cursor < 0) {
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	da02      	bge.n	800e7b4 <Pack_SDO+0x100>
                //TODO: Pack Request SDO Error
                return MSG_SDO_FAULT;
 800e7ae:	f06f 0301 	mvn.w	r3, #1
 800e7b2:	e027      	b.n	800e804 <Pack_SDO+0x150>
        for(int i = 0; i < cvector_size(sdo_req_list); ++i) {
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ba:	4b15      	ldr	r3, [pc, #84]	; (800e810 <Pack_SDO+0x15c>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d004      	beq.n	800e7cc <Pack_SDO+0x118>
 800e7c2:	4b13      	ldr	r3, [pc, #76]	; (800e810 <Pack_SDO+0x15c>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	3b08      	subs	r3, #8
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	e000      	b.n	800e7ce <Pack_SDO+0x11a>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d8d1      	bhi.n	800e778 <Pack_SDO+0xc4>
            }
        }
        cvector_free(sdo_req_list);
 800e7d4:	4b0e      	ldr	r3, [pc, #56]	; (800e810 <Pack_SDO+0x15c>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d006      	beq.n	800e7ea <Pack_SDO+0x136>
 800e7dc:	4b0c      	ldr	r3, [pc, #48]	; (800e810 <Pack_SDO+0x15c>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	3b08      	subs	r3, #8
 800e7e2:	617b      	str	r3, [r7, #20]
 800e7e4:	6978      	ldr	r0, [r7, #20]
 800e7e6:	f001 fa83 	bl	800fcf0 <free>
        sdo_req_list = NULL;
 800e7ea:	4b09      	ldr	r3, [pc, #36]	; (800e810 <Pack_SDO+0x15c>)
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	601a      	str	r2, [r3, #0]
    }

    // Set # of SDOs
    memcpy(&t_byte_arr[t_n_sdo_cursor], &t_n_sdo, OBJ_NUMS_SIZE);
 800e7f0:	6a3b      	ldr	r3, [r7, #32]
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	7bfa      	ldrb	r2, [r7, #15]
 800e7f8:	701a      	strb	r2, [r3, #0]

    *t_byte_len = t_cursor;
 800e7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	701a      	strb	r2, [r3, #0]

    return MSG_DO_SUCCESS;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3730      	adds	r7, #48	; 0x30
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	2400d3b4 	.word	0x2400d3b4
 800e810:	2400d3b0 	.word	0x2400d3b0

0800e814 <Send_SDO>:

static int Send_SDO(uint8_t t_dest_node)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	4603      	mov	r3, r0
 800e81c:	71fb      	strb	r3, [r7, #7]
    uint8_t t_byte_len;
    uint16_t t_identifier = SDO|(node_id<<4)|t_dest_node;
 800e81e:	4b17      	ldr	r3, [pc, #92]	; (800e87c <Send_SDO+0x68>)
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	011b      	lsls	r3, r3, #4
 800e824:	b21b      	sxth	r3, r3
 800e826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e82a:	b21a      	sxth	r2, r3
 800e82c:	79fb      	ldrb	r3, [r7, #7]
 800e82e:	b21b      	sxth	r3, r3
 800e830:	4313      	orrs	r3, r2
 800e832:	b21b      	sxth	r3, r3
 800e834:	82fb      	strh	r3, [r7, #22]

    int t_check = Pack_SDO(fdcanRxData, &t_byte_len);
 800e836:	f107 030f 	add.w	r3, r7, #15
 800e83a:	4619      	mov	r1, r3
 800e83c:	4810      	ldr	r0, [pc, #64]	; (800e880 <Send_SDO+0x6c>)
 800e83e:	f7ff ff39 	bl	800e6b4 <Pack_SDO>
 800e842:	6138      	str	r0, [r7, #16]

    if(t_check < 0){
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	2b00      	cmp	r3, #0
 800e848:	da01      	bge.n	800e84e <Send_SDO+0x3a>
        //TODO: Send SDO Error
    	return t_check;
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	e011      	b.n	800e872 <Send_SDO+0x5e>
    } else if(t_check){
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d001      	beq.n	800e858 <Send_SDO+0x44>
    	return t_check;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	e00c      	b.n	800e872 <Send_SDO+0x5e>

    if (t_byte_len > 64) {
        //TODO: TX MESSAGE TOO LONG ERROR 
    }

    if(Send_MSG(t_identifier, t_byte_len, fdcanRxData) != 0){
 800e858:	7bfb      	ldrb	r3, [r7, #15]
 800e85a:	4619      	mov	r1, r3
 800e85c:	8afb      	ldrh	r3, [r7, #22]
 800e85e:	4a08      	ldr	r2, [pc, #32]	; (800e880 <Send_SDO+0x6c>)
 800e860:	4618      	mov	r0, r3
 800e862:	f000 fb3f 	bl	800eee4 <Send_MSG>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d001      	beq.n	800e870 <Send_SDO+0x5c>
        return t_check;
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	e000      	b.n	800e872 <Send_SDO+0x5e>
        //TODO: MSG TX ERROR
    }

    return t_check;
 800e870:	693b      	ldr	r3, [r7, #16]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3718      	adds	r7, #24
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	2400d3b8 	.word	0x2400d3b8
 800e880:	2400d404 	.word	0x2400d404

0800e884 <Convert_Bytes_to_PDO>:
 |_| |___/ \___/  |_|_\/_/\_\
                             
*/

static int Convert_Bytes_to_PDO(uint8_t* t_byte_arr)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b086      	sub	sp, #24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
    int t_byte_read = 0;
 800e88c:	2300      	movs	r3, #0
 800e88e:	617b      	str	r3, [r7, #20]

    MsgDataObjectHeader t_header = Get_Header(t_byte_arr);
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f7ff fd34 	bl	800e2fe <Get_Header>
 800e896:	4603      	mov	r3, r0
 800e898:	81bb      	strh	r3, [r7, #12]
    t_byte_read += sizeof(MsgDataObjectHeader);
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	3302      	adds	r3, #2
 800e89e:	617b      	str	r3, [r7, #20]

    MsgPDOStruct* t_pdo = Find_PDO(t_header.dod_id, t_header.obj_id);
 800e8a0:	7b3b      	ldrb	r3, [r7, #12]
 800e8a2:	7b7a      	ldrb	r2, [r7, #13]
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7ff fbd6 	bl	800e058 <Find_PDO>
 800e8ac:	6138      	str	r0, [r7, #16]
    if (t_pdo == NULL) {
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d102      	bne.n	800e8ba <Convert_Bytes_to_PDO+0x36>
        //TODO: Cannot Find PDO Error
        return -2;
 800e8b4:	f06f 0301 	mvn.w	r3, #1
 800e8b8:	e00d      	b.n	800e8d6 <Convert_Bytes_to_PDO+0x52>
    }

    uint16_t t_n_bytes = Get_PDO(t_pdo, (void*)(t_byte_arr + t_byte_read));
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	4413      	add	r3, r2
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	6938      	ldr	r0, [r7, #16]
 800e8c4:	f7ff fc23 	bl	800e10e <Get_PDO>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	81fb      	strh	r3, [r7, #14]
    if (t_n_bytes < 0) {
        //TODO: Copy PDO to Receive Error
        return -1;
    }
    t_byte_read += t_n_bytes;
 800e8cc:	89fb      	ldrh	r3, [r7, #14]
 800e8ce:	697a      	ldr	r2, [r7, #20]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	617b      	str	r3, [r7, #20]

    return t_byte_read;
 800e8d4:	697b      	ldr	r3, [r7, #20]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3718      	adds	r7, #24
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <Unpack_PDO>:

static int Unpack_PDO(uint8_t* t_byte_arr)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b086      	sub	sp, #24
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
    int t_cursor = 0;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	617b      	str	r3, [r7, #20]

    // Get # of PDOs
    uint8_t t_n_pdo = 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	72fb      	strb	r3, [r7, #11]
    memcpy(&t_n_pdo, &t_byte_arr[t_cursor], OBJ_NUMS_SIZE);
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	72fb      	strb	r3, [r7, #11]
    t_cursor += OBJ_NUMS_SIZE;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	617b      	str	r3, [r7, #20]

    if (t_n_pdo > 0) {
 800e8fe:	7afb      	ldrb	r3, [r7, #11]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d01f      	beq.n	800e944 <Unpack_PDO+0x66>
        for (int i = 0; i < t_n_pdo; ++i) {
 800e904:	2300      	movs	r3, #0
 800e906:	613b      	str	r3, [r7, #16]
 800e908:	e017      	b.n	800e93a <Unpack_PDO+0x5c>
            int temp_cursor = Convert_Bytes_to_PDO(&t_byte_arr[t_cursor]);
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	4413      	add	r3, r2
 800e910:	4618      	mov	r0, r3
 800e912:	f7ff ffb7 	bl	800e884 <Convert_Bytes_to_PDO>
 800e916:	60f8      	str	r0, [r7, #12]
            if (temp_cursor > 0) {
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	dd04      	ble.n	800e928 <Unpack_PDO+0x4a>
            	t_cursor += temp_cursor;
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	4413      	add	r3, r2
 800e924:	617b      	str	r3, [r7, #20]
 800e926:	e005      	b.n	800e934 <Unpack_PDO+0x56>
            } else if (temp_cursor < 0) {
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	da02      	bge.n	800e934 <Unpack_PDO+0x56>
                //TODO: Unpack PDO Error
                return MSG_PDO_FAULT;
 800e92e:	f04f 33ff 	mov.w	r3, #4294967295
 800e932:	e008      	b.n	800e946 <Unpack_PDO+0x68>
        for (int i = 0; i < t_n_pdo; ++i) {
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	3301      	adds	r3, #1
 800e938:	613b      	str	r3, [r7, #16]
 800e93a:	7afb      	ldrb	r3, [r7, #11]
 800e93c:	461a      	mov	r2, r3
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	4293      	cmp	r3, r2
 800e942:	dbe2      	blt.n	800e90a <Unpack_PDO+0x2c>
            }
        }
    }

    return MSG_DO_SUCCESS;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3718      	adds	r7, #24
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <Convert_PDO_to_Bytes>:
 |_| |___/ \___/    |_| /_/\_\
                              
*/

static int Convert_PDO_to_Bytes(MsgDataObjectHeader* t_header, uint8_t* t_byte_arr)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b086      	sub	sp, #24
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	6039      	str	r1, [r7, #0]
    int t_header_size = sizeof(MsgDataObjectHeader);
 800e958:	2302      	movs	r3, #2
 800e95a:	617b      	str	r3, [r7, #20]
    // Publish PDO
    MsgPDOStruct* t_pdo = Find_PDO(t_header->dod_id, t_header->obj_id);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	781a      	ldrb	r2, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	785b      	ldrb	r3, [r3, #1]
 800e964:	4619      	mov	r1, r3
 800e966:	4610      	mov	r0, r2
 800e968:	f7ff fb76 	bl	800e058 <Find_PDO>
 800e96c:	6138      	str	r0, [r7, #16]
    if (t_pdo == NULL) {
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d102      	bne.n	800e97a <Convert_PDO_to_Bytes+0x2c>
        //TODO: Cannot Find PDO
        return -2;
 800e974:	f06f 0301 	mvn.w	r3, #1
 800e978:	e016      	b.n	800e9a8 <Convert_PDO_to_Bytes+0x5a>
    }

    uint16_t t_n_bytes = Set_PDO(t_pdo, t_byte_arr + t_header_size);
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	683a      	ldr	r2, [r7, #0]
 800e97e:	4413      	add	r3, r2
 800e980:	4619      	mov	r1, r3
 800e982:	6938      	ldr	r0, [r7, #16]
 800e984:	f7ff fba6 	bl	800e0d4 <Set_PDO>
 800e988:	4603      	mov	r3, r0
 800e98a:	81fb      	strh	r3, [r7, #14]
    if (t_n_bytes < 0) {
        //TODO: Copy PDO to Send 
        return -1;
    } else if (t_n_bytes == 0) { // Nothing to publish
 800e98c:	89fb      	ldrh	r3, [r7, #14]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d101      	bne.n	800e996 <Convert_PDO_to_Bytes+0x48>
        return 0;
 800e992:	2300      	movs	r3, #0
 800e994:	e008      	b.n	800e9a8 <Convert_PDO_to_Bytes+0x5a>
    }

    memcpy(t_byte_arr, t_header, t_header_size);
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	461a      	mov	r2, r3
 800e99a:	6879      	ldr	r1, [r7, #4]
 800e99c:	6838      	ldr	r0, [r7, #0]
 800e99e:	f001 fc23 	bl	80101e8 <memcpy>
    return t_header_size + t_n_bytes;
 800e9a2:	89fa      	ldrh	r2, [r7, #14]
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	4413      	add	r3, r2
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3718      	adds	r7, #24
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <Pack_PDO>:

static int Pack_PDO(uint8_t* t_byte_arr, uint8_t* t_byte_len)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b088      	sub	sp, #32
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
	// check send list whether these are empty or not 
    if (pdo_send_list == NULL){
 800e9ba:	4b28      	ldr	r3, [pc, #160]	; (800ea5c <Pack_PDO+0xac>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d101      	bne.n	800e9c6 <Pack_PDO+0x16>
        return 0;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	e046      	b.n	800ea54 <Pack_PDO+0xa4>
    }

    int t_cursor = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	61fb      	str	r3, [r7, #28]

    // Pub PDO
    int t_n_pdo_cursor = t_cursor;
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	617b      	str	r3, [r7, #20]
    t_cursor += OBJ_NUMS_SIZE;
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	61fb      	str	r3, [r7, #28]

    uint8_t t_n_pdo = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	73fb      	strb	r3, [r7, #15]

    if (pdo_send_list != NULL) {
 800e9d8:	4b20      	ldr	r3, [pc, #128]	; (800ea5c <Pack_PDO+0xac>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d02f      	beq.n	800ea40 <Pack_PDO+0x90>
        for(int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	61bb      	str	r3, [r7, #24]
 800e9e4:	e01f      	b.n	800ea26 <Pack_PDO+0x76>

            int temp_cursor = Convert_PDO_to_Bytes(&pdo_send_list[i], &t_byte_arr[t_cursor]);
 800e9e6:	4b1d      	ldr	r3, [pc, #116]	; (800ea5c <Pack_PDO+0xac>)
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	005b      	lsls	r3, r3, #1
 800e9ee:	18d0      	adds	r0, r2, r3
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	4413      	add	r3, r2
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	f7ff ffa9 	bl	800e94e <Convert_PDO_to_Bytes>
 800e9fc:	6138      	str	r0, [r7, #16]
            if (temp_cursor > 0) {
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	dd08      	ble.n	800ea16 <Pack_PDO+0x66>
            	t_cursor += temp_cursor;
 800ea04:	69fa      	ldr	r2, [r7, #28]
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	4413      	add	r3, r2
 800ea0a:	61fb      	str	r3, [r7, #28]
                ++t_n_pdo;
 800ea0c:	7bfb      	ldrb	r3, [r7, #15]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	73fb      	strb	r3, [r7, #15]
 800ea14:	e004      	b.n	800ea20 <Pack_PDO+0x70>
            } else if (temp_cursor < 0) {
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	da01      	bge.n	800ea20 <Pack_PDO+0x70>
                //TODO: Pack PDO Error
                return temp_cursor;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	e019      	b.n	800ea54 <Pack_PDO+0xa4>
        for(int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	3301      	adds	r3, #1
 800ea24:	61bb      	str	r3, [r7, #24]
 800ea26:	4b0d      	ldr	r3, [pc, #52]	; (800ea5c <Pack_PDO+0xac>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d004      	beq.n	800ea38 <Pack_PDO+0x88>
 800ea2e:	4b0b      	ldr	r3, [pc, #44]	; (800ea5c <Pack_PDO+0xac>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	3b08      	subs	r3, #8
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	e000      	b.n	800ea3a <Pack_PDO+0x8a>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	69ba      	ldr	r2, [r7, #24]
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d8d2      	bhi.n	800e9e6 <Pack_PDO+0x36>
            }
        }
    }

    // Set # of PDOs
    memcpy(&t_byte_arr[t_n_pdo_cursor], &t_n_pdo, OBJ_NUMS_SIZE);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	4413      	add	r3, r2
 800ea46:	7bfa      	ldrb	r2, [r7, #15]
 800ea48:	701a      	strb	r2, [r3, #0]

    *t_byte_len = t_cursor;
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	b2da      	uxtb	r2, r3
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	701a      	strb	r2, [r3, #0]

    return MSG_DO_SUCCESS;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3720      	adds	r7, #32
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	2400d3ac 	.word	0x2400d3ac

0800ea60 <Send_PDO>:

static int Send_PDO()
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
    uint8_t t_byte_len;
    uint8_t t_dest_node = NODE_ID_RA;
 800ea66:	2307      	movs	r3, #7
 800ea68:	737b      	strb	r3, [r7, #13]
    uint16_t t_identifier;

    if(GUI_onoff)	{	t_identifier = GUI_SYNC|GUI_command;	}
 800ea6a:	4b1e      	ldr	r3, [pc, #120]	; (800eae4 <Send_PDO+0x84>)
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d007      	beq.n	800ea82 <Send_PDO+0x22>
 800ea72:	4b1d      	ldr	r3, [pc, #116]	; (800eae8 <Send_PDO+0x88>)
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	b21b      	sxth	r3, r3
 800ea78:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800ea7c:	b21b      	sxth	r3, r3
 800ea7e:	81fb      	strh	r3, [r7, #14]
 800ea80:	e00b      	b.n	800ea9a <Send_PDO+0x3a>
    else 			{	t_identifier = PDO|(node_id<<4)|t_dest_node;	}
 800ea82:	4b1a      	ldr	r3, [pc, #104]	; (800eaec <Send_PDO+0x8c>)
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	011b      	lsls	r3, r3, #4
 800ea88:	b21b      	sxth	r3, r3
 800ea8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ea8e:	b21a      	sxth	r2, r3
 800ea90:	7b7b      	ldrb	r3, [r7, #13]
 800ea92:	b21b      	sxth	r3, r3
 800ea94:	4313      	orrs	r3, r2
 800ea96:	b21b      	sxth	r3, r3
 800ea98:	81fb      	strh	r3, [r7, #14]

    int t_check = Pack_PDO(fdcanTxData, &t_byte_len);
 800ea9a:	1dfb      	adds	r3, r7, #7
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4814      	ldr	r0, [pc, #80]	; (800eaf0 <Send_PDO+0x90>)
 800eaa0:	f7ff ff86 	bl	800e9b0 <Pack_PDO>
 800eaa4:	60b8      	str	r0, [r7, #8]

    if(t_check != 0){
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <Send_PDO+0x50>
        //TODO: Send PDO Error
    	return t_check;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	e014      	b.n	800eada <Send_PDO+0x7a>
    } else if(t_check){
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d001      	beq.n	800eaba <Send_PDO+0x5a>
    	return t_check;
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	e00f      	b.n	800eada <Send_PDO+0x7a>
    }

    if (t_byte_len != 1){
 800eaba:	79fb      	ldrb	r3, [r7, #7]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d00b      	beq.n	800ead8 <Send_PDO+0x78>
		if(Send_MSG(t_identifier, t_byte_len, fdcanTxData) == 0){
 800eac0:	79fb      	ldrb	r3, [r7, #7]
 800eac2:	4619      	mov	r1, r3
 800eac4:	89fb      	ldrh	r3, [r7, #14]
 800eac6:	4a0a      	ldr	r2, [pc, #40]	; (800eaf0 <Send_PDO+0x90>)
 800eac8:	4618      	mov	r0, r3
 800eaca:	f000 fa0b 	bl	800eee4 <Send_MSG>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <Send_PDO+0x78>
			return t_check;
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	e000      	b.n	800eada <Send_PDO+0x7a>
			//TODO: MSG TX ERROR
		}
    }

	return t_check;
 800ead8:	68bb      	ldr	r3, [r7, #8]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	2400d3aa 	.word	0x2400d3aa
 800eae8:	2400d3ab 	.word	0x2400d3ab
 800eaec:	2400d3b8 	.word	0x2400d3b8
 800eaf0:	2400d3c4 	.word	0x2400d3c4

0800eaf4 <Ext_Send_PDO>:

static int Ext_Send_PDO()
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0
	if(GUI_command == GET_DIRECTION_SET_DATA){
 800eaf8:	4b06      	ldr	r3, [pc, #24]	; (800eb14 <Ext_Send_PDO+0x20>)
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	2b1f      	cmp	r3, #31
 800eafe:	d105      	bne.n	800eb0c <Ext_Send_PDO+0x18>
		Send_MSG((uint16_t)(GUI_SYNC|GET_DIRECTION_SET_DONE), 1, (uint8_t*)0);
 800eb00:	2200      	movs	r2, #0
 800eb02:	2101      	movs	r1, #1
 800eb04:	f44f 60a4 	mov.w	r0, #1312	; 0x520
 800eb08:	f000 f9ec 	bl	800eee4 <Send_MSG>
	}

	return 0;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	2400d3ab 	.word	0x2400d3ab

0800eb18 <Set_PDO_Dummy>:

static int Set_PDO_Dummy()
{
 800eb18:	b480      	push	{r7}
 800eb1a:	af00      	add	r7, sp, #0
	static int t_count = 0;

	test_dummy[0] = comm_loop_cnt;
 800eb1c:	4b19      	ldr	r3, [pc, #100]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a19      	ldr	r2, [pc, #100]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb22:	6013      	str	r3, [r2, #0]
	test_dummy[1] = comm_loop_cnt;
 800eb24:	4b17      	ldr	r3, [pc, #92]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4a17      	ldr	r2, [pc, #92]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb2a:	6053      	str	r3, [r2, #4]
	test_dummy[2] = comm_loop_cnt;
 800eb2c:	4b15      	ldr	r3, [pc, #84]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	4a15      	ldr	r2, [pc, #84]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb32:	6093      	str	r3, [r2, #8]
	test_dummy[3] = comm_loop_cnt;
 800eb34:	4b13      	ldr	r3, [pc, #76]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a13      	ldr	r2, [pc, #76]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb3a:	60d3      	str	r3, [r2, #12]
	test_dummy[4] = comm_loop_cnt;
 800eb3c:	4b11      	ldr	r3, [pc, #68]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a11      	ldr	r2, [pc, #68]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb42:	6113      	str	r3, [r2, #16]
	test_dummy[5] = comm_loop_cnt;
 800eb44:	4b0f      	ldr	r3, [pc, #60]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a0f      	ldr	r2, [pc, #60]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb4a:	6153      	str	r3, [r2, #20]
	test_dummy[6] = comm_loop_cnt;
 800eb4c:	4b0d      	ldr	r3, [pc, #52]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a0d      	ldr	r2, [pc, #52]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb52:	6193      	str	r3, [r2, #24]
	test_dummy[7] = comm_loop_cnt;
 800eb54:	4b0b      	ldr	r3, [pc, #44]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a0b      	ldr	r2, [pc, #44]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb5a:	61d3      	str	r3, [r2, #28]
	test_dummy[8] = comm_loop_cnt;
 800eb5c:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a09      	ldr	r2, [pc, #36]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb62:	6213      	str	r3, [r2, #32]
	test_dummy[9] = comm_loop_cnt;
 800eb64:	4b07      	ldr	r3, [pc, #28]	; (800eb84 <Set_PDO_Dummy+0x6c>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a07      	ldr	r2, [pc, #28]	; (800eb88 <Set_PDO_Dummy+0x70>)
 800eb6a:	6253      	str	r3, [r2, #36]	; 0x24

	t_count++;
 800eb6c:	4b07      	ldr	r3, [pc, #28]	; (800eb8c <Set_PDO_Dummy+0x74>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	3301      	adds	r3, #1
 800eb72:	4a06      	ldr	r2, [pc, #24]	; (800eb8c <Set_PDO_Dummy+0x74>)
 800eb74:	6013      	str	r3, [r2, #0]

	return 0;
 800eb76:	2300      	movs	r3, #0
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	2400d444 	.word	0x2400d444
 800eb88:	2400d448 	.word	0x2400d448
 800eb8c:	2400d474 	.word	0x2400d474

0800eb90 <Check_Trajectory_Error>:

static int Check_Trajectory_Error(uint16_t t_frame_idx)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	4603      	mov	r3, r0
 800eb98:	80fb      	strh	r3, [r7, #6]
	if((t_frame_idx % D10_TRAJECTORY_ELEMENT_NUMBER) != 0)		{return -1;}
 800eb9a:	88fa      	ldrh	r2, [r7, #6]
 800eb9c:	4b11      	ldr	r3, [pc, #68]	; (800ebe4 <Check_Trajectory_Error+0x54>)
 800eb9e:	fba3 1302 	umull	r1, r3, r3, r2
 800eba2:	08d9      	lsrs	r1, r3, #3
 800eba4:	460b      	mov	r3, r1
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	440b      	add	r3, r1
 800ebaa:	005b      	lsls	r3, r3, #1
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d002      	beq.n	800ebba <Check_Trajectory_Error+0x2a>
 800ebb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb8:	e00e      	b.n	800ebd8 <Check_Trajectory_Error+0x48>
	if( (t_frame_idx - trajectory_buffer.frame_idx) != 0)		{return -2;}
 800ebba:	4b0b      	ldr	r3, [pc, #44]	; (800ebe8 <Check_Trajectory_Error+0x58>)
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	88fa      	ldrh	r2, [r7, #6]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d002      	beq.n	800ebca <Check_Trajectory_Error+0x3a>
 800ebc4:	f06f 0301 	mvn.w	r3, #1
 800ebc8:	e006      	b.n	800ebd8 <Check_Trajectory_Error+0x48>

	trajectory_buffer.frame_idx += D10_TRAJECTORY_ELEMENT_NUMBER;
 800ebca:	4b07      	ldr	r3, [pc, #28]	; (800ebe8 <Check_Trajectory_Error+0x58>)
 800ebcc:	881b      	ldrh	r3, [r3, #0]
 800ebce:	330a      	adds	r3, #10
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	4b05      	ldr	r3, [pc, #20]	; (800ebe8 <Check_Trajectory_Error+0x58>)
 800ebd4:	801a      	strh	r2, [r3, #0]

	return 0;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	370c      	adds	r7, #12
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr
 800ebe4:	cccccccd 	.word	0xcccccccd
 800ebe8:	24003764 	.word	0x24003764

0800ebec <Assemble_Trajectory>:

static int Assemble_Trajectory(uint8_t* t_byte_arr)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
	uint8_t t_cursor, t_check, t_buf;
	uint16_t t_index;
	int8_t t_ack;
    uint16_t t_identifier = TRAJECTORY|(node_id<<4)|NODE_ID_CM;
 800ebf4:	4b2b      	ldr	r3, [pc, #172]	; (800eca4 <Assemble_Trajectory+0xb8>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	011b      	lsls	r3, r3, #4
 800ebfa:	b21a      	sxth	r2, r3
 800ebfc:	f240 4301 	movw	r3, #1025	; 0x401
 800ec00:	4313      	orrs	r3, r2
 800ec02:	b21b      	sxth	r3, r3
 800ec04:	81fb      	strh	r3, [r7, #14]

	/* Get index */
	t_cursor = 0;
 800ec06:	2300      	movs	r3, #0
 800ec08:	75fb      	strb	r3, [r7, #23]
	memcpy(&t_index, &t_byte_arr[t_cursor], 2);
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	4413      	add	r3, r2
 800ec10:	881b      	ldrh	r3, [r3, #0]
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	817b      	strh	r3, [r7, #10]
	t_cursor += 2;
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	3302      	adds	r3, #2
 800ec1a:	75fb      	strb	r3, [r7, #23]

	/* Check Error*/
	t_check = Check_Trajectory_Error(t_index);
 800ec1c:	897b      	ldrh	r3, [r7, #10]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7ff ffb6 	bl	800eb90 <Check_Trajectory_Error>
 800ec24:	4603      	mov	r3, r0
 800ec26:	737b      	strb	r3, [r7, #13]

	if(t_check != 0) {
 800ec28:	7b7b      	ldrb	r3, [r7, #13]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d005      	beq.n	800ec3a <Assemble_Trajectory+0x4e>
		trajectory_buffer.frame_idx = 0;
 800ec2e:	4b1e      	ldr	r3, [pc, #120]	; (800eca8 <Assemble_Trajectory+0xbc>)
 800ec30:	2200      	movs	r2, #0
 800ec32:	801a      	strh	r2, [r3, #0]
		t_ack = -2;
 800ec34:	23fe      	movs	r3, #254	; 0xfe
 800ec36:	727b      	strb	r3, [r7, #9]
 800ec38:	e025      	b.n	800ec86 <Assemble_Trajectory+0x9a>
	} else {

		/* Save Buffer */
		for(int i = 0; i < D10_TRAJECTORY_ELEMENT_NUMBER; ++i){
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	613b      	str	r3, [r7, #16]
 800ec3e:	e012      	b.n	800ec66 <Assemble_Trajectory+0x7a>
			memcpy(&trajectory_buffer.buff[t_index++], &t_byte_arr[t_cursor], 4);
 800ec40:	897b      	ldrh	r3, [r7, #10]
 800ec42:	1c5a      	adds	r2, r3, #1
 800ec44:	b292      	uxth	r2, r2
 800ec46:	817a      	strh	r2, [r7, #10]
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	4a17      	ldr	r2, [pc, #92]	; (800eca8 <Assemble_Trajectory+0xbc>)
 800ec4c:	4413      	add	r3, r2
 800ec4e:	3304      	adds	r3, #4
 800ec50:	7dfa      	ldrb	r2, [r7, #23]
 800ec52:	6879      	ldr	r1, [r7, #4]
 800ec54:	440a      	add	r2, r1
 800ec56:	6812      	ldr	r2, [r2, #0]
 800ec58:	601a      	str	r2, [r3, #0]
			t_cursor += 4;
 800ec5a:	7dfb      	ldrb	r3, [r7, #23]
 800ec5c:	3304      	adds	r3, #4
 800ec5e:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < D10_TRAJECTORY_ELEMENT_NUMBER; ++i){
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	3301      	adds	r3, #1
 800ec64:	613b      	str	r3, [r7, #16]
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	2b09      	cmp	r3, #9
 800ec6a:	dde9      	ble.n	800ec40 <Assemble_Trajectory+0x54>
		}

		/* Check End of Trajectory */
		if(t_index >= D10_TRAJECTORY_TOTAL_LENGTH){
 800ec6c:	897b      	ldrh	r3, [r7, #10]
 800ec6e:	f242 720f 	movw	r2, #9999	; 0x270f
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d905      	bls.n	800ec82 <Assemble_Trajectory+0x96>
			t_ack = -1;
 800ec76:	23ff      	movs	r3, #255	; 0xff
 800ec78:	727b      	strb	r3, [r7, #9]
			trajectory_buffer.frame_idx = 0;
 800ec7a:	4b0b      	ldr	r3, [pc, #44]	; (800eca8 <Assemble_Trajectory+0xbc>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	801a      	strh	r2, [r3, #0]
 800ec80:	e001      	b.n	800ec86 <Assemble_Trajectory+0x9a>
		} else {
			t_ack = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	727b      	strb	r3, [r7, #9]
 800ec86:	7a7b      	ldrb	r3, [r7, #9]
		}
	}

	/* Send Acknowledgement */
	memcpy(&t_buf, &t_ack, 1);
 800ec88:	733b      	strb	r3, [r7, #12]
	Send_MSG(t_identifier, 1, &t_buf);
 800ec8a:	f107 020c 	add.w	r2, r7, #12
 800ec8e:	89fb      	ldrh	r3, [r7, #14]
 800ec90:	2101      	movs	r1, #1
 800ec92:	4618      	mov	r0, r3
 800ec94:	f000 f926 	bl	800eee4 <Send_MSG>

	return t_check;
 800ec98:	7b7b      	ldrb	r3, [r7, #13]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	2400d3b8 	.word	0x2400d3b8
 800eca8:	24003764 	.word	0x24003764

0800ecac <Add_PDO_to_Send>:
                                       |___/                       
*/


static void Add_PDO_to_Send(uint8_t t_dod_id, uint8_t t_obj_id)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b08a      	sub	sp, #40	; 0x28
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	460a      	mov	r2, r1
 800ecb6:	71fb      	strb	r3, [r7, #7]
 800ecb8:	4613      	mov	r3, r2
 800ecba:	71bb      	strb	r3, [r7, #6]
	MsgPDOStruct* temp_pdo = Find_PDO(t_dod_id, t_obj_id);
 800ecbc:	79ba      	ldrb	r2, [r7, #6]
 800ecbe:	79fb      	ldrb	r3, [r7, #7]
 800ecc0:	4611      	mov	r1, r2
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7ff f9c8 	bl	800e058 <Find_PDO>
 800ecc8:	6238      	str	r0, [r7, #32]
    if (temp_pdo == NULL) {
 800ecca:	6a3b      	ldr	r3, [r7, #32]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	f000 80b9 	beq.w	800ee44 <Add_PDO_to_Send+0x198>
        //TODO: Cannot Find PDO Error
        return;
    }

    MsgDataObjectHeader t_pdo = {t_dod_id, t_obj_id};
 800ecd2:	79fb      	ldrb	r3, [r7, #7]
 800ecd4:	723b      	strb	r3, [r7, #8]
 800ecd6:	79bb      	ldrb	r3, [r7, #6]
 800ecd8:	727b      	strb	r3, [r7, #9]

    for (int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800ecda:	2300      	movs	r3, #0
 800ecdc:	627b      	str	r3, [r7, #36]	; 0x24
 800ecde:	e015      	b.n	800ed0c <Add_PDO_to_Send+0x60>
        if ((pdo_send_list[i].dod_id == t_dod_id) && (pdo_send_list[i].obj_id == t_obj_id)){
 800ece0:	4b5b      	ldr	r3, [pc, #364]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece6:	005b      	lsls	r3, r3, #1
 800ece8:	4413      	add	r3, r2
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	79fa      	ldrb	r2, [r7, #7]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d109      	bne.n	800ed06 <Add_PDO_to_Send+0x5a>
 800ecf2:	4b57      	ldr	r3, [pc, #348]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf8:	005b      	lsls	r3, r3, #1
 800ecfa:	4413      	add	r3, r2
 800ecfc:	785b      	ldrb	r3, [r3, #1]
 800ecfe:	79ba      	ldrb	r2, [r7, #6]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	f000 80a1 	beq.w	800ee48 <Add_PDO_to_Send+0x19c>
    for (int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800ed06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed08:	3301      	adds	r3, #1
 800ed0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ed0c:	4b50      	ldr	r3, [pc, #320]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d004      	beq.n	800ed1e <Add_PDO_to_Send+0x72>
 800ed14:	4b4e      	ldr	r3, [pc, #312]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	3b08      	subs	r3, #8
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	e000      	b.n	800ed20 <Add_PDO_to_Send+0x74>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d8dc      	bhi.n	800ece0 <Add_PDO_to_Send+0x34>
            return;
        }
    }
    cvector_push_back(pdo_send_list, t_pdo);
 800ed26:	4b4a      	ldr	r3, [pc, #296]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d004      	beq.n	800ed38 <Add_PDO_to_Send+0x8c>
 800ed2e:	4b48      	ldr	r3, [pc, #288]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	3b04      	subs	r3, #4
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	e000      	b.n	800ed3a <Add_PDO_to_Send+0x8e>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	61fb      	str	r3, [r7, #28]
 800ed3c:	4b44      	ldr	r3, [pc, #272]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d004      	beq.n	800ed4e <Add_PDO_to_Send+0xa2>
 800ed44:	4b42      	ldr	r3, [pc, #264]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800ed4c:	e000      	b.n	800ed50 <Add_PDO_to_Send+0xa4>
 800ed4e:	2300      	movs	r3, #0
 800ed50:	69fa      	ldr	r2, [r7, #28]
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d34f      	bcc.n	800edf6 <Add_PDO_to_Send+0x14a>
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	3305      	adds	r3, #5
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	61bb      	str	r3, [r7, #24]
 800ed5e:	4b3c      	ldr	r3, [pc, #240]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d021      	beq.n	800edaa <Add_PDO_to_Send+0xfe>
 800ed66:	4b3a      	ldr	r3, [pc, #232]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	3b08      	subs	r3, #8
 800ed6c:	613b      	str	r3, [r7, #16]
 800ed6e:	69b9      	ldr	r1, [r7, #24]
 800ed70:	6938      	ldr	r0, [r7, #16]
 800ed72:	f001 f871 	bl	800fe58 <realloc>
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d106      	bne.n	800ed8c <Add_PDO_to_Send+0xe0>
 800ed7e:	4b35      	ldr	r3, [pc, #212]	; (800ee54 <Add_PDO_to_Send+0x1a8>)
 800ed80:	4a35      	ldr	r2, [pc, #212]	; (800ee58 <Add_PDO_to_Send+0x1ac>)
 800ed82:	f240 2141 	movw	r1, #577	; 0x241
 800ed86:	4835      	ldr	r0, [pc, #212]	; (800ee5c <Add_PDO_to_Send+0x1b0>)
 800ed88:	f000 ff8c 	bl	800fca4 <__assert_func>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	3308      	adds	r3, #8
 800ed90:	4a2f      	ldr	r2, [pc, #188]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed92:	6013      	str	r3, [r2, #0]
 800ed94:	4b2e      	ldr	r3, [pc, #184]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d02c      	beq.n	800edf6 <Add_PDO_to_Send+0x14a>
 800ed9c:	4b2c      	ldr	r3, [pc, #176]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	3b04      	subs	r3, #4
 800eda2:	69fa      	ldr	r2, [r7, #28]
 800eda4:	3201      	adds	r2, #1
 800eda6:	601a      	str	r2, [r3, #0]
 800eda8:	e025      	b.n	800edf6 <Add_PDO_to_Send+0x14a>
 800edaa:	69b8      	ldr	r0, [r7, #24]
 800edac:	f000 ff98 	bl	800fce0 <malloc>
 800edb0:	4603      	mov	r3, r0
 800edb2:	617b      	str	r3, [r7, #20]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d106      	bne.n	800edc8 <Add_PDO_to_Send+0x11c>
 800edba:	4b29      	ldr	r3, [pc, #164]	; (800ee60 <Add_PDO_to_Send+0x1b4>)
 800edbc:	4a26      	ldr	r2, [pc, #152]	; (800ee58 <Add_PDO_to_Send+0x1ac>)
 800edbe:	f240 2141 	movw	r1, #577	; 0x241
 800edc2:	4826      	ldr	r0, [pc, #152]	; (800ee5c <Add_PDO_to_Send+0x1b0>)
 800edc4:	f000 ff6e 	bl	800fca4 <__assert_func>
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	3308      	adds	r3, #8
 800edcc:	4a20      	ldr	r2, [pc, #128]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800edce:	6013      	str	r3, [r2, #0]
 800edd0:	4b1f      	ldr	r3, [pc, #124]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d005      	beq.n	800ede4 <Add_PDO_to_Send+0x138>
 800edd8:	4b1d      	ldr	r3, [pc, #116]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	3b04      	subs	r3, #4
 800edde:	69fa      	ldr	r2, [r7, #28]
 800ede0:	3201      	adds	r2, #1
 800ede2:	601a      	str	r2, [r3, #0]
 800ede4:	4b1a      	ldr	r3, [pc, #104]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d004      	beq.n	800edf6 <Add_PDO_to_Send+0x14a>
 800edec:	4b18      	ldr	r3, [pc, #96]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	3b08      	subs	r3, #8
 800edf2:	2200      	movs	r2, #0
 800edf4:	601a      	str	r2, [r3, #0]
 800edf6:	4b16      	ldr	r3, [pc, #88]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	4b15      	ldr	r3, [pc, #84]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d005      	beq.n	800ee0e <Add_PDO_to_Send+0x162>
 800ee02:	4b13      	ldr	r3, [pc, #76]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3b08      	subs	r3, #8
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	005b      	lsls	r3, r3, #1
 800ee0c:	e000      	b.n	800ee10 <Add_PDO_to_Send+0x164>
 800ee0e:	2300      	movs	r3, #0
 800ee10:	4413      	add	r3, r2
 800ee12:	461a      	mov	r2, r3
 800ee14:	f107 0308 	add.w	r3, r7, #8
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	8013      	strh	r3, [r2, #0]
 800ee1c:	4b0c      	ldr	r3, [pc, #48]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d012      	beq.n	800ee4a <Add_PDO_to_Send+0x19e>
 800ee24:	4b0a      	ldr	r3, [pc, #40]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d005      	beq.n	800ee38 <Add_PDO_to_Send+0x18c>
 800ee2c:	4b08      	ldr	r3, [pc, #32]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	3b08      	subs	r3, #8
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	3301      	adds	r3, #1
 800ee36:	e000      	b.n	800ee3a <Add_PDO_to_Send+0x18e>
 800ee38:	2301      	movs	r3, #1
 800ee3a:	4a05      	ldr	r2, [pc, #20]	; (800ee50 <Add_PDO_to_Send+0x1a4>)
 800ee3c:	6812      	ldr	r2, [r2, #0]
 800ee3e:	3a08      	subs	r2, #8
 800ee40:	6013      	str	r3, [r2, #0]
 800ee42:	e002      	b.n	800ee4a <Add_PDO_to_Send+0x19e>
        return;
 800ee44:	bf00      	nop
 800ee46:	e000      	b.n	800ee4a <Add_PDO_to_Send+0x19e>
            return;
 800ee48:	bf00      	nop
}
 800ee4a:	3728      	adds	r7, #40	; 0x28
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	2400d3ac 	.word	0x2400d3ac
 800ee54:	08011a88 	.word	0x08011a88
 800ee58:	08011b08 	.word	0x08011b08
 800ee5c:	08011a90 	.word	0x08011a90
 800ee60:	08011acc 	.word	0x08011acc

0800ee64 <Clear_PDO_to_Send>:

static void Clear_PDO_to_Send()
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
    cvector_free(pdo_send_list);
 800ee6a:	4b09      	ldr	r3, [pc, #36]	; (800ee90 <Clear_PDO_to_Send+0x2c>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d006      	beq.n	800ee80 <Clear_PDO_to_Send+0x1c>
 800ee72:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <Clear_PDO_to_Send+0x2c>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	3b08      	subs	r3, #8
 800ee78:	607b      	str	r3, [r7, #4]
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 ff38 	bl	800fcf0 <free>
    pdo_send_list = NULL;
 800ee80:	4b03      	ldr	r3, [pc, #12]	; (800ee90 <Clear_PDO_to_Send+0x2c>)
 800ee82:	2200      	movs	r2, #0
 800ee84:	601a      	str	r2, [r3, #0]
}
 800ee86:	bf00      	nop
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	2400d3ac 	.word	0x2400d3ac

0800ee94 <Send_USB_Trick>:
 |_|  |_\___/__/__/\__,_\__, \___| |_||_\__,_|_||_\__,_|_\___|_|  
                        |___/                                     
*/

static void Send_USB_Trick(uint8_t* t_in_buf, uint32_t t_in_len, uint8_t* t_out_buf)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
	 * and MD and breaks the sequence of the GUI.
	 *
	 * Therefore, 0x00 is inserted between every byte and sent.
	 * */

	for(int i = 0; i < t_in_len; ++i){
 800eea0:	2300      	movs	r3, #0
 800eea2:	617b      	str	r3, [r7, #20]
 800eea4:	e013      	b.n	800eece <Send_USB_Trick+0x3a>
		*(t_out_buf + (2*i)) = *(t_in_buf + i);
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	441a      	add	r2, r3
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	005b      	lsls	r3, r3, #1
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	440b      	add	r3, r1
 800eeb6:	7812      	ldrb	r2, [r2, #0]
 800eeb8:	701a      	strb	r2, [r3, #0]
		*(t_out_buf + (2*i+1)) = 0;
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	005b      	lsls	r3, r3, #1
 800eebe:	3301      	adds	r3, #1
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	4413      	add	r3, r2
 800eec4:	2200      	movs	r2, #0
 800eec6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < t_in_len; ++i){
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	3301      	adds	r3, #1
 800eecc:	617b      	str	r3, [r7, #20]
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	68ba      	ldr	r2, [r7, #8]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d8e7      	bhi.n	800eea6 <Send_USB_Trick+0x12>
	}
}
 800eed6:	bf00      	nop
 800eed8:	bf00      	nop
 800eeda:	371c      	adds	r7, #28
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <Send_MSG>:

int Send_MSG(uint16_t t_COB_ID, uint32_t t_len, uint8_t* t_tx_data)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b0ba      	sub	sp, #232	; 0xe8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	4603      	mov	r3, r0
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	607a      	str	r2, [r7, #4]
 800eef0:	81fb      	strh	r3, [r7, #14]
	static uint8_t t_fnc_code, t_node_id;
	int t_check = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	uint8_t t_txBuf[67];
	uint8_t t_usb_txBuf[137];

	if(comm_type == e_FDCAN){
 800eef8:	4b2e      	ldr	r3, [pc, #184]	; (800efb4 <Send_MSG+0xd0>)
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d111      	bne.n	800ef24 <Send_MSG+0x40>
		if(Transmit_IOIF_Fdcan(t_COB_ID, Convert_Byte_Length(t_len), t_tx_data) != 0){
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7ff f97a 	bl	800e1fe <Convert_Byte_Length>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	89fb      	ldrh	r3, [r7, #14]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fd f9a2 	bl	800c25c <Transmit_IOIF_Fdcan>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d043      	beq.n	800efa6 <Send_MSG+0xc2>
			return t_check;
 800ef1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef22:	e042      	b.n	800efaa <Send_MSG+0xc6>
			//TODO: MSG TX ERROR
		}
	} else if(comm_type == e_USB){
 800ef24:	4b23      	ldr	r3, [pc, #140]	; (800efb4 <Send_MSG+0xd0>)
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d13c      	bne.n	800efa6 <Send_MSG+0xc2>

		t_fnc_code = (t_COB_ID & 0xF00) >> 8;
 800ef2c:	89fb      	ldrh	r3, [r7, #14]
 800ef2e:	121b      	asrs	r3, r3, #8
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	f003 030f 	and.w	r3, r3, #15
 800ef36:	b2da      	uxtb	r2, r3
 800ef38:	4b1f      	ldr	r3, [pc, #124]	; (800efb8 <Send_MSG+0xd4>)
 800ef3a:	701a      	strb	r2, [r3, #0]
		t_node_id = (t_COB_ID & 0xFF);
 800ef3c:	89fb      	ldrh	r3, [r7, #14]
 800ef3e:	b2da      	uxtb	r2, r3
 800ef40:	4b1e      	ldr	r3, [pc, #120]	; (800efbc <Send_MSG+0xd8>)
 800ef42:	701a      	strb	r2, [r3, #0]

		memcpy(&t_txBuf[2], t_tx_data, t_len);
 800ef44:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ef48:	3302      	adds	r3, #2
 800ef4a:	68ba      	ldr	r2, [r7, #8]
 800ef4c:	6879      	ldr	r1, [r7, #4]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f001 f94a 	bl	80101e8 <memcpy>
 800ef54:	4b18      	ldr	r3, [pc, #96]	; (800efb8 <Send_MSG+0xd4>)
 800ef56:	781b      	ldrb	r3, [r3, #0]
		memcpy(t_txBuf, &t_fnc_code, 1);			t_len++;
 800ef58:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	60bb      	str	r3, [r7, #8]
 800ef62:	4b16      	ldr	r3, [pc, #88]	; (800efbc <Send_MSG+0xd8>)
 800ef64:	781b      	ldrb	r3, [r3, #0]
		memcpy(&t_txBuf[1], &t_node_id, 1);			t_len++;
 800ef66:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	60bb      	str	r3, [r7, #8]


		Send_USB_Trick(t_txBuf, t_len, t_usb_txBuf);
 800ef70:	f107 0214 	add.w	r2, r7, #20
 800ef74:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ef78:	68b9      	ldr	r1, [r7, #8]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7ff ff8a 	bl	800ee94 <Send_USB_Trick>
		t_len *= 2;
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	005b      	lsls	r3, r3, #1
 800ef84:	60bb      	str	r3, [r7, #8]

		t_usb_txBuf[t_len++] = '\r';
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	1c5a      	adds	r2, r3, #1
 800ef8a:	60ba      	str	r2, [r7, #8]
 800ef8c:	33e8      	adds	r3, #232	; 0xe8
 800ef8e:	443b      	add	r3, r7
 800ef90:	220d      	movs	r2, #13
 800ef92:	f803 2cd4 	strb.w	r2, [r3, #-212]
		t_usb_txBuf[t_len++] = '\n';
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	1c5a      	adds	r2, r3, #1
 800ef9a:	60ba      	str	r2, [r7, #8]
 800ef9c:	33e8      	adds	r3, #232	; 0xe8
 800ef9e:	443b      	add	r3, r7
 800efa0:	220a      	movs	r2, #10
 800efa2:	f803 2cd4 	strb.w	r2, [r3, #-212]
//			return t_check;
//			//TODO: MSG TX ERROR
//		}
	}

	return -1;
 800efa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800efaa:	4618      	mov	r0, r3
 800efac:	37e8      	adds	r7, #232	; 0xe8
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	2400d3a9 	.word	0x2400d3a9
 800efb8:	2400d478 	.word	0x2400d478
 800efbc:	2400d479 	.word	0x2400d479

0800efc0 <Fdcan_Rx_Hdlr>:
//
//	return 0;
//}

static int Fdcan_Rx_Hdlr(uint16_t t_wasp_id, uint8_t* t_rx_data)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	4603      	mov	r3, r0
 800efc8:	6039      	str	r1, [r7, #0]
 800efca:	80fb      	strh	r3, [r7, #6]
    fnc_code = t_wasp_id & 0xF00;
 800efcc:	88fb      	ldrh	r3, [r7, #6]
 800efce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800efd2:	4a24      	ldr	r2, [pc, #144]	; (800f064 <Fdcan_Rx_Hdlr+0xa4>)
 800efd4:	6013      	str	r3, [r2, #0]
    ori_node = (t_wasp_id & 0x0F0)>>4;
 800efd6:	88fb      	ldrh	r3, [r7, #6]
 800efd8:	111b      	asrs	r3, r3, #4
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	f003 030f 	and.w	r3, r3, #15
 800efe0:	b2da      	uxtb	r2, r3
 800efe2:	4b21      	ldr	r3, [pc, #132]	; (800f068 <Fdcan_Rx_Hdlr+0xa8>)
 800efe4:	701a      	strb	r2, [r3, #0]

    switch(fnc_code){
 800efe6:	4b1f      	ldr	r3, [pc, #124]	; (800f064 <Fdcan_Rx_Hdlr+0xa4>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efee:	d02f      	beq.n	800f050 <Fdcan_Rx_Hdlr+0x90>
 800eff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eff4:	d830      	bhi.n	800f058 <Fdcan_Rx_Hdlr+0x98>
 800eff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800effa:	d01b      	beq.n	800f034 <Fdcan_Rx_Hdlr+0x74>
 800effc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f000:	d82a      	bhi.n	800f058 <Fdcan_Rx_Hdlr+0x98>
 800f002:	2b00      	cmp	r3, #0
 800f004:	d003      	beq.n	800f00e <Fdcan_Rx_Hdlr+0x4e>
 800f006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f00a:	d005      	beq.n	800f018 <Fdcan_Rx_Hdlr+0x58>
            break;

        case TRAJECTORY:
			Assemble_Trajectory(t_rx_data);
        	break;
        default: break;
 800f00c:	e024      	b.n	800f058 <Fdcan_Rx_Hdlr+0x98>
            Recv_EMCY(t_rx_data, &err_code);
 800f00e:	4917      	ldr	r1, [pc, #92]	; (800f06c <Fdcan_Rx_Hdlr+0xac>)
 800f010:	6838      	ldr	r0, [r7, #0]
 800f012:	f7ff f98b 	bl	800e32c <Recv_EMCY>
            break;
 800f016:	e020      	b.n	800f05a <Fdcan_Rx_Hdlr+0x9a>
            if (Unpack_SDO(t_rx_data) < 0) {
 800f018:	6838      	ldr	r0, [r7, #0]
 800f01a:	f7ff fac7 	bl	800e5ac <Unpack_SDO>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	da01      	bge.n	800f028 <Fdcan_Rx_Hdlr+0x68>
                return SDO_RX_ERR;
 800f024:	2301      	movs	r3, #1
 800f026:	e019      	b.n	800f05c <Fdcan_Rx_Hdlr+0x9c>
                Send_SDO(ori_node);
 800f028:	4b0f      	ldr	r3, [pc, #60]	; (800f068 <Fdcan_Rx_Hdlr+0xa8>)
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7ff fbf1 	bl	800e814 <Send_SDO>
            break;
 800f032:	e012      	b.n	800f05a <Fdcan_Rx_Hdlr+0x9a>
            if (Unpack_PDO(t_rx_data) < 0) {
 800f034:	6838      	ldr	r0, [r7, #0]
 800f036:	f7ff fc52 	bl	800e8de <Unpack_PDO>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	da01      	bge.n	800f044 <Fdcan_Rx_Hdlr+0x84>
                return PDO_RX_ERR;
 800f040:	2303      	movs	r3, #3
 800f042:	e00b      	b.n	800f05c <Fdcan_Rx_Hdlr+0x9c>
                Send_PDO(ori_node);
 800f044:	4b08      	ldr	r3, [pc, #32]	; (800f068 <Fdcan_Rx_Hdlr+0xa8>)
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff fd09 	bl	800ea60 <Send_PDO>
            break;
 800f04e:	e004      	b.n	800f05a <Fdcan_Rx_Hdlr+0x9a>
			Assemble_Trajectory(t_rx_data);
 800f050:	6838      	ldr	r0, [r7, #0]
 800f052:	f7ff fdcb 	bl	800ebec <Assemble_Trajectory>
        	break;
 800f056:	e000      	b.n	800f05a <Fdcan_Rx_Hdlr+0x9a>
        default: break;
 800f058:	bf00      	nop
    }

    return 0;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}
 800f064:	2400d3bc 	.word	0x2400d3bc
 800f068:	2400d3b9 	.word	0x2400d3b9
 800f06c:	2400d3c0 	.word	0x2400d3c0

0800f070 <Initial_ICM2>:

static void Initial_ICM2(uint8_t* aaa)
{
 800f070:	b480      	push	{r7}
 800f072:	b083      	sub	sp, #12
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
	*aaa = 15;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	220f      	movs	r2, #15
 800f07c:	701a      	strb	r2, [r3, #0]
}
 800f07e:	bf00      	nop
 800f080:	370c      	adds	r7, #12
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
	...

0800f08c <Get_State_Callback>:
 \__ \ |) | (_) | | (__/ _` | | | '_ \/ _` / _| / /(_-<
 |___/___/ \___/   \___\__,_|_|_|_.__/\__,_\__|_\_\/__/

*/

MSG_COMMON_SDO_CALLBACK(msg_hdlr_task)
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	2201      	movs	r2, #1
 800f09a:	711a      	strb	r2, [r3, #4]
 800f09c:	2001      	movs	r0, #1
 800f09e:	f000 fe1f 	bl	800fce0 <malloc>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	601a      	str	r2, [r3, #0]
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4a04      	ldr	r2, [pc, #16]	; (800f0c0 <Get_State_Callback+0x34>)
 800f0b0:	7b12      	ldrb	r2, [r2, #12]
 800f0b2:	701a      	strb	r2, [r3, #0]
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	721a      	strb	r2, [r3, #8]
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	2400369c 	.word	0x2400369c

0800f0c4 <Set_State_Callback>:
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	73fb      	strb	r3, [r7, #15]
 800f0d6:	7bfb      	ldrb	r3, [r7, #15]
 800f0d8:	4619      	mov	r1, r3
 800f0da:	4807      	ldr	r0, [pc, #28]	; (800f0f8 <Set_State_Callback+0x34>)
 800f0dc:	f000 fd58 	bl	800fb90 <Transition_State>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	711a      	strb	r2, [r3, #4]
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	721a      	strb	r2, [r3, #8]
 800f0f2:	3710      	adds	r7, #16
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	240036a8 	.word	0x240036a8

0800f0fc <Get_Routine_Callback>:
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	2200      	movs	r2, #0
 800f10a:	721a      	strb	r2, [r3, #8]
 800f10c:	4b18      	ldr	r3, [pc, #96]	; (800f170 <Get_Routine_Callback+0x74>)
 800f10e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f110:	b2da      	uxtb	r2, r3
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	711a      	strb	r2, [r3, #4]
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	791b      	ldrb	r3, [r3, #4]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d024      	beq.n	800f168 <Get_Routine_Callback+0x6c>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	88db      	ldrh	r3, [r3, #6]
 800f122:	461a      	mov	r2, r3
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	791b      	ldrb	r3, [r3, #4]
 800f128:	fb02 f303 	mul.w	r3, r2, r3
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 fdd7 	bl	800fce0 <malloc>
 800f132:	4603      	mov	r3, r0
 800f134:	461a      	mov	r2, r3
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	601a      	str	r2, [r3, #0]
 800f13a:	2300      	movs	r3, #0
 800f13c:	60fb      	str	r3, [r7, #12]
 800f13e:	e00d      	b.n	800f15c <Get_Routine_Callback+0x60>
 800f140:	4a0b      	ldr	r2, [pc, #44]	; (800f170 <Get_Routine_Callback+0x74>)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	3310      	adds	r3, #16
 800f146:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	681a      	ldr	r2, [r3, #0]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	4413      	add	r3, r2
 800f152:	b2ca      	uxtb	r2, r1
 800f154:	701a      	strb	r2, [r3, #0]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	3301      	adds	r3, #1
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	791b      	ldrb	r3, [r3, #4]
 800f160:	461a      	mov	r2, r3
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	4293      	cmp	r3, r2
 800f166:	dbeb      	blt.n	800f140 <Get_Routine_Callback+0x44>
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	2400369c 	.word	0x2400369c

0800f174 <Set_Routine_Callback>:
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	2200      	movs	r2, #0
 800f182:	711a      	strb	r2, [r3, #4]
 800f184:	4828      	ldr	r0, [pc, #160]	; (800f228 <Set_Routine_Callback+0xb4>)
 800f186:	f000 fbab 	bl	800f8e0 <Clear_Routines>
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	791b      	ldrb	r3, [r3, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d103      	bne.n	800f19a <Set_Routine_Callback+0x26>
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	2200      	movs	r2, #0
 800f196:	721a      	strb	r2, [r3, #8]
 800f198:	e043      	b.n	800f222 <Set_Routine_Callback+0xae>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	88db      	ldrh	r3, [r3, #6]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	791b      	ldrb	r3, [r3, #4]
 800f1a4:	fb02 f303 	mul.w	r3, r2, r3
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f000 fd99 	bl	800fce0 <malloc>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	601a      	str	r2, [r3, #0]
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	60fb      	str	r3, [r7, #12]
 800f1ba:	e020      	b.n	800f1fe <Set_Routine_Callback+0x8a>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	72fb      	strb	r3, [r7, #11]
 800f1c8:	7afb      	ldrb	r3, [r7, #11]
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	4816      	ldr	r0, [pc, #88]	; (800f228 <Set_Routine_Callback+0xb4>)
 800f1ce:	f000 fba3 	bl	800f918 <Push_Routine>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10f      	bne.n	800f1f8 <Set_Routine_Callback+0x84>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	441a      	add	r2, r3
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	6819      	ldr	r1, [r3, #0]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	440b      	add	r3, r1
 800f1e8:	7812      	ldrb	r2, [r2, #0]
 800f1ea:	701a      	strb	r2, [r3, #0]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	791b      	ldrb	r3, [r3, #4]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	711a      	strb	r2, [r3, #4]
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	60fb      	str	r3, [r7, #12]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	791b      	ldrb	r3, [r3, #4]
 800f202:	461a      	mov	r2, r3
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	4293      	cmp	r3, r2
 800f208:	dbd8      	blt.n	800f1bc <Set_Routine_Callback+0x48>
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	791a      	ldrb	r2, [r3, #4]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	791b      	ldrb	r3, [r3, #4]
 800f212:	429a      	cmp	r2, r3
 800f214:	d002      	beq.n	800f21c <Set_Routine_Callback+0xa8>
 800f216:	f04f 32ff 	mov.w	r2, #4294967295
 800f21a:	e000      	b.n	800f21e <Set_Routine_Callback+0xaa>
 800f21c:	2200      	movs	r2, #0
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	721a      	strb	r2, [r3, #8]
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	240036dc 	.word	0x240036dc

0800f22c <Set_Send_PDO_List>:

static void Set_Send_PDO_List(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b086      	sub	sp, #24
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
	Clear_PDO_to_Send();
 800f236:	f7ff fe15 	bl	800ee64 <Clear_PDO_to_Send>

    int t_cursor = 0;
 800f23a:	2300      	movs	r3, #0
 800f23c:	617b      	str	r3, [r7, #20]
    uint8_t* t_ids = (uint8_t*)t_req->data;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	613b      	str	r3, [r7, #16]
    while (t_cursor < 2*t_req->size) {
 800f244:	e015      	b.n	800f272 <Set_Send_PDO_List+0x46>
        uint8_t t_dod_id = t_ids[t_cursor++];
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	1c5a      	adds	r2, r3, #1
 800f24a:	617a      	str	r2, [r7, #20]
 800f24c:	461a      	mov	r2, r3
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	4413      	add	r3, r2
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	73fb      	strb	r3, [r7, #15]
        uint8_t t_obj_id = t_ids[t_cursor++];
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	617a      	str	r2, [r7, #20]
 800f25c:	461a      	mov	r2, r3
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	4413      	add	r3, r2
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	73bb      	strb	r3, [r7, #14]
        Add_PDO_to_Send(t_dod_id, t_obj_id);
 800f266:	7bba      	ldrb	r2, [r7, #14]
 800f268:	7bfb      	ldrb	r3, [r7, #15]
 800f26a:	4611      	mov	r1, r2
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7ff fd1d 	bl	800ecac <Add_PDO_to_Send>
    while (t_cursor < 2*t_req->size) {
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	791b      	ldrb	r3, [r3, #4]
 800f276:	005b      	lsls	r3, r3, #1
 800f278:	697a      	ldr	r2, [r7, #20]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	dbe3      	blt.n	800f246 <Set_Send_PDO_List+0x1a>
    }

    t_res->status = DATA_OBJECT_SDO_SUCC;
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2200      	movs	r2, #0
 800f282:	721a      	strb	r2, [r3, #8]
}
 800f284:	bf00      	nop
 800f286:	3718      	adds	r7, #24
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <Set_MS_Enum>:

static void Set_MS_Enum(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
	memcpy(&MS_enum, t_req->data, 1);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	781a      	ldrb	r2, [r3, #0]
 800f29c:	4b06      	ldr	r3, [pc, #24]	; (800f2b8 <Set_MS_Enum+0x2c>)
 800f29e:	701a      	strb	r2, [r3, #0]

	t_res->size = 0;
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	721a      	strb	r2, [r3, #8]
}
 800f2ac:	bf00      	nop
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr
 800f2b8:	2400d3a8 	.word	0x2400d3a8

0800f2bc <Set_GUI_COMM_OnOff>:

static void Set_GUI_COMM_OnOff(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
	memcpy(&GUI_onoff, t_req->data, 1);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	781a      	ldrb	r2, [r3, #0]
 800f2cc:	4b06      	ldr	r3, [pc, #24]	; (800f2e8 <Set_GUI_COMM_OnOff+0x2c>)
 800f2ce:	701a      	strb	r2, [r3, #0]

	t_res->size = 1;
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	721a      	strb	r2, [r3, #8]
}
 800f2dc:	bf00      	nop
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	2400d3aa 	.word	0x2400d3aa

0800f2ec <Set_GUI_COMM_Command>:

static void Set_GUI_COMM_Command(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
	memcpy(&GUI_command, t_req->data, 1);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	781a      	ldrb	r2, [r3, #0]
 800f2fc:	4b06      	ldr	r3, [pc, #24]	; (800f318 <Set_GUI_COMM_Command+0x2c>)
 800f2fe:	701a      	strb	r2, [r3, #0]

	t_res->size = 1;
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	2201      	movs	r2, #1
 800f304:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2200      	movs	r2, #0
 800f30a:	721a      	strb	r2, [r3, #8]
}
 800f30c:	bf00      	nop
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	2400d3ab 	.word	0x2400d3ab

0800f31c <StateOff_Ent>:
 |___/\__\__,_|\__\___/__/

*/

static void StateOff_Ent()
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
	GUI_onoff = 0;
 800f320:	4b05      	ldr	r3, [pc, #20]	; (800f338 <StateOff_Ent+0x1c>)
 800f322:	2200      	movs	r2, #0
 800f324:	701a      	strb	r2, [r3, #0]
	GUI_command = 0;
 800f326:	4b05      	ldr	r3, [pc, #20]	; (800f33c <StateOff_Ent+0x20>)
 800f328:	2200      	movs	r2, #0
 800f32a:	701a      	strb	r2, [r3, #0]
    Transition_State(&msg_hdlr_task.state_machine, e_State_Standby);
 800f32c:	2101      	movs	r1, #1
 800f32e:	4804      	ldr	r0, [pc, #16]	; (800f340 <StateOff_Ent+0x24>)
 800f330:	f000 fc2e 	bl	800fb90 <Transition_State>
}
 800f334:	bf00      	nop
 800f336:	bd80      	pop	{r7, pc}
 800f338:	2400d3aa 	.word	0x2400d3aa
 800f33c:	2400d3ab 	.word	0x2400d3ab
 800f340:	240036a8 	.word	0x240036a8

0800f344 <StateStandby_Ent>:

static void StateStandby_Ent()
{}
 800f344:	b480      	push	{r7}
 800f346:	af00      	add	r7, sp, #0
 800f348:	bf00      	nop
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr

0800f352 <StateStandby_Run>:

static void StateStandby_Run()
{
 800f352:	b480      	push	{r7}
 800f354:	af00      	add	r7, sp, #0

}
 800f356:	bf00      	nop
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <StateStandby_Ext>:

static void StateStandby_Ext()
{
 800f360:	b480      	push	{r7}
 800f362:	af00      	add	r7, sp, #0
}
 800f364:	bf00      	nop
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr
	...

0800f370 <StateEnable_Ent>:

static void StateEnable_Ent()
{
 800f370:	b580      	push	{r7, lr}
 800f372:	af00      	add	r7, sp, #0
	comm_loop_cnt = 0;
 800f374:	4b03      	ldr	r3, [pc, #12]	; (800f384 <StateEnable_Ent+0x14>)
 800f376:	2200      	movs	r2, #0
 800f378:	601a      	str	r2, [r3, #0]
	Ent_Routines(&msg_hdlr_task.routine);
 800f37a:	4803      	ldr	r0, [pc, #12]	; (800f388 <StateEnable_Ent+0x18>)
 800f37c:	f000 f9fa 	bl	800f774 <Ent_Routines>
}
 800f380:	bf00      	nop
 800f382:	bd80      	pop	{r7, pc}
 800f384:	2400d444 	.word	0x2400d444
 800f388:	240036dc 	.word	0x240036dc

0800f38c <StateEnable_Run>:

static void StateEnable_Run()
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	af00      	add	r7, sp, #0
	Run_Routines(&msg_hdlr_task.routine);
 800f390:	4804      	ldr	r0, [pc, #16]	; (800f3a4 <StateEnable_Run+0x18>)
 800f392:	f000 fa2f 	bl	800f7f4 <Run_Routines>

    comm_loop_cnt++;
 800f396:	4b04      	ldr	r3, [pc, #16]	; (800f3a8 <StateEnable_Run+0x1c>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3301      	adds	r3, #1
 800f39c:	4a02      	ldr	r2, [pc, #8]	; (800f3a8 <StateEnable_Run+0x1c>)
 800f39e:	6013      	str	r3, [r2, #0]
}
 800f3a0:	bf00      	nop
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	240036dc 	.word	0x240036dc
 800f3a8:	2400d444 	.word	0x2400d444

0800f3ac <StateEnable_Ext>:

static void StateEnable_Ext()
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	af00      	add	r7, sp, #0
	Ext_Routines(&msg_hdlr_task.routine);
 800f3b0:	4805      	ldr	r0, [pc, #20]	; (800f3c8 <StateEnable_Ext+0x1c>)
 800f3b2:	f000 fa55 	bl	800f860 <Ext_Routines>

	GUI_onoff = 0;
 800f3b6:	4b05      	ldr	r3, [pc, #20]	; (800f3cc <StateEnable_Ext+0x20>)
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	701a      	strb	r2, [r3, #0]
	GUI_command = 0;
 800f3bc:	4b04      	ldr	r3, [pc, #16]	; (800f3d0 <StateEnable_Ext+0x24>)
 800f3be:	2200      	movs	r2, #0
 800f3c0:	701a      	strb	r2, [r3, #0]
}
 800f3c2:	bf00      	nop
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	240036dc 	.word	0x240036dc
 800f3cc:	2400d3aa 	.word	0x2400d3aa
 800f3d0:	2400d3ab 	.word	0x2400d3ab

0800f3d4 <StateError_Run>:

static void StateError_Run()
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	af00      	add	r7, sp, #0

}
 800f3d8:	bf00      	nop
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
	...

0800f3e4 <Init_Msg_Hdlr>:
 |_|  |_\__,_|_|_||_|
                     
*/

void Init_Msg_Hdlr()
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b098      	sub	sp, #96	; 0x60
 800f3e8:	af02      	add	r7, sp, #8
	node_id = NODE_ID_LA;
 800f3ea:	4b8d      	ldr	r3, [pc, #564]	; (800f620 <Init_Msg_Hdlr+0x23c>)
 800f3ec:	2206      	movs	r2, #6
 800f3ee:	701a      	strb	r2, [r3, #0]
    ori_node = 0x00;
 800f3f0:	4b8c      	ldr	r3, [pc, #560]	; (800f624 <Init_Msg_Hdlr+0x240>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	701a      	strb	r2, [r3, #0]

    uint16_t t_mask = 0x00F;
 800f3f6:	230f      	movs	r3, #15
 800f3f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    uint32_t t_filter1 = 0;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t t_filter2 = NODE_ID_LA;
 800f400:	2306      	movs	r3, #6
 800f402:	64fb      	str	r3, [r7, #76]	; 0x4c

    /*Communication Init*/
//    comm_type = Init_IOIF_USB();
    comm_type = e_FDCAN;
 800f404:	4b88      	ldr	r3, [pc, #544]	; (800f628 <Init_Msg_Hdlr+0x244>)
 800f406:	2200      	movs	r2, #0
 800f408:	701a      	strb	r2, [r3, #0]

    if(comm_type == e_FDCAN){
 800f40a:	4b87      	ldr	r3, [pc, #540]	; (800f628 <Init_Msg_Hdlr+0x244>)
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d106      	bne.n	800f420 <Init_Msg_Hdlr+0x3c>
    	Init_IOIF_Fdcan(t_mask, t_filter1, t_filter2);
 800f412:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f418:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fc fe8c 	bl	800c138 <Init_IOIF_Fdcan>
    }

    /*Task Init*/
    Init_Task(&msg_hdlr_task);
 800f420:	4882      	ldr	r0, [pc, #520]	; (800f62c <Init_Msg_Hdlr+0x248>)
 800f422:	f000 fbd7 	bl	800fbd4 <Init_Task>

	/* State Definition */
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Off,      StateOff_Ent,       NULL,    			NULL,   				 true);
 800f426:	1d38      	adds	r0, r7, #4
 800f428:	2300      	movs	r3, #0
 800f42a:	2200      	movs	r2, #0
 800f42c:	4980      	ldr	r1, [pc, #512]	; (800f630 <Init_Msg_Hdlr+0x24c>)
 800f42e:	f000 faf1 	bl	800fa14 <Create_State_Entity>
 800f432:	2301      	movs	r3, #1
 800f434:	9301      	str	r3, [sp, #4]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	9300      	str	r3, [sp, #0]
 800f43a:	1d3b      	adds	r3, r7, #4
 800f43c:	cb0c      	ldmia	r3, {r2, r3}
 800f43e:	2100      	movs	r1, #0
 800f440:	487a      	ldr	r0, [pc, #488]	; (800f62c <Init_Msg_Hdlr+0x248>)
 800f442:	f000 fbe6 	bl	800fc12 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Standby,  StateStandby_Ent,   StateStandby_Run,	StateStandby_Ext,   	false);
 800f446:	f107 0010 	add.w	r0, r7, #16
 800f44a:	4b7a      	ldr	r3, [pc, #488]	; (800f634 <Init_Msg_Hdlr+0x250>)
 800f44c:	4a7a      	ldr	r2, [pc, #488]	; (800f638 <Init_Msg_Hdlr+0x254>)
 800f44e:	497b      	ldr	r1, [pc, #492]	; (800f63c <Init_Msg_Hdlr+0x258>)
 800f450:	f000 fae0 	bl	800fa14 <Create_State_Entity>
 800f454:	2300      	movs	r3, #0
 800f456:	9301      	str	r3, [sp, #4]
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	f107 0310 	add.w	r3, r7, #16
 800f460:	cb0c      	ldmia	r3, {r2, r3}
 800f462:	2101      	movs	r1, #1
 800f464:	4871      	ldr	r0, [pc, #452]	; (800f62c <Init_Msg_Hdlr+0x248>)
 800f466:	f000 fbd4 	bl	800fc12 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Enable,   StateEnable_Ent,   	StateEnable_Run, 	StateEnable_Ext,   		false);
 800f46a:	f107 001c 	add.w	r0, r7, #28
 800f46e:	4b74      	ldr	r3, [pc, #464]	; (800f640 <Init_Msg_Hdlr+0x25c>)
 800f470:	4a74      	ldr	r2, [pc, #464]	; (800f644 <Init_Msg_Hdlr+0x260>)
 800f472:	4975      	ldr	r1, [pc, #468]	; (800f648 <Init_Msg_Hdlr+0x264>)
 800f474:	f000 face 	bl	800fa14 <Create_State_Entity>
 800f478:	2300      	movs	r3, #0
 800f47a:	9301      	str	r3, [sp, #4]
 800f47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	f107 031c 	add.w	r3, r7, #28
 800f484:	cb0c      	ldmia	r3, {r2, r3}
 800f486:	2102      	movs	r1, #2
 800f488:	4868      	ldr	r0, [pc, #416]	; (800f62c <Init_Msg_Hdlr+0x248>)
 800f48a:	f000 fbc2 	bl	800fc12 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Error,    NULL,   			StateError_Run,    	NULL,   				false);
 800f48e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f492:	2300      	movs	r3, #0
 800f494:	4a6d      	ldr	r2, [pc, #436]	; (800f64c <Init_Msg_Hdlr+0x268>)
 800f496:	2100      	movs	r1, #0
 800f498:	f000 fabc 	bl	800fa14 <Create_State_Entity>
 800f49c:	2300      	movs	r3, #0
 800f49e:	9301      	str	r3, [sp, #4]
 800f4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4a8:	cb0c      	ldmia	r3, {r2, r3}
 800f4aa:	2103      	movs	r1, #3
 800f4ac:	485f      	ldr	r0, [pc, #380]	; (800f62c <Init_Msg_Hdlr+0x248>)
 800f4ae:	f000 fbb0 	bl	800fc12 <Set_Task_State_Entity>

    TASK_CREATE_ROUTINE(&msg_hdlr_task,  ROUTINE_ID_MSG_PDO_SEND, 			NULL, Send_PDO, 		Ext_Send_PDO);
 800f4b2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f4b6:	4b66      	ldr	r3, [pc, #408]	; (800f650 <Init_Msg_Hdlr+0x26c>)
 800f4b8:	4a66      	ldr	r2, [pc, #408]	; (800f654 <Init_Msg_Hdlr+0x270>)
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	f000 f906 	bl	800f6cc <Create_Routine_Entity>
 800f4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c2:	9300      	str	r3, [sp, #0]
 800f4c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4c8:	cb0c      	ldmia	r3, {r2, r3}
 800f4ca:	2100      	movs	r1, #0
 800f4cc:	4857      	ldr	r0, [pc, #348]	; (800f62c <Init_Msg_Hdlr+0x248>)
 800f4ce:	f000 fbc9 	bl	800fc64 <Set_Task_Routine_Entity>
    TASK_CREATE_ROUTINE(&msg_hdlr_task,  ROUTINE_ID_MSG_PDO_DUMMY_TEST, 	NULL, Set_PDO_Dummy, 	NULL);
 800f4d2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	4a5f      	ldr	r2, [pc, #380]	; (800f658 <Init_Msg_Hdlr+0x274>)
 800f4da:	2100      	movs	r1, #0
 800f4dc:	f000 f8f6 	bl	800f6cc <Create_Routine_Entity>
 800f4e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4e2:	9300      	str	r3, [sp, #0]
 800f4e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f4e8:	cb0c      	ldmia	r3, {r2, r3}
 800f4ea:	2101      	movs	r1, #1
 800f4ec:	484f      	ldr	r0, [pc, #316]	; (800f62c <Init_Msg_Hdlr+0x248>)
 800f4ee:	f000 fbb9 	bl	800fc64 <Set_Task_Routine_Entity>

	/* Data Object Definition */
    Create_DOD(TASK_ID_MSG);
 800f4f2:	2002      	movs	r0, #2
 800f4f4:	f7fe fc4e 	bl	800dd94 <Create_DOD>

	MSG_COMMON_SDO_CREATE(TASK_ID_MSG)
 800f4f8:	4b58      	ldr	r3, [pc, #352]	; (800f65c <Init_Msg_Hdlr+0x278>)
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	2002      	movs	r0, #2
 800f500:	f7fe fd1a 	bl	800df38 <Create_SDO>
 800f504:	4b56      	ldr	r3, [pc, #344]	; (800f660 <Init_Msg_Hdlr+0x27c>)
 800f506:	2201      	movs	r2, #1
 800f508:	2101      	movs	r1, #1
 800f50a:	2002      	movs	r0, #2
 800f50c:	f7fe fd14 	bl	800df38 <Create_SDO>
 800f510:	4b54      	ldr	r3, [pc, #336]	; (800f664 <Init_Msg_Hdlr+0x280>)
 800f512:	2201      	movs	r2, #1
 800f514:	2102      	movs	r1, #2
 800f516:	2002      	movs	r0, #2
 800f518:	f7fe fd0e 	bl	800df38 <Create_SDO>
 800f51c:	4b52      	ldr	r3, [pc, #328]	; (800f668 <Init_Msg_Hdlr+0x284>)
 800f51e:	2201      	movs	r2, #1
 800f520:	2103      	movs	r1, #3
 800f522:	2002      	movs	r0, #2
 800f524:	f7fe fd08 	bl	800df38 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_PDO_LIST, 				e_UInt16, Set_Send_PDO_List);
 800f528:	4b50      	ldr	r3, [pc, #320]	; (800f66c <Init_Msg_Hdlr+0x288>)
 800f52a:	2202      	movs	r2, #2
 800f52c:	2104      	movs	r1, #4
 800f52e:	2002      	movs	r0, #2
 800f530:	f7fe fd02 	bl	800df38 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_MS_ENUM,  				e_UInt8, Set_MS_Enum);
 800f534:	4b4e      	ldr	r3, [pc, #312]	; (800f670 <Init_Msg_Hdlr+0x28c>)
 800f536:	2201      	movs	r2, #1
 800f538:	2105      	movs	r1, #5
 800f53a:	2002      	movs	r0, #2
 800f53c:	f7fe fcfc 	bl	800df38 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_GUI_COMM_ONOFF,  		e_UInt8, Set_GUI_COMM_OnOff);
 800f540:	4b4c      	ldr	r3, [pc, #304]	; (800f674 <Init_Msg_Hdlr+0x290>)
 800f542:	2201      	movs	r2, #1
 800f544:	2106      	movs	r1, #6
 800f546:	2002      	movs	r0, #2
 800f548:	f7fe fcf6 	bl	800df38 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_GUI_COMM_COMMAND,  		e_UInt8, Set_GUI_COMM_Command);
 800f54c:	4b4a      	ldr	r3, [pc, #296]	; (800f678 <Init_Msg_Hdlr+0x294>)
 800f54e:	2201      	movs	r2, #1
 800f550:	2107      	movs	r1, #7
 800f552:	2002      	movs	r0, #2
 800f554:	f7fe fcf0 	bl	800df38 <Create_SDO>

	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST1, 					e_Int32, 1, &test_dummy[0]);
 800f558:	4b48      	ldr	r3, [pc, #288]	; (800f67c <Init_Msg_Hdlr+0x298>)
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	2301      	movs	r3, #1
 800f55e:	2206      	movs	r2, #6
 800f560:	2100      	movs	r1, #0
 800f562:	2002      	movs	r0, #2
 800f564:	f7fe fc2e 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST2, 					e_Int32, 1, &test_dummy[1]);
 800f568:	4b45      	ldr	r3, [pc, #276]	; (800f680 <Init_Msg_Hdlr+0x29c>)
 800f56a:	9300      	str	r3, [sp, #0]
 800f56c:	2301      	movs	r3, #1
 800f56e:	2206      	movs	r2, #6
 800f570:	2101      	movs	r1, #1
 800f572:	2002      	movs	r0, #2
 800f574:	f7fe fc26 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST3, 					e_Int32, 1, &test_dummy[2]);
 800f578:	4b42      	ldr	r3, [pc, #264]	; (800f684 <Init_Msg_Hdlr+0x2a0>)
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	2301      	movs	r3, #1
 800f57e:	2206      	movs	r2, #6
 800f580:	2102      	movs	r1, #2
 800f582:	2002      	movs	r0, #2
 800f584:	f7fe fc1e 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST4, 					e_Int32, 1, &test_dummy[3]);
 800f588:	4b3f      	ldr	r3, [pc, #252]	; (800f688 <Init_Msg_Hdlr+0x2a4>)
 800f58a:	9300      	str	r3, [sp, #0]
 800f58c:	2301      	movs	r3, #1
 800f58e:	2206      	movs	r2, #6
 800f590:	2103      	movs	r1, #3
 800f592:	2002      	movs	r0, #2
 800f594:	f7fe fc16 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST5, 					e_Int32, 1, &test_dummy[4]);
 800f598:	4b3c      	ldr	r3, [pc, #240]	; (800f68c <Init_Msg_Hdlr+0x2a8>)
 800f59a:	9300      	str	r3, [sp, #0]
 800f59c:	2301      	movs	r3, #1
 800f59e:	2206      	movs	r2, #6
 800f5a0:	2104      	movs	r1, #4
 800f5a2:	2002      	movs	r0, #2
 800f5a4:	f7fe fc0e 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST6, 					e_Int32, 1, &test_dummy[5]);
 800f5a8:	4b39      	ldr	r3, [pc, #228]	; (800f690 <Init_Msg_Hdlr+0x2ac>)
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	2206      	movs	r2, #6
 800f5b0:	2105      	movs	r1, #5
 800f5b2:	2002      	movs	r0, #2
 800f5b4:	f7fe fc06 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST7, 					e_Int32, 1, &test_dummy[6]);
 800f5b8:	4b36      	ldr	r3, [pc, #216]	; (800f694 <Init_Msg_Hdlr+0x2b0>)
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	2301      	movs	r3, #1
 800f5be:	2206      	movs	r2, #6
 800f5c0:	2106      	movs	r1, #6
 800f5c2:	2002      	movs	r0, #2
 800f5c4:	f7fe fbfe 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST8, 					e_Int32, 1, &test_dummy[7]);
 800f5c8:	4b33      	ldr	r3, [pc, #204]	; (800f698 <Init_Msg_Hdlr+0x2b4>)
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	2206      	movs	r2, #6
 800f5d0:	2107      	movs	r1, #7
 800f5d2:	2002      	movs	r0, #2
 800f5d4:	f7fe fbf6 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST9, 					e_Int32, 1, &test_dummy[8]);
 800f5d8:	4b30      	ldr	r3, [pc, #192]	; (800f69c <Init_Msg_Hdlr+0x2b8>)
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	2301      	movs	r3, #1
 800f5de:	2206      	movs	r2, #6
 800f5e0:	2108      	movs	r1, #8
 800f5e2:	2002      	movs	r0, #2
 800f5e4:	f7fe fbee 	bl	800ddc4 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST10, 					e_Int32, 1, &test_dummy[9]);
 800f5e8:	4b2d      	ldr	r3, [pc, #180]	; (800f6a0 <Init_Msg_Hdlr+0x2bc>)
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	2206      	movs	r2, #6
 800f5f0:	2109      	movs	r1, #9
 800f5f2:	2002      	movs	r0, #2
 800f5f4:	f7fe fbe6 	bl	800ddc4 <Create_PDO>

	/* Callback Allocation */
    if(comm_type == e_FDCAN){
 800f5f8:	4b0b      	ldr	r3, [pc, #44]	; (800f628 <Init_Msg_Hdlr+0x244>)
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d102      	bne.n	800f606 <Init_Msg_Hdlr+0x222>
    	fdcan_rx_callback_ptr = Fdcan_Rx_Hdlr;
 800f600:	4b28      	ldr	r3, [pc, #160]	; (800f6a4 <Init_Msg_Hdlr+0x2c0>)
 800f602:	4a29      	ldr	r2, [pc, #164]	; (800f6a8 <Init_Msg_Hdlr+0x2c4>)
 800f604:	601a      	str	r2, [r3, #0]
    } else {
//    	ioif_usb_rx_callback_ptr = USB_Rx_Hdlr;
    }

    Initial_ICM2(&ads2);
 800f606:	4829      	ldr	r0, [pc, #164]	; (800f6ac <Init_Msg_Hdlr+0x2c8>)
 800f608:	f7ff fd32 	bl	800f070 <Initial_ICM2>

    /* Start */
    if(Start_TIM6()>0){
 800f60c:	f7fc fe92 	bl	800c334 <Start_TIM6>
        //TODO: ERROR PROCESS
    }
    ioif_tim6_callback_ptr = Run_Msg_Hdlr;
 800f610:	4b27      	ldr	r3, [pc, #156]	; (800f6b0 <Init_Msg_Hdlr+0x2cc>)
 800f612:	4a28      	ldr	r2, [pc, #160]	; (800f6b4 <Init_Msg_Hdlr+0x2d0>)
 800f614:	601a      	str	r2, [r3, #0]
}
 800f616:	bf00      	nop
 800f618:	3758      	adds	r7, #88	; 0x58
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	2400d3b8 	.word	0x2400d3b8
 800f624:	2400d3b9 	.word	0x2400d3b9
 800f628:	2400d3a9 	.word	0x2400d3a9
 800f62c:	2400369c 	.word	0x2400369c
 800f630:	0800f31d 	.word	0x0800f31d
 800f634:	0800f361 	.word	0x0800f361
 800f638:	0800f353 	.word	0x0800f353
 800f63c:	0800f345 	.word	0x0800f345
 800f640:	0800f3ad 	.word	0x0800f3ad
 800f644:	0800f38d 	.word	0x0800f38d
 800f648:	0800f371 	.word	0x0800f371
 800f64c:	0800f3d5 	.word	0x0800f3d5
 800f650:	0800eaf5 	.word	0x0800eaf5
 800f654:	0800ea61 	.word	0x0800ea61
 800f658:	0800eb19 	.word	0x0800eb19
 800f65c:	0800f08d 	.word	0x0800f08d
 800f660:	0800f0c5 	.word	0x0800f0c5
 800f664:	0800f0fd 	.word	0x0800f0fd
 800f668:	0800f175 	.word	0x0800f175
 800f66c:	0800f22d 	.word	0x0800f22d
 800f670:	0800f28d 	.word	0x0800f28d
 800f674:	0800f2bd 	.word	0x0800f2bd
 800f678:	0800f2ed 	.word	0x0800f2ed
 800f67c:	2400d448 	.word	0x2400d448
 800f680:	2400d44c 	.word	0x2400d44c
 800f684:	2400d450 	.word	0x2400d450
 800f688:	2400d454 	.word	0x2400d454
 800f68c:	2400d458 	.word	0x2400d458
 800f690:	2400d45c 	.word	0x2400d45c
 800f694:	2400d460 	.word	0x2400d460
 800f698:	2400d464 	.word	0x2400d464
 800f69c:	2400d468 	.word	0x2400d468
 800f6a0:	2400d46c 	.word	0x2400d46c
 800f6a4:	2400064c 	.word	0x2400064c
 800f6a8:	0800efc1 	.word	0x0800efc1
 800f6ac:	2400d470 	.word	0x2400d470
 800f6b0:	24000710 	.word	0x24000710
 800f6b4:	0800f6b9 	.word	0x0800f6b9

0800f6b8 <Run_Msg_Hdlr>:

void Run_Msg_Hdlr()
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	af00      	add	r7, sp, #0
//	uint32_t msg_hdlr_loop_time_cnt_1 = DWT->CYCCNT;

	Run_Task(&msg_hdlr_task);
 800f6bc:	4802      	ldr	r0, [pc, #8]	; (800f6c8 <Run_Msg_Hdlr+0x10>)
 800f6be:	f000 fa9b 	bl	800fbf8 <Run_Task>

//	uint32_t msg_hdlr_loop_time_cnt_2 = DWT->CYCCNT;
//	msg_hdlr_loop_time_us = (msg_hdlr_loop_time_cnt_2 - msg_hdlr_loop_time_cnt_1)/480; // microsecond
}
 800f6c2:	bf00      	nop
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	2400369c 	.word	0x2400369c

0800f6cc <Create_Routine_Entity>:
#include <routine.h>

// Routine Entity
RoutineEntityStruct Create_Routine_Entity(RoutineFncPtr t_ent, RoutineFncPtr t_run, RoutineFncPtr t_ext)
{
 800f6cc:	b490      	push	{r4, r7}
 800f6ce:	b088      	sub	sp, #32
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	603b      	str	r3, [r7, #0]
    RoutineEntityStruct t_res;
    t_res.on_enter = t_ent;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	617b      	str	r3, [r7, #20]
    t_res.on_run = t_run;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	61bb      	str	r3, [r7, #24]
    t_res.on_exit = t_ext;
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	61fb      	str	r3, [r7, #28]
    return t_res;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	461c      	mov	r4, r3
 800f6ea:	f107 0314 	add.w	r3, r7, #20
 800f6ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f6f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f6f6:	68f8      	ldr	r0, [r7, #12]
 800f6f8:	3720      	adds	r7, #32
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bc90      	pop	{r4, r7}
 800f6fe:	4770      	bx	lr

0800f700 <Init_Routine>:


// DriveRoutine Interface
void Init_Routine(RoutineStruct* t_routine)
{
 800f700:	b480      	push	{r7}
 800f702:	b085      	sub	sp, #20
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800f708:	2300      	movs	r3, #0
 800f70a:	60fb      	str	r3, [r7, #12]
 800f70c:	e025      	b.n	800f75a <Init_Routine+0x5a>
    	t_routine->id[i] = 0;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	2100      	movs	r1, #0
 800f714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	t_routine->entities[i].on_enter = NULL;
 800f718:	6879      	ldr	r1, [r7, #4]
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	4613      	mov	r3, r2
 800f71e:	005b      	lsls	r3, r3, #1
 800f720:	4413      	add	r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	440b      	add	r3, r1
 800f726:	3324      	adds	r3, #36	; 0x24
 800f728:	2200      	movs	r2, #0
 800f72a:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_run = NULL;
 800f72c:	6879      	ldr	r1, [r7, #4]
 800f72e:	68fa      	ldr	r2, [r7, #12]
 800f730:	4613      	mov	r3, r2
 800f732:	005b      	lsls	r3, r3, #1
 800f734:	4413      	add	r3, r2
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	440b      	add	r3, r1
 800f73a:	3328      	adds	r3, #40	; 0x28
 800f73c:	2200      	movs	r2, #0
 800f73e:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_exit = NULL;
 800f740:	6879      	ldr	r1, [r7, #4]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	4613      	mov	r3, r2
 800f746:	005b      	lsls	r3, r3, #1
 800f748:	4413      	add	r3, r2
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	440b      	add	r3, r1
 800f74e:	332c      	adds	r3, #44	; 0x2c
 800f750:	2200      	movs	r2, #0
 800f752:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	3301      	adds	r3, #1
 800f758:	60fb      	str	r3, [r7, #12]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2b07      	cmp	r3, #7
 800f75e:	ddd6      	ble.n	800f70e <Init_Routine+0xe>
    }
    t_routine->n_id = 0;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	621a      	str	r2, [r3, #32]
}
 800f766:	bf00      	nop
 800f768:	3714      	adds	r7, #20
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
	...

0800f774 <Ent_Routines>:

int Ent_Routines(RoutineStruct* t_routine)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
	static int t_res = 0;
	static int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800f77c:	2300      	movs	r3, #0
 800f77e:	60fb      	str	r3, [r7, #12]
 800f780:	e029      	b.n	800f7d6 <Ent_Routines+0x62>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f78a:	4a18      	ldr	r2, [pc, #96]	; (800f7ec <Ent_Routines+0x78>)
 800f78c:	6013      	str	r3, [r2, #0]
		if (t_routine->entities[t_id].on_enter) {
 800f78e:	4b17      	ldr	r3, [pc, #92]	; (800f7ec <Ent_Routines+0x78>)
 800f790:	681a      	ldr	r2, [r3, #0]
 800f792:	6879      	ldr	r1, [r7, #4]
 800f794:	4613      	mov	r3, r2
 800f796:	005b      	lsls	r3, r3, #1
 800f798:	4413      	add	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	440b      	add	r3, r1
 800f79e:	3324      	adds	r3, #36	; 0x24
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00d      	beq.n	800f7c2 <Ent_Routines+0x4e>
			t_res = t_routine->entities[t_id].on_enter();
 800f7a6:	4b11      	ldr	r3, [pc, #68]	; (800f7ec <Ent_Routines+0x78>)
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	6879      	ldr	r1, [r7, #4]
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	005b      	lsls	r3, r3, #1
 800f7b0:	4413      	add	r3, r2
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	440b      	add	r3, r1
 800f7b6:	3324      	adds	r3, #36	; 0x24
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4798      	blx	r3
 800f7bc:	4603      	mov	r3, r0
 800f7be:	4a0c      	ldr	r2, [pc, #48]	; (800f7f0 <Ent_Routines+0x7c>)
 800f7c0:	6013      	str	r3, [r2, #0]
		}
        if (t_res < 0) {
 800f7c2:	4b0b      	ldr	r3, [pc, #44]	; (800f7f0 <Ent_Routines+0x7c>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	da02      	bge.n	800f7d0 <Ent_Routines+0x5c>
            return t_res;
 800f7ca:	4b09      	ldr	r3, [pc, #36]	; (800f7f0 <Ent_Routines+0x7c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	e008      	b.n	800f7e2 <Ent_Routines+0x6e>
    for (int i = 0; i < t_routine->n_id; i++){
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	60fb      	str	r3, [r7, #12]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a1a      	ldr	r2, [r3, #32]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d8d0      	bhi.n	800f782 <Ent_Routines+0xe>
        }
    }
    return 0;
 800f7e0:	2300      	movs	r3, #0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	2400d47c 	.word	0x2400d47c
 800f7f0:	2400d480 	.word	0x2400d480

0800f7f4 <Run_Routines>:

int Run_Routines(RoutineStruct* t_routine)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b086      	sub	sp, #24
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
	int t_res = 0;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	617b      	str	r3, [r7, #20]
	int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800f800:	2300      	movs	r3, #0
 800f802:	613b      	str	r3, [r7, #16]
 800f804:	e022      	b.n	800f84c <Run_Routines+0x58>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	693a      	ldr	r2, [r7, #16]
 800f80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f80e:	60fb      	str	r3, [r7, #12]
		if (t_routine->entities[t_id].on_run) {
 800f810:	6879      	ldr	r1, [r7, #4]
 800f812:	68fa      	ldr	r2, [r7, #12]
 800f814:	4613      	mov	r3, r2
 800f816:	005b      	lsls	r3, r3, #1
 800f818:	4413      	add	r3, r2
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	440b      	add	r3, r1
 800f81e:	3328      	adds	r3, #40	; 0x28
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00a      	beq.n	800f83c <Run_Routines+0x48>
			t_res = t_routine->entities[t_id].on_run();
 800f826:	6879      	ldr	r1, [r7, #4]
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	4613      	mov	r3, r2
 800f82c:	005b      	lsls	r3, r3, #1
 800f82e:	4413      	add	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	440b      	add	r3, r1
 800f834:	3328      	adds	r3, #40	; 0x28
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4798      	blx	r3
 800f83a:	6178      	str	r0, [r7, #20]
		}
        if (t_res < 0) {
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	da01      	bge.n	800f846 <Run_Routines+0x52>
            return t_res;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	e008      	b.n	800f858 <Run_Routines+0x64>
    for (int i = 0; i < t_routine->n_id; i++){
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	3301      	adds	r3, #1
 800f84a:	613b      	str	r3, [r7, #16]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6a1a      	ldr	r2, [r3, #32]
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	429a      	cmp	r2, r3
 800f854:	d8d7      	bhi.n	800f806 <Run_Routines+0x12>
        }
    }
    return 0;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3718      	adds	r7, #24
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <Ext_Routines>:

int Ext_Routines(RoutineStruct* t_routine)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
	static int t_res = 0;
	static int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800f868:	2300      	movs	r3, #0
 800f86a:	60fb      	str	r3, [r7, #12]
 800f86c:	e029      	b.n	800f8c2 <Ext_Routines+0x62>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	68fa      	ldr	r2, [r7, #12]
 800f872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f876:	4a18      	ldr	r2, [pc, #96]	; (800f8d8 <Ext_Routines+0x78>)
 800f878:	6013      	str	r3, [r2, #0]
		if (t_routine->entities[t_id].on_exit) {
 800f87a:	4b17      	ldr	r3, [pc, #92]	; (800f8d8 <Ext_Routines+0x78>)
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	6879      	ldr	r1, [r7, #4]
 800f880:	4613      	mov	r3, r2
 800f882:	005b      	lsls	r3, r3, #1
 800f884:	4413      	add	r3, r2
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	440b      	add	r3, r1
 800f88a:	332c      	adds	r3, #44	; 0x2c
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00d      	beq.n	800f8ae <Ext_Routines+0x4e>
			t_res = t_routine->entities[t_id].on_exit();
 800f892:	4b11      	ldr	r3, [pc, #68]	; (800f8d8 <Ext_Routines+0x78>)
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	6879      	ldr	r1, [r7, #4]
 800f898:	4613      	mov	r3, r2
 800f89a:	005b      	lsls	r3, r3, #1
 800f89c:	4413      	add	r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	440b      	add	r3, r1
 800f8a2:	332c      	adds	r3, #44	; 0x2c
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4798      	blx	r3
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	4a0c      	ldr	r2, [pc, #48]	; (800f8dc <Ext_Routines+0x7c>)
 800f8ac:	6013      	str	r3, [r2, #0]
		}
        if (t_res < 0) {
 800f8ae:	4b0b      	ldr	r3, [pc, #44]	; (800f8dc <Ext_Routines+0x7c>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	da02      	bge.n	800f8bc <Ext_Routines+0x5c>
            return t_res;
 800f8b6:	4b09      	ldr	r3, [pc, #36]	; (800f8dc <Ext_Routines+0x7c>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	e008      	b.n	800f8ce <Ext_Routines+0x6e>
    for (int i = 0; i < t_routine->n_id; i++){
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	60fb      	str	r3, [r7, #12]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a1a      	ldr	r2, [r3, #32]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d8d0      	bhi.n	800f86e <Ext_Routines+0xe>
        }
    }
    return 0;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	2400d484 	.word	0x2400d484
 800f8dc:	2400d488 	.word	0x2400d488

0800f8e0 <Clear_Routines>:

void Clear_Routines(RoutineStruct* t_routine)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	e008      	b.n	800f900 <Clear_Routines+0x20>
    	t_routine->id[i] = ROUTINE_DEFAULT_ID;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	f04f 31ff 	mov.w	r1, #4294967295
 800f8f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	60fb      	str	r3, [r7, #12]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2b07      	cmp	r3, #7
 800f904:	ddf3      	ble.n	800f8ee <Clear_Routines+0xe>
    }
    t_routine->n_id = 0;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	621a      	str	r2, [r3, #32]
}
 800f90c:	bf00      	nop
 800f90e:	3714      	adds	r7, #20
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr

0800f918 <Push_Routine>:

int Push_Routine(RoutineStruct* t_routine, uint8_t t_id)
{
 800f918:	b480      	push	{r7}
 800f91a:	b085      	sub	sp, #20
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	460b      	mov	r3, r1
 800f922:	70fb      	strb	r3, [r7, #3]
    if (t_routine->n_id >= ROUTINE_MAX_ENTITIES) {
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6a1b      	ldr	r3, [r3, #32]
 800f928:	2b07      	cmp	r3, #7
 800f92a:	d902      	bls.n	800f932 <Push_Routine+0x1a>
        return -1;
 800f92c:	f04f 33ff 	mov.w	r3, #4294967295
 800f930:	e01d      	b.n	800f96e <Push_Routine+0x56>
    }

    for(int i = 0; i < t_routine->n_id; i++){
 800f932:	2300      	movs	r3, #0
 800f934:	60fb      	str	r3, [r7, #12]
 800f936:	e00b      	b.n	800f950 <Push_Routine+0x38>
    	if(t_routine->id[i] == t_id){return 0;}
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f940:	78fb      	ldrb	r3, [r7, #3]
 800f942:	429a      	cmp	r2, r3
 800f944:	d101      	bne.n	800f94a <Push_Routine+0x32>
 800f946:	2300      	movs	r3, #0
 800f948:	e011      	b.n	800f96e <Push_Routine+0x56>
    for(int i = 0; i < t_routine->n_id; i++){
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	3301      	adds	r3, #1
 800f94e:	60fb      	str	r3, [r7, #12]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a1a      	ldr	r2, [r3, #32]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	429a      	cmp	r2, r3
 800f958:	d8ee      	bhi.n	800f938 <Push_Routine+0x20>
    }
    
    t_routine->id[t_routine->n_id++] = t_id;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6a1b      	ldr	r3, [r3, #32]
 800f95e:	1c59      	adds	r1, r3, #1
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	6211      	str	r1, [r2, #32]
 800f964:	78f9      	ldrb	r1, [r7, #3]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 0;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr
	...

0800f97c <Transition_Map>:

#include "state_machine.h"

// State & Transition Map
static StateEnum Transition_Map(StateEnum t_curr, StateEnum t_cmd)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	4603      	mov	r3, r0
 800f984:	460a      	mov	r2, r1
 800f986:	71fb      	strb	r3, [r7, #7]
 800f988:	4613      	mov	r3, r2
 800f98a:	71bb      	strb	r3, [r7, #6]
    if (t_curr == t_cmd) {
 800f98c:	79fa      	ldrb	r2, [r7, #7]
 800f98e:	79bb      	ldrb	r3, [r7, #6]
 800f990:	429a      	cmp	r2, r3
 800f992:	d101      	bne.n	800f998 <Transition_Map+0x1c>
        return t_curr;
 800f994:	79fb      	ldrb	r3, [r7, #7]
 800f996:	e037      	b.n	800fa08 <Transition_Map+0x8c>
    }

    switch (t_curr) {
 800f998:	79fb      	ldrb	r3, [r7, #7]
 800f99a:	2b03      	cmp	r3, #3
 800f99c:	d82a      	bhi.n	800f9f4 <Transition_Map+0x78>
 800f99e:	a201      	add	r2, pc, #4	; (adr r2, 800f9a4 <Transition_Map+0x28>)
 800f9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a4:	0800f9b5 	.word	0x0800f9b5
 800f9a8:	0800f9bf 	.word	0x0800f9bf
 800f9ac:	0800f9cf 	.word	0x0800f9cf
 800f9b0:	0800f9e5 	.word	0x0800f9e5
    /*  |- From State -|  |---------------------------------- To State ----------------------------------| |- If valid -| |else| */
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 800f9b4:	79bb      	ldrb	r3, [r7, #6]
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d11e      	bne.n	800f9f8 <Transition_Map+0x7c>
 800f9ba:	79bb      	ldrb	r3, [r7, #6]
 800f9bc:	e024      	b.n	800fa08 <Transition_Map+0x8c>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 800f9be:	79bb      	ldrb	r3, [r7, #6]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d002      	beq.n	800f9ca <Transition_Map+0x4e>
 800f9c4:	79bb      	ldrb	r3, [r7, #6]
 800f9c6:	2b02      	cmp	r3, #2
 800f9c8:	d118      	bne.n	800f9fc <Transition_Map+0x80>
 800f9ca:	79bb      	ldrb	r3, [r7, #6]
 800f9cc:	e01c      	b.n	800fa08 <Transition_Map+0x8c>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 800f9ce:	79bb      	ldrb	r3, [r7, #6]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d005      	beq.n	800f9e0 <Transition_Map+0x64>
 800f9d4:	79bb      	ldrb	r3, [r7, #6]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d002      	beq.n	800f9e0 <Transition_Map+0x64>
 800f9da:	79bb      	ldrb	r3, [r7, #6]
 800f9dc:	2b03      	cmp	r3, #3
 800f9de:	d10f      	bne.n	800fa00 <Transition_Map+0x84>
 800f9e0:	79bb      	ldrb	r3, [r7, #6]
 800f9e2:	e011      	b.n	800fa08 <Transition_Map+0x8c>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 800f9e4:	79bb      	ldrb	r3, [r7, #6]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d002      	beq.n	800f9f0 <Transition_Map+0x74>
 800f9ea:	79bb      	ldrb	r3, [r7, #6]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d109      	bne.n	800fa04 <Transition_Map+0x88>
 800f9f0:	79bb      	ldrb	r3, [r7, #6]
 800f9f2:	e009      	b.n	800fa08 <Transition_Map+0x8c>
    default: break;
 800f9f4:	bf00      	nop
 800f9f6:	e006      	b.n	800fa06 <Transition_Map+0x8a>
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 800f9f8:	bf00      	nop
 800f9fa:	e004      	b.n	800fa06 <Transition_Map+0x8a>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 800f9fc:	bf00      	nop
 800f9fe:	e002      	b.n	800fa06 <Transition_Map+0x8a>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 800fa00:	bf00      	nop
 800fa02:	e000      	b.n	800fa06 <Transition_Map+0x8a>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 800fa04:	bf00      	nop
    }

    return t_curr;
 800fa06:	79fb      	ldrb	r3, [r7, #7]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <Create_State_Entity>:


// State Functions
StateEntityStruct Create_State_Entity(StateFuncPtr t_ent, StateFuncPtr t_run, StateFuncPtr t_ext)
{
 800fa14:	b490      	push	{r4, r7}
 800fa16:	b088      	sub	sp, #32
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
 800fa20:	603b      	str	r3, [r7, #0]
    StateEntityStruct t_res;
    t_res.on_enter = t_ent;
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	617b      	str	r3, [r7, #20]
    t_res.on_run =   t_run;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	61bb      	str	r3, [r7, #24]
    t_res.on_exit =  t_ext;
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	61fb      	str	r3, [r7, #28]
    return t_res;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	461c      	mov	r4, r3
 800fa32:	f107 0314 	add.w	r3, r7, #20
 800fa36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fa3e:	68f8      	ldr	r0, [r7, #12]
 800fa40:	3720      	adds	r7, #32
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bc90      	pop	{r4, r7}
 800fa46:	4770      	bx	lr

0800fa48 <Init_State_Machine>:


// State Machine Interfaces
void Init_State_Machine(StateMachineStruct* t_sm)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 800fa50:	2300      	movs	r3, #0
 800fa52:	60fb      	str	r3, [r7, #12]
 800fa54:	e020      	b.n	800fa98 <Init_State_Machine+0x50>
    	t_sm->entity[i].on_enter = NULL;
 800fa56:	6879      	ldr	r1, [r7, #4]
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	005b      	lsls	r3, r3, #1
 800fa5e:	4413      	add	r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	440b      	add	r3, r1
 800fa64:	3304      	adds	r3, #4
 800fa66:	2200      	movs	r2, #0
 800fa68:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_run   = NULL;
 800fa6a:	6879      	ldr	r1, [r7, #4]
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	005b      	lsls	r3, r3, #1
 800fa72:	4413      	add	r3, r2
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	440b      	add	r3, r1
 800fa78:	3308      	adds	r3, #8
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_exit  = NULL;
 800fa7e:	6879      	ldr	r1, [r7, #4]
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	4613      	mov	r3, r2
 800fa84:	005b      	lsls	r3, r3, #1
 800fa86:	4413      	add	r3, r2
 800fa88:	009b      	lsls	r3, r3, #2
 800fa8a:	440b      	add	r3, r1
 800fa8c:	330c      	adds	r3, #12
 800fa8e:	2200      	movs	r2, #0
 800fa90:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	3301      	adds	r3, #1
 800fa96:	60fb      	str	r3, [r7, #12]
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2b03      	cmp	r3, #3
 800fa9c:	dddb      	ble.n	800fa56 <Init_State_Machine+0xe>
    }
    t_sm->entity_life_cycle = e_StateEntity_Ent;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2200      	movs	r2, #0
 800faa2:	709a      	strb	r2, [r3, #2]
}
 800faa4:	bf00      	nop
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <Run_State_Machine>:

void Run_State_Machine(StateMachineStruct* t_sm)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
    switch (t_sm->entity_life_cycle) {
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	789b      	ldrb	r3, [r3, #2]
 800fabc:	2b02      	cmp	r3, #2
 800fabe:	d041      	beq.n	800fb44 <Run_State_Machine+0x94>
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	dc5c      	bgt.n	800fb7e <Run_State_Machine+0xce>
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d002      	beq.n	800face <Run_State_Machine+0x1e>
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d021      	beq.n	800fb10 <Run_State_Machine+0x60>
        }
        t_sm->entity_life_cycle = e_StateEntity_Ent;
        break;

    default: // Invalid Lifecycle
        break;
 800facc:	e057      	b.n	800fb7e <Run_State_Machine+0xce>
        if (t_sm->entity[t_sm->curr_state].on_enter) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	4619      	mov	r1, r3
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	460b      	mov	r3, r1
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	440b      	add	r3, r1
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	4413      	add	r3, r2
 800fae0:	3304      	adds	r3, #4
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d00b      	beq.n	800fb00 <Run_State_Machine+0x50>
        	t_sm->entity[t_sm->curr_state].on_enter();
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	4619      	mov	r1, r3
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	460b      	mov	r3, r1
 800faf2:	005b      	lsls	r3, r3, #1
 800faf4:	440b      	add	r3, r1
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	4413      	add	r3, r2
 800fafa:	3304      	adds	r3, #4
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4798      	blx	r3
        if (t_sm->entity_life_cycle == e_StateEntity_Ent){
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	789b      	ldrb	r3, [r3, #2]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d13c      	bne.n	800fb82 <Run_State_Machine+0xd2>
        	t_sm->entity_life_cycle = e_StateEntity_Run;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	709a      	strb	r2, [r3, #2]
        break;
 800fb0e:	e038      	b.n	800fb82 <Run_State_Machine+0xd2>
        if (t_sm->entity[t_sm->curr_state].on_run) {
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	4619      	mov	r1, r3
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	460b      	mov	r3, r1
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	440b      	add	r3, r1
 800fb1e:	009b      	lsls	r3, r3, #2
 800fb20:	4413      	add	r3, r2
 800fb22:	3308      	adds	r3, #8
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d02d      	beq.n	800fb86 <Run_State_Machine+0xd6>
        	t_sm->entity[t_sm->curr_state].on_run();
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	4619      	mov	r1, r3
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	460b      	mov	r3, r1
 800fb34:	005b      	lsls	r3, r3, #1
 800fb36:	440b      	add	r3, r1
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	4413      	add	r3, r2
 800fb3c:	3308      	adds	r3, #8
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4798      	blx	r3
        break;
 800fb42:	e020      	b.n	800fb86 <Run_State_Machine+0xd6>
        if (t_sm->entity[t_sm->prev_state].on_exit) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	785b      	ldrb	r3, [r3, #1]
 800fb48:	4619      	mov	r1, r3
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	005b      	lsls	r3, r3, #1
 800fb50:	440b      	add	r3, r1
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	4413      	add	r3, r2
 800fb56:	330c      	adds	r3, #12
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d00b      	beq.n	800fb76 <Run_State_Machine+0xc6>
        	t_sm->entity[t_sm->prev_state].on_exit();
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	785b      	ldrb	r3, [r3, #1]
 800fb62:	4619      	mov	r1, r3
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	460b      	mov	r3, r1
 800fb68:	005b      	lsls	r3, r3, #1
 800fb6a:	440b      	add	r3, r1
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	4413      	add	r3, r2
 800fb70:	330c      	adds	r3, #12
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4798      	blx	r3
        t_sm->entity_life_cycle = e_StateEntity_Ent;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	709a      	strb	r2, [r3, #2]
        break;
 800fb7c:	e004      	b.n	800fb88 <Run_State_Machine+0xd8>
        break;
 800fb7e:	bf00      	nop
 800fb80:	e002      	b.n	800fb88 <Run_State_Machine+0xd8>
        break;
 800fb82:	bf00      	nop
 800fb84:	e000      	b.n	800fb88 <Run_State_Machine+0xd8>
        break;
 800fb86:	bf00      	nop
    }
}
 800fb88:	bf00      	nop
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <Transition_State>:

void Transition_State(StateMachineStruct* t_sm, StateEnum t_state_cmd)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	70fb      	strb	r3, [r7, #3]
    StateEnum new_state = Transition_Map(t_sm->curr_state, t_state_cmd);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	78fa      	ldrb	r2, [r7, #3]
 800fba2:	4611      	mov	r1, r2
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7ff fee9 	bl	800f97c <Transition_Map>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	73fb      	strb	r3, [r7, #15]
    if (t_sm->curr_state != new_state) {
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	7bfa      	ldrb	r2, [r7, #15]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d009      	beq.n	800fbcc <Transition_State+0x3c>
    	t_sm->prev_state = t_sm->curr_state;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	781a      	ldrb	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	705a      	strb	r2, [r3, #1]
    	t_sm->curr_state = new_state;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	7bfa      	ldrb	r2, [r7, #15]
 800fbc4:	701a      	strb	r2, [r3, #0]
    	t_sm->entity_life_cycle = e_StateEntity_Ext;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2202      	movs	r2, #2
 800fbca:	709a      	strb	r2, [r3, #2]
    }
}
 800fbcc:	bf00      	nop
 800fbce:	3710      	adds	r7, #16
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <Init_Task>:

#include <task.h>

// Device Interface
void Init_Task(TaskStruct* t_task)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
    Init_State_Machine(&t_task->state_machine);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	330c      	adds	r3, #12
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7ff ff31 	bl	800fa48 <Init_State_Machine>
    Init_Routine(&t_task->routine);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	3340      	adds	r3, #64	; 0x40
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7ff fd88 	bl	800f700 <Init_Routine>
}
 800fbf0:	bf00      	nop
 800fbf2:	3708      	adds	r7, #8
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <Run_Task>:

void Run_Task(TaskStruct* t_task)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
    Run_State_Machine(&t_task->state_machine);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	330c      	adds	r3, #12
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff ff53 	bl	800fab0 <Run_State_Machine>
}
 800fc0a:	bf00      	nop
 800fc0c:	3708      	adds	r7, #8
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}

0800fc12 <Set_Task_State_Entity>:

void Set_Task_State_Entity(TaskStruct* t_task, StateEnum t_state, StateEntityStruct t_entity, bool t_is_default)
{
 800fc12:	b082      	sub	sp, #8
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	f107 0010 	add.w	r0, r7, #16
 800fc20:	e880 000c 	stmia.w	r0, {r2, r3}
 800fc24:	460b      	mov	r3, r1
 800fc26:	70fb      	strb	r3, [r7, #3]
	t_task->state_machine.entity[t_state] = t_entity;
 800fc28:	78fa      	ldrb	r2, [r7, #3]
 800fc2a:	6879      	ldr	r1, [r7, #4]
 800fc2c:	4613      	mov	r3, r2
 800fc2e:	005b      	lsls	r3, r3, #1
 800fc30:	4413      	add	r3, r2
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	440b      	add	r3, r1
 800fc36:	3308      	adds	r3, #8
 800fc38:	3308      	adds	r3, #8
 800fc3a:	f107 0210 	add.w	r2, r7, #16
 800fc3e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc40:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (t_is_default) {
 800fc44:	7f3b      	ldrb	r3, [r7, #28]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d005      	beq.n	800fc56 <Set_Task_State_Entity+0x44>
    	t_task->state_machine.curr_state = t_state;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	78fa      	ldrb	r2, [r7, #3]
 800fc4e:	731a      	strb	r2, [r3, #12]
    	t_task->state_machine.prev_state = t_state;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	78fa      	ldrb	r2, [r7, #3]
 800fc54:	735a      	strb	r2, [r3, #13]
    }
}
 800fc56:	bf00      	nop
 800fc58:	370c      	adds	r7, #12
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	b002      	add	sp, #8
 800fc62:	4770      	bx	lr

0800fc64 <Set_Task_Routine_Entity>:

//TODO: id, order range/duplication check
void Set_Task_Routine_Entity(TaskStruct* t_task, int t_id, RoutineEntityStruct t_entity)
{
 800fc64:	b082      	sub	sp, #8
 800fc66:	b480      	push	{r7}
 800fc68:	b083      	sub	sp, #12
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
 800fc6e:	6039      	str	r1, [r7, #0]
 800fc70:	f107 0110 	add.w	r1, r7, #16
 800fc74:	e881 000c 	stmia.w	r1, {r2, r3}
	t_task->routine.entities[t_id] = t_entity;
 800fc78:	6879      	ldr	r1, [r7, #4]
 800fc7a:	683a      	ldr	r2, [r7, #0]
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	005b      	lsls	r3, r3, #1
 800fc80:	4413      	add	r3, r2
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	440b      	add	r3, r1
 800fc86:	3360      	adds	r3, #96	; 0x60
 800fc88:	3304      	adds	r3, #4
 800fc8a:	f107 0210 	add.w	r2, r7, #16
 800fc8e:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800fc94:	bf00      	nop
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	b002      	add	sp, #8
 800fca0:	4770      	bx	lr
	...

0800fca4 <__assert_func>:
 800fca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fca6:	4614      	mov	r4, r2
 800fca8:	461a      	mov	r2, r3
 800fcaa:	4b09      	ldr	r3, [pc, #36]	; (800fcd0 <__assert_func+0x2c>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4605      	mov	r5, r0
 800fcb0:	68d8      	ldr	r0, [r3, #12]
 800fcb2:	b14c      	cbz	r4, 800fcc8 <__assert_func+0x24>
 800fcb4:	4b07      	ldr	r3, [pc, #28]	; (800fcd4 <__assert_func+0x30>)
 800fcb6:	9100      	str	r1, [sp, #0]
 800fcb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fcbc:	4906      	ldr	r1, [pc, #24]	; (800fcd8 <__assert_func+0x34>)
 800fcbe:	462b      	mov	r3, r5
 800fcc0:	f000 f994 	bl	800ffec <fiprintf>
 800fcc4:	f000 fa9e 	bl	8010204 <abort>
 800fcc8:	4b04      	ldr	r3, [pc, #16]	; (800fcdc <__assert_func+0x38>)
 800fcca:	461c      	mov	r4, r3
 800fccc:	e7f3      	b.n	800fcb6 <__assert_func+0x12>
 800fcce:	bf00      	nop
 800fcd0:	2400006c 	.word	0x2400006c
 800fcd4:	08011b18 	.word	0x08011b18
 800fcd8:	08011b25 	.word	0x08011b25
 800fcdc:	08011b53 	.word	0x08011b53

0800fce0 <malloc>:
 800fce0:	4b02      	ldr	r3, [pc, #8]	; (800fcec <malloc+0xc>)
 800fce2:	4601      	mov	r1, r0
 800fce4:	6818      	ldr	r0, [r3, #0]
 800fce6:	f000 b82b 	b.w	800fd40 <_malloc_r>
 800fcea:	bf00      	nop
 800fcec:	2400006c 	.word	0x2400006c

0800fcf0 <free>:
 800fcf0:	4b02      	ldr	r3, [pc, #8]	; (800fcfc <free+0xc>)
 800fcf2:	4601      	mov	r1, r0
 800fcf4:	6818      	ldr	r0, [r3, #0]
 800fcf6:	f000 ba8d 	b.w	8010214 <_free_r>
 800fcfa:	bf00      	nop
 800fcfc:	2400006c 	.word	0x2400006c

0800fd00 <sbrk_aligned>:
 800fd00:	b570      	push	{r4, r5, r6, lr}
 800fd02:	4e0e      	ldr	r6, [pc, #56]	; (800fd3c <sbrk_aligned+0x3c>)
 800fd04:	460c      	mov	r4, r1
 800fd06:	6831      	ldr	r1, [r6, #0]
 800fd08:	4605      	mov	r5, r0
 800fd0a:	b911      	cbnz	r1, 800fd12 <sbrk_aligned+0x12>
 800fd0c:	f000 fa1e 	bl	801014c <_sbrk_r>
 800fd10:	6030      	str	r0, [r6, #0]
 800fd12:	4621      	mov	r1, r4
 800fd14:	4628      	mov	r0, r5
 800fd16:	f000 fa19 	bl	801014c <_sbrk_r>
 800fd1a:	1c43      	adds	r3, r0, #1
 800fd1c:	d00a      	beq.n	800fd34 <sbrk_aligned+0x34>
 800fd1e:	1cc4      	adds	r4, r0, #3
 800fd20:	f024 0403 	bic.w	r4, r4, #3
 800fd24:	42a0      	cmp	r0, r4
 800fd26:	d007      	beq.n	800fd38 <sbrk_aligned+0x38>
 800fd28:	1a21      	subs	r1, r4, r0
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	f000 fa0e 	bl	801014c <_sbrk_r>
 800fd30:	3001      	adds	r0, #1
 800fd32:	d101      	bne.n	800fd38 <sbrk_aligned+0x38>
 800fd34:	f04f 34ff 	mov.w	r4, #4294967295
 800fd38:	4620      	mov	r0, r4
 800fd3a:	bd70      	pop	{r4, r5, r6, pc}
 800fd3c:	2400d490 	.word	0x2400d490

0800fd40 <_malloc_r>:
 800fd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd44:	1ccd      	adds	r5, r1, #3
 800fd46:	f025 0503 	bic.w	r5, r5, #3
 800fd4a:	3508      	adds	r5, #8
 800fd4c:	2d0c      	cmp	r5, #12
 800fd4e:	bf38      	it	cc
 800fd50:	250c      	movcc	r5, #12
 800fd52:	2d00      	cmp	r5, #0
 800fd54:	4607      	mov	r7, r0
 800fd56:	db01      	blt.n	800fd5c <_malloc_r+0x1c>
 800fd58:	42a9      	cmp	r1, r5
 800fd5a:	d905      	bls.n	800fd68 <_malloc_r+0x28>
 800fd5c:	230c      	movs	r3, #12
 800fd5e:	603b      	str	r3, [r7, #0]
 800fd60:	2600      	movs	r6, #0
 800fd62:	4630      	mov	r0, r6
 800fd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fe3c <_malloc_r+0xfc>
 800fd6c:	f000 f868 	bl	800fe40 <__malloc_lock>
 800fd70:	f8d8 3000 	ldr.w	r3, [r8]
 800fd74:	461c      	mov	r4, r3
 800fd76:	bb5c      	cbnz	r4, 800fdd0 <_malloc_r+0x90>
 800fd78:	4629      	mov	r1, r5
 800fd7a:	4638      	mov	r0, r7
 800fd7c:	f7ff ffc0 	bl	800fd00 <sbrk_aligned>
 800fd80:	1c43      	adds	r3, r0, #1
 800fd82:	4604      	mov	r4, r0
 800fd84:	d155      	bne.n	800fe32 <_malloc_r+0xf2>
 800fd86:	f8d8 4000 	ldr.w	r4, [r8]
 800fd8a:	4626      	mov	r6, r4
 800fd8c:	2e00      	cmp	r6, #0
 800fd8e:	d145      	bne.n	800fe1c <_malloc_r+0xdc>
 800fd90:	2c00      	cmp	r4, #0
 800fd92:	d048      	beq.n	800fe26 <_malloc_r+0xe6>
 800fd94:	6823      	ldr	r3, [r4, #0]
 800fd96:	4631      	mov	r1, r6
 800fd98:	4638      	mov	r0, r7
 800fd9a:	eb04 0903 	add.w	r9, r4, r3
 800fd9e:	f000 f9d5 	bl	801014c <_sbrk_r>
 800fda2:	4581      	cmp	r9, r0
 800fda4:	d13f      	bne.n	800fe26 <_malloc_r+0xe6>
 800fda6:	6821      	ldr	r1, [r4, #0]
 800fda8:	1a6d      	subs	r5, r5, r1
 800fdaa:	4629      	mov	r1, r5
 800fdac:	4638      	mov	r0, r7
 800fdae:	f7ff ffa7 	bl	800fd00 <sbrk_aligned>
 800fdb2:	3001      	adds	r0, #1
 800fdb4:	d037      	beq.n	800fe26 <_malloc_r+0xe6>
 800fdb6:	6823      	ldr	r3, [r4, #0]
 800fdb8:	442b      	add	r3, r5
 800fdba:	6023      	str	r3, [r4, #0]
 800fdbc:	f8d8 3000 	ldr.w	r3, [r8]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d038      	beq.n	800fe36 <_malloc_r+0xf6>
 800fdc4:	685a      	ldr	r2, [r3, #4]
 800fdc6:	42a2      	cmp	r2, r4
 800fdc8:	d12b      	bne.n	800fe22 <_malloc_r+0xe2>
 800fdca:	2200      	movs	r2, #0
 800fdcc:	605a      	str	r2, [r3, #4]
 800fdce:	e00f      	b.n	800fdf0 <_malloc_r+0xb0>
 800fdd0:	6822      	ldr	r2, [r4, #0]
 800fdd2:	1b52      	subs	r2, r2, r5
 800fdd4:	d41f      	bmi.n	800fe16 <_malloc_r+0xd6>
 800fdd6:	2a0b      	cmp	r2, #11
 800fdd8:	d917      	bls.n	800fe0a <_malloc_r+0xca>
 800fdda:	1961      	adds	r1, r4, r5
 800fddc:	42a3      	cmp	r3, r4
 800fdde:	6025      	str	r5, [r4, #0]
 800fde0:	bf18      	it	ne
 800fde2:	6059      	strne	r1, [r3, #4]
 800fde4:	6863      	ldr	r3, [r4, #4]
 800fde6:	bf08      	it	eq
 800fde8:	f8c8 1000 	streq.w	r1, [r8]
 800fdec:	5162      	str	r2, [r4, r5]
 800fdee:	604b      	str	r3, [r1, #4]
 800fdf0:	4638      	mov	r0, r7
 800fdf2:	f104 060b 	add.w	r6, r4, #11
 800fdf6:	f000 f829 	bl	800fe4c <__malloc_unlock>
 800fdfa:	f026 0607 	bic.w	r6, r6, #7
 800fdfe:	1d23      	adds	r3, r4, #4
 800fe00:	1af2      	subs	r2, r6, r3
 800fe02:	d0ae      	beq.n	800fd62 <_malloc_r+0x22>
 800fe04:	1b9b      	subs	r3, r3, r6
 800fe06:	50a3      	str	r3, [r4, r2]
 800fe08:	e7ab      	b.n	800fd62 <_malloc_r+0x22>
 800fe0a:	42a3      	cmp	r3, r4
 800fe0c:	6862      	ldr	r2, [r4, #4]
 800fe0e:	d1dd      	bne.n	800fdcc <_malloc_r+0x8c>
 800fe10:	f8c8 2000 	str.w	r2, [r8]
 800fe14:	e7ec      	b.n	800fdf0 <_malloc_r+0xb0>
 800fe16:	4623      	mov	r3, r4
 800fe18:	6864      	ldr	r4, [r4, #4]
 800fe1a:	e7ac      	b.n	800fd76 <_malloc_r+0x36>
 800fe1c:	4634      	mov	r4, r6
 800fe1e:	6876      	ldr	r6, [r6, #4]
 800fe20:	e7b4      	b.n	800fd8c <_malloc_r+0x4c>
 800fe22:	4613      	mov	r3, r2
 800fe24:	e7cc      	b.n	800fdc0 <_malloc_r+0x80>
 800fe26:	230c      	movs	r3, #12
 800fe28:	603b      	str	r3, [r7, #0]
 800fe2a:	4638      	mov	r0, r7
 800fe2c:	f000 f80e 	bl	800fe4c <__malloc_unlock>
 800fe30:	e797      	b.n	800fd62 <_malloc_r+0x22>
 800fe32:	6025      	str	r5, [r4, #0]
 800fe34:	e7dc      	b.n	800fdf0 <_malloc_r+0xb0>
 800fe36:	605b      	str	r3, [r3, #4]
 800fe38:	deff      	udf	#255	; 0xff
 800fe3a:	bf00      	nop
 800fe3c:	2400d48c 	.word	0x2400d48c

0800fe40 <__malloc_lock>:
 800fe40:	4801      	ldr	r0, [pc, #4]	; (800fe48 <__malloc_lock+0x8>)
 800fe42:	f000 b9cf 	b.w	80101e4 <__retarget_lock_acquire_recursive>
 800fe46:	bf00      	nop
 800fe48:	2400d5d4 	.word	0x2400d5d4

0800fe4c <__malloc_unlock>:
 800fe4c:	4801      	ldr	r0, [pc, #4]	; (800fe54 <__malloc_unlock+0x8>)
 800fe4e:	f000 b9ca 	b.w	80101e6 <__retarget_lock_release_recursive>
 800fe52:	bf00      	nop
 800fe54:	2400d5d4 	.word	0x2400d5d4

0800fe58 <realloc>:
 800fe58:	4b02      	ldr	r3, [pc, #8]	; (800fe64 <realloc+0xc>)
 800fe5a:	460a      	mov	r2, r1
 800fe5c:	4601      	mov	r1, r0
 800fe5e:	6818      	ldr	r0, [r3, #0]
 800fe60:	f000 b802 	b.w	800fe68 <_realloc_r>
 800fe64:	2400006c 	.word	0x2400006c

0800fe68 <_realloc_r>:
 800fe68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6c:	4680      	mov	r8, r0
 800fe6e:	4614      	mov	r4, r2
 800fe70:	460e      	mov	r6, r1
 800fe72:	b921      	cbnz	r1, 800fe7e <_realloc_r+0x16>
 800fe74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	4611      	mov	r1, r2
 800fe7a:	f7ff bf61 	b.w	800fd40 <_malloc_r>
 800fe7e:	b92a      	cbnz	r2, 800fe8c <_realloc_r+0x24>
 800fe80:	f000 f9c8 	bl	8010214 <_free_r>
 800fe84:	4625      	mov	r5, r4
 800fe86:	4628      	mov	r0, r5
 800fe88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe8c:	f000 fa0e 	bl	80102ac <_malloc_usable_size_r>
 800fe90:	4284      	cmp	r4, r0
 800fe92:	4607      	mov	r7, r0
 800fe94:	d802      	bhi.n	800fe9c <_realloc_r+0x34>
 800fe96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe9a:	d812      	bhi.n	800fec2 <_realloc_r+0x5a>
 800fe9c:	4621      	mov	r1, r4
 800fe9e:	4640      	mov	r0, r8
 800fea0:	f7ff ff4e 	bl	800fd40 <_malloc_r>
 800fea4:	4605      	mov	r5, r0
 800fea6:	2800      	cmp	r0, #0
 800fea8:	d0ed      	beq.n	800fe86 <_realloc_r+0x1e>
 800feaa:	42bc      	cmp	r4, r7
 800feac:	4622      	mov	r2, r4
 800feae:	4631      	mov	r1, r6
 800feb0:	bf28      	it	cs
 800feb2:	463a      	movcs	r2, r7
 800feb4:	f000 f998 	bl	80101e8 <memcpy>
 800feb8:	4631      	mov	r1, r6
 800feba:	4640      	mov	r0, r8
 800febc:	f000 f9aa 	bl	8010214 <_free_r>
 800fec0:	e7e1      	b.n	800fe86 <_realloc_r+0x1e>
 800fec2:	4635      	mov	r5, r6
 800fec4:	e7df      	b.n	800fe86 <_realloc_r+0x1e>
	...

0800fec8 <std>:
 800fec8:	2300      	movs	r3, #0
 800feca:	b510      	push	{r4, lr}
 800fecc:	4604      	mov	r4, r0
 800fece:	e9c0 3300 	strd	r3, r3, [r0]
 800fed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fed6:	6083      	str	r3, [r0, #8]
 800fed8:	8181      	strh	r1, [r0, #12]
 800feda:	6643      	str	r3, [r0, #100]	; 0x64
 800fedc:	81c2      	strh	r2, [r0, #14]
 800fede:	6183      	str	r3, [r0, #24]
 800fee0:	4619      	mov	r1, r3
 800fee2:	2208      	movs	r2, #8
 800fee4:	305c      	adds	r0, #92	; 0x5c
 800fee6:	f000 f8f4 	bl	80100d2 <memset>
 800feea:	4b05      	ldr	r3, [pc, #20]	; (800ff00 <std+0x38>)
 800feec:	6263      	str	r3, [r4, #36]	; 0x24
 800feee:	4b05      	ldr	r3, [pc, #20]	; (800ff04 <std+0x3c>)
 800fef0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fef2:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <std+0x40>)
 800fef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fef6:	4b05      	ldr	r3, [pc, #20]	; (800ff0c <std+0x44>)
 800fef8:	6224      	str	r4, [r4, #32]
 800fefa:	6323      	str	r3, [r4, #48]	; 0x30
 800fefc:	bd10      	pop	{r4, pc}
 800fefe:	bf00      	nop
 800ff00:	0801004d 	.word	0x0801004d
 800ff04:	0801006f 	.word	0x0801006f
 800ff08:	080100a7 	.word	0x080100a7
 800ff0c:	080100cb 	.word	0x080100cb

0800ff10 <stdio_exit_handler>:
 800ff10:	4a02      	ldr	r2, [pc, #8]	; (800ff1c <stdio_exit_handler+0xc>)
 800ff12:	4903      	ldr	r1, [pc, #12]	; (800ff20 <stdio_exit_handler+0x10>)
 800ff14:	4803      	ldr	r0, [pc, #12]	; (800ff24 <stdio_exit_handler+0x14>)
 800ff16:	f000 b87b 	b.w	8010010 <_fwalk_sglue>
 800ff1a:	bf00      	nop
 800ff1c:	24000014 	.word	0x24000014
 800ff20:	08010971 	.word	0x08010971
 800ff24:	24000020 	.word	0x24000020

0800ff28 <cleanup_stdio>:
 800ff28:	6841      	ldr	r1, [r0, #4]
 800ff2a:	4b0c      	ldr	r3, [pc, #48]	; (800ff5c <cleanup_stdio+0x34>)
 800ff2c:	4299      	cmp	r1, r3
 800ff2e:	b510      	push	{r4, lr}
 800ff30:	4604      	mov	r4, r0
 800ff32:	d001      	beq.n	800ff38 <cleanup_stdio+0x10>
 800ff34:	f000 fd1c 	bl	8010970 <_fflush_r>
 800ff38:	68a1      	ldr	r1, [r4, #8]
 800ff3a:	4b09      	ldr	r3, [pc, #36]	; (800ff60 <cleanup_stdio+0x38>)
 800ff3c:	4299      	cmp	r1, r3
 800ff3e:	d002      	beq.n	800ff46 <cleanup_stdio+0x1e>
 800ff40:	4620      	mov	r0, r4
 800ff42:	f000 fd15 	bl	8010970 <_fflush_r>
 800ff46:	68e1      	ldr	r1, [r4, #12]
 800ff48:	4b06      	ldr	r3, [pc, #24]	; (800ff64 <cleanup_stdio+0x3c>)
 800ff4a:	4299      	cmp	r1, r3
 800ff4c:	d004      	beq.n	800ff58 <cleanup_stdio+0x30>
 800ff4e:	4620      	mov	r0, r4
 800ff50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff54:	f000 bd0c 	b.w	8010970 <_fflush_r>
 800ff58:	bd10      	pop	{r4, pc}
 800ff5a:	bf00      	nop
 800ff5c:	2400d494 	.word	0x2400d494
 800ff60:	2400d4fc 	.word	0x2400d4fc
 800ff64:	2400d564 	.word	0x2400d564

0800ff68 <global_stdio_init.part.0>:
 800ff68:	b510      	push	{r4, lr}
 800ff6a:	4b0b      	ldr	r3, [pc, #44]	; (800ff98 <global_stdio_init.part.0+0x30>)
 800ff6c:	4c0b      	ldr	r4, [pc, #44]	; (800ff9c <global_stdio_init.part.0+0x34>)
 800ff6e:	4a0c      	ldr	r2, [pc, #48]	; (800ffa0 <global_stdio_init.part.0+0x38>)
 800ff70:	601a      	str	r2, [r3, #0]
 800ff72:	4620      	mov	r0, r4
 800ff74:	2200      	movs	r2, #0
 800ff76:	2104      	movs	r1, #4
 800ff78:	f7ff ffa6 	bl	800fec8 <std>
 800ff7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ff80:	2201      	movs	r2, #1
 800ff82:	2109      	movs	r1, #9
 800ff84:	f7ff ffa0 	bl	800fec8 <std>
 800ff88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff92:	2112      	movs	r1, #18
 800ff94:	f7ff bf98 	b.w	800fec8 <std>
 800ff98:	2400d5cc 	.word	0x2400d5cc
 800ff9c:	2400d494 	.word	0x2400d494
 800ffa0:	0800ff11 	.word	0x0800ff11

0800ffa4 <__sfp_lock_acquire>:
 800ffa4:	4801      	ldr	r0, [pc, #4]	; (800ffac <__sfp_lock_acquire+0x8>)
 800ffa6:	f000 b91d 	b.w	80101e4 <__retarget_lock_acquire_recursive>
 800ffaa:	bf00      	nop
 800ffac:	2400d5d5 	.word	0x2400d5d5

0800ffb0 <__sfp_lock_release>:
 800ffb0:	4801      	ldr	r0, [pc, #4]	; (800ffb8 <__sfp_lock_release+0x8>)
 800ffb2:	f000 b918 	b.w	80101e6 <__retarget_lock_release_recursive>
 800ffb6:	bf00      	nop
 800ffb8:	2400d5d5 	.word	0x2400d5d5

0800ffbc <__sinit>:
 800ffbc:	b510      	push	{r4, lr}
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	f7ff fff0 	bl	800ffa4 <__sfp_lock_acquire>
 800ffc4:	6a23      	ldr	r3, [r4, #32]
 800ffc6:	b11b      	cbz	r3, 800ffd0 <__sinit+0x14>
 800ffc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffcc:	f7ff bff0 	b.w	800ffb0 <__sfp_lock_release>
 800ffd0:	4b04      	ldr	r3, [pc, #16]	; (800ffe4 <__sinit+0x28>)
 800ffd2:	6223      	str	r3, [r4, #32]
 800ffd4:	4b04      	ldr	r3, [pc, #16]	; (800ffe8 <__sinit+0x2c>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d1f5      	bne.n	800ffc8 <__sinit+0xc>
 800ffdc:	f7ff ffc4 	bl	800ff68 <global_stdio_init.part.0>
 800ffe0:	e7f2      	b.n	800ffc8 <__sinit+0xc>
 800ffe2:	bf00      	nop
 800ffe4:	0800ff29 	.word	0x0800ff29
 800ffe8:	2400d5cc 	.word	0x2400d5cc

0800ffec <fiprintf>:
 800ffec:	b40e      	push	{r1, r2, r3}
 800ffee:	b503      	push	{r0, r1, lr}
 800fff0:	4601      	mov	r1, r0
 800fff2:	ab03      	add	r3, sp, #12
 800fff4:	4805      	ldr	r0, [pc, #20]	; (801000c <fiprintf+0x20>)
 800fff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fffa:	6800      	ldr	r0, [r0, #0]
 800fffc:	9301      	str	r3, [sp, #4]
 800fffe:	f000 f987 	bl	8010310 <_vfiprintf_r>
 8010002:	b002      	add	sp, #8
 8010004:	f85d eb04 	ldr.w	lr, [sp], #4
 8010008:	b003      	add	sp, #12
 801000a:	4770      	bx	lr
 801000c:	2400006c 	.word	0x2400006c

08010010 <_fwalk_sglue>:
 8010010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010014:	4607      	mov	r7, r0
 8010016:	4688      	mov	r8, r1
 8010018:	4614      	mov	r4, r2
 801001a:	2600      	movs	r6, #0
 801001c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010020:	f1b9 0901 	subs.w	r9, r9, #1
 8010024:	d505      	bpl.n	8010032 <_fwalk_sglue+0x22>
 8010026:	6824      	ldr	r4, [r4, #0]
 8010028:	2c00      	cmp	r4, #0
 801002a:	d1f7      	bne.n	801001c <_fwalk_sglue+0xc>
 801002c:	4630      	mov	r0, r6
 801002e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010032:	89ab      	ldrh	r3, [r5, #12]
 8010034:	2b01      	cmp	r3, #1
 8010036:	d907      	bls.n	8010048 <_fwalk_sglue+0x38>
 8010038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801003c:	3301      	adds	r3, #1
 801003e:	d003      	beq.n	8010048 <_fwalk_sglue+0x38>
 8010040:	4629      	mov	r1, r5
 8010042:	4638      	mov	r0, r7
 8010044:	47c0      	blx	r8
 8010046:	4306      	orrs	r6, r0
 8010048:	3568      	adds	r5, #104	; 0x68
 801004a:	e7e9      	b.n	8010020 <_fwalk_sglue+0x10>

0801004c <__sread>:
 801004c:	b510      	push	{r4, lr}
 801004e:	460c      	mov	r4, r1
 8010050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010054:	f000 f868 	bl	8010128 <_read_r>
 8010058:	2800      	cmp	r0, #0
 801005a:	bfab      	itete	ge
 801005c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801005e:	89a3      	ldrhlt	r3, [r4, #12]
 8010060:	181b      	addge	r3, r3, r0
 8010062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010066:	bfac      	ite	ge
 8010068:	6563      	strge	r3, [r4, #84]	; 0x54
 801006a:	81a3      	strhlt	r3, [r4, #12]
 801006c:	bd10      	pop	{r4, pc}

0801006e <__swrite>:
 801006e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010072:	461f      	mov	r7, r3
 8010074:	898b      	ldrh	r3, [r1, #12]
 8010076:	05db      	lsls	r3, r3, #23
 8010078:	4605      	mov	r5, r0
 801007a:	460c      	mov	r4, r1
 801007c:	4616      	mov	r6, r2
 801007e:	d505      	bpl.n	801008c <__swrite+0x1e>
 8010080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010084:	2302      	movs	r3, #2
 8010086:	2200      	movs	r2, #0
 8010088:	f000 f83c 	bl	8010104 <_lseek_r>
 801008c:	89a3      	ldrh	r3, [r4, #12]
 801008e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010096:	81a3      	strh	r3, [r4, #12]
 8010098:	4632      	mov	r2, r6
 801009a:	463b      	mov	r3, r7
 801009c:	4628      	mov	r0, r5
 801009e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100a2:	f000 b863 	b.w	801016c <_write_r>

080100a6 <__sseek>:
 80100a6:	b510      	push	{r4, lr}
 80100a8:	460c      	mov	r4, r1
 80100aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ae:	f000 f829 	bl	8010104 <_lseek_r>
 80100b2:	1c43      	adds	r3, r0, #1
 80100b4:	89a3      	ldrh	r3, [r4, #12]
 80100b6:	bf15      	itete	ne
 80100b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80100ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100c2:	81a3      	strheq	r3, [r4, #12]
 80100c4:	bf18      	it	ne
 80100c6:	81a3      	strhne	r3, [r4, #12]
 80100c8:	bd10      	pop	{r4, pc}

080100ca <__sclose>:
 80100ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ce:	f000 b809 	b.w	80100e4 <_close_r>

080100d2 <memset>:
 80100d2:	4402      	add	r2, r0
 80100d4:	4603      	mov	r3, r0
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d100      	bne.n	80100dc <memset+0xa>
 80100da:	4770      	bx	lr
 80100dc:	f803 1b01 	strb.w	r1, [r3], #1
 80100e0:	e7f9      	b.n	80100d6 <memset+0x4>
	...

080100e4 <_close_r>:
 80100e4:	b538      	push	{r3, r4, r5, lr}
 80100e6:	4d06      	ldr	r5, [pc, #24]	; (8010100 <_close_r+0x1c>)
 80100e8:	2300      	movs	r3, #0
 80100ea:	4604      	mov	r4, r0
 80100ec:	4608      	mov	r0, r1
 80100ee:	602b      	str	r3, [r5, #0]
 80100f0:	f7f0 ff43 	bl	8000f7a <_close>
 80100f4:	1c43      	adds	r3, r0, #1
 80100f6:	d102      	bne.n	80100fe <_close_r+0x1a>
 80100f8:	682b      	ldr	r3, [r5, #0]
 80100fa:	b103      	cbz	r3, 80100fe <_close_r+0x1a>
 80100fc:	6023      	str	r3, [r4, #0]
 80100fe:	bd38      	pop	{r3, r4, r5, pc}
 8010100:	2400d5d0 	.word	0x2400d5d0

08010104 <_lseek_r>:
 8010104:	b538      	push	{r3, r4, r5, lr}
 8010106:	4d07      	ldr	r5, [pc, #28]	; (8010124 <_lseek_r+0x20>)
 8010108:	4604      	mov	r4, r0
 801010a:	4608      	mov	r0, r1
 801010c:	4611      	mov	r1, r2
 801010e:	2200      	movs	r2, #0
 8010110:	602a      	str	r2, [r5, #0]
 8010112:	461a      	mov	r2, r3
 8010114:	f7f0 ff58 	bl	8000fc8 <_lseek>
 8010118:	1c43      	adds	r3, r0, #1
 801011a:	d102      	bne.n	8010122 <_lseek_r+0x1e>
 801011c:	682b      	ldr	r3, [r5, #0]
 801011e:	b103      	cbz	r3, 8010122 <_lseek_r+0x1e>
 8010120:	6023      	str	r3, [r4, #0]
 8010122:	bd38      	pop	{r3, r4, r5, pc}
 8010124:	2400d5d0 	.word	0x2400d5d0

08010128 <_read_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	4d07      	ldr	r5, [pc, #28]	; (8010148 <_read_r+0x20>)
 801012c:	4604      	mov	r4, r0
 801012e:	4608      	mov	r0, r1
 8010130:	4611      	mov	r1, r2
 8010132:	2200      	movs	r2, #0
 8010134:	602a      	str	r2, [r5, #0]
 8010136:	461a      	mov	r2, r3
 8010138:	f7f0 fee6 	bl	8000f08 <_read>
 801013c:	1c43      	adds	r3, r0, #1
 801013e:	d102      	bne.n	8010146 <_read_r+0x1e>
 8010140:	682b      	ldr	r3, [r5, #0]
 8010142:	b103      	cbz	r3, 8010146 <_read_r+0x1e>
 8010144:	6023      	str	r3, [r4, #0]
 8010146:	bd38      	pop	{r3, r4, r5, pc}
 8010148:	2400d5d0 	.word	0x2400d5d0

0801014c <_sbrk_r>:
 801014c:	b538      	push	{r3, r4, r5, lr}
 801014e:	4d06      	ldr	r5, [pc, #24]	; (8010168 <_sbrk_r+0x1c>)
 8010150:	2300      	movs	r3, #0
 8010152:	4604      	mov	r4, r0
 8010154:	4608      	mov	r0, r1
 8010156:	602b      	str	r3, [r5, #0]
 8010158:	f7f0 ff44 	bl	8000fe4 <_sbrk>
 801015c:	1c43      	adds	r3, r0, #1
 801015e:	d102      	bne.n	8010166 <_sbrk_r+0x1a>
 8010160:	682b      	ldr	r3, [r5, #0]
 8010162:	b103      	cbz	r3, 8010166 <_sbrk_r+0x1a>
 8010164:	6023      	str	r3, [r4, #0]
 8010166:	bd38      	pop	{r3, r4, r5, pc}
 8010168:	2400d5d0 	.word	0x2400d5d0

0801016c <_write_r>:
 801016c:	b538      	push	{r3, r4, r5, lr}
 801016e:	4d07      	ldr	r5, [pc, #28]	; (801018c <_write_r+0x20>)
 8010170:	4604      	mov	r4, r0
 8010172:	4608      	mov	r0, r1
 8010174:	4611      	mov	r1, r2
 8010176:	2200      	movs	r2, #0
 8010178:	602a      	str	r2, [r5, #0]
 801017a:	461a      	mov	r2, r3
 801017c:	f7f0 fee1 	bl	8000f42 <_write>
 8010180:	1c43      	adds	r3, r0, #1
 8010182:	d102      	bne.n	801018a <_write_r+0x1e>
 8010184:	682b      	ldr	r3, [r5, #0]
 8010186:	b103      	cbz	r3, 801018a <_write_r+0x1e>
 8010188:	6023      	str	r3, [r4, #0]
 801018a:	bd38      	pop	{r3, r4, r5, pc}
 801018c:	2400d5d0 	.word	0x2400d5d0

08010190 <__errno>:
 8010190:	4b01      	ldr	r3, [pc, #4]	; (8010198 <__errno+0x8>)
 8010192:	6818      	ldr	r0, [r3, #0]
 8010194:	4770      	bx	lr
 8010196:	bf00      	nop
 8010198:	2400006c 	.word	0x2400006c

0801019c <__libc_init_array>:
 801019c:	b570      	push	{r4, r5, r6, lr}
 801019e:	4d0d      	ldr	r5, [pc, #52]	; (80101d4 <__libc_init_array+0x38>)
 80101a0:	4c0d      	ldr	r4, [pc, #52]	; (80101d8 <__libc_init_array+0x3c>)
 80101a2:	1b64      	subs	r4, r4, r5
 80101a4:	10a4      	asrs	r4, r4, #2
 80101a6:	2600      	movs	r6, #0
 80101a8:	42a6      	cmp	r6, r4
 80101aa:	d109      	bne.n	80101c0 <__libc_init_array+0x24>
 80101ac:	4d0b      	ldr	r5, [pc, #44]	; (80101dc <__libc_init_array+0x40>)
 80101ae:	4c0c      	ldr	r4, [pc, #48]	; (80101e0 <__libc_init_array+0x44>)
 80101b0:	f001 fc0c 	bl	80119cc <_init>
 80101b4:	1b64      	subs	r4, r4, r5
 80101b6:	10a4      	asrs	r4, r4, #2
 80101b8:	2600      	movs	r6, #0
 80101ba:	42a6      	cmp	r6, r4
 80101bc:	d105      	bne.n	80101ca <__libc_init_array+0x2e>
 80101be:	bd70      	pop	{r4, r5, r6, pc}
 80101c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80101c4:	4798      	blx	r3
 80101c6:	3601      	adds	r6, #1
 80101c8:	e7ee      	b.n	80101a8 <__libc_init_array+0xc>
 80101ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80101ce:	4798      	blx	r3
 80101d0:	3601      	adds	r6, #1
 80101d2:	e7f2      	b.n	80101ba <__libc_init_array+0x1e>
 80101d4:	080134b0 	.word	0x080134b0
 80101d8:	080134b0 	.word	0x080134b0
 80101dc:	080134b0 	.word	0x080134b0
 80101e0:	080134b4 	.word	0x080134b4

080101e4 <__retarget_lock_acquire_recursive>:
 80101e4:	4770      	bx	lr

080101e6 <__retarget_lock_release_recursive>:
 80101e6:	4770      	bx	lr

080101e8 <memcpy>:
 80101e8:	440a      	add	r2, r1
 80101ea:	4291      	cmp	r1, r2
 80101ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80101f0:	d100      	bne.n	80101f4 <memcpy+0xc>
 80101f2:	4770      	bx	lr
 80101f4:	b510      	push	{r4, lr}
 80101f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101fe:	4291      	cmp	r1, r2
 8010200:	d1f9      	bne.n	80101f6 <memcpy+0xe>
 8010202:	bd10      	pop	{r4, pc}

08010204 <abort>:
 8010204:	b508      	push	{r3, lr}
 8010206:	2006      	movs	r0, #6
 8010208:	f000 fc98 	bl	8010b3c <raise>
 801020c:	2001      	movs	r0, #1
 801020e:	f7f0 fe71 	bl	8000ef4 <_exit>
	...

08010214 <_free_r>:
 8010214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010216:	2900      	cmp	r1, #0
 8010218:	d044      	beq.n	80102a4 <_free_r+0x90>
 801021a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801021e:	9001      	str	r0, [sp, #4]
 8010220:	2b00      	cmp	r3, #0
 8010222:	f1a1 0404 	sub.w	r4, r1, #4
 8010226:	bfb8      	it	lt
 8010228:	18e4      	addlt	r4, r4, r3
 801022a:	f7ff fe09 	bl	800fe40 <__malloc_lock>
 801022e:	4a1e      	ldr	r2, [pc, #120]	; (80102a8 <_free_r+0x94>)
 8010230:	9801      	ldr	r0, [sp, #4]
 8010232:	6813      	ldr	r3, [r2, #0]
 8010234:	b933      	cbnz	r3, 8010244 <_free_r+0x30>
 8010236:	6063      	str	r3, [r4, #4]
 8010238:	6014      	str	r4, [r2, #0]
 801023a:	b003      	add	sp, #12
 801023c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010240:	f7ff be04 	b.w	800fe4c <__malloc_unlock>
 8010244:	42a3      	cmp	r3, r4
 8010246:	d908      	bls.n	801025a <_free_r+0x46>
 8010248:	6825      	ldr	r5, [r4, #0]
 801024a:	1961      	adds	r1, r4, r5
 801024c:	428b      	cmp	r3, r1
 801024e:	bf01      	itttt	eq
 8010250:	6819      	ldreq	r1, [r3, #0]
 8010252:	685b      	ldreq	r3, [r3, #4]
 8010254:	1949      	addeq	r1, r1, r5
 8010256:	6021      	streq	r1, [r4, #0]
 8010258:	e7ed      	b.n	8010236 <_free_r+0x22>
 801025a:	461a      	mov	r2, r3
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	b10b      	cbz	r3, 8010264 <_free_r+0x50>
 8010260:	42a3      	cmp	r3, r4
 8010262:	d9fa      	bls.n	801025a <_free_r+0x46>
 8010264:	6811      	ldr	r1, [r2, #0]
 8010266:	1855      	adds	r5, r2, r1
 8010268:	42a5      	cmp	r5, r4
 801026a:	d10b      	bne.n	8010284 <_free_r+0x70>
 801026c:	6824      	ldr	r4, [r4, #0]
 801026e:	4421      	add	r1, r4
 8010270:	1854      	adds	r4, r2, r1
 8010272:	42a3      	cmp	r3, r4
 8010274:	6011      	str	r1, [r2, #0]
 8010276:	d1e0      	bne.n	801023a <_free_r+0x26>
 8010278:	681c      	ldr	r4, [r3, #0]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	6053      	str	r3, [r2, #4]
 801027e:	440c      	add	r4, r1
 8010280:	6014      	str	r4, [r2, #0]
 8010282:	e7da      	b.n	801023a <_free_r+0x26>
 8010284:	d902      	bls.n	801028c <_free_r+0x78>
 8010286:	230c      	movs	r3, #12
 8010288:	6003      	str	r3, [r0, #0]
 801028a:	e7d6      	b.n	801023a <_free_r+0x26>
 801028c:	6825      	ldr	r5, [r4, #0]
 801028e:	1961      	adds	r1, r4, r5
 8010290:	428b      	cmp	r3, r1
 8010292:	bf04      	itt	eq
 8010294:	6819      	ldreq	r1, [r3, #0]
 8010296:	685b      	ldreq	r3, [r3, #4]
 8010298:	6063      	str	r3, [r4, #4]
 801029a:	bf04      	itt	eq
 801029c:	1949      	addeq	r1, r1, r5
 801029e:	6021      	streq	r1, [r4, #0]
 80102a0:	6054      	str	r4, [r2, #4]
 80102a2:	e7ca      	b.n	801023a <_free_r+0x26>
 80102a4:	b003      	add	sp, #12
 80102a6:	bd30      	pop	{r4, r5, pc}
 80102a8:	2400d48c 	.word	0x2400d48c

080102ac <_malloc_usable_size_r>:
 80102ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102b0:	1f18      	subs	r0, r3, #4
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	bfbc      	itt	lt
 80102b6:	580b      	ldrlt	r3, [r1, r0]
 80102b8:	18c0      	addlt	r0, r0, r3
 80102ba:	4770      	bx	lr

080102bc <__sfputc_r>:
 80102bc:	6893      	ldr	r3, [r2, #8]
 80102be:	3b01      	subs	r3, #1
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	b410      	push	{r4}
 80102c4:	6093      	str	r3, [r2, #8]
 80102c6:	da08      	bge.n	80102da <__sfputc_r+0x1e>
 80102c8:	6994      	ldr	r4, [r2, #24]
 80102ca:	42a3      	cmp	r3, r4
 80102cc:	db01      	blt.n	80102d2 <__sfputc_r+0x16>
 80102ce:	290a      	cmp	r1, #10
 80102d0:	d103      	bne.n	80102da <__sfputc_r+0x1e>
 80102d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102d6:	f000 bb73 	b.w	80109c0 <__swbuf_r>
 80102da:	6813      	ldr	r3, [r2, #0]
 80102dc:	1c58      	adds	r0, r3, #1
 80102de:	6010      	str	r0, [r2, #0]
 80102e0:	7019      	strb	r1, [r3, #0]
 80102e2:	4608      	mov	r0, r1
 80102e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102e8:	4770      	bx	lr

080102ea <__sfputs_r>:
 80102ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ec:	4606      	mov	r6, r0
 80102ee:	460f      	mov	r7, r1
 80102f0:	4614      	mov	r4, r2
 80102f2:	18d5      	adds	r5, r2, r3
 80102f4:	42ac      	cmp	r4, r5
 80102f6:	d101      	bne.n	80102fc <__sfputs_r+0x12>
 80102f8:	2000      	movs	r0, #0
 80102fa:	e007      	b.n	801030c <__sfputs_r+0x22>
 80102fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010300:	463a      	mov	r2, r7
 8010302:	4630      	mov	r0, r6
 8010304:	f7ff ffda 	bl	80102bc <__sfputc_r>
 8010308:	1c43      	adds	r3, r0, #1
 801030a:	d1f3      	bne.n	80102f4 <__sfputs_r+0xa>
 801030c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010310 <_vfiprintf_r>:
 8010310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010314:	460d      	mov	r5, r1
 8010316:	b09d      	sub	sp, #116	; 0x74
 8010318:	4614      	mov	r4, r2
 801031a:	4698      	mov	r8, r3
 801031c:	4606      	mov	r6, r0
 801031e:	b118      	cbz	r0, 8010328 <_vfiprintf_r+0x18>
 8010320:	6a03      	ldr	r3, [r0, #32]
 8010322:	b90b      	cbnz	r3, 8010328 <_vfiprintf_r+0x18>
 8010324:	f7ff fe4a 	bl	800ffbc <__sinit>
 8010328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801032a:	07d9      	lsls	r1, r3, #31
 801032c:	d405      	bmi.n	801033a <_vfiprintf_r+0x2a>
 801032e:	89ab      	ldrh	r3, [r5, #12]
 8010330:	059a      	lsls	r2, r3, #22
 8010332:	d402      	bmi.n	801033a <_vfiprintf_r+0x2a>
 8010334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010336:	f7ff ff55 	bl	80101e4 <__retarget_lock_acquire_recursive>
 801033a:	89ab      	ldrh	r3, [r5, #12]
 801033c:	071b      	lsls	r3, r3, #28
 801033e:	d501      	bpl.n	8010344 <_vfiprintf_r+0x34>
 8010340:	692b      	ldr	r3, [r5, #16]
 8010342:	b99b      	cbnz	r3, 801036c <_vfiprintf_r+0x5c>
 8010344:	4629      	mov	r1, r5
 8010346:	4630      	mov	r0, r6
 8010348:	f000 fb78 	bl	8010a3c <__swsetup_r>
 801034c:	b170      	cbz	r0, 801036c <_vfiprintf_r+0x5c>
 801034e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010350:	07dc      	lsls	r4, r3, #31
 8010352:	d504      	bpl.n	801035e <_vfiprintf_r+0x4e>
 8010354:	f04f 30ff 	mov.w	r0, #4294967295
 8010358:	b01d      	add	sp, #116	; 0x74
 801035a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801035e:	89ab      	ldrh	r3, [r5, #12]
 8010360:	0598      	lsls	r0, r3, #22
 8010362:	d4f7      	bmi.n	8010354 <_vfiprintf_r+0x44>
 8010364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010366:	f7ff ff3e 	bl	80101e6 <__retarget_lock_release_recursive>
 801036a:	e7f3      	b.n	8010354 <_vfiprintf_r+0x44>
 801036c:	2300      	movs	r3, #0
 801036e:	9309      	str	r3, [sp, #36]	; 0x24
 8010370:	2320      	movs	r3, #32
 8010372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010376:	f8cd 800c 	str.w	r8, [sp, #12]
 801037a:	2330      	movs	r3, #48	; 0x30
 801037c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010530 <_vfiprintf_r+0x220>
 8010380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010384:	f04f 0901 	mov.w	r9, #1
 8010388:	4623      	mov	r3, r4
 801038a:	469a      	mov	sl, r3
 801038c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010390:	b10a      	cbz	r2, 8010396 <_vfiprintf_r+0x86>
 8010392:	2a25      	cmp	r2, #37	; 0x25
 8010394:	d1f9      	bne.n	801038a <_vfiprintf_r+0x7a>
 8010396:	ebba 0b04 	subs.w	fp, sl, r4
 801039a:	d00b      	beq.n	80103b4 <_vfiprintf_r+0xa4>
 801039c:	465b      	mov	r3, fp
 801039e:	4622      	mov	r2, r4
 80103a0:	4629      	mov	r1, r5
 80103a2:	4630      	mov	r0, r6
 80103a4:	f7ff ffa1 	bl	80102ea <__sfputs_r>
 80103a8:	3001      	adds	r0, #1
 80103aa:	f000 80a9 	beq.w	8010500 <_vfiprintf_r+0x1f0>
 80103ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103b0:	445a      	add	r2, fp
 80103b2:	9209      	str	r2, [sp, #36]	; 0x24
 80103b4:	f89a 3000 	ldrb.w	r3, [sl]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f000 80a1 	beq.w	8010500 <_vfiprintf_r+0x1f0>
 80103be:	2300      	movs	r3, #0
 80103c0:	f04f 32ff 	mov.w	r2, #4294967295
 80103c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103c8:	f10a 0a01 	add.w	sl, sl, #1
 80103cc:	9304      	str	r3, [sp, #16]
 80103ce:	9307      	str	r3, [sp, #28]
 80103d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80103d4:	931a      	str	r3, [sp, #104]	; 0x68
 80103d6:	4654      	mov	r4, sl
 80103d8:	2205      	movs	r2, #5
 80103da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103de:	4854      	ldr	r0, [pc, #336]	; (8010530 <_vfiprintf_r+0x220>)
 80103e0:	f7ef ff7e 	bl	80002e0 <memchr>
 80103e4:	9a04      	ldr	r2, [sp, #16]
 80103e6:	b9d8      	cbnz	r0, 8010420 <_vfiprintf_r+0x110>
 80103e8:	06d1      	lsls	r1, r2, #27
 80103ea:	bf44      	itt	mi
 80103ec:	2320      	movmi	r3, #32
 80103ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103f2:	0713      	lsls	r3, r2, #28
 80103f4:	bf44      	itt	mi
 80103f6:	232b      	movmi	r3, #43	; 0x2b
 80103f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80103fc:	f89a 3000 	ldrb.w	r3, [sl]
 8010400:	2b2a      	cmp	r3, #42	; 0x2a
 8010402:	d015      	beq.n	8010430 <_vfiprintf_r+0x120>
 8010404:	9a07      	ldr	r2, [sp, #28]
 8010406:	4654      	mov	r4, sl
 8010408:	2000      	movs	r0, #0
 801040a:	f04f 0c0a 	mov.w	ip, #10
 801040e:	4621      	mov	r1, r4
 8010410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010414:	3b30      	subs	r3, #48	; 0x30
 8010416:	2b09      	cmp	r3, #9
 8010418:	d94d      	bls.n	80104b6 <_vfiprintf_r+0x1a6>
 801041a:	b1b0      	cbz	r0, 801044a <_vfiprintf_r+0x13a>
 801041c:	9207      	str	r2, [sp, #28]
 801041e:	e014      	b.n	801044a <_vfiprintf_r+0x13a>
 8010420:	eba0 0308 	sub.w	r3, r0, r8
 8010424:	fa09 f303 	lsl.w	r3, r9, r3
 8010428:	4313      	orrs	r3, r2
 801042a:	9304      	str	r3, [sp, #16]
 801042c:	46a2      	mov	sl, r4
 801042e:	e7d2      	b.n	80103d6 <_vfiprintf_r+0xc6>
 8010430:	9b03      	ldr	r3, [sp, #12]
 8010432:	1d19      	adds	r1, r3, #4
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	9103      	str	r1, [sp, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	bfbb      	ittet	lt
 801043c:	425b      	neglt	r3, r3
 801043e:	f042 0202 	orrlt.w	r2, r2, #2
 8010442:	9307      	strge	r3, [sp, #28]
 8010444:	9307      	strlt	r3, [sp, #28]
 8010446:	bfb8      	it	lt
 8010448:	9204      	strlt	r2, [sp, #16]
 801044a:	7823      	ldrb	r3, [r4, #0]
 801044c:	2b2e      	cmp	r3, #46	; 0x2e
 801044e:	d10c      	bne.n	801046a <_vfiprintf_r+0x15a>
 8010450:	7863      	ldrb	r3, [r4, #1]
 8010452:	2b2a      	cmp	r3, #42	; 0x2a
 8010454:	d134      	bne.n	80104c0 <_vfiprintf_r+0x1b0>
 8010456:	9b03      	ldr	r3, [sp, #12]
 8010458:	1d1a      	adds	r2, r3, #4
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	9203      	str	r2, [sp, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	bfb8      	it	lt
 8010462:	f04f 33ff 	movlt.w	r3, #4294967295
 8010466:	3402      	adds	r4, #2
 8010468:	9305      	str	r3, [sp, #20]
 801046a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010540 <_vfiprintf_r+0x230>
 801046e:	7821      	ldrb	r1, [r4, #0]
 8010470:	2203      	movs	r2, #3
 8010472:	4650      	mov	r0, sl
 8010474:	f7ef ff34 	bl	80002e0 <memchr>
 8010478:	b138      	cbz	r0, 801048a <_vfiprintf_r+0x17a>
 801047a:	9b04      	ldr	r3, [sp, #16]
 801047c:	eba0 000a 	sub.w	r0, r0, sl
 8010480:	2240      	movs	r2, #64	; 0x40
 8010482:	4082      	lsls	r2, r0
 8010484:	4313      	orrs	r3, r2
 8010486:	3401      	adds	r4, #1
 8010488:	9304      	str	r3, [sp, #16]
 801048a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801048e:	4829      	ldr	r0, [pc, #164]	; (8010534 <_vfiprintf_r+0x224>)
 8010490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010494:	2206      	movs	r2, #6
 8010496:	f7ef ff23 	bl	80002e0 <memchr>
 801049a:	2800      	cmp	r0, #0
 801049c:	d03f      	beq.n	801051e <_vfiprintf_r+0x20e>
 801049e:	4b26      	ldr	r3, [pc, #152]	; (8010538 <_vfiprintf_r+0x228>)
 80104a0:	bb1b      	cbnz	r3, 80104ea <_vfiprintf_r+0x1da>
 80104a2:	9b03      	ldr	r3, [sp, #12]
 80104a4:	3307      	adds	r3, #7
 80104a6:	f023 0307 	bic.w	r3, r3, #7
 80104aa:	3308      	adds	r3, #8
 80104ac:	9303      	str	r3, [sp, #12]
 80104ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104b0:	443b      	add	r3, r7
 80104b2:	9309      	str	r3, [sp, #36]	; 0x24
 80104b4:	e768      	b.n	8010388 <_vfiprintf_r+0x78>
 80104b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80104ba:	460c      	mov	r4, r1
 80104bc:	2001      	movs	r0, #1
 80104be:	e7a6      	b.n	801040e <_vfiprintf_r+0xfe>
 80104c0:	2300      	movs	r3, #0
 80104c2:	3401      	adds	r4, #1
 80104c4:	9305      	str	r3, [sp, #20]
 80104c6:	4619      	mov	r1, r3
 80104c8:	f04f 0c0a 	mov.w	ip, #10
 80104cc:	4620      	mov	r0, r4
 80104ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104d2:	3a30      	subs	r2, #48	; 0x30
 80104d4:	2a09      	cmp	r2, #9
 80104d6:	d903      	bls.n	80104e0 <_vfiprintf_r+0x1d0>
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d0c6      	beq.n	801046a <_vfiprintf_r+0x15a>
 80104dc:	9105      	str	r1, [sp, #20]
 80104de:	e7c4      	b.n	801046a <_vfiprintf_r+0x15a>
 80104e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80104e4:	4604      	mov	r4, r0
 80104e6:	2301      	movs	r3, #1
 80104e8:	e7f0      	b.n	80104cc <_vfiprintf_r+0x1bc>
 80104ea:	ab03      	add	r3, sp, #12
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	462a      	mov	r2, r5
 80104f0:	4b12      	ldr	r3, [pc, #72]	; (801053c <_vfiprintf_r+0x22c>)
 80104f2:	a904      	add	r1, sp, #16
 80104f4:	4630      	mov	r0, r6
 80104f6:	f3af 8000 	nop.w
 80104fa:	4607      	mov	r7, r0
 80104fc:	1c78      	adds	r0, r7, #1
 80104fe:	d1d6      	bne.n	80104ae <_vfiprintf_r+0x19e>
 8010500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010502:	07d9      	lsls	r1, r3, #31
 8010504:	d405      	bmi.n	8010512 <_vfiprintf_r+0x202>
 8010506:	89ab      	ldrh	r3, [r5, #12]
 8010508:	059a      	lsls	r2, r3, #22
 801050a:	d402      	bmi.n	8010512 <_vfiprintf_r+0x202>
 801050c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801050e:	f7ff fe6a 	bl	80101e6 <__retarget_lock_release_recursive>
 8010512:	89ab      	ldrh	r3, [r5, #12]
 8010514:	065b      	lsls	r3, r3, #25
 8010516:	f53f af1d 	bmi.w	8010354 <_vfiprintf_r+0x44>
 801051a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801051c:	e71c      	b.n	8010358 <_vfiprintf_r+0x48>
 801051e:	ab03      	add	r3, sp, #12
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	462a      	mov	r2, r5
 8010524:	4b05      	ldr	r3, [pc, #20]	; (801053c <_vfiprintf_r+0x22c>)
 8010526:	a904      	add	r1, sp, #16
 8010528:	4630      	mov	r0, r6
 801052a:	f000 f879 	bl	8010620 <_printf_i>
 801052e:	e7e4      	b.n	80104fa <_vfiprintf_r+0x1ea>
 8010530:	08011b54 	.word	0x08011b54
 8010534:	08011b5e 	.word	0x08011b5e
 8010538:	00000000 	.word	0x00000000
 801053c:	080102eb 	.word	0x080102eb
 8010540:	08011b5a 	.word	0x08011b5a

08010544 <_printf_common>:
 8010544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010548:	4616      	mov	r6, r2
 801054a:	4699      	mov	r9, r3
 801054c:	688a      	ldr	r2, [r1, #8]
 801054e:	690b      	ldr	r3, [r1, #16]
 8010550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010554:	4293      	cmp	r3, r2
 8010556:	bfb8      	it	lt
 8010558:	4613      	movlt	r3, r2
 801055a:	6033      	str	r3, [r6, #0]
 801055c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010560:	4607      	mov	r7, r0
 8010562:	460c      	mov	r4, r1
 8010564:	b10a      	cbz	r2, 801056a <_printf_common+0x26>
 8010566:	3301      	adds	r3, #1
 8010568:	6033      	str	r3, [r6, #0]
 801056a:	6823      	ldr	r3, [r4, #0]
 801056c:	0699      	lsls	r1, r3, #26
 801056e:	bf42      	ittt	mi
 8010570:	6833      	ldrmi	r3, [r6, #0]
 8010572:	3302      	addmi	r3, #2
 8010574:	6033      	strmi	r3, [r6, #0]
 8010576:	6825      	ldr	r5, [r4, #0]
 8010578:	f015 0506 	ands.w	r5, r5, #6
 801057c:	d106      	bne.n	801058c <_printf_common+0x48>
 801057e:	f104 0a19 	add.w	sl, r4, #25
 8010582:	68e3      	ldr	r3, [r4, #12]
 8010584:	6832      	ldr	r2, [r6, #0]
 8010586:	1a9b      	subs	r3, r3, r2
 8010588:	42ab      	cmp	r3, r5
 801058a:	dc26      	bgt.n	80105da <_printf_common+0x96>
 801058c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010590:	1e13      	subs	r3, r2, #0
 8010592:	6822      	ldr	r2, [r4, #0]
 8010594:	bf18      	it	ne
 8010596:	2301      	movne	r3, #1
 8010598:	0692      	lsls	r2, r2, #26
 801059a:	d42b      	bmi.n	80105f4 <_printf_common+0xb0>
 801059c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80105a0:	4649      	mov	r1, r9
 80105a2:	4638      	mov	r0, r7
 80105a4:	47c0      	blx	r8
 80105a6:	3001      	adds	r0, #1
 80105a8:	d01e      	beq.n	80105e8 <_printf_common+0xa4>
 80105aa:	6823      	ldr	r3, [r4, #0]
 80105ac:	6922      	ldr	r2, [r4, #16]
 80105ae:	f003 0306 	and.w	r3, r3, #6
 80105b2:	2b04      	cmp	r3, #4
 80105b4:	bf02      	ittt	eq
 80105b6:	68e5      	ldreq	r5, [r4, #12]
 80105b8:	6833      	ldreq	r3, [r6, #0]
 80105ba:	1aed      	subeq	r5, r5, r3
 80105bc:	68a3      	ldr	r3, [r4, #8]
 80105be:	bf0c      	ite	eq
 80105c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105c4:	2500      	movne	r5, #0
 80105c6:	4293      	cmp	r3, r2
 80105c8:	bfc4      	itt	gt
 80105ca:	1a9b      	subgt	r3, r3, r2
 80105cc:	18ed      	addgt	r5, r5, r3
 80105ce:	2600      	movs	r6, #0
 80105d0:	341a      	adds	r4, #26
 80105d2:	42b5      	cmp	r5, r6
 80105d4:	d11a      	bne.n	801060c <_printf_common+0xc8>
 80105d6:	2000      	movs	r0, #0
 80105d8:	e008      	b.n	80105ec <_printf_common+0xa8>
 80105da:	2301      	movs	r3, #1
 80105dc:	4652      	mov	r2, sl
 80105de:	4649      	mov	r1, r9
 80105e0:	4638      	mov	r0, r7
 80105e2:	47c0      	blx	r8
 80105e4:	3001      	adds	r0, #1
 80105e6:	d103      	bne.n	80105f0 <_printf_common+0xac>
 80105e8:	f04f 30ff 	mov.w	r0, #4294967295
 80105ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f0:	3501      	adds	r5, #1
 80105f2:	e7c6      	b.n	8010582 <_printf_common+0x3e>
 80105f4:	18e1      	adds	r1, r4, r3
 80105f6:	1c5a      	adds	r2, r3, #1
 80105f8:	2030      	movs	r0, #48	; 0x30
 80105fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80105fe:	4422      	add	r2, r4
 8010600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010608:	3302      	adds	r3, #2
 801060a:	e7c7      	b.n	801059c <_printf_common+0x58>
 801060c:	2301      	movs	r3, #1
 801060e:	4622      	mov	r2, r4
 8010610:	4649      	mov	r1, r9
 8010612:	4638      	mov	r0, r7
 8010614:	47c0      	blx	r8
 8010616:	3001      	adds	r0, #1
 8010618:	d0e6      	beq.n	80105e8 <_printf_common+0xa4>
 801061a:	3601      	adds	r6, #1
 801061c:	e7d9      	b.n	80105d2 <_printf_common+0x8e>
	...

08010620 <_printf_i>:
 8010620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010624:	7e0f      	ldrb	r7, [r1, #24]
 8010626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010628:	2f78      	cmp	r7, #120	; 0x78
 801062a:	4691      	mov	r9, r2
 801062c:	4680      	mov	r8, r0
 801062e:	460c      	mov	r4, r1
 8010630:	469a      	mov	sl, r3
 8010632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010636:	d807      	bhi.n	8010648 <_printf_i+0x28>
 8010638:	2f62      	cmp	r7, #98	; 0x62
 801063a:	d80a      	bhi.n	8010652 <_printf_i+0x32>
 801063c:	2f00      	cmp	r7, #0
 801063e:	f000 80d4 	beq.w	80107ea <_printf_i+0x1ca>
 8010642:	2f58      	cmp	r7, #88	; 0x58
 8010644:	f000 80c0 	beq.w	80107c8 <_printf_i+0x1a8>
 8010648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801064c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010650:	e03a      	b.n	80106c8 <_printf_i+0xa8>
 8010652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010656:	2b15      	cmp	r3, #21
 8010658:	d8f6      	bhi.n	8010648 <_printf_i+0x28>
 801065a:	a101      	add	r1, pc, #4	; (adr r1, 8010660 <_printf_i+0x40>)
 801065c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010660:	080106b9 	.word	0x080106b9
 8010664:	080106cd 	.word	0x080106cd
 8010668:	08010649 	.word	0x08010649
 801066c:	08010649 	.word	0x08010649
 8010670:	08010649 	.word	0x08010649
 8010674:	08010649 	.word	0x08010649
 8010678:	080106cd 	.word	0x080106cd
 801067c:	08010649 	.word	0x08010649
 8010680:	08010649 	.word	0x08010649
 8010684:	08010649 	.word	0x08010649
 8010688:	08010649 	.word	0x08010649
 801068c:	080107d1 	.word	0x080107d1
 8010690:	080106f9 	.word	0x080106f9
 8010694:	0801078b 	.word	0x0801078b
 8010698:	08010649 	.word	0x08010649
 801069c:	08010649 	.word	0x08010649
 80106a0:	080107f3 	.word	0x080107f3
 80106a4:	08010649 	.word	0x08010649
 80106a8:	080106f9 	.word	0x080106f9
 80106ac:	08010649 	.word	0x08010649
 80106b0:	08010649 	.word	0x08010649
 80106b4:	08010793 	.word	0x08010793
 80106b8:	682b      	ldr	r3, [r5, #0]
 80106ba:	1d1a      	adds	r2, r3, #4
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	602a      	str	r2, [r5, #0]
 80106c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80106c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80106c8:	2301      	movs	r3, #1
 80106ca:	e09f      	b.n	801080c <_printf_i+0x1ec>
 80106cc:	6820      	ldr	r0, [r4, #0]
 80106ce:	682b      	ldr	r3, [r5, #0]
 80106d0:	0607      	lsls	r7, r0, #24
 80106d2:	f103 0104 	add.w	r1, r3, #4
 80106d6:	6029      	str	r1, [r5, #0]
 80106d8:	d501      	bpl.n	80106de <_printf_i+0xbe>
 80106da:	681e      	ldr	r6, [r3, #0]
 80106dc:	e003      	b.n	80106e6 <_printf_i+0xc6>
 80106de:	0646      	lsls	r6, r0, #25
 80106e0:	d5fb      	bpl.n	80106da <_printf_i+0xba>
 80106e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80106e6:	2e00      	cmp	r6, #0
 80106e8:	da03      	bge.n	80106f2 <_printf_i+0xd2>
 80106ea:	232d      	movs	r3, #45	; 0x2d
 80106ec:	4276      	negs	r6, r6
 80106ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106f2:	485a      	ldr	r0, [pc, #360]	; (801085c <_printf_i+0x23c>)
 80106f4:	230a      	movs	r3, #10
 80106f6:	e012      	b.n	801071e <_printf_i+0xfe>
 80106f8:	682b      	ldr	r3, [r5, #0]
 80106fa:	6820      	ldr	r0, [r4, #0]
 80106fc:	1d19      	adds	r1, r3, #4
 80106fe:	6029      	str	r1, [r5, #0]
 8010700:	0605      	lsls	r5, r0, #24
 8010702:	d501      	bpl.n	8010708 <_printf_i+0xe8>
 8010704:	681e      	ldr	r6, [r3, #0]
 8010706:	e002      	b.n	801070e <_printf_i+0xee>
 8010708:	0641      	lsls	r1, r0, #25
 801070a:	d5fb      	bpl.n	8010704 <_printf_i+0xe4>
 801070c:	881e      	ldrh	r6, [r3, #0]
 801070e:	4853      	ldr	r0, [pc, #332]	; (801085c <_printf_i+0x23c>)
 8010710:	2f6f      	cmp	r7, #111	; 0x6f
 8010712:	bf0c      	ite	eq
 8010714:	2308      	moveq	r3, #8
 8010716:	230a      	movne	r3, #10
 8010718:	2100      	movs	r1, #0
 801071a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801071e:	6865      	ldr	r5, [r4, #4]
 8010720:	60a5      	str	r5, [r4, #8]
 8010722:	2d00      	cmp	r5, #0
 8010724:	bfa2      	ittt	ge
 8010726:	6821      	ldrge	r1, [r4, #0]
 8010728:	f021 0104 	bicge.w	r1, r1, #4
 801072c:	6021      	strge	r1, [r4, #0]
 801072e:	b90e      	cbnz	r6, 8010734 <_printf_i+0x114>
 8010730:	2d00      	cmp	r5, #0
 8010732:	d04b      	beq.n	80107cc <_printf_i+0x1ac>
 8010734:	4615      	mov	r5, r2
 8010736:	fbb6 f1f3 	udiv	r1, r6, r3
 801073a:	fb03 6711 	mls	r7, r3, r1, r6
 801073e:	5dc7      	ldrb	r7, [r0, r7]
 8010740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010744:	4637      	mov	r7, r6
 8010746:	42bb      	cmp	r3, r7
 8010748:	460e      	mov	r6, r1
 801074a:	d9f4      	bls.n	8010736 <_printf_i+0x116>
 801074c:	2b08      	cmp	r3, #8
 801074e:	d10b      	bne.n	8010768 <_printf_i+0x148>
 8010750:	6823      	ldr	r3, [r4, #0]
 8010752:	07de      	lsls	r6, r3, #31
 8010754:	d508      	bpl.n	8010768 <_printf_i+0x148>
 8010756:	6923      	ldr	r3, [r4, #16]
 8010758:	6861      	ldr	r1, [r4, #4]
 801075a:	4299      	cmp	r1, r3
 801075c:	bfde      	ittt	le
 801075e:	2330      	movle	r3, #48	; 0x30
 8010760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010764:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010768:	1b52      	subs	r2, r2, r5
 801076a:	6122      	str	r2, [r4, #16]
 801076c:	f8cd a000 	str.w	sl, [sp]
 8010770:	464b      	mov	r3, r9
 8010772:	aa03      	add	r2, sp, #12
 8010774:	4621      	mov	r1, r4
 8010776:	4640      	mov	r0, r8
 8010778:	f7ff fee4 	bl	8010544 <_printf_common>
 801077c:	3001      	adds	r0, #1
 801077e:	d14a      	bne.n	8010816 <_printf_i+0x1f6>
 8010780:	f04f 30ff 	mov.w	r0, #4294967295
 8010784:	b004      	add	sp, #16
 8010786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801078a:	6823      	ldr	r3, [r4, #0]
 801078c:	f043 0320 	orr.w	r3, r3, #32
 8010790:	6023      	str	r3, [r4, #0]
 8010792:	4833      	ldr	r0, [pc, #204]	; (8010860 <_printf_i+0x240>)
 8010794:	2778      	movs	r7, #120	; 0x78
 8010796:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	6829      	ldr	r1, [r5, #0]
 801079e:	061f      	lsls	r7, r3, #24
 80107a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80107a4:	d402      	bmi.n	80107ac <_printf_i+0x18c>
 80107a6:	065f      	lsls	r7, r3, #25
 80107a8:	bf48      	it	mi
 80107aa:	b2b6      	uxthmi	r6, r6
 80107ac:	07df      	lsls	r7, r3, #31
 80107ae:	bf48      	it	mi
 80107b0:	f043 0320 	orrmi.w	r3, r3, #32
 80107b4:	6029      	str	r1, [r5, #0]
 80107b6:	bf48      	it	mi
 80107b8:	6023      	strmi	r3, [r4, #0]
 80107ba:	b91e      	cbnz	r6, 80107c4 <_printf_i+0x1a4>
 80107bc:	6823      	ldr	r3, [r4, #0]
 80107be:	f023 0320 	bic.w	r3, r3, #32
 80107c2:	6023      	str	r3, [r4, #0]
 80107c4:	2310      	movs	r3, #16
 80107c6:	e7a7      	b.n	8010718 <_printf_i+0xf8>
 80107c8:	4824      	ldr	r0, [pc, #144]	; (801085c <_printf_i+0x23c>)
 80107ca:	e7e4      	b.n	8010796 <_printf_i+0x176>
 80107cc:	4615      	mov	r5, r2
 80107ce:	e7bd      	b.n	801074c <_printf_i+0x12c>
 80107d0:	682b      	ldr	r3, [r5, #0]
 80107d2:	6826      	ldr	r6, [r4, #0]
 80107d4:	6961      	ldr	r1, [r4, #20]
 80107d6:	1d18      	adds	r0, r3, #4
 80107d8:	6028      	str	r0, [r5, #0]
 80107da:	0635      	lsls	r5, r6, #24
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	d501      	bpl.n	80107e4 <_printf_i+0x1c4>
 80107e0:	6019      	str	r1, [r3, #0]
 80107e2:	e002      	b.n	80107ea <_printf_i+0x1ca>
 80107e4:	0670      	lsls	r0, r6, #25
 80107e6:	d5fb      	bpl.n	80107e0 <_printf_i+0x1c0>
 80107e8:	8019      	strh	r1, [r3, #0]
 80107ea:	2300      	movs	r3, #0
 80107ec:	6123      	str	r3, [r4, #16]
 80107ee:	4615      	mov	r5, r2
 80107f0:	e7bc      	b.n	801076c <_printf_i+0x14c>
 80107f2:	682b      	ldr	r3, [r5, #0]
 80107f4:	1d1a      	adds	r2, r3, #4
 80107f6:	602a      	str	r2, [r5, #0]
 80107f8:	681d      	ldr	r5, [r3, #0]
 80107fa:	6862      	ldr	r2, [r4, #4]
 80107fc:	2100      	movs	r1, #0
 80107fe:	4628      	mov	r0, r5
 8010800:	f7ef fd6e 	bl	80002e0 <memchr>
 8010804:	b108      	cbz	r0, 801080a <_printf_i+0x1ea>
 8010806:	1b40      	subs	r0, r0, r5
 8010808:	6060      	str	r0, [r4, #4]
 801080a:	6863      	ldr	r3, [r4, #4]
 801080c:	6123      	str	r3, [r4, #16]
 801080e:	2300      	movs	r3, #0
 8010810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010814:	e7aa      	b.n	801076c <_printf_i+0x14c>
 8010816:	6923      	ldr	r3, [r4, #16]
 8010818:	462a      	mov	r2, r5
 801081a:	4649      	mov	r1, r9
 801081c:	4640      	mov	r0, r8
 801081e:	47d0      	blx	sl
 8010820:	3001      	adds	r0, #1
 8010822:	d0ad      	beq.n	8010780 <_printf_i+0x160>
 8010824:	6823      	ldr	r3, [r4, #0]
 8010826:	079b      	lsls	r3, r3, #30
 8010828:	d413      	bmi.n	8010852 <_printf_i+0x232>
 801082a:	68e0      	ldr	r0, [r4, #12]
 801082c:	9b03      	ldr	r3, [sp, #12]
 801082e:	4298      	cmp	r0, r3
 8010830:	bfb8      	it	lt
 8010832:	4618      	movlt	r0, r3
 8010834:	e7a6      	b.n	8010784 <_printf_i+0x164>
 8010836:	2301      	movs	r3, #1
 8010838:	4632      	mov	r2, r6
 801083a:	4649      	mov	r1, r9
 801083c:	4640      	mov	r0, r8
 801083e:	47d0      	blx	sl
 8010840:	3001      	adds	r0, #1
 8010842:	d09d      	beq.n	8010780 <_printf_i+0x160>
 8010844:	3501      	adds	r5, #1
 8010846:	68e3      	ldr	r3, [r4, #12]
 8010848:	9903      	ldr	r1, [sp, #12]
 801084a:	1a5b      	subs	r3, r3, r1
 801084c:	42ab      	cmp	r3, r5
 801084e:	dcf2      	bgt.n	8010836 <_printf_i+0x216>
 8010850:	e7eb      	b.n	801082a <_printf_i+0x20a>
 8010852:	2500      	movs	r5, #0
 8010854:	f104 0619 	add.w	r6, r4, #25
 8010858:	e7f5      	b.n	8010846 <_printf_i+0x226>
 801085a:	bf00      	nop
 801085c:	08011b65 	.word	0x08011b65
 8010860:	08011b76 	.word	0x08011b76

08010864 <__sflush_r>:
 8010864:	898a      	ldrh	r2, [r1, #12]
 8010866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801086a:	4605      	mov	r5, r0
 801086c:	0710      	lsls	r0, r2, #28
 801086e:	460c      	mov	r4, r1
 8010870:	d458      	bmi.n	8010924 <__sflush_r+0xc0>
 8010872:	684b      	ldr	r3, [r1, #4]
 8010874:	2b00      	cmp	r3, #0
 8010876:	dc05      	bgt.n	8010884 <__sflush_r+0x20>
 8010878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801087a:	2b00      	cmp	r3, #0
 801087c:	dc02      	bgt.n	8010884 <__sflush_r+0x20>
 801087e:	2000      	movs	r0, #0
 8010880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010886:	2e00      	cmp	r6, #0
 8010888:	d0f9      	beq.n	801087e <__sflush_r+0x1a>
 801088a:	2300      	movs	r3, #0
 801088c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010890:	682f      	ldr	r7, [r5, #0]
 8010892:	6a21      	ldr	r1, [r4, #32]
 8010894:	602b      	str	r3, [r5, #0]
 8010896:	d032      	beq.n	80108fe <__sflush_r+0x9a>
 8010898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801089a:	89a3      	ldrh	r3, [r4, #12]
 801089c:	075a      	lsls	r2, r3, #29
 801089e:	d505      	bpl.n	80108ac <__sflush_r+0x48>
 80108a0:	6863      	ldr	r3, [r4, #4]
 80108a2:	1ac0      	subs	r0, r0, r3
 80108a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108a6:	b10b      	cbz	r3, 80108ac <__sflush_r+0x48>
 80108a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108aa:	1ac0      	subs	r0, r0, r3
 80108ac:	2300      	movs	r3, #0
 80108ae:	4602      	mov	r2, r0
 80108b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108b2:	6a21      	ldr	r1, [r4, #32]
 80108b4:	4628      	mov	r0, r5
 80108b6:	47b0      	blx	r6
 80108b8:	1c43      	adds	r3, r0, #1
 80108ba:	89a3      	ldrh	r3, [r4, #12]
 80108bc:	d106      	bne.n	80108cc <__sflush_r+0x68>
 80108be:	6829      	ldr	r1, [r5, #0]
 80108c0:	291d      	cmp	r1, #29
 80108c2:	d82b      	bhi.n	801091c <__sflush_r+0xb8>
 80108c4:	4a29      	ldr	r2, [pc, #164]	; (801096c <__sflush_r+0x108>)
 80108c6:	410a      	asrs	r2, r1
 80108c8:	07d6      	lsls	r6, r2, #31
 80108ca:	d427      	bmi.n	801091c <__sflush_r+0xb8>
 80108cc:	2200      	movs	r2, #0
 80108ce:	6062      	str	r2, [r4, #4]
 80108d0:	04d9      	lsls	r1, r3, #19
 80108d2:	6922      	ldr	r2, [r4, #16]
 80108d4:	6022      	str	r2, [r4, #0]
 80108d6:	d504      	bpl.n	80108e2 <__sflush_r+0x7e>
 80108d8:	1c42      	adds	r2, r0, #1
 80108da:	d101      	bne.n	80108e0 <__sflush_r+0x7c>
 80108dc:	682b      	ldr	r3, [r5, #0]
 80108de:	b903      	cbnz	r3, 80108e2 <__sflush_r+0x7e>
 80108e0:	6560      	str	r0, [r4, #84]	; 0x54
 80108e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108e4:	602f      	str	r7, [r5, #0]
 80108e6:	2900      	cmp	r1, #0
 80108e8:	d0c9      	beq.n	801087e <__sflush_r+0x1a>
 80108ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108ee:	4299      	cmp	r1, r3
 80108f0:	d002      	beq.n	80108f8 <__sflush_r+0x94>
 80108f2:	4628      	mov	r0, r5
 80108f4:	f7ff fc8e 	bl	8010214 <_free_r>
 80108f8:	2000      	movs	r0, #0
 80108fa:	6360      	str	r0, [r4, #52]	; 0x34
 80108fc:	e7c0      	b.n	8010880 <__sflush_r+0x1c>
 80108fe:	2301      	movs	r3, #1
 8010900:	4628      	mov	r0, r5
 8010902:	47b0      	blx	r6
 8010904:	1c41      	adds	r1, r0, #1
 8010906:	d1c8      	bne.n	801089a <__sflush_r+0x36>
 8010908:	682b      	ldr	r3, [r5, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d0c5      	beq.n	801089a <__sflush_r+0x36>
 801090e:	2b1d      	cmp	r3, #29
 8010910:	d001      	beq.n	8010916 <__sflush_r+0xb2>
 8010912:	2b16      	cmp	r3, #22
 8010914:	d101      	bne.n	801091a <__sflush_r+0xb6>
 8010916:	602f      	str	r7, [r5, #0]
 8010918:	e7b1      	b.n	801087e <__sflush_r+0x1a>
 801091a:	89a3      	ldrh	r3, [r4, #12]
 801091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010920:	81a3      	strh	r3, [r4, #12]
 8010922:	e7ad      	b.n	8010880 <__sflush_r+0x1c>
 8010924:	690f      	ldr	r7, [r1, #16]
 8010926:	2f00      	cmp	r7, #0
 8010928:	d0a9      	beq.n	801087e <__sflush_r+0x1a>
 801092a:	0793      	lsls	r3, r2, #30
 801092c:	680e      	ldr	r6, [r1, #0]
 801092e:	bf08      	it	eq
 8010930:	694b      	ldreq	r3, [r1, #20]
 8010932:	600f      	str	r7, [r1, #0]
 8010934:	bf18      	it	ne
 8010936:	2300      	movne	r3, #0
 8010938:	eba6 0807 	sub.w	r8, r6, r7
 801093c:	608b      	str	r3, [r1, #8]
 801093e:	f1b8 0f00 	cmp.w	r8, #0
 8010942:	dd9c      	ble.n	801087e <__sflush_r+0x1a>
 8010944:	6a21      	ldr	r1, [r4, #32]
 8010946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010948:	4643      	mov	r3, r8
 801094a:	463a      	mov	r2, r7
 801094c:	4628      	mov	r0, r5
 801094e:	47b0      	blx	r6
 8010950:	2800      	cmp	r0, #0
 8010952:	dc06      	bgt.n	8010962 <__sflush_r+0xfe>
 8010954:	89a3      	ldrh	r3, [r4, #12]
 8010956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801095a:	81a3      	strh	r3, [r4, #12]
 801095c:	f04f 30ff 	mov.w	r0, #4294967295
 8010960:	e78e      	b.n	8010880 <__sflush_r+0x1c>
 8010962:	4407      	add	r7, r0
 8010964:	eba8 0800 	sub.w	r8, r8, r0
 8010968:	e7e9      	b.n	801093e <__sflush_r+0xda>
 801096a:	bf00      	nop
 801096c:	dfbffffe 	.word	0xdfbffffe

08010970 <_fflush_r>:
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	690b      	ldr	r3, [r1, #16]
 8010974:	4605      	mov	r5, r0
 8010976:	460c      	mov	r4, r1
 8010978:	b913      	cbnz	r3, 8010980 <_fflush_r+0x10>
 801097a:	2500      	movs	r5, #0
 801097c:	4628      	mov	r0, r5
 801097e:	bd38      	pop	{r3, r4, r5, pc}
 8010980:	b118      	cbz	r0, 801098a <_fflush_r+0x1a>
 8010982:	6a03      	ldr	r3, [r0, #32]
 8010984:	b90b      	cbnz	r3, 801098a <_fflush_r+0x1a>
 8010986:	f7ff fb19 	bl	800ffbc <__sinit>
 801098a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d0f3      	beq.n	801097a <_fflush_r+0xa>
 8010992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010994:	07d0      	lsls	r0, r2, #31
 8010996:	d404      	bmi.n	80109a2 <_fflush_r+0x32>
 8010998:	0599      	lsls	r1, r3, #22
 801099a:	d402      	bmi.n	80109a2 <_fflush_r+0x32>
 801099c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801099e:	f7ff fc21 	bl	80101e4 <__retarget_lock_acquire_recursive>
 80109a2:	4628      	mov	r0, r5
 80109a4:	4621      	mov	r1, r4
 80109a6:	f7ff ff5d 	bl	8010864 <__sflush_r>
 80109aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109ac:	07da      	lsls	r2, r3, #31
 80109ae:	4605      	mov	r5, r0
 80109b0:	d4e4      	bmi.n	801097c <_fflush_r+0xc>
 80109b2:	89a3      	ldrh	r3, [r4, #12]
 80109b4:	059b      	lsls	r3, r3, #22
 80109b6:	d4e1      	bmi.n	801097c <_fflush_r+0xc>
 80109b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ba:	f7ff fc14 	bl	80101e6 <__retarget_lock_release_recursive>
 80109be:	e7dd      	b.n	801097c <_fflush_r+0xc>

080109c0 <__swbuf_r>:
 80109c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109c2:	460e      	mov	r6, r1
 80109c4:	4614      	mov	r4, r2
 80109c6:	4605      	mov	r5, r0
 80109c8:	b118      	cbz	r0, 80109d2 <__swbuf_r+0x12>
 80109ca:	6a03      	ldr	r3, [r0, #32]
 80109cc:	b90b      	cbnz	r3, 80109d2 <__swbuf_r+0x12>
 80109ce:	f7ff faf5 	bl	800ffbc <__sinit>
 80109d2:	69a3      	ldr	r3, [r4, #24]
 80109d4:	60a3      	str	r3, [r4, #8]
 80109d6:	89a3      	ldrh	r3, [r4, #12]
 80109d8:	071a      	lsls	r2, r3, #28
 80109da:	d525      	bpl.n	8010a28 <__swbuf_r+0x68>
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	b31b      	cbz	r3, 8010a28 <__swbuf_r+0x68>
 80109e0:	6823      	ldr	r3, [r4, #0]
 80109e2:	6922      	ldr	r2, [r4, #16]
 80109e4:	1a98      	subs	r0, r3, r2
 80109e6:	6963      	ldr	r3, [r4, #20]
 80109e8:	b2f6      	uxtb	r6, r6
 80109ea:	4283      	cmp	r3, r0
 80109ec:	4637      	mov	r7, r6
 80109ee:	dc04      	bgt.n	80109fa <__swbuf_r+0x3a>
 80109f0:	4621      	mov	r1, r4
 80109f2:	4628      	mov	r0, r5
 80109f4:	f7ff ffbc 	bl	8010970 <_fflush_r>
 80109f8:	b9e0      	cbnz	r0, 8010a34 <__swbuf_r+0x74>
 80109fa:	68a3      	ldr	r3, [r4, #8]
 80109fc:	3b01      	subs	r3, #1
 80109fe:	60a3      	str	r3, [r4, #8]
 8010a00:	6823      	ldr	r3, [r4, #0]
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	6022      	str	r2, [r4, #0]
 8010a06:	701e      	strb	r6, [r3, #0]
 8010a08:	6962      	ldr	r2, [r4, #20]
 8010a0a:	1c43      	adds	r3, r0, #1
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d004      	beq.n	8010a1a <__swbuf_r+0x5a>
 8010a10:	89a3      	ldrh	r3, [r4, #12]
 8010a12:	07db      	lsls	r3, r3, #31
 8010a14:	d506      	bpl.n	8010a24 <__swbuf_r+0x64>
 8010a16:	2e0a      	cmp	r6, #10
 8010a18:	d104      	bne.n	8010a24 <__swbuf_r+0x64>
 8010a1a:	4621      	mov	r1, r4
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	f7ff ffa7 	bl	8010970 <_fflush_r>
 8010a22:	b938      	cbnz	r0, 8010a34 <__swbuf_r+0x74>
 8010a24:	4638      	mov	r0, r7
 8010a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a28:	4621      	mov	r1, r4
 8010a2a:	4628      	mov	r0, r5
 8010a2c:	f000 f806 	bl	8010a3c <__swsetup_r>
 8010a30:	2800      	cmp	r0, #0
 8010a32:	d0d5      	beq.n	80109e0 <__swbuf_r+0x20>
 8010a34:	f04f 37ff 	mov.w	r7, #4294967295
 8010a38:	e7f4      	b.n	8010a24 <__swbuf_r+0x64>
	...

08010a3c <__swsetup_r>:
 8010a3c:	b538      	push	{r3, r4, r5, lr}
 8010a3e:	4b2a      	ldr	r3, [pc, #168]	; (8010ae8 <__swsetup_r+0xac>)
 8010a40:	4605      	mov	r5, r0
 8010a42:	6818      	ldr	r0, [r3, #0]
 8010a44:	460c      	mov	r4, r1
 8010a46:	b118      	cbz	r0, 8010a50 <__swsetup_r+0x14>
 8010a48:	6a03      	ldr	r3, [r0, #32]
 8010a4a:	b90b      	cbnz	r3, 8010a50 <__swsetup_r+0x14>
 8010a4c:	f7ff fab6 	bl	800ffbc <__sinit>
 8010a50:	89a3      	ldrh	r3, [r4, #12]
 8010a52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a56:	0718      	lsls	r0, r3, #28
 8010a58:	d422      	bmi.n	8010aa0 <__swsetup_r+0x64>
 8010a5a:	06d9      	lsls	r1, r3, #27
 8010a5c:	d407      	bmi.n	8010a6e <__swsetup_r+0x32>
 8010a5e:	2309      	movs	r3, #9
 8010a60:	602b      	str	r3, [r5, #0]
 8010a62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a66:	81a3      	strh	r3, [r4, #12]
 8010a68:	f04f 30ff 	mov.w	r0, #4294967295
 8010a6c:	e034      	b.n	8010ad8 <__swsetup_r+0x9c>
 8010a6e:	0758      	lsls	r0, r3, #29
 8010a70:	d512      	bpl.n	8010a98 <__swsetup_r+0x5c>
 8010a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a74:	b141      	cbz	r1, 8010a88 <__swsetup_r+0x4c>
 8010a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a7a:	4299      	cmp	r1, r3
 8010a7c:	d002      	beq.n	8010a84 <__swsetup_r+0x48>
 8010a7e:	4628      	mov	r0, r5
 8010a80:	f7ff fbc8 	bl	8010214 <_free_r>
 8010a84:	2300      	movs	r3, #0
 8010a86:	6363      	str	r3, [r4, #52]	; 0x34
 8010a88:	89a3      	ldrh	r3, [r4, #12]
 8010a8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a8e:	81a3      	strh	r3, [r4, #12]
 8010a90:	2300      	movs	r3, #0
 8010a92:	6063      	str	r3, [r4, #4]
 8010a94:	6923      	ldr	r3, [r4, #16]
 8010a96:	6023      	str	r3, [r4, #0]
 8010a98:	89a3      	ldrh	r3, [r4, #12]
 8010a9a:	f043 0308 	orr.w	r3, r3, #8
 8010a9e:	81a3      	strh	r3, [r4, #12]
 8010aa0:	6923      	ldr	r3, [r4, #16]
 8010aa2:	b94b      	cbnz	r3, 8010ab8 <__swsetup_r+0x7c>
 8010aa4:	89a3      	ldrh	r3, [r4, #12]
 8010aa6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010aae:	d003      	beq.n	8010ab8 <__swsetup_r+0x7c>
 8010ab0:	4621      	mov	r1, r4
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	f000 f884 	bl	8010bc0 <__smakebuf_r>
 8010ab8:	89a0      	ldrh	r0, [r4, #12]
 8010aba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010abe:	f010 0301 	ands.w	r3, r0, #1
 8010ac2:	d00a      	beq.n	8010ada <__swsetup_r+0x9e>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	60a3      	str	r3, [r4, #8]
 8010ac8:	6963      	ldr	r3, [r4, #20]
 8010aca:	425b      	negs	r3, r3
 8010acc:	61a3      	str	r3, [r4, #24]
 8010ace:	6923      	ldr	r3, [r4, #16]
 8010ad0:	b943      	cbnz	r3, 8010ae4 <__swsetup_r+0xa8>
 8010ad2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010ad6:	d1c4      	bne.n	8010a62 <__swsetup_r+0x26>
 8010ad8:	bd38      	pop	{r3, r4, r5, pc}
 8010ada:	0781      	lsls	r1, r0, #30
 8010adc:	bf58      	it	pl
 8010ade:	6963      	ldrpl	r3, [r4, #20]
 8010ae0:	60a3      	str	r3, [r4, #8]
 8010ae2:	e7f4      	b.n	8010ace <__swsetup_r+0x92>
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	e7f7      	b.n	8010ad8 <__swsetup_r+0x9c>
 8010ae8:	2400006c 	.word	0x2400006c

08010aec <_raise_r>:
 8010aec:	291f      	cmp	r1, #31
 8010aee:	b538      	push	{r3, r4, r5, lr}
 8010af0:	4604      	mov	r4, r0
 8010af2:	460d      	mov	r5, r1
 8010af4:	d904      	bls.n	8010b00 <_raise_r+0x14>
 8010af6:	2316      	movs	r3, #22
 8010af8:	6003      	str	r3, [r0, #0]
 8010afa:	f04f 30ff 	mov.w	r0, #4294967295
 8010afe:	bd38      	pop	{r3, r4, r5, pc}
 8010b00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010b02:	b112      	cbz	r2, 8010b0a <_raise_r+0x1e>
 8010b04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b08:	b94b      	cbnz	r3, 8010b1e <_raise_r+0x32>
 8010b0a:	4620      	mov	r0, r4
 8010b0c:	f000 f830 	bl	8010b70 <_getpid_r>
 8010b10:	462a      	mov	r2, r5
 8010b12:	4601      	mov	r1, r0
 8010b14:	4620      	mov	r0, r4
 8010b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b1a:	f000 b817 	b.w	8010b4c <_kill_r>
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d00a      	beq.n	8010b38 <_raise_r+0x4c>
 8010b22:	1c59      	adds	r1, r3, #1
 8010b24:	d103      	bne.n	8010b2e <_raise_r+0x42>
 8010b26:	2316      	movs	r3, #22
 8010b28:	6003      	str	r3, [r0, #0]
 8010b2a:	2001      	movs	r0, #1
 8010b2c:	e7e7      	b.n	8010afe <_raise_r+0x12>
 8010b2e:	2400      	movs	r4, #0
 8010b30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b34:	4628      	mov	r0, r5
 8010b36:	4798      	blx	r3
 8010b38:	2000      	movs	r0, #0
 8010b3a:	e7e0      	b.n	8010afe <_raise_r+0x12>

08010b3c <raise>:
 8010b3c:	4b02      	ldr	r3, [pc, #8]	; (8010b48 <raise+0xc>)
 8010b3e:	4601      	mov	r1, r0
 8010b40:	6818      	ldr	r0, [r3, #0]
 8010b42:	f7ff bfd3 	b.w	8010aec <_raise_r>
 8010b46:	bf00      	nop
 8010b48:	2400006c 	.word	0x2400006c

08010b4c <_kill_r>:
 8010b4c:	b538      	push	{r3, r4, r5, lr}
 8010b4e:	4d07      	ldr	r5, [pc, #28]	; (8010b6c <_kill_r+0x20>)
 8010b50:	2300      	movs	r3, #0
 8010b52:	4604      	mov	r4, r0
 8010b54:	4608      	mov	r0, r1
 8010b56:	4611      	mov	r1, r2
 8010b58:	602b      	str	r3, [r5, #0]
 8010b5a:	f7f0 f9bb 	bl	8000ed4 <_kill>
 8010b5e:	1c43      	adds	r3, r0, #1
 8010b60:	d102      	bne.n	8010b68 <_kill_r+0x1c>
 8010b62:	682b      	ldr	r3, [r5, #0]
 8010b64:	b103      	cbz	r3, 8010b68 <_kill_r+0x1c>
 8010b66:	6023      	str	r3, [r4, #0]
 8010b68:	bd38      	pop	{r3, r4, r5, pc}
 8010b6a:	bf00      	nop
 8010b6c:	2400d5d0 	.word	0x2400d5d0

08010b70 <_getpid_r>:
 8010b70:	f7f0 b9a8 	b.w	8000ec4 <_getpid>

08010b74 <__swhatbuf_r>:
 8010b74:	b570      	push	{r4, r5, r6, lr}
 8010b76:	460c      	mov	r4, r1
 8010b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b7c:	2900      	cmp	r1, #0
 8010b7e:	b096      	sub	sp, #88	; 0x58
 8010b80:	4615      	mov	r5, r2
 8010b82:	461e      	mov	r6, r3
 8010b84:	da0d      	bge.n	8010ba2 <__swhatbuf_r+0x2e>
 8010b86:	89a3      	ldrh	r3, [r4, #12]
 8010b88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010b8c:	f04f 0100 	mov.w	r1, #0
 8010b90:	bf0c      	ite	eq
 8010b92:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010b96:	2340      	movne	r3, #64	; 0x40
 8010b98:	2000      	movs	r0, #0
 8010b9a:	6031      	str	r1, [r6, #0]
 8010b9c:	602b      	str	r3, [r5, #0]
 8010b9e:	b016      	add	sp, #88	; 0x58
 8010ba0:	bd70      	pop	{r4, r5, r6, pc}
 8010ba2:	466a      	mov	r2, sp
 8010ba4:	f000 f848 	bl	8010c38 <_fstat_r>
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	dbec      	blt.n	8010b86 <__swhatbuf_r+0x12>
 8010bac:	9901      	ldr	r1, [sp, #4]
 8010bae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010bb2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010bb6:	4259      	negs	r1, r3
 8010bb8:	4159      	adcs	r1, r3
 8010bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bbe:	e7eb      	b.n	8010b98 <__swhatbuf_r+0x24>

08010bc0 <__smakebuf_r>:
 8010bc0:	898b      	ldrh	r3, [r1, #12]
 8010bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bc4:	079d      	lsls	r5, r3, #30
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	460c      	mov	r4, r1
 8010bca:	d507      	bpl.n	8010bdc <__smakebuf_r+0x1c>
 8010bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010bd0:	6023      	str	r3, [r4, #0]
 8010bd2:	6123      	str	r3, [r4, #16]
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	6163      	str	r3, [r4, #20]
 8010bd8:	b002      	add	sp, #8
 8010bda:	bd70      	pop	{r4, r5, r6, pc}
 8010bdc:	ab01      	add	r3, sp, #4
 8010bde:	466a      	mov	r2, sp
 8010be0:	f7ff ffc8 	bl	8010b74 <__swhatbuf_r>
 8010be4:	9900      	ldr	r1, [sp, #0]
 8010be6:	4605      	mov	r5, r0
 8010be8:	4630      	mov	r0, r6
 8010bea:	f7ff f8a9 	bl	800fd40 <_malloc_r>
 8010bee:	b948      	cbnz	r0, 8010c04 <__smakebuf_r+0x44>
 8010bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bf4:	059a      	lsls	r2, r3, #22
 8010bf6:	d4ef      	bmi.n	8010bd8 <__smakebuf_r+0x18>
 8010bf8:	f023 0303 	bic.w	r3, r3, #3
 8010bfc:	f043 0302 	orr.w	r3, r3, #2
 8010c00:	81a3      	strh	r3, [r4, #12]
 8010c02:	e7e3      	b.n	8010bcc <__smakebuf_r+0xc>
 8010c04:	89a3      	ldrh	r3, [r4, #12]
 8010c06:	6020      	str	r0, [r4, #0]
 8010c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c0c:	81a3      	strh	r3, [r4, #12]
 8010c0e:	9b00      	ldr	r3, [sp, #0]
 8010c10:	6163      	str	r3, [r4, #20]
 8010c12:	9b01      	ldr	r3, [sp, #4]
 8010c14:	6120      	str	r0, [r4, #16]
 8010c16:	b15b      	cbz	r3, 8010c30 <__smakebuf_r+0x70>
 8010c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	f000 f81d 	bl	8010c5c <_isatty_r>
 8010c22:	b128      	cbz	r0, 8010c30 <__smakebuf_r+0x70>
 8010c24:	89a3      	ldrh	r3, [r4, #12]
 8010c26:	f023 0303 	bic.w	r3, r3, #3
 8010c2a:	f043 0301 	orr.w	r3, r3, #1
 8010c2e:	81a3      	strh	r3, [r4, #12]
 8010c30:	89a3      	ldrh	r3, [r4, #12]
 8010c32:	431d      	orrs	r5, r3
 8010c34:	81a5      	strh	r5, [r4, #12]
 8010c36:	e7cf      	b.n	8010bd8 <__smakebuf_r+0x18>

08010c38 <_fstat_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	4d07      	ldr	r5, [pc, #28]	; (8010c58 <_fstat_r+0x20>)
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	4604      	mov	r4, r0
 8010c40:	4608      	mov	r0, r1
 8010c42:	4611      	mov	r1, r2
 8010c44:	602b      	str	r3, [r5, #0]
 8010c46:	f7f0 f9a4 	bl	8000f92 <_fstat>
 8010c4a:	1c43      	adds	r3, r0, #1
 8010c4c:	d102      	bne.n	8010c54 <_fstat_r+0x1c>
 8010c4e:	682b      	ldr	r3, [r5, #0]
 8010c50:	b103      	cbz	r3, 8010c54 <_fstat_r+0x1c>
 8010c52:	6023      	str	r3, [r4, #0]
 8010c54:	bd38      	pop	{r3, r4, r5, pc}
 8010c56:	bf00      	nop
 8010c58:	2400d5d0 	.word	0x2400d5d0

08010c5c <_isatty_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	4d06      	ldr	r5, [pc, #24]	; (8010c78 <_isatty_r+0x1c>)
 8010c60:	2300      	movs	r3, #0
 8010c62:	4604      	mov	r4, r0
 8010c64:	4608      	mov	r0, r1
 8010c66:	602b      	str	r3, [r5, #0]
 8010c68:	f7f0 f9a3 	bl	8000fb2 <_isatty>
 8010c6c:	1c43      	adds	r3, r0, #1
 8010c6e:	d102      	bne.n	8010c76 <_isatty_r+0x1a>
 8010c70:	682b      	ldr	r3, [r5, #0]
 8010c72:	b103      	cbz	r3, 8010c76 <_isatty_r+0x1a>
 8010c74:	6023      	str	r3, [r4, #0]
 8010c76:	bd38      	pop	{r3, r4, r5, pc}
 8010c78:	2400d5d0 	.word	0x2400d5d0

08010c7c <atan2>:
 8010c7c:	f000 bde4 	b.w	8011848 <__ieee754_atan2>

08010c80 <sqrt>:
 8010c80:	b508      	push	{r3, lr}
 8010c82:	ed2d 8b04 	vpush	{d8-d9}
 8010c86:	eeb0 8b40 	vmov.f64	d8, d0
 8010c8a:	f000 fdd9 	bl	8011840 <__ieee754_sqrt>
 8010c8e:	eeb4 8b48 	vcmp.f64	d8, d8
 8010c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c96:	d60c      	bvs.n	8010cb2 <sqrt+0x32>
 8010c98:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010cb8 <sqrt+0x38>
 8010c9c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca4:	d505      	bpl.n	8010cb2 <sqrt+0x32>
 8010ca6:	f7ff fa73 	bl	8010190 <__errno>
 8010caa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010cae:	2321      	movs	r3, #33	; 0x21
 8010cb0:	6003      	str	r3, [r0, #0]
 8010cb2:	ecbd 8b04 	vpop	{d8-d9}
 8010cb6:	bd08      	pop	{r3, pc}
	...

08010cc0 <atan>:
 8010cc0:	b538      	push	{r3, r4, r5, lr}
 8010cc2:	eeb0 7b40 	vmov.f64	d7, d0
 8010cc6:	ee17 5a90 	vmov	r5, s15
 8010cca:	4b73      	ldr	r3, [pc, #460]	; (8010e98 <atan+0x1d8>)
 8010ccc:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010cd0:	429c      	cmp	r4, r3
 8010cd2:	dd13      	ble.n	8010cfc <atan+0x3c>
 8010cd4:	4b71      	ldr	r3, [pc, #452]	; (8010e9c <atan+0x1dc>)
 8010cd6:	429c      	cmp	r4, r3
 8010cd8:	dc03      	bgt.n	8010ce2 <atan+0x22>
 8010cda:	d107      	bne.n	8010cec <atan+0x2c>
 8010cdc:	ee10 3a10 	vmov	r3, s0
 8010ce0:	b123      	cbz	r3, 8010cec <atan+0x2c>
 8010ce2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010ce6:	eeb0 0b47 	vmov.f64	d0, d7
 8010cea:	bd38      	pop	{r3, r4, r5, pc}
 8010cec:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8010e28 <atan+0x168>
 8010cf0:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8010e30 <atan+0x170>
 8010cf4:	2d00      	cmp	r5, #0
 8010cf6:	fe37 7b06 	vselgt.f64	d7, d7, d6
 8010cfa:	e7f4      	b.n	8010ce6 <atan+0x26>
 8010cfc:	4b68      	ldr	r3, [pc, #416]	; (8010ea0 <atan+0x1e0>)
 8010cfe:	429c      	cmp	r4, r3
 8010d00:	dc11      	bgt.n	8010d26 <atan+0x66>
 8010d02:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010d06:	429c      	cmp	r4, r3
 8010d08:	dc0a      	bgt.n	8010d20 <atan+0x60>
 8010d0a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010d0e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8010e38 <atan+0x178>
 8010d12:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010d16:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1e:	dce2      	bgt.n	8010ce6 <atan+0x26>
 8010d20:	f04f 33ff 	mov.w	r3, #4294967295
 8010d24:	e013      	b.n	8010d4e <atan+0x8e>
 8010d26:	f000 f8c5 	bl	8010eb4 <fabs>
 8010d2a:	4b5e      	ldr	r3, [pc, #376]	; (8010ea4 <atan+0x1e4>)
 8010d2c:	429c      	cmp	r4, r3
 8010d2e:	dc4f      	bgt.n	8010dd0 <atan+0x110>
 8010d30:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010d34:	429c      	cmp	r4, r3
 8010d36:	dc41      	bgt.n	8010dbc <atan+0xfc>
 8010d38:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010d3c:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8010d40:	2300      	movs	r3, #0
 8010d42:	eea0 5b07 	vfma.f64	d5, d0, d7
 8010d46:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010d4a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 8010d4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010e40 <atan+0x180>
 8010d52:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010d56:	ee24 5b04 	vmul.f64	d5, d4, d4
 8010d5a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010e48 <atan+0x188>
 8010d5e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010d62:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010e50 <atan+0x190>
 8010d66:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010d6a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010e58 <atan+0x198>
 8010d6e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010d72:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010e60 <atan+0x1a0>
 8010d76:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010d7a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010e68 <atan+0x1a8>
 8010d7e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010e70 <atan+0x1b0>
 8010d82:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010d86:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010e78 <atan+0x1b8>
 8010d8a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8010d8e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010e80 <atan+0x1c0>
 8010d92:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010d96:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010e88 <atan+0x1c8>
 8010d9a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8010d9e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010e90 <atan+0x1d0>
 8010da2:	1c5a      	adds	r2, r3, #1
 8010da4:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010da8:	ee26 6b05 	vmul.f64	d6, d6, d5
 8010dac:	eea3 6b04 	vfma.f64	d6, d3, d4
 8010db0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010db4:	d121      	bne.n	8010dfa <atan+0x13a>
 8010db6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010dba:	e794      	b.n	8010ce6 <atan+0x26>
 8010dbc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	ee30 5b47 	vsub.f64	d5, d0, d7
 8010dc6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010dca:	ee85 7b00 	vdiv.f64	d7, d5, d0
 8010dce:	e7be      	b.n	8010d4e <atan+0x8e>
 8010dd0:	4b35      	ldr	r3, [pc, #212]	; (8010ea8 <atan+0x1e8>)
 8010dd2:	429c      	cmp	r4, r3
 8010dd4:	da0b      	bge.n	8010dee <atan+0x12e>
 8010dd6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010dda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010dde:	ee30 5b47 	vsub.f64	d5, d0, d7
 8010de2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010de6:	2302      	movs	r3, #2
 8010de8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8010dec:	e7af      	b.n	8010d4e <atan+0x8e>
 8010dee:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010df2:	2303      	movs	r3, #3
 8010df4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010df8:	e7a9      	b.n	8010d4e <atan+0x8e>
 8010dfa:	4a2c      	ldr	r2, [pc, #176]	; (8010eac <atan+0x1ec>)
 8010dfc:	492c      	ldr	r1, [pc, #176]	; (8010eb0 <atan+0x1f0>)
 8010dfe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e02:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010e06:	ed93 5b00 	vldr	d5, [r3]
 8010e0a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010e12:	ed92 7b00 	vldr	d7, [r2]
 8010e16:	2d00      	cmp	r5, #0
 8010e18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e1c:	bfb8      	it	lt
 8010e1e:	eeb1 7b47 	vneglt.f64	d7, d7
 8010e22:	e760      	b.n	8010ce6 <atan+0x26>
 8010e24:	f3af 8000 	nop.w
 8010e28:	54442d18 	.word	0x54442d18
 8010e2c:	3ff921fb 	.word	0x3ff921fb
 8010e30:	54442d18 	.word	0x54442d18
 8010e34:	bff921fb 	.word	0xbff921fb
 8010e38:	8800759c 	.word	0x8800759c
 8010e3c:	7e37e43c 	.word	0x7e37e43c
 8010e40:	e322da11 	.word	0xe322da11
 8010e44:	3f90ad3a 	.word	0x3f90ad3a
 8010e48:	24760deb 	.word	0x24760deb
 8010e4c:	3fa97b4b 	.word	0x3fa97b4b
 8010e50:	a0d03d51 	.word	0xa0d03d51
 8010e54:	3fb10d66 	.word	0x3fb10d66
 8010e58:	c54c206e 	.word	0xc54c206e
 8010e5c:	3fb745cd 	.word	0x3fb745cd
 8010e60:	920083ff 	.word	0x920083ff
 8010e64:	3fc24924 	.word	0x3fc24924
 8010e68:	5555550d 	.word	0x5555550d
 8010e6c:	3fd55555 	.word	0x3fd55555
 8010e70:	52defd9a 	.word	0x52defd9a
 8010e74:	bfadde2d 	.word	0xbfadde2d
 8010e78:	2c6a6c2f 	.word	0x2c6a6c2f
 8010e7c:	bfa2b444 	.word	0xbfa2b444
 8010e80:	af749a6d 	.word	0xaf749a6d
 8010e84:	bfb3b0f2 	.word	0xbfb3b0f2
 8010e88:	fe231671 	.word	0xfe231671
 8010e8c:	bfbc71c6 	.word	0xbfbc71c6
 8010e90:	9998ebc4 	.word	0x9998ebc4
 8010e94:	bfc99999 	.word	0xbfc99999
 8010e98:	440fffff 	.word	0x440fffff
 8010e9c:	7ff00000 	.word	0x7ff00000
 8010ea0:	3fdbffff 	.word	0x3fdbffff
 8010ea4:	3ff2ffff 	.word	0x3ff2ffff
 8010ea8:	40038000 	.word	0x40038000
 8010eac:	08011b88 	.word	0x08011b88
 8010eb0:	08011ba8 	.word	0x08011ba8

08010eb4 <fabs>:
 8010eb4:	ec51 0b10 	vmov	r0, r1, d0
 8010eb8:	ee10 2a10 	vmov	r2, s0
 8010ebc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010ec0:	ec43 2b10 	vmov	d0, r2, r3
 8010ec4:	4770      	bx	lr
	...

08010ec8 <tanh>:
 8010ec8:	b538      	push	{r3, r4, r5, lr}
 8010eca:	eeb0 6b40 	vmov.f64	d6, d0
 8010ece:	ee16 5a90 	vmov	r5, s13
 8010ed2:	4a2e      	ldr	r2, [pc, #184]	; (8010f8c <tanh+0xc4>)
 8010ed4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	ed2d 8b02 	vpush	{d8}
 8010ede:	dd0f      	ble.n	8010f00 <tanh+0x38>
 8010ee0:	4b2b      	ldr	r3, [pc, #172]	; (8010f90 <tanh+0xc8>)
 8010ee2:	ed93 4b00 	vldr	d4, [r3]
 8010ee6:	ed93 0b00 	vldr	d0, [r3]
 8010eea:	ee84 7b06 	vdiv.f64	d7, d4, d6
 8010eee:	2d00      	cmp	r5, #0
 8010ef0:	bfac      	ite	ge
 8010ef2:	ee37 0b00 	vaddge.f64	d0, d7, d0
 8010ef6:	ee37 0b40 	vsublt.f64	d0, d7, d0
 8010efa:	ecbd 8b02 	vpop	{d8}
 8010efe:	bd38      	pop	{r3, r4, r5, pc}
 8010f00:	4a24      	ldr	r2, [pc, #144]	; (8010f94 <tanh+0xcc>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	dc39      	bgt.n	8010f7a <tanh+0xb2>
 8010f06:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 8010f0a:	da07      	bge.n	8010f1c <tanh+0x54>
 8010f0c:	4b20      	ldr	r3, [pc, #128]	; (8010f90 <tanh+0xc8>)
 8010f0e:	ed93 7b00 	vldr	d7, [r3]
 8010f12:	ee37 7b00 	vadd.f64	d7, d7, d0
 8010f16:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010f1a:	e7ee      	b.n	8010efa <tanh+0x32>
 8010f1c:	4a1e      	ldr	r2, [pc, #120]	; (8010f98 <tanh+0xd0>)
 8010f1e:	4c1f      	ldr	r4, [pc, #124]	; (8010f9c <tanh+0xd4>)
 8010f20:	4293      	cmp	r3, r2
 8010f22:	dd19      	ble.n	8010f58 <tanh+0x90>
 8010f24:	f7ff ffc6 	bl	8010eb4 <fabs>
 8010f28:	ed94 7b00 	vldr	d7, [r4]
 8010f2c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f30:	f000 f83a 	bl	8010fa8 <expm1>
 8010f34:	4b16      	ldr	r3, [pc, #88]	; (8010f90 <tanh+0xc8>)
 8010f36:	ed93 7b00 	vldr	d7, [r3]
 8010f3a:	ed94 5b00 	vldr	d5, [r4]
 8010f3e:	ed94 6b00 	vldr	d6, [r4]
 8010f42:	ee36 0b00 	vadd.f64	d0, d6, d0
 8010f46:	ee85 6b00 	vdiv.f64	d6, d5, d0
 8010f4a:	ee37 0b46 	vsub.f64	d0, d7, d6
 8010f4e:	2d00      	cmp	r5, #0
 8010f50:	bfb8      	it	lt
 8010f52:	eeb1 0b40 	vneglt.f64	d0, d0
 8010f56:	e7d0      	b.n	8010efa <tanh+0x32>
 8010f58:	ed94 8b00 	vldr	d8, [r4]
 8010f5c:	f7ff ffaa 	bl	8010eb4 <fabs>
 8010f60:	ee28 0b40 	vnmul.f64	d0, d8, d0
 8010f64:	f000 f820 	bl	8010fa8 <expm1>
 8010f68:	ed94 7b00 	vldr	d7, [r4]
 8010f6c:	eeb1 6b40 	vneg.f64	d6, d0
 8010f70:	ee37 7b00 	vadd.f64	d7, d7, d0
 8010f74:	ee86 0b07 	vdiv.f64	d0, d6, d7
 8010f78:	e7e9      	b.n	8010f4e <tanh+0x86>
 8010f7a:	4b05      	ldr	r3, [pc, #20]	; (8010f90 <tanh+0xc8>)
 8010f7c:	ed93 0b00 	vldr	d0, [r3]
 8010f80:	4b07      	ldr	r3, [pc, #28]	; (8010fa0 <tanh+0xd8>)
 8010f82:	ed93 7b00 	vldr	d7, [r3]
 8010f86:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010f8a:	e7e0      	b.n	8010f4e <tanh+0x86>
 8010f8c:	7fefffff 	.word	0x7fefffff
 8010f90:	24000070 	.word	0x24000070
 8010f94:	4035ffff 	.word	0x4035ffff
 8010f98:	3fefffff 	.word	0x3fefffff
 8010f9c:	24000080 	.word	0x24000080
 8010fa0:	24000078 	.word	0x24000078
 8010fa4:	00000000 	.word	0x00000000

08010fa8 <expm1>:
 8010fa8:	b410      	push	{r4}
 8010faa:	ee10 2a90 	vmov	r2, s1
 8010fae:	49a4      	ldr	r1, [pc, #656]	; (8011240 <expm1+0x298>)
 8010fb0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010fb4:	428b      	cmp	r3, r1
 8010fb6:	ed2d 8b02 	vpush	{d8}
 8010fba:	d934      	bls.n	8011026 <expm1+0x7e>
 8010fbc:	49a1      	ldr	r1, [pc, #644]	; (8011244 <expm1+0x29c>)
 8010fbe:	428b      	cmp	r3, r1
 8010fc0:	d923      	bls.n	801100a <expm1+0x62>
 8010fc2:	49a1      	ldr	r1, [pc, #644]	; (8011248 <expm1+0x2a0>)
 8010fc4:	428b      	cmp	r3, r1
 8010fc6:	d912      	bls.n	8010fee <expm1+0x46>
 8010fc8:	ee10 1a10 	vmov	r1, s0
 8010fcc:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8010fd0:	430b      	orrs	r3, r1
 8010fd2:	d006      	beq.n	8010fe2 <expm1+0x3a>
 8010fd4:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010fd8:	ecbd 8b02 	vpop	{d8}
 8010fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fe0:	4770      	bx	lr
 8010fe2:	2a00      	cmp	r2, #0
 8010fe4:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010fe8:	fe20 0b07 	vselge.f64	d0, d0, d7
 8010fec:	e7f4      	b.n	8010fd8 <expm1+0x30>
 8010fee:	ed9f 7b7c 	vldr	d7, [pc, #496]	; 80111e0 <expm1+0x238>
 8010ff2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffa:	dd06      	ble.n	801100a <expm1+0x62>
 8010ffc:	ecbd 8b02 	vpop	{d8}
 8011000:	2000      	movs	r0, #0
 8011002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011006:	f000 b94b 	b.w	80112a0 <__math_oflow>
 801100a:	2a00      	cmp	r2, #0
 801100c:	da59      	bge.n	80110c2 <expm1+0x11a>
 801100e:	ed9f 7b76 	vldr	d7, [pc, #472]	; 80111e8 <expm1+0x240>
 8011012:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011016:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801101e:	d550      	bpl.n	80110c2 <expm1+0x11a>
 8011020:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8011024:	e7d8      	b.n	8010fd8 <expm1+0x30>
 8011026:	4989      	ldr	r1, [pc, #548]	; (801124c <expm1+0x2a4>)
 8011028:	428b      	cmp	r3, r1
 801102a:	d966      	bls.n	80110fa <expm1+0x152>
 801102c:	4988      	ldr	r1, [pc, #544]	; (8011250 <expm1+0x2a8>)
 801102e:	428b      	cmp	r3, r1
 8011030:	d847      	bhi.n	80110c2 <expm1+0x11a>
 8011032:	2a00      	cmp	r2, #0
 8011034:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 80111f0 <expm1+0x248>
 8011038:	db3c      	blt.n	80110b4 <expm1+0x10c>
 801103a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801103e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80111f8 <expm1+0x250>
 8011042:	2301      	movs	r3, #1
 8011044:	ee37 0b46 	vsub.f64	d0, d7, d6
 8011048:	ee37 7b40 	vsub.f64	d7, d7, d0
 801104c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011050:	ed9f 4b6b 	vldr	d4, [pc, #428]	; 8011200 <expm1+0x258>
 8011054:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011058:	ee20 8b03 	vmul.f64	d8, d0, d3
 801105c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011208 <expm1+0x260>
 8011060:	ee20 6b08 	vmul.f64	d6, d0, d8
 8011064:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8011068:	eea6 5b04 	vfma.f64	d5, d6, d4
 801106c:	ed9f 4b68 	vldr	d4, [pc, #416]	; 8011210 <expm1+0x268>
 8011070:	ed9f 2b69 	vldr	d2, [pc, #420]	; 8011218 <expm1+0x270>
 8011074:	eea5 4b06 	vfma.f64	d4, d5, d6
 8011078:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8011220 <expm1+0x278>
 801107c:	eea4 5b06 	vfma.f64	d5, d4, d6
 8011080:	eea5 2b06 	vfma.f64	d2, d5, d6
 8011084:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8011088:	eeb0 4b45 	vmov.f64	d4, d5
 801108c:	eea2 4b06 	vfma.f64	d4, d2, d6
 8011090:	eea8 1b44 	vfms.f64	d1, d8, d4
 8011094:	eeb1 8b08 	vmov.f64	d8, #24	; 0x40c00000  6.0
 8011098:	ee34 2b41 	vsub.f64	d2, d4, d1
 801109c:	eea0 8b41 	vfms.f64	d8, d0, d1
 80110a0:	ee82 4b08 	vdiv.f64	d4, d2, d8
 80110a4:	ee24 4b06 	vmul.f64	d4, d4, d6
 80110a8:	bbab      	cbnz	r3, 8011116 <expm1+0x16e>
 80110aa:	ee90 6b04 	vfnms.f64	d6, d0, d4
 80110ae:	ee30 0b46 	vsub.f64	d0, d0, d6
 80110b2:	e791      	b.n	8010fd8 <expm1+0x30>
 80110b4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8011228 <expm1+0x280>
 80110b8:	ee30 7b07 	vadd.f64	d7, d0, d7
 80110bc:	f04f 33ff 	mov.w	r3, #4294967295
 80110c0:	e7c0      	b.n	8011044 <expm1+0x9c>
 80110c2:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 80110c6:	2a00      	cmp	r2, #0
 80110c8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80110cc:	fe27 7b06 	vselge.f64	d7, d7, d6
 80110d0:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8011230 <expm1+0x288>
 80110d4:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80111f0 <expm1+0x248>
 80110d8:	ee00 7b06 	vmla.f64	d7, d0, d6
 80110dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80110e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80110e4:	ee17 3a90 	vmov	r3, s15
 80110e8:	eeb0 7b40 	vmov.f64	d7, d0
 80110ec:	eea6 7b45 	vfms.f64	d7, d6, d5
 80110f0:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80111f8 <expm1+0x250>
 80110f4:	ee26 6b05 	vmul.f64	d6, d6, d5
 80110f8:	e7a4      	b.n	8011044 <expm1+0x9c>
 80110fa:	4a56      	ldr	r2, [pc, #344]	; (8011254 <expm1+0x2ac>)
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d808      	bhi.n	8011112 <expm1+0x16a>
 8011100:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 8011238 <expm1+0x290>
 8011104:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011108:	ee37 7b47 	vsub.f64	d7, d7, d7
 801110c:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011110:	e762      	b.n	8010fd8 <expm1+0x30>
 8011112:	2300      	movs	r3, #0
 8011114:	e79c      	b.n	8011050 <expm1+0xa8>
 8011116:	1c5a      	adds	r2, r3, #1
 8011118:	ee34 4b47 	vsub.f64	d4, d4, d7
 801111c:	ee94 7b00 	vfnms.f64	d7, d4, d0
 8011120:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011124:	d106      	bne.n	8011134 <expm1+0x18c>
 8011126:	ee30 7b47 	vsub.f64	d7, d0, d7
 801112a:	eebe 0b00 	vmov.f64	d0, #224	; 0xbf000000 -0.5
 801112e:	eea7 0b03 	vfma.f64	d0, d7, d3
 8011132:	e751      	b.n	8010fd8 <expm1+0x30>
 8011134:	2b01      	cmp	r3, #1
 8011136:	d118      	bne.n	801116a <expm1+0x1c2>
 8011138:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 801113c:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011144:	d508      	bpl.n	8011158 <expm1+0x1b0>
 8011146:	ee30 3b03 	vadd.f64	d3, d0, d3
 801114a:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 801114e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8011152:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011156:	e73f      	b.n	8010fd8 <expm1+0x30>
 8011158:	ee30 7b47 	vsub.f64	d7, d0, d7
 801115c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8011160:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011164:	eeb0 0b45 	vmov.f64	d0, d5
 8011168:	e736      	b.n	8010fd8 <expm1+0x30>
 801116a:	1c5a      	adds	r2, r3, #1
 801116c:	2a39      	cmp	r2, #57	; 0x39
 801116e:	ea4f 5403 	mov.w	r4, r3, lsl #20
 8011172:	d90d      	bls.n	8011190 <expm1+0x1e8>
 8011174:	ee37 7b40 	vsub.f64	d7, d7, d0
 8011178:	ee35 7b47 	vsub.f64	d7, d5, d7
 801117c:	ee17 1a90 	vmov	r1, s15
 8011180:	ec53 2b17 	vmov	r2, r3, d7
 8011184:	1863      	adds	r3, r4, r1
 8011186:	ec43 2b10 	vmov	d0, r2, r3
 801118a:	ee30 0b45 	vsub.f64	d0, d0, d5
 801118e:	e723      	b.n	8010fd8 <expm1+0x30>
 8011190:	2b13      	cmp	r3, #19
 8011192:	f04f 0000 	mov.w	r0, #0
 8011196:	dc15      	bgt.n	80111c4 <expm1+0x21c>
 8011198:	ee37 7b40 	vsub.f64	d7, d7, d0
 801119c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80111a0:	fa42 f303 	asr.w	r3, r2, r3
 80111a4:	f1c3 517f 	rsb	r1, r3, #1069547520	; 0x3fc00000
 80111a8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80111ac:	ec41 0b16 	vmov	d6, r0, r1
 80111b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80111b4:	ee17 1a90 	vmov	r1, s15
 80111b8:	ec53 2b17 	vmov	r2, r3, d7
 80111bc:	1863      	adds	r3, r4, r1
 80111be:	ec43 2b10 	vmov	d0, r2, r3
 80111c2:	e709      	b.n	8010fd8 <expm1+0x30>
 80111c4:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80111c8:	3303      	adds	r3, #3
 80111ca:	0519      	lsls	r1, r3, #20
 80111cc:	ec41 0b16 	vmov	d6, r0, r1
 80111d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111d4:	ee30 7b47 	vsub.f64	d7, d0, d7
 80111d8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80111dc:	e7ea      	b.n	80111b4 <expm1+0x20c>
 80111de:	bf00      	nop
 80111e0:	fefa39ef 	.word	0xfefa39ef
 80111e4:	40862e42 	.word	0x40862e42
 80111e8:	c2f8f359 	.word	0xc2f8f359
 80111ec:	01a56e1f 	.word	0x01a56e1f
 80111f0:	fee00000 	.word	0xfee00000
 80111f4:	3fe62e42 	.word	0x3fe62e42
 80111f8:	35793c76 	.word	0x35793c76
 80111fc:	3dea39ef 	.word	0x3dea39ef
 8011200:	6e09c32d 	.word	0x6e09c32d
 8011204:	be8afdb7 	.word	0xbe8afdb7
 8011208:	86e65239 	.word	0x86e65239
 801120c:	3ed0cfca 	.word	0x3ed0cfca
 8011210:	9eaadbb7 	.word	0x9eaadbb7
 8011214:	bf14ce19 	.word	0xbf14ce19
 8011218:	111110f4 	.word	0x111110f4
 801121c:	bfa11111 	.word	0xbfa11111
 8011220:	19fe5585 	.word	0x19fe5585
 8011224:	3f5a01a0 	.word	0x3f5a01a0
 8011228:	35793c76 	.word	0x35793c76
 801122c:	bdea39ef 	.word	0xbdea39ef
 8011230:	652b82fe 	.word	0x652b82fe
 8011234:	3ff71547 	.word	0x3ff71547
 8011238:	8800759c 	.word	0x8800759c
 801123c:	7e37e43c 	.word	0x7e37e43c
 8011240:	40436879 	.word	0x40436879
 8011244:	40862e41 	.word	0x40862e41
 8011248:	7fefffff 	.word	0x7fefffff
 801124c:	3fd62e42 	.word	0x3fd62e42
 8011250:	3ff0a2b1 	.word	0x3ff0a2b1
 8011254:	3c8fffff 	.word	0x3c8fffff

08011258 <with_errno>:
 8011258:	b513      	push	{r0, r1, r4, lr}
 801125a:	4604      	mov	r4, r0
 801125c:	ed8d 0b00 	vstr	d0, [sp]
 8011260:	f7fe ff96 	bl	8010190 <__errno>
 8011264:	ed9d 0b00 	vldr	d0, [sp]
 8011268:	6004      	str	r4, [r0, #0]
 801126a:	b002      	add	sp, #8
 801126c:	bd10      	pop	{r4, pc}

0801126e <xflow>:
 801126e:	b082      	sub	sp, #8
 8011270:	b158      	cbz	r0, 801128a <xflow+0x1c>
 8011272:	eeb1 7b40 	vneg.f64	d7, d0
 8011276:	ed8d 7b00 	vstr	d7, [sp]
 801127a:	ed9d 7b00 	vldr	d7, [sp]
 801127e:	2022      	movs	r0, #34	; 0x22
 8011280:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011284:	b002      	add	sp, #8
 8011286:	f7ff bfe7 	b.w	8011258 <with_errno>
 801128a:	eeb0 7b40 	vmov.f64	d7, d0
 801128e:	e7f2      	b.n	8011276 <xflow+0x8>

08011290 <__math_uflow>:
 8011290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011298 <__math_uflow+0x8>
 8011294:	f7ff bfeb 	b.w	801126e <xflow>
 8011298:	00000000 	.word	0x00000000
 801129c:	10000000 	.word	0x10000000

080112a0 <__math_oflow>:
 80112a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80112a8 <__math_oflow+0x8>
 80112a4:	f7ff bfe3 	b.w	801126e <xflow>
 80112a8:	00000000 	.word	0x00000000
 80112ac:	70000000 	.word	0x70000000

080112b0 <__math_divzero>:
 80112b0:	b082      	sub	sp, #8
 80112b2:	2800      	cmp	r0, #0
 80112b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80112b8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80112bc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 80112c0:	ed8d 7b00 	vstr	d7, [sp]
 80112c4:	ed9d 0b00 	vldr	d0, [sp]
 80112c8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80112d8 <__math_divzero+0x28>
 80112cc:	2022      	movs	r0, #34	; 0x22
 80112ce:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80112d2:	b002      	add	sp, #8
 80112d4:	f7ff bfc0 	b.w	8011258 <with_errno>
	...

080112e0 <__math_invalid>:
 80112e0:	eeb0 7b40 	vmov.f64	d7, d0
 80112e4:	eeb4 7b47 	vcmp.f64	d7, d7
 80112e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ec:	ee30 6b40 	vsub.f64	d6, d0, d0
 80112f0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80112f4:	d602      	bvs.n	80112fc <__math_invalid+0x1c>
 80112f6:	2021      	movs	r0, #33	; 0x21
 80112f8:	f7ff bfae 	b.w	8011258 <with_errno>
 80112fc:	4770      	bx	lr

080112fe <__math_check_uflow>:
 80112fe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011306:	d102      	bne.n	801130e <__math_check_uflow+0x10>
 8011308:	2022      	movs	r0, #34	; 0x22
 801130a:	f7ff bfa5 	b.w	8011258 <with_errno>
 801130e:	4770      	bx	lr

08011310 <__math_check_oflow>:
 8011310:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011330 <__math_check_oflow+0x20>
 8011314:	eeb0 7bc0 	vabs.f64	d7, d0
 8011318:	eeb4 7b46 	vcmp.f64	d7, d6
 801131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011320:	dd02      	ble.n	8011328 <__math_check_oflow+0x18>
 8011322:	2022      	movs	r0, #34	; 0x22
 8011324:	f7ff bf98 	b.w	8011258 <with_errno>
 8011328:	4770      	bx	lr
 801132a:	bf00      	nop
 801132c:	f3af 8000 	nop.w
 8011330:	ffffffff 	.word	0xffffffff
 8011334:	7fefffff 	.word	0x7fefffff

08011338 <checkint>:
 8011338:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801133c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011340:	429a      	cmp	r2, r3
 8011342:	b570      	push	{r4, r5, r6, lr}
 8011344:	dd2a      	ble.n	801139c <checkint+0x64>
 8011346:	f240 4333 	movw	r3, #1075	; 0x433
 801134a:	429a      	cmp	r2, r3
 801134c:	dc24      	bgt.n	8011398 <checkint+0x60>
 801134e:	1a9b      	subs	r3, r3, r2
 8011350:	f1a3 0620 	sub.w	r6, r3, #32
 8011354:	f04f 32ff 	mov.w	r2, #4294967295
 8011358:	fa02 f403 	lsl.w	r4, r2, r3
 801135c:	fa02 f606 	lsl.w	r6, r2, r6
 8011360:	f1c3 0520 	rsb	r5, r3, #32
 8011364:	fa22 f505 	lsr.w	r5, r2, r5
 8011368:	4334      	orrs	r4, r6
 801136a:	432c      	orrs	r4, r5
 801136c:	409a      	lsls	r2, r3
 801136e:	ea20 0202 	bic.w	r2, r0, r2
 8011372:	ea21 0404 	bic.w	r4, r1, r4
 8011376:	4322      	orrs	r2, r4
 8011378:	f1a3 0420 	sub.w	r4, r3, #32
 801137c:	f1c3 0220 	rsb	r2, r3, #32
 8011380:	d10c      	bne.n	801139c <checkint+0x64>
 8011382:	40d8      	lsrs	r0, r3
 8011384:	fa01 f302 	lsl.w	r3, r1, r2
 8011388:	4318      	orrs	r0, r3
 801138a:	40e1      	lsrs	r1, r4
 801138c:	4308      	orrs	r0, r1
 801138e:	f000 0001 	and.w	r0, r0, #1
 8011392:	f1d0 0002 	rsbs	r0, r0, #2
 8011396:	bd70      	pop	{r4, r5, r6, pc}
 8011398:	2002      	movs	r0, #2
 801139a:	e7fc      	b.n	8011396 <checkint+0x5e>
 801139c:	2000      	movs	r0, #0
 801139e:	e7fa      	b.n	8011396 <checkint+0x5e>

080113a0 <pow>:
 80113a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a4:	ee10 4a90 	vmov	r4, s1
 80113a8:	ed2d 8b0a 	vpush	{d8-d12}
 80113ac:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80113b0:	ee11 aa90 	vmov	sl, s3
 80113b4:	f108 32ff 	add.w	r2, r8, #4294967295
 80113b8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 80113bc:	429a      	cmp	r2, r3
 80113be:	ee10 5a10 	vmov	r5, s0
 80113c2:	ee11 0a10 	vmov	r0, s2
 80113c6:	b087      	sub	sp, #28
 80113c8:	46c4      	mov	ip, r8
 80113ca:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80113ce:	d806      	bhi.n	80113de <pow+0x3e>
 80113d0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80113d4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80113d8:	2b7f      	cmp	r3, #127	; 0x7f
 80113da:	f240 8156 	bls.w	801168a <pow+0x2ea>
 80113de:	1802      	adds	r2, r0, r0
 80113e0:	eb4a 010a 	adc.w	r1, sl, sl
 80113e4:	f06f 0b01 	mvn.w	fp, #1
 80113e8:	1e57      	subs	r7, r2, #1
 80113ea:	f141 33ff 	adc.w	r3, r1, #4294967295
 80113ee:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 80113f2:	45bb      	cmp	fp, r7
 80113f4:	eb7e 0303 	sbcs.w	r3, lr, r3
 80113f8:	d242      	bcs.n	8011480 <pow+0xe0>
 80113fa:	ea52 0301 	orrs.w	r3, r2, r1
 80113fe:	f04f 0300 	mov.w	r3, #0
 8011402:	d10c      	bne.n	801141e <pow+0x7e>
 8011404:	196d      	adds	r5, r5, r5
 8011406:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801140a:	4164      	adcs	r4, r4
 801140c:	42ab      	cmp	r3, r5
 801140e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011412:	41a3      	sbcs	r3, r4
 8011414:	f0c0 808f 	bcc.w	8011536 <pow+0x196>
 8011418:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801141c:	e02b      	b.n	8011476 <pow+0xd6>
 801141e:	4ed4      	ldr	r6, [pc, #848]	; (8011770 <pow+0x3d0>)
 8011420:	42b4      	cmp	r4, r6
 8011422:	bf08      	it	eq
 8011424:	429d      	cmpeq	r5, r3
 8011426:	d109      	bne.n	801143c <pow+0x9c>
 8011428:	1800      	adds	r0, r0, r0
 801142a:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 801142e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8011432:	4283      	cmp	r3, r0
 8011434:	4bcf      	ldr	r3, [pc, #828]	; (8011774 <pow+0x3d4>)
 8011436:	eb73 030a 	sbcs.w	r3, r3, sl
 801143a:	e7eb      	b.n	8011414 <pow+0x74>
 801143c:	196d      	adds	r5, r5, r5
 801143e:	48ce      	ldr	r0, [pc, #824]	; (8011778 <pow+0x3d8>)
 8011440:	4164      	adcs	r4, r4
 8011442:	42ab      	cmp	r3, r5
 8011444:	eb70 0604 	sbcs.w	r6, r0, r4
 8011448:	d375      	bcc.n	8011536 <pow+0x196>
 801144a:	4281      	cmp	r1, r0
 801144c:	bf08      	it	eq
 801144e:	429a      	cmpeq	r2, r3
 8011450:	d171      	bne.n	8011536 <pow+0x196>
 8011452:	4aca      	ldr	r2, [pc, #808]	; (801177c <pow+0x3dc>)
 8011454:	4294      	cmp	r4, r2
 8011456:	bf08      	it	eq
 8011458:	429d      	cmpeq	r5, r3
 801145a:	d0dd      	beq.n	8011418 <pow+0x78>
 801145c:	4294      	cmp	r4, r2
 801145e:	ea6f 0a0a 	mvn.w	sl, sl
 8011462:	bf34      	ite	cc
 8011464:	2400      	movcc	r4, #0
 8011466:	2401      	movcs	r4, #1
 8011468:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801146c:	4554      	cmp	r4, sl
 801146e:	f040 81dc 	bne.w	801182a <pow+0x48a>
 8011472:	ee21 0b01 	vmul.f64	d0, d1, d1
 8011476:	b007      	add	sp, #28
 8011478:	ecbd 8b0a 	vpop	{d8-d12}
 801147c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011480:	196f      	adds	r7, r5, r5
 8011482:	eb44 0904 	adc.w	r9, r4, r4
 8011486:	1e7a      	subs	r2, r7, #1
 8011488:	f169 0300 	sbc.w	r3, r9, #0
 801148c:	4593      	cmp	fp, r2
 801148e:	eb7e 0303 	sbcs.w	r3, lr, r3
 8011492:	d225      	bcs.n	80114e0 <pow+0x140>
 8011494:	ee20 0b00 	vmul.f64	d0, d0, d0
 8011498:	2c00      	cmp	r4, #0
 801149a:	da13      	bge.n	80114c4 <pow+0x124>
 801149c:	4651      	mov	r1, sl
 801149e:	f7ff ff4b 	bl	8011338 <checkint>
 80114a2:	2801      	cmp	r0, #1
 80114a4:	d10e      	bne.n	80114c4 <pow+0x124>
 80114a6:	eeb1 0b40 	vneg.f64	d0, d0
 80114aa:	ea57 0909 	orrs.w	r9, r7, r9
 80114ae:	d10b      	bne.n	80114c8 <pow+0x128>
 80114b0:	f1ba 0f00 	cmp.w	sl, #0
 80114b4:	dadf      	bge.n	8011476 <pow+0xd6>
 80114b6:	b007      	add	sp, #28
 80114b8:	ecbd 8b0a 	vpop	{d8-d12}
 80114bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c0:	f7ff bef6 	b.w	80112b0 <__math_divzero>
 80114c4:	2000      	movs	r0, #0
 80114c6:	e7f0      	b.n	80114aa <pow+0x10a>
 80114c8:	f1ba 0f00 	cmp.w	sl, #0
 80114cc:	dad3      	bge.n	8011476 <pow+0xd6>
 80114ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80114d2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80114d6:	ed8d 7b00 	vstr	d7, [sp]
 80114da:	ed9d 0b00 	vldr	d0, [sp]
 80114de:	e7ca      	b.n	8011476 <pow+0xd6>
 80114e0:	2c00      	cmp	r4, #0
 80114e2:	da2b      	bge.n	801153c <pow+0x19c>
 80114e4:	4651      	mov	r1, sl
 80114e6:	f7ff ff27 	bl	8011338 <checkint>
 80114ea:	b930      	cbnz	r0, 80114fa <pow+0x15a>
 80114ec:	b007      	add	sp, #28
 80114ee:	ecbd 8b0a 	vpop	{d8-d12}
 80114f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f6:	f7ff bef3 	b.w	80112e0 <__math_invalid>
 80114fa:	1e41      	subs	r1, r0, #1
 80114fc:	4248      	negs	r0, r1
 80114fe:	4148      	adcs	r0, r1
 8011500:	0480      	lsls	r0, r0, #18
 8011502:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8011506:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801150a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801150e:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8011512:	2b7f      	cmp	r3, #127	; 0x7f
 8011514:	d92d      	bls.n	8011572 <pow+0x1d2>
 8011516:	4b96      	ldr	r3, [pc, #600]	; (8011770 <pow+0x3d0>)
 8011518:	2000      	movs	r0, #0
 801151a:	429c      	cmp	r4, r3
 801151c:	bf08      	it	eq
 801151e:	4285      	cmpeq	r5, r0
 8011520:	f43f af7a 	beq.w	8011418 <pow+0x78>
 8011524:	f240 31bd 	movw	r1, #957	; 0x3bd
 8011528:	428a      	cmp	r2, r1
 801152a:	d80c      	bhi.n	8011546 <pow+0x1a6>
 801152c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011530:	42a8      	cmp	r0, r5
 8011532:	41a3      	sbcs	r3, r4
 8011534:	d204      	bcs.n	8011540 <pow+0x1a0>
 8011536:	ee31 0b00 	vadd.f64	d0, d1, d0
 801153a:	e79c      	b.n	8011476 <pow+0xd6>
 801153c:	2000      	movs	r0, #0
 801153e:	e7e4      	b.n	801150a <pow+0x16a>
 8011540:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011544:	e797      	b.n	8011476 <pow+0xd6>
 8011546:	2d01      	cmp	r5, #1
 8011548:	eb74 0303 	sbcs.w	r3, r4, r3
 801154c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011550:	bf34      	ite	cc
 8011552:	2301      	movcc	r3, #1
 8011554:	2300      	movcs	r3, #0
 8011556:	4296      	cmp	r6, r2
 8011558:	bf8c      	ite	hi
 801155a:	2600      	movhi	r6, #0
 801155c:	2601      	movls	r6, #1
 801155e:	42b3      	cmp	r3, r6
 8011560:	f000 809b 	beq.w	801169a <pow+0x2fa>
 8011564:	b007      	add	sp, #28
 8011566:	ecbd 8b0a 	vpop	{d8-d12}
 801156a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801156e:	f7ff be97 	b.w	80112a0 <__math_oflow>
 8011572:	f1bc 0f00 	cmp.w	ip, #0
 8011576:	d10b      	bne.n	8011590 <pow+0x1f0>
 8011578:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8011760 <pow+0x3c0>
 801157c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011580:	ec53 2b17 	vmov	r2, r3, d7
 8011584:	ee17 5a10 	vmov	r5, s14
 8011588:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801158c:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8011590:	4b7b      	ldr	r3, [pc, #492]	; (8011780 <pow+0x3e0>)
 8011592:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011596:	4423      	add	r3, r4
 8011598:	f3c3 3246 	ubfx	r2, r3, #13, #7
 801159c:	1519      	asrs	r1, r3, #20
 801159e:	0d1b      	lsrs	r3, r3, #20
 80115a0:	051b      	lsls	r3, r3, #20
 80115a2:	1ae7      	subs	r7, r4, r3
 80115a4:	4b77      	ldr	r3, [pc, #476]	; (8011784 <pow+0x3e4>)
 80115a6:	ee03 1a10 	vmov	s6, r1
 80115aa:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80115ae:	1e2e      	subs	r6, r5, #0
 80115b0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 80115b4:	ec47 6b15 	vmov	d5, r6, r7
 80115b8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 80115bc:	eea5 6b07 	vfma.f64	d6, d5, d7
 80115c0:	ed93 7b00 	vldr	d7, [r3]
 80115c4:	ed93 5b02 	vldr	d5, [r3, #8]
 80115c8:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80115cc:	eea3 2b07 	vfma.f64	d2, d3, d7
 80115d0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80115d4:	ee36 4b02 	vadd.f64	d4, d6, d2
 80115d8:	ee32 2b44 	vsub.f64	d2, d2, d4
 80115dc:	eea3 7b05 	vfma.f64	d7, d3, d5
 80115e0:	ed93 5b04 	vldr	d5, [r3, #16]
 80115e4:	ee32 2b06 	vadd.f64	d2, d2, d6
 80115e8:	ee37 7b02 	vadd.f64	d7, d7, d2
 80115ec:	ee26 5b05 	vmul.f64	d5, d6, d5
 80115f0:	ee26 0b05 	vmul.f64	d0, d6, d5
 80115f4:	ee34 8b00 	vadd.f64	d8, d4, d0
 80115f8:	eeb0 9b40 	vmov.f64	d9, d0
 80115fc:	ee34 4b48 	vsub.f64	d4, d4, d8
 8011600:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8011604:	ee34 ab00 	vadd.f64	d10, d4, d0
 8011608:	ed93 5b06 	vldr	d5, [r3, #24]
 801160c:	ee26 bb00 	vmul.f64	d11, d6, d0
 8011610:	ee37 7b09 	vadd.f64	d7, d7, d9
 8011614:	ed93 4b08 	vldr	d4, [r3, #32]
 8011618:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801161c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8011620:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011624:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8011628:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801162c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011630:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8011634:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011638:	eea0 4b03 	vfma.f64	d4, d0, d3
 801163c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011640:	eeab 7b05 	vfma.f64	d7, d11, d5
 8011644:	ee38 4b07 	vadd.f64	d4, d8, d7
 8011648:	ee21 6b04 	vmul.f64	d6, d1, d4
 801164c:	ee16 3a90 	vmov	r3, s13
 8011650:	eeb0 5b46 	vmov.f64	d5, d6
 8011654:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011658:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801165c:	18b2      	adds	r2, r6, r2
 801165e:	2a3e      	cmp	r2, #62	; 0x3e
 8011660:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8011664:	ee38 8b44 	vsub.f64	d8, d8, d4
 8011668:	ee38 8b07 	vadd.f64	d8, d8, d7
 801166c:	eea1 5b08 	vfma.f64	d5, d1, d8
 8011670:	d91b      	bls.n	80116aa <pow+0x30a>
 8011672:	2a00      	cmp	r2, #0
 8011674:	da0b      	bge.n	801168e <pow+0x2ee>
 8011676:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801167a:	ee36 0b00 	vadd.f64	d0, d6, d0
 801167e:	2800      	cmp	r0, #0
 8011680:	f43f aef9 	beq.w	8011476 <pow+0xd6>
 8011684:	eeb1 0b40 	vneg.f64	d0, d0
 8011688:	e6f5      	b.n	8011476 <pow+0xd6>
 801168a:	2000      	movs	r0, #0
 801168c:	e780      	b.n	8011590 <pow+0x1f0>
 801168e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8011692:	d909      	bls.n	80116a8 <pow+0x308>
 8011694:	2b00      	cmp	r3, #0
 8011696:	f6bf af65 	bge.w	8011564 <pow+0x1c4>
 801169a:	b007      	add	sp, #28
 801169c:	ecbd 8b0a 	vpop	{d8-d12}
 80116a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a4:	f7ff bdf4 	b.w	8011290 <__math_uflow>
 80116a8:	2600      	movs	r6, #0
 80116aa:	4937      	ldr	r1, [pc, #220]	; (8011788 <pow+0x3e8>)
 80116ac:	ed91 4b02 	vldr	d4, [r1, #8]
 80116b0:	ed91 3b00 	vldr	d3, [r1]
 80116b4:	eeb0 7b44 	vmov.f64	d7, d4
 80116b8:	eea6 7b03 	vfma.f64	d7, d6, d3
 80116bc:	ee17 5a10 	vmov	r5, s14
 80116c0:	ee37 7b44 	vsub.f64	d7, d7, d4
 80116c4:	ed91 4b04 	vldr	d4, [r1, #16]
 80116c8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80116cc:	eea7 6b04 	vfma.f64	d6, d7, d4
 80116d0:	ed91 4b06 	vldr	d4, [r1, #24]
 80116d4:	18dc      	adds	r4, r3, r3
 80116d6:	f104 030f 	add.w	r3, r4, #15
 80116da:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80116de:	eea7 6b04 	vfma.f64	d6, d7, d4
 80116e2:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 80116e6:	ee35 5b06 	vadd.f64	d5, d5, d6
 80116ea:	ee25 6b05 	vmul.f64	d6, d5, d5
 80116ee:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80116f2:	ed91 4b08 	vldr	d4, [r1, #32]
 80116f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80116fa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80116fe:	eea5 4b03 	vfma.f64	d4, d5, d3
 8011702:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8011706:	eea6 7b04 	vfma.f64	d7, d6, d4
 801170a:	ee26 6b06 	vmul.f64	d6, d6, d6
 801170e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8011712:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011716:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801171a:	eea5 4b03 	vfma.f64	d4, d5, d3
 801171e:	1940      	adds	r0, r0, r5
 8011720:	2700      	movs	r7, #0
 8011722:	eb17 020c 	adds.w	r2, r7, ip
 8011726:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801172a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801172e:	2e00      	cmp	r6, #0
 8011730:	d176      	bne.n	8011820 <pow+0x480>
 8011732:	42bd      	cmp	r5, r7
 8011734:	db2a      	blt.n	801178c <pow+0x3ec>
 8011736:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801173a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801173e:	4610      	mov	r0, r2
 8011740:	ec41 0b10 	vmov	d0, r0, r1
 8011744:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011748:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8011768 <pow+0x3c8>
 801174c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011750:	b007      	add	sp, #28
 8011752:	ecbd 8b0a 	vpop	{d8-d12}
 8011756:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175a:	f7ff bdd9 	b.w	8011310 <__math_check_oflow>
 801175e:	bf00      	nop
 8011760:	00000000 	.word	0x00000000
 8011764:	43300000 	.word	0x43300000
 8011768:	00000000 	.word	0x00000000
 801176c:	7f000000 	.word	0x7f000000
 8011770:	3ff00000 	.word	0x3ff00000
 8011774:	fff00000 	.word	0xfff00000
 8011778:	ffe00000 	.word	0xffe00000
 801177c:	7fe00000 	.word	0x7fe00000
 8011780:	c0196aab 	.word	0xc0196aab
 8011784:	08011bc8 	.word	0x08011bc8
 8011788:	08012c40 	.word	0x08012c40
 801178c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011790:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011794:	4610      	mov	r0, r2
 8011796:	ec41 0b15 	vmov	d5, r0, r1
 801179a:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 801179e:	ee27 6b05 	vmul.f64	d6, d7, d5
 80117a2:	ee35 7b06 	vadd.f64	d7, d5, d6
 80117a6:	eeb0 4bc7 	vabs.f64	d4, d7
 80117aa:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80117ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117b2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8011830 <pow+0x490>
 80117b6:	d52a      	bpl.n	801180e <pow+0x46e>
 80117b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80117bc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80117c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c4:	ee35 5b06 	vadd.f64	d5, d5, d6
 80117c8:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 80117cc:	bf58      	it	pl
 80117ce:	eeb0 4b43 	vmovpl.f64	d4, d3
 80117d2:	ee37 3b04 	vadd.f64	d3, d7, d4
 80117d6:	ee34 6b43 	vsub.f64	d6, d4, d3
 80117da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80117de:	ee36 6b05 	vadd.f64	d6, d6, d5
 80117e2:	ee36 6b03 	vadd.f64	d6, d6, d3
 80117e6:	ee36 7b44 	vsub.f64	d7, d6, d4
 80117ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80117ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f2:	d104      	bne.n	80117fe <pow+0x45e>
 80117f4:	4632      	mov	r2, r6
 80117f6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80117fa:	ec43 2b17 	vmov	d7, r2, r3
 80117fe:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011802:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011806:	ee26 6b00 	vmul.f64	d6, d6, d0
 801180a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801180e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8011812:	b007      	add	sp, #28
 8011814:	ecbd 8b0a 	vpop	{d8-d12}
 8011818:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801181c:	f7ff bd6f 	b.w	80112fe <__math_check_uflow>
 8011820:	ec43 2b10 	vmov	d0, r2, r3
 8011824:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011828:	e625      	b.n	8011476 <pow+0xd6>
 801182a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8011838 <pow+0x498>
 801182e:	e622      	b.n	8011476 <pow+0xd6>
 8011830:	00000000 	.word	0x00000000
 8011834:	00100000 	.word	0x00100000
	...

08011840 <__ieee754_sqrt>:
 8011840:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8011844:	4770      	bx	lr
	...

08011848 <__ieee754_atan2>:
 8011848:	ee11 1a10 	vmov	r1, s2
 801184c:	eeb0 7b40 	vmov.f64	d7, d0
 8011850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011852:	ee11 5a90 	vmov	r5, s3
 8011856:	424b      	negs	r3, r1
 8011858:	4f59      	ldr	r7, [pc, #356]	; (80119c0 <__ieee754_atan2+0x178>)
 801185a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801185e:	430b      	orrs	r3, r1
 8011860:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011864:	42bb      	cmp	r3, r7
 8011866:	d80d      	bhi.n	8011884 <__ieee754_atan2+0x3c>
 8011868:	ee10 ca10 	vmov	ip, s0
 801186c:	ee17 6a90 	vmov	r6, s15
 8011870:	f1cc 0000 	rsb	r0, ip, #0
 8011874:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8011878:	ea40 000c 	orr.w	r0, r0, ip
 801187c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 8011880:	42b8      	cmp	r0, r7
 8011882:	d904      	bls.n	801188e <__ieee754_atan2+0x46>
 8011884:	ee37 7b01 	vadd.f64	d7, d7, d1
 8011888:	eeb0 0b47 	vmov.f64	d0, d7
 801188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188e:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 8011892:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011896:	4308      	orrs	r0, r1
 8011898:	d103      	bne.n	80118a2 <__ieee754_atan2+0x5a>
 801189a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801189e:	f7ff ba0f 	b.w	8010cc0 <atan>
 80118a2:	17ac      	asrs	r4, r5, #30
 80118a4:	f004 0402 	and.w	r4, r4, #2
 80118a8:	ea53 0c0c 	orrs.w	ip, r3, ip
 80118ac:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 80118b0:	d107      	bne.n	80118c2 <__ieee754_atan2+0x7a>
 80118b2:	2c02      	cmp	r4, #2
 80118b4:	d05c      	beq.n	8011970 <__ieee754_atan2+0x128>
 80118b6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8011988 <__ieee754_atan2+0x140>
 80118ba:	2c03      	cmp	r4, #3
 80118bc:	fe06 7b00 	vseleq.f64	d7, d6, d0
 80118c0:	e7e2      	b.n	8011888 <__ieee754_atan2+0x40>
 80118c2:	4311      	orrs	r1, r2
 80118c4:	d107      	bne.n	80118d6 <__ieee754_atan2+0x8e>
 80118c6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8011990 <__ieee754_atan2+0x148>
 80118ca:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8011998 <__ieee754_atan2+0x150>
 80118ce:	2e00      	cmp	r6, #0
 80118d0:	fe27 7b06 	vselge.f64	d7, d7, d6
 80118d4:	e7d8      	b.n	8011888 <__ieee754_atan2+0x40>
 80118d6:	42ba      	cmp	r2, r7
 80118d8:	d10f      	bne.n	80118fa <__ieee754_atan2+0xb2>
 80118da:	4293      	cmp	r3, r2
 80118dc:	f104 34ff 	add.w	r4, r4, #4294967295
 80118e0:	d107      	bne.n	80118f2 <__ieee754_atan2+0xaa>
 80118e2:	2c02      	cmp	r4, #2
 80118e4:	d847      	bhi.n	8011976 <__ieee754_atan2+0x12e>
 80118e6:	4b37      	ldr	r3, [pc, #220]	; (80119c4 <__ieee754_atan2+0x17c>)
 80118e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118ec:	ed93 7b00 	vldr	d7, [r3]
 80118f0:	e7ca      	b.n	8011888 <__ieee754_atan2+0x40>
 80118f2:	2c02      	cmp	r4, #2
 80118f4:	d842      	bhi.n	801197c <__ieee754_atan2+0x134>
 80118f6:	4b34      	ldr	r3, [pc, #208]	; (80119c8 <__ieee754_atan2+0x180>)
 80118f8:	e7f6      	b.n	80118e8 <__ieee754_atan2+0xa0>
 80118fa:	42bb      	cmp	r3, r7
 80118fc:	d0e3      	beq.n	80118c6 <__ieee754_atan2+0x7e>
 80118fe:	1a9b      	subs	r3, r3, r2
 8011900:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011904:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011908:	da1a      	bge.n	8011940 <__ieee754_atan2+0xf8>
 801190a:	2d00      	cmp	r5, #0
 801190c:	da01      	bge.n	8011912 <__ieee754_atan2+0xca>
 801190e:	323c      	adds	r2, #60	; 0x3c
 8011910:	db19      	blt.n	8011946 <__ieee754_atan2+0xfe>
 8011912:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8011916:	f7ff facd 	bl	8010eb4 <fabs>
 801191a:	f7ff f9d1 	bl	8010cc0 <atan>
 801191e:	eeb0 7b40 	vmov.f64	d7, d0
 8011922:	2c01      	cmp	r4, #1
 8011924:	d012      	beq.n	801194c <__ieee754_atan2+0x104>
 8011926:	2c02      	cmp	r4, #2
 8011928:	d019      	beq.n	801195e <__ieee754_atan2+0x116>
 801192a:	2c00      	cmp	r4, #0
 801192c:	d0ac      	beq.n	8011888 <__ieee754_atan2+0x40>
 801192e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80119a0 <__ieee754_atan2+0x158>
 8011932:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011936:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80119a8 <__ieee754_atan2+0x160>
 801193a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801193e:	e7a3      	b.n	8011888 <__ieee754_atan2+0x40>
 8011940:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011990 <__ieee754_atan2+0x148>
 8011944:	e7ed      	b.n	8011922 <__ieee754_atan2+0xda>
 8011946:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 80119b0 <__ieee754_atan2+0x168>
 801194a:	e7ea      	b.n	8011922 <__ieee754_atan2+0xda>
 801194c:	ee17 1a90 	vmov	r1, s15
 8011950:	ec53 2b17 	vmov	r2, r3, d7
 8011954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011958:	ec43 2b17 	vmov	d7, r2, r3
 801195c:	e794      	b.n	8011888 <__ieee754_atan2+0x40>
 801195e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80119a0 <__ieee754_atan2+0x158>
 8011962:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011966:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80119a8 <__ieee754_atan2+0x160>
 801196a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801196e:	e78b      	b.n	8011888 <__ieee754_atan2+0x40>
 8011970:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80119a8 <__ieee754_atan2+0x160>
 8011974:	e788      	b.n	8011888 <__ieee754_atan2+0x40>
 8011976:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80119b8 <__ieee754_atan2+0x170>
 801197a:	e785      	b.n	8011888 <__ieee754_atan2+0x40>
 801197c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80119b0 <__ieee754_atan2+0x168>
 8011980:	e782      	b.n	8011888 <__ieee754_atan2+0x40>
 8011982:	bf00      	nop
 8011984:	f3af 8000 	nop.w
 8011988:	54442d18 	.word	0x54442d18
 801198c:	c00921fb 	.word	0xc00921fb
 8011990:	54442d18 	.word	0x54442d18
 8011994:	3ff921fb 	.word	0x3ff921fb
 8011998:	54442d18 	.word	0x54442d18
 801199c:	bff921fb 	.word	0xbff921fb
 80119a0:	33145c07 	.word	0x33145c07
 80119a4:	3ca1a626 	.word	0x3ca1a626
 80119a8:	54442d18 	.word	0x54442d18
 80119ac:	400921fb 	.word	0x400921fb
	...
 80119b8:	54442d18 	.word	0x54442d18
 80119bc:	3fe921fb 	.word	0x3fe921fb
 80119c0:	7ff00000 	.word	0x7ff00000
 80119c4:	08012c10 	.word	0x08012c10
 80119c8:	08012c28 	.word	0x08012c28

080119cc <_init>:
 80119cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ce:	bf00      	nop
 80119d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119d2:	bc08      	pop	{r3}
 80119d4:	469e      	mov	lr, r3
 80119d6:	4770      	bx	lr

080119d8 <_fini>:
 80119d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119da:	bf00      	nop
 80119dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119de:	bc08      	pop	{r3}
 80119e0:	469e      	mov	lr, r3
 80119e2:	4770      	bx	lr
