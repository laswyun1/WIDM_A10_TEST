
WIDM_CM_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccdc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac0  0800cf80  0800cf80  0001cf80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ea40  0800ea40  0001ea40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ea44  0800ea44  0001ea44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  24000000  0800ea48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000d460  24000088  0800ead0  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2400d4e8  0800ead0  0002d4e8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021c83  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004763  00000000  00000000  00041d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b90  00000000  00000000  000464e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000152e  00000000  00000000  00048070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000180cc  00000000  00000000  0004959e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0000b5ba  00000000  00000000  0006166a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007f88  00000000  00000000  0006cc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 0000006f  00000000  00000000  00074bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cf64 	.word	0x0800cf64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800cf64 	.word	0x0800cf64

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000384:	4b2f      	ldr	r3, [pc, #188]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000386:	4a30      	ldr	r2, [pc, #192]	; (8000448 <MX_FDCAN1_Init+0xc8>)
 8000388:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800038a:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800038c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000390:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000392:	4b2c      	ldr	r3, [pc, #176]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000398:	4b2a      	ldr	r3, [pc, #168]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800039a:	2201      	movs	r2, #1
 800039c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 800039e:	4b29      	ldr	r3, [pc, #164]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003aa:	4b26      	ldr	r3, [pc, #152]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 32;
 80003b0:	4b24      	ldr	r3, [pc, #144]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003b2:	2220      	movs	r2, #32
 80003b4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 127;
 80003b6:	4b23      	ldr	r3, [pc, #140]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003b8:	227f      	movs	r2, #127	; 0x7f
 80003ba:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 32;
 80003bc:	4b21      	ldr	r3, [pc, #132]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003be:	2220      	movs	r2, #32
 80003c0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003ca:	2204      	movs	r2, #4
 80003cc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 80003ce:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003d0:	220b      	movs	r2, #11
 80003d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80003d4:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003d6:	2204      	movs	r2, #4
 80003d8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003ee:	2204      	movs	r2, #4
 80003f0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003f4:	2212      	movs	r2, #18
 80003f6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003fa:	2204      	movs	r2, #4
 80003fc:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000400:	2212      	movs	r2, #18
 8000402:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000406:	2204      	movs	r2, #4
 8000408:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800040c:	2212      	movs	r2, #18
 800040e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000412:	2204      	movs	r2, #4
 8000414:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 4;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000418:	2204      	movs	r2, #4
 800041a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800041e:	2210      	movs	r2, #16
 8000420:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000428:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800042c:	2212      	movs	r2, #18
 800042e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000430:	4804      	ldr	r0, [pc, #16]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000432:	f000 ff9b 	bl	800136c <HAL_FDCAN_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 800043c:	f000 fb06 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	240000a4 	.word	0x240000a4
 8000448:	4000a000 	.word	0x4000a000

0800044c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b0ba      	sub	sp, #232	; 0xe8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	22c0      	movs	r2, #192	; 0xc0
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f00b f8fc 	bl	800b66a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a33      	ldr	r2, [pc, #204]	; (8000544 <HAL_FDCAN_MspInit+0xf8>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d15f      	bne.n	800053c <HAL_FDCAN_MspInit+0xf0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800047c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000480:	f04f 0300 	mov.w	r3, #0
 8000484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800048c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4618      	mov	r0, r3
 8000496:	f004 fa3f 	bl	8004918 <HAL_RCCEx_PeriphCLKConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80004a0:	f000 fad4 	bl	8000a4c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80004a4:	4b28      	ldr	r3, [pc, #160]	; (8000548 <HAL_FDCAN_MspInit+0xfc>)
 80004a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80004aa:	4a27      	ldr	r2, [pc, #156]	; (8000548 <HAL_FDCAN_MspInit+0xfc>)
 80004ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80004b4:	4b24      	ldr	r3, [pc, #144]	; (8000548 <HAL_FDCAN_MspInit+0xfc>)
 80004b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80004ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b21      	ldr	r3, [pc, #132]	; (8000548 <HAL_FDCAN_MspInit+0xfc>)
 80004c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c8:	4a1f      	ldr	r2, [pc, #124]	; (8000548 <HAL_FDCAN_MspInit+0xfc>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004d2:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <HAL_FDCAN_MspInit+0xfc>)
 80004d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80004e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	2302      	movs	r3, #2
 80004ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80004fa:	2309      	movs	r3, #9
 80004fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000500:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000504:	4619      	mov	r1, r3
 8000506:	4811      	ldr	r0, [pc, #68]	; (800054c <HAL_FDCAN_MspInit+0x100>)
 8000508:	f002 f962 	bl	80027d0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	2101      	movs	r1, #1
 8000510:	2013      	movs	r0, #19
 8000512:	f000 fef6 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000516:	2013      	movs	r0, #19
 8000518:	f000 ff0d 	bl	8001336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 1, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2101      	movs	r1, #1
 8000520:	2015      	movs	r0, #21
 8000522:	f000 feee 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000526:	2015      	movs	r0, #21
 8000528:	f000 ff05 	bl	8001336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 14, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	210e      	movs	r1, #14
 8000530:	203f      	movs	r0, #63	; 0x3f
 8000532:	f000 fee6 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 8000536:	203f      	movs	r0, #63	; 0x3f
 8000538:	f000 fefd 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800053c:	bf00      	nop
 800053e:	37e8      	adds	r7, #232	; 0xe8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	4000a000 	.word	0x4000a000
 8000548:	58024400 	.word	0x58024400
 800054c:	58020000 	.word	0x58020000

08000550 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <MX_GPIO_Init+0x8c>)
 8000558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800055c:	4a1f      	ldr	r2, [pc, #124]	; (80005dc <MX_GPIO_Init+0x8c>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <MX_GPIO_Init+0x8c>)
 8000568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_GPIO_Init+0x8c>)
 8000576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057a:	4a18      	ldr	r2, [pc, #96]	; (80005dc <MX_GPIO_Init+0x8c>)
 800057c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_GPIO_Init+0x8c>)
 8000586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800058a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_GPIO_Init+0x8c>)
 8000594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000598:	4a10      	ldr	r2, [pc, #64]	; (80005dc <MX_GPIO_Init+0x8c>)
 800059a:	f043 0302 	orr.w	r3, r3, #2
 800059e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_GPIO_Init+0x8c>)
 80005a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a8:	f003 0302 	and.w	r3, r3, #2
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <MX_GPIO_Init+0x8c>)
 80005b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <MX_GPIO_Init+0x8c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_GPIO_Init+0x8c>)
 80005c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	58024400 	.word	0x58024400

080005e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_I2C1_Init+0x74>)
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_I2C1_Init+0x78>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_I2C1_Init+0x74>)
 80005ec:	4a1b      	ldr	r2, [pc, #108]	; (800065c <MX_I2C1_Init+0x7c>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_I2C1_Init+0x74>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_I2C1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061a:	480e      	ldr	r0, [pc, #56]	; (8000654 <MX_I2C1_Init+0x74>)
 800061c:	f002 fa88 	bl	8002b30 <HAL_I2C_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000626:	f000 fa11 	bl	8000a4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800062a:	2100      	movs	r1, #0
 800062c:	4809      	ldr	r0, [pc, #36]	; (8000654 <MX_I2C1_Init+0x74>)
 800062e:	f003 f917 	bl	8003860 <HAL_I2CEx_ConfigAnalogFilter>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000638:	f000 fa08 	bl	8000a4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800063c:	2100      	movs	r1, #0
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_I2C1_Init+0x74>)
 8000640:	f003 f959 	bl	80038f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800064a:	f000 f9ff 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	24000144 	.word	0x24000144
 8000658:	40005400 	.word	0x40005400
 800065c:	00b03fdb 	.word	0x00b03fdb

08000660 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_I2C2_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_I2C2_Init+0x74>)
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <MX_I2C2_Init+0x7c>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_I2C2_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C2_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <MX_I2C2_Init+0x74>)
 800069c:	f002 fa48 	bl	8002b30 <HAL_I2C_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006a6:	f000 f9d1 	bl	8000a4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_I2C2_Init+0x74>)
 80006ae:	f003 f8d7 	bl	8003860 <HAL_I2CEx_ConfigAnalogFilter>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006b8:	f000 f9c8 	bl	8000a4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_I2C2_Init+0x74>)
 80006c0:	f003 f919 	bl	80038f6 <HAL_I2CEx_ConfigDigitalFilter>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f9bf 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	24000198 	.word	0x24000198
 80006d8:	40005800 	.word	0x40005800
 80006dc:	00b03fdb 	.word	0x00b03fdb

080006e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0bc      	sub	sp, #240	; 0xf0
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	22c0      	movs	r2, #192	; 0xc0
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f00a ffb2 	bl	800b66a <memset>
  if(i2cHandle->Instance==I2C1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a55      	ldr	r2, [pc, #340]	; (8000860 <HAL_I2C_MspInit+0x180>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d14e      	bne.n	80007ae <HAL_I2C_MspInit+0xce>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000710:	f04f 0208 	mov.w	r2, #8
 8000714:	f04f 0300 	mov.w	r3, #0
 8000718:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	4618      	mov	r0, r3
 8000728:	f004 f8f6 	bl	8004918 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000732:	f000 f98b 	bl	8000a4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b4b      	ldr	r3, [pc, #300]	; (8000864 <HAL_I2C_MspInit+0x184>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a49      	ldr	r2, [pc, #292]	; (8000864 <HAL_I2C_MspInit+0x184>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b47      	ldr	r3, [pc, #284]	; (8000864 <HAL_I2C_MspInit+0x184>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000754:	23c0      	movs	r3, #192	; 0xc0
 8000756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075a:	2312      	movs	r3, #18
 800075c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076c:	2304      	movs	r3, #4
 800076e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000776:	4619      	mov	r1, r3
 8000778:	483b      	ldr	r0, [pc, #236]	; (8000868 <HAL_I2C_MspInit+0x188>)
 800077a:	f002 f829 	bl	80027d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <HAL_I2C_MspInit+0x184>)
 8000780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000784:	4a37      	ldr	r2, [pc, #220]	; (8000864 <HAL_I2C_MspInit+0x184>)
 8000786:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800078a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <HAL_I2C_MspInit+0x184>)
 8000790:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2101      	movs	r1, #1
 80007a0:	201f      	movs	r0, #31
 80007a2:	f000 fdae 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007a6:	201f      	movs	r0, #31
 80007a8:	f000 fdc5 	bl	8001336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007ac:	e053      	b.n	8000856 <HAL_I2C_MspInit+0x176>
  else if(i2cHandle->Instance==I2C2)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a2e      	ldr	r2, [pc, #184]	; (800086c <HAL_I2C_MspInit+0x18c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d14e      	bne.n	8000856 <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007b8:	f04f 0208 	mov.w	r2, #8
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 f8a2 	bl	8004918 <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_I2C_MspInit+0xfe>
      Error_Handler();
 80007da:	f000 f937 	bl	8000a4c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_I2C_MspInit+0x184>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e4:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <HAL_I2C_MspInit+0x184>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <HAL_I2C_MspInit+0x184>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000804:	2312      	movs	r3, #18
 8000806:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000816:	2304      	movs	r3, #4
 8000818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000820:	4619      	mov	r1, r3
 8000822:	4811      	ldr	r0, [pc, #68]	; (8000868 <HAL_I2C_MspInit+0x188>)
 8000824:	f001 ffd4 	bl	80027d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_I2C_MspInit+0x184>)
 800082a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <HAL_I2C_MspInit+0x184>)
 8000830:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000834:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_I2C_MspInit+0x184>)
 800083a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800083e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 2, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2102      	movs	r1, #2
 800084a:	2021      	movs	r0, #33	; 0x21
 800084c:	f000 fd59 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000850:	2021      	movs	r0, #33	; 0x21
 8000852:	f000 fd70 	bl	8001336 <HAL_NVIC_EnableIRQ>
}
 8000856:	bf00      	nop
 8000858:	37f0      	adds	r7, #240	; 0xf0
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	58024400 	.word	0x58024400
 8000868:	58020400 	.word	0x58020400
 800086c:	40005800 	.word	0x40005800

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fbcc 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f83a 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f7ff fe68 	bl	8000550 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000880:	f7ff fd7e 	bl	8000380 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000884:	f7ff feac 	bl	80005e0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000888:	f000 facc 	bl	8000e24 <MX_TIM3_Init>
  MX_TIM6_Init();
 800088c:	f000 fb18 	bl	8000ec0 <MX_TIM6_Init>
  MX_I2C2_Init();
 8000890:	f7ff fee6 	bl	8000660 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // [For Debug, HCLK = 240MHz, SysClk= 480MHz(USED) //
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <main+0x74>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <main+0x74>)
 800089a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800089e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <main+0x74>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <main+0x74>)
 80008a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008aa:	60d3      	str	r3, [r2, #12]
  //DWT->LAR = 0xC5ACCE55;
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <main+0x78>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <main+0x78>)
 80008b2:	f023 0301 	bic.w	r3, r3, #1
 80008b6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <main+0x78>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <main+0x78>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <main+0x78>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]

  Create_PDOTable_ObjDictionary();
 80008ca:	f006 fbd7 	bl	800707c <Create_PDOTable_ObjDictionary>
  Create_SDOTable_ObjDictionary();
 80008ce:	f006 f98b 	bl	8006be8 <Create_SDOTable_ObjDictionary>

  MS_enum = IDLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <main+0x7c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]

  Init_Imu_Ctrl();
 80008d8:	f007 fcd8 	bl	800828c <Init_Imu_Ctrl>
  Init_Msg_Hdlr();
 80008dc:	f00a f84e 	bl	800a97c <Init_Msg_Hdlr>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <main+0x70>
 80008e2:	bf00      	nop
 80008e4:	e000edf0 	.word	0xe000edf0
 80008e8:	e0001000 	.word	0xe0001000
 80008ec:	2400d2b8 	.word	0x2400d2b8

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09e      	sub	sp, #120	; 0x78
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fa:	224c      	movs	r2, #76	; 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f00a feb3 	bl	800b66a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2220      	movs	r2, #32
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f00a feac 	bl	800b66a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000912:	2002      	movs	r0, #2
 8000914:	f003 f83c 	bl	8003990 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b48      	ldr	r3, [pc, #288]	; (8000a40 <SystemClock_Config+0x150>)
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	4a47      	ldr	r2, [pc, #284]	; (8000a40 <SystemClock_Config+0x150>)
 8000922:	f023 0301 	bic.w	r3, r3, #1
 8000926:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000928:	4b45      	ldr	r3, [pc, #276]	; (8000a40 <SystemClock_Config+0x150>)
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <SystemClock_Config+0x154>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	4a43      	ldr	r2, [pc, #268]	; (8000a44 <SystemClock_Config+0x154>)
 8000938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800093c:	6193      	str	r3, [r2, #24]
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <SystemClock_Config+0x154>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800094a:	bf00      	nop
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <SystemClock_Config+0x154>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000958:	d1f8      	bne.n	800094c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <SystemClock_Config+0x158>)
 800095c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000960:	4a39      	ldr	r2, [pc, #228]	; (8000a48 <SystemClock_Config+0x158>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <SystemClock_Config+0x158>)
 800096c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000978:	2300      	movs	r3, #0
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <SystemClock_Config+0x154>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a30      	ldr	r2, [pc, #192]	; (8000a44 <SystemClock_Config+0x154>)
 8000982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <SystemClock_Config+0x154>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <SystemClock_Config+0x150>)
 8000994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000996:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <SystemClock_Config+0x150>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <SystemClock_Config+0x150>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009aa:	bf00      	nop
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <SystemClock_Config+0x154>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b8:	d1f8      	bne.n	80009ac <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ba:	2301      	movs	r3, #1
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c8:	2302      	movs	r3, #2
 80009ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009cc:	2305      	movs	r3, #5
 80009ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009d0:	23c0      	movs	r3, #192	; 0xc0
 80009d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 12;
 80009d8:	230c      	movs	r3, #12
 80009da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009e0:	2308      	movs	r3, #8
 80009e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f0:	4618      	mov	r0, r3
 80009f2:	f003 f807 	bl	8003a04 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80009fc:	f000 f826 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	233f      	movs	r3, #63	; 0x3f
 8000a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2303      	movs	r3, #3
 8000a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a10:	2340      	movs	r3, #64	; 0x40
 8000a12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a14:	2340      	movs	r3, #64	; 0x40
 8000a16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a1e:	2340      	movs	r3, #64	; 0x40
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2104      	movs	r1, #4
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 fc45 	bl	80042b8 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000a34:	f000 f80a 	bl	8000a4c <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3778      	adds	r7, #120	; 0x78
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	58000400 	.word	0x58000400
 8000a44:	58024800 	.word	0x58024800
 8000a48:	58024400 	.word	0x58024400

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_MspInit+0x3c>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a64:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <HAL_MspInit+0x3c>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x3c>)
 8000a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2101      	movs	r1, #1
 8000a80:	2005      	movs	r0, #5
 8000a82:	f000 fc3e 	bl	8001302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a86:	2005      	movs	r0, #5
 8000a88:	f000 fc55 	bl	8001336 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	58024400 	.word	0x58024400

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 fb06 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <FDCAN1_IT0_IRQHandler+0x10>)
 8000b02:	f001 f969 	bl	8001dd8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	240000a4 	.word	0x240000a4

08000b10 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <FDCAN1_IT1_IRQHandler+0x10>)
 8000b16:	f001 f95f 	bl	8001dd8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	240000a4 	.word	0x240000a4

08000b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <TIM3_IRQHandler+0x10>)
 8000b2a:	f005 fb33 	bl	8006194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	240001f0 	.word	0x240001f0

08000b38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <I2C1_EV_IRQHandler+0x10>)
 8000b3e:	f002 fbbd 	bl	80032bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	24000144 	.word	0x24000144

08000b4c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <I2C2_EV_IRQHandler+0x10>)
 8000b52:	f002 fbb3 	bl	80032bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	24000198 	.word	0x24000198

08000b60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM6_DAC_IRQHandler+0x10>)
 8000b66:	f005 fb15 	bl	8006194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2400023c 	.word	0x2400023c

08000b74 <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <FDCAN_CAL_IRQHandler+0x10>)
 8000b7a:	f001 f92d 	bl	8001dd8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	240000a4 	.word	0x240000a4

08000b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return 1;
 8000b8c:	2301      	movs	r3, #1
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_kill>:

int _kill(int pid, int sig)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ba2:	f00a fdc1 	bl	800b728 <__errno>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2216      	movs	r2, #22
 8000baa:	601a      	str	r2, [r3, #0]
  return -1;
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_exit>:

void _exit (int status)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ffe7 	bl	8000b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bca:	e7fe      	b.n	8000bca <_exit+0x12>

08000bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e00a      	b.n	8000bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bde:	f3af 8000 	nop.w
 8000be2:	4601      	mov	r1, r0
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf0      	blt.n	8000bde <_read+0x12>
  }

  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e009      	b.n	8000c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf1      	blt.n	8000c18 <_write+0x12>
  }
  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_close>:

int _close(int file)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c66:	605a      	str	r2, [r3, #4]
  return 0;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_isatty>:

int _isatty(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f00a fd26 	bl	800b728 <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24080000 	.word	0x24080000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	240001ec 	.word	0x240001ec
 8000d10:	2400d4e8 	.word	0x2400d4e8

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d18:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <SystemInit+0xe4>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a36      	ldr	r2, [pc, #216]	; (8000df8 <SystemInit+0xe4>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d28:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <SystemInit+0xe8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 030f 	and.w	r3, r3, #15
 8000d30:	2b06      	cmp	r3, #6
 8000d32:	d807      	bhi.n	8000d44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d34:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <SystemInit+0xe8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f023 030f 	bic.w	r3, r3, #15
 8000d3c:	4a2f      	ldr	r2, [pc, #188]	; (8000dfc <SystemInit+0xe8>)
 8000d3e:	f043 0307 	orr.w	r3, r3, #7
 8000d42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d44:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <SystemInit+0xec>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a2d      	ldr	r2, [pc, #180]	; (8000e00 <SystemInit+0xec>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <SystemInit+0xec>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d56:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <SystemInit+0xec>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4929      	ldr	r1, [pc, #164]	; (8000e00 <SystemInit+0xec>)
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <SystemInit+0xf0>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <SystemInit+0xe8>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d007      	beq.n	8000d7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <SystemInit+0xe8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 030f 	bic.w	r3, r3, #15
 8000d76:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <SystemInit+0xe8>)
 8000d78:	f043 0307 	orr.w	r3, r3, #7
 8000d7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <SystemInit+0xec>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <SystemInit+0xec>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <SystemInit+0xec>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <SystemInit+0xec>)
 8000d92:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <SystemInit+0xf4>)
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <SystemInit+0xec>)
 8000d98:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <SystemInit+0xf8>)
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <SystemInit+0xec>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <SystemInit+0xfc>)
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <SystemInit+0xec>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <SystemInit+0xec>)
 8000daa:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <SystemInit+0xfc>)
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <SystemInit+0xec>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <SystemInit+0xec>)
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <SystemInit+0xfc>)
 8000db8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <SystemInit+0xec>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <SystemInit+0xec>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <SystemInit+0xec>)
 8000dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <SystemInit+0xec>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <SystemInit+0x100>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <SystemInit+0x104>)
 8000dd8:	4013      	ands	r3, r2
 8000dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dde:	d202      	bcs.n	8000de6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <SystemInit+0x108>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <SystemInit+0x10c>)
 8000de8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000dec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00
 8000dfc:	52002000 	.word	0x52002000
 8000e00:	58024400 	.word	0x58024400
 8000e04:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e08:	02020200 	.word	0x02020200
 8000e0c:	01ff0000 	.word	0x01ff0000
 8000e10:	01010280 	.word	0x01010280
 8000e14:	5c001000 	.word	0x5c001000
 8000e18:	ffff0000 	.word	0xffff0000
 8000e1c:	51008108 	.word	0x51008108
 8000e20:	52004000 	.word	0x52004000

08000e24 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM3_Init+0x94>)
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <MX_TIM3_Init+0x98>)
 8000e46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM3_Init+0x94>)
 8000e4a:	22ef      	movs	r2, #239	; 0xef
 8000e4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM3_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_TIM3_Init+0x94>)
 8000e56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_TIM3_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM3_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e68:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_TIM3_Init+0x94>)
 8000e6a:	f005 f8c3 	bl	8005ff4 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e74:	f7ff fdea 	bl	8000a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <MX_TIM3_Init+0x94>)
 8000e86:	f005 faa5 	bl	80063d4 <HAL_TIM_ConfigClockSource>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e90:	f7ff fddc 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_TIM3_Init+0x94>)
 8000ea2:	f005 fcef 	bl	8006884 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000eac:	f7ff fdce 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	240001f0 	.word	0x240001f0
 8000ebc:	40000400 	.word	0x40000400

08000ec0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ed2:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <MX_TIM6_Init+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ed8:	22ef      	movs	r2, #239	; 0xef
 8000eda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000ef2:	f005 f87f 	bl	8005ff4 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000efc:	f7ff fda6 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_TIM6_Init+0x64>)
 8000f0e:	f005 fcb9 	bl	8006884 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f18:	f7ff fd98 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2400023c 	.word	0x2400023c
 8000f28:	40001000 	.word	0x40001000

08000f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <HAL_TIM_Base_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d117      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_TIM_Base_MspInit+0x88>)
 8000f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <HAL_TIM_Base_MspInit+0x88>)
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_TIM_Base_MspInit+0x88>)
 8000f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2101      	movs	r1, #1
 8000f60:	201d      	movs	r0, #29
 8000f62:	f000 f9ce 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f66:	201d      	movs	r0, #29
 8000f68:	f000 f9e5 	bl	8001336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f6c:	e01b      	b.n	8000fa6 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM6)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_TIM_Base_MspInit+0x8c>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d116      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_TIM_Base_MspInit+0x88>)
 8000f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_TIM_Base_MspInit+0x88>)
 8000f80:	f043 0310 	orr.w	r3, r3, #16
 8000f84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_TIM_Base_MspInit+0x88>)
 8000f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2105      	movs	r1, #5
 8000f9a:	2036      	movs	r0, #54	; 0x36
 8000f9c:	f000 f9b1 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fa0:	2036      	movs	r0, #54	; 0x36
 8000fa2:	f000 f9c8 	bl	8001336 <HAL_NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40000400 	.word	0x40000400
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	40001000 	.word	0x40001000

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff fea8 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f00a fba3 	bl	800b734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fc3f 	bl	8000870 <main>
  bx  lr
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ffc:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001000:	0800ea48 	.word	0x0800ea48
  ldr r2, =_sbss
 8001004:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001008:	2400d4e8 	.word	0x2400d4e8

0800100c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC3_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001016:	2003      	movs	r0, #3
 8001018:	f000 f968 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800101c:	f003 fb02 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8001020:	4602      	mov	r2, r0
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	4913      	ldr	r1, [pc, #76]	; (800107c <HAL_Init+0x6c>)
 800102e:	5ccb      	ldrb	r3, [r1, r3]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_Init+0x68>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_Init+0x6c>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_Init+0x70>)
 8001052:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001054:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <HAL_Init+0x74>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105a:	200f      	movs	r0, #15
 800105c:	f000 f814 	bl	8001088 <HAL_InitTick>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e002      	b.n	8001070 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800106a:	f7ff fcf5 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	58024400 	.word	0x58024400
 800107c:	0800d06c 	.word	0x0800d06c
 8001080:	24000004 	.word	0x24000004
 8001084:	24000000 	.word	0x24000000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_InitTick+0x60>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e021      	b.n	80010e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_InitTick+0x64>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_InitTick+0x60>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f94d 	bl	8001352 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f917 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x68>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2400000c 	.word	0x2400000c
 80010ec:	24000000 	.word	0x24000000
 80010f0:	24000008 	.word	0x24000008

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2400000c 	.word	0x2400000c
 8001118:	24000288 	.word	0x24000288

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	24000288 	.word	0x24000288

08001134 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetREVID+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	0c1b      	lsrs	r3, r3, #16
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	5c001000 	.word	0x5c001000

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	4313      	orrs	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	05fa0000 	.word	0x05fa0000

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff40 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff33 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa4 	bl	80012a8 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b098      	sub	sp, #96	; 0x60
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001374:	4a84      	ldr	r2, [pc, #528]	; (8001588 <HAL_FDCAN_Init+0x21c>)
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4611      	mov	r1, r2
 800137c:	224c      	movs	r2, #76	; 0x4c
 800137e:	4618      	mov	r0, r3
 8001380:	f00a f9fe 	bl	800b780 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c6      	b.n	800171c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a7e      	ldr	r2, [pc, #504]	; (800158c <HAL_FDCAN_Init+0x220>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d106      	bne.n	80013a6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013a0:	461a      	mov	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f846 	bl	800044c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0210 	bic.w	r2, r2, #16
 80013ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d0:	f7ff fea4 	bl	800111c <HAL_GetTick>
 80013d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013d6:	e014      	b.n	8001402 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013d8:	f7ff fea0 	bl	800111c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b0a      	cmp	r3, #10
 80013e4:	d90d      	bls.n	8001402 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2203      	movs	r2, #3
 80013fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e18c      	b.n	800171c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b08      	cmp	r3, #8
 800140e:	d0e3      	beq.n	80013d8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff fe7c 	bl	800111c <HAL_GetTick>
 8001424:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001426:	e014      	b.n	8001452 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001428:	f7ff fe78 	bl	800111c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b0a      	cmp	r3, #10
 8001434:	d90d      	bls.n	8001452 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e164      	b.n	800171c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0e3      	beq.n	8001428 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f042 0202 	orr.w	r2, r2, #2
 800146e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7c1b      	ldrb	r3, [r3, #16]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d108      	bne.n	800148a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001486:	619a      	str	r2, [r3, #24]
 8001488:	e007      	b.n	800149a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001498:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7c5b      	ldrb	r3, [r3, #17]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d108      	bne.n	80014b4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	e007      	b.n	80014c4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7c9b      	ldrb	r3, [r3, #18]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d108      	bne.n	80014de <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014da:	619a      	str	r2, [r3, #24]
 80014dc:	e007      	b.n	80014ee <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699a      	ldr	r2, [r3, #24]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014ec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001512:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0210 	bic.w	r2, r2, #16
 8001522:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0204 	orr.w	r2, r2, #4
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	e030      	b.n	80015a0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d02c      	beq.n	80015a0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d020      	beq.n	8001590 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800155c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691a      	ldr	r2, [r3, #16]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0210 	orr.w	r2, r2, #16
 800156c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d114      	bne.n	80015a0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0220 	orr.w	r2, r2, #32
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	e00b      	b.n	80015a0 <HAL_FDCAN_Init+0x234>
 8001588:	0800cf80 	.word	0x0800cf80
 800158c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0220 	orr.w	r2, r2, #32
 800159e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015b0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80015b8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80015c8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80015ca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015d4:	d115      	bne.n	8001602 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	3b01      	subs	r3, #1
 80015e2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015e4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	3b01      	subs	r3, #1
 80015ec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80015ee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	3b01      	subs	r3, #1
 80015f8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80015fe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001600:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00a      	beq.n	8001620 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001628:	4413      	add	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d011      	beq.n	8001652 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001636:	f023 0107 	bic.w	r1, r3, #7
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	3360      	adds	r3, #96	; 0x60
 8001642:	443b      	add	r3, r7
 8001644:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	2b00      	cmp	r3, #0
 8001658:	d011      	beq.n	800167e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001662:	f023 0107 	bic.w	r1, r3, #7
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	3360      	adds	r3, #96	; 0x60
 800166e:	443b      	add	r3, r7
 8001670:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	2b00      	cmp	r3, #0
 8001684:	d012      	beq.n	80016ac <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800168e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	3360      	adds	r3, #96	; 0x60
 800169a:	443b      	add	r3, r7
 800169c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016a0:	011a      	lsls	r2, r3, #4
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d012      	beq.n	80016da <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016bc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	3360      	adds	r3, #96	; 0x60
 80016c8:	443b      	add	r3, r7
 80016ca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016ce:	021a      	lsls	r2, r3, #8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <HAL_FDCAN_Init+0x3b8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d107      	bne.n	80016f4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f022 0203 	bic.w	r2, r2, #3
 80016f2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fe5b 	bl	80023c8 <FDCAN_CalcultateRamBlockAddresses>
 8001712:	4603      	mov	r3, r0
 8001714:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001718:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800171c:	4618      	mov	r0, r3
 800171e:	3760      	adds	r7, #96	; 0x60
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	4000a000 	.word	0x4000a000

08001728 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001738:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d002      	beq.n	8001746 <HAL_FDCAN_ConfigFilter+0x1e>
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d157      	bne.n	80017f6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d12b      	bne.n	80017a6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b07      	cmp	r3, #7
 8001754:	d10d      	bne.n	8001772 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001762:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001768:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800176a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e00e      	b.n	8001790 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800177e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001786:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e025      	b.n	80017f2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	075a      	lsls	r2, r3, #29
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	d103      	bne.n	80017c4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	e006      	b.n	80017d2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	079a      	lsls	r2, r3, #30
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3304      	adds	r3, #4
 80017ea:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e008      	b.n	8001808 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017fc:	f043 0202 	orr.w	r2, r3, #2
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
  }
}
 8001808:	4618      	mov	r0, r3
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d110      	bne.n	8001850 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001836:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800183c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	e008      	b.n	8001862 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001856:	f043 0204 	orr.w	r2, r3, #4
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
  }
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_FDCAN_ConfigTxDelayCompensation>:
  * @param  TdcFilter Transmitter Delay Compensation Filter Window Length.
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset, uint32_t TdcFilter)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	0219      	lsls	r1, r3, #8
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	430a      	orrs	r2, r1
 8001892:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e008      	b.n	80018aa <HAL_FDCAN_ConfigTxDelayCompensation+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800189e:	f043 0204 	orr.w	r2, r3, #4
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d109      	bne.n	80018de <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018d8:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e008      	b.n	80018f0 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018e4:	f043 0204 	orr.w	r2, r3, #4
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
  }
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d111      	bne.n	8001934 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e008      	b.n	8001946 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800193a:	f043 0204 	orr.w	r2, r3, #4
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
  }
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d141      	bne.n	80019ee <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001972:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e038      	b.n	8001a00 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e026      	b.n	8001a00 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80019ba:	0c1b      	lsrs	r3, r3, #16
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68b9      	ldr	r1, [r7, #8]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fe83 	bl	80026d4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	fa01 f202 	lsl.w	r2, r1, r2
 80019da:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80019de:	2201      	movs	r2, #1
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e008      	b.n	8001a00 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019f4:	f043 0208 	orr.w	r2, r3, #8
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
  }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b08b      	sub	sp, #44	; 0x2c
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a20:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a22:	7efb      	ldrb	r3, [r7, #27]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	f040 814b 	bne.w	8001cc0 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b40      	cmp	r3, #64	; 0x40
 8001a2e:	d14d      	bne.n	8001acc <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001a38:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a46:	f043 0220 	orr.w	r2, r3, #32
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e13e      	b.n	8001cd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e12c      	b.n	8001cd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a80:	0e1b      	lsrs	r3, r3, #24
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10b      	bne.n	8001aa2 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001a92:	0fdb      	lsrs	r3, r3, #31
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a9c:	d101      	bne.n	8001aa2 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	69f9      	ldr	r1, [r7, #28]
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e069      	b.n	8001ba0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b41      	cmp	r3, #65	; 0x41
 8001ad0:	d14d      	bne.n	8001b6e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ae8:	f043 0220 	orr.w	r2, r3, #32
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0ed      	b.n	8001cd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0db      	b.n	8001cd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001b22:	0e1b      	lsrs	r3, r3, #24
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d10b      	bne.n	8001b44 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b34:	0fdb      	lsrs	r3, r3, #31
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b3e:	d101      	bne.n	8001b44 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b40:	2301      	movs	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	69f9      	ldr	r1, [r7, #28]
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6c:	e018      	b.n	8001ba0 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d309      	bcc.n	8001b8c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b7e:	f043 0220 	orr.w	r2, r3, #32
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0a2      	b.n	8001cd2 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0c9b      	lsrs	r3, r3, #18
 8001bba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e005      	b.n	8001bd0 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	3304      	adds	r3, #4
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e1b      	lsrs	r3, r3, #24
 8001c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0fda      	lsrs	r2, r3, #31
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3304      	adds	r3, #4
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
 8001c42:	e00a      	b.n	8001c5a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	441a      	add	r2, r3
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	440b      	add	r3, r1
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	3301      	adds	r3, #1
 8001c58:	623b      	str	r3, [r7, #32]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	0c1b      	lsrs	r3, r3, #16
 8001c60:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	461a      	mov	r2, r3
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d3eb      	bcc.n	8001c44 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b40      	cmp	r3, #64	; 0x40
 8001c70:	d105      	bne.n	8001c7e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001c7c:	e01e      	b.n	8001cbc <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b41      	cmp	r3, #65	; 0x41
 8001c82:	d105      	bne.n	8001c90 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001c8e:	e015      	b.n	8001cbc <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b1f      	cmp	r3, #31
 8001c94:	d808      	bhi.n	8001ca8 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001ca6:	e009      	b.n	8001cbc <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f003 021f 	and.w	r2, r3, #31
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e008      	b.n	8001cd2 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cc6:	f043 0208 	orr.w	r2, r3, #8
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
  }
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	372c      	adds	r7, #44	; 0x2c
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	0800d07c 	.word	0x0800d07c

08001ce4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001cf6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d002      	beq.n	8001d04 <HAL_FDCAN_ActivateNotification+0x20>
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d155      	bne.n	8001db0 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d108      	bne.n	8001d24 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0201 	orr.w	r2, r2, #1
 8001d20:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d22:	e014      	b.n	8001d4e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d108      	bne.n	8001d46 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0202 	orr.w	r2, r2, #2
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d44:	e003      	b.n	8001d4e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d009      	beq.n	8001d6c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_FDCAN_ActivateNotification+0xec>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	6553      	str	r3, [r2, #84]	; 0x54
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	0f9b      	lsrs	r3, r3, #30
 8001da6:	490b      	ldr	r1, [pc, #44]	; (8001dd4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e008      	b.n	8001dc2 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001db6:	f043 0202 	orr.w	r2, r3, #2
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	3fcfffff 	.word	0x3fcfffff
 8001dd4:	4000a800 	.word	0x4000a800

08001dd8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b096      	sub	sp, #88	; 0x58
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001de0:	4b95      	ldr	r3, [pc, #596]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	079b      	lsls	r3, r3, #30
 8001de6:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001de8:	4b93      	ldr	r3, [pc, #588]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	079b      	lsls	r3, r3, #30
 8001dee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001df0:	4013      	ands	r3, r2
 8001df2:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001dfe:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e08:	4013      	ands	r3, r2
 8001e0a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e20:	4013      	ands	r3, r2
 8001e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e38:	4013      	ands	r3, r2
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001e46:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e50:	4013      	ands	r3, r2
 8001e52:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001e5e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e68:	4013      	ands	r3, r2
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00f      	beq.n	8001ea6 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e98:	651a      	str	r2, [r3, #80]	; 0x50
 8001e9a:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fa44 	bl	800232e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01c      	beq.n	8001eea <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d017      	beq.n	8001eea <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ece:	4013      	ands	r3, r2
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eda:	651a      	str	r2, [r3, #80]	; 0x50
 8001edc:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ee2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f9f9 	bl	80022dc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ef6:	4b51      	ldr	r3, [pc, #324]	; (800203c <HAL_FDCAN_IRQHandler+0x264>)
 8001ef8:	400b      	ands	r3, r1
 8001efa:	6513      	str	r3, [r2, #80]	; 0x50
 8001efc:	4a4e      	ldr	r2, [pc, #312]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f00:	0f9b      	lsrs	r3, r3, #30
 8001f02:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001f04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f9b2 	bl	8002270 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00d      	beq.n	8001f2e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f18:	4b48      	ldr	r3, [pc, #288]	; (800203c <HAL_FDCAN_IRQHandler+0x264>)
 8001f1a:	400b      	ands	r3, r1
 8001f1c:	6513      	str	r3, [r2, #80]	; 0x50
 8001f1e:	4a46      	ldr	r2, [pc, #280]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f22:	0f9b      	lsrs	r3, r3, #30
 8001f24:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f9ac 	bl	8002286 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_FDCAN_IRQHandler+0x264>)
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	6513      	str	r3, [r2, #80]	; 0x50
 8001f40:	4a3d      	ldr	r2, [pc, #244]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f44:	0f9b      	lsrs	r3, r3, #30
 8001f46:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f005 fc7c 	bl	8007848 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00d      	beq.n	8001f72 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f5c:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_FDCAN_IRQHandler+0x264>)
 8001f5e:	400b      	ands	r3, r1
 8001f60:	6513      	str	r3, [r2, #80]	; 0x50
 8001f62:	4a35      	ldr	r2, [pc, #212]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f66:	0f9b      	lsrs	r3, r3, #30
 8001f68:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f995 	bl	800229c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00f      	beq.n	8001f9c <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f8e:	651a      	str	r2, [r3, #80]	; 0x50
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f98b 	bl	80022b2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01c      	beq.n	8001fe0 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d017      	beq.n	8001fe0 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd0:	651a      	str	r2, [r3, #80]	; 0x50
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f973 	bl	80022c6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00f      	beq.n	800200a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ffc:	651a      	str	r2, [r3, #80]	; 0x50
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f974 	bl	80022f2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800200a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d015      	beq.n	8002040 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d010      	beq.n	8002040 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002026:	651a      	str	r2, [r3, #80]	; 0x50
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_FDCAN_IRQHandler+0x260>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f969 	bl	8002306 <HAL_FDCAN_TimestampWraparoundCallback>
 8002034:	e004      	b.n	8002040 <HAL_FDCAN_IRQHandler+0x268>
 8002036:	bf00      	nop
 8002038:	4000a800 	.word	0x4000a800
 800203c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00f      	beq.n	800206a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800204a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800205c:	651a      	str	r2, [r3, #80]	; 0x50
 800205e:	4b81      	ldr	r3, [pc, #516]	; (8002264 <HAL_FDCAN_IRQHandler+0x48c>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f958 	bl	800231a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800206a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d014      	beq.n	800209e <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00f      	beq.n	800209e <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002086:	651a      	str	r2, [r3, #80]	; 0x50
 8002088:	4b76      	ldr	r3, [pc, #472]	; (8002264 <HAL_FDCAN_IRQHandler+0x48c>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002094:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800209e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00d      	beq.n	80020c0 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020aa:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <HAL_FDCAN_IRQHandler+0x490>)
 80020ac:	400b      	ands	r3, r1
 80020ae:	6513      	str	r3, [r2, #80]	; 0x50
 80020b0:	4a6c      	ldr	r2, [pc, #432]	; (8002264 <HAL_FDCAN_IRQHandler+0x48c>)
 80020b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b4:	0f9b      	lsrs	r3, r3, #30
 80020b6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80020b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f94b 	bl	8002356 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80020c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d011      	beq.n	80020ea <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020cc:	4b66      	ldr	r3, [pc, #408]	; (8002268 <HAL_FDCAN_IRQHandler+0x490>)
 80020ce:	400b      	ands	r3, r1
 80020d0:	6513      	str	r3, [r2, #80]	; 0x50
 80020d2:	4a64      	ldr	r2, [pc, #400]	; (8002264 <HAL_FDCAN_IRQHandler+0x48c>)
 80020d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d6:	0f9b      	lsrs	r3, r3, #30
 80020d8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80020e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a5f      	ldr	r2, [pc, #380]	; (800226c <HAL_FDCAN_IRQHandler+0x494>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	f040 80aa 	bne.w	800224a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a2 	beq.w	800224a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800211a:	4013      	ands	r3, r2
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002132:	4013      	ands	r3, r2
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214a:	4013      	ands	r3, r2
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002158:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	4013      	ands	r3, r2
 8002164:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002170:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	4013      	ands	r3, r2
 800217c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800219a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800219c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8e4 	bl	800236c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80021b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f8e4 	bl	8002382 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d019      	beq.n	80021f8 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d014      	beq.n	80021f8 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6939      	ldr	r1, [r7, #16]
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8d0 	bl	8002398 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f8d1 	bl	80023b0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	6a3a      	ldr	r2, [r7, #32]
 800221a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f874 	bl	8002342 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800225a:	bf00      	nop
 800225c:	3758      	adds	r7, #88	; 0x58
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	4000a800 	.word	0x4000a800
 8002268:	3fcfffff 	.word	0x3fcfffff
 800226c:	4000a000 	.word	0x4000a000

08002270 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80023de:	4ba7      	ldr	r3, [pc, #668]	; (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	0091      	lsls	r1, r2, #2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	430b      	orrs	r3, r1
 80023ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	4413      	add	r3, r2
 8002414:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800241e:	4b97      	ldr	r3, [pc, #604]	; (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002420:	4013      	ands	r3, r2
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	0091      	lsls	r1, r2, #2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	430b      	orrs	r3, r1
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002438:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	4413      	add	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002460:	4b86      	ldr	r3, [pc, #536]	; (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002462:	4013      	ands	r3, r2
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	0091      	lsls	r1, r2, #2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	430b      	orrs	r3, r1
 800246e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800247a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	041a      	lsls	r2, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4413      	add	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024a8:	4b74      	ldr	r3, [pc, #464]	; (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	0091      	lsls	r1, r2, #2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024c2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ca:	041a      	lsls	r2, r3, #16
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	4413      	add	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80024f0:	4b62      	ldr	r3, [pc, #392]	; (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	0091      	lsls	r1, r2, #2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4413      	add	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800251c:	4b57      	ldr	r3, [pc, #348]	; (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800251e:	4013      	ands	r3, r2
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	0091      	lsls	r1, r2, #2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002536:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	041a      	lsls	r2, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4413      	add	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002560:	4013      	ands	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	0091      	lsls	r1, r2, #2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	430b      	orrs	r3, r1
 800256c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002578:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002594:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259c:	061a      	lsls	r2, r3, #24
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ac:	4b34      	ldr	r3, [pc, #208]	; (8002680 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80025ae:	4413      	add	r3, r2
 80025b0:	009a      	lsls	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	441a      	add	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	441a      	add	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	441a      	add	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d915      	bls.n	80026a4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002678:	e006      	b.n	8002688 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800267a:	bf00      	nop
 800267c:	ffff0003 	.word	0xffff0003
 8002680:	10002b00 	.word	0x10002b00
 8002684:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2203      	movs	r2, #3
 800269c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e010      	b.n	80026c6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e005      	b.n	80026b8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3304      	adds	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d3f3      	bcc.n	80026ac <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop

080026d4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80026f2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e00a      	b.n	8002716 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002708:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800270e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002714:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002720:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002726:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800272c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002740:	6839      	ldr	r1, [r7, #0]
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3304      	adds	r3, #4
 8002756:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	3304      	adds	r3, #4
 8002762:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	e020      	b.n	80027ac <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3303      	adds	r3, #3
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3302      	adds	r3, #2
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	440b      	add	r3, r1
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002782:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	440b      	add	r3, r1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002790:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	440a      	add	r2, r1
 8002798:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800279a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	3304      	adds	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3304      	adds	r3, #4
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	4a06      	ldr	r2, [pc, #24]	; (80027cc <FDCAN_CopyMessageToRAM+0xf8>)
 80027b4:	5cd3      	ldrb	r3, [r2, r3]
 80027b6:	461a      	mov	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d3d5      	bcc.n	800276a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
 80027c2:	3724      	adds	r7, #36	; 0x24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	0800d07c 	.word	0x0800d07c

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_GPIO_Init+0x234>)
 80027e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027e2:	e194      	b.n	8002b0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8186 	beq.w	8002b08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b01      	cmp	r3, #1
 8002806:	d005      	beq.n	8002814 <HAL_GPIO_Init+0x44>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d130      	bne.n	8002876 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800284a:	2201      	movs	r2, #1
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 0201 	and.w	r2, r3, #1
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b03      	cmp	r3, #3
 8002880:	d017      	beq.n	80028b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	2203      	movs	r2, #3
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d123      	bne.n	8002906 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	08da      	lsrs	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3208      	adds	r2, #8
 80028c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	220f      	movs	r2, #15
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	08da      	lsrs	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3208      	adds	r2, #8
 8002900:	69b9      	ldr	r1, [r7, #24]
 8002902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2203      	movs	r2, #3
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80e0 	beq.w	8002b08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002948:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <HAL_GPIO_Init+0x238>)
 800294a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800294e:	4a2e      	ldr	r2, [pc, #184]	; (8002a08 <HAL_GPIO_Init+0x238>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_GPIO_Init+0x238>)
 800295a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002966:	4a29      	ldr	r2, [pc, #164]	; (8002a0c <HAL_GPIO_Init+0x23c>)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	220f      	movs	r2, #15
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a20      	ldr	r2, [pc, #128]	; (8002a10 <HAL_GPIO_Init+0x240>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d052      	beq.n	8002a38 <HAL_GPIO_Init+0x268>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HAL_GPIO_Init+0x244>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d031      	beq.n	80029fe <HAL_GPIO_Init+0x22e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_GPIO_Init+0x248>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02b      	beq.n	80029fa <HAL_GPIO_Init+0x22a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_GPIO_Init+0x24c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d025      	beq.n	80029f6 <HAL_GPIO_Init+0x226>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_GPIO_Init+0x250>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01f      	beq.n	80029f2 <HAL_GPIO_Init+0x222>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <HAL_GPIO_Init+0x254>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x21e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_GPIO_Init+0x258>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x21a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_GPIO_Init+0x25c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x216>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_GPIO_Init+0x260>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x212>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_GPIO_Init+0x264>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x20e>
 80029da:	2309      	movs	r3, #9
 80029dc:	e02d      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029de:	230a      	movs	r3, #10
 80029e0:	e02b      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029e2:	2308      	movs	r3, #8
 80029e4:	e029      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e027      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029ea:	2306      	movs	r3, #6
 80029ec:	e025      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029ee:	2305      	movs	r3, #5
 80029f0:	e023      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029f2:	2304      	movs	r3, #4
 80029f4:	e021      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e01f      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e01d      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e01b      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 8002a02:	bf00      	nop
 8002a04:	58000080 	.word	0x58000080
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	58000400 	.word	0x58000400
 8002a10:	58020000 	.word	0x58020000
 8002a14:	58020400 	.word	0x58020400
 8002a18:	58020800 	.word	0x58020800
 8002a1c:	58020c00 	.word	0x58020c00
 8002a20:	58021000 	.word	0x58021000
 8002a24:	58021400 	.word	0x58021400
 8002a28:	58021800 	.word	0x58021800
 8002a2c:	58021c00 	.word	0x58021c00
 8002a30:	58022000 	.word	0x58022000
 8002a34:	58022400 	.word	0x58022400
 8002a38:	2300      	movs	r3, #0
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	f002 0203 	and.w	r2, r2, #3
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	4093      	lsls	r3, r2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4a:	4938      	ldr	r1, [pc, #224]	; (8002b2c <HAL_GPIO_Init+0x35c>)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f ae63 	bne.w	80027e4 <HAL_GPIO_Init+0x14>
  }
}
 8002b1e:	bf00      	nop
 8002b20:	bf00      	nop
 8002b22:	3724      	adds	r7, #36	; 0x24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	58000400 	.word	0x58000400

08002b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e07f      	b.n	8002c42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fd fdc2 	bl	80006e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	; 0x24
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	e006      	b.n	8002bb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d104      	bne.n	8002bca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_I2C_Init+0x11c>)
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69d9      	ldr	r1, [r3, #28]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1a      	ldr	r2, [r3, #32]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	02008000 	.word	0x02008000

08002c50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	460b      	mov	r3, r1
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	f040 80f9 	bne.w	8002e6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <HAL_I2C_Mem_Write+0x34>
 8002c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0ed      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_I2C_Mem_Write+0x4e>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0e6      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ca6:	f7fe fa39 	bl	800111c <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2319      	movs	r3, #25
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fbe5 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d1      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2221      	movs	r2, #33	; 0x21
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf0:	88f8      	ldrh	r0, [r7, #6]
 8002cf2:	893a      	ldrh	r2, [r7, #8]
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	4603      	mov	r3, r0
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 faf5 	bl	80032f0 <I2C_RequestMemoryWrite>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0a9      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2bff      	cmp	r3, #255	; 0xff
 8002d20:	d90e      	bls.n	8002d40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	8979      	ldrh	r1, [r7, #10]
 8002d30:	2300      	movs	r3, #0
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fd5f 	bl	80037fc <I2C_TransferConfig>
 8002d3e:	e00f      	b.n	8002d60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	8979      	ldrh	r1, [r7, #10]
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fd4e 	bl	80037fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fbde 	bl	8003526 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e07b      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d034      	beq.n	8002e18 <HAL_I2C_Mem_Write+0x1c8>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d130      	bne.n	8002e18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2180      	movs	r1, #128	; 0x80
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fb61 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e04d      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2bff      	cmp	r3, #255	; 0xff
 8002dd8:	d90e      	bls.n	8002df8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	22ff      	movs	r2, #255	; 0xff
 8002dde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	8979      	ldrh	r1, [r7, #10]
 8002de8:	2300      	movs	r3, #0
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fd03 	bl	80037fc <I2C_TransferConfig>
 8002df6:	e00f      	b.n	8002e18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	8979      	ldrh	r1, [r7, #10]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fcf2 	bl	80037fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d19e      	bne.n	8002d60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fbc4 	bl	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e01a      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_I2C_Mem_Write+0x224>)
 8002e4a:	400b      	ands	r3, r1
 8002e4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
  }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	fe00e800 	.word	0xfe00e800

08002e78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	f040 80fd 	bne.w	800309a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_I2C_Mem_Read+0x34>
 8002ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0f1      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2C_Mem_Read+0x4e>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0ea      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ece:	f7fe f925 	bl	800111c <HAL_GetTick>
 8002ed2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2319      	movs	r3, #25
 8002eda:	2201      	movs	r2, #1
 8002edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fad1 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0d5      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2222      	movs	r2, #34	; 0x22
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2240      	movs	r2, #64	; 0x40
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a3a      	ldr	r2, [r7, #32]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f18:	88f8      	ldrh	r0, [r7, #6]
 8002f1a:	893a      	ldrh	r2, [r7, #8]
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	4603      	mov	r3, r0
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fa35 	bl	8003398 <I2C_RequestMemoryRead>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0ad      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2bff      	cmp	r3, #255	; 0xff
 8002f48:	d90e      	bls.n	8002f68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	22ff      	movs	r2, #255	; 0xff
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	8979      	ldrh	r1, [r7, #10]
 8002f58:	4b52      	ldr	r3, [pc, #328]	; (80030a4 <HAL_I2C_Mem_Read+0x22c>)
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fc4b 	bl	80037fc <I2C_TransferConfig>
 8002f66:	e00f      	b.n	8002f88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_I2C_Mem_Read+0x22c>)
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fc3a 	bl	80037fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2104      	movs	r1, #4
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fa78 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07c      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d034      	beq.n	8003048 <HAL_I2C_Mem_Read+0x1d0>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d130      	bne.n	8003048 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	2200      	movs	r2, #0
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fa49 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e04d      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2bff      	cmp	r3, #255	; 0xff
 8003008:	d90e      	bls.n	8003028 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	b2da      	uxtb	r2, r3
 8003016:	8979      	ldrh	r1, [r7, #10]
 8003018:	2300      	movs	r3, #0
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fbeb 	bl	80037fc <I2C_TransferConfig>
 8003026:	e00f      	b.n	8003048 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	b2da      	uxtb	r2, r3
 8003038:	8979      	ldrh	r1, [r7, #10]
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fbda 	bl	80037fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d19a      	bne.n	8002f88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 faac 	bl	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e01a      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2220      	movs	r2, #32
 800306c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_I2C_Mem_Read+0x230>)
 800307a:	400b      	ands	r3, r1
 800307c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	80002400 	.word	0x80002400
 80030a8:	fe00e800 	.word	0xfe00e800

080030ac <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	460b      	mov	r3, r1
 80030ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	f040 80ef 	bne.w	80032ac <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
 80030e0:	e0e5      	b.n	80032ae <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_I2C_IsDeviceReady+0x44>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e0de      	b.n	80032ae <HAL_I2C_IsDeviceReady+0x202>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d105      	bne.n	800311a <HAL_I2C_IsDeviceReady+0x6e>
 800310e:	897b      	ldrh	r3, [r7, #10]
 8003110:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003114:	4b68      	ldr	r3, [pc, #416]	; (80032b8 <HAL_I2C_IsDeviceReady+0x20c>)
 8003116:	4313      	orrs	r3, r2
 8003118:	e004      	b.n	8003124 <HAL_I2C_IsDeviceReady+0x78>
 800311a:	897b      	ldrh	r3, [r7, #10]
 800311c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003120:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800312a:	f7fd fff7 	bl	800111c <HAL_GetTick>
 800312e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b20      	cmp	r3, #32
 800313c:	bf0c      	ite	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	2300      	movne	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b10      	cmp	r3, #16
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800315c:	e034      	b.n	80031c8 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d01a      	beq.n	800319c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fd ffd9 	bl	800111c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <HAL_I2C_IsDeviceReady+0xd0>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10f      	bne.n	800319c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e088      	b.n	80032ae <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b10      	cmp	r3, #16
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031c8:	7ffb      	ldrb	r3, [r7, #31]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_I2C_IsDeviceReady+0x128>
 80031ce:	7fbb      	ldrb	r3, [r7, #30]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0c4      	beq.n	800315e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b10      	cmp	r3, #16
 80031e0:	d01a      	beq.n	8003218 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2120      	movs	r1, #32
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f94b 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e058      	b.n	80032ae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2220      	movs	r2, #32
 8003202:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e04a      	b.n	80032ae <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	2120      	movs	r1, #32
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f930 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e03d      	b.n	80032ae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2210      	movs	r2, #16
 8003238:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2220      	movs	r2, #32
 8003240:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d118      	bne.n	800327c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003258:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	2120      	movs	r1, #32
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f90f 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e01c      	b.n	80032ae <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2220      	movs	r2, #32
 800327a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3301      	adds	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	f63f af3d 	bhi.w	8003106 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	02002000 	.word	0x02002000

080032bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
  }
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	4608      	mov	r0, r1
 80032fa:	4611      	mov	r1, r2
 80032fc:	461a      	mov	r2, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	817b      	strh	r3, [r7, #10]
 8003302:	460b      	mov	r3, r1
 8003304:	813b      	strh	r3, [r7, #8]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	8979      	ldrh	r1, [r7, #10]
 8003310:	4b20      	ldr	r3, [pc, #128]	; (8003394 <I2C_RequestMemoryWrite+0xa4>)
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fa6f 	bl	80037fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f8ff 	bl	8003526 <I2C_WaitOnTXISFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e02c      	b.n	800338c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003338:	893b      	ldrh	r3, [r7, #8]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	629a      	str	r2, [r3, #40]	; 0x28
 8003342:	e015      	b.n	8003370 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b2da      	uxtb	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	69b9      	ldr	r1, [r7, #24]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f8e5 	bl	8003526 <I2C_WaitOnTXISFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e012      	b.n	800338c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003366:	893b      	ldrh	r3, [r7, #8]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2200      	movs	r2, #0
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f884 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	80002000 	.word	0x80002000

08003398 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	817b      	strh	r3, [r7, #10]
 80033aa:	460b      	mov	r3, r1
 80033ac:	813b      	strh	r3, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	8979      	ldrh	r1, [r7, #10]
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <I2C_RequestMemoryRead+0xa4>)
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	2300      	movs	r3, #0
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fa1c 	bl	80037fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	69b9      	ldr	r1, [r7, #24]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f8ac 	bl	8003526 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e02c      	b.n	8003432 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033de:	893b      	ldrh	r3, [r7, #8]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
 80033e8:	e015      	b.n	8003416 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033ea:	893b      	ldrh	r3, [r7, #8]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f892 	bl	8003526 <I2C_WaitOnTXISFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e012      	b.n	8003432 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800340c:	893b      	ldrh	r3, [r7, #8]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2200      	movs	r2, #0
 800341e:	2140      	movs	r1, #64	; 0x40
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f831 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	80002000 	.word	0x80002000

08003440 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d103      	bne.n	800345e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2200      	movs	r2, #0
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d007      	beq.n	800347c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	619a      	str	r2, [r3, #24]
  }
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	e031      	b.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d02d      	beq.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fd fe3b 	bl	800111c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d122      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4013      	ands	r3, r2
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d113      	bne.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f043 0220 	orr.w	r2, r3, #32
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e00f      	b.n	800351e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	429a      	cmp	r2, r3
 800351a:	d0be      	beq.n	800349a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003532:	e033      	b.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f87f 	bl	800363c <I2C_IsErrorOccurred>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e031      	b.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d025      	beq.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003550:	f7fd fde4 	bl	800111c <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	429a      	cmp	r2, r3
 800355e:	d302      	bcc.n	8003566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11a      	bne.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b02      	cmp	r3, #2
 8003572:	d013      	beq.n	800359c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e007      	b.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d1c4      	bne.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035c0:	e02f      	b.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f838 	bl	800363c <I2C_IsErrorOccurred>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e02d      	b.n	8003632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fd fda1 	bl	800111c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11a      	bne.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d013      	beq.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e007      	b.n	8003632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b20      	cmp	r3, #32
 800362e:	d1c8      	bne.n	80035c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	d068      	beq.n	800373a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2210      	movs	r2, #16
 800366e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003670:	e049      	b.n	8003706 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d045      	beq.n	8003706 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fd fd4f 	bl	800111c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_IsErrorOccurred+0x54>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d13a      	bne.n	8003706 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b2:	d121      	bne.n	80036f8 <I2C_IsErrorOccurred+0xbc>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ba:	d01d      	beq.n	80036f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036bc:	7cfb      	ldrb	r3, [r7, #19]
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d01a      	beq.n	80036f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036d2:	f7fd fd23 	bl	800111c <HAL_GetTick>
 80036d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036d8:	e00e      	b.n	80036f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036da:	f7fd fd1f 	bl	800111c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b19      	cmp	r3, #25
 80036e6:	d907      	bls.n	80036f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	f043 0320 	orr.w	r3, r3, #32
 80036ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80036f6:	e006      	b.n	8003706 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b20      	cmp	r3, #32
 8003704:	d1e9      	bne.n	80036da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b20      	cmp	r3, #32
 8003712:	d003      	beq.n	800371c <I2C_IsErrorOccurred+0xe0>
 8003714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0aa      	beq.n	8003672 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800371c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003720:	2b00      	cmp	r3, #0
 8003722:	d103      	bne.n	800372c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2220      	movs	r2, #32
 800372a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800375c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f043 0308 	orr.w	r3, r3, #8
 8003774:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800377e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	f043 0302 	orr.w	r3, r3, #2
 8003796:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01c      	beq.n	80037ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff fe45 	bl	8003440 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <I2C_IsErrorOccurred+0x1bc>)
 80037c2:	400b      	ands	r3, r1
 80037c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3728      	adds	r7, #40	; 0x28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	fe00e800 	.word	0xfe00e800

080037fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	4613      	mov	r3, r2
 800380c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800380e:	897b      	ldrh	r3, [r7, #10]
 8003810:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003814:	7a7b      	ldrb	r3, [r7, #9]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800381c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	4313      	orrs	r3, r2
 8003826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800382a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	0d5b      	lsrs	r3, r3, #21
 8003836:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800383a:	4b08      	ldr	r3, [pc, #32]	; (800385c <I2C_TransferConfig+0x60>)
 800383c:	430b      	orrs	r3, r1
 800383e:	43db      	mvns	r3, r3
 8003840:	ea02 0103 	and.w	r1, r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	03ff63ff 	.word	0x03ff63ff

08003860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d138      	bne.n	80038e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003880:	2302      	movs	r3, #2
 8003882:	e032      	b.n	80038ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6819      	ldr	r1, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	d139      	bne.n	8003980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003916:	2302      	movs	r3, #2
 8003918:	e033      	b.n	8003982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2224      	movs	r2, #36	; 0x24
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_PWREx_ConfigSupply+0x70>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d00a      	beq.n	80039ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039a4:	4b16      	ldr	r3, [pc, #88]	; (8003a00 <HAL_PWREx_ConfigSupply+0x70>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d001      	beq.n	80039b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e01f      	b.n	80039f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e01d      	b.n	80039f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <HAL_PWREx_ConfigSupply+0x70>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 0207 	bic.w	r2, r3, #7
 80039c2:	490f      	ldr	r1, [pc, #60]	; (8003a00 <HAL_PWREx_ConfigSupply+0x70>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039ca:	f7fd fba7 	bl	800111c <HAL_GetTick>
 80039ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039d0:	e009      	b.n	80039e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039d2:	f7fd fba3 	bl	800111c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039e0:	d901      	bls.n	80039e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e007      	b.n	80039f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_PWREx_ConfigSupply+0x70>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f2:	d1ee      	bne.n	80039d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	58024800 	.word	0x58024800

08003a04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	; 0x30
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f000 bc48 	b.w	80042a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8088 	beq.w	8003b36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a26:	4b99      	ldr	r3, [pc, #612]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a30:	4b96      	ldr	r3, [pc, #600]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d007      	beq.n	8003a4c <HAL_RCC_OscConfig+0x48>
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	2b18      	cmp	r3, #24
 8003a40:	d111      	bne.n	8003a66 <HAL_RCC_OscConfig+0x62>
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	4b8f      	ldr	r3, [pc, #572]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d06d      	beq.n	8003b34 <HAL_RCC_OscConfig+0x130>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d169      	bne.n	8003b34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f000 bc21 	b.w	80042a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x7a>
 8003a70:	4b86      	ldr	r3, [pc, #536]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a85      	ldr	r2, [pc, #532]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e02e      	b.n	8003adc <HAL_RCC_OscConfig+0xd8>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x9c>
 8003a86:	4b81      	ldr	r3, [pc, #516]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a80      	ldr	r2, [pc, #512]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b7e      	ldr	r3, [pc, #504]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a7d      	ldr	r2, [pc, #500]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xd8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0xc0>
 8003aaa:	4b78      	ldr	r3, [pc, #480]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a77      	ldr	r2, [pc, #476]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b75      	ldr	r3, [pc, #468]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a74      	ldr	r2, [pc, #464]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xd8>
 8003ac4:	4b71      	ldr	r3, [pc, #452]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a70      	ldr	r2, [pc, #448]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b6e      	ldr	r3, [pc, #440]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a6d      	ldr	r2, [pc, #436]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fb1a 	bl	800111c <HAL_GetTick>
 8003ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fd fb16 	bl	800111c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e3d4      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003afe:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xe8>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fb06 	bl	800111c <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fd fb02 	bl	800111c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e3c0      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b26:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x110>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80ca 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b44:	4b51      	ldr	r3, [pc, #324]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b4e:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <HAL_RCC_OscConfig+0x166>
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	2b18      	cmp	r3, #24
 8003b5e:	d156      	bne.n	8003c0e <HAL_RCC_OscConfig+0x20a>
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d151      	bne.n	8003c0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6a:	4b48      	ldr	r3, [pc, #288]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_RCC_OscConfig+0x17e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e392      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b82:	4b42      	ldr	r3, [pc, #264]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 0219 	bic.w	r2, r3, #25
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	493f      	ldr	r1, [pc, #252]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd fac2 	bl	800111c <HAL_GetTick>
 8003b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b9c:	f7fd fabe 	bl	800111c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e37c      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bae:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bba:	f7fd fabb 	bl	8001134 <HAL_GetREVID>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d817      	bhi.n	8003bf8 <HAL_RCC_OscConfig+0x1f4>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d108      	bne.n	8003be2 <HAL_RCC_OscConfig+0x1de>
 8003bd0:	4b2e      	ldr	r3, [pc, #184]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bd8:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bde:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be0:	e07a      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be2:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	031b      	lsls	r3, r3, #12
 8003bf0:	4926      	ldr	r1, [pc, #152]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf6:	e06f      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf8:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	4921      	ldr	r1, [pc, #132]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c0c:	e064      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d047      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 0219 	bic.w	r2, r3, #25
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	491a      	ldr	r1, [pc, #104]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fd fa78 	bl	800111c <HAL_GetTick>
 8003c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fd fa74 	bl	800111c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e332      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	f7fd fa71 	bl	8001134 <HAL_GetREVID>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d819      	bhi.n	8003c90 <HAL_RCC_OscConfig+0x28c>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d108      	bne.n	8003c76 <HAL_RCC_OscConfig+0x272>
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003c6c:	4a07      	ldr	r2, [pc, #28]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c72:	6053      	str	r3, [r2, #4]
 8003c74:	e030      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2d4>
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	031b      	lsls	r3, r3, #12
 8003c84:	4901      	ldr	r1, [pc, #4]	; (8003c8c <HAL_RCC_OscConfig+0x288>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	604b      	str	r3, [r1, #4]
 8003c8a:	e025      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2d4>
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	4b9a      	ldr	r3, [pc, #616]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	4997      	ldr	r1, [pc, #604]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
 8003ca4:	e018      	b.n	8003cd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	4b95      	ldr	r3, [pc, #596]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a94      	ldr	r2, [pc, #592]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fa33 	bl	800111c <HAL_GetTick>
 8003cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cba:	f7fd fa2f 	bl	800111c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e2ed      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ccc:	4b8b      	ldr	r3, [pc, #556]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a9 	beq.w	8003e38 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ce6:	4b85      	ldr	r3, [pc, #532]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cf0:	4b82      	ldr	r3, [pc, #520]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d007      	beq.n	8003d0c <HAL_RCC_OscConfig+0x308>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b18      	cmp	r3, #24
 8003d00:	d13a      	bne.n	8003d78 <HAL_RCC_OscConfig+0x374>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d135      	bne.n	8003d78 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d0c:	4b7b      	ldr	r3, [pc, #492]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_OscConfig+0x320>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	2b80      	cmp	r3, #128	; 0x80
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e2c1      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d24:	f7fd fa06 	bl	8001134 <HAL_GetREVID>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d817      	bhi.n	8003d62 <HAL_RCC_OscConfig+0x35e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d108      	bne.n	8003d4c <HAL_RCC_OscConfig+0x348>
 8003d3a:	4b70      	ldr	r3, [pc, #448]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d42:	4a6e      	ldr	r2, [pc, #440]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d48:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d4a:	e075      	b.n	8003e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d4c:	4b6b      	ldr	r3, [pc, #428]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	069b      	lsls	r3, r3, #26
 8003d5a:	4968      	ldr	r1, [pc, #416]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d60:	e06a      	b.n	8003e38 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d62:	4b66      	ldr	r3, [pc, #408]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	4962      	ldr	r1, [pc, #392]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d76:	e05f      	b.n	8003e38 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d042      	beq.n	8003e06 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d80:	4b5e      	ldr	r3, [pc, #376]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5d      	ldr	r2, [pc, #372]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd f9c6 	bl	800111c <HAL_GetTick>
 8003d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d94:	f7fd f9c2 	bl	800111c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e280      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003da6:	4b55      	ldr	r3, [pc, #340]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003db2:	f7fd f9bf 	bl	8001134 <HAL_GetREVID>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d817      	bhi.n	8003df0 <HAL_RCC_OscConfig+0x3ec>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d108      	bne.n	8003dda <HAL_RCC_OscConfig+0x3d6>
 8003dc8:	4b4c      	ldr	r3, [pc, #304]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003dd0:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003dd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dd6:	6053      	str	r3, [r2, #4]
 8003dd8:	e02e      	b.n	8003e38 <HAL_RCC_OscConfig+0x434>
 8003dda:	4b48      	ldr	r3, [pc, #288]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	069b      	lsls	r3, r3, #26
 8003de8:	4944      	ldr	r1, [pc, #272]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
 8003dee:	e023      	b.n	8003e38 <HAL_RCC_OscConfig+0x434>
 8003df0:	4b42      	ldr	r3, [pc, #264]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	493f      	ldr	r1, [pc, #252]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60cb      	str	r3, [r1, #12]
 8003e04:	e018      	b.n	8003e38 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e06:	4b3d      	ldr	r3, [pc, #244]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a3c      	ldr	r2, [pc, #240]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd f983 	bl	800111c <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e1a:	f7fd f97f 	bl	800111c <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e23d      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e2c:	4b33      	ldr	r3, [pc, #204]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d036      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d019      	beq.n	8003e80 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e50:	4a2a      	ldr	r2, [pc, #168]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fd f960 	bl	800111c <HAL_GetTick>
 8003e5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e60:	f7fd f95c 	bl	800111c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e21a      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x45c>
 8003e7e:	e018      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e80:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e84:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fd f946 	bl	800111c <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e94:	f7fd f942 	bl	800111c <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e200      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d039      	beq.n	8003f32 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01c      	beq.n	8003f00 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ed0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ed2:	f7fd f923 	bl	800111c <HAL_GetTick>
 8003ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eda:	f7fd f91f 	bl	800111c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e1dd      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x4d6>
 8003ef8:	e01b      	b.n	8003f32 <HAL_RCC_OscConfig+0x52e>
 8003efa:	bf00      	nop
 8003efc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f00:	4b9b      	ldr	r3, [pc, #620]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a9a      	ldr	r2, [pc, #616]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f0c:	f7fd f906 	bl	800111c <HAL_GetTick>
 8003f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f14:	f7fd f902 	bl	800111c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1c0      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f26:	4b92      	ldr	r3, [pc, #584]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 8081 	beq.w	8004042 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f40:	4b8c      	ldr	r3, [pc, #560]	; (8004174 <HAL_RCC_OscConfig+0x770>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a8b      	ldr	r2, [pc, #556]	; (8004174 <HAL_RCC_OscConfig+0x770>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f4c:	f7fd f8e6 	bl	800111c <HAL_GetTick>
 8003f50:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f54:	f7fd f8e2 	bl	800111c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e1a0      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f66:	4b83      	ldr	r3, [pc, #524]	; (8004174 <HAL_RCC_OscConfig+0x770>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x584>
 8003f7a:	4b7d      	ldr	r3, [pc, #500]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a7c      	ldr	r2, [pc, #496]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
 8003f86:	e02d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x5e0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10c      	bne.n	8003faa <HAL_RCC_OscConfig+0x5a6>
 8003f90:	4b77      	ldr	r3, [pc, #476]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a76      	ldr	r2, [pc, #472]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	4b74      	ldr	r3, [pc, #464]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a73      	ldr	r2, [pc, #460]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	e01c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x5e0>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x5c8>
 8003fb2:	4b6f      	ldr	r3, [pc, #444]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a6e      	ldr	r2, [pc, #440]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	4b6c      	ldr	r3, [pc, #432]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	4a6b      	ldr	r2, [pc, #428]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x5e0>
 8003fcc:	4b68      	ldr	r3, [pc, #416]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a67      	ldr	r2, [pc, #412]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	4b65      	ldr	r3, [pc, #404]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	4a64      	ldr	r2, [pc, #400]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8003fde:	f023 0304 	bic.w	r3, r3, #4
 8003fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fd f896 	bl	800111c <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fd f892 	bl	800111c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e14e      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800400a:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ee      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x5f0>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fd f880 	bl	800111c <HAL_GetTick>
 800401c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fd f87c 	bl	800111c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e138      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004036:	4b4e      	ldr	r3, [pc, #312]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ee      	bne.n	8004020 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 812d 	beq.w	80042a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800404c:	4b48      	ldr	r3, [pc, #288]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004054:	2b18      	cmp	r3, #24
 8004056:	f000 80bd 	beq.w	80041d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b02      	cmp	r3, #2
 8004060:	f040 809e 	bne.w	80041a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004064:	4b42      	ldr	r3, [pc, #264]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a41      	ldr	r2, [pc, #260]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 800406a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd f854 	bl	800111c <HAL_GetTick>
 8004074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fd f850 	bl	800111c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e10e      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800408a:	4b39      	ldr	r3, [pc, #228]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004096:	4b36      	ldr	r3, [pc, #216]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800409a:	4b37      	ldr	r3, [pc, #220]	; (8004178 <HAL_RCC_OscConfig+0x774>)
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	430a      	orrs	r2, r1
 80040aa:	4931      	ldr	r1, [pc, #196]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	628b      	str	r3, [r1, #40]	; 0x28
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	3b01      	subs	r3, #1
 80040b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040be:	3b01      	subs	r3, #1
 80040c0:	025b      	lsls	r3, r3, #9
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	3b01      	subs	r3, #1
 80040cc:	041b      	lsls	r3, r3, #16
 80040ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	3b01      	subs	r3, #1
 80040da:	061b      	lsls	r3, r3, #24
 80040dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040e0:	4923      	ldr	r1, [pc, #140]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	4a21      	ldr	r2, [pc, #132]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040f2:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 80040f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f6:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCC_OscConfig+0x778>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040fe:	00d2      	lsls	r2, r2, #3
 8004100:	491b      	ldr	r1, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004102:	4313      	orrs	r3, r2
 8004104:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004106:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	f023 020c 	bic.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	4917      	ldr	r1, [pc, #92]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004118:	4b15      	ldr	r3, [pc, #84]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	f023 0202 	bic.w	r2, r3, #2
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	4912      	ldr	r1, [pc, #72]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4a10      	ldr	r2, [pc, #64]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 800413c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004140:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800414c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	4a07      	ldr	r2, [pc, #28]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <HAL_RCC_OscConfig+0x76c>)
 8004160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fc ffd9 	bl	800111c <HAL_GetTick>
 800416a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800416c:	e011      	b.n	8004192 <HAL_RCC_OscConfig+0x78e>
 800416e:	bf00      	nop
 8004170:	58024400 	.word	0x58024400
 8004174:	58024800 	.word	0x58024800
 8004178:	fffffc0c 	.word	0xfffffc0c
 800417c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7fc ffcc 	bl	800111c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e08a      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004192:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x77c>
 800419e:	e082      	b.n	80042a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a0:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a42      	ldr	r2, [pc, #264]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 80041a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fc ffb6 	bl	800111c <HAL_GetTick>
 80041b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fc ffb2 	bl	800111c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e070      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041c6:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x7b0>
 80041d2:	e068      	b.n	80042a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041d4:	4b36      	ldr	r3, [pc, #216]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d031      	beq.n	800424c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f003 0203 	and.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d12a      	bne.n	800424c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d122      	bne.n	800424c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d11a      	bne.n	800424c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	0a5b      	lsrs	r3, r3, #9
 800421a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004222:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d111      	bne.n	800424c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0c1b      	lsrs	r3, r3, #16
 800422c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d108      	bne.n	800424c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	0e1b      	lsrs	r3, r3, #24
 800423e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e02b      	b.n	80042a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004250:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 8004252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004254:	08db      	lsrs	r3, r3, #3
 8004256:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800425a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	429a      	cmp	r2, r3
 8004264:	d01f      	beq.n	80042a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004266:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	4a11      	ldr	r2, [pc, #68]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004272:	f7fc ff53 	bl	800111c <HAL_GetTick>
 8004276:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004278:	bf00      	nop
 800427a:	f7fc ff4f 	bl	800111c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	4293      	cmp	r3, r2
 8004284:	d0f9      	beq.n	800427a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 8004288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_RCC_OscConfig+0x8b0>)
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004292:	00d2      	lsls	r2, r2, #3
 8004294:	4906      	ldr	r1, [pc, #24]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 8004296:	4313      	orrs	r3, r2
 8004298:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <HAL_RCC_OscConfig+0x8ac>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3730      	adds	r7, #48	; 0x30
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	58024400 	.word	0x58024400
 80042b4:	ffff0007 	.word	0xffff0007

080042b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e19c      	b.n	8004606 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b8a      	ldr	r3, [pc, #552]	; (80044f8 <HAL_RCC_ClockConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d910      	bls.n	80042fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b87      	ldr	r3, [pc, #540]	; (80044f8 <HAL_RCC_ClockConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 020f 	bic.w	r2, r3, #15
 80042e2:	4985      	ldr	r1, [pc, #532]	; (80044f8 <HAL_RCC_ClockConfig+0x240>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b83      	ldr	r3, [pc, #524]	; (80044f8 <HAL_RCC_ClockConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e184      	b.n	8004606 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	4b7b      	ldr	r3, [pc, #492]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004314:	429a      	cmp	r2, r3
 8004316:	d908      	bls.n	800432a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004318:	4b78      	ldr	r3, [pc, #480]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	4975      	ldr	r1, [pc, #468]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 8004326:	4313      	orrs	r3, r2
 8004328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d010      	beq.n	8004358 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004342:	429a      	cmp	r2, r3
 8004344:	d908      	bls.n	8004358 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	496a      	ldr	r1, [pc, #424]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 8004354:	4313      	orrs	r3, r2
 8004356:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	4b64      	ldr	r3, [pc, #400]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004370:	429a      	cmp	r2, r3
 8004372:	d908      	bls.n	8004386 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004374:	4b61      	ldr	r3, [pc, #388]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	495e      	ldr	r1, [pc, #376]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 8004382:	4313      	orrs	r3, r2
 8004384:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d010      	beq.n	80043b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800439e:	429a      	cmp	r2, r3
 80043a0:	d908      	bls.n	80043b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043a2:	4b56      	ldr	r3, [pc, #344]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4953      	ldr	r1, [pc, #332]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d010      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	4b4d      	ldr	r3, [pc, #308]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d908      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d0:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f023 020f 	bic.w	r2, r3, #15
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4947      	ldr	r1, [pc, #284]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d055      	beq.n	800449a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043ee:	4b43      	ldr	r3, [pc, #268]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4940      	ldr	r1, [pc, #256]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d107      	bne.n	8004418 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004408:	4b3c      	ldr	r3, [pc, #240]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d121      	bne.n	8004458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0f6      	b.n	8004606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d107      	bne.n	8004430 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004420:	4b36      	ldr	r3, [pc, #216]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d115      	bne.n	8004458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0ea      	b.n	8004606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d107      	bne.n	8004448 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004438:	4b30      	ldr	r3, [pc, #192]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0de      	b.n	8004606 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004448:	4b2c      	ldr	r3, [pc, #176]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0d6      	b.n	8004606 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f023 0207 	bic.w	r2, r3, #7
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4925      	ldr	r1, [pc, #148]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 8004466:	4313      	orrs	r3, r2
 8004468:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446a:	f7fc fe57 	bl	800111c <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004470:	e00a      	b.n	8004488 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004472:	f7fc fe53 	bl	800111c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0be      	b.n	8004606 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004488:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	429a      	cmp	r2, r3
 8004498:	d1eb      	bne.n	8004472 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d010      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	4b14      	ldr	r3, [pc, #80]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d208      	bcs.n	80044c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b6:	4b11      	ldr	r3, [pc, #68]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	490e      	ldr	r1, [pc, #56]	; (80044fc <HAL_RCC_ClockConfig+0x244>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_ClockConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d214      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_RCC_ClockConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 020f 	bic.w	r2, r3, #15
 80044de:	4906      	ldr	r1, [pc, #24]	; (80044f8 <HAL_RCC_ClockConfig+0x240>)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <HAL_RCC_ClockConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e086      	b.n	8004606 <HAL_RCC_ClockConfig+0x34e>
 80044f8:	52002000 	.word	0x52002000
 80044fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d010      	beq.n	800452e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004518:	429a      	cmp	r2, r3
 800451a:	d208      	bcs.n	800452e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800451c:	4b3c      	ldr	r3, [pc, #240]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	4939      	ldr	r1, [pc, #228]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 800452a:	4313      	orrs	r3, r2
 800452c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d010      	beq.n	800455c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	4b34      	ldr	r3, [pc, #208]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004546:	429a      	cmp	r2, r3
 8004548:	d208      	bcs.n	800455c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800454a:	4b31      	ldr	r3, [pc, #196]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	492e      	ldr	r1, [pc, #184]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 8004558:	4313      	orrs	r3, r2
 800455a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	4b28      	ldr	r3, [pc, #160]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004574:	429a      	cmp	r2, r3
 8004576:	d208      	bcs.n	800458a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	4922      	ldr	r1, [pc, #136]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 8004586:	4313      	orrs	r3, r2
 8004588:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d010      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d208      	bcs.n	80045b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	4917      	ldr	r1, [pc, #92]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045b8:	f000 f834 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b14      	ldr	r3, [pc, #80]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	4912      	ldr	r1, [pc, #72]	; (8004614 <HAL_RCC_ClockConfig+0x35c>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	fa22 f303 	lsr.w	r3, r2, r3
 80045d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <HAL_RCC_ClockConfig+0x358>)
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <HAL_RCC_ClockConfig+0x35c>)
 80045e0:	5cd3      	ldrb	r3, [r2, r3]
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ec:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <HAL_RCC_ClockConfig+0x360>)
 80045ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045f0:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_RCC_ClockConfig+0x364>)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80045f6:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x368>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fc fd44 	bl	8001088 <HAL_InitTick>
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004604:	7bfb      	ldrb	r3, [r7, #15]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	58024400 	.word	0x58024400
 8004614:	0800d06c 	.word	0x0800d06c
 8004618:	24000004 	.word	0x24000004
 800461c:	24000000 	.word	0x24000000
 8004620:	24000008 	.word	0x24000008

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800462a:	4bb3      	ldr	r3, [pc, #716]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004632:	2b18      	cmp	r3, #24
 8004634:	f200 8155 	bhi.w	80048e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004638:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <HAL_RCC_GetSysClockFreq+0x1c>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	080046a5 	.word	0x080046a5
 8004644:	080048e3 	.word	0x080048e3
 8004648:	080048e3 	.word	0x080048e3
 800464c:	080048e3 	.word	0x080048e3
 8004650:	080048e3 	.word	0x080048e3
 8004654:	080048e3 	.word	0x080048e3
 8004658:	080048e3 	.word	0x080048e3
 800465c:	080048e3 	.word	0x080048e3
 8004660:	080046cb 	.word	0x080046cb
 8004664:	080048e3 	.word	0x080048e3
 8004668:	080048e3 	.word	0x080048e3
 800466c:	080048e3 	.word	0x080048e3
 8004670:	080048e3 	.word	0x080048e3
 8004674:	080048e3 	.word	0x080048e3
 8004678:	080048e3 	.word	0x080048e3
 800467c:	080048e3 	.word	0x080048e3
 8004680:	080046d1 	.word	0x080046d1
 8004684:	080048e3 	.word	0x080048e3
 8004688:	080048e3 	.word	0x080048e3
 800468c:	080048e3 	.word	0x080048e3
 8004690:	080048e3 	.word	0x080048e3
 8004694:	080048e3 	.word	0x080048e3
 8004698:	080048e3 	.word	0x080048e3
 800469c:	080048e3 	.word	0x080048e3
 80046a0:	080046d7 	.word	0x080046d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046a4:	4b94      	ldr	r3, [pc, #592]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046b0:	4b91      	ldr	r3, [pc, #580]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	08db      	lsrs	r3, r3, #3
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	4a90      	ldr	r2, [pc, #576]	; (80048fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
 80046c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80046c2:	e111      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046c4:	4b8d      	ldr	r3, [pc, #564]	; (80048fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046c6:	61bb      	str	r3, [r7, #24]
      break;
 80046c8:	e10e      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80046ca:	4b8d      	ldr	r3, [pc, #564]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046cc:	61bb      	str	r3, [r7, #24]
      break;
 80046ce:	e10b      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80046d0:	4b8c      	ldr	r3, [pc, #560]	; (8004904 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046d2:	61bb      	str	r3, [r7, #24]
      break;
 80046d4:	e108      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046d6:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80046e0:	4b85      	ldr	r3, [pc, #532]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046ec:	4b82      	ldr	r3, [pc, #520]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80046f6:	4b80      	ldr	r3, [pc, #512]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fa:	08db      	lsrs	r3, r3, #3
 80046fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80e1 	beq.w	80048dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b02      	cmp	r3, #2
 800471e:	f000 8083 	beq.w	8004828 <HAL_RCC_GetSysClockFreq+0x204>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b02      	cmp	r3, #2
 8004726:	f200 80a1 	bhi.w	800486c <HAL_RCC_GetSysClockFreq+0x248>
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x114>
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d056      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004736:	e099      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004738:	4b6f      	ldr	r3, [pc, #444]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d02d      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004744:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	08db      	lsrs	r3, r3, #3
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	4a6b      	ldr	r2, [pc, #428]	; (80048fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
 8004754:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476e:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004782:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800479e:	e087      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800490c <HAL_RCC_GetSysClockFreq+0x2e8>
 80047ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b2:	4b51      	ldr	r3, [pc, #324]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80047c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004908 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047e2:	e065      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004910 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f6:	4b40      	ldr	r3, [pc, #256]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004806:	ed97 6a02 	vldr	s12, [r7, #8]
 800480a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004908 <HAL_RCC_GetSysClockFreq+0x2e4>
 800480e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800481a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004826:	e043      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004832:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004914 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483a:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484a:	ed97 6a02 	vldr	s12, [r7, #8]
 800484e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800485e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800486a:	e021      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004910 <HAL_RCC_GetSysClockFreq+0x2ec>
 800487a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004892:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004908 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80048b0:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	0a5b      	lsrs	r3, r3, #9
 80048b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ba:	3301      	adds	r3, #1
 80048bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d4:	ee17 3a90 	vmov	r3, s15
 80048d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80048da:	e005      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
      break;
 80048e0:	e002      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048e4:	61bb      	str	r3, [r7, #24]
      break;
 80048e6:	bf00      	nop
  }

  return sysclockfreq;
 80048e8:	69bb      	ldr	r3, [r7, #24]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3724      	adds	r7, #36	; 0x24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	58024400 	.word	0x58024400
 80048fc:	03d09000 	.word	0x03d09000
 8004900:	003d0900 	.word	0x003d0900
 8004904:	017d7840 	.word	0x017d7840
 8004908:	46000000 	.word	0x46000000
 800490c:	4c742400 	.word	0x4c742400
 8004910:	4a742400 	.word	0x4a742400
 8004914:	4bbebc20 	.word	0x4bbebc20

08004918 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800491c:	b0ca      	sub	sp, #296	; 0x128
 800491e:	af00      	add	r7, sp, #0
 8004920:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004924:	2300      	movs	r3, #0
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800492a:	2300      	movs	r3, #0
 800492c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800493c:	2500      	movs	r5, #0
 800493e:	ea54 0305 	orrs.w	r3, r4, r5
 8004942:	d049      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800494a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800494e:	d02f      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004950:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004954:	d828      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800495a:	d01a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800495c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004960:	d822      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496a:	d007      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800496c:	e01c      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800496e:	4bb8      	ldr	r3, [pc, #736]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	4ab7      	ldr	r2, [pc, #732]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004978:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800497a:	e01a      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004980:	3308      	adds	r3, #8
 8004982:	2102      	movs	r1, #2
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f9d1 	bl	8005d2c <RCCEx_PLL2_Config>
 800498a:	4603      	mov	r3, r0
 800498c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004990:	e00f      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004996:	3328      	adds	r3, #40	; 0x28
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f001 fa78 	bl	8005e90 <RCCEx_PLL3_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049a6:	e004      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80049ae:	e000      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80049b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049ba:	4ba5      	ldr	r3, [pc, #660]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c8:	4aa1      	ldr	r2, [pc, #644]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049ca:	430b      	orrs	r3, r1
 80049cc:	6513      	str	r3, [r2, #80]	; 0x50
 80049ce:	e003      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80049e4:	f04f 0900 	mov.w	r9, #0
 80049e8:	ea58 0309 	orrs.w	r3, r8, r9
 80049ec:	d047      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d82a      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a15 	.word	0x08004a15
 8004a04:	08004a23 	.word	0x08004a23
 8004a08:	08004a39 	.word	0x08004a39
 8004a0c:	08004a57 	.word	0x08004a57
 8004a10:	08004a57 	.word	0x08004a57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a14:	4b8e      	ldr	r3, [pc, #568]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a8d      	ldr	r2, [pc, #564]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a20:	e01a      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a26:	3308      	adds	r3, #8
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 f97e 	bl	8005d2c <RCCEx_PLL2_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a36:	e00f      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3c:	3328      	adds	r3, #40	; 0x28
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 fa25 	bl	8005e90 <RCCEx_PLL3_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a4c:	e004      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a60:	4b7b      	ldr	r3, [pc, #492]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a64:	f023 0107 	bic.w	r1, r3, #7
 8004a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	4a78      	ldr	r2, [pc, #480]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6513      	str	r3, [r2, #80]	; 0x50
 8004a74:	e003      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004a8a:	f04f 0b00 	mov.w	fp, #0
 8004a8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a92:	d04c      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9e:	d030      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa4:	d829      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004aa6:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa8:	d02d      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8004aac:	d825      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d018      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ab2:	2b80      	cmp	r3, #128	; 0x80
 8004ab4:	d821      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d007      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004abe:	e01c      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac0:	4b63      	ldr	r3, [pc, #396]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	4a62      	ldr	r2, [pc, #392]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004acc:	e01c      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 f928 	bl	8005d2c <RCCEx_PLL2_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ae2:	e011      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ae8:	3328      	adds	r3, #40	; 0x28
 8004aea:	2100      	movs	r1, #0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 f9cf 	bl	8005e90 <RCCEx_PLL3_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004af8:	e006      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b00:	e002      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b02:	bf00      	nop
 8004b04:	e000      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b10:	4b4f      	ldr	r3, [pc, #316]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b14:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	4a4c      	ldr	r2, [pc, #304]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6513      	str	r3, [r2, #80]	; 0x50
 8004b24:	e003      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004b3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	d053      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b5a:	d035      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004b5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b60:	d82e      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b66:	d031      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004b68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b6c:	d828      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b72:	d01a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b78:	d822      	bhi.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004b7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b82:	d007      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004b84:	e01c      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b86:	4b32      	ldr	r3, [pc, #200]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	4a31      	ldr	r2, [pc, #196]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b92:	e01c      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b98:	3308      	adds	r3, #8
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 f8c5 	bl	8005d2c <RCCEx_PLL2_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ba8:	e011      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bae:	3328      	adds	r3, #40	; 0x28
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 f96c 	bl	8005e90 <RCCEx_PLL3_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bbe:	e006      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004bc6:	e002      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004be6:	4a1a      	ldr	r2, [pc, #104]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6593      	str	r3, [r2, #88]	; 0x58
 8004bec:	e003      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004c02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c06:	2300      	movs	r3, #0
 8004c08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004c10:	460b      	mov	r3, r1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	d056      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004c1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c22:	d038      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c28:	d831      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c2e:	d034      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004c30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c34:	d82b      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c3a:	d01d      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c40:	d825      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d006      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004c46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004c4c:	e01f      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c54:	4ba2      	ldr	r3, [pc, #648]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	4aa1      	ldr	r2, [pc, #644]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c60:	e01c      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c66:	3308      	adds	r3, #8
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 f85e 	bl	8005d2c <RCCEx_PLL2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c76:	e011      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c7c:	3328      	adds	r3, #40	; 0x28
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 f905 	bl	8005e90 <RCCEx_PLL3_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c8c:	e006      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ca4:	4b8e      	ldr	r3, [pc, #568]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cb4:	4a8a      	ldr	r2, [pc, #552]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8004cba:	e003      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004cc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	d03a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	2b30      	cmp	r3, #48	; 0x30
 8004cec:	d01f      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004cee:	2b30      	cmp	r3, #48	; 0x30
 8004cf0:	d819      	bhi.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d00c      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d815      	bhi.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d019      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d111      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d02:	4b77      	ldr	r3, [pc, #476]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	4a76      	ldr	r2, [pc, #472]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d0e:	e011      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d14:	3308      	adds	r3, #8
 8004d16:	2102      	movs	r1, #2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 f807 	bl	8005d2c <RCCEx_PLL2_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d24:	e006      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d2c:	e002      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d3c:	4b68      	ldr	r3, [pc, #416]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	4a65      	ldr	r2, [pc, #404]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d50:	e003      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004d66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d051      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d84:	d035      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d8a:	d82e      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d90:	d031      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d96:	d828      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d9c:	d01a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da2:	d822      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dac:	d007      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004dae:	e01c      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b4b      	ldr	r3, [pc, #300]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a4a      	ldr	r2, [pc, #296]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e01c      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 ffb0 	bl	8005d2c <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dd2:	e011      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd8:	3328      	adds	r3, #40	; 0x28
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 f857 	bl	8005e90 <RCCEx_PLL3_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004de8:	e006      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004df0:	e002      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e00:	4b37      	ldr	r3, [pc, #220]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0e:	4a34      	ldr	r2, [pc, #208]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6513      	str	r3, [r2, #80]	; 0x50
 8004e14:	e003      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004e34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d056      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e48:	d033      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004e4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e4e:	d82c      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e54:	d02f      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e5a:	d826      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e60:	d02b      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004e62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e66:	d820      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e6c:	d012      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e72:	d81a      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d022      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7c:	d115      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e82:	3308      	adds	r3, #8
 8004e84:	2101      	movs	r1, #1
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 ff50 	bl	8005d2c <RCCEx_PLL2_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e92:	e015      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e98:	3328      	adds	r3, #40	; 0x28
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fff7 	bl	8005e90 <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004eb0:	e006      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e004      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10d      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ecc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed6:	4a02      	ldr	r2, [pc, #8]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6513      	str	r3, [r2, #80]	; 0x50
 8004edc:	e006      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ede:	bf00      	nop
 8004ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ee8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	d055      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f18:	d033      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f1e:	d82c      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f24:	d02f      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2a:	d826      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f30:	d02b      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f36:	d820      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f3c:	d012      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f42:	d81a      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d022      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f4c:	d115      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f52:	3308      	adds	r3, #8
 8004f54:	2101      	movs	r1, #1
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fee8 	bl	8005d2c <RCCEx_PLL2_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f62:	e015      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f68:	3328      	adds	r3, #40	; 0x28
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 ff8f 	bl	8005e90 <RCCEx_PLL3_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f78:	e00a      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004f80:	e006      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f82:	bf00      	nop
 8004f84:	e004      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f86:	bf00      	nop
 8004f88:	e002      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f8a:	bf00      	nop
 8004f8c:	e000      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10b      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f98:	4ba3      	ldr	r3, [pc, #652]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fa8:	4a9f      	ldr	r2, [pc, #636]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004faa:	430b      	orrs	r3, r1
 8004fac:	6593      	str	r3, [r2, #88]	; 0x58
 8004fae:	e003      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	d037      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe2:	d00e      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fe8:	d816      	bhi.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ff2:	d111      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff4:	4b8c      	ldr	r3, [pc, #560]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	4a8b      	ldr	r2, [pc, #556]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005000:	e00f      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005006:	3308      	adds	r3, #8
 8005008:	2101      	movs	r1, #1
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fe8e 	bl	8005d2c <RCCEx_PLL2_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005016:	e004      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800501e:	e000      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800502a:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800502c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	4a7b      	ldr	r2, [pc, #492]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800503a:	430b      	orrs	r3, r1
 800503c:	6513      	str	r3, [r2, #80]	; 0x50
 800503e:	e003      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800505e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005062:	460b      	mov	r3, r1
 8005064:	4313      	orrs	r3, r2
 8005066:	d039      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800506c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506e:	2b03      	cmp	r3, #3
 8005070:	d81c      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	080050b5 	.word	0x080050b5
 800507c:	08005089 	.word	0x08005089
 8005080:	08005097 	.word	0x08005097
 8005084:	080050b5 	.word	0x080050b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005088:	4b67      	ldr	r3, [pc, #412]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4a66      	ldr	r2, [pc, #408]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800508e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005094:	e00f      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509a:	3308      	adds	r3, #8
 800509c:	2102      	movs	r1, #2
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fe44 	bl	8005d2c <RCCEx_PLL2_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80050b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050be:	4b5a      	ldr	r3, [pc, #360]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c2:	f023 0103 	bic.w	r1, r3, #3
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050cc:	4a56      	ldr	r2, [pc, #344]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ce:	430b      	orrs	r3, r1
 80050d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80050e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ec:	2300      	movs	r3, #0
 80050ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f000 809f 	beq.w	800523c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050fe:	4b4b      	ldr	r3, [pc, #300]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a4a      	ldr	r2, [pc, #296]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005108:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800510a:	f7fc f807 	bl	800111c <HAL_GetTick>
 800510e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005112:	e00b      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005114:	f7fc f802 	bl	800111c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b64      	cmp	r3, #100	; 0x64
 8005122:	d903      	bls.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800512a:	e005      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800512c:	4b3f      	ldr	r3, [pc, #252]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ed      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800513c:	2b00      	cmp	r3, #0
 800513e:	d179      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005140:	4b39      	ldr	r3, [pc, #228]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005148:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800514c:	4053      	eors	r3, r2
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	2b00      	cmp	r3, #0
 8005154:	d015      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005156:	4b34      	ldr	r3, [pc, #208]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005162:	4b31      	ldr	r3, [pc, #196]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	4a30      	ldr	r2, [pc, #192]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800516e:	4b2e      	ldr	r3, [pc, #184]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	4a2d      	ldr	r2, [pc, #180]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005178:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800517a:	4a2b      	ldr	r2, [pc, #172]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800517c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005180:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800518a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800518e:	d118      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fb ffc4 	bl	800111c <HAL_GetTick>
 8005194:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005198:	e00d      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7fb ffbf 	bl	800111c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051a4:	1ad2      	subs	r2, r2, r3
 80051a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d903      	bls.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80051b4:	e005      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051b6:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0eb      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80051c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d129      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051da:	d10e      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80051dc:	4b12      	ldr	r3, [pc, #72]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80051e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051ec:	091a      	lsrs	r2, r3, #4
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	4a0d      	ldr	r2, [pc, #52]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6113      	str	r3, [r2, #16]
 80051f8:	e005      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005200:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005204:	6113      	str	r3, [r2, #16]
 8005206:	4b08      	ldr	r3, [pc, #32]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005208:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005216:	4a04      	ldr	r2, [pc, #16]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005218:	430b      	orrs	r3, r1
 800521a:	6713      	str	r3, [r2, #112]	; 0x70
 800521c:	e00e      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800521e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005226:	e009      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005228:	58024400 	.word	0x58024400
 800522c:	58024800 	.word	0x58024800
 8005230:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f002 0301 	and.w	r3, r2, #1
 8005248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800524c:	2300      	movs	r3, #0
 800524e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005252:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	f000 8089 	beq.w	8005370 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005264:	2b28      	cmp	r3, #40	; 0x28
 8005266:	d86b      	bhi.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	08005349 	.word	0x08005349
 8005274:	08005341 	.word	0x08005341
 8005278:	08005341 	.word	0x08005341
 800527c:	08005341 	.word	0x08005341
 8005280:	08005341 	.word	0x08005341
 8005284:	08005341 	.word	0x08005341
 8005288:	08005341 	.word	0x08005341
 800528c:	08005341 	.word	0x08005341
 8005290:	08005315 	.word	0x08005315
 8005294:	08005341 	.word	0x08005341
 8005298:	08005341 	.word	0x08005341
 800529c:	08005341 	.word	0x08005341
 80052a0:	08005341 	.word	0x08005341
 80052a4:	08005341 	.word	0x08005341
 80052a8:	08005341 	.word	0x08005341
 80052ac:	08005341 	.word	0x08005341
 80052b0:	0800532b 	.word	0x0800532b
 80052b4:	08005341 	.word	0x08005341
 80052b8:	08005341 	.word	0x08005341
 80052bc:	08005341 	.word	0x08005341
 80052c0:	08005341 	.word	0x08005341
 80052c4:	08005341 	.word	0x08005341
 80052c8:	08005341 	.word	0x08005341
 80052cc:	08005341 	.word	0x08005341
 80052d0:	08005349 	.word	0x08005349
 80052d4:	08005341 	.word	0x08005341
 80052d8:	08005341 	.word	0x08005341
 80052dc:	08005341 	.word	0x08005341
 80052e0:	08005341 	.word	0x08005341
 80052e4:	08005341 	.word	0x08005341
 80052e8:	08005341 	.word	0x08005341
 80052ec:	08005341 	.word	0x08005341
 80052f0:	08005349 	.word	0x08005349
 80052f4:	08005341 	.word	0x08005341
 80052f8:	08005341 	.word	0x08005341
 80052fc:	08005341 	.word	0x08005341
 8005300:	08005341 	.word	0x08005341
 8005304:	08005341 	.word	0x08005341
 8005308:	08005341 	.word	0x08005341
 800530c:	08005341 	.word	0x08005341
 8005310:	08005349 	.word	0x08005349
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005318:	3308      	adds	r3, #8
 800531a:	2101      	movs	r1, #1
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fd05 	bl	8005d2c <RCCEx_PLL2_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005328:	e00f      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532e:	3328      	adds	r3, #40	; 0x28
 8005330:	2101      	movs	r1, #1
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fdac 	bl	8005e90 <RCCEx_PLL3_Config>
 8005338:	4603      	mov	r3, r0
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800533e:	e004      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005346:	e000      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005352:	4bbf      	ldr	r3, [pc, #764]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005360:	4abb      	ldr	r2, [pc, #748]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005362:	430b      	orrs	r3, r1
 8005364:	6553      	str	r3, [r2, #84]	; 0x54
 8005366:	e003      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800536c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f002 0302 	and.w	r3, r2, #2
 800537c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005380:	2300      	movs	r3, #0
 8005382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005386:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800538a:	460b      	mov	r3, r1
 800538c:	4313      	orrs	r3, r2
 800538e:	d041      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005396:	2b05      	cmp	r3, #5
 8005398:	d824      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053ed 	.word	0x080053ed
 80053a4:	080053b9 	.word	0x080053b9
 80053a8:	080053cf 	.word	0x080053cf
 80053ac:	080053ed 	.word	0x080053ed
 80053b0:	080053ed 	.word	0x080053ed
 80053b4:	080053ed 	.word	0x080053ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053bc:	3308      	adds	r3, #8
 80053be:	2101      	movs	r1, #1
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fcb3 	bl	8005d2c <RCCEx_PLL2_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053cc:	e00f      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d2:	3328      	adds	r3, #40	; 0x28
 80053d4:	2101      	movs	r1, #1
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fd5a 	bl	8005e90 <RCCEx_PLL3_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053e2:	e004      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053ea:	e000      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80053ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80053f6:	4b96      	ldr	r3, [pc, #600]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	f023 0107 	bic.w	r1, r3, #7
 80053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005404:	4a92      	ldr	r2, [pc, #584]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005406:	430b      	orrs	r3, r1
 8005408:	6553      	str	r3, [r2, #84]	; 0x54
 800540a:	e003      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	f002 0304 	and.w	r3, r2, #4
 8005420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005424:	2300      	movs	r3, #0
 8005426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800542a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800542e:	460b      	mov	r3, r1
 8005430:	4313      	orrs	r3, r2
 8005432:	d044      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800543c:	2b05      	cmp	r3, #5
 800543e:	d825      	bhi.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	08005495 	.word	0x08005495
 800544c:	08005461 	.word	0x08005461
 8005450:	08005477 	.word	0x08005477
 8005454:	08005495 	.word	0x08005495
 8005458:	08005495 	.word	0x08005495
 800545c:	08005495 	.word	0x08005495
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005464:	3308      	adds	r3, #8
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fc5f 	bl	8005d2c <RCCEx_PLL2_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005474:	e00f      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	3328      	adds	r3, #40	; 0x28
 800547c:	2101      	movs	r1, #1
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fd06 	bl	8005e90 <RCCEx_PLL3_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800548a:	e004      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800549e:	4b6c      	ldr	r3, [pc, #432]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	f023 0107 	bic.w	r1, r3, #7
 80054a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ae:	4a68      	ldr	r2, [pc, #416]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6593      	str	r3, [r2, #88]	; 0x58
 80054b4:	e003      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f002 0320 	and.w	r3, r2, #32
 80054ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054d8:	460b      	mov	r3, r1
 80054da:	4313      	orrs	r3, r2
 80054dc:	d055      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054ea:	d033      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80054ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054f0:	d82c      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f6:	d02f      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d826      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005502:	d02b      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005504:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005508:	d820      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800550a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800550e:	d012      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005514:	d81a      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d022      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800551a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800551e:	d115      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005524:	3308      	adds	r3, #8
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fbff 	bl	8005d2c <RCCEx_PLL2_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005534:	e015      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553a:	3328      	adds	r3, #40	; 0x28
 800553c:	2102      	movs	r1, #2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fca6 	bl	8005e90 <RCCEx_PLL3_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800554a:	e00a      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005552:	e006      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005554:	bf00      	nop
 8005556:	e004      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005558:	bf00      	nop
 800555a:	e002      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800555c:	bf00      	nop
 800555e:	e000      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800556a:	4b39      	ldr	r3, [pc, #228]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	4a35      	ldr	r2, [pc, #212]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800557c:	430b      	orrs	r3, r1
 800557e:	6553      	str	r3, [r2, #84]	; 0x54
 8005580:	e003      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800558a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800559a:	2300      	movs	r3, #0
 800559c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80055a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4313      	orrs	r3, r2
 80055a8:	d058      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055b6:	d033      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80055b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055bc:	d82c      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c2:	d02f      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80055c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c8:	d826      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ce:	d02b      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80055d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055d4:	d820      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055da:	d012      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80055dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e0:	d81a      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d022      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80055e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ea:	d115      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f0:	3308      	adds	r3, #8
 80055f2:	2100      	movs	r1, #0
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fb99 	bl	8005d2c <RCCEx_PLL2_Config>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005600:	e015      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005606:	3328      	adds	r3, #40	; 0x28
 8005608:	2102      	movs	r1, #2
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fc40 	bl	8005e90 <RCCEx_PLL3_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005616:	e00a      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800561e:	e006      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005620:	bf00      	nop
 8005622:	e004      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005624:	bf00      	nop
 8005626:	e002      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005628:	bf00      	nop
 800562a:	e000      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10e      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005636:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005646:	4a02      	ldr	r2, [pc, #8]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005648:	430b      	orrs	r3, r1
 800564a:	6593      	str	r3, [r2, #88]	; 0x58
 800564c:	e006      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800564e:	bf00      	nop
 8005650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005658:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800566c:	2300      	movs	r3, #0
 800566e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005672:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005676:	460b      	mov	r3, r1
 8005678:	4313      	orrs	r3, r2
 800567a:	d055      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005684:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005688:	d033      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800568a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800568e:	d82c      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005694:	d02f      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569a:	d826      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800569c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056a0:	d02b      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80056a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056a6:	d820      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ac:	d012      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80056ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b2:	d81a      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d022      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80056b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056bc:	d115      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c2:	3308      	adds	r3, #8
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fb30 	bl	8005d2c <RCCEx_PLL2_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056d2:	e015      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d8:	3328      	adds	r3, #40	; 0x28
 80056da:	2102      	movs	r1, #2
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fbd7 	bl	8005e90 <RCCEx_PLL3_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056e8:	e00a      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056f0:	e006      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056f2:	bf00      	nop
 80056f4:	e004      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056f6:	bf00      	nop
 80056f8:	e002      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005708:	4ba1      	ldr	r3, [pc, #644]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800570a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005714:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005718:	4a9d      	ldr	r2, [pc, #628]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800571a:	430b      	orrs	r3, r1
 800571c:	6593      	str	r3, [r2, #88]	; 0x58
 800571e:	e003      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f002 0308 	and.w	r3, r2, #8
 8005734:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800573e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005742:	460b      	mov	r3, r1
 8005744:	4313      	orrs	r3, r2
 8005746:	d01e      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800574c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005754:	d10c      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575a:	3328      	adds	r3, #40	; 0x28
 800575c:	2102      	movs	r1, #2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fb96 	bl	8005e90 <RCCEx_PLL3_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005770:	4b87      	ldr	r3, [pc, #540]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005774:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800577c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005780:	4a83      	ldr	r2, [pc, #524]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005782:	430b      	orrs	r3, r1
 8005784:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f002 0310 	and.w	r3, r2, #16
 8005792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005796:	2300      	movs	r3, #0
 8005798:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800579c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80057a0:	460b      	mov	r3, r1
 80057a2:	4313      	orrs	r3, r2
 80057a4:	d01e      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b2:	d10c      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b8:	3328      	adds	r3, #40	; 0x28
 80057ba:	2102      	movs	r1, #2
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fb67 	bl	8005e90 <RCCEx_PLL3_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057ce:	4b70      	ldr	r3, [pc, #448]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057de:	4a6c      	ldr	r2, [pc, #432]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80057f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057f4:	2300      	movs	r3, #0
 80057f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80057fe:	460b      	mov	r3, r1
 8005800:	4313      	orrs	r3, r2
 8005802:	d03e      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800580c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005810:	d022      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005816:	d81b      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d00b      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005822:	e015      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005828:	3308      	adds	r3, #8
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fa7d 	bl	8005d2c <RCCEx_PLL2_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005838:	e00f      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583e:	3328      	adds	r3, #40	; 0x28
 8005840:	2102      	movs	r1, #2
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fb24 	bl	8005e90 <RCCEx_PLL3_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800584e:	e004      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005856:	e000      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800585a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005862:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005866:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005872:	4a47      	ldr	r2, [pc, #284]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005874:	430b      	orrs	r3, r1
 8005876:	6593      	str	r3, [r2, #88]	; 0x58
 8005878:	e003      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800587a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800587e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800588e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005890:	2300      	movs	r3, #0
 8005892:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005894:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005898:	460b      	mov	r3, r1
 800589a:	4313      	orrs	r3, r2
 800589c:	d03b      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800589e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058aa:	d01f      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80058ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058b0:	d818      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80058b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058b6:	d003      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80058b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058bc:	d007      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80058be:	e011      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c0:	4b33      	ldr	r3, [pc, #204]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	4a32      	ldr	r2, [pc, #200]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80058cc:	e00f      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d2:	3328      	adds	r3, #40	; 0x28
 80058d4:	2101      	movs	r1, #1
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fada 	bl	8005e90 <RCCEx_PLL3_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80058e2:	e004      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058ea:	e000      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80058ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10b      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005906:	4a22      	ldr	r2, [pc, #136]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005908:	430b      	orrs	r3, r1
 800590a:	6553      	str	r3, [r2, #84]	; 0x54
 800590c:	e003      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005922:	673b      	str	r3, [r7, #112]	; 0x70
 8005924:	2300      	movs	r3, #0
 8005926:	677b      	str	r3, [r7, #116]	; 0x74
 8005928:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800592c:	460b      	mov	r3, r1
 800592e:	4313      	orrs	r3, r2
 8005930:	d034      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800593c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005940:	d007      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005942:	e011      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005944:	4b12      	ldr	r3, [pc, #72]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	4a11      	ldr	r2, [pc, #68]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005950:	e00e      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005956:	3308      	adds	r3, #8
 8005958:	2102      	movs	r1, #2
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f9e6 	bl	8005d2c <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005966:	e003      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800596e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10d      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005978:	4b05      	ldr	r3, [pc, #20]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800597a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005986:	4a02      	ldr	r2, [pc, #8]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005988:	430b      	orrs	r3, r1
 800598a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800598c:	e006      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800598e:	bf00      	nop
 8005990:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80059a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80059aa:	2300      	movs	r3, #0
 80059ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80059b2:	460b      	mov	r3, r1
 80059b4:	4313      	orrs	r3, r2
 80059b6:	d00c      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059bc:	3328      	adds	r3, #40	; 0x28
 80059be:	2102      	movs	r1, #2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fa65 	bl	8005e90 <RCCEx_PLL3_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80059de:	663b      	str	r3, [r7, #96]	; 0x60
 80059e0:	2300      	movs	r3, #0
 80059e2:	667b      	str	r3, [r7, #100]	; 0x64
 80059e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80059e8:	460b      	mov	r3, r1
 80059ea:	4313      	orrs	r3, r2
 80059ec:	d038      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059fa:	d018      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80059fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a00:	d811      	bhi.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a06:	d014      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0c:	d80b      	bhi.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d011      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a16:	d106      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a18:	4bc3      	ldr	r3, [pc, #780]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	4ac2      	ldr	r2, [pc, #776]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a24:	e008      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10b      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a40:	4bb9      	ldr	r3, [pc, #740]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a50:	4ab5      	ldr	r2, [pc, #724]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a52:	430b      	orrs	r3, r1
 8005a54:	6553      	str	r3, [r2, #84]	; 0x54
 8005a56:	e003      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005a6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a6e:	2300      	movs	r3, #0
 8005a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005a76:	460b      	mov	r3, r1
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a7c:	4baa      	ldr	r3, [pc, #680]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8a:	4aa7      	ldr	r2, [pc, #668]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005a9c:	653b      	str	r3, [r7, #80]	; 0x50
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	657b      	str	r3, [r7, #84]	; 0x54
 8005aa2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005aac:	4b9e      	ldr	r3, [pc, #632]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005abc:	4a9a      	ldr	r2, [pc, #616]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4313      	orrs	r3, r2
 8005adc:	d009      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ade:	4b92      	ldr	r3, [pc, #584]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aec:	4a8e      	ldr	r2, [pc, #568]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aee:	430b      	orrs	r3, r1
 8005af0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005afe:	643b      	str	r3, [r7, #64]	; 0x40
 8005b00:	2300      	movs	r3, #0
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
 8005b04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b0e:	4b86      	ldr	r3, [pc, #536]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	4a85      	ldr	r2, [pc, #532]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b18:	6113      	str	r3, [r2, #16]
 8005b1a:	4b83      	ldr	r3, [pc, #524]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b1c:	6919      	ldr	r1, [r3, #16]
 8005b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005b26:	4a80      	ldr	r2, [pc, #512]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005b42:	460b      	mov	r3, r1
 8005b44:	4313      	orrs	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b48:	4b77      	ldr	r3, [pc, #476]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	4a74      	ldr	r2, [pc, #464]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005b68:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005b72:	460b      	mov	r3, r1
 8005b74:	4313      	orrs	r3, r2
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b78:	4b6b      	ldr	r3, [pc, #428]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b88:	4a67      	ldr	r2, [pc, #412]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	2100      	movs	r1, #0
 8005b98:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	d011      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bae:	3308      	adds	r3, #8
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f8ba 	bl	8005d2c <RCCEx_PLL2_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6239      	str	r1, [r7, #32]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
 8005be0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005be4:	460b      	mov	r3, r1
 8005be6:	4313      	orrs	r3, r2
 8005be8:	d011      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bee:	3308      	adds	r3, #8
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f89a 	bl	8005d2c <RCCEx_PLL2_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	2100      	movs	r1, #0
 8005c18:	61b9      	str	r1, [r7, #24]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c24:	460b      	mov	r3, r1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	d011      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2e:	3308      	adds	r3, #8
 8005c30:	2102      	movs	r1, #2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 f87a 	bl	8005d2c <RCCEx_PLL2_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	2100      	movs	r1, #0
 8005c58:	6139      	str	r1, [r7, #16]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c64:	460b      	mov	r3, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	d011      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6e:	3328      	adds	r3, #40	; 0x28
 8005c70:	2100      	movs	r1, #0
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f90c 	bl	8005e90 <RCCEx_PLL3_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8005c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	2100      	movs	r1, #0
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	d011      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cae:	3328      	adds	r3, #40	; 0x28
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f8ec 	bl	8005e90 <RCCEx_PLL3_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	6039      	str	r1, [r7, #0]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	607b      	str	r3, [r7, #4]
 8005ce0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	d011      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cee:	3328      	adds	r3, #40	; 0x28
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 f8cc 	bl	8005e90 <RCCEx_PLL3_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005d0e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005d22:	46bd      	mov	sp, r7
 8005d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d28:	58024400 	.word	0x58024400

08005d2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d3a:	4b53      	ldr	r3, [pc, #332]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d101      	bne.n	8005d4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e099      	b.n	8005e7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d4a:	4b4f      	ldr	r3, [pc, #316]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a4e      	ldr	r2, [pc, #312]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005d50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d56:	f7fb f9e1 	bl	800111c <HAL_GetTick>
 8005d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d5c:	e008      	b.n	8005d70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d5e:	f7fb f9dd 	bl	800111c <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e086      	b.n	8005e7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d70:	4b45      	ldr	r3, [pc, #276]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f0      	bne.n	8005d5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005d7c:	4b42      	ldr	r3, [pc, #264]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	031b      	lsls	r3, r3, #12
 8005d8a:	493f      	ldr	r1, [pc, #252]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	628b      	str	r3, [r1, #40]	; 0x28
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	025b      	lsls	r3, r3, #9
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	061b      	lsls	r3, r3, #24
 8005dbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005dc0:	4931      	ldr	r1, [pc, #196]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005dc6:	4b30      	ldr	r3, [pc, #192]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	492d      	ldr	r1, [pc, #180]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005dd8:	4b2b      	ldr	r3, [pc, #172]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	f023 0220 	bic.w	r2, r3, #32
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	4928      	ldr	r1, [pc, #160]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005dea:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	4a26      	ldr	r2, [pc, #152]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005df0:	f023 0310 	bic.w	r3, r3, #16
 8005df4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005df6:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dfa:	4b24      	ldr	r3, [pc, #144]	; (8005e8c <RCCEx_PLL2_Config+0x160>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	69d2      	ldr	r2, [r2, #28]
 8005e02:	00d2      	lsls	r2, r2, #3
 8005e04:	4920      	ldr	r1, [pc, #128]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e0a:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e10:	f043 0310 	orr.w	r3, r3, #16
 8005e14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e28:	e00f      	b.n	8005e4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d106      	bne.n	8005e3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e30:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e3c:	e005      	b.n	8005e4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e3e:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	4a11      	ldr	r2, [pc, #68]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e56:	f7fb f961 	bl	800111c <HAL_GetTick>
 8005e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e5c:	e008      	b.n	8005e70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e5e:	f7fb f95d 	bl	800111c <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e006      	b.n	8005e7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <RCCEx_PLL2_Config+0x15c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	ffff0007 	.word	0xffff0007

08005e90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e9e:	4b53      	ldr	r3, [pc, #332]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d101      	bne.n	8005eae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e099      	b.n	8005fe2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005eae:	4b4f      	ldr	r3, [pc, #316]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a4e      	ldr	r2, [pc, #312]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eba:	f7fb f92f 	bl	800111c <HAL_GetTick>
 8005ebe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ec0:	e008      	b.n	8005ed4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ec2:	f7fb f92b 	bl	800111c <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e086      	b.n	8005fe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ed4:	4b45      	ldr	r3, [pc, #276]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f0      	bne.n	8005ec2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ee0:	4b42      	ldr	r3, [pc, #264]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	051b      	lsls	r3, r3, #20
 8005eee:	493f      	ldr	r1, [pc, #252]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	025b      	lsls	r3, r3, #9
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	061b      	lsls	r3, r3, #24
 8005f20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f24:	4931      	ldr	r1, [pc, #196]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f2a:	4b30      	ldr	r3, [pc, #192]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	492d      	ldr	r1, [pc, #180]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f3c:	4b2b      	ldr	r3, [pc, #172]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	4928      	ldr	r1, [pc, #160]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f4e:	4b27      	ldr	r3, [pc, #156]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	4a26      	ldr	r2, [pc, #152]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <RCCEx_PLL3_Config+0x160>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	69d2      	ldr	r2, [r2, #28]
 8005f66:	00d2      	lsls	r2, r2, #3
 8005f68:	4920      	ldr	r1, [pc, #128]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005f6e:	4b1f      	ldr	r3, [pc, #124]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f72:	4a1e      	ldr	r2, [pc, #120]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005f80:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	4a19      	ldr	r2, [pc, #100]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005f8c:	e00f      	b.n	8005fae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d106      	bne.n	8005fa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005f94:	4b15      	ldr	r3, [pc, #84]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	4a14      	ldr	r2, [pc, #80]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005f9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fa0:	e005      	b.n	8005fae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005fa2:	4b12      	ldr	r3, [pc, #72]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	4a11      	ldr	r2, [pc, #68]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005fae:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a0e      	ldr	r2, [pc, #56]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fba:	f7fb f8af 	bl	800111c <HAL_GetTick>
 8005fbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fc0:	e008      	b.n	8005fd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005fc2:	f7fb f8ab 	bl	800111c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e006      	b.n	8005fe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <RCCEx_PLL3_Config+0x15c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f0      	beq.n	8005fc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	58024400 	.word	0x58024400
 8005ff0:	ffff0007 	.word	0xffff0007

08005ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e049      	b.n	800609a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fa ff86 	bl	8000f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f000 faee 	bl	8006614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d001      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e054      	b.n	8006166 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a26      	ldr	r2, [pc, #152]	; (8006174 <HAL_TIM_Base_Start_IT+0xd0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d022      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x80>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e6:	d01d      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x80>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a22      	ldr	r2, [pc, #136]	; (8006178 <HAL_TIM_Base_Start_IT+0xd4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d018      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x80>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a21      	ldr	r2, [pc, #132]	; (800617c <HAL_TIM_Base_Start_IT+0xd8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d013      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x80>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1f      	ldr	r2, [pc, #124]	; (8006180 <HAL_TIM_Base_Start_IT+0xdc>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00e      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x80>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <HAL_TIM_Base_Start_IT+0xe0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d009      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x80>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <HAL_TIM_Base_Start_IT+0xe4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d004      	beq.n	8006124 <HAL_TIM_Base_Start_IT+0x80>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1b      	ldr	r2, [pc, #108]	; (800618c <HAL_TIM_Base_Start_IT+0xe8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d115      	bne.n	8006150 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	4b19      	ldr	r3, [pc, #100]	; (8006190 <HAL_TIM_Base_Start_IT+0xec>)
 800612c:	4013      	ands	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b06      	cmp	r3, #6
 8006134:	d015      	beq.n	8006162 <HAL_TIM_Base_Start_IT+0xbe>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613c:	d011      	beq.n	8006162 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0201 	orr.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614e:	e008      	b.n	8006162 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	e000      	b.n	8006164 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006162:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40010000 	.word	0x40010000
 8006178:	40000400 	.word	0x40000400
 800617c:	40000800 	.word	0x40000800
 8006180:	40000c00 	.word	0x40000c00
 8006184:	40010400 	.word	0x40010400
 8006188:	40001800 	.word	0x40001800
 800618c:	40014000 	.word	0x40014000
 8006190:	00010007 	.word	0x00010007

08006194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d122      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d11b      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0202 	mvn.w	r2, #2
 80061c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9fe 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 80061dc:	e005      	b.n	80061ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f9f0 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa01 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d122      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d11b      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0204 	mvn.w	r2, #4
 8006214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f9d4 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9c6 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f9d7 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b08      	cmp	r3, #8
 8006250:	d122      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b08      	cmp	r3, #8
 800625e:	d11b      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0208 	mvn.w	r2, #8
 8006268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2204      	movs	r2, #4
 800626e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f9aa 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 8006284:	e005      	b.n	8006292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f99c 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f9ad 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d122      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d11b      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0210 	mvn.w	r2, #16
 80062bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2208      	movs	r2, #8
 80062c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f980 	bl	80065d8 <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f972 	bl	80065c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f983 	bl	80065ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d10e      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b01      	cmp	r3, #1
 8006306:	d107      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0201 	mvn.w	r2, #1
 8006310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 faf0 	bl	80078f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d10e      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d107      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fb38 	bl	80069b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006352:	d10e      	bne.n	8006372 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635e:	2b80      	cmp	r3, #128	; 0x80
 8006360:	d107      	bne.n	8006372 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800636a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fb2b 	bl	80069c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d10e      	bne.n	800639e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d107      	bne.n	800639e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f931 	bl	8006600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f003 0320 	and.w	r3, r3, #32
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d10e      	bne.n	80063ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d107      	bne.n	80063ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f06f 0220 	mvn.w	r2, #32
 80063c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 faeb 	bl	80069a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIM_ConfigClockSource+0x1c>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e0dc      	b.n	80065aa <HAL_TIM_ConfigClockSource+0x1d6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	4b6a      	ldr	r3, [pc, #424]	; (80065b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800640c:	4013      	ands	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a64      	ldr	r2, [pc, #400]	; (80065b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	f000 80a9 	beq.w	800657e <HAL_TIM_ConfigClockSource+0x1aa>
 800642c:	4a62      	ldr	r2, [pc, #392]	; (80065b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	f200 80ae 	bhi.w	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 8006434:	4a61      	ldr	r2, [pc, #388]	; (80065bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	f000 80a1 	beq.w	800657e <HAL_TIM_ConfigClockSource+0x1aa>
 800643c:	4a5f      	ldr	r2, [pc, #380]	; (80065bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	f200 80a6 	bhi.w	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 8006444:	4a5e      	ldr	r2, [pc, #376]	; (80065c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006446:	4293      	cmp	r3, r2
 8006448:	f000 8099 	beq.w	800657e <HAL_TIM_ConfigClockSource+0x1aa>
 800644c:	4a5c      	ldr	r2, [pc, #368]	; (80065c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800644e:	4293      	cmp	r3, r2
 8006450:	f200 809e 	bhi.w	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 8006454:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006458:	f000 8091 	beq.w	800657e <HAL_TIM_ConfigClockSource+0x1aa>
 800645c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006460:	f200 8096 	bhi.w	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 8006464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006468:	f000 8089 	beq.w	800657e <HAL_TIM_ConfigClockSource+0x1aa>
 800646c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006470:	f200 808e 	bhi.w	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 8006474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006478:	d03e      	beq.n	80064f8 <HAL_TIM_ConfigClockSource+0x124>
 800647a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800647e:	f200 8087 	bhi.w	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 8006482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006486:	f000 8086 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x1c2>
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648e:	d87f      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 8006490:	2b70      	cmp	r3, #112	; 0x70
 8006492:	d01a      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0xf6>
 8006494:	2b70      	cmp	r3, #112	; 0x70
 8006496:	d87b      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 8006498:	2b60      	cmp	r3, #96	; 0x60
 800649a:	d050      	beq.n	800653e <HAL_TIM_ConfigClockSource+0x16a>
 800649c:	2b60      	cmp	r3, #96	; 0x60
 800649e:	d877      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 80064a0:	2b50      	cmp	r3, #80	; 0x50
 80064a2:	d03c      	beq.n	800651e <HAL_TIM_ConfigClockSource+0x14a>
 80064a4:	2b50      	cmp	r3, #80	; 0x50
 80064a6:	d873      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 80064a8:	2b40      	cmp	r3, #64	; 0x40
 80064aa:	d058      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x18a>
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d86f      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 80064b0:	2b30      	cmp	r3, #48	; 0x30
 80064b2:	d064      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x1aa>
 80064b4:	2b30      	cmp	r3, #48	; 0x30
 80064b6:	d86b      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	d060      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x1aa>
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d867      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d05c      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x1aa>
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d05a      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x1aa>
 80064c8:	e062      	b.n	8006590 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064da:	f000 f9b3 	bl	8006844 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	609a      	str	r2, [r3, #8]
      break;
 80064f6:	e04f      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006508:	f000 f99c 	bl	8006844 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800651a:	609a      	str	r2, [r3, #8]
      break;
 800651c:	e03c      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800652a:	461a      	mov	r2, r3
 800652c:	f000 f90c 	bl	8006748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2150      	movs	r1, #80	; 0x50
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f966 	bl	8006808 <TIM_ITRx_SetConfig>
      break;
 800653c:	e02c      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800654a:	461a      	mov	r2, r3
 800654c:	f000 f92b 	bl	80067a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2160      	movs	r1, #96	; 0x60
 8006556:	4618      	mov	r0, r3
 8006558:	f000 f956 	bl	8006808 <TIM_ITRx_SetConfig>
      break;
 800655c:	e01c      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800656a:	461a      	mov	r2, r3
 800656c:	f000 f8ec 	bl	8006748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2140      	movs	r1, #64	; 0x40
 8006576:	4618      	mov	r0, r3
 8006578:	f000 f946 	bl	8006808 <TIM_ITRx_SetConfig>
      break;
 800657c:	e00c      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f000 f93d 	bl	8006808 <TIM_ITRx_SetConfig>
      break;
 800658e:	e003      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
      break;
 8006594:	e000      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	ffceff88 	.word	0xffceff88
 80065b8:	00100040 	.word	0x00100040
 80065bc:	00100030 	.word	0x00100030
 80065c0:	00100020 	.word	0x00100020

080065c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a40      	ldr	r2, [pc, #256]	; (8006728 <TIM_Base_SetConfig+0x114>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006632:	d00f      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a3d      	ldr	r2, [pc, #244]	; (800672c <TIM_Base_SetConfig+0x118>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00b      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a3c      	ldr	r2, [pc, #240]	; (8006730 <TIM_Base_SetConfig+0x11c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a3b      	ldr	r2, [pc, #236]	; (8006734 <TIM_Base_SetConfig+0x120>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_Base_SetConfig+0x40>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a3a      	ldr	r2, [pc, #232]	; (8006738 <TIM_Base_SetConfig+0x124>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d108      	bne.n	8006666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2f      	ldr	r2, [pc, #188]	; (8006728 <TIM_Base_SetConfig+0x114>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01f      	beq.n	80066ae <TIM_Base_SetConfig+0x9a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d01b      	beq.n	80066ae <TIM_Base_SetConfig+0x9a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2c      	ldr	r2, [pc, #176]	; (800672c <TIM_Base_SetConfig+0x118>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d017      	beq.n	80066ae <TIM_Base_SetConfig+0x9a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a2b      	ldr	r2, [pc, #172]	; (8006730 <TIM_Base_SetConfig+0x11c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <TIM_Base_SetConfig+0x9a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a2a      	ldr	r2, [pc, #168]	; (8006734 <TIM_Base_SetConfig+0x120>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00f      	beq.n	80066ae <TIM_Base_SetConfig+0x9a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a29      	ldr	r2, [pc, #164]	; (8006738 <TIM_Base_SetConfig+0x124>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00b      	beq.n	80066ae <TIM_Base_SetConfig+0x9a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a28      	ldr	r2, [pc, #160]	; (800673c <TIM_Base_SetConfig+0x128>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <TIM_Base_SetConfig+0x9a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a27      	ldr	r2, [pc, #156]	; (8006740 <TIM_Base_SetConfig+0x12c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d003      	beq.n	80066ae <TIM_Base_SetConfig+0x9a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a26      	ldr	r2, [pc, #152]	; (8006744 <TIM_Base_SetConfig+0x130>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d108      	bne.n	80066c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a10      	ldr	r2, [pc, #64]	; (8006728 <TIM_Base_SetConfig+0x114>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00f      	beq.n	800670c <TIM_Base_SetConfig+0xf8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a12      	ldr	r2, [pc, #72]	; (8006738 <TIM_Base_SetConfig+0x124>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00b      	beq.n	800670c <TIM_Base_SetConfig+0xf8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a11      	ldr	r2, [pc, #68]	; (800673c <TIM_Base_SetConfig+0x128>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d007      	beq.n	800670c <TIM_Base_SetConfig+0xf8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a10      	ldr	r2, [pc, #64]	; (8006740 <TIM_Base_SetConfig+0x12c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_Base_SetConfig+0xf8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a0f      	ldr	r2, [pc, #60]	; (8006744 <TIM_Base_SetConfig+0x130>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d103      	bne.n	8006714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	615a      	str	r2, [r3, #20]
}
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40010000 	.word	0x40010000
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40000c00 	.word	0x40000c00
 8006738:	40010400 	.word	0x40010400
 800673c:	40014000 	.word	0x40014000
 8006740:	40014400 	.word	0x40014400
 8006744:	40014800 	.word	0x40014800

08006748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f023 0201 	bic.w	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 030a 	bic.w	r3, r3, #10
 8006784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	621a      	str	r2, [r3, #32]
}
 800679a:	bf00      	nop
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b087      	sub	sp, #28
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f023 0210 	bic.w	r2, r3, #16
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	031b      	lsls	r3, r3, #12
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	621a      	str	r2, [r3, #32]
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <TIM_ITRx_SetConfig+0x38>)
 800681c:	4013      	ands	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	f043 0307 	orr.w	r3, r3, #7
 800682a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	609a      	str	r2, [r3, #8]
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	ffcfff8f 	.word	0xffcfff8f

08006844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800685e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	021a      	lsls	r2, r3, #8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	431a      	orrs	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4313      	orrs	r3, r2
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006898:	2302      	movs	r3, #2
 800689a:	e06d      	b.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a30      	ldr	r2, [pc, #192]	; (8006984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a2f      	ldr	r2, [pc, #188]	; (8006988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d108      	bne.n	80068e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a20      	ldr	r2, [pc, #128]	; (8006984 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d022      	beq.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690e:	d01d      	beq.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a1d      	ldr	r2, [pc, #116]	; (800698c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d018      	beq.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d013      	beq.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a1a      	ldr	r2, [pc, #104]	; (8006994 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00e      	beq.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a15      	ldr	r2, [pc, #84]	; (8006988 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d009      	beq.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a16      	ldr	r2, [pc, #88]	; (8006998 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a15      	ldr	r2, [pc, #84]	; (800699c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d10c      	bne.n	8006966 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006952:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	4313      	orrs	r3, r2
 800695c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40010000 	.word	0x40010000
 8006988:	40010400 	.word	0x40010400
 800698c:	40000400 	.word	0x40000400
 8006990:	40000800 	.word	0x40000800
 8006994:	40000c00 	.word	0x40000c00
 8006998:	40001800 	.word	0x40001800
 800699c:	40014000 	.word	0x40014000

080069a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <Initialize_BM>:
#include "bsp_bm1422agmv.h"

//I2C_HandleTypeDef hi2c2;

void Initialize_BM(BMObject* t_bm_obj)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	memset(t_bm_obj, 0, sizeof(BMObject));
 80069e4:	2214      	movs	r2, #20
 80069e6:	2100      	movs	r1, #0
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f004 fe3e 	bl	800b66a <memset>
	t_bm_obj->i2cport = &hi2c2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a04      	ldr	r2, [pc, #16]	; (8006a04 <Initialize_BM+0x28>)
 80069f2:	601a      	str	r2, [r3, #0]
	t_bm_obj->addr    = BM1422AGMV_DEV_ADDR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	221c      	movs	r2, #28
 80069f8:	809a      	strh	r2, [r3, #4]
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	24000198 	.word	0x24000198

08006a08 <IsDevReady_BM>:

uint8_t IsDevReady_BM(BMObject* t_bm_obj)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	uint8_t t_res = HAL_I2C_IsDeviceReady(t_bm_obj->i2cport, t_bm_obj->addr, BM_I2C_TRIALS, BM_I2C_TIMEOUT);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8899      	ldrh	r1, [r3, #4]
 8006a18:	2305      	movs	r3, #5
 8006a1a:	220a      	movs	r2, #10
 8006a1c:	f7fc fb46 	bl	80030ac <HAL_I2C_IsDeviceReady>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
	return t_res;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <Read_Data_BM>:
	return t_res;
}


uint8_t Read_Data_BM(BMObject* t_bm_obj)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b08a      	sub	sp, #40	; 0x28
 8006a32:	af04      	add	r7, sp, #16
 8006a34:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]
	uint8_t t_buff[6];

	t_res = HAL_I2C_Mem_Read(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_DATAX_REG, I2C_MEMADD_SIZE_8BIT, t_buff, 6, BM_I2C_TIMEOUT);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8899      	ldrh	r1, [r3, #4]
 8006a42:	2305      	movs	r3, #5
 8006a44:	9302      	str	r3, [sp, #8]
 8006a46:	2306      	movs	r3, #6
 8006a48:	9301      	str	r3, [sp, #4]
 8006a4a:	f107 0308 	add.w	r3, r7, #8
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	2301      	movs	r3, #1
 8006a52:	2210      	movs	r2, #16
 8006a54:	f7fc fa10 	bl	8002e78 <HAL_I2C_Mem_Read>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	75fb      	strb	r3, [r7, #23]

    int16_t t_magX = (int16_t)(t_buff[0] | t_buff[1] << 8);
 8006a5c:	7a3b      	ldrb	r3, [r7, #8]
 8006a5e:	b21a      	sxth	r2, r3
 8006a60:	7a7b      	ldrb	r3, [r7, #9]
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	b21b      	sxth	r3, r3
 8006a66:	4313      	orrs	r3, r2
 8006a68:	82bb      	strh	r3, [r7, #20]
    int16_t t_magY = (int16_t)(t_buff[2] | t_buff[3] << 8);
 8006a6a:	7abb      	ldrb	r3, [r7, #10]
 8006a6c:	b21a      	sxth	r2, r3
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	b21b      	sxth	r3, r3
 8006a74:	4313      	orrs	r3, r2
 8006a76:	827b      	strh	r3, [r7, #18]
    int16_t t_magZ = (int16_t)(t_buff[4] | t_buff[5] << 8);
 8006a78:	7b3b      	ldrb	r3, [r7, #12]
 8006a7a:	b21a      	sxth	r2, r3
 8006a7c:	7b7b      	ldrb	r3, [r7, #13]
 8006a7e:	021b      	lsls	r3, r3, #8
 8006a80:	b21b      	sxth	r3, r3
 8006a82:	4313      	orrs	r3, r2
 8006a84:	823b      	strh	r3, [r7, #16]

	/* NEED TO BE SCALED */
    t_bm_obj->mag_x = (float)t_magX;
 8006a86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	edc3 7a02 	vstr	s15, [r3, #8]
	t_bm_obj->mag_y = (float)t_magY;
 8006a98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	edc3 7a03 	vstr	s15, [r3, #12]
	t_bm_obj->mag_z = (float)t_magZ;
 8006aaa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	edc3 7a04 	vstr	s15, [r3, #16]

	return t_res;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <Write_Data_BM>:


uint8_t Write_Data_BM(BMObject* t_bm_obj)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b088      	sub	sp, #32
 8006aca:	af04      	add	r7, sp, #16
 8006acc:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]

	uint8_t conf_1 = BM1422AGMV_CNTL1_VALUE;
 8006ad2:	23d8      	movs	r3, #216	; 0xd8
 8006ad4:	73bb      	strb	r3, [r7, #14]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL1_REG, I2C_MEMADD_SIZE_8BIT, &conf_1, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8899      	ldrh	r1, [r3, #4]
 8006ade:	2305      	movs	r3, #5
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	f107 030e 	add.w	r3, r7, #14
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2301      	movs	r3, #1
 8006aee:	221b      	movs	r2, #27
 8006af0:	f7fc f8ae 	bl	8002c50 <HAL_I2C_Mem_Write>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_2 = BM1422AGMV_CNTL2_VALUE;
 8006af8:	2300      	movs	r3, #0
 8006afa:	737b      	strb	r3, [r7, #13]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL2_REG, I2C_MEMADD_SIZE_8BIT, &conf_2, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8899      	ldrh	r1, [r3, #4]
 8006b04:	2305      	movs	r3, #5
 8006b06:	9302      	str	r3, [sp, #8]
 8006b08:	2301      	movs	r3, #1
 8006b0a:	9301      	str	r3, [sp, #4]
 8006b0c:	f107 030d 	add.w	r3, r7, #13
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	2301      	movs	r3, #1
 8006b14:	221c      	movs	r2, #28
 8006b16:	f7fc f89b 	bl	8002c50 <HAL_I2C_Mem_Write>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_4 = BM1422AGMV_CNTL4_H_VALUE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	733b      	strb	r3, [r7, #12]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL4_REG_H, I2C_MEMADD_SIZE_8BIT, &conf_4, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	8899      	ldrh	r1, [r3, #4]
 8006b2a:	2305      	movs	r3, #5
 8006b2c:	9302      	str	r3, [sp, #8]
 8006b2e:	2301      	movs	r3, #1
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	f107 030c 	add.w	r3, r7, #12
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	225d      	movs	r2, #93	; 0x5d
 8006b3c:	f7fc f888 	bl	8002c50 <HAL_I2C_Mem_Write>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_5 = BM1422AGMV_CNTL4_L_VALUE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	72fb      	strb	r3, [r7, #11]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL4_REG_L, I2C_MEMADD_SIZE_8BIT, &conf_5, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8899      	ldrh	r1, [r3, #4]
 8006b50:	2305      	movs	r3, #5
 8006b52:	9302      	str	r3, [sp, #8]
 8006b54:	2301      	movs	r3, #1
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	f107 030b 	add.w	r3, r7, #11
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	2301      	movs	r3, #1
 8006b60:	225c      	movs	r2, #92	; 0x5c
 8006b62:	f7fc f875 	bl	8002c50 <HAL_I2C_Mem_Write>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73fb      	strb	r3, [r7, #15]


    // CNTL3 should be set at LAST //
    uint8_t conf_3 = BM1422AGMV_CNTL3_VALUE;
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	72bb      	strb	r3, [r7, #10]
    t_res = HAL_I2C_Mem_Write(t_bm_obj->i2cport, t_bm_obj->addr, BM1422AGMV_CNTL3_REG, I2C_MEMADD_SIZE_8BIT, &conf_3, BM1422AGMV_CONTROL_SIZE, BM_I2C_TIMEOUT);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8899      	ldrh	r1, [r3, #4]
 8006b76:	2305      	movs	r3, #5
 8006b78:	9302      	str	r3, [sp, #8]
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	f107 030a 	add.w	r3, r7, #10
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	2301      	movs	r3, #1
 8006b86:	221d      	movs	r2, #29
 8006b88:	f7fc f862 	bl	8002c50 <HAL_I2C_Mem_Write>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]


    return t_res;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <Assemble_SDO>:
	default:			return 0;		break;
	}
}

static void Assemble_SDO(SDOinfo* t_do_addr, uint8_t t_data_type)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	70fb      	strb	r3, [r7, #3]
	SDOinfo temp = t_data_type;
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	73fb      	strb	r3, [r7, #15]
 8006baa:	7bfa      	ldrb	r2, [r7, #15]
	memcpy(t_do_addr, &temp, sizeof(SDOinfo));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	701a      	strb	r2, [r3, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <Assemble_PDO>:

static void Assemble_PDO(PDOinfo* t_do_addr, uint8_t t_data_type, uint8_t t_num_of_data)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	70bb      	strb	r3, [r7, #2]
	PDOinfo temp = {t_data_type, t_num_of_data};
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	733b      	strb	r3, [r7, #12]
 8006bd0:	78bb      	ldrb	r3, [r7, #2]
 8006bd2:	737b      	strb	r3, [r7, #13]
 8006bd4:	89ba      	ldrh	r2, [r7, #12]
	memcpy(t_do_addr, &temp, sizeof(PDOinfo));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	801a      	strh	r2, [r3, #0]
}
 8006bda:	bf00      	nop
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <Create_SDOTable_ObjDictionary>:
   |_/_/ \_\___/____|___|

*/

void Create_SDOTable_ObjDictionary()
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
	//********************************************************************************//
	//						|	  Task_ID	  |			SDO_ID			| DATA_TYPE | //
	//********************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_STATE],  	    			UINT8_T);
 8006bec:	2101      	movs	r1, #1
 8006bee:	48c2      	ldr	r0, [pc, #776]	; (8006ef8 <Create_SDOTable_ObjDictionary+0x310>)
 8006bf0:	f7ff ffd3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_STATE],  	    			UINT8_T);
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	48c1      	ldr	r0, [pc, #772]	; (8006efc <Create_SDOTable_ObjDictionary+0x314>)
 8006bf8:	f7ff ffcf 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_ROUTINE],  				UINT8_T);
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	48c0      	ldr	r0, [pc, #768]	; (8006f00 <Create_SDOTable_ObjDictionary+0x318>)
 8006c00:	f7ff ffcb 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_ROUTINE],  				UINT8_T);
 8006c04:	2101      	movs	r1, #1
 8006c06:	48bf      	ldr	r0, [pc, #764]	; (8006f04 <Create_SDOTable_ObjDictionary+0x31c>)
 8006c08:	f7ff ffc7 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_NAME],  						STRING10);
 8006c0c:	2109      	movs	r1, #9
 8006c0e:	48be      	ldr	r0, [pc, #760]	; (8006f08 <Create_SDOTable_ObjDictionary+0x320>)
 8006c10:	f7ff ffc3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_POLE_PAIR],  					UINT8_T);
 8006c14:	2101      	movs	r1, #1
 8006c16:	48bd      	ldr	r0, [pc, #756]	; (8006f0c <Create_SDOTable_ObjDictionary+0x324>)
 8006c18:	f7ff ffbf 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ENCODER_RESOLUTION],  			UINT16_T);
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	48bc      	ldr	r0, [pc, #752]	; (8006f10 <Create_SDOTable_ObjDictionary+0x328>)
 8006c20:	f7ff ffbb 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GEAR_RATIO],  					FLOAT32_T);
 8006c24:	2107      	movs	r1, #7
 8006c26:	48bb      	ldr	r0, [pc, #748]	; (8006f14 <Create_SDOTable_ObjDictionary+0x32c>)
 8006c28:	f7ff ffb7 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TORQUE_CONSTANT],  			FLOAT32_T);
 8006c2c:	2107      	movs	r1, #7
 8006c2e:	48ba      	ldr	r0, [pc, #744]	; (8006f18 <Create_SDOTable_ObjDictionary+0x330>)
 8006c30:	f7ff ffb3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_VELOCITY_CONSTANT],  			FLOAT32_T);
 8006c34:	2107      	movs	r1, #7
 8006c36:	48b9      	ldr	r0, [pc, #740]	; (8006f1c <Create_SDOTable_ObjDictionary+0x334>)
 8006c38:	f7ff ffaf 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_PEAK_CURRENT_LIMIT],  			FLOAT32_T);
 8006c3c:	2107      	movs	r1, #7
 8006c3e:	48b8      	ldr	r0, [pc, #736]	; (8006f20 <Create_SDOTable_ObjDictionary+0x338>)
 8006c40:	f7ff ffab 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CONTINUOUS_CURRENT_LIMIT],  	FLOAT32_T);
 8006c44:	2107      	movs	r1, #7
 8006c46:	48b7      	ldr	r0, [pc, #732]	; (8006f24 <Create_SDOTable_ObjDictionary+0x33c>)
 8006c48:	f7ff ffa7 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MAX_VELOCITY],		  			FLOAT32_T);
 8006c4c:	2107      	movs	r1, #7
 8006c4e:	48b6      	ldr	r0, [pc, #728]	; (8006f28 <Create_SDOTable_ObjDictionary+0x340>)
 8006c50:	f7ff ffa3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_COMMUTATION_DUTY],  			UINT16_T);
 8006c54:	2102      	movs	r1, #2
 8006c56:	48b5      	ldr	r0, [pc, #724]	; (8006f2c <Create_SDOTable_ObjDictionary+0x344>)
 8006c58:	f7ff ff9f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_USER_DIRECTION],  				FLOAT32_T);
 8006c5c:	2107      	movs	r1, #7
 8006c5e:	48b4      	ldr	r0, [pc, #720]	; (8006f30 <Create_SDOTable_ObjDictionary+0x348>)
 8006c60:	f7ff ff9b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ELEC_SYSTEM_ID_MAG],  			FLOAT32_T);
 8006c64:	2107      	movs	r1, #7
 8006c66:	48b3      	ldr	r0, [pc, #716]	; (8006f34 <Create_SDOTable_ObjDictionary+0x34c>)
 8006c68:	f7ff ff97 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_RESISTANCE],  		FLOAT32_T);
 8006c6c:	2107      	movs	r1, #7
 8006c6e:	48b2      	ldr	r0, [pc, #712]	; (8006f38 <Create_SDOTable_ObjDictionary+0x350>)
 8006c70:	f7ff ff93 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_INDUCTANCE],  		FLOAT32_T);
 8006c74:	2107      	movs	r1, #7
 8006c76:	48b1      	ldr	r0, [pc, #708]	; (8006f3c <Create_SDOTable_ObjDictionary+0x354>)
 8006c78:	f7ff ff8f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_VELOCITY],  			FLOAT32_T);
 8006c7c:	2107      	movs	r1, #7
 8006c7e:	48b0      	ldr	r0, [pc, #704]	; (8006f40 <Create_SDOTable_ObjDictionary+0x358>)
 8006c80:	f7ff ff8b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_GAIN_PCTG],  			UINT8_T);
 8006c84:	2101      	movs	r1, #1
 8006c86:	48af      	ldr	r0, [pc, #700]	; (8006f44 <Create_SDOTable_ObjDictionary+0x35c>)
 8006c88:	f7ff ff87 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CURRENT_CTRL_BW_RAD],  		FLOAT32_T);
 8006c8c:	2107      	movs	r1, #7
 8006c8e:	48ae      	ldr	r0, [pc, #696]	; (8006f48 <Create_SDOTable_ObjDictionary+0x360>)
 8006c90:	f7ff ff83 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_INERTIA],  					FLOAT32_T);
 8006c94:	2107      	movs	r1, #7
 8006c96:	48ad      	ldr	r0, [pc, #692]	; (8006f4c <Create_SDOTable_ObjDictionary+0x364>)
 8006c98:	f7ff ff7f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_DAMPING_COEF],  				FLOAT32_T);
 8006c9c:	2107      	movs	r1, #7
 8006c9e:	48ac      	ldr	r0, [pc, #688]	; (8006f50 <Create_SDOTable_ObjDictionary+0x368>)
 8006ca0:	f7ff ff7b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_A],  				FLOAT32_T);
 8006ca4:	2107      	movs	r1, #7
 8006ca6:	48ab      	ldr	r0, [pc, #684]	; (8006f54 <Create_SDOTable_ObjDictionary+0x36c>)
 8006ca8:	f7ff ff77 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_B],  				FLOAT32_T);
 8006cac:	2107      	movs	r1, #7
 8006cae:	48aa      	ldr	r0, [pc, #680]	; (8006f58 <Create_SDOTable_ObjDictionary+0x370>)
 8006cb0:	f7ff ff73 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_ID_INFO],  			FLOAT32_T);
 8006cb4:	2107      	movs	r1, #7
 8006cb6:	48a9      	ldr	r0, [pc, #676]	; (8006f5c <Create_SDOTable_ObjDictionary+0x374>)
 8006cb8:	f7ff ff6f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_LUT_INFO],  			FLOAT32_T);
 8006cbc:	2107      	movs	r1, #7
 8006cbe:	48a8      	ldr	r0, [pc, #672]	; (8006f60 <Create_SDOTable_ObjDictionary+0x378>)
 8006cc0:	f7ff ff6b 	bl	8006b9a <Assemble_SDO>




	/*Joint Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_STATE],  					UINT8_T);
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	48a7      	ldr	r0, [pc, #668]	; (8006f64 <Create_SDOTable_ObjDictionary+0x37c>)
 8006cc8:	f7ff ff67 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_STATE],  					UINT8_T);
 8006ccc:	2101      	movs	r1, #1
 8006cce:	48a6      	ldr	r0, [pc, #664]	; (8006f68 <Create_SDOTable_ObjDictionary+0x380>)
 8006cd0:	f7ff ff63 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_ROUTINE], 					UINT8_T);
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	48a5      	ldr	r0, [pc, #660]	; (8006f6c <Create_SDOTable_ObjDictionary+0x384>)
 8006cd8:	f7ff ff5f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_ROUTINE], 					UINT8_T);
 8006cdc:	2101      	movs	r1, #1
 8006cde:	48a4      	ldr	r0, [pc, #656]	; (8006f70 <Create_SDOTable_ObjDictionary+0x388>)
 8006ce0:	f7ff ff5b 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR_LENGTH],	 		UINT8_T);
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	48a3      	ldr	r0, [pc, #652]	; (8006f74 <Create_SDOTable_ObjDictionary+0x38c>)
 8006ce8:	f7ff ff57 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR_LENGTH],		UINT8_T);
 8006cec:	2101      	movs	r1, #1
 8006cee:	48a2      	ldr	r0, [pc, #648]	; (8006f78 <Create_SDOTable_ObjDictionary+0x390>)
 8006cf0:	f7ff ff53 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR],	  			FLOAT32_T);
 8006cf4:	2107      	movs	r1, #7
 8006cf6:	48a1      	ldr	r0, [pc, #644]	; (8006f7c <Create_SDOTable_ObjDictionary+0x394>)
 8006cf8:	f7ff ff4f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR],	  			FLOAT32_T);
 8006cfc:	2107      	movs	r1, #7
 8006cfe:	48a0      	ldr	r0, [pc, #640]	; (8006f80 <Create_SDOTable_ObjDictionary+0x398>)
 8006d00:	f7ff ff4b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_SATURATION],	  			FLOAT32_T);
 8006d04:	2107      	movs	r1, #7
 8006d06:	489f      	ldr	r0, [pc, #636]	; (8006f84 <Create_SDOTable_ObjDictionary+0x39c>)
 8006d08:	f7ff ff47 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_STIFFNESS],	  	FLOAT32_T);
 8006d0c:	2107      	movs	r1, #7
 8006d0e:	489e      	ldr	r0, [pc, #632]	; (8006f88 <Create_SDOTable_ObjDictionary+0x3a0>)
 8006d10:	f7ff ff43 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_DAMPER],	  		FLOAT32_T);
 8006d14:	2107      	movs	r1, #7
 8006d16:	489d      	ldr	r0, [pc, #628]	; (8006f8c <Create_SDOTable_ObjDictionary+0x3a4>)
 8006d18:	f7ff ff3f 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_PERIODIC_SIG_INFO],	FLOAT32_T);
 8006d1c:	2107      	movs	r1, #7
 8006d1e:	489c      	ldr	r0, [pc, #624]	; (8006f90 <Create_SDOTable_ObjDictionary+0x3a8>)
 8006d20:	f7ff ff3b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_PERIODIC_SIG_INFO],	FLOAT32_T);
 8006d24:	2107      	movs	r1, #7
 8006d26:	489b      	ldr	r0, [pc, #620]	; (8006f94 <Create_SDOTable_ObjDictionary+0x3ac>)
 8006d28:	f7ff ff37 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_BW],						FLOAT32_T);
 8006d2c:	2107      	movs	r1, #7
 8006d2e:	489a      	ldr	r0, [pc, #616]	; (8006f98 <Create_SDOTable_ObjDictionary+0x3b0>)
 8006d30:	f7ff ff33 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_NUM],					FLOAT32_T);
 8006d34:	2107      	movs	r1, #7
 8006d36:	4899      	ldr	r0, [pc, #612]	; (8006f9c <Create_SDOTable_ObjDictionary+0x3b4>)
 8006d38:	f7ff ff2f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_DEN],					FLOAT32_T);
 8006d3c:	2107      	movs	r1, #7
 8006d3e:	4898      	ldr	r0, [pc, #608]	; (8006fa0 <Create_SDOTable_ObjDictionary+0x3b8>)
 8006d40:	f7ff ff2b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_NUM],					FLOAT32_T);
 8006d44:	2107      	movs	r1, #7
 8006d46:	4897      	ldr	r0, [pc, #604]	; (8006fa4 <Create_SDOTable_ObjDictionary+0x3bc>)
 8006d48:	f7ff ff27 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_DEN],					FLOAT32_T);
 8006d4c:	2107      	movs	r1, #7
 8006d4e:	4896      	ldr	r0, [pc, #600]	; (8006fa8 <Create_SDOTable_ObjDictionary+0x3c0>)
 8006d50:	f7ff ff23 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_SATURATION],				FLOAT32_T);
 8006d54:	2107      	movs	r1, #7
 8006d56:	4895      	ldr	r0, [pc, #596]	; (8006fac <Create_SDOTable_ObjDictionary+0x3c4>)
 8006d58:	f7ff ff1f 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_BW],				FLOAT32_T);
 8006d5c:	2107      	movs	r1, #7
 8006d5e:	4894      	ldr	r0, [pc, #592]	; (8006fb0 <Create_SDOTable_ObjDictionary+0x3c8>)
 8006d60:	f7ff ff1b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_P_GAIN],			FLOAT32_T);
 8006d64:	2107      	movs	r1, #7
 8006d66:	4893      	ldr	r0, [pc, #588]	; (8006fb4 <Create_SDOTable_ObjDictionary+0x3cc>)
 8006d68:	f7ff ff17 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_I_GAIN],			FLOAT32_T);
 8006d6c:	2107      	movs	r1, #7
 8006d6e:	4892      	ldr	r0, [pc, #584]	; (8006fb8 <Create_SDOTable_ObjDictionary+0x3d0>)
 8006d70:	f7ff ff13 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_INPUT_PENALTY],	FLOAT32_T);
 8006d74:	2107      	movs	r1, #7
 8006d76:	4891      	ldr	r0, [pc, #580]	; (8006fbc <Create_SDOTable_ObjDictionary+0x3d4>)
 8006d78:	f7ff ff0f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_P_GAIN],			FLOAT32_T);
 8006d7c:	2107      	movs	r1, #7
 8006d7e:	4890      	ldr	r0, [pc, #576]	; (8006fc0 <Create_SDOTable_ObjDictionary+0x3d8>)
 8006d80:	f7ff ff0b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_D_GAIN],			FLOAT32_T);
 8006d84:	2107      	movs	r1, #7
 8006d86:	488f      	ldr	r0, [pc, #572]	; (8006fc4 <Create_SDOTable_ObjDictionary+0x3dc>)
 8006d88:	f7ff ff07 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_MID_CTRL_SATURATION],			FLOAT32_T);
 8006d8c:	2107      	movs	r1, #7
 8006d8e:	488e      	ldr	r0, [pc, #568]	; (8006fc8 <Create_SDOTable_ObjDictionary+0x3e0>)
 8006d90:	f7ff ff03 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_INCENCODER_SET_OFFSET],		UINT8_T);
 8006d94:	2101      	movs	r1, #1
 8006d96:	488d      	ldr	r0, [pc, #564]	; (8006fcc <Create_SDOTable_ObjDictionary+0x3e4>)
 8006d98:	f7ff feff 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_SET_OFFSET],		UINT8_T);
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	488c      	ldr	r0, [pc, #560]	; (8006fd0 <Create_SDOTable_ObjDictionary+0x3e8>)
 8006da0:	f7ff fefb 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_CHANGE_DIRECTION],	UINT8_T);
 8006da4:	2101      	movs	r1, #1
 8006da6:	488b      	ldr	r0, [pc, #556]	; (8006fd4 <Create_SDOTable_ObjDictionary+0x3ec>)
 8006da8:	f7ff fef7 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFFNESS],				FLOAT32_T);
 8006dac:	2107      	movs	r1, #7
 8006dae:	488a      	ldr	r0, [pc, #552]	; (8006fd8 <Create_SDOTable_ObjDictionary+0x3f0>)
 8006db0:	f7ff fef3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPER],					FLOAT32_T);
 8006db4:	2107      	movs	r1, #7
 8006db6:	4889      	ldr	r0, [pc, #548]	; (8006fdc <Create_SDOTable_ObjDictionary+0x3f4>)
 8006db8:	f7ff feef 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPED_RANGE],				FLOAT32_T);
 8006dbc:	2107      	movs	r1, #7
 8006dbe:	4888      	ldr	r0, [pc, #544]	; (8006fe0 <Create_SDOTable_ObjDictionary+0x3f8>)
 8006dc0:	f7ff feeb 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFF_RANGE],				FLOAT32_T);
 8006dc4:	2107      	movs	r1, #7
 8006dc6:	4887      	ldr	r0, [pc, #540]	; (8006fe4 <Create_SDOTable_ObjDictionary+0x3fc>)
 8006dc8:	f7ff fee7 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_UPPER_LIMIT],			UINT8_T);
 8006dcc:	2101      	movs	r1, #1
 8006dce:	4886      	ldr	r0, [pc, #536]	; (8006fe8 <Create_SDOTable_ObjDictionary+0x400>)
 8006dd0:	f7ff fee3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_LOWER_LIMIT],			UINT8_T);
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	4885      	ldr	r0, [pc, #532]	; (8006fec <Create_SDOTable_ObjDictionary+0x404>)
 8006dd8:	f7ff fedf 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_SATURATION],				FLOAT32_T);
 8006ddc:	2107      	movs	r1, #7
 8006dde:	4884      	ldr	r0, [pc, #528]	; (8006ff0 <Create_SDOTable_ObjDictionary+0x408>)
 8006de0:	f7ff fedb 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_NUM],				FLOAT32_T);
 8006de4:	2107      	movs	r1, #7
 8006de6:	4883      	ldr	r0, [pc, #524]	; (8006ff4 <Create_SDOTable_ObjDictionary+0x40c>)
 8006de8:	f7ff fed7 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_DEN],				FLOAT32_T);
 8006dec:	2107      	movs	r1, #7
 8006dee:	4882      	ldr	r0, [pc, #520]	; (8006ff8 <Create_SDOTable_ObjDictionary+0x410>)
 8006df0:	f7ff fed3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR],			UINT8_T);
 8006df4:	2101      	movs	r1, #1
 8006df6:	4881      	ldr	r0, [pc, #516]	; (8006ffc <Create_SDOTable_ObjDictionary+0x414>)
 8006df8:	f7ff fecf 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR_LEAD_LAG],	FLOAT32_T);
 8006dfc:	2107      	movs	r1, #7
 8006dfe:	4880      	ldr	r0, [pc, #512]	; (8007000 <Create_SDOTable_ObjDictionary+0x418>)
 8006e00:	f7ff fecb 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ENCODER_RESOLUTION],			UINT16_T);
 8006e04:	2102      	movs	r1, #2
 8006e06:	487f      	ldr	r0, [pc, #508]	; (8007004 <Create_SDOTable_ObjDictionary+0x41c>)
 8006e08:	f7ff fec7 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_SBS_INFO],			FLOAT32_T);
 8006e0c:	2107      	movs	r1, #7
 8006e0e:	487e      	ldr	r0, [pc, #504]	; (8007008 <Create_SDOTable_ObjDictionary+0x420>)
 8006e10:	f7ff fec3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_VERIFICATION_MAG],	FLOAT32_T);
 8006e14:	2107      	movs	r1, #7
 8006e16:	487d      	ldr	r0, [pc, #500]	; (800700c <Create_SDOTable_ObjDictionary+0x424>)
 8006e18:	f7ff febf 	bl	8006b9a <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_MODE_IDX],	UINT8_T);
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	487c      	ldr	r0, [pc, #496]	; (8007010 <Create_SDOTable_ObjDictionary+0x428>)
 8006e20:	f7ff febb 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_TMAX],		INT16_T);
 8006e24:	2105      	movs	r1, #5
 8006e26:	487b      	ldr	r0, [pc, #492]	; (8007014 <Create_SDOTable_ObjDictionary+0x42c>)
 8006e28:	f7ff feb7 	bl	8006b9a <Assemble_SDO>



	/*MSG Handler Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_STATE],  	    UINT8_T);
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	487a      	ldr	r0, [pc, #488]	; (8007018 <Create_SDOTable_ObjDictionary+0x430>)
 8006e30:	f7ff feb3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_STATE],  	    UINT8_T);
 8006e34:	2101      	movs	r1, #1
 8006e36:	4879      	ldr	r0, [pc, #484]	; (800701c <Create_SDOTable_ObjDictionary+0x434>)
 8006e38:	f7ff feaf 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_ROUTINE],  		UINT8_T);
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	4878      	ldr	r0, [pc, #480]	; (8007020 <Create_SDOTable_ObjDictionary+0x438>)
 8006e40:	f7ff feab 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_ROUTINE],  		UINT8_T);
 8006e44:	2101      	movs	r1, #1
 8006e46:	4877      	ldr	r0, [pc, #476]	; (8007024 <Create_SDOTable_ObjDictionary+0x43c>)
 8006e48:	f7ff fea7 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_PDO_LIST], 			UINT16_T);
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	4876      	ldr	r0, [pc, #472]	; (8007028 <Create_SDOTable_ObjDictionary+0x440>)
 8006e50:	f7ff fea3 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_MS_ENUM],  			UINT8_T);
 8006e54:	2101      	movs	r1, #1
 8006e56:	4875      	ldr	r0, [pc, #468]	; (800702c <Create_SDOTable_ObjDictionary+0x444>)
 8006e58:	f7ff fe9f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_ONOFF],  	UINT8_T);
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4874      	ldr	r0, [pc, #464]	; (8007030 <Create_SDOTable_ObjDictionary+0x448>)
 8006e60:	f7ff fe9b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_COMMAND],  	UINT8_T);
 8006e64:	2101      	movs	r1, #1
 8006e66:	4873      	ldr	r0, [pc, #460]	; (8007034 <Create_SDOTable_ObjDictionary+0x44c>)
 8006e68:	f7ff fe97 	bl	8006b9a <Assemble_SDO>

	/*IMU Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_STATE],  		UINT8_T);
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4872      	ldr	r0, [pc, #456]	; (8007038 <Create_SDOTable_ObjDictionary+0x450>)
 8006e70:	f7ff fe93 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_STATE],  		UINT8_T);
 8006e74:	2101      	movs	r1, #1
 8006e76:	4871      	ldr	r0, [pc, #452]	; (800703c <Create_SDOTable_ObjDictionary+0x454>)
 8006e78:	f7ff fe8f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_ROUTINE],  	    UINT8_T);
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	4870      	ldr	r0, [pc, #448]	; (8007040 <Create_SDOTable_ObjDictionary+0x458>)
 8006e80:	f7ff fe8b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_ROUTINE],  	    UINT8_T);
 8006e84:	2101      	movs	r1, #1
 8006e86:	486f      	ldr	r0, [pc, #444]	; (8007044 <Create_SDOTable_ObjDictionary+0x45c>)
 8006e88:	f7ff fe87 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_FOR_TEST],  			UINT16_T);
 8006e8c:	2102      	movs	r1, #2
 8006e8e:	486e      	ldr	r0, [pc, #440]	; (8007048 <Create_SDOTable_ObjDictionary+0x460>)
 8006e90:	f7ff fe83 	bl	8006b9a <Assemble_SDO>


	/*SYSMNGT Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_STATE],  	UINT8_T);
 8006e94:	2101      	movs	r1, #1
 8006e96:	486d      	ldr	r0, [pc, #436]	; (800704c <Create_SDOTable_ObjDictionary+0x464>)
 8006e98:	f7ff fe7f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_STATE],  	UINT8_T);
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	486c      	ldr	r0, [pc, #432]	; (8007050 <Create_SDOTable_ObjDictionary+0x468>)
 8006ea0:	f7ff fe7b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_ROUTINE],  	UINT8_T);
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	486b      	ldr	r0, [pc, #428]	; (8007054 <Create_SDOTable_ObjDictionary+0x46c>)
 8006ea8:	f7ff fe77 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_ROUTINE],  	UINT8_T);
 8006eac:	2101      	movs	r1, #1
 8006eae:	486a      	ldr	r0, [pc, #424]	; (8007058 <Create_SDOTable_ObjDictionary+0x470>)
 8006eb0:	f7ff fe73 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_FOR_TEST],  		UINT16_T);
 8006eb4:	2102      	movs	r1, #2
 8006eb6:	4869      	ldr	r0, [pc, #420]	; (800705c <Create_SDOTable_ObjDictionary+0x474>)
 8006eb8:	f7ff fe6f 	bl	8006b9a <Assemble_SDO>


	/*EXTDEV Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_STATE],  		UINT8_T);
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	4868      	ldr	r0, [pc, #416]	; (8007060 <Create_SDOTable_ObjDictionary+0x478>)
 8006ec0:	f7ff fe6b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_STATE],  		UINT8_T);
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	4867      	ldr	r0, [pc, #412]	; (8007064 <Create_SDOTable_ObjDictionary+0x47c>)
 8006ec8:	f7ff fe67 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_ROUTINE],  	UINT8_T);
 8006ecc:	2101      	movs	r1, #1
 8006ece:	4866      	ldr	r0, [pc, #408]	; (8007068 <Create_SDOTable_ObjDictionary+0x480>)
 8006ed0:	f7ff fe63 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_ROUTINE],  	UINT8_T);
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	4865      	ldr	r0, [pc, #404]	; (800706c <Create_SDOTable_ObjDictionary+0x484>)
 8006ed8:	f7ff fe5f 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_LENGTH],  	FLOAT32_T);
 8006edc:	2107      	movs	r1, #7
 8006ede:	4864      	ldr	r0, [pc, #400]	; (8007070 <Create_SDOTable_ObjDictionary+0x488>)
 8006ee0:	f7ff fe5b 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_DIRECT],  	UINT8_T);
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	4863      	ldr	r0, [pc, #396]	; (8007074 <Create_SDOTable_ObjDictionary+0x48c>)
 8006ee8:	f7ff fe57 	bl	8006b9a <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_FOR_TEST],  		INT16_T);
 8006eec:	2105      	movs	r1, #5
 8006eee:	4862      	ldr	r0, [pc, #392]	; (8007078 <Create_SDOTable_ObjDictionary+0x490>)
 8006ef0:	f7ff fe53 	bl	8006b9a <Assemble_SDO>
}
 8006ef4:	bf00      	nop
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	2400028c 	.word	0x2400028c
 8006efc:	2400028d 	.word	0x2400028d
 8006f00:	2400028e 	.word	0x2400028e
 8006f04:	2400028f 	.word	0x2400028f
 8006f08:	24000290 	.word	0x24000290
 8006f0c:	24000291 	.word	0x24000291
 8006f10:	24000292 	.word	0x24000292
 8006f14:	24000293 	.word	0x24000293
 8006f18:	24000294 	.word	0x24000294
 8006f1c:	24000295 	.word	0x24000295
 8006f20:	24000296 	.word	0x24000296
 8006f24:	24000297 	.word	0x24000297
 8006f28:	24000298 	.word	0x24000298
 8006f2c:	24000299 	.word	0x24000299
 8006f30:	2400029a 	.word	0x2400029a
 8006f34:	2400029b 	.word	0x2400029b
 8006f38:	2400029c 	.word	0x2400029c
 8006f3c:	2400029d 	.word	0x2400029d
 8006f40:	2400029e 	.word	0x2400029e
 8006f44:	2400029f 	.word	0x2400029f
 8006f48:	240002a0 	.word	0x240002a0
 8006f4c:	240002a1 	.word	0x240002a1
 8006f50:	240002a2 	.word	0x240002a2
 8006f54:	240002a3 	.word	0x240002a3
 8006f58:	240002a4 	.word	0x240002a4
 8006f5c:	240002a5 	.word	0x240002a5
 8006f60:	240002a6 	.word	0x240002a6
 8006f64:	240002c8 	.word	0x240002c8
 8006f68:	240002c9 	.word	0x240002c9
 8006f6c:	240002ca 	.word	0x240002ca
 8006f70:	240002cb 	.word	0x240002cb
 8006f74:	240002cc 	.word	0x240002cc
 8006f78:	240002cd 	.word	0x240002cd
 8006f7c:	240002ce 	.word	0x240002ce
 8006f80:	240002cf 	.word	0x240002cf
 8006f84:	240002d0 	.word	0x240002d0
 8006f88:	240002d1 	.word	0x240002d1
 8006f8c:	240002d2 	.word	0x240002d2
 8006f90:	240002d4 	.word	0x240002d4
 8006f94:	240002d5 	.word	0x240002d5
 8006f98:	240002d6 	.word	0x240002d6
 8006f9c:	240002d7 	.word	0x240002d7
 8006fa0:	240002d8 	.word	0x240002d8
 8006fa4:	240002d9 	.word	0x240002d9
 8006fa8:	240002da 	.word	0x240002da
 8006fac:	240002db 	.word	0x240002db
 8006fb0:	240002dc 	.word	0x240002dc
 8006fb4:	240002dd 	.word	0x240002dd
 8006fb8:	240002de 	.word	0x240002de
 8006fbc:	240002df 	.word	0x240002df
 8006fc0:	240002e0 	.word	0x240002e0
 8006fc4:	240002e1 	.word	0x240002e1
 8006fc8:	240002e2 	.word	0x240002e2
 8006fcc:	240002e3 	.word	0x240002e3
 8006fd0:	240002e4 	.word	0x240002e4
 8006fd4:	240002e5 	.word	0x240002e5
 8006fd8:	240002e6 	.word	0x240002e6
 8006fdc:	240002e7 	.word	0x240002e7
 8006fe0:	240002e8 	.word	0x240002e8
 8006fe4:	240002e9 	.word	0x240002e9
 8006fe8:	240002ea 	.word	0x240002ea
 8006fec:	240002eb 	.word	0x240002eb
 8006ff0:	240002ec 	.word	0x240002ec
 8006ff4:	240002ed 	.word	0x240002ed
 8006ff8:	240002ee 	.word	0x240002ee
 8006ffc:	240002ef 	.word	0x240002ef
 8007000:	240002f0 	.word	0x240002f0
 8007004:	240002f1 	.word	0x240002f1
 8007008:	240002f2 	.word	0x240002f2
 800700c:	240002f3 	.word	0x240002f3
 8007010:	240002f8 	.word	0x240002f8
 8007014:	240002f9 	.word	0x240002f9
 8007018:	24000304 	.word	0x24000304
 800701c:	24000305 	.word	0x24000305
 8007020:	24000306 	.word	0x24000306
 8007024:	24000307 	.word	0x24000307
 8007028:	24000308 	.word	0x24000308
 800702c:	24000309 	.word	0x24000309
 8007030:	2400030a 	.word	0x2400030a
 8007034:	2400030b 	.word	0x2400030b
 8007038:	24000340 	.word	0x24000340
 800703c:	24000341 	.word	0x24000341
 8007040:	24000342 	.word	0x24000342
 8007044:	24000343 	.word	0x24000343
 8007048:	24000344 	.word	0x24000344
 800704c:	2400037c 	.word	0x2400037c
 8007050:	2400037d 	.word	0x2400037d
 8007054:	2400037e 	.word	0x2400037e
 8007058:	2400037f 	.word	0x2400037f
 800705c:	24000380 	.word	0x24000380
 8007060:	240003b8 	.word	0x240003b8
 8007064:	240003b9 	.word	0x240003b9
 8007068:	240003ba 	.word	0x240003ba
 800706c:	240003bb 	.word	0x240003bb
 8007070:	240003bc 	.word	0x240003bc
 8007074:	240003bd 	.word	0x240003bd
 8007078:	240003be 	.word	0x240003be

0800707c <Create_PDOTable_ObjDictionary>:


void Create_PDOTable_ObjDictionary()
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
	//**************************************************************************************************//
	//							   |	  Task_ID	  |				PDO_ID				| DATA_TYPE | #_of_DATA //
	//**************************************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_CURRENT],  			UINT16_T, 	 	3);
 8007080:	2203      	movs	r2, #3
 8007082:	2102      	movs	r1, #2
 8007084:	48bd      	ldr	r0, [pc, #756]	; (800737c <Create_PDOTable_ObjDictionary+0x300>)
 8007086:	f7ff fd99 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_VOLTAGE],  			UINT16_T,  		3);
 800708a:	2203      	movs	r2, #3
 800708c:	2102      	movs	r1, #2
 800708e:	48bc      	ldr	r0, [pc, #752]	; (8007380 <Create_PDOTable_ObjDictionary+0x304>)
 8007090:	f7ff fd94 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_POSITION],  					FLOAT32_T,  	1);
 8007094:	2201      	movs	r2, #1
 8007096:	2107      	movs	r1, #7
 8007098:	48ba      	ldr	r0, [pc, #744]	; (8007384 <Create_PDOTable_ObjDictionary+0x308>)
 800709a:	f7ff fd8f 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VELOCITY],  					INT32_T,  		2);
 800709e:	2202      	movs	r2, #2
 80070a0:	2106      	movs	r1, #6
 80070a2:	48b9      	ldr	r0, [pc, #740]	; (8007388 <Create_PDOTable_ObjDictionary+0x30c>)
 80070a4:	f7ff fd8a 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CLARKE_OUT],  				INT32_T,  		2);
 80070a8:	2202      	movs	r2, #2
 80070aa:	2106      	movs	r1, #6
 80070ac:	48b7      	ldr	r0, [pc, #732]	; (800738c <Create_PDOTable_ObjDictionary+0x310>)
 80070ae:	f7ff fd85 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PARK_OUT],  					FLOAT32_T,  	3);
 80070b2:	2203      	movs	r2, #3
 80070b4:	2107      	movs	r1, #7
 80070b6:	48b6      	ldr	r0, [pc, #728]	; (8007390 <Create_PDOTable_ObjDictionary+0x314>)
 80070b8:	f7ff fd80 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VOLTAGE_IN],	    			FLOAT32_T,  	3);
 80070bc:	2203      	movs	r2, #3
 80070be:	2107      	movs	r1, #7
 80070c0:	48b4      	ldr	r0, [pc, #720]	; (8007394 <Create_PDOTable_ObjDictionary+0x318>)
 80070c2:	f7ff fd7b 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ELEC_ANGLE],	    			UINT16_T,  		1);
 80070c6:	2201      	movs	r2, #1
 80070c8:	2102      	movs	r1, #2
 80070ca:	48b3      	ldr	r0, [pc, #716]	; (8007398 <Create_PDOTable_ObjDictionary+0x31c>)
 80070cc:	f7ff fd76 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PRBS_DATA],	    			FLOAT32_T, 		2);
 80070d0:	2202      	movs	r2, #2
 80070d2:	2107      	movs	r1, #7
 80070d4:	48b1      	ldr	r0, [pc, #708]	; (800739c <Create_PDOTable_ObjDictionary+0x320>)
 80070d6:	f7ff fd71 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_RAW_CURRENT],	    			INT32_T,  		3);
 80070da:	2203      	movs	r2, #3
 80070dc:	2106      	movs	r1, #6
 80070de:	48b0      	ldr	r0, [pc, #704]	; (80073a0 <Create_PDOTable_ObjDictionary+0x324>)
 80070e0:	f7ff fd6c 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_KF_CURRENT],	    			FLOAT32_T, 		3);
 80070e4:	2203      	movs	r2, #3
 80070e6:	2107      	movs	r1, #7
 80070e8:	48ae      	ldr	r0, [pc, #696]	; (80073a4 <Create_PDOTable_ObjDictionary+0x328>)
 80070ea:	f7ff fd67 	bl	8006bbc <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT],			FLOAT32_T, 		1);
 80070ee:	2201      	movs	r2, #1
 80070f0:	2107      	movs	r1, #7
 80070f2:	48ad      	ldr	r0, [pc, #692]	; (80073a8 <Create_PDOTable_ObjDictionary+0x32c>)
 80070f4:	f7ff fd62 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CURRENT_OUTPUT],  			FLOAT32_T,  	1);
 80070f8:	2201      	movs	r2, #1
 80070fa:	2107      	movs	r1, #7
 80070fc:	48ab      	ldr	r0, [pc, #684]	; (80073ac <Create_PDOTable_ObjDictionary+0x330>)
 80070fe:	f7ff fd5d 	bl	8006bbc <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_AUXILIARY_INPUT],  			FLOAT32_T,  	1);
 8007102:	2201      	movs	r2, #1
 8007104:	2107      	movs	r1, #7
 8007106:	48aa      	ldr	r0, [pc, #680]	; (80073b0 <Create_PDOTable_ObjDictionary+0x334>)
 8007108:	f7ff fd58 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_LOW_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 800710c:	2201      	movs	r2, #1
 800710e:	2107      	movs	r1, #7
 8007110:	48a8      	ldr	r0, [pc, #672]	; (80073b4 <Create_PDOTable_ObjDictionary+0x338>)
 8007112:	f7ff fd53 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_FRICTION_COMPENSATOR_INPUT],  FLOAT32_T,  	1);
 8007116:	2201      	movs	r2, #1
 8007118:	2107      	movs	r1, #7
 800711a:	48a7      	ldr	r0, [pc, #668]	; (80073b8 <Create_PDOTable_ObjDictionary+0x33c>)
 800711c:	f7ff fd4e 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 8007120:	2201      	movs	r2, #1
 8007122:	2107      	movs	r1, #7
 8007124:	48a5      	ldr	r0, [pc, #660]	; (80073bc <Create_PDOTable_ObjDictionary+0x340>)
 8007126:	f7ff fd49 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_IRC_INPUT],					FLOAT32_T, 		1);
 800712a:	2201      	movs	r2, #1
 800712c:	2107      	movs	r1, #7
 800712e:	48a4      	ldr	r0, [pc, #656]	; (80073c0 <Create_PDOTable_ObjDictionary+0x344>)
 8007130:	f7ff fd44 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_CTRL_INPUT],  			FLOAT32_T,  	1);
 8007134:	2201      	movs	r2, #1
 8007136:	2107      	movs	r1, #7
 8007138:	48a2      	ldr	r0, [pc, #648]	; (80073c4 <Create_PDOTable_ObjDictionary+0x348>)
 800713a:	f7ff fd3f 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ANALYZER_INPUT],				FLOAT32_T, 		1);
 800713e:	2201      	movs	r2, #1
 8007140:	2107      	movs	r1, #7
 8007142:	48a1      	ldr	r0, [pc, #644]	; (80073c8 <Create_PDOTable_ObjDictionary+0x34c>)
 8007144:	f7ff fd3a 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_COMMUTATION_STEP],			UINT8_T, 		1);
 8007148:	2201      	movs	r2, #1
 800714a:	2101      	movs	r1, #1
 800714c:	489f      	ldr	r0, [pc, #636]	; (80073cc <Create_PDOTable_ObjDictionary+0x350>)
 800714e:	f7ff fd35 	bl	8006bbc <Assemble_PDO>


	/*Joint Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_LOOP_CNT],			UINT32_T, 		1);
 8007152:	2201      	movs	r2, #1
 8007154:	2103      	movs	r1, #3
 8007156:	489e      	ldr	r0, [pc, #632]	; (80073d0 <Create_PDOTable_ObjDictionary+0x354>)
 8007158:	f7ff fd30 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_POSITION],  		FLOAT32_T,  	1);
 800715c:	2201      	movs	r2, #1
 800715e:	2107      	movs	r1, #7
 8007160:	489c      	ldr	r0, [pc, #624]	; (80073d4 <Create_PDOTable_ObjDictionary+0x358>)
 8007162:	f7ff fd2b 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_VELOCITY],  		FLOAT32_T,  	1);
 8007166:	2201      	movs	r2, #1
 8007168:	2107      	movs	r1, #7
 800716a:	489b      	ldr	r0, [pc, #620]	; (80073d8 <Create_PDOTable_ObjDictionary+0x35c>)
 800716c:	f7ff fd26 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_POSITION], 	FLOAT32_T, 		1);
 8007170:	2201      	movs	r2, #1
 8007172:	2107      	movs	r1, #7
 8007174:	4899      	ldr	r0, [pc, #612]	; (80073dc <Create_PDOTable_ObjDictionary+0x360>)
 8007176:	f7ff fd21 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_VELOCITY_RAW], FLOAT32_T,  	1);
 800717a:	2201      	movs	r2, #1
 800717c:	2107      	movs	r1, #7
 800717e:	4898      	ldr	r0, [pc, #608]	; (80073e0 <Create_PDOTable_ObjDictionary+0x364>)
 8007180:	f7ff fd1c 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_SYSTEM_ID_SBS_FREQ],	FLOAT32_T, 		1);
 8007184:	2201      	movs	r2, #1
 8007186:	2107      	movs	r1, #7
 8007188:	4896      	ldr	r0, [pc, #600]	; (80073e4 <Create_PDOTable_ObjDictionary+0x368>)
 800718a:	f7ff fd17 	bl	8006bbc <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_IMP_INPUT], 					FLOAT32_T,  	1);
 800718e:	2201      	movs	r2, #1
 8007190:	2107      	movs	r1, #7
 8007192:	4895      	ldr	r0, [pc, #596]	; (80073e8 <Create_PDOTable_ObjDictionary+0x36c>)
 8007194:	f7ff fd12 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_POS_PID_CTRL_INPUT], 			FLOAT32_T,  	1);
 8007198:	2201      	movs	r2, #1
 800719a:	2107      	movs	r1, #7
 800719c:	4893      	ldr	r0, [pc, #588]	; (80073ec <Create_PDOTable_ObjDictionary+0x370>)
 800719e:	f7ff fd0d 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VEL_PID_CTRL_INPUT],			FLOAT32_T, 		1);
 80071a2:	2201      	movs	r2, #1
 80071a4:	2107      	movs	r1, #7
 80071a6:	4892      	ldr	r0, [pc, #584]	; (80073f0 <Create_PDOTable_ObjDictionary+0x374>)
 80071a8:	f7ff fd08 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VSD_INPUT],					FLOAT32_T, 		1);
 80071ac:	2201      	movs	r2, #1
 80071ae:	2107      	movs	r1, #7
 80071b0:	4890      	ldr	r0, [pc, #576]	; (80073f4 <Create_PDOTable_ObjDictionary+0x378>)
 80071b2:	f7ff fd03 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_UNIT_TRAJECTORY_BUFF_COUNT],	FLOAT32_T, 		1);
 80071b6:	2201      	movs	r2, #1
 80071b8:	2107      	movs	r1, #7
 80071ba:	488f      	ldr	r0, [pc, #572]	; (80073f8 <Create_PDOTable_ObjDictionary+0x37c>)
 80071bc:	f7ff fcfe 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_TORQUE_TRAJECTORY_INPUT],		FLOAT32_T, 		1);
 80071c0:	2201      	movs	r2, #1
 80071c2:	2107      	movs	r1, #7
 80071c4:	488d      	ldr	r0, [pc, #564]	; (80073fc <Create_PDOTable_ObjDictionary+0x380>)
 80071c6:	f7ff fcf9 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ABS_POSITION],				FLOAT32_T, 		1);
 80071ca:	2201      	movs	r2, #1
 80071cc:	2107      	movs	r1, #7
 80071ce:	488c      	ldr	r0, [pc, #560]	; (8007400 <Create_PDOTable_ObjDictionary+0x384>)
 80071d0:	f7ff fcf4 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_DISTURABNCE],				FLOAT32_T, 		1);
 80071d4:	2201      	movs	r2, #1
 80071d6:	2107      	movs	r1, #7
 80071d8:	488a      	ldr	r0, [pc, #552]	; (8007404 <Create_PDOTable_ObjDictionary+0x388>)
 80071da:	f7ff fcef 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_INPUT],					FLOAT32_T, 		1);
 80071de:	2201      	movs	r2, #1
 80071e0:	2107      	movs	r1, #7
 80071e2:	4889      	ldr	r0, [pc, #548]	; (8007408 <Create_PDOTable_ObjDictionary+0x38c>)
 80071e4:	f7ff fcea 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_FF_INPUT],					FLOAT32_T, 		1);
 80071e8:	2201      	movs	r2, #1
 80071ea:	2107      	movs	r1, #7
 80071ec:	4887      	ldr	r0, [pc, #540]	; (800740c <Create_PDOTable_ObjDictionary+0x390>)
 80071ee:	f7ff fce5 	bl	8006bbc <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VELOCITY_ESTIMATED],			FLOAT32_T, 		1);
 80071f2:	2201      	movs	r2, #1
 80071f4:	2107      	movs	r1, #7
 80071f6:	4886      	ldr	r0, [pc, #536]	; (8007410 <Create_PDOTable_ObjDictionary+0x394>)
 80071f8:	f7ff fce0 	bl	8006bbc <Assemble_PDO>



	/*COMM Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST1],  			INT32_T,  	1);
 80071fc:	2201      	movs	r2, #1
 80071fe:	2106      	movs	r1, #6
 8007200:	4884      	ldr	r0, [pc, #528]	; (8007414 <Create_PDOTable_ObjDictionary+0x398>)
 8007202:	f7ff fcdb 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST2],  			INT32_T,  	1);
 8007206:	2201      	movs	r2, #1
 8007208:	2106      	movs	r1, #6
 800720a:	4883      	ldr	r0, [pc, #524]	; (8007418 <Create_PDOTable_ObjDictionary+0x39c>)
 800720c:	f7ff fcd6 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST3],  			INT32_T,  	1);
 8007210:	2201      	movs	r2, #1
 8007212:	2106      	movs	r1, #6
 8007214:	4881      	ldr	r0, [pc, #516]	; (800741c <Create_PDOTable_ObjDictionary+0x3a0>)
 8007216:	f7ff fcd1 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST4],  			INT32_T,  	1);
 800721a:	2201      	movs	r2, #1
 800721c:	2106      	movs	r1, #6
 800721e:	4880      	ldr	r0, [pc, #512]	; (8007420 <Create_PDOTable_ObjDictionary+0x3a4>)
 8007220:	f7ff fccc 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST5],  			INT32_T,  	1);
 8007224:	2201      	movs	r2, #1
 8007226:	2106      	movs	r1, #6
 8007228:	487e      	ldr	r0, [pc, #504]	; (8007424 <Create_PDOTable_ObjDictionary+0x3a8>)
 800722a:	f7ff fcc7 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST6],  			INT32_T,  	1);
 800722e:	2201      	movs	r2, #1
 8007230:	2106      	movs	r1, #6
 8007232:	487d      	ldr	r0, [pc, #500]	; (8007428 <Create_PDOTable_ObjDictionary+0x3ac>)
 8007234:	f7ff fcc2 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST7],  			INT32_T,  	1);
 8007238:	2201      	movs	r2, #1
 800723a:	2106      	movs	r1, #6
 800723c:	487b      	ldr	r0, [pc, #492]	; (800742c <Create_PDOTable_ObjDictionary+0x3b0>)
 800723e:	f7ff fcbd 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST8],  			INT32_T,  	1);
 8007242:	2201      	movs	r2, #1
 8007244:	2106      	movs	r1, #6
 8007246:	487a      	ldr	r0, [pc, #488]	; (8007430 <Create_PDOTable_ObjDictionary+0x3b4>)
 8007248:	f7ff fcb8 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST9],  			INT32_T,  	1);
 800724c:	2201      	movs	r2, #1
 800724e:	2106      	movs	r1, #6
 8007250:	4878      	ldr	r0, [pc, #480]	; (8007434 <Create_PDOTable_ObjDictionary+0x3b8>)
 8007252:	f7ff fcb3 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST10],  			INT32_T,  	1);
 8007256:	2201      	movs	r2, #1
 8007258:	2106      	movs	r1, #6
 800725a:	4877      	ldr	r0, [pc, #476]	; (8007438 <Create_PDOTable_ObjDictionary+0x3bc>)
 800725c:	f7ff fcae 	bl	8006bbc <Assemble_PDO>

	/*IMU Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_X],  			FLOAT32_T,  	1);
 8007260:	2201      	movs	r2, #1
 8007262:	2107      	movs	r1, #7
 8007264:	4875      	ldr	r0, [pc, #468]	; (800743c <Create_PDOTable_ObjDictionary+0x3c0>)
 8007266:	f7ff fca9 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Y],  			FLOAT32_T,  	1);
 800726a:	2201      	movs	r2, #1
 800726c:	2107      	movs	r1, #7
 800726e:	4874      	ldr	r0, [pc, #464]	; (8007440 <Create_PDOTable_ObjDictionary+0x3c4>)
 8007270:	f7ff fca4 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Z],  			FLOAT32_T,  	1);
 8007274:	2201      	movs	r2, #1
 8007276:	2107      	movs	r1, #7
 8007278:	4872      	ldr	r0, [pc, #456]	; (8007444 <Create_PDOTable_ObjDictionary+0x3c8>)
 800727a:	f7ff fc9f 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_X],  			FLOAT32_T,  	1);
 800727e:	2201      	movs	r2, #1
 8007280:	2107      	movs	r1, #7
 8007282:	4871      	ldr	r0, [pc, #452]	; (8007448 <Create_PDOTable_ObjDictionary+0x3cc>)
 8007284:	f7ff fc9a 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Y],  			FLOAT32_T,  	1);
 8007288:	2201      	movs	r2, #1
 800728a:	2107      	movs	r1, #7
 800728c:	486f      	ldr	r0, [pc, #444]	; (800744c <Create_PDOTable_ObjDictionary+0x3d0>)
 800728e:	f7ff fc95 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Z],  			FLOAT32_T,  	1);
 8007292:	2201      	movs	r2, #1
 8007294:	2107      	movs	r1, #7
 8007296:	486e      	ldr	r0, [pc, #440]	; (8007450 <Create_PDOTable_ObjDictionary+0x3d4>)
 8007298:	f7ff fc90 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_WALKING_STATE],  	FLOAT32_T,  	1);
 800729c:	2201      	movs	r2, #1
 800729e:	2107      	movs	r1, #7
 80072a0:	486c      	ldr	r0, [pc, #432]	; (8007454 <Create_PDOTable_ObjDictionary+0x3d8>)
 80072a2:	f7ff fc8b 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GAIT_PHASE],  		FLOAT32_T,  	1);
 80072a6:	2201      	movs	r2, #1
 80072a8:	2107      	movs	r1, #7
 80072aa:	486b      	ldr	r0, [pc, #428]	; (8007458 <Create_PDOTable_ObjDictionary+0x3dc>)
 80072ac:	f7ff fc86 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_X],  			FLOAT32_T,  	1);
 80072b0:	2201      	movs	r2, #1
 80072b2:	2107      	movs	r1, #7
 80072b4:	4869      	ldr	r0, [pc, #420]	; (800745c <Create_PDOTable_ObjDictionary+0x3e0>)
 80072b6:	f7ff fc81 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Y],  			FLOAT32_T,  	1);
 80072ba:	2201      	movs	r2, #1
 80072bc:	2107      	movs	r1, #7
 80072be:	4868      	ldr	r0, [pc, #416]	; (8007460 <Create_PDOTable_ObjDictionary+0x3e4>)
 80072c0:	f7ff fc7c 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Z],  			FLOAT32_T,  	1);
 80072c4:	2201      	movs	r2, #1
 80072c6:	2107      	movs	r1, #7
 80072c8:	4866      	ldr	r0, [pc, #408]	; (8007464 <Create_PDOTable_ObjDictionary+0x3e8>)
 80072ca:	f7ff fc77 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_P],  		FLOAT32_T,  	1);
 80072ce:	2201      	movs	r2, #1
 80072d0:	2107      	movs	r1, #7
 80072d2:	4865      	ldr	r0, [pc, #404]	; (8007468 <Create_PDOTable_ObjDictionary+0x3ec>)
 80072d4:	f7ff fc72 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_D],  		FLOAT32_T,  	1);
 80072d8:	2201      	movs	r2, #1
 80072da:	2107      	movs	r1, #7
 80072dc:	4863      	ldr	r0, [pc, #396]	; (800746c <Create_PDOTable_ObjDictionary+0x3f0>)
 80072de:	f7ff fc6d 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC],  		FLOAT32_T,  	1);
 80072e2:	2201      	movs	r2, #1
 80072e4:	2107      	movs	r1, #7
 80072e6:	4862      	ldr	r0, [pc, #392]	; (8007470 <Create_PDOTable_ObjDictionary+0x3f4>)
 80072e8:	f7ff fc68 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR],  		FLOAT32_T,  	1);
 80072ec:	2201      	movs	r2, #1
 80072ee:	2107      	movs	r1, #7
 80072f0:	4860      	ldr	r0, [pc, #384]	; (8007474 <Create_PDOTable_ObjDictionary+0x3f8>)
 80072f2:	f7ff fc63 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC_FILTERED], FLOAT32_T,  	1);
 80072f6:	2201      	movs	r2, #1
 80072f8:	2107      	movs	r1, #7
 80072fa:	485f      	ldr	r0, [pc, #380]	; (8007478 <Create_PDOTable_ObjDictionary+0x3fc>)
 80072fc:	f7ff fc5e 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR_FILTERED], FLOAT32_T,  	1);
 8007300:	2201      	movs	r2, #1
 8007302:	2107      	movs	r1, #7
 8007304:	485d      	ldr	r0, [pc, #372]	; (800747c <Create_PDOTable_ObjDictionary+0x400>)
 8007306:	f7ff fc59 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_DEG_TVCF],  			FLOAT32_T,  	1);
 800730a:	2201      	movs	r2, #1
 800730c:	2107      	movs	r1, #7
 800730e:	485c      	ldr	r0, [pc, #368]	; (8007480 <Create_PDOTable_ObjDictionary+0x404>)
 8007310:	f7ff fc54 	bl	8006bbc <Assemble_PDO>


	/*SYSMNGT Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_VOLT],  			FLOAT32_T,  	1);
 8007314:	2201      	movs	r2, #1
 8007316:	2107      	movs	r1, #7
 8007318:	485a      	ldr	r0, [pc, #360]	; (8007484 <Create_PDOTable_ObjDictionary+0x408>)
 800731a:	f7ff fc4f 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_CURR],  			FLOAT32_T,  	1);
 800731e:	2201      	movs	r2, #1
 8007320:	2107      	movs	r1, #7
 8007322:	4859      	ldr	r0, [pc, #356]	; (8007488 <Create_PDOTable_ObjDictionary+0x40c>)
 8007324:	f7ff fc4a 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_TEMP],  			FLOAT32_T,  	1);
 8007328:	2201      	movs	r2, #1
 800732a:	2107      	movs	r1, #7
 800732c:	4857      	ldr	r0, [pc, #348]	; (800748c <Create_PDOTable_ObjDictionary+0x410>)
 800732e:	f7ff fc45 	bl	8006bbc <Assemble_PDO>

	/*EXTDEV Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_FSR],  				FLOAT32_T,  	1);
 8007332:	2201      	movs	r2, #1
 8007334:	2107      	movs	r1, #7
 8007336:	4856      	ldr	r0, [pc, #344]	; (8007490 <Create_PDOTable_ObjDictionary+0x414>)
 8007338:	f7ff fc40 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_LP],  				FLOAT32_T,  	1);
 800733c:	2201      	movs	r2, #1
 800733e:	2107      	movs	r1, #7
 8007340:	4854      	ldr	r0, [pc, #336]	; (8007494 <Create_PDOTable_ObjDictionary+0x418>)
 8007342:	f7ff fc3b 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_REF],  	FLOAT32_T,  	1);
 8007346:	2201      	movs	r2, #1
 8007348:	2107      	movs	r1, #7
 800734a:	4853      	ldr	r0, [pc, #332]	; (8007498 <Create_PDOTable_ObjDictionary+0x41c>)
 800734c:	f7ff fc36 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_CMD],  	UINT8_T,  		1);
 8007350:	2201      	movs	r2, #1
 8007352:	2101      	movs	r1, #1
 8007354:	4851      	ldr	r0, [pc, #324]	; (800749c <Create_PDOTable_ObjDictionary+0x420>)
 8007356:	f7ff fc31 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_ACT],  	FLOAT32_T,  	1);
 800735a:	2201      	movs	r2, #1
 800735c:	2107      	movs	r1, #7
 800735e:	4850      	ldr	r0, [pc, #320]	; (80074a0 <Create_PDOTable_ObjDictionary+0x424>)
 8007360:	f7ff fc2c 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_ACT],  	UINT8_T,  		1);
 8007364:	2201      	movs	r2, #1
 8007366:	2101      	movs	r1, #1
 8007368:	484e      	ldr	r0, [pc, #312]	; (80074a4 <Create_PDOTable_ObjDictionary+0x428>)
 800736a:	f7ff fc27 	bl	8006bbc <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_BUTTON_STATE],  	UINT8_T,  		1);
 800736e:	2201      	movs	r2, #1
 8007370:	2101      	movs	r1, #1
 8007372:	484d      	ldr	r0, [pc, #308]	; (80074a8 <Create_PDOTable_ObjDictionary+0x42c>)
 8007374:	f7ff fc22 	bl	8006bbc <Assemble_PDO>
}
 8007378:	bf00      	nop
 800737a:	bd80      	pop	{r7, pc}
 800737c:	240003f4 	.word	0x240003f4
 8007380:	240003f6 	.word	0x240003f6
 8007384:	240003f8 	.word	0x240003f8
 8007388:	240003fa 	.word	0x240003fa
 800738c:	240003fc 	.word	0x240003fc
 8007390:	240003fe 	.word	0x240003fe
 8007394:	24000400 	.word	0x24000400
 8007398:	24000402 	.word	0x24000402
 800739c:	24000404 	.word	0x24000404
 80073a0:	24000406 	.word	0x24000406
 80073a4:	24000408 	.word	0x24000408
 80073a8:	2400040a 	.word	0x2400040a
 80073ac:	2400040c 	.word	0x2400040c
 80073b0:	2400040e 	.word	0x2400040e
 80073b4:	24000410 	.word	0x24000410
 80073b8:	24000412 	.word	0x24000412
 80073bc:	24000414 	.word	0x24000414
 80073c0:	24000416 	.word	0x24000416
 80073c4:	24000418 	.word	0x24000418
 80073c8:	2400041a 	.word	0x2400041a
 80073cc:	2400041c 	.word	0x2400041c
 80073d0:	24000430 	.word	0x24000430
 80073d4:	24000432 	.word	0x24000432
 80073d8:	24000434 	.word	0x24000434
 80073dc:	24000436 	.word	0x24000436
 80073e0:	24000438 	.word	0x24000438
 80073e4:	2400043a 	.word	0x2400043a
 80073e8:	2400043c 	.word	0x2400043c
 80073ec:	2400043e 	.word	0x2400043e
 80073f0:	24000440 	.word	0x24000440
 80073f4:	24000442 	.word	0x24000442
 80073f8:	24000444 	.word	0x24000444
 80073fc:	24000446 	.word	0x24000446
 8007400:	24000448 	.word	0x24000448
 8007404:	2400044a 	.word	0x2400044a
 8007408:	2400044c 	.word	0x2400044c
 800740c:	2400044e 	.word	0x2400044e
 8007410:	24000450 	.word	0x24000450
 8007414:	2400046c 	.word	0x2400046c
 8007418:	2400046e 	.word	0x2400046e
 800741c:	24000470 	.word	0x24000470
 8007420:	24000472 	.word	0x24000472
 8007424:	24000474 	.word	0x24000474
 8007428:	24000476 	.word	0x24000476
 800742c:	24000478 	.word	0x24000478
 8007430:	2400047a 	.word	0x2400047a
 8007434:	2400047c 	.word	0x2400047c
 8007438:	2400047e 	.word	0x2400047e
 800743c:	240004a8 	.word	0x240004a8
 8007440:	240004aa 	.word	0x240004aa
 8007444:	240004ac 	.word	0x240004ac
 8007448:	240004ae 	.word	0x240004ae
 800744c:	240004b0 	.word	0x240004b0
 8007450:	240004b2 	.word	0x240004b2
 8007454:	240004b4 	.word	0x240004b4
 8007458:	240004b6 	.word	0x240004b6
 800745c:	240004b8 	.word	0x240004b8
 8007460:	240004ba 	.word	0x240004ba
 8007464:	240004bc 	.word	0x240004bc
 8007468:	240004be 	.word	0x240004be
 800746c:	240004c0 	.word	0x240004c0
 8007470:	240004c2 	.word	0x240004c2
 8007474:	240004c4 	.word	0x240004c4
 8007478:	240004c6 	.word	0x240004c6
 800747c:	240004c8 	.word	0x240004c8
 8007480:	240004ca 	.word	0x240004ca
 8007484:	240004e4 	.word	0x240004e4
 8007488:	240004e6 	.word	0x240004e6
 800748c:	240004e8 	.word	0x240004e8
 8007490:	24000520 	.word	0x24000520
 8007494:	24000522 	.word	0x24000522
 8007498:	24000524 	.word	0x24000524
 800749c:	24000526 	.word	0x24000526
 80074a0:	24000528 	.word	0x24000528
 80074a4:	2400052a 	.word	0x2400052a
 80074a8:	2400052c 	.word	0x2400052c

080074ac <Initialize_ICM>:
#include "bsp_icm20608G.h"

//I2C_HandleTypeDef hi2c1;

void Initialize_ICM(ICMObject* t_icm_obj)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	memset(t_icm_obj, 0, sizeof(ICMObject));
 80074b4:	2220      	movs	r2, #32
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f004 f8d6 	bl	800b66a <memset>
	t_icm_obj->i2cport = &hi2c1;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a04      	ldr	r2, [pc, #16]	; (80074d4 <Initialize_ICM+0x28>)
 80074c2:	601a      	str	r2, [r3, #0]
	t_icm_obj->addr    = ICM20608G_DEV_ADDR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	22d2      	movs	r2, #210	; 0xd2
 80074c8:	809a      	strh	r2, [r3, #4]
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	24000144 	.word	0x24000144

080074d8 <IsDevReady_ICM>:

uint8_t IsDevReady_ICM(ICMObject* t_icm_obj)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	uint8_t t_res = HAL_I2C_IsDeviceReady(t_icm_obj->i2cport, t_icm_obj->addr, ICM_I2C_TRIALS, ICM_I2C_TIMEOUT);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8899      	ldrh	r1, [r3, #4]
 80074e8:	2305      	movs	r3, #5
 80074ea:	220a      	movs	r2, #10
 80074ec:	f7fb fdde 	bl	80030ac <HAL_I2C_IsDeviceReady>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
	return t_res;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <Read_Data_ICM>:
	return t_res;
}


uint8_t Read_Data_ICM(ICMObject* t_icm_obj)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08e      	sub	sp, #56	; 0x38
 8007504:	af04      	add	r7, sp, #16
 8007506:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t t_buff[14];
	t_res = HAL_I2C_Mem_Read(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, t_buff, 14, ICM_I2C_TIMEOUT);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	8899      	ldrh	r1, [r3, #4]
 8007516:	2305      	movs	r3, #5
 8007518:	9302      	str	r3, [sp, #8]
 800751a:	230e      	movs	r3, #14
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	f107 030c 	add.w	r3, r7, #12
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	2301      	movs	r3, #1
 8007526:	223b      	movs	r2, #59	; 0x3b
 8007528:	f7fb fca6 	bl	8002e78 <HAL_I2C_Mem_Read>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t t_Xacc = (int16_t)(t_buff[0]  << 8 | t_buff[1]);
 8007532:	7b3b      	ldrb	r3, [r7, #12]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	b21a      	sxth	r2, r3
 8007538:	7b7b      	ldrb	r3, [r7, #13]
 800753a:	b21b      	sxth	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t t_Yacc = (int16_t)(t_buff[2]  << 8 | t_buff[3]);
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	b21a      	sxth	r2, r3
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	b21b      	sxth	r3, r3
 800754a:	4313      	orrs	r3, r2
 800754c:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t t_Zacc = (int16_t)(t_buff[4]  << 8 | t_buff[5]);
 800754e:	7c3b      	ldrb	r3, [r7, #16]
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	b21a      	sxth	r2, r3
 8007554:	7c7b      	ldrb	r3, [r7, #17]
 8007556:	b21b      	sxth	r3, r3
 8007558:	4313      	orrs	r3, r2
 800755a:	843b      	strh	r3, [r7, #32]
	int16_t t_Xgyr = (int16_t)(t_buff[8]  << 8 | t_buff[9]);
 800755c:	7d3b      	ldrb	r3, [r7, #20]
 800755e:	021b      	lsls	r3, r3, #8
 8007560:	b21a      	sxth	r2, r3
 8007562:	7d7b      	ldrb	r3, [r7, #21]
 8007564:	b21b      	sxth	r3, r3
 8007566:	4313      	orrs	r3, r2
 8007568:	83fb      	strh	r3, [r7, #30]
	int16_t t_Ygyr = (int16_t)(t_buff[10] << 8 | t_buff[11]);
 800756a:	7dbb      	ldrb	r3, [r7, #22]
 800756c:	021b      	lsls	r3, r3, #8
 800756e:	b21a      	sxth	r2, r3
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	b21b      	sxth	r3, r3
 8007574:	4313      	orrs	r3, r2
 8007576:	83bb      	strh	r3, [r7, #28]
	int16_t t_Zgyr = (int16_t)(t_buff[12] << 8 | t_buff[13]);
 8007578:	7e3b      	ldrb	r3, [r7, #24]
 800757a:	021b      	lsls	r3, r3, #8
 800757c:	b21a      	sxth	r2, r3
 800757e:	7e7b      	ldrb	r3, [r7, #25]
 8007580:	b21b      	sxth	r3, r3
 8007582:	4313      	orrs	r3, r2
 8007584:	837b      	strh	r3, [r7, #26]

	/* NEED TO BE SCALED */
	t_icm_obj->acc_x = (float)(t_Xacc / 8192.0f);
 8007586:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007592:	eddf 6a27 	vldr	s13, [pc, #156]	; 8007630 <Read_Data_ICM+0x130>
 8007596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	edc3 7a02 	vstr	s15, [r3, #8]
	t_icm_obj->acc_y = (float)(t_Yacc / 8192.0f);
 80075a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80075a4:	ee07 3a90 	vmov	s15, r3
 80075a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075ac:	eddf 6a20 	vldr	s13, [pc, #128]	; 8007630 <Read_Data_ICM+0x130>
 80075b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	edc3 7a03 	vstr	s15, [r3, #12]
	t_icm_obj->acc_z = (float)(t_Zacc / 8192.0f);
 80075ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075c6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8007630 <Read_Data_ICM+0x130>
 80075ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	edc3 7a04 	vstr	s15, [r3, #16]
	t_icm_obj->gyr_x = (float)(t_Xgyr / 65.5f); //65.5f
 80075d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80075d8:	ee07 3a90 	vmov	s15, r3
 80075dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075e0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8007634 <Read_Data_ICM+0x134>
 80075e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	edc3 7a05 	vstr	s15, [r3, #20]
	t_icm_obj->gyr_y = (float)(t_Ygyr / 65.5f);
 80075ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075fa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8007634 <Read_Data_ICM+0x134>
 80075fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	edc3 7a06 	vstr	s15, [r3, #24]
	t_icm_obj->gyr_z = (float)(t_Zgyr / 65.5f);
 8007608:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007614:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007634 <Read_Data_ICM+0x134>
 8007618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	edc3 7a07 	vstr	s15, [r3, #28]

	return t_res;
 8007622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007626:	4618      	mov	r0, r3
 8007628:	3728      	adds	r7, #40	; 0x28
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	46000000 	.word	0x46000000
 8007634:	42830000 	.word	0x42830000

08007638 <Write_Data_ICM>:


uint8_t Write_Data_ICM(ICMObject* t_icm_obj)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af04      	add	r7, sp, #16
 800763e:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]

    uint8_t conf_1 = ICM20608G_PWR_MGMT_1_ONE;
 8007644:	2300      	movs	r3, #0
 8007646:	73bb      	strb	r3, [r7, #14]
    t_res = HAL_I2C_Mem_Write(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &conf_1, ICM20608G_CONTROL_SIZE, ICM_I2C_TIMEOUT);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8899      	ldrh	r1, [r3, #4]
 8007650:	2305      	movs	r3, #5
 8007652:	9302      	str	r3, [sp, #8]
 8007654:	2301      	movs	r3, #1
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	f107 030e 	add.w	r3, r7, #14
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	2301      	movs	r3, #1
 8007660:	226b      	movs	r2, #107	; 0x6b
 8007662:	f7fb faf5 	bl	8002c50 <HAL_I2C_Mem_Write>
 8007666:	4603      	mov	r3, r0
 8007668:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_2 = ICM20608G_PWR_MGMT_2_ONE;
 800766a:	2300      	movs	r3, #0
 800766c:	737b      	strb	r3, [r7, #13]
    t_res = HAL_I2C_Mem_Write(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_PWR_MGMT_2, I2C_MEMADD_SIZE_8BIT, &conf_2, ICM20608G_CONTROL_SIZE, ICM_I2C_TIMEOUT);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6818      	ldr	r0, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	8899      	ldrh	r1, [r3, #4]
 8007676:	2305      	movs	r3, #5
 8007678:	9302      	str	r3, [sp, #8]
 800767a:	2301      	movs	r3, #1
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	f107 030d 	add.w	r3, r7, #13
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	2301      	movs	r3, #1
 8007686:	226c      	movs	r2, #108	; 0x6c
 8007688:	f7fb fae2 	bl	8002c50 <HAL_I2C_Mem_Write>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_3 = ICM20608G_GYR_CONFIG_ONE;
 8007690:	2308      	movs	r3, #8
 8007692:	733b      	strb	r3, [r7, #12]
    t_res = HAL_I2C_Mem_Write(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &conf_3, ICM20608G_CONTROL_SIZE, ICM_I2C_TIMEOUT);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8899      	ldrh	r1, [r3, #4]
 800769c:	2305      	movs	r3, #5
 800769e:	9302      	str	r3, [sp, #8]
 80076a0:	2301      	movs	r3, #1
 80076a2:	9301      	str	r3, [sp, #4]
 80076a4:	f107 030c 	add.w	r3, r7, #12
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	2301      	movs	r3, #1
 80076ac:	221b      	movs	r2, #27
 80076ae:	f7fb facf 	bl	8002c50 <HAL_I2C_Mem_Write>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
    uint8_t conf_4 = ICM20608G_ACC_CONFIG_ONE;
 80076b6:	2308      	movs	r3, #8
 80076b8:	72fb      	strb	r3, [r7, #11]
    t_res = HAL_I2C_Mem_Write(t_icm_obj->i2cport, t_icm_obj->addr, ICM20608G_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &conf_4, ICM20608G_CONTROL_SIZE, ICM_I2C_TIMEOUT);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	8899      	ldrh	r1, [r3, #4]
 80076c2:	2305      	movs	r3, #5
 80076c4:	9302      	str	r3, [sp, #8]
 80076c6:	2301      	movs	r3, #1
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	f107 030b 	add.w	r3, r7, #11
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	2301      	movs	r3, #1
 80076d2:	221c      	movs	r2, #28
 80076d4:	f7fb fabc 	bl	8002c50 <HAL_I2C_Mem_Write>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]

    return t_res;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <Init_IOIF_Fdcan>:

uint8_t RxData1[64];
uint8_t RxData2[64];

void Init_IOIF_Fdcan(uint32_t t_Mask, uint32_t t_FilterID1, uint32_t t_FilterID2)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
	fdcan1_obj.hfdcan = &hfdcan1;
 80076f4:	4b42      	ldr	r3, [pc, #264]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 80076f6:	4a43      	ldr	r2, [pc, #268]	; (8007804 <Init_IOIF_Fdcan+0x11c>)
 80076f8:	601a      	str	r2, [r3, #0]
	fdcan1_obj.mask_window = t_Mask;
 80076fa:	4a41      	ldr	r2, [pc, #260]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6713      	str	r3, [r2, #112]	; 0x70
	fdcan1_obj.filter1 = t_FilterID1;
 8007700:	4a3f      	ldr	r2, [pc, #252]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6753      	str	r3, [r2, #116]	; 0x74
	fdcan1_obj.filter2 = t_FilterID2;
 8007706:	4a3e      	ldr	r2, [pc, #248]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6793      	str	r3, [r2, #120]	; 0x78

	fdcan1_obj.sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800770c:	4b3c      	ldr	r3, [pc, #240]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 800770e:	2200      	movs	r2, #0
 8007710:	605a      	str	r2, [r3, #4]
	fdcan1_obj.sFilterConfig.FilterIndex = 0;
 8007712:	4b3b      	ldr	r3, [pc, #236]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007714:	2200      	movs	r2, #0
 8007716:	609a      	str	r2, [r3, #8]
	fdcan1_obj.sFilterConfig.FilterType = FDCAN_FILTER_RANGE; //FDCAN_FILTER_RANGE;
 8007718:	4b39      	ldr	r3, [pc, #228]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 800771a:	2200      	movs	r2, #0
 800771c:	60da      	str	r2, [r3, #12]
	fdcan1_obj.sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800771e:	4b38      	ldr	r3, [pc, #224]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007720:	2201      	movs	r2, #1
 8007722:	611a      	str	r2, [r3, #16]
	fdcan1_obj.sFilterConfig.FilterID1 = 0x000;	// Filter ID1
 8007724:	4b36      	ldr	r3, [pc, #216]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007726:	2200      	movs	r2, #0
 8007728:	615a      	str	r2, [r3, #20]
	fdcan1_obj.sFilterConfig.FilterID2 = 0x7FF;	// Filter ID2
 800772a:	4b35      	ldr	r3, [pc, #212]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 800772c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007730:	619a      	str	r2, [r3, #24]

	fdcan1_obj.TxHeader.IdType = FDCAN_STANDARD_ID;
 8007732:	4b33      	ldr	r3, [pc, #204]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007734:	2200      	movs	r2, #0
 8007736:	629a      	str	r2, [r3, #40]	; 0x28
	fdcan1_obj.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8007738:	4b31      	ldr	r3, [pc, #196]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 800773a:	2200      	movs	r2, #0
 800773c:	62da      	str	r2, [r3, #44]	; 0x2c
	fdcan1_obj.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800773e:	4b30      	ldr	r3, [pc, #192]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007740:	2200      	movs	r2, #0
 8007742:	635a      	str	r2, [r3, #52]	; 0x34
	fdcan1_obj.TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8007744:	4b2e      	ldr	r3, [pc, #184]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007746:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800774a:	639a      	str	r2, [r3, #56]	; 0x38
	fdcan1_obj.TxHeader.FDFormat = FDCAN_FD_CAN;
 800774c:	4b2c      	ldr	r3, [pc, #176]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 800774e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007752:	63da      	str	r2, [r3, #60]	; 0x3c
	fdcan1_obj.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007754:	4b2a      	ldr	r3, [pc, #168]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007756:	2200      	movs	r2, #0
 8007758:	641a      	str	r2, [r3, #64]	; 0x40
	fdcan1_obj.TxHeader.MessageMarker = 0;
 800775a:	4b29      	ldr	r3, [pc, #164]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 800775c:	2200      	movs	r2, #0
 800775e:	645a      	str	r2, [r3, #68]	; 0x44
 
	/* Fault Check */
	if ( HAL_FDCAN_ConfigGlobalFilter ( fdcan1_obj.hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE ) != HAL_OK ){
 8007760:	4b27      	ldr	r3, [pc, #156]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	2300      	movs	r3, #0
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	2300      	movs	r3, #0
 800776a:	2202      	movs	r2, #2
 800776c:	2102      	movs	r1, #2
 800776e:	f7fa f851 	bl	8001814 <HAL_FDCAN_ConfigGlobalFilter>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <Init_IOIF_Fdcan+0x94>
		Error_Handler ( );  // Configure Filter
 8007778:	f7f9 f968 	bl	8000a4c <Error_Handler>
	}

	if ( HAL_FDCAN_ConfigFilter ( fdcan1_obj.hfdcan, &fdcan1_obj.sFilterConfig ) != HAL_OK ){
 800777c:	4b20      	ldr	r3, [pc, #128]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4921      	ldr	r1, [pc, #132]	; (8007808 <Init_IOIF_Fdcan+0x120>)
 8007782:	4618      	mov	r0, r3
 8007784:	f7f9 ffd0 	bl	8001728 <HAL_FDCAN_ConfigFilter>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <Init_IOIF_Fdcan+0xaa>
		Error_Handler ( );  // Configure Filter
 800778e:	f7f9 f95d 	bl	8000a4c <Error_Handler>
	}

	if ( HAL_FDCAN_ActivateNotification ( fdcan1_obj.hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0 ) != HAL_OK ) {
 8007792:	4b1b      	ldr	r3, [pc, #108]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2200      	movs	r2, #0
 8007798:	2101      	movs	r1, #1
 800779a:	4618      	mov	r0, r3
 800779c:	f7fa faa2 	bl	8001ce4 <HAL_FDCAN_ActivateNotification>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <Init_IOIF_Fdcan+0xc2>
		Error_Handler ( );
 80077a6:	f7f9 f951 	bl	8000a4c <Error_Handler>
	}

	if ( HAL_FDCAN_ConfigTxDelayCompensation ( fdcan1_obj.hfdcan, fdcan1_obj.hfdcan->Init.DataPrescaler * fdcan1_obj.hfdcan->Init.DataTimeSeg1, 0 ) != HAL_OK ) {
 80077aa:	4b15      	ldr	r3, [pc, #84]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	4b14      	ldr	r3, [pc, #80]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	4a12      	ldr	r2, [pc, #72]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	2200      	movs	r2, #0
 80077c0:	4619      	mov	r1, r3
 80077c2:	f7fa f854 	bl	800186e <HAL_FDCAN_ConfigTxDelayCompensation>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <Init_IOIF_Fdcan+0xe8>
		Error_Handler ( );
 80077cc:	f7f9 f93e 	bl	8000a4c <Error_Handler>
	}

	if ( HAL_FDCAN_EnableTxDelayCompensation ( fdcan1_obj.hfdcan ) != HAL_OK ) {
 80077d0:	4b0b      	ldr	r3, [pc, #44]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fa f86e 	bl	80018b6 <HAL_FDCAN_EnableTxDelayCompensation>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <Init_IOIF_Fdcan+0xfc>
		Error_Handler ( );
 80077e0:	f7f9 f934 	bl	8000a4c <Error_Handler>
	}

	if ( HAL_FDCAN_Start ( fdcan1_obj.hfdcan ) != HAL_OK ) {
 80077e4:	4b06      	ldr	r3, [pc, #24]	; (8007800 <Init_IOIF_Fdcan+0x118>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fa f887 	bl	80018fc <HAL_FDCAN_Start>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <Init_IOIF_Fdcan+0x110>
		Error_Handler ( );
 80077f4:	f7f9 f92a 	bl	8000a4c <Error_Handler>
	}
}
 80077f8:	bf00      	nop
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	24000560 	.word	0x24000560
 8007804:	240000a4 	.word	0x240000a4
 8007808:	24000564 	.word	0x24000564

0800780c <Transmit_IOIF_Fdcan>:

int Transmit_IOIF_Fdcan(uint16_t t_COB_ID, uint32_t t_len, uint8_t* t_tx_data)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	81fb      	strh	r3, [r7, #14]
	fdcan1_obj.TxHeader.Identifier = t_COB_ID;
 800781a:	89fb      	ldrh	r3, [r7, #14]
 800781c:	4a08      	ldr	r2, [pc, #32]	; (8007840 <Transmit_IOIF_Fdcan+0x34>)
 800781e:	6253      	str	r3, [r2, #36]	; 0x24
	fdcan1_obj.TxHeader.DataLength = t_len; //FDCAN_DLC_BYTES_64 //FDCAN_DLC_BYTES_32 //FDCAN_DLC_BYTES_20
 8007820:	4a07      	ldr	r2, [pc, #28]	; (8007840 <Transmit_IOIF_Fdcan+0x34>)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6313      	str	r3, [r2, #48]	; 0x30

	return HAL_FDCAN_AddMessageToTxFifoQ(fdcan1_obj.hfdcan, &fdcan1_obj.TxHeader, t_tx_data);
 8007826:	4b06      	ldr	r3, [pc, #24]	; (8007840 <Transmit_IOIF_Fdcan+0x34>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	4905      	ldr	r1, [pc, #20]	; (8007844 <Transmit_IOIF_Fdcan+0x38>)
 800782e:	4618      	mov	r0, r3
 8007830:	f7fa f88f 	bl	8001952 <HAL_FDCAN_AddMessageToTxFifoQ>
 8007834:	4603      	mov	r3, r0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	24000560 	.word	0x24000560
 8007844:	24000584 	.word	0x24000584

08007848 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
	/* Recieve Message */
	if (hfdcan->Instance == FDCAN1){
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a19      	ldr	r2, [pc, #100]	; (80078bc <HAL_FDCAN_RxFifo0Callback+0x74>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d12b      	bne.n	80078b4 <HAL_FDCAN_RxFifo0Callback+0x6c>
		if (HAL_FDCAN_GetRxMessage(fdcan1_obj.hfdcan, FDCAN_RX_FIFO0, &fdcan1_obj.RxHeader, RxData1) != HAL_OK) {
 800785c:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	4b18      	ldr	r3, [pc, #96]	; (80078c4 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8007862:	4a19      	ldr	r2, [pc, #100]	; (80078c8 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8007864:	2140      	movs	r1, #64	; 0x40
 8007866:	f7fa f8cf 	bl	8001a08 <HAL_FDCAN_GetRxMessage>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_FDCAN_RxFifo0Callback+0x2c>
			Error_Handler();
 8007870:	f7f9 f8ec 	bl	8000a4c <Error_Handler>
		}
		
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 8007874:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007878:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800787a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787c:	401a      	ands	r2, r3
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	429a      	cmp	r2, r3
 8007884:	d008      	beq.n	8007898 <HAL_FDCAN_RxFifo0Callback+0x50>
			((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter2)){
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007888:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800788a:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	401a      	ands	r2, r3
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 8007894:	429a      	cmp	r2, r3
 8007896:	d10c      	bne.n	80078b2 <HAL_FDCAN_RxFifo0Callback+0x6a>
			return;
		}

		if (fdcan_rx_callback_ptr != NULL) {
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <HAL_FDCAN_RxFifo0Callback+0x84>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d009      	beq.n	80078b4 <HAL_FDCAN_RxFifo0Callback+0x6c>
			fdcan_rx_callback_ptr(fdcan1_obj.RxHeader.Identifier, RxData1);
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <HAL_FDCAN_RxFifo0Callback+0x84>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a06      	ldr	r2, [pc, #24]	; (80078c0 <HAL_FDCAN_RxFifo0Callback+0x78>)
 80078a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80078a8:	b292      	uxth	r2, r2
 80078aa:	4906      	ldr	r1, [pc, #24]	; (80078c4 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	e000      	b.n	80078b4 <HAL_FDCAN_RxFifo0Callback+0x6c>
			return;
 80078b2:	bf00      	nop
		}
	}
}
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	4000a000 	.word	0x4000a000
 80078c0:	24000560 	.word	0x24000560
 80078c4:	240005dc 	.word	0x240005dc
 80078c8:	240005a8 	.word	0x240005a8
 80078cc:	2400055c 	.word	0x2400055c

080078d0 <Start_TIM3>:
TimCallback ioif_tim16_callback_ptr = NULL;
TimCallback ioif_tim17_callback_ptr = NULL;

int Start_TIM1()    {return HAL_TIM_Base_Start_IT(&htim1);}
int Start_TIM2()    {return HAL_TIM_Base_Start_IT(&htim2);}
int Start_TIM3()    {return HAL_TIM_Base_Start_IT(&htim3);}
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	4802      	ldr	r0, [pc, #8]	; (80078e0 <Start_TIM3+0x10>)
 80078d6:	f7fe fbe5 	bl	80060a4 <HAL_TIM_Base_Start_IT>
 80078da:	4603      	mov	r3, r0
 80078dc:	4618      	mov	r0, r3
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	240001f0 	.word	0x240001f0

080078e4 <Start_TIM6>:
int Start_TIM4()    {return HAL_TIM_Base_Start_IT(&htim4);}
int Start_TIM5()    {return HAL_TIM_Base_Start_IT(&htim5);}
int Start_TIM6()    {return HAL_TIM_Base_Start_IT(&htim6);}
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	4802      	ldr	r0, [pc, #8]	; (80078f4 <Start_TIM6+0x10>)
 80078ea:	f7fe fbdb 	bl	80060a4 <HAL_TIM_Base_Start_IT>
 80078ee:	4603      	mov	r3, r0
 80078f0:	4618      	mov	r0, r3
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	2400023c 	.word	0x2400023c

080078f8 <HAL_TIM_PeriodElapsedCallback>:
{
	t_semaphore->semaphore = 0; // Release the semaphore
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
	/* Timer 3(APB1) - Imu Ctrl Task CallBack*/
	if (htim->Instance == htim3.Instance) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	4b0d      	ldr	r3, [pc, #52]	; (800793c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d106      	bne.n	800791a <HAL_TIM_PeriodElapsedCallback+0x22>
		if (ioif_tim3_callback_ptr != NULL) {
 800790c:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_TIM_PeriodElapsedCallback+0x22>
			ioif_tim3_callback_ptr( );
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4798      	blx	r3
		}
	}

	/* Timer 6(APB1) - Msg hdlr Task CallBack*/
	if (htim->Instance == htim6.Instance) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d106      	bne.n	8007934 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (ioif_tim6_callback_ptr != NULL) {
 8007926:	4b08      	ldr	r3, [pc, #32]	; (8007948 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_TIM_PeriodElapsedCallback+0x3c>
			ioif_tim6_callback_ptr( );
 800792e:	4b06      	ldr	r3, [pc, #24]	; (8007948 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4798      	blx	r3
		}
	}
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	240001f0 	.word	0x240001f0
 8007940:	2400061c 	.word	0x2400061c
 8007944:	2400023c 	.word	0x2400023c
 8007948:	24000620 	.word	0x24000620

0800794c <Reset_Parameters>:

*/

/* Reset Value Zero */
static void Reset_Parameters( )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b0d4      	sub	sp, #336	; 0x150
 8007950:	af00      	add	r7, sp, #0
	sensor_params 		= 	(Sensor_Params){0};
 8007952:	4b28      	ldr	r3, [pc, #160]	; (80079f4 <Reset_Parameters+0xa8>)
 8007954:	4618      	mov	r0, r3
 8007956:	2348      	movs	r3, #72	; 0x48
 8007958:	461a      	mov	r2, r3
 800795a:	2100      	movs	r1, #0
 800795c:	f003 fe85 	bl	800b66a <memset>
	norm_params 		= 	(Normalization_Params){0};
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <Reset_Parameters+0xac>)
 8007962:	4618      	mov	r0, r3
 8007964:	2334      	movs	r3, #52	; 0x34
 8007966:	461a      	mov	r2, r3
 8007968:	2100      	movs	r1, #0
 800796a:	f003 fe7e 	bl	800b66a <memset>
	gait_params 		= 	(Gait_Params){0};
 800796e:	4b23      	ldr	r3, [pc, #140]	; (80079fc <Reset_Parameters+0xb0>)
 8007970:	461a      	mov	r2, r3
 8007972:	2300      	movs	r3, #0
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	6053      	str	r3, [r2, #4]
 8007978:	6093      	str	r3, [r2, #8]
	fuzzy_params 		= 	(Fuzzy_Params){0};
 800797a:	4b21      	ldr	r3, [pc, #132]	; (8007a00 <Reset_Parameters+0xb4>)
 800797c:	4618      	mov	r0, r3
 800797e:	232c      	movs	r3, #44	; 0x2c
 8007980:	461a      	mov	r2, r3
 8007982:	2100      	movs	r1, #0
 8007984:	f003 fe71 	bl	800b66a <memset>
	thigh_angle_params 	= 	(Thigh_Angle_Params){0};
 8007988:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <Reset_Parameters+0xb8>)
 800798a:	4618      	mov	r0, r3
 800798c:	2348      	movs	r3, #72	; 0x48
 800798e:	461a      	mov	r2, r3
 8007990:	2100      	movs	r1, #0
 8007992:	f003 fe6a 	bl	800b66a <memset>
	th_params 			= 	(Threshold_Params){0};
 8007996:	4b1c      	ldr	r3, [pc, #112]	; (8007a08 <Reset_Parameters+0xbc>)
 8007998:	461a      	mov	r2, r3
 800799a:	2300      	movs	r3, #0
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	6093      	str	r3, [r2, #8]
 80079a2:	60d3      	str	r3, [r2, #12]
	plantar_params      = 	(Plantar_Params){0};
 80079a4:	4b19      	ldr	r3, [pc, #100]	; (8007a0c <Reset_Parameters+0xc0>)
 80079a6:	461a      	mov	r2, r3
 80079a8:	2300      	movs	r3, #0
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	6053      	str	r3, [r2, #4]
 80079ae:	6093      	str	r3, [r2, #8]
 80079b0:	60d3      	str	r3, [r2, #12]
 80079b2:	6113      	str	r3, [r2, #16]
 80079b4:	6153      	str	r3, [r2, #20]
 80079b6:	6193      	str	r3, [r2, #24]
	dorsi_params		= 	(Dorsi_Params){0};
 80079b8:	4b15      	ldr	r3, [pc, #84]	; (8007a10 <Reset_Parameters+0xc4>)
 80079ba:	461a      	mov	r2, r3
 80079bc:	2300      	movs	r3, #0
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	6053      	str	r3, [r2, #4]
 80079c2:	6093      	str	r3, [r2, #8]
 80079c4:	60d3      	str	r3, [r2, #12]
 80079c6:	6113      	str	r3, [r2, #16]
 80079c8:	6153      	str	r3, [r2, #20]
 80079ca:	6193      	str	r3, [r2, #24]
	assist_params		= 	(Assist_Params){0};
 80079cc:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <Reset_Parameters+0xc8>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	809a      	strh	r2, [r3, #4]

	walking 				=	0;
 80079d4:	4b10      	ldr	r3, [pc, #64]	; (8007a18 <Reset_Parameters+0xcc>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]
	attach_plane 			=	e_LEFT_SAGITAL;
 80079da:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <Reset_Parameters+0xd0>)
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
	wc_test					= 	0.0;
 80079e0:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <Reset_Parameters+0xd4>)
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]
}
 80079e8:	bf00      	nop
 80079ea:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	24000720 	.word	0x24000720
 80079f8:	24000768 	.word	0x24000768
 80079fc:	2400079c 	.word	0x2400079c
 8007a00:	240007a8 	.word	0x240007a8
 8007a04:	240007d4 	.word	0x240007d4
 8007a08:	2400081c 	.word	0x2400081c
 8007a0c:	2400082c 	.word	0x2400082c
 8007a10:	24000848 	.word	0x24000848
 8007a14:	24000864 	.word	0x24000864
 8007a18:	24000870 	.word	0x24000870
 8007a1c:	24000871 	.word	0x24000871
 8007a20:	2400086c 	.word	0x2400086c

08007a24 <Set_Initial_Angle_Values>:


static void Set_Initial_Angle_Values(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, float t_initial_angle)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	ed87 0a01 	vstr	s0, [r7, #4]
    t_thigh_angle_params->deg_acc_filtered = t_initial_angle;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	60da      	str	r2, [r3, #12]
    t_thigh_angle_params->deg_gyr_filtered = 0;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f04f 0200 	mov.w	r2, #0
 8007a3e:	611a      	str	r2, [r3, #16]
    t_thigh_angle_params->deg_LPF_1st[0] = t_initial_angle;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	629a      	str	r2, [r3, #40]	; 0x28
    t_thigh_angle_params->deg_LPF_1st[1] = t_initial_angle;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    t_thigh_angle_params->deg_LPF_2nd[0] = t_initial_angle;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	631a      	str	r2, [r3, #48]	; 0x30
    t_thigh_angle_params->deg_LPF_2nd[1] = t_initial_angle;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	635a      	str	r2, [r3, #52]	; 0x34
    t_norm_params->deg_o = t_initial_angle;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
}
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <Calculate_Initial_Thigh_Angle>:

/*
 *Function to calculate the initial thigh angle
*/
static void Calculate_Initial_Thigh_Angle(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, ICMObject* t_icm_obj, Sensor_Params* t_sensor_params, AttachPlane t_attach_plane)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b088      	sub	sp, #32
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
 8007a76:	603b      	str	r3, [r7, #0]
	uint8_t t_total_samples = 100;
 8007a78:	2364      	movs	r3, #100	; 0x64
 8007a7a:	75bb      	strb	r3, [r7, #22]
	float t_accumulated_angle = 0.0;
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	61fb      	str	r3, [r7, #28]
	uint8_t data_check = 0;
 8007a82:	2300      	movs	r3, #0
 8007a84:	757b      	strb	r3, [r7, #21]
	float t_init_thigh_angle = 0.0;
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	61bb      	str	r3, [r7, #24]

	for (uint8_t i = 1; i <= t_total_samples; i++){
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	75fb      	strb	r3, [r7, #23]
 8007a90:	e034      	b.n	8007afc <Calculate_Initial_Thigh_Angle+0x92>
        data_check = Read_Data_ICM(t_icm_obj);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff fd34 	bl	8007500 <Read_Data_ICM>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	757b      	strb	r3, [r7, #21]

    	t_sensor_params->accX[0] = t_icm_obj->acc_x;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	601a      	str	r2, [r3, #0]
    	t_sensor_params->accY[0] = t_icm_obj->acc_y;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68da      	ldr	r2, [r3, #12]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	609a      	str	r2, [r3, #8]
    	t_sensor_params->gyrZ[0] = t_icm_obj->gyr_z;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69da      	ldr	r2, [r3, #28]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28

        if (data_check == 0){
 8007ab4:	7d7b      	ldrb	r3, [r7, #21]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d11d      	bne.n	8007af6 <Calculate_Initial_Thigh_Angle+0x8c>
    		/* Calculate the accelerometer angle (in degrees) */
            float accelerometer_angle = 0.0;
 8007aba:	f04f 0300 	mov.w	r3, #0
 8007abe:	613b      	str	r3, [r7, #16]

            accelerometer_angle = Get_Angle_Scenario(t_sensor_params, t_attach_plane);
 8007ac0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6838      	ldr	r0, [r7, #0]
 8007ac8:	f001 fb1a 	bl	8009100 <Get_Angle_Scenario>
 8007acc:	ed87 0a04 	vstr	s0, [r7, #16]

    		/* Accumulate the accelerometer angle */
            t_accumulated_angle += accelerometer_angle;
 8007ad0:	ed97 7a07 	vldr	s14, [r7, #28]
 8007ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007adc:	edc7 7a07 	vstr	s15, [r7, #28]

    		/* Calculate and update the initial thigh angle (average) */
            t_init_thigh_angle = t_accumulated_angle / ((float)i);
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af2:	edc7 7a06 	vstr	s15, [r7, #24]
	for (uint8_t i = 1; i <= t_total_samples; i++){
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	3301      	adds	r3, #1
 8007afa:	75fb      	strb	r3, [r7, #23]
 8007afc:	7dfa      	ldrb	r2, [r7, #23]
 8007afe:	7dbb      	ldrb	r3, [r7, #22]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d9c6      	bls.n	8007a92 <Calculate_Initial_Thigh_Angle+0x28>
        }
    }

	t_thigh_angle_params->angle_init = t_init_thigh_angle;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	601a      	str	r2, [r3, #0]
    Set_Initial_Angle_Values(t_thigh_angle_params, t_norm_params, t_init_thigh_angle);
 8007b0a:	ed97 0a06 	vldr	s0, [r7, #24]
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f7ff ff87 	bl	8007a24 <Set_Initial_Angle_Values>
}
 8007b16:	bf00      	nop
 8007b18:	3720      	adds	r7, #32
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <Run_Complementary_Filter>:

/*
 *Function to execute the time-varying complementary filter (with Fuzzy Logic - wc)
*/
static void Run_Complementary_Filter(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Fuzzy_Params* t_fuzzy_params, float t_sampling_Period, AttachPlane t_attach_plane)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b086      	sub	sp, #24
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6178      	str	r0, [r7, #20]
 8007b26:	6139      	str	r1, [r7, #16]
 8007b28:	60fa      	str	r2, [r7, #12]
 8007b2a:	ed87 0a02 	vstr	s0, [r7, #8]
 8007b2e:	71fb      	strb	r3, [r7, #7]
	/* Apply time-varying complementary filter on the sensor data using fuzzy logic(wc) and update the thigh angle parameters */
	Run_TVCF(t_sensor_params, t_thigh_angle_params, t_fuzzy_params->wc, t_sampling_Period, t_attach_plane);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	edd3 7a04 	vldr	s15, [r3, #16]
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	edd7 0a02 	vldr	s1, [r7, #8]
 8007b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007b42:	6939      	ldr	r1, [r7, #16]
 8007b44:	6978      	ldr	r0, [r7, #20]
 8007b46:	f000 ffcc 	bl	8008ae2 <Run_TVCF>
	/* Update the unfiltered thigh angle to be the same as the filtered thigh angle */
	t_thigh_angle_params->deg_tvcf[0] = t_thigh_angle_params->deg_tvcf_filtered;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	621a      	str	r2, [r3, #32]
}
 8007b52:	bf00      	nop
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <Run_Normalization_And_Get_Gait_Phase>:

/*
 *Function to normalize sensor data and calculate the current phase of the gait
*/
static void Run_Normalization_And_Get_Gait_Phase(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
	/* Prepare for circular normalization by finding the center point of the original ellipse */
	Prepare_for_Circular_Normalization(t_thigh_angle_params, t_norm_params, t_gait_params);
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 f912 	bl	8008d94 <Prepare_for_Circular_Normalization>

	/* Normalize degree and velocity data based on calculated origin and amplitude */
	t_norm_params->deg_norm = (t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o) / t_norm_params->A_deg;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	edd3 7a00 	vldr	s15, [r3]
 8007b7c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	t_norm_params->vel_norm = (t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o) / t_norm_params->A_vel;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b9c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	/* Calculate and update the current phase of the gait */
	t_gait_params->gait_phase = Get_Current_Gait_Phase(t_norm_params, t_gait_params); // Current phase (0 ~ 100%)
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	68b8      	ldr	r0, [r7, #8]
 8007bb4:	f001 f928 	bl	8008e08 <Get_Current_Gait_Phase>
 8007bb8:	eef0 7a40 	vmov.f32	s15, s0
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8007bc2:	bf00      	nop
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	0000      	movs	r0, r0
 8007bcc:	0000      	movs	r0, r0
	...

08007bd0 <Reduce_Noise_In_Sensor_Data>:

/*
 *Function to reduce noise in sensor data
*/
static void Reduce_Noise_In_Sensor_Data(Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
	float t_dt = 1000.0;
 8007bda:	4b49      	ldr	r3, [pc, #292]	; (8007d00 <Reduce_Noise_In_Sensor_Data+0x130>)
 8007bdc:	617b      	str	r3, [r7, #20]
	float w_target = Get_Max_Float(0.3, t_dt/t_gait_params->gait_period);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bea:	ed97 7a05 	vldr	s14, [r7, #20]
 8007bee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007bf2:	eef0 0a66 	vmov.f32	s1, s13
 8007bf6:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8007d04 <Reduce_Noise_In_Sensor_Data+0x134>
 8007bfa:	f000 ffc6 	bl	8008b8a <Get_Max_Float>
 8007bfe:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_lpf_freq = 2.5 * w_target * 2 * PI;
 8007c02:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007c0a:	eeb0 6b04 	vmov.f64	d6, #4	; 0x40200000  2.5
 8007c0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c12:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007c16:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8007cf8 <Reduce_Noise_In_Sensor_Data+0x128>
 8007c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007c22:	edc7 7a03 	vstr	s15, [r7, #12]

	/* First LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_1st[0] = Perform_LPF_on_Acc(
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	edd3 7a08 	vldr	s15, [r3, #32]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007c32:	eddf 1a35 	vldr	s3, [pc, #212]	; 8007d08 <Reduce_Noise_In_Sensor_Data+0x138>
 8007c36:	ed97 1a03 	vldr	s2, [r7, #12]
 8007c3a:	eef0 0a47 	vmov.f32	s1, s14
 8007c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007c42:	f000 fef0 	bl	8008a26 <Perform_LPF_on_Acc>
 8007c46:	eef0 7a40 	vmov.f32	s15, s0
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_2nd[0] = Perform_LPF_on_Acc(
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8007c5c:	eddf 1a2a 	vldr	s3, [pc, #168]	; 8007d08 <Reduce_Noise_In_Sensor_Data+0x138>
 8007c60:	ed97 1a03 	vldr	s2, [r7, #12]
 8007c64:	eef0 0a47 	vmov.f32	s1, s14
 8007c68:	eeb0 0a67 	vmov.f32	s0, s15
 8007c6c:	f000 fedb 	bl	8008a26 <Perform_LPF_on_Acc>
 8007c70:	eef0 7a40 	vmov.f32	s15, s0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Compute raw velocity from angle data */
	t_thigh_angle_params->vel_raw[0] = (t_thigh_angle_params->deg_tvcf[0] - t_thigh_angle_params->deg_tvcf[1]) * t_dt;											// dt = 0.001sec
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	ed93 7a08 	vldr	s14, [r3, #32]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8007c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	edc3 7a06 	vstr	s15, [r3, #24]

	/* First LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_1st[0] = Perform_LPF_on_Acc(
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8007ca4:	eddf 1a18 	vldr	s3, [pc, #96]	; 8007d08 <Reduce_Noise_In_Sensor_Data+0x138>
 8007ca8:	ed97 1a03 	vldr	s2, [r7, #12]
 8007cac:	eef0 0a47 	vmov.f32	s1, s14
 8007cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8007cb4:	f000 feb7 	bl	8008a26 <Perform_LPF_on_Acc>
 8007cb8:	eef0 7a40 	vmov.f32	s15, s0
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_2nd[0] = Perform_LPF_on_Acc(
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8007cce:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8007d08 <Reduce_Noise_In_Sensor_Data+0x138>
 8007cd2:	ed97 1a03 	vldr	s2, [r7, #12]
 8007cd6:	eef0 0a47 	vmov.f32	s1, s14
 8007cda:	eeb0 0a67 	vmov.f32	s0, s15
 8007cde:	f000 fea2 	bl	8008a26 <Perform_LPF_on_Acc>
 8007ce2:	eef0 7a40 	vmov.f32	s15, s0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		t_thigh_angle_params->vel_LPF_1st[0],
		t_thigh_angle_params->vel_LPF_2nd[1],
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);
}
 8007cec:	bf00      	nop
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	f3af 8000 	nop.w
 8007cf8:	fc8b007a 	.word	0xfc8b007a
 8007cfc:	400921fa 	.word	0x400921fa
 8007d00:	447a0000 	.word	0x447a0000
 8007d04:	3e99999a 	.word	0x3e99999a
 8007d08:	3a83126f 	.word	0x3a83126f

08007d0c <Compute_Phase_Radius>:

/*
 *This function calculates and returns the phase radius
*/
static float Compute_Phase_Radius(float t_deg_diff, float t_deg_th, float t_vel_diff, float t_vel_th)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	ed87 0a03 	vstr	s0, [r7, #12]
 8007d16:	edc7 0a02 	vstr	s1, [r7, #8]
 8007d1a:	ed87 1a01 	vstr	s2, [r7, #4]
 8007d1e:	edc7 1a00 	vstr	s3, [r7]
    /* Calculate degree ratio */
    float t_deg_ratio = t_deg_diff / t_deg_th;
 8007d22:	edd7 6a03 	vldr	s13, [r7, #12]
 8007d26:	ed97 7a02 	vldr	s14, [r7, #8]
 8007d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d2e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Calculate velocity ratio */
    float t_vel_ratio = t_vel_diff / t_vel_th;
 8007d32:	edd7 6a01 	vldr	s13, [r7, #4]
 8007d36:	ed97 7a00 	vldr	s14, [r7]
 8007d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d3e:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Calculate and return the phase radius */
    return Calculate_Square_Root_Sum(t_deg_ratio, t_vel_ratio);
 8007d42:	edd7 0a04 	vldr	s1, [r7, #16]
 8007d46:	ed97 0a05 	vldr	s0, [r7, #20]
 8007d4a:	f000 fd09 	bl	8008760 <Calculate_Square_Root_Sum>
 8007d4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8007d52:	eeb0 0a67 	vmov.f32	s0, s15
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <Update_Walking_State>:

/*
 *This function updates the walking state based on the phase radii and sum_i
*/
static void Update_Walking_State(uint8_t* t_walking, float t_phase_radius_start, float t_phase_radius_stop, int16_t t_sum_i)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	ed87 0a02 	vstr	s0, [r7, #8]
 8007d68:	edc7 0a01 	vstr	s1, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	807b      	strh	r3, [r7, #2]
    /* The walking state is updated based on the current walking state, phase radii, and t_sum_i */
    switch (*t_walking)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d01d      	beq.n	8007db4 <Update_Walking_State+0x58>
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	dc23      	bgt.n	8007dc4 <Update_Walking_State+0x68>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <Update_Walking_State+0x2a>
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d00e      	beq.n	8007da2 <Update_Walking_State+0x46>
 8007d84:	e01e      	b.n	8007dc4 <Update_Walking_State+0x68>
    {
        case e_STOP:
            /* If the start phase radius is greater than 1, set the walking state to 1 */
            if (t_phase_radius_start > 1){
 8007d86:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d96:	dc00      	bgt.n	8007d9a <Update_Walking_State+0x3e>
                *t_walking = 1;
            }
            break;
 8007d98:	e025      	b.n	8007de6 <Update_Walking_State+0x8a>
                *t_walking = 1;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	701a      	strb	r2, [r3, #0]
            break;
 8007da0:	e021      	b.n	8007de6 <Update_Walking_State+0x8a>
        case e_WALKING_START:
            /* If sum_i is greater than 1000, set the walking state to 2 */
            if (t_sum_i > 1000){
 8007da2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007daa:	dd19      	ble.n	8007de0 <Update_Walking_State+0x84>
                *t_walking = 2;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2202      	movs	r2, #2
 8007db0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8007db2:	e015      	b.n	8007de0 <Update_Walking_State+0x84>
        case e_WALKING_HALF:
            /* If sum_i is 0, set the walking state to 3 */
            if (t_sum_i == 0){
 8007db4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d113      	bne.n	8007de4 <Update_Walking_State+0x88>
                *t_walking = 3;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8007dc2:	e00f      	b.n	8007de4 <Update_Walking_State+0x88>
        default:
            /* If the stop phase radius is less than 1, set the walking state to 0 */
            if (t_phase_radius_stop < 1){
 8007dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8007dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd4:	d400      	bmi.n	8007dd8 <Update_Walking_State+0x7c>
                *t_walking = 0;
            }
            break;
 8007dd6:	e006      	b.n	8007de6 <Update_Walking_State+0x8a>
                *t_walking = 0;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]
            break;
 8007dde:	e002      	b.n	8007de6 <Update_Walking_State+0x8a>
            break;
 8007de0:	bf00      	nop
 8007de2:	e000      	b.n	8007de6 <Update_Walking_State+0x8a>
            break;
 8007de4:	bf00      	nop
    }
}
 8007de6:	bf00      	nop
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
	...

08007df4 <Check_Walking_State>:

/*
*This function checks the walking state using the walking parameters and IMU system information
*/
static void Check_Walking_State(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Threshold_Params* t_th_params, Gait_Params* t_gait_params, uint8_t* t_walking)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
	float t_deg_diff = 0.0;
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
	float t_vel_diff = 0.0;
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	61bb      	str	r3, [r7, #24]
	float t_phase_radius_start = 0.0;
 8007e0e:	f04f 0300 	mov.w	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]
	float t_phase_radius_stop = 0.0;
 8007e14:	f04f 0300 	mov.w	r3, #0
 8007e18:	613b      	str	r3, [r7, #16]

    /* Get the relevant values from the walking parameters and IMU system */
    t_deg_diff = t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	edd3 7a00 	vldr	s15, [r3]
 8007e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e2a:	edc7 7a07 	vstr	s15, [r7, #28]
    t_vel_diff = t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	edd3 7a01 	vldr	s15, [r3, #4]
 8007e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e3e:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Calculate the start and stop phase radii */
    t_phase_radius_start = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_start, t_vel_diff, t_th_params->vel_th_start);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	edd3 7a00 	vldr	s15, [r3]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8007e4e:	eef0 1a47 	vmov.f32	s3, s14
 8007e52:	ed97 1a06 	vldr	s2, [r7, #24]
 8007e56:	eef0 0a67 	vmov.f32	s1, s15
 8007e5a:	ed97 0a07 	vldr	s0, [r7, #28]
 8007e5e:	f7ff ff55 	bl	8007d0c <Compute_Phase_Radius>
 8007e62:	ed87 0a05 	vstr	s0, [r7, #20]
    t_phase_radius_stop = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_stop, t_vel_diff, t_th_params->vel_th_stop);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	edd3 7a02 	vldr	s15, [r3, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8007e72:	eef0 1a47 	vmov.f32	s3, s14
 8007e76:	ed97 1a06 	vldr	s2, [r7, #24]
 8007e7a:	eef0 0a67 	vmov.f32	s1, s15
 8007e7e:	ed97 0a07 	vldr	s0, [r7, #28]
 8007e82:	f7ff ff43 	bl	8007d0c <Compute_Phase_Radius>
 8007e86:	ed87 0a04 	vstr	s0, [r7, #16]

    /* Update the walking state based on the phase radii and sum_i */
    Update_Walking_State(t_walking, t_phase_radius_start, t_phase_radius_stop, t_norm_params->sum_i);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	8a1b      	ldrh	r3, [r3, #16]
 8007e8e:	b21b      	sxth	r3, r3
 8007e90:	4619      	mov	r1, r3
 8007e92:	edd7 0a04 	vldr	s1, [r7, #16]
 8007e96:	ed97 0a05 	vldr	s0, [r7, #20]
 8007e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e9c:	f7ff ff5e 	bl	8007d5c <Update_Walking_State>

    /* If the walking state is 0 or 1, set the gait phase to -100 */
    if (*t_walking == 0 || *t_walking == 1){
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <Check_Walking_State+0xbc>
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d102      	bne.n	8007eb6 <Check_Walking_State+0xc2>
        t_gait_params->gait_phase = -100;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	4a03      	ldr	r2, [pc, #12]	; (8007ec0 <Check_Walking_State+0xcc>)
 8007eb4:	605a      	str	r2, [r3, #4]
    }
}
 8007eb6:	bf00      	nop
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	c2c80000 	.word	0xc2c80000

08007ec4 <Setting_Assist_Time>:


static void Setting_Assist_Time(Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
	Set_Assist_Force_Timing_Params(t_plantar_params, t_dorsi_params, t_assist_params, t_gait_params);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f001 f8b3 	bl	8009044 <Set_Assist_Force_Timing_Params>
}
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <Update_IMU_Raw_Value>:

/*
*The function Update_IMU_Raw_Value updates the IMU raw values.
*/
static void Update_IMU_Raw_Value(Sensor_Params* t_sensor_params, ICMObject* t_icm_obj, BMObject* t_bm_obj, AttachPlane t_attach_plane)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
 8007ef2:	70fb      	strb	r3, [r7, #3]
	t_sensor_params->accX[0] = t_icm_obj->acc_x;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	601a      	str	r2, [r3, #0]
	t_sensor_params->accY[0] = t_icm_obj->acc_y;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	609a      	str	r2, [r3, #8]
	t_sensor_params->accZ[0] = t_icm_obj->acc_z;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	691a      	ldr	r2, [r3, #16]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	611a      	str	r2, [r3, #16]

	t_sensor_params->gyrX[0] = t_icm_obj->gyr_x;
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	695a      	ldr	r2, [r3, #20]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	619a      	str	r2, [r3, #24]
	t_sensor_params->gyrY[0] = t_icm_obj->gyr_y;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	699a      	ldr	r2, [r3, #24]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	621a      	str	r2, [r3, #32]

	if (t_attach_plane < 4){
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d808      	bhi.n	8007f34 <Update_IMU_Raw_Value+0x4e>
		t_sensor_params->gyrZ[0] = (-1) * (t_icm_obj->gyr_z); 	// For Left Sagital case
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	edd3 7a07 	vldr	s15, [r3, #28]
 8007f28:	eef1 7a67 	vneg.f32	s15, s15
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		t_sensor_params->gyrZ[0] = t_icm_obj->gyr_z; 	// For Right Sagital case
	}
//	t_sensor_params->magX[0] = t_mag_data->mag_x;
//	t_sensor_params->magY[0] = t_mag_data->mag_y;
//	t_sensor_params->magZ[0] = t_mag_data->mag_z;
}
 8007f32:	e006      	b.n	8007f42 <Update_IMU_Raw_Value+0x5c>
	else if (t_attach_plane >= 4){
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d903      	bls.n	8007f42 <Update_IMU_Raw_Value+0x5c>
		t_sensor_params->gyrZ[0] = t_icm_obj->gyr_z; 	// For Right Sagital case
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	69da      	ldr	r2, [r3, #28]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <Run_Total_function>:

 */


static int Run_Total_function()
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af02      	add	r7, sp, #8
//	thigh_angle_tvcf_demo = (-1) * thigh_angle_params.deg_tvcf_filtered;

	Save_Previous_Value(&sensor_params, &thigh_angle_params, &gait_params);
 8007f56:	4a23      	ldr	r2, [pc, #140]	; (8007fe4 <Run_Total_function+0x94>)
 8007f58:	4923      	ldr	r1, [pc, #140]	; (8007fe8 <Run_Total_function+0x98>)
 8007f5a:	4824      	ldr	r0, [pc, #144]	; (8007fec <Run_Total_function+0x9c>)
 8007f5c:	f000 fbcc 	bl	80086f8 <Save_Previous_Value>

//	uint8_t t_3axis_res = Get_Value_3Axis_IMU(&mag_data);
//	if (t_3axis_res != NO_ERROR) { Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR; }
	uint8_t t_6axis_res = Read_Data_ICM(&icm20608g_obj);
 8007f60:	4823      	ldr	r0, [pc, #140]	; (8007ff0 <Run_Total_function+0xa0>)
 8007f62:	f7ff facd 	bl	8007500 <Read_Data_ICM>
 8007f66:	4603      	mov	r3, r0
 8007f68:	71fb      	strb	r3, [r7, #7]
	uint8_t t_3axis_res = Read_Data_BM(&bm1422agmv_obj);
 8007f6a:	4822      	ldr	r0, [pc, #136]	; (8007ff4 <Run_Total_function+0xa4>)
 8007f6c:	f7fe fd5f 	bl	8006a2e <Read_Data_BM>
 8007f70:	4603      	mov	r3, r0
 8007f72:	71bb      	strb	r3, [r7, #6]
//	if (t_6axis_res != NO_ERROR) { Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR; }

	Update_IMU_Raw_Value(&sensor_params, &icm20608g_obj, &bm1422agmv_obj, attach_plane);
 8007f74:	4b20      	ldr	r3, [pc, #128]	; (8007ff8 <Run_Total_function+0xa8>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	4a1e      	ldr	r2, [pc, #120]	; (8007ff4 <Run_Total_function+0xa4>)
 8007f7a:	491d      	ldr	r1, [pc, #116]	; (8007ff0 <Run_Total_function+0xa0>)
 8007f7c:	481b      	ldr	r0, [pc, #108]	; (8007fec <Run_Total_function+0x9c>)
 8007f7e:	f7ff ffb2 	bl	8007ee6 <Update_IMU_Raw_Value>

	Generate_Fuzzy_Input(&sensor_params, &fuzzy_params);
 8007f82:	491e      	ldr	r1, [pc, #120]	; (8007ffc <Run_Total_function+0xac>)
 8007f84:	4819      	ldr	r0, [pc, #100]	; (8007fec <Run_Total_function+0x9c>)
 8007f86:	f000 fc9f 	bl	80088c8 <Generate_Fuzzy_Input>
	wc_test = Calculate_Fuzzy_Wc(&fuzzy_params);
 8007f8a:	481c      	ldr	r0, [pc, #112]	; (8007ffc <Run_Total_function+0xac>)
 8007f8c:	f000 fd00 	bl	8008990 <Calculate_Fuzzy_Wc>
 8007f90:	eef0 7a40 	vmov.f32	s15, s0
 8007f94:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <Run_Total_function+0xb0>)
 8007f96:	edc3 7a00 	vstr	s15, [r3]

	Run_Complementary_Filter(&sensor_params, &thigh_angle_params, &fuzzy_params, IMU_CONTROL_PERIOD, attach_plane);
 8007f9a:	4b17      	ldr	r3, [pc, #92]	; (8007ff8 <Run_Total_function+0xa8>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008004 <Run_Total_function+0xb4>
 8007fa2:	4a16      	ldr	r2, [pc, #88]	; (8007ffc <Run_Total_function+0xac>)
 8007fa4:	4910      	ldr	r1, [pc, #64]	; (8007fe8 <Run_Total_function+0x98>)
 8007fa6:	4811      	ldr	r0, [pc, #68]	; (8007fec <Run_Total_function+0x9c>)
 8007fa8:	f7ff fdb9 	bl	8007b1e <Run_Complementary_Filter>

	Reduce_Noise_In_Sensor_Data(&thigh_angle_params, &gait_params);
 8007fac:	490d      	ldr	r1, [pc, #52]	; (8007fe4 <Run_Total_function+0x94>)
 8007fae:	480e      	ldr	r0, [pc, #56]	; (8007fe8 <Run_Total_function+0x98>)
 8007fb0:	f7ff fe0e 	bl	8007bd0 <Reduce_Noise_In_Sensor_Data>

	Run_Normalization_And_Get_Gait_Phase(&thigh_angle_params, &norm_params, &gait_params);
 8007fb4:	4a0b      	ldr	r2, [pc, #44]	; (8007fe4 <Run_Total_function+0x94>)
 8007fb6:	4914      	ldr	r1, [pc, #80]	; (8008008 <Run_Total_function+0xb8>)
 8007fb8:	480b      	ldr	r0, [pc, #44]	; (8007fe8 <Run_Total_function+0x98>)
 8007fba:	f7ff fdce 	bl	8007b5a <Run_Normalization_And_Get_Gait_Phase>

	Check_Walking_State(&thigh_angle_params, &norm_params, &th_params, &gait_params, &walking);
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <Run_Total_function+0xbc>)
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <Run_Total_function+0x94>)
 8007fc4:	4a12      	ldr	r2, [pc, #72]	; (8008010 <Run_Total_function+0xc0>)
 8007fc6:	4910      	ldr	r1, [pc, #64]	; (8008008 <Run_Total_function+0xb8>)
 8007fc8:	4807      	ldr	r0, [pc, #28]	; (8007fe8 <Run_Total_function+0x98>)
 8007fca:	f7ff ff13 	bl	8007df4 <Check_Walking_State>

	Setting_Assist_Time(&plantar_params, &dorsi_params, &assist_params, &gait_params);
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <Run_Total_function+0x94>)
 8007fd0:	4a10      	ldr	r2, [pc, #64]	; (8008014 <Run_Total_function+0xc4>)
 8007fd2:	4911      	ldr	r1, [pc, #68]	; (8008018 <Run_Total_function+0xc8>)
 8007fd4:	4811      	ldr	r0, [pc, #68]	; (800801c <Run_Total_function+0xcc>)
 8007fd6:	f7ff ff75 	bl	8007ec4 <Setting_Assist_Time>

//	// Msg_Hdlr problem //
//	Setting_Assist_Force_and_Time(&assist_params, &gait_params);
//	Set_Trigger(&assist_params, &gait_params, walking);

	return 0;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	2400079c 	.word	0x2400079c
 8007fe8:	240007d4 	.word	0x240007d4
 8007fec:	24000720 	.word	0x24000720
 8007ff0:	240006ec 	.word	0x240006ec
 8007ff4:	2400070c 	.word	0x2400070c
 8007ff8:	24000871 	.word	0x24000871
 8007ffc:	240007a8 	.word	0x240007a8
 8008000:	2400086c 	.word	0x2400086c
 8008004:	3a83126f 	.word	0x3a83126f
 8008008:	24000768 	.word	0x24000768
 800800c:	24000870 	.word	0x24000870
 8008010:	2400081c 	.word	0x2400081c
 8008014:	24000864 	.word	0x24000864
 8008018:	24000848 	.word	0x24000848
 800801c:	2400082c 	.word	0x2400082c

08008020 <Get_State_Callback>:
 \__ \ |) | (_) | | (__/ _` | | | '_ \/ _` / _| / /(_-<
 |___/___/ \___/   \___\__,_|_|_|_.__/\__,_\__|_\_\/__/

 */

MSG_COMMON_SDO_CALLBACK(imu_ctrl_task)
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2201      	movs	r2, #1
 800802e:	711a      	strb	r2, [r3, #4]
 8008030:	2001      	movs	r0, #1
 8008032:	f003 f921 	bl	800b278 <malloc>
 8008036:	4603      	mov	r3, r0
 8008038:	461a      	mov	r2, r3
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a04      	ldr	r2, [pc, #16]	; (8008054 <Get_State_Callback+0x34>)
 8008044:	7b12      	ldrb	r2, [r2, #12]
 8008046:	701a      	strb	r2, [r3, #0]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	721a      	strb	r2, [r3, #8]
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	24000624 	.word	0x24000624

08008058 <Set_State_Callback>:
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	73fb      	strb	r3, [r7, #15]
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	4619      	mov	r1, r3
 800806e:	4807      	ldr	r0, [pc, #28]	; (800808c <Set_State_Callback+0x34>)
 8008070:	f003 f85a 	bl	800b128 <Transition_State>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2200      	movs	r2, #0
 800807e:	711a      	strb	r2, [r3, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	721a      	strb	r2, [r3, #8]
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	24000630 	.word	0x24000630

08008090 <Get_Routine_Callback>:
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2200      	movs	r2, #0
 800809e:	721a      	strb	r2, [r3, #8]
 80080a0:	4b18      	ldr	r3, [pc, #96]	; (8008104 <Get_Routine_Callback+0x74>)
 80080a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	711a      	strb	r2, [r3, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	791b      	ldrb	r3, [r3, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d024      	beq.n	80080fc <Get_Routine_Callback+0x6c>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	88db      	ldrh	r3, [r3, #6]
 80080b6:	461a      	mov	r2, r3
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	791b      	ldrb	r3, [r3, #4]
 80080bc:	fb02 f303 	mul.w	r3, r2, r3
 80080c0:	4618      	mov	r0, r3
 80080c2:	f003 f8d9 	bl	800b278 <malloc>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	e00d      	b.n	80080f0 <Get_Routine_Callback+0x60>
 80080d4:	4a0b      	ldr	r2, [pc, #44]	; (8008104 <Get_Routine_Callback+0x74>)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3310      	adds	r3, #16
 80080da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	b2ca      	uxtb	r2, r1
 80080e8:	701a      	strb	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	791b      	ldrb	r3, [r3, #4]
 80080f4:	461a      	mov	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4293      	cmp	r3, r2
 80080fa:	dbeb      	blt.n	80080d4 <Get_Routine_Callback+0x44>
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	24000624 	.word	0x24000624

08008108 <Set_Routine_Callback>:
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2200      	movs	r2, #0
 8008116:	711a      	strb	r2, [r3, #4]
 8008118:	4828      	ldr	r0, [pc, #160]	; (80081bc <Set_Routine_Callback+0xb4>)
 800811a:	f002 fead 	bl	800ae78 <Clear_Routines>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	791b      	ldrb	r3, [r3, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d103      	bne.n	800812e <Set_Routine_Callback+0x26>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2200      	movs	r2, #0
 800812a:	721a      	strb	r2, [r3, #8]
 800812c:	e043      	b.n	80081b6 <Set_Routine_Callback+0xae>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	88db      	ldrh	r3, [r3, #6]
 8008132:	461a      	mov	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	791b      	ldrb	r3, [r3, #4]
 8008138:	fb02 f303 	mul.w	r3, r2, r3
 800813c:	4618      	mov	r0, r3
 800813e:	f003 f89b 	bl	800b278 <malloc>
 8008142:	4603      	mov	r3, r0
 8008144:	461a      	mov	r2, r3
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e020      	b.n	8008192 <Set_Routine_Callback+0x8a>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4413      	add	r3, r2
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	72fb      	strb	r3, [r7, #11]
 800815c:	7afb      	ldrb	r3, [r7, #11]
 800815e:	4619      	mov	r1, r3
 8008160:	4816      	ldr	r0, [pc, #88]	; (80081bc <Set_Routine_Callback+0xb4>)
 8008162:	f002 fea5 	bl	800aeb0 <Push_Routine>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10f      	bne.n	800818c <Set_Routine_Callback+0x84>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	441a      	add	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	6819      	ldr	r1, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	440b      	add	r3, r1
 800817c:	7812      	ldrb	r2, [r2, #0]
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	791b      	ldrb	r3, [r3, #4]
 8008184:	3301      	adds	r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	711a      	strb	r2, [r3, #4]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	791b      	ldrb	r3, [r3, #4]
 8008196:	461a      	mov	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4293      	cmp	r3, r2
 800819c:	dbd8      	blt.n	8008150 <Set_Routine_Callback+0x48>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	791a      	ldrb	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	791b      	ldrb	r3, [r3, #4]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d002      	beq.n	80081b0 <Set_Routine_Callback+0xa8>
 80081aa:	f04f 32ff 	mov.w	r2, #4294967295
 80081ae:	e000      	b.n	80081b2 <Set_Routine_Callback+0xaa>
 80081b0:	2200      	movs	r2, #0
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	721a      	strb	r2, [r3, #8]
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	24000664 	.word	0x24000664

080081c0 <StateOff_Run>:
 \__ \  _/ _` |  _/ -_) | _| || | ' \/ _|  _| / _ \ ' \(_-<
 |___/\__\__,_|\__\___| |_| \_,_|_||_\__|\__|_\___/_||_/__/

 */
static void StateOff_Run( )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
	// TODO: I2C Initialization
	i2c_6axis_res = Read_Data_ICM(&icm20608g_obj);
 80081c4:	480f      	ldr	r0, [pc, #60]	; (8008204 <StateOff_Run+0x44>)
 80081c6:	f7ff f99b 	bl	8007500 <Read_Data_ICM>
 80081ca:	4603      	mov	r3, r0
 80081cc:	461a      	mov	r2, r3
 80081ce:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <StateOff_Run+0x48>)
 80081d0:	701a      	strb	r2, [r3, #0]
	i2c_3axis_res = Read_Data_BM(&bm1422agmv_obj);
 80081d2:	480e      	ldr	r0, [pc, #56]	; (800820c <StateOff_Run+0x4c>)
 80081d4:	f7fe fc2b 	bl	8006a2e <Read_Data_BM>
 80081d8:	4603      	mov	r3, r0
 80081da:	461a      	mov	r2, r3
 80081dc:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <StateOff_Run+0x50>)
 80081de:	701a      	strb	r2, [r3, #0]
//	i2c_6axis_res = Get_Value_6Axis_IMU(&acc_gyro_data);
//	i2c_3axis_res = Get_Value_3Axis_IMU(&mag_data);

	if (i2c_3axis_res == NO_ERROR && i2c_6axis_res == NO_ERROR){
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <StateOff_Run+0x50>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10b      	bne.n	8008200 <StateOff_Run+0x40>
 80081e8:	4b07      	ldr	r3, [pc, #28]	; (8008208 <StateOff_Run+0x48>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d107      	bne.n	8008200 <StateOff_Run+0x40>
		Push_Routine(&imu_ctrl_task.routine, ROUTINE_ID_IMU_TOTAL_FUNCTION);
 80081f0:	2105      	movs	r1, #5
 80081f2:	4808      	ldr	r0, [pc, #32]	; (8008214 <StateOff_Run+0x54>)
 80081f4:	f002 fe5c 	bl	800aeb0 <Push_Routine>
		Transition_State(&imu_ctrl_task.state_machine, e_State_Standby);
 80081f8:	2101      	movs	r1, #1
 80081fa:	4807      	ldr	r0, [pc, #28]	; (8008218 <StateOff_Run+0x58>)
 80081fc:	f002 ff94 	bl	800b128 <Transition_State>
	}

}
 8008200:	bf00      	nop
 8008202:	bd80      	pop	{r7, pc}
 8008204:	240006ec 	.word	0x240006ec
 8008208:	2400000f 	.word	0x2400000f
 800820c:	2400070c 	.word	0x2400070c
 8008210:	24000010 	.word	0x24000010
 8008214:	24000664 	.word	0x24000664
 8008218:	24000630 	.word	0x24000630

0800821c <StateStandby_Run>:

static void StateStandby_Run( )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
	Transition_State(&imu_ctrl_task.state_machine, e_State_Enable);
 8008220:	2102      	movs	r1, #2
 8008222:	4802      	ldr	r0, [pc, #8]	; (800822c <StateStandby_Run+0x10>)
 8008224:	f002 ff80 	bl	800b128 <Transition_State>
}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}
 800822c:	24000630 	.word	0x24000630

08008230 <StateEnable_Ent>:

static void StateEnable_Ent()
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0

}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <StateEnable_Run>:

static void StateEnable_Run( )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
	Run_Routines(&imu_ctrl_task.routine);
 8008244:	4802      	ldr	r0, [pc, #8]	; (8008250 <StateEnable_Run+0x10>)
 8008246:	f002 fda1 	bl	800ad8c <Run_Routines>
}
 800824a:	bf00      	nop
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	24000664 	.word	0x24000664

08008254 <StateEnable_Ext>:

static void StateEnable_Ext()
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0

}
 8008258:	bf00      	nop
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <StateError_Run>:

static void StateError_Run()
{
 8008262:	b480      	push	{r7}
 8008264:	af00      	add	r7, sp, #0

}
 8008266:	bf00      	nop
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <Initial_ICM>:

static void Initial_ICM(uint8_t* aaa)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
	*aaa = 13;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	220d      	movs	r2, #13
 800827c:	701a      	strb	r2, [r3, #0]
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
	...

0800828c <Init_Imu_Ctrl>:
 |_|  |_\__,_|_|_||_|

 */

void Init_Imu_Ctrl(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b094      	sub	sp, #80	; 0x50
 8008290:	af04      	add	r7, sp, #16
    Init_Task(&imu_ctrl_task);
 8008292:	4896      	ldr	r0, [pc, #600]	; (80084ec <Init_Imu_Ctrl+0x260>)
 8008294:	f002 ff6a 	bl	800b16c <Init_Task>

	/* State Definition */
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Off,      NULL,   			StateOff_Run,       NULL,         		 true);
 8008298:	1d38      	adds	r0, r7, #4
 800829a:	2300      	movs	r3, #0
 800829c:	4a94      	ldr	r2, [pc, #592]	; (80084f0 <Init_Imu_Ctrl+0x264>)
 800829e:	2100      	movs	r1, #0
 80082a0:	f002 fe84 	bl	800afac <Create_State_Entity>
 80082a4:	2301      	movs	r3, #1
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	1d3b      	adds	r3, r7, #4
 80082ae:	cb0c      	ldmia	r3, {r2, r3}
 80082b0:	2100      	movs	r1, #0
 80082b2:	488e      	ldr	r0, [pc, #568]	; (80084ec <Init_Imu_Ctrl+0x260>)
 80082b4:	f002 ff79 	bl	800b1aa <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Standby,  NULL,   			StateStandby_Run,	NULL,         		 false);
 80082b8:	f107 0010 	add.w	r0, r7, #16
 80082bc:	2300      	movs	r3, #0
 80082be:	4a8d      	ldr	r2, [pc, #564]	; (80084f4 <Init_Imu_Ctrl+0x268>)
 80082c0:	2100      	movs	r1, #0
 80082c2:	f002 fe73 	bl	800afac <Create_State_Entity>
 80082c6:	2300      	movs	r3, #0
 80082c8:	9301      	str	r3, [sp, #4]
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	f107 0310 	add.w	r3, r7, #16
 80082d2:	cb0c      	ldmia	r3, {r2, r3}
 80082d4:	2101      	movs	r1, #1
 80082d6:	4885      	ldr	r0, [pc, #532]	; (80084ec <Init_Imu_Ctrl+0x260>)
 80082d8:	f002 ff67 	bl	800b1aa <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Enable,   StateEnable_Ent,  	StateEnable_Run, 	StateEnable_Ext,	 false);
 80082dc:	f107 001c 	add.w	r0, r7, #28
 80082e0:	4b85      	ldr	r3, [pc, #532]	; (80084f8 <Init_Imu_Ctrl+0x26c>)
 80082e2:	4a86      	ldr	r2, [pc, #536]	; (80084fc <Init_Imu_Ctrl+0x270>)
 80082e4:	4986      	ldr	r1, [pc, #536]	; (8008500 <Init_Imu_Ctrl+0x274>)
 80082e6:	f002 fe61 	bl	800afac <Create_State_Entity>
 80082ea:	2300      	movs	r3, #0
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	f107 031c 	add.w	r3, r7, #28
 80082f6:	cb0c      	ldmia	r3, {r2, r3}
 80082f8:	2102      	movs	r1, #2
 80082fa:	487c      	ldr	r0, [pc, #496]	; (80084ec <Init_Imu_Ctrl+0x260>)
 80082fc:	f002 ff55 	bl	800b1aa <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Error,    NULL,			  	StateError_Run,    	NULL,				 false);
 8008300:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008304:	2300      	movs	r3, #0
 8008306:	4a7f      	ldr	r2, [pc, #508]	; (8008504 <Init_Imu_Ctrl+0x278>)
 8008308:	2100      	movs	r1, #0
 800830a:	f002 fe4f 	bl	800afac <Create_State_Entity>
 800830e:	2300      	movs	r3, #0
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800831a:	cb0c      	ldmia	r3, {r2, r3}
 800831c:	2103      	movs	r1, #3
 800831e:	4873      	ldr	r0, [pc, #460]	; (80084ec <Init_Imu_Ctrl+0x260>)
 8008320:	f002 ff43 	bl	800b1aa <Set_Task_State_Entity>

	/* Routine Definition */
	TASK_CREATE_ROUTINE(&imu_ctrl_task, ROUTINE_ID_IMU_TOTAL_FUNCTION, 		NULL, Run_Total_function, 		NULL);
 8008324:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008328:	2300      	movs	r3, #0
 800832a:	4a77      	ldr	r2, [pc, #476]	; (8008508 <Init_Imu_Ctrl+0x27c>)
 800832c:	2100      	movs	r1, #0
 800832e:	f002 fc99 	bl	800ac64 <Create_Routine_Entity>
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800833a:	cb0c      	ldmia	r3, {r2, r3}
 800833c:	2105      	movs	r1, #5
 800833e:	486b      	ldr	r0, [pc, #428]	; (80084ec <Init_Imu_Ctrl+0x260>)
 8008340:	f002 ff5c 	bl	800b1fc <Set_Task_Routine_Entity>

	/* DOD Definition */
	// DOD
	Create_DOD(TASK_ID_IMU);
 8008344:	2003      	movs	r0, #3
 8008346:	f000 fff1 	bl	800932c <Create_DOD>

	// PDO
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_X, e_Float32, 1, &icm20608g_obj.acc_x);
 800834a:	4b70      	ldr	r3, [pc, #448]	; (800850c <Init_Imu_Ctrl+0x280>)
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	2301      	movs	r3, #1
 8008350:	2207      	movs	r2, #7
 8008352:	2100      	movs	r1, #0
 8008354:	2003      	movs	r0, #3
 8008356:	f001 f801 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Y, e_Float32, 1, &icm20608g_obj.acc_y);
 800835a:	4b6d      	ldr	r3, [pc, #436]	; (8008510 <Init_Imu_Ctrl+0x284>)
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	2301      	movs	r3, #1
 8008360:	2207      	movs	r2, #7
 8008362:	2101      	movs	r1, #1
 8008364:	2003      	movs	r0, #3
 8008366:	f000 fff9 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Z, e_Float32, 1, &icm20608g_obj.acc_z);
 800836a:	4b6a      	ldr	r3, [pc, #424]	; (8008514 <Init_Imu_Ctrl+0x288>)
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	2301      	movs	r3, #1
 8008370:	2207      	movs	r2, #7
 8008372:	2102      	movs	r1, #2
 8008374:	2003      	movs	r0, #3
 8008376:	f000 fff1 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_X, e_Float32, 1, &icm20608g_obj.gyr_x);
 800837a:	4b67      	ldr	r3, [pc, #412]	; (8008518 <Init_Imu_Ctrl+0x28c>)
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	2301      	movs	r3, #1
 8008380:	2207      	movs	r2, #7
 8008382:	2103      	movs	r1, #3
 8008384:	2003      	movs	r0, #3
 8008386:	f000 ffe9 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Y, e_Float32, 1, &icm20608g_obj.gyr_y);
 800838a:	4b64      	ldr	r3, [pc, #400]	; (800851c <Init_Imu_Ctrl+0x290>)
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	2301      	movs	r3, #1
 8008390:	2207      	movs	r2, #7
 8008392:	2104      	movs	r1, #4
 8008394:	2003      	movs	r0, #3
 8008396:	f000 ffe1 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Z, e_Float32, 1, &icm20608g_obj.gyr_z);
 800839a:	4b61      	ldr	r3, [pc, #388]	; (8008520 <Init_Imu_Ctrl+0x294>)
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	2301      	movs	r3, #1
 80083a0:	2207      	movs	r2, #7
 80083a2:	2105      	movs	r1, #5
 80083a4:	2003      	movs	r0, #3
 80083a6:	f000 ffd9 	bl	800935c <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC,          e_Float32, 1, &thigh_angle_params.deg_acc);
 80083aa:	4b5e      	ldr	r3, [pc, #376]	; (8008524 <Init_Imu_Ctrl+0x298>)
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	2301      	movs	r3, #1
 80083b0:	2207      	movs	r2, #7
 80083b2:	210d      	movs	r1, #13
 80083b4:	2003      	movs	r0, #3
 80083b6:	f000 ffd1 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR,          e_Float32, 1, &thigh_angle_params.deg_gyr);
 80083ba:	4b5b      	ldr	r3, [pc, #364]	; (8008528 <Init_Imu_Ctrl+0x29c>)
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	2301      	movs	r3, #1
 80083c0:	2207      	movs	r2, #7
 80083c2:	210e      	movs	r1, #14
 80083c4:	2003      	movs	r0, #3
 80083c6:	f000 ffc9 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC_FILTERED, e_Float32, 1, &thigh_angle_params.deg_acc_filtered);
 80083ca:	4b58      	ldr	r3, [pc, #352]	; (800852c <Init_Imu_Ctrl+0x2a0>)
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	2301      	movs	r3, #1
 80083d0:	2207      	movs	r2, #7
 80083d2:	210f      	movs	r1, #15
 80083d4:	2003      	movs	r0, #3
 80083d6:	f000 ffc1 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR_FILTERED, e_Float32, 1, &thigh_angle_params.deg_gyr_filtered);
 80083da:	4b55      	ldr	r3, [pc, #340]	; (8008530 <Init_Imu_Ctrl+0x2a4>)
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2301      	movs	r3, #1
 80083e0:	2207      	movs	r2, #7
 80083e2:	2110      	movs	r1, #16
 80083e4:	2003      	movs	r0, #3
 80083e6:	f000 ffb9 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_DEG_TVCF,             e_Float32, 1, &thigh_angle_params.deg_tvcf_filtered);
 80083ea:	4b52      	ldr	r3, [pc, #328]	; (8008534 <Init_Imu_Ctrl+0x2a8>)
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	2301      	movs	r3, #1
 80083f0:	2207      	movs	r2, #7
 80083f2:	2111      	movs	r1, #17
 80083f4:	2003      	movs	r0, #3
 80083f6:	f000 ffb1 	bl	800935c <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_WALKING_STATE, 	e_UInt8, 	1, &walking);
 80083fa:	4b4f      	ldr	r3, [pc, #316]	; (8008538 <Init_Imu_Ctrl+0x2ac>)
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	2301      	movs	r3, #1
 8008400:	2201      	movs	r2, #1
 8008402:	2106      	movs	r1, #6
 8008404:	2003      	movs	r0, #3
 8008406:	f000 ffa9 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GAIT_PHASE, 		e_Float32,  1, &gait_params.gait_phase);
 800840a:	4b4c      	ldr	r3, [pc, #304]	; (800853c <Init_Imu_Ctrl+0x2b0>)
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	2301      	movs	r3, #1
 8008410:	2207      	movs	r2, #7
 8008412:	2107      	movs	r1, #7
 8008414:	2003      	movs	r0, #3
 8008416:	f000 ffa1 	bl	800935c <Create_PDO>

	// Assist mode //
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_P, e_Float32, 1, &plantar_params.Plantar_ref);
 800841a:	4b49      	ldr	r3, [pc, #292]	; (8008540 <Init_Imu_Ctrl+0x2b4>)
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	2301      	movs	r3, #1
 8008420:	2207      	movs	r2, #7
 8008422:	210b      	movs	r1, #11
 8008424:	2003      	movs	r0, #3
 8008426:	f000 ff99 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_D, e_Float32, 1, &dorsi_params.Dorsi_ref);
 800842a:	4b46      	ldr	r3, [pc, #280]	; (8008544 <Init_Imu_Ctrl+0x2b8>)
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	2301      	movs	r3, #1
 8008430:	2207      	movs	r2, #7
 8008432:	210c      	movs	r1, #12
 8008434:	2003      	movs	r0, #3
 8008436:	f000 ff91 	bl	800935c <Create_PDO>

	// SDO
	MSG_COMMON_SDO_CREATE(TASK_ID_IMU)
 800843a:	4b43      	ldr	r3, [pc, #268]	; (8008548 <Init_Imu_Ctrl+0x2bc>)
 800843c:	2201      	movs	r2, #1
 800843e:	2100      	movs	r1, #0
 8008440:	2003      	movs	r0, #3
 8008442:	f001 f845 	bl	80094d0 <Create_SDO>
 8008446:	4b41      	ldr	r3, [pc, #260]	; (800854c <Init_Imu_Ctrl+0x2c0>)
 8008448:	2201      	movs	r2, #1
 800844a:	2101      	movs	r1, #1
 800844c:	2003      	movs	r0, #3
 800844e:	f001 f83f 	bl	80094d0 <Create_SDO>
 8008452:	4b3f      	ldr	r3, [pc, #252]	; (8008550 <Init_Imu_Ctrl+0x2c4>)
 8008454:	2201      	movs	r2, #1
 8008456:	2102      	movs	r1, #2
 8008458:	2003      	movs	r0, #3
 800845a:	f001 f839 	bl	80094d0 <Create_SDO>
 800845e:	4b3d      	ldr	r3, [pc, #244]	; (8008554 <Init_Imu_Ctrl+0x2c8>)
 8008460:	2201      	movs	r2, #1
 8008462:	2103      	movs	r1, #3
 8008464:	2003      	movs	r0, #3
 8008466:	f001 f833 	bl	80094d0 <Create_SDO>





	Initial_ICM(&ads);
 800846a:	483b      	ldr	r0, [pc, #236]	; (8008558 <Init_Imu_Ctrl+0x2cc>)
 800846c:	f7ff ff00 	bl	8008270 <Initial_ICM>
	err_chk_icm = IsDevReady_ICM(&icm20608g_obj);
 8008470:	483a      	ldr	r0, [pc, #232]	; (800855c <Init_Imu_Ctrl+0x2d0>)
 8008472:	f7ff f831 	bl	80074d8 <IsDevReady_ICM>
 8008476:	4603      	mov	r3, r0
 8008478:	461a      	mov	r2, r3
 800847a:	4b39      	ldr	r3, [pc, #228]	; (8008560 <Init_Imu_Ctrl+0x2d4>)
 800847c:	701a      	strb	r2, [r3, #0]
	Initialize_ICM(&icm20608g_obj);
 800847e:	4837      	ldr	r0, [pc, #220]	; (800855c <Init_Imu_Ctrl+0x2d0>)
 8008480:	f7ff f814 	bl	80074ac <Initialize_ICM>
	Write_Data_ICM(&icm20608g_obj);
 8008484:	4835      	ldr	r0, [pc, #212]	; (800855c <Init_Imu_Ctrl+0x2d0>)
 8008486:	f7ff f8d7 	bl	8007638 <Write_Data_ICM>

	err_chk_bm = IsDevReady_BM(&bm1422agmv_obj);
 800848a:	4836      	ldr	r0, [pc, #216]	; (8008564 <Init_Imu_Ctrl+0x2d8>)
 800848c:	f7fe fabc 	bl	8006a08 <IsDevReady_BM>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	4b34      	ldr	r3, [pc, #208]	; (8008568 <Init_Imu_Ctrl+0x2dc>)
 8008496:	701a      	strb	r2, [r3, #0]
	Initialize_BM(&bm1422agmv_obj);
 8008498:	4832      	ldr	r0, [pc, #200]	; (8008564 <Init_Imu_Ctrl+0x2d8>)
 800849a:	f7fe fa9f 	bl	80069dc <Initialize_BM>
	Write_Data_BM(&bm1422agmv_obj);
 800849e:	4831      	ldr	r0, [pc, #196]	; (8008564 <Init_Imu_Ctrl+0x2d8>)
 80084a0:	f7fe fb11 	bl	8006ac6 <Write_Data_BM>

	Reset_Parameters();
 80084a4:	f7ff fa52 	bl	800794c <Reset_Parameters>
	attach_plane = e_CM_TEST;		// WIDM Attached Plane Selection
 80084a8:	4b30      	ldr	r3, [pc, #192]	; (800856c <Init_Imu_Ctrl+0x2e0>)
 80084aa:	2202      	movs	r2, #2
 80084ac:	701a      	strb	r2, [r3, #0]
	Set_Init_Parameters(&norm_params, &gait_params, &fuzzy_params, &th_params, &plantar_params, &dorsi_params, &assist_params);
 80084ae:	4b30      	ldr	r3, [pc, #192]	; (8008570 <Init_Imu_Ctrl+0x2e4>)
 80084b0:	9302      	str	r3, [sp, #8]
 80084b2:	4b30      	ldr	r3, [pc, #192]	; (8008574 <Init_Imu_Ctrl+0x2e8>)
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	4b30      	ldr	r3, [pc, #192]	; (8008578 <Init_Imu_Ctrl+0x2ec>)
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	4b30      	ldr	r3, [pc, #192]	; (800857c <Init_Imu_Ctrl+0x2f0>)
 80084bc:	4a30      	ldr	r2, [pc, #192]	; (8008580 <Init_Imu_Ctrl+0x2f4>)
 80084be:	4931      	ldr	r1, [pc, #196]	; (8008584 <Init_Imu_Ctrl+0x2f8>)
 80084c0:	4831      	ldr	r0, [pc, #196]	; (8008588 <Init_Imu_Ctrl+0x2fc>)
 80084c2:	f000 f88d 	bl	80085e0 <Set_Init_Parameters>
	Calculate_Initial_Thigh_Angle(&thigh_angle_params, &norm_params, &icm20608g_obj, &sensor_params, attach_plane);
 80084c6:	4b29      	ldr	r3, [pc, #164]	; (800856c <Init_Imu_Ctrl+0x2e0>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4b2f      	ldr	r3, [pc, #188]	; (800858c <Init_Imu_Ctrl+0x300>)
 80084ce:	4a23      	ldr	r2, [pc, #140]	; (800855c <Init_Imu_Ctrl+0x2d0>)
 80084d0:	492d      	ldr	r1, [pc, #180]	; (8008588 <Init_Imu_Ctrl+0x2fc>)
 80084d2:	482f      	ldr	r0, [pc, #188]	; (8008590 <Init_Imu_Ctrl+0x304>)
 80084d4:	f7ff fac9 	bl	8007a6a <Calculate_Initial_Thigh_Angle>



	/* Callback Allocation */
    if (Start_TIM3() > 0) {
 80084d8:	f7ff f9fa 	bl	80078d0 <Start_TIM3>
        //TODO: ERROR PROCESS
    }
    ioif_tim3_callback_ptr = Run_Imu_Ctrl;
 80084dc:	4b2d      	ldr	r3, [pc, #180]	; (8008594 <Init_Imu_Ctrl+0x308>)
 80084de:	4a2e      	ldr	r2, [pc, #184]	; (8008598 <Init_Imu_Ctrl+0x30c>)
 80084e0:	601a      	str	r2, [r3, #0]
}
 80084e2:	bf00      	nop
 80084e4:	3740      	adds	r7, #64	; 0x40
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	24000624 	.word	0x24000624
 80084f0:	080081c1 	.word	0x080081c1
 80084f4:	0800821d 	.word	0x0800821d
 80084f8:	08008255 	.word	0x08008255
 80084fc:	08008241 	.word	0x08008241
 8008500:	08008231 	.word	0x08008231
 8008504:	08008263 	.word	0x08008263
 8008508:	08007f51 	.word	0x08007f51
 800850c:	240006f4 	.word	0x240006f4
 8008510:	240006f8 	.word	0x240006f8
 8008514:	240006fc 	.word	0x240006fc
 8008518:	24000700 	.word	0x24000700
 800851c:	24000704 	.word	0x24000704
 8008520:	24000708 	.word	0x24000708
 8008524:	240007d8 	.word	0x240007d8
 8008528:	240007dc 	.word	0x240007dc
 800852c:	240007e0 	.word	0x240007e0
 8008530:	240007e4 	.word	0x240007e4
 8008534:	240007e8 	.word	0x240007e8
 8008538:	24000870 	.word	0x24000870
 800853c:	240007a0 	.word	0x240007a0
 8008540:	24000840 	.word	0x24000840
 8008544:	2400085c 	.word	0x2400085c
 8008548:	08008021 	.word	0x08008021
 800854c:	08008059 	.word	0x08008059
 8008550:	08008091 	.word	0x08008091
 8008554:	08008109 	.word	0x08008109
 8008558:	24000878 	.word	0x24000878
 800855c:	240006ec 	.word	0x240006ec
 8008560:	2400000d 	.word	0x2400000d
 8008564:	2400070c 	.word	0x2400070c
 8008568:	2400000e 	.word	0x2400000e
 800856c:	24000871 	.word	0x24000871
 8008570:	24000864 	.word	0x24000864
 8008574:	24000848 	.word	0x24000848
 8008578:	2400082c 	.word	0x2400082c
 800857c:	2400081c 	.word	0x2400081c
 8008580:	240007a8 	.word	0x240007a8
 8008584:	2400079c 	.word	0x2400079c
 8008588:	24000768 	.word	0x24000768
 800858c:	24000720 	.word	0x24000720
 8008590:	240007d4 	.word	0x240007d4
 8008594:	2400061c 	.word	0x2400061c
 8008598:	0800859d 	.word	0x0800859d

0800859c <Run_Imu_Ctrl>:




void Run_Imu_Ctrl(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
	uint32_t imu_ctrl_loop_time_cnt_1 = DWT->CYCCNT;
 80085a2:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <Run_Imu_Ctrl+0x34>)
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	607b      	str	r3, [r7, #4]

	/*Run Device */
	Run_Task(&imu_ctrl_task);
 80085a8:	480a      	ldr	r0, [pc, #40]	; (80085d4 <Run_Imu_Ctrl+0x38>)
 80085aa:	f002 fdf1 	bl	800b190 <Run_Task>

	uint32_t imu_ctrl_loop_time_cnt_2 = DWT->CYCCNT;
 80085ae:	4b08      	ldr	r3, [pc, #32]	; (80085d0 <Run_Imu_Ctrl+0x34>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	603b      	str	r3, [r7, #0]

	/* Elapsed Time Check */
	imu_us = (imu_ctrl_loop_time_cnt_2 - imu_ctrl_loop_time_cnt_1)/480;	// in microsecond
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	4a07      	ldr	r2, [pc, #28]	; (80085d8 <Run_Imu_Ctrl+0x3c>)
 80085bc:	fba2 2303 	umull	r2, r3, r2, r3
 80085c0:	0a1b      	lsrs	r3, r3, #8
 80085c2:	4a06      	ldr	r2, [pc, #24]	; (80085dc <Run_Imu_Ctrl+0x40>)
 80085c4:	6013      	str	r3, [r2, #0]
}
 80085c6:	bf00      	nop
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	e0001000 	.word	0xe0001000
 80085d4:	24000624 	.word	0x24000624
 80085d8:	88888889 	.word	0x88888889
 80085dc:	24000874 	.word	0x24000874

080085e0 <Set_Init_Parameters>:

*/

/* Set Specific Value */
void Set_Init_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params, Fuzzy_Params* t_fuzzy_params, Threshold_Params* t_th_params, Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
	t_norm_params->A_deg = 30.0; //30
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4a37      	ldr	r2, [pc, #220]	; (80086d0 <Set_Init_Parameters+0xf0>)
 80085f2:	62da      	str	r2, [r3, #44]	; 0x2c
	t_norm_params->A_vel = 400.0; //400
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4a37      	ldr	r2, [pc, #220]	; (80086d4 <Set_Init_Parameters+0xf4>)
 80085f8:	631a      	str	r2, [r3, #48]	; 0x30

	t_gait_params->gait_period 	  = 1000;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008600:	801a      	strh	r2, [r3, #0]
	t_gait_params->gait_phase 	  = -100.0;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	4a34      	ldr	r2, [pc, #208]	; (80086d8 <Set_Init_Parameters+0xf8>)
 8008606:	605a      	str	r2, [r3, #4]
	t_gait_params->gait_phase_pre = -100.0;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4a33      	ldr	r2, [pc, #204]	; (80086d8 <Set_Init_Parameters+0xf8>)
 800860c:	609a      	str	r2, [r3, #8]

	t_fuzzy_params->wl 		= 0.5;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008614:	615a      	str	r2, [r3, #20]
	t_fuzzy_params->wh 		= 10.0;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a30      	ldr	r2, [pc, #192]	; (80086dc <Set_Init_Parameters+0xfc>)
 800861a:	619a      	str	r2, [r3, #24]
	t_fuzzy_params->var[0] 	= 8.0;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8008622:	61da      	str	r2, [r3, #28]
	t_fuzzy_params->var[1] 	= 30.0;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a2a      	ldr	r2, [pc, #168]	; (80086d0 <Set_Init_Parameters+0xf0>)
 8008628:	621a      	str	r2, [r3, #32]
	t_fuzzy_params->var[2] 	= 5.8;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a2c      	ldr	r2, [pc, #176]	; (80086e0 <Set_Init_Parameters+0x100>)
 800862e:	625a      	str	r2, [r3, #36]	; 0x24
	t_fuzzy_params->var[3] 	= 320.0;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a2c      	ldr	r2, [pc, #176]	; (80086e4 <Set_Init_Parameters+0x104>)
 8008634:	629a      	str	r2, [r3, #40]	; 0x28

	t_th_params->deg_th_start	= 5.0;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	4a2b      	ldr	r2, [pc, #172]	; (80086e8 <Set_Init_Parameters+0x108>)
 800863a:	601a      	str	r2, [r3, #0]
	t_th_params->vel_th_start	= 20.0;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	4a2b      	ldr	r2, [pc, #172]	; (80086ec <Set_Init_Parameters+0x10c>)
 8008640:	605a      	str	r2, [r3, #4]
	t_th_params->deg_th_stop 	= 5.0;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	4a28      	ldr	r2, [pc, #160]	; (80086e8 <Set_Init_Parameters+0x108>)
 8008646:	609a      	str	r2, [r3, #8]
	t_th_params->vel_th_stop 	= 3.0;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	4a29      	ldr	r2, [pc, #164]	; (80086f0 <Set_Init_Parameters+0x110>)
 800864c:	60da      	str	r2, [r3, #12]

	t_plantar_params->t_P_start	  = 35;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2223      	movs	r2, #35	; 0x23
 8008652:	801a      	strh	r2, [r3, #0]
	t_plantar_params->t_r_P_end   = 35;
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	2223      	movs	r2, #35	; 0x23
 8008658:	805a      	strh	r2, [r3, #2]
	t_plantar_params->t_c_P_end   = 55;
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2237      	movs	r2, #55	; 0x37
 800865e:	809a      	strh	r2, [r3, #4]
	t_plantar_params->t_f_P_end   = 60;
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	223c      	movs	r2, #60	; 0x3c
 8008664:	80da      	strh	r2, [r3, #6]
	t_plantar_params->t_r_P       = 100;
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	2264      	movs	r2, #100	; 0x64
 800866a:	811a      	strh	r2, [r3, #8]
	t_plantar_params->t_c_P 	  = 400;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008672:	815a      	strh	r2, [r3, #10]
	t_plantar_params->t_f_P 	  = 100;
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	2264      	movs	r2, #100	; 0x64
 8008678:	819a      	strh	r2, [r3, #12]
	t_plantar_params->Amplitude_P = 60.0;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <Set_Init_Parameters+0x114>)
 800867e:	619a      	str	r2, [r3, #24]

	t_dorsi_params->t_D_start 	  = 50;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	2232      	movs	r2, #50	; 0x32
 8008684:	801a      	strh	r2, [r3, #0]
	t_dorsi_params->t_r_D_end 	  = 53;
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	2235      	movs	r2, #53	; 0x35
 800868a:	805a      	strh	r2, [r3, #2]
	t_dorsi_params->t_c_D_end 	  = 70;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	2246      	movs	r2, #70	; 0x46
 8008690:	809a      	strh	r2, [r3, #4]
	t_dorsi_params->t_f_D_end 	  = 80;
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	2250      	movs	r2, #80	; 0x50
 8008696:	80da      	strh	r2, [r3, #6]
	t_dorsi_params->t_r_D 		  = 100;
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	2264      	movs	r2, #100	; 0x64
 800869c:	811a      	strh	r2, [r3, #8]
	t_dorsi_params->t_c_D 		  = 400;
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80086a4:	815a      	strh	r2, [r3, #10]
	t_dorsi_params->t_f_D 		  = 100;
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2264      	movs	r2, #100	; 0x64
 80086aa:	819a      	strh	r2, [r3, #12]
	t_dorsi_params->Amplitude_D   = 60.0;
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	4a11      	ldr	r2, [pc, #68]	; (80086f4 <Set_Init_Parameters+0x114>)
 80086b0:	619a      	str	r2, [r3, #24]

	t_assist_params->t_r_limit 	 = 20;
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	2214      	movs	r2, #20
 80086b6:	801a      	strh	r2, [r3, #0]
	t_assist_params->t_f_limit 	 = 20;
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2214      	movs	r2, #20
 80086bc:	805a      	strh	r2, [r3, #2]
	t_assist_params->ref_shape 	 = TRAPEZOIDAL;
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	2200      	movs	r2, #0
 80086c2:	711a      	strb	r2, [r3, #4]
}
 80086c4:	bf00      	nop
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	41f00000 	.word	0x41f00000
 80086d4:	43c80000 	.word	0x43c80000
 80086d8:	c2c80000 	.word	0xc2c80000
 80086dc:	41200000 	.word	0x41200000
 80086e0:	40b9999a 	.word	0x40b9999a
 80086e4:	43a00000 	.word	0x43a00000
 80086e8:	40a00000 	.word	0x40a00000
 80086ec:	41a00000 	.word	0x41a00000
 80086f0:	40400000 	.word	0x40400000
 80086f4:	42700000 	.word	0x42700000

080086f8 <Save_Previous_Value>:


*/

void Save_Previous_Value(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
	t_sensor_params->accX[1] = t_sensor_params->accX[0];
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	605a      	str	r2, [r3, #4]
	t_sensor_params->accY[1] = t_sensor_params->accY[0];
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	60da      	str	r2, [r3, #12]
	t_sensor_params->gyrZ[1] = t_sensor_params->gyrZ[0];
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	62da      	str	r2, [r3, #44]	; 0x2c

	t_thigh_angle_params->vel_raw[1] = t_thigh_angle_params->vel_raw[0];
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	699a      	ldr	r2, [r3, #24]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	61da      	str	r2, [r3, #28]

	t_thigh_angle_params->deg_tvcf[1] = t_thigh_angle_params->deg_tvcf[0];
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	6a1a      	ldr	r2, [r3, #32]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	625a      	str	r2, [r3, #36]	; 0x24

	t_thigh_angle_params->deg_LPF_1st[1] = t_thigh_angle_params->deg_LPF_1st[0];
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	62da      	str	r2, [r3, #44]	; 0x2c
	t_thigh_angle_params->deg_LPF_2nd[1] = t_thigh_angle_params->deg_LPF_2nd[0];
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	635a      	str	r2, [r3, #52]	; 0x34
	t_thigh_angle_params->vel_LPF_1st[1] = t_thigh_angle_params->vel_LPF_1st[0];
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	63da      	str	r2, [r3, #60]	; 0x3c
	t_thigh_angle_params->vel_LPF_2nd[1] = t_thigh_angle_params->vel_LPF_2nd[0];
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	645a      	str	r2, [r3, #68]	; 0x44

	t_gait_params->gait_phase_pre = t_gait_params->gait_phase;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	609a      	str	r2, [r3, #8]
}
 8008754:	bf00      	nop
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <Calculate_Square_Root_Sum>:
                      |___/              |___/

*/

float Calculate_Square_Root_Sum(float t_x, float t_y)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	ed2d 8b02 	vpush	{d8}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	ed87 0a01 	vstr	s0, [r7, #4]
 800876e:	edc7 0a00 	vstr	s1, [r7]
	return sqrt(pow(t_x, 2) + pow(t_y, 2));
 8008772:	edd7 7a01 	vldr	s15, [r7, #4]
 8008776:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800877a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800877e:	eeb0 0b47 	vmov.f64	d0, d7
 8008782:	f004 f8d9 	bl	800c938 <pow>
 8008786:	eeb0 8b40 	vmov.f64	d8, d0
 800878a:	edd7 7a00 	vldr	s15, [r7]
 800878e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008792:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008796:	eeb0 0b47 	vmov.f64	d0, d7
 800879a:	f004 f8cd 	bl	800c938 <pow>
 800879e:	eeb0 7b40 	vmov.f64	d7, d0
 80087a2:	ee38 7b07 	vadd.f64	d7, d8, d7
 80087a6:	eeb0 0b47 	vmov.f64	d0, d7
 80087aa:	f003 fd35 	bl	800c218 <sqrt>
 80087ae:	eeb0 7b40 	vmov.f64	d7, d0
 80087b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80087b6:	eeb0 0a67 	vmov.f32	s0, s15
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	ecbd 8b02 	vpop	{d8}
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <Calculate_Absolute_Value_Float>:

float Calculate_Absolute_Value_Float(float t_value)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	ed87 0a01 	vstr	s0, [r7, #4]
	return fabs(t_value);
 80087ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80087d2:	eef0 7ae7 	vabs.f32	s15, s15
}
 80087d6:	eeb0 0a67 	vmov.f32	s0, s15
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	0000      	movs	r0, r0
	...

080087e8 <Calculate_Delta>:

float Calculate_Delta(float t_current, float t_previous)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80087f2:	edc7 0a00 	vstr	s1, [r7]
	return (t_current - t_previous) / IMU_CONTROL_PERIOD;
 80087f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80087fa:	edd7 7a00 	vldr	s15, [r7]
 80087fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008802:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008806:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8008820 <Calculate_Delta+0x38>
 800880a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800880e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8008812:	eeb0 0a67 	vmov.f32	s0, s15
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	d2f1a9fc 	.word	0xd2f1a9fc
 8008824:	3f50624d 	.word	0x3f50624d

08008828 <Calculate_xbar_Update_mu>:

void Calculate_xbar_Update_mu(float t_var_i, float t_fuzzy_input, float* t_mu)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af00      	add	r7, sp, #0
 800882e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008832:	edc7 0a02 	vstr	s1, [r7, #8]
 8008836:	6078      	str	r0, [r7, #4]
	/* t_var_i is measurement value (initially set value in Set_Init_Parameters) */
	float t_xoi = 3 * t_var_i;											// Threshold Value (maybe middle value)
 8008838:	edd7 7a03 	vldr	s15, [r7, #12]
 800883c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008844:	edc7 7a07 	vstr	s15, [r7, #28]
	float t_si = log(3) / t_var_i;										// Sensor Sensitivity (natural logarithm)
 8008848:	edd7 7a03 	vldr	s15, [r7, #12]
 800884c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008850:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 80088c0 <Calculate_xbar_Update_mu+0x98>
 8008854:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008858:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800885c:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_xbar = 0.5 * (1 + tanh(t_si * (t_fuzzy_input - t_xoi)));	// Fuzzy Logic Relational Expressions
 8008860:	ed97 7a02 	vldr	s14, [r7, #8]
 8008864:	edd7 7a07 	vldr	s15, [r7, #28]
 8008868:	ee37 7a67 	vsub.f32	s14, s14, s15
 800886c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008874:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008878:	eeb0 0b47 	vmov.f64	d0, d7
 800887c:	f003 fdf0 	bl	800c460 <tanh>
 8008880:	eeb0 7b40 	vmov.f64	d7, d0
 8008884:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008888:	ee37 7b06 	vadd.f64	d7, d7, d6
 800888c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008890:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008894:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008898:	edc7 7a05 	vstr	s15, [r7, #20]
	*t_mu *= (1 - t_xbar);	// Update mu for TVCF cutoff frequency(wc)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	ed93 7a00 	vldr	s14, [r3]
 80088a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80088aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80088ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	edc3 7a00 	vstr	s15, [r3]
}
 80088b8:	bf00      	nop
 80088ba:	3720      	adds	r7, #32
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	7aad030b 	.word	0x7aad030b
 80088c4:	3ff193ea 	.word	0x3ff193ea

080088c8 <Generate_Fuzzy_Input>:

/*
*Generate Fuzzy Logic Input (Acc, Jerk, Angular Velocity, Angular Accerleration)
*/
void Generate_Fuzzy_Input(Sensor_Params* t_sensor_params, Fuzzy_Params* t_fuzzy_params)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
	float t_jerk_x = Calculate_Delta(t_sensor_params->accX[0], t_sensor_params->accX[1]);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	edd3 7a00 	vldr	s15, [r3]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	ed93 7a01 	vldr	s14, [r3, #4]
 80088de:	eef0 0a47 	vmov.f32	s1, s14
 80088e2:	eeb0 0a67 	vmov.f32	s0, s15
 80088e6:	f7ff ff7f 	bl	80087e8 <Calculate_Delta>
 80088ea:	ed87 0a05 	vstr	s0, [r7, #20]
	float t_jerk_y = Calculate_Delta(t_sensor_params->accY[0], t_sensor_params->accY[1]);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80088fa:	eef0 0a47 	vmov.f32	s1, s14
 80088fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008902:	f7ff ff71 	bl	80087e8 <Calculate_Delta>
 8008906:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_wdot_z = Calculate_Delta(t_sensor_params->gyrZ[0], t_sensor_params->gyrZ[1]);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8008916:	eef0 0a47 	vmov.f32	s1, s14
 800891a:	eeb0 0a67 	vmov.f32	s0, s15
 800891e:	f7ff ff63 	bl	80087e8 <Calculate_Delta>
 8008922:	ed87 0a03 	vstr	s0, [r7, #12]

	// absolute ACC
	t_fuzzy_params->Fuzzy_input[0] = Calculate_Square_Root_Sum(t_sensor_params->accX[0], t_sensor_params->accY[0]);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	edd3 7a00 	vldr	s15, [r3]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008932:	eef0 0a47 	vmov.f32	s1, s14
 8008936:	eeb0 0a67 	vmov.f32	s0, s15
 800893a:	f7ff ff11 	bl	8008760 <Calculate_Square_Root_Sum>
 800893e:	eef0 7a40 	vmov.f32	s15, s0
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	edc3 7a00 	vstr	s15, [r3]
	// absolute Jerk
	t_fuzzy_params->Fuzzy_input[1] = Calculate_Square_Root_Sum(t_jerk_x, t_jerk_y);
 8008948:	edd7 0a04 	vldr	s1, [r7, #16]
 800894c:	ed97 0a05 	vldr	s0, [r7, #20]
 8008950:	f7ff ff06 	bl	8008760 <Calculate_Square_Root_Sum>
 8008954:	eef0 7a40 	vmov.f32	s15, s0
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	edc3 7a01 	vstr	s15, [r3, #4]
	// absolute Gyr(Angular Velocity)
	t_fuzzy_params->Fuzzy_input[2] = Calculate_Absolute_Value_Float(t_sensor_params->gyrZ[0]);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008964:	eeb0 0a67 	vmov.f32	s0, s15
 8008968:	f7ff ff2c 	bl	80087c4 <Calculate_Absolute_Value_Float>
 800896c:	eef0 7a40 	vmov.f32	s15, s0
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	edc3 7a02 	vstr	s15, [r3, #8]
	// absolute Wdot(Angular Acceleration)
	t_fuzzy_params->Fuzzy_input[3] = Calculate_Absolute_Value_Float(t_wdot_z);
 8008976:	ed97 0a03 	vldr	s0, [r7, #12]
 800897a:	f7ff ff23 	bl	80087c4 <Calculate_Absolute_Value_Float>
 800897e:	eef0 7a40 	vmov.f32	s15, s0
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8008988:	bf00      	nop
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <Calculate_Fuzzy_Wc>:

/*
*Calculate Wc(CutOff Frequency)
*/
float Calculate_Fuzzy_Wc(Fuzzy_Params* t_fuzzy_params)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	t_fuzzy_params->wc = 0;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f04f 0200 	mov.w	r2, #0
 800899e:	611a      	str	r2, [r3, #16]
	float t_mu = 1;
 80089a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80089a4:	60bb      	str	r3, [r7, #8]

	/* Perform calculations for each fuzzy input (Acc, Jerk, Angular Velocity, Angular Accerleration) */
	for (int i = 0; i < 4; i++) {
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	e019      	b.n	80089e0 <Calculate_Fuzzy_Wc+0x50>
		Calculate_xbar_Update_mu(t_fuzzy_params->var[i], t_fuzzy_params->Fuzzy_input[i], &t_mu);
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3306      	adds	r3, #6
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	3304      	adds	r3, #4
 80089b8:	edd3 7a00 	vldr	s15, [r3]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	ed93 7a00 	vldr	s14, [r3]
 80089c8:	f107 0308 	add.w	r3, r7, #8
 80089cc:	4618      	mov	r0, r3
 80089ce:	eef0 0a47 	vmov.f32	s1, s14
 80089d2:	eeb0 0a67 	vmov.f32	s0, s15
 80089d6:	f7ff ff27 	bl	8008828 <Calculate_xbar_Update_mu>
	for (int i = 0; i < 4; i++) {
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3301      	adds	r3, #1
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	dde2      	ble.n	80089ac <Calculate_Fuzzy_Wc+0x1c>
	}

	t_fuzzy_params->wc = t_mu * (t_fuzzy_params->wh) + (1 - t_mu) * (t_fuzzy_params->wl);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	ed93 7a06 	vldr	s14, [r3, #24]
 80089ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80089f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80089f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	edd3 7a05 	vldr	s15, [r3, #20]
 8008a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	edc3 7a04 	vstr	s15, [r3, #16]

	return t_fuzzy_params->wc;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	ee07 3a90 	vmov	s15, r3
}
 8008a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <Perform_LPF_on_Acc>:

/*
*Low pass filtering for deg_acc
*/
float Perform_LPF_on_Acc(float t_curr_acc, float t_prev_filtered_acc, float t_cutoff_frequency, float t_sampling_Period)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b087      	sub	sp, #28
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	ed87 0a03 	vstr	s0, [r7, #12]
 8008a30:	edc7 0a02 	vstr	s1, [r7, #8]
 8008a34:	ed87 1a01 	vstr	s2, [r7, #4]
 8008a38:	edc7 1a00 	vstr	s3, [r7]
	float filtered_acc = (t_cutoff_frequency * t_sampling_Period * t_curr_acc + t_prev_filtered_acc) / (t_cutoff_frequency * t_sampling_Period + 1);
 8008a3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8008a40:	edd7 7a00 	vldr	s15, [r7]
 8008a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8008a54:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008a58:	ed97 7a01 	vldr	s14, [r7, #4]
 8008a5c:	edd7 7a00 	vldr	s15, [r7]
 8008a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a70:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_acc;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	ee07 3a90 	vmov	s15, r3
}
 8008a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a7e:	371c      	adds	r7, #28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <Perform_HPF_on_Gyro>:

/*
*High pass filtering + Integral for gyr
*/
float Perform_HPF_on_Gyro(float t_curr_gyro, float t_prev_filtered_gyro, float t_cutoff_frequency, float t_sampling_Period)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008a92:	edc7 0a02 	vstr	s1, [r7, #8]
 8008a96:	ed87 1a01 	vstr	s2, [r7, #4]
 8008a9a:	edc7 1a00 	vstr	s3, [r7]
	float filtered_gyro = (t_curr_gyro*t_sampling_Period + t_prev_filtered_gyro) / (t_cutoff_frequency * t_sampling_Period + 1);
 8008a9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8008aa2:	edd7 7a00 	vldr	s15, [r7]
 8008aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008aaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8008aae:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008ab2:	ed97 7a01 	vldr	s14, [r7, #4]
 8008ab6:	edd7 7a00 	vldr	s15, [r7]
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aca:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_gyro;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	ee07 3a90 	vmov	s15, r3
}
 8008ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <Run_TVCF>:

/*
*Function to apply a Time Variant Complementary Filter (TVCF) to an angle
*/
void Run_TVCF(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, float t_cutoff_frequency, float t_sampling_Period, AttachPlane t_attach_plane)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b08a      	sub	sp, #40	; 0x28
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6178      	str	r0, [r7, #20]
 8008aea:	6139      	str	r1, [r7, #16]
 8008aec:	ed87 0a03 	vstr	s0, [r7, #12]
 8008af0:	edc7 0a02 	vstr	s1, [r7, #8]
 8008af4:	4613      	mov	r3, r2
 8008af6:	71fb      	strb	r3, [r7, #7]
	/* Calculate the angle using accelerometer measurements and convert it to degrees */
    /* Thigh Angle Degree */
	float t_deg_acc = 0.0;
 8008af8:	f04f 0300 	mov.w	r3, #0
 8008afc:	627b      	str	r3, [r7, #36]	; 0x24
	float t_deg_acc_filtered_update = 0.0;
 8008afe:	f04f 0300 	mov.w	r3, #0
 8008b02:	623b      	str	r3, [r7, #32]
	float t_deg_gyr_filtered_update = 0.0;
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	61fb      	str	r3, [r7, #28]
	float t_deg_tvcf = 0.0;
 8008b0a:	f04f 0300 	mov.w	r3, #0
 8008b0e:	61bb      	str	r3, [r7, #24]

	t_deg_acc = Get_Angle_Scenario(t_sensor_params, t_attach_plane);
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6978      	ldr	r0, [r7, #20]
 8008b16:	f000 faf3 	bl	8009100 <Get_Angle_Scenario>
 8008b1a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	/* Apply Low Pass Filter (LPF) on accelerometer angle */
	t_deg_acc_filtered_update = Perform_LPF_on_Acc(t_deg_acc, t_thigh_angle_params->deg_acc_filtered, t_cutoff_frequency, t_sampling_Period);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	edd3 7a03 	vldr	s15, [r3, #12]
 8008b24:	edd7 1a02 	vldr	s3, [r7, #8]
 8008b28:	ed97 1a03 	vldr	s2, [r7, #12]
 8008b2c:	eef0 0a67 	vmov.f32	s1, s15
 8008b30:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8008b34:	f7ff ff77 	bl	8008a26 <Perform_LPF_on_Acc>
 8008b38:	ed87 0a08 	vstr	s0, [r7, #32]

	/* Apply High Pass Filter (HPF) on gyroscope measurements */
	t_deg_gyr_filtered_update = Perform_HPF_on_Gyro(t_sensor_params->gyrZ[0], t_thigh_angle_params->deg_gyr_filtered, t_cutoff_frequency, t_sampling_Period);
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	ed93 7a04 	vldr	s14, [r3, #16]
 8008b48:	edd7 1a02 	vldr	s3, [r7, #8]
 8008b4c:	ed97 1a03 	vldr	s2, [r7, #12]
 8008b50:	eef0 0a47 	vmov.f32	s1, s14
 8008b54:	eeb0 0a67 	vmov.f32	s0, s15
 8008b58:	f7ff ff96 	bl	8008a88 <Perform_HPF_on_Gyro>
 8008b5c:	ed87 0a07 	vstr	s0, [r7, #28]

	/* Combine filtered accelerometer and gyroscope measurements */
	t_deg_tvcf = t_deg_acc_filtered_update + t_deg_gyr_filtered_update;
 8008b60:	ed97 7a08 	vldr	s14, [r7, #32]
 8008b64:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b6c:	edc7 7a06 	vstr	s15, [r7, #24]

	t_thigh_angle_params->deg_acc_filtered = t_deg_acc_filtered_update;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	6a3a      	ldr	r2, [r7, #32]
 8008b74:	60da      	str	r2, [r3, #12]
	t_thigh_angle_params->deg_gyr_filtered = t_deg_gyr_filtered_update;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	611a      	str	r2, [r3, #16]
	t_thigh_angle_params->deg_tvcf_filtered = t_deg_tvcf;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	615a      	str	r2, [r3, #20]
}
 8008b82:	bf00      	nop
 8008b84:	3728      	adds	r7, #40	; 0x28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <Get_Max_Float>:

/*
*Get Max or Min Value between two variables for Normalization
*/
float Get_Max_Float(float t_x, float t_y)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	ed87 0a01 	vstr	s0, [r7, #4]
 8008b94:	edc7 0a00 	vstr	s1, [r7]
	return (t_x > t_y) ? t_x: t_y;
 8008b98:	ed97 7a01 	vldr	s14, [r7, #4]
 8008b9c:	edd7 7a00 	vldr	s15, [r7]
 8008ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba8:	dd01      	ble.n	8008bae <Get_Max_Float+0x24>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	e000      	b.n	8008bb0 <Get_Max_Float+0x26>
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	ee07 3a90 	vmov	s15, r3
}
 8008bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <Get_Min_Float>:

float Get_Min_Float(float t_x, float t_y)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	ed87 0a01 	vstr	s0, [r7, #4]
 8008bcc:	edc7 0a00 	vstr	s1, [r7]
	return (t_x < t_y) ? t_x : t_y;
 8008bd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8008bd4:	edd7 7a00 	vldr	s15, [r7]
 8008bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be0:	d501      	bpl.n	8008be6 <Get_Min_Float+0x24>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	e000      	b.n	8008be8 <Get_Min_Float+0x26>
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	ee07 3a90 	vmov	s15, r3
}
 8008bec:	eeb0 0a67 	vmov.f32	s0, s15
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <Set_First_Half_Gait_Phase_Parameters>:

void Set_First_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b083      	sub	sp, #12
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
	t_norm_params->deg_o = t_norm_params->sum_deg / t_norm_params->sum_i;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	edd3 6a02 	vldr	s13, [r3, #8]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	8a1b      	ldrh	r3, [r3, #16]
 8008c0e:	ee07 3a90 	vmov	s15, r3
 8008c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	edc3 7a00 	vstr	s15, [r3]
	t_norm_params->vel_o = t_norm_params->sum_vel / t_norm_params->sum_i;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	edd3 6a03 	vldr	s13, [r3, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	8a1b      	ldrh	r3, [r3, #16]
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	edc3 7a01 	vstr	s15, [r3, #4]

	t_gait_params->gait_period = t_norm_params->sum_i;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	8a1a      	ldrh	r2, [r3, #16]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	801a      	strh	r2, [r3, #0]

	t_norm_params->A_deg = (t_norm_params->deg_max - t_norm_params->deg_min) / 2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	ed93 7a05 	vldr	s14, [r3, #20]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c54:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	t_norm_params->A_vel = (t_norm_params->vel_max - t_norm_params->vel_min) / 2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	ed93 7a07 	vldr	s14, [r3, #28]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	edd3 7a08 	vldr	s15, [r3, #32]
 8008c6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	t_norm_params->sum_i = 0;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg = 0;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	609a      	str	r2, [r3, #8]
	t_norm_params->sum_vel = 0;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	60da      	str	r2, [r3, #12]
	t_norm_params->deg_max = 0;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f04f 0200 	mov.w	r2, #0
 8008c9c:	615a      	str	r2, [r3, #20]
	t_norm_params->vel_max = 0;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	61da      	str	r2, [r3, #28]
	t_norm_params->deg_min = 0;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f04f 0200 	mov.w	r2, #0
 8008cac:	619a      	str	r2, [r3, #24]
	t_norm_params->vel_min = 0;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f04f 0200 	mov.w	r2, #0
 8008cb4:	621a      	str	r2, [r3, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <Set_Second_Half_Gait_Phase_Parameters>:

void Set_Second_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Thigh_Angle_Params* t_thigh_angle_params)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
	t_norm_params->sum_i++;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8a1b      	ldrh	r3, [r3, #16]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg += t_thigh_angle_params->deg_LPF_2nd[0];
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	ed93 7a02 	vldr	s14, [r3, #8]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	edc3 7a02 	vstr	s15, [r3, #8]
	t_norm_params->sum_vel += t_thigh_angle_params->vel_LPF_2nd[0];
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	ed93 7a03 	vldr	s14, [r3, #12]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8008cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	edc3 7a03 	vstr	s15, [r3, #12]
	t_norm_params->deg_max = Get_Max_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_max);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	ed93 7a05 	vldr	s14, [r3, #20]
 8008d10:	eef0 0a47 	vmov.f32	s1, s14
 8008d14:	eeb0 0a67 	vmov.f32	s0, s15
 8008d18:	f7ff ff37 	bl	8008b8a <Get_Max_Float>
 8008d1c:	eef0 7a40 	vmov.f32	s15, s0
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	edc3 7a05 	vstr	s15, [r3, #20]
	t_norm_params->deg_min = Get_Min_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_min);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	ed93 7a06 	vldr	s14, [r3, #24]
 8008d32:	eef0 0a47 	vmov.f32	s1, s14
 8008d36:	eeb0 0a67 	vmov.f32	s0, s15
 8008d3a:	f7ff ff42 	bl	8008bc2 <Get_Min_Float>
 8008d3e:	eef0 7a40 	vmov.f32	s15, s0
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	edc3 7a06 	vstr	s15, [r3, #24]
	t_norm_params->vel_max = Get_Max_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_max);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	ed93 7a07 	vldr	s14, [r3, #28]
 8008d54:	eef0 0a47 	vmov.f32	s1, s14
 8008d58:	eeb0 0a67 	vmov.f32	s0, s15
 8008d5c:	f7ff ff15 	bl	8008b8a <Get_Max_Float>
 8008d60:	eef0 7a40 	vmov.f32	s15, s0
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	edc3 7a07 	vstr	s15, [r3, #28]
	t_norm_params->vel_min = Get_Min_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_min);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	ed93 7a08 	vldr	s14, [r3, #32]
 8008d76:	eef0 0a47 	vmov.f32	s1, s14
 8008d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008d7e:	f7ff ff20 	bl	8008bc2 <Get_Min_Float>
 8008d82:	eef0 7a40 	vmov.f32	s15, s0
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <Prepare_for_Circular_Normalization>:

/*
*Function to Prepare for Circular Normalization
*/
void Prepare_for_Circular_Normalization(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
	if (t_thigh_angle_params->vel_LPF_2nd[0] < 0 && t_thigh_angle_params->vel_LPF_2nd[1] > 0
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8008da6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dae:	d521      	bpl.n	8008df4 <Prepare_for_Circular_Normalization+0x60>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8008db6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbe:	dd19      	ble.n	8008df4 <Prepare_for_Circular_Normalization+0x60>
		&& t_norm_params->sum_i > (t_gait_params->gait_period)*0.5) {
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	8a1b      	ldrh	r3, [r3, #16]
 8008dc4:	ee07 3a90 	vmov	s15, r3
 8008dc8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	ee07 3a90 	vmov	s15, r3
 8008dd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008dd8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008ddc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008de0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de8:	dd04      	ble.n	8008df4 <Prepare_for_Circular_Normalization+0x60>
		Set_First_Half_Gait_Phase_Parameters(t_norm_params, t_gait_params);
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	68b8      	ldr	r0, [r7, #8]
 8008dee:	f7ff ff04 	bl	8008bfa <Set_First_Half_Gait_Phase_Parameters>
 8008df2:	e004      	b.n	8008dfe <Prepare_for_Circular_Normalization+0x6a>
	}
	else{
		Set_Second_Half_Gait_Phase_Parameters(t_norm_params, t_thigh_angle_params);
 8008df4:	68f9      	ldr	r1, [r7, #12]
 8008df6:	68b8      	ldr	r0, [r7, #8]
 8008df8:	f7ff ff63 	bl	8008cc2 <Set_Second_Half_Gait_Phase_Parameters>
	}
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <Get_Current_Gait_Phase>:

/*
*Function to calculate the current phase of the gait (0~100%)
*/
float Get_Current_Gait_Phase(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
	/* Calculate initial phase using atan function */
	float t_gait_phase = atan((-1) * (t_norm_params->vel_norm) / (t_norm_params->deg_norm));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008e18:	eef1 6a67 	vneg.f32	s13, s15
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8008e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008e2a:	eeb0 0b47 	vmov.f64	d0, d7
 8008e2e:	f003 fa13 	bl	800c258 <atan>
 8008e32:	eeb0 7b40 	vmov.f64	d7, d0
 8008e36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008e3a:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Adjust phase based on the value of normalized degree */
    if (t_norm_params->deg_norm < 0){
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008e44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e4c:	d50c      	bpl.n	8008e68 <Get_Current_Gait_Phase+0x60>
        t_gait_phase += PI;
 8008e4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008e56:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8008f58 <Get_Current_Gait_Phase+0x150>
 8008e5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008e5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008e62:	edc7 7a03 	vstr	s15, [r7, #12]
 8008e66:	e01b      	b.n	8008ea0 <Get_Current_Gait_Phase+0x98>
    } else if (t_norm_params->deg_norm > 0 && t_norm_params->vel_norm > 0){
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e76:	dd13      	ble.n	8008ea0 <Get_Current_Gait_Phase+0x98>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e86:	dd0b      	ble.n	8008ea0 <Get_Current_Gait_Phase+0x98>
        t_gait_phase += 2 * PI;
 8008e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8008e8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008e90:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8008f60 <Get_Current_Gait_Phase+0x158>
 8008e94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008e98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008e9c:	edc7 7a03 	vstr	s15, [r7, #12]
    }

	/* Convert phase from radians to custom scale */
    t_gait_phase = t_gait_phase * 50.0f / PI;
 8008ea0:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ea4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008f70 <Get_Current_Gait_Phase+0x168>
 8008ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008eac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008eb0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8008f58 <Get_Current_Gait_Phase+0x150>
 8008eb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008eb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008ebc:	edc7 7a03 	vstr	s15, [r7, #12]
    t_gait_phase -= 12.11;
 8008ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ec4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008ec8:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8008f68 <Get_Current_Gait_Phase+0x160>
 8008ecc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008ed0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008ed4:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Adjust phase if it falls outside the range 0-100 */
    if (t_gait_phase < 0 && t_gait_phase != -100){
 8008ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008edc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee4:	d510      	bpl.n	8008f08 <Get_Current_Gait_Phase+0x100>
 8008ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8008eea:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8008f74 <Get_Current_Gait_Phase+0x16c>
 8008eee:	eef4 7a47 	vcmp.f32	s15, s14
 8008ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef6:	d007      	beq.n	8008f08 <Get_Current_Gait_Phase+0x100>
        t_gait_phase += 100;
 8008ef8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008efc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008f78 <Get_Current_Gait_Phase+0x170>
 8008f00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f04:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    /* Compare phase with the stored gait phase in gaitInfo */
    if (t_gait_phase > 5 && t_gait_phase < 95){
 8008f08:	edd7 7a03 	vldr	s15, [r7, #12]
 8008f0c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8008f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f18:	dd13      	ble.n	8008f42 <Get_Current_Gait_Phase+0x13a>
 8008f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008f1e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008f7c <Get_Current_Gait_Phase+0x174>
 8008f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2a:	d50a      	bpl.n	8008f42 <Get_Current_Gait_Phase+0x13a>
        t_gait_phase = Get_Max_Float(t_gait_phase, t_gait_params->gait_phase);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f32:	eef0 0a67 	vmov.f32	s1, s15
 8008f36:	ed97 0a03 	vldr	s0, [r7, #12]
 8008f3a:	f7ff fe26 	bl	8008b8a <Get_Max_Float>
 8008f3e:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	return t_gait_phase;	// 0 ~ 100%
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	ee07 3a90 	vmov	s15, r3
}
 8008f48:	eeb0 0a67 	vmov.f32	s0, s15
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	f3af 8000 	nop.w
 8008f58:	fc8b007a 	.word	0xfc8b007a
 8008f5c:	400921fa 	.word	0x400921fa
 8008f60:	fc8b007a 	.word	0xfc8b007a
 8008f64:	401921fa 	.word	0x401921fa
 8008f68:	eb851eb8 	.word	0xeb851eb8
 8008f6c:	40283851 	.word	0x40283851
 8008f70:	42480000 	.word	0x42480000
 8008f74:	c2c80000 	.word	0xc2c80000
 8008f78:	42c80000 	.word	0x42c80000
 8008f7c:	42be0000 	.word	0x42be0000

08008f80 <Calculate_Assist_Force_Timing_Params>:

/*
*Function to Calculate timing parameters for Plantar&Dorsi assistance force
*/
static void Calculate_Assist_Force_Timing_Params(uint16_t* t_r, uint16_t* t_c, uint16_t* t_f, uint16_t t_r_end, uint16_t t_start, uint16_t t_c_end, uint16_t t_f_end, uint16_t t_t_r_limit, uint16_t t_t_f_limit, uint16_t t_gait_period)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	807b      	strh	r3, [r7, #2]
	*t_r = (t_r_end - t_start) * t_gait_period / 100;
 8008f8e:	887a      	ldrh	r2, [r7, #2]
 8008f90:	8b3b      	ldrh	r3, [r7, #24]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008f96:	fb02 f303 	mul.w	r3, r2, r3
 8008f9a:	4a29      	ldr	r2, [pc, #164]	; (8009040 <Calculate_Assist_Force_Timing_Params+0xc0>)
 8008f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8008fa0:	1152      	asrs	r2, r2, #5
 8008fa2:	17db      	asrs	r3, r3, #31
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	801a      	strh	r2, [r3, #0]
	*t_c = (t_c_end - t_r_end) * t_gait_period / 100;
 8008fac:	8bba      	ldrh	r2, [r7, #28]
 8008fae:	887b      	ldrh	r3, [r7, #2]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008fb4:	fb02 f303 	mul.w	r3, r2, r3
 8008fb8:	4a21      	ldr	r2, [pc, #132]	; (8009040 <Calculate_Assist_Force_Timing_Params+0xc0>)
 8008fba:	fb82 1203 	smull	r1, r2, r2, r3
 8008fbe:	1152      	asrs	r2, r2, #5
 8008fc0:	17db      	asrs	r3, r3, #31
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	801a      	strh	r2, [r3, #0]
	*t_f = (t_f_end - t_c_end) * t_gait_period / 100;
 8008fca:	8c3a      	ldrh	r2, [r7, #32]
 8008fcc:	8bbb      	ldrh	r3, [r7, #28]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
 8008fd6:	4a1a      	ldr	r2, [pc, #104]	; (8009040 <Calculate_Assist_Force_Timing_Params+0xc0>)
 8008fd8:	fb82 1203 	smull	r1, r2, r2, r3
 8008fdc:	1152      	asrs	r2, r2, #5
 8008fde:	17db      	asrs	r3, r3, #31
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	801a      	strh	r2, [r3, #0]

	if (*t_r < t_t_r_limit){
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d90d      	bls.n	800900e <Calculate_Assist_Force_Timing_Params+0x8e>
		*t_c = *t_c - t_t_r_limit + *t_r;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	881a      	ldrh	r2, [r3, #0]
 8008ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	4413      	add	r3, r2
 8009002:	b29a      	uxth	r2, r3
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	801a      	strh	r2, [r3, #0]
		*t_r = t_t_r_limit;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800900c:	801a      	strh	r2, [r3, #0]
	}
	if (*t_f < t_t_f_limit){
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009014:	429a      	cmp	r2, r3
 8009016:	d90d      	bls.n	8009034 <Calculate_Assist_Force_Timing_Params+0xb4>
		*t_c = *t_c - t_t_f_limit + *t_f;
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	881a      	ldrh	r2, [r3, #0]
 800901c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	b29a      	uxth	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	4413      	add	r3, r2
 8009028:	b29a      	uxth	r2, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	801a      	strh	r2, [r3, #0]
		*t_f = t_t_f_limit;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009032:	801a      	strh	r2, [r3, #0]
	}
	if (*t_c < 0){
		*t_c = 0;
	}
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	51eb851f 	.word	0x51eb851f

08009044 <Set_Assist_Force_Timing_Params>:
/*
*Function to Set timing parameters for Plantar&Dorsi assistance force(rising, continuous, falling time)
*/

void Set_Assist_Force_Timing_Params(Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 8009044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009048:	b08a      	sub	sp, #40	; 0x28
 800904a:	af06      	add	r7, sp, #24
 800904c:	60f8      	str	r0, [r7, #12]
 800904e:	60b9      	str	r1, [r7, #8]
 8009050:	607a      	str	r2, [r7, #4]
 8009052:	603b      	str	r3, [r7, #0]
	if (t_gait_params->gait_period > 2000){
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800905c:	d903      	bls.n	8009066 <Set_Assist_Force_Timing_Params+0x22>
		t_gait_params->gait_period = 2000;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009064:	801a      	strh	r2, [r3, #0]
	}

	/* Calculate timing parameters for Plantar assistance force */
	Calculate_Assist_Force_Timing_Params(
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f103 0608 	add.w	r6, r3, #8
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f103 0c0a 	add.w	ip, r3, #10
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f103 0e0c 	add.w	lr, r3, #12
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	8892      	ldrh	r2, [r2, #4]
 8009086:	68f9      	ldr	r1, [r7, #12]
 8009088:	88c9      	ldrh	r1, [r1, #6]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	8800      	ldrh	r0, [r0, #0]
 800908e:	687c      	ldr	r4, [r7, #4]
 8009090:	8864      	ldrh	r4, [r4, #2]
 8009092:	683d      	ldr	r5, [r7, #0]
 8009094:	882d      	ldrh	r5, [r5, #0]
 8009096:	9505      	str	r5, [sp, #20]
 8009098:	9404      	str	r4, [sp, #16]
 800909a:	9003      	str	r0, [sp, #12]
 800909c:	9102      	str	r1, [sp, #8]
 800909e:	9201      	str	r2, [sp, #4]
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	4643      	mov	r3, r8
 80090a4:	4672      	mov	r2, lr
 80090a6:	4661      	mov	r1, ip
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7ff ff69 	bl	8008f80 <Calculate_Assist_Force_Timing_Params>
            t_assist_params->t_r_limit,    	// Rising time limit
            t_assist_params->t_f_limit,    	// Falling time limit
            t_gait_params->gait_period      // Gait period
	);
	/* Calculate timing parameters for Dorsiflexion assistance force */
	Calculate_Assist_Force_Timing_Params(
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f103 0608 	add.w	r6, r3, #8
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f103 0c0a 	add.w	ip, r3, #10
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f103 0e0c 	add.w	lr, r3, #12
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	8892      	ldrh	r2, [r2, #4]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	88c9      	ldrh	r1, [r1, #6]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	8800      	ldrh	r0, [r0, #0]
 80090d6:	687c      	ldr	r4, [r7, #4]
 80090d8:	8864      	ldrh	r4, [r4, #2]
 80090da:	683d      	ldr	r5, [r7, #0]
 80090dc:	882d      	ldrh	r5, [r5, #0]
 80090de:	9505      	str	r5, [sp, #20]
 80090e0:	9404      	str	r4, [sp, #16]
 80090e2:	9003      	str	r0, [sp, #12]
 80090e4:	9102      	str	r1, [sp, #8]
 80090e6:	9201      	str	r2, [sp, #4]
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	4643      	mov	r3, r8
 80090ec:	4672      	mov	r2, lr
 80090ee:	4661      	mov	r1, ip
 80090f0:	4630      	mov	r0, r6
 80090f2:	f7ff ff45 	bl	8008f80 <Calculate_Assist_Force_Timing_Params>
			t_dorsi_params->t_f_D_end,     // Dorsi falling end time
            t_assist_params->t_r_limit,    	// Rising time limit
            t_assist_params->t_f_limit,   	// Falling time limit
            t_gait_params->gait_period      // Gait period
	);
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009100 <Get_Angle_Scenario>:


float Get_Angle_Scenario(Sensor_Params* t_sensor_params, AttachPlane t_attach_plane)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
	float estimated_angle = 0.0;
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	60fb      	str	r3, [r7, #12]

	switch (t_attach_plane)
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	2b04      	cmp	r3, #4
 8009116:	f200 8085 	bhi.w	8009224 <Get_Angle_Scenario+0x124>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <Get_Angle_Scenario+0x20>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009135 	.word	0x08009135
 8009124:	080091b1 	.word	0x080091b1
 8009128:	080091ed 	.word	0x080091ed
 800912c:	08009225 	.word	0x08009225
 8009130:	08009175 	.word	0x08009175
	{
		case (e_LEFT_SAGITAL):
			estimated_angle = atan2((t_sensor_params->accY[0])*(-1), (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(-y/-x) : Left Sagital case
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	edd3 7a02 	vldr	s15, [r3, #8]
 800913a:	eef1 7a67 	vneg.f32	s15, s15
 800913e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	edd3 6a00 	vldr	s13, [r3]
 8009148:	eef1 6a66 	vneg.f32	s13, s13
 800914c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8009150:	eeb0 1b46 	vmov.f64	d1, d6
 8009154:	eeb0 0b47 	vmov.f64	d0, d7
 8009158:	f003 f85c 	bl	800c214 <atan2>
 800915c:	eeb0 7b40 	vmov.f64	d7, d0
 8009160:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8009238 <Get_Angle_Scenario+0x138>
 8009164:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009168:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800916c:	edc7 7a03 	vstr	s15, [r7, #12]
			return estimated_angle;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	e058      	b.n	8009226 <Get_Angle_Scenario+0x126>

		case (e_RIGHT_SAGITAL):
			estimated_angle = atan2(t_sensor_params->accY[0], (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(y/-x) : Right Sagital case
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	edd3 7a02 	vldr	s15, [r3, #8]
 800917a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	edd3 6a00 	vldr	s13, [r3]
 8009184:	eef1 6a66 	vneg.f32	s13, s13
 8009188:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800918c:	eeb0 1b46 	vmov.f64	d1, d6
 8009190:	eeb0 0b47 	vmov.f64	d0, d7
 8009194:	f003 f83e 	bl	800c214 <atan2>
 8009198:	eeb0 7b40 	vmov.f64	d7, d0
 800919c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8009238 <Get_Angle_Scenario+0x138>
 80091a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80091a8:	edc7 7a03 	vstr	s15, [r7, #12]
			return estimated_angle;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	e03a      	b.n	8009226 <Get_Angle_Scenario+0x126>

		case (e_LEFT_SAGITAL_DEMO):
			estimated_angle = atan2(t_sensor_params->accX[0], (t_sensor_params->accY[0])*(-1)) * (180 / PI);	// arctan(x/-y) : Left Sagital DEMO ver case
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	edd3 7a00 	vldr	s15, [r3]
 80091b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80091c0:	eef1 6a66 	vneg.f32	s13, s13
 80091c4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80091c8:	eeb0 1b46 	vmov.f64	d1, d6
 80091cc:	eeb0 0b47 	vmov.f64	d0, d7
 80091d0:	f003 f820 	bl	800c214 <atan2>
 80091d4:	eeb0 7b40 	vmov.f64	d7, d0
 80091d8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8009238 <Get_Angle_Scenario+0x138>
 80091dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80091e4:	edc7 7a03 	vstr	s15, [r7, #12]
			return estimated_angle;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	e01c      	b.n	8009226 <Get_Angle_Scenario+0x126>

		case (e_CM_TEST):
			estimated_angle = atan2(t_sensor_params->accX[0], (t_sensor_params->accY[0])*(-1)) * (180 / PI);	// arctan(x/-y) : FOR CM TEST
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	edd3 7a00 	vldr	s15, [r3]
 80091f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80091fc:	eef1 6a66 	vneg.f32	s13, s13
 8009200:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8009204:	eeb0 1b46 	vmov.f64	d1, d6
 8009208:	eeb0 0b47 	vmov.f64	d0, d7
 800920c:	f003 f802 	bl	800c214 <atan2>
 8009210:	eeb0 7b40 	vmov.f64	d7, d0
 8009214:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8009238 <Get_Angle_Scenario+0x138>
 8009218:	ee27 7b06 	vmul.f64	d7, d7, d6
 800921c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009220:	edc7 7a03 	vstr	s15, [r7, #12]

		default:
			return estimated_angle;
 8009224:	68fb      	ldr	r3, [r7, #12]
	}
}
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eeb0 0a67 	vmov.f32	s0, s15
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	f3af 8000 	nop.w
 8009238:	7e61df46 	.word	0x7e61df46
 800923c:	404ca5dc 	.word	0x404ca5dc

08009240 <Get_Msg_Data_Type_Info>:
#include "msg_data_object.h"

MsgDataObjectDictionary msg_dods[TASK_NUM];

MsgDataTypeInfoStruct Get_Msg_Data_Type_Info(MsgDataTypeEnum t_type)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
	MsgDataTypeInfoStruct t_res;

    switch (t_type) {
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	2b09      	cmp	r3, #9
 8009250:	d848      	bhi.n	80092e4 <Get_Msg_Data_Type_Info+0xa4>
 8009252:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <Get_Msg_Data_Type_Info+0x18>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	08009281 	.word	0x08009281
 800925c:	0800928b 	.word	0x0800928b
 8009260:	08009295 	.word	0x08009295
 8009264:	0800929f 	.word	0x0800929f
 8009268:	080092a9 	.word	0x080092a9
 800926c:	080092b3 	.word	0x080092b3
 8009270:	080092bd 	.word	0x080092bd
 8009274:	080092c7 	.word	0x080092c7
 8009278:	080092d1 	.word	0x080092d1
 800927c:	080092db 	.word	0x080092db
    case e_Char   : t_res.name = "char"   ; t_res.size = sizeof(char);     break;
 8009280:	4b20      	ldr	r3, [pc, #128]	; (8009304 <Get_Msg_Data_Type_Info+0xc4>)
 8009282:	60bb      	str	r3, [r7, #8]
 8009284:	2301      	movs	r3, #1
 8009286:	733b      	strb	r3, [r7, #12]
 8009288:	e02d      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt8  : t_res.name = "uint8"  ; t_res.size = sizeof(uint8_t);  break;
 800928a:	4b1f      	ldr	r3, [pc, #124]	; (8009308 <Get_Msg_Data_Type_Info+0xc8>)
 800928c:	60bb      	str	r3, [r7, #8]
 800928e:	2301      	movs	r3, #1
 8009290:	733b      	strb	r3, [r7, #12]
 8009292:	e028      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt16 : t_res.name = "uint16" ; t_res.size = sizeof(uint16_t); break;
 8009294:	4b1d      	ldr	r3, [pc, #116]	; (800930c <Get_Msg_Data_Type_Info+0xcc>)
 8009296:	60bb      	str	r3, [r7, #8]
 8009298:	2302      	movs	r3, #2
 800929a:	733b      	strb	r3, [r7, #12]
 800929c:	e023      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt32 : t_res.name = "uint32" ; t_res.size = sizeof(uint32_t); break;
 800929e:	4b1c      	ldr	r3, [pc, #112]	; (8009310 <Get_Msg_Data_Type_Info+0xd0>)
 80092a0:	60bb      	str	r3, [r7, #8]
 80092a2:	2304      	movs	r3, #4
 80092a4:	733b      	strb	r3, [r7, #12]
 80092a6:	e01e      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    case e_Int8   : t_res.name = "int8"   ; t_res.size = sizeof(int8_t);   break;
 80092a8:	4b1a      	ldr	r3, [pc, #104]	; (8009314 <Get_Msg_Data_Type_Info+0xd4>)
 80092aa:	60bb      	str	r3, [r7, #8]
 80092ac:	2301      	movs	r3, #1
 80092ae:	733b      	strb	r3, [r7, #12]
 80092b0:	e019      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    case e_Int16  : t_res.name = "int16"  ; t_res.size = sizeof(int16_t);  break;
 80092b2:	4b19      	ldr	r3, [pc, #100]	; (8009318 <Get_Msg_Data_Type_Info+0xd8>)
 80092b4:	60bb      	str	r3, [r7, #8]
 80092b6:	2302      	movs	r3, #2
 80092b8:	733b      	strb	r3, [r7, #12]
 80092ba:	e014      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    case e_Int32  : t_res.name = "int32"  ; t_res.size = sizeof(int32_t);  break;
 80092bc:	4b17      	ldr	r3, [pc, #92]	; (800931c <Get_Msg_Data_Type_Info+0xdc>)
 80092be:	60bb      	str	r3, [r7, #8]
 80092c0:	2304      	movs	r3, #4
 80092c2:	733b      	strb	r3, [r7, #12]
 80092c4:	e00f      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    case e_Float32: t_res.name = "float32"; t_res.size = sizeof(float);    break;
 80092c6:	4b16      	ldr	r3, [pc, #88]	; (8009320 <Get_Msg_Data_Type_Info+0xe0>)
 80092c8:	60bb      	str	r3, [r7, #8]
 80092ca:	2304      	movs	r3, #4
 80092cc:	733b      	strb	r3, [r7, #12]
 80092ce:	e00a      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    case e_Float64: t_res.name = "float64"; t_res.size = sizeof(double);   break;
 80092d0:	4b14      	ldr	r3, [pc, #80]	; (8009324 <Get_Msg_Data_Type_Info+0xe4>)
 80092d2:	60bb      	str	r3, [r7, #8]
 80092d4:	2308      	movs	r3, #8
 80092d6:	733b      	strb	r3, [r7, #12]
 80092d8:	e005      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    case e_String10: t_res.name = "string10"; t_res.size = 32*sizeof(char);   break;
 80092da:	4b13      	ldr	r3, [pc, #76]	; (8009328 <Get_Msg_Data_Type_Info+0xe8>)
 80092dc:	60bb      	str	r3, [r7, #8]
 80092de:	2320      	movs	r3, #32
 80092e0:	733b      	strb	r3, [r7, #12]
 80092e2:	e000      	b.n	80092e6 <Get_Msg_Data_Type_Info+0xa6>
    default: break;
 80092e4:	bf00      	nop
    }
    return t_res;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	461a      	mov	r2, r3
 80092ea:	f107 0308 	add.w	r3, r7, #8
 80092ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80092f2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	0800cfcc 	.word	0x0800cfcc
 8009308:	0800cfd4 	.word	0x0800cfd4
 800930c:	0800cfdc 	.word	0x0800cfdc
 8009310:	0800cfe4 	.word	0x0800cfe4
 8009314:	0800cfec 	.word	0x0800cfec
 8009318:	0800cff4 	.word	0x0800cff4
 800931c:	0800cffc 	.word	0x0800cffc
 8009320:	0800d004 	.word	0x0800d004
 8009324:	0800d00c 	.word	0x0800d00c
 8009328:	0800d014 	.word	0x0800d014

0800932c <Create_DOD>:
                                |__/                                                |__/ 
*/

// Create Data Object & Dictionary
void Create_DOD(uint8_t t_dod_id)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	71fb      	strb	r3, [r7, #7]
	msg_dods[t_dod_id].id = t_dod_id;
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	4a07      	ldr	r2, [pc, #28]	; (8009358 <Create_DOD+0x2c>)
 800933a:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800933e:	fb01 f303 	mul.w	r3, r1, r3
 8009342:	4413      	add	r3, r2
 8009344:	3304      	adds	r3, #4
 8009346:	79fa      	ldrb	r2, [r7, #7]
 8009348:	701a      	strb	r2, [r3, #0]
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	2400087c 	.word	0x2400087c

0800935c <Create_PDO>:

void Create_PDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, uint8_t t_size, void* t_addr)
{
 800935c:	b5b0      	push	{r4, r5, r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	4604      	mov	r4, r0
 8009364:	4608      	mov	r0, r1
 8009366:	4611      	mov	r1, r2
 8009368:	461a      	mov	r2, r3
 800936a:	4623      	mov	r3, r4
 800936c:	71fb      	strb	r3, [r7, #7]
 800936e:	4603      	mov	r3, r0
 8009370:	71bb      	strb	r3, [r7, #6]
 8009372:	460b      	mov	r3, r1
 8009374:	717b      	strb	r3, [r7, #5]
 8009376:	4613      	mov	r3, r2
 8009378:	713b      	strb	r3, [r7, #4]
    msg_dods[t_dod_id].pdos[t_obj_id].id   = t_obj_id;
 800937a:	79f9      	ldrb	r1, [r7, #7]
 800937c:	79ba      	ldrb	r2, [r7, #6]
 800937e:	4853      	ldr	r0, [pc, #332]	; (80094cc <Create_PDO+0x170>)
 8009380:	4613      	mov	r3, r2
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	4413      	add	r3, r2
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800938c:	fb01 f202 	mul.w	r2, r1, r2
 8009390:	4413      	add	r3, r2
 8009392:	4403      	add	r3, r0
 8009394:	3308      	adds	r3, #8
 8009396:	79ba      	ldrb	r2, [r7, #6]
 8009398:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].type = t_type;
 800939a:	79f9      	ldrb	r1, [r7, #7]
 800939c:	79ba      	ldrb	r2, [r7, #6]
 800939e:	484b      	ldr	r0, [pc, #300]	; (80094cc <Create_PDO+0x170>)
 80093a0:	4613      	mov	r3, r2
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	4413      	add	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80093ac:	fb01 f202 	mul.w	r2, r1, r2
 80093b0:	4413      	add	r3, r2
 80093b2:	4403      	add	r3, r0
 80093b4:	3310      	adds	r3, #16
 80093b6:	797a      	ldrb	r2, [r7, #5]
 80093b8:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].size  = t_size;
 80093ba:	79f9      	ldrb	r1, [r7, #7]
 80093bc:	79ba      	ldrb	r2, [r7, #6]
 80093be:	4843      	ldr	r0, [pc, #268]	; (80094cc <Create_PDO+0x170>)
 80093c0:	4613      	mov	r3, r2
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	4413      	add	r3, r2
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80093cc:	fb01 f202 	mul.w	r2, r1, r2
 80093d0:	4413      	add	r3, r2
 80093d2:	4403      	add	r3, r0
 80093d4:	3311      	adds	r3, #17
 80093d6:	793a      	ldrb	r2, [r7, #4]
 80093d8:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].addr = t_addr;
 80093da:	79f9      	ldrb	r1, [r7, #7]
 80093dc:	79ba      	ldrb	r2, [r7, #6]
 80093de:	483b      	ldr	r0, [pc, #236]	; (80094cc <Create_PDO+0x170>)
 80093e0:	4613      	mov	r3, r2
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	4413      	add	r3, r2
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80093ec:	fb01 f202 	mul.w	r2, r1, r2
 80093f0:	4413      	add	r3, r2
 80093f2:	4403      	add	r3, r0
 80093f4:	3314      	adds	r3, #20
 80093f6:	6a3a      	ldr	r2, [r7, #32]
 80093f8:	601a      	str	r2, [r3, #0]

    msg_dods[t_dod_id].pdos[t_obj_id].data_size  = Get_Msg_Data_Type_Info(t_type).size * t_size;
 80093fa:	f107 0308 	add.w	r3, r7, #8
 80093fe:	797a      	ldrb	r2, [r7, #5]
 8009400:	4611      	mov	r1, r2
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff ff1c 	bl	8009240 <Get_Msg_Data_Type_Info>
 8009408:	7b3a      	ldrb	r2, [r7, #12]
 800940a:	79f9      	ldrb	r1, [r7, #7]
 800940c:	79bb      	ldrb	r3, [r7, #6]
 800940e:	7938      	ldrb	r0, [r7, #4]
 8009410:	fb10 f202 	smulbb	r2, r0, r2
 8009414:	b2d4      	uxtb	r4, r2
 8009416:	482d      	ldr	r0, [pc, #180]	; (80094cc <Create_PDO+0x170>)
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	4613      	mov	r3, r2
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	4413      	add	r3, r2
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009426:	fb01 f202 	mul.w	r2, r1, r2
 800942a:	4413      	add	r3, r2
 800942c:	4403      	add	r3, r0
 800942e:	3304      	adds	r3, #4
 8009430:	4622      	mov	r2, r4
 8009432:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].last_pub = malloc(msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 8009434:	79f9      	ldrb	r1, [r7, #7]
 8009436:	79bb      	ldrb	r3, [r7, #6]
 8009438:	4824      	ldr	r0, [pc, #144]	; (80094cc <Create_PDO+0x170>)
 800943a:	1c5a      	adds	r2, r3, #1
 800943c:	4613      	mov	r3, r2
 800943e:	005b      	lsls	r3, r3, #1
 8009440:	4413      	add	r3, r2
 8009442:	00db      	lsls	r3, r3, #3
 8009444:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009448:	fb01 f202 	mul.w	r2, r1, r2
 800944c:	4413      	add	r3, r2
 800944e:	4403      	add	r3, r0
 8009450:	3304      	adds	r3, #4
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	79fc      	ldrb	r4, [r7, #7]
 8009456:	79bd      	ldrb	r5, [r7, #6]
 8009458:	4618      	mov	r0, r3
 800945a:	f001 ff0d 	bl	800b278 <malloc>
 800945e:	4603      	mov	r3, r0
 8009460:	4618      	mov	r0, r3
 8009462:	491a      	ldr	r1, [pc, #104]	; (80094cc <Create_PDO+0x170>)
 8009464:	1c6a      	adds	r2, r5, #1
 8009466:	4613      	mov	r3, r2
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	4413      	add	r3, r2
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009472:	fb04 f202 	mul.w	r2, r4, r2
 8009476:	4413      	add	r3, r2
 8009478:	440b      	add	r3, r1
 800947a:	6018      	str	r0, [r3, #0]

    memset(msg_dods[t_dod_id].pdos[t_obj_id].last_pub, 0xFF, msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 800947c:	79f9      	ldrb	r1, [r7, #7]
 800947e:	79bb      	ldrb	r3, [r7, #6]
 8009480:	4812      	ldr	r0, [pc, #72]	; (80094cc <Create_PDO+0x170>)
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	4613      	mov	r3, r2
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	4413      	add	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009490:	fb01 f202 	mul.w	r2, r1, r2
 8009494:	4413      	add	r3, r2
 8009496:	4403      	add	r3, r0
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	79f9      	ldrb	r1, [r7, #7]
 800949c:	79bb      	ldrb	r3, [r7, #6]
 800949e:	4c0b      	ldr	r4, [pc, #44]	; (80094cc <Create_PDO+0x170>)
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	4613      	mov	r3, r2
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	4413      	add	r3, r2
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80094ae:	fb01 f202 	mul.w	r2, r1, r2
 80094b2:	4413      	add	r3, r2
 80094b4:	4423      	add	r3, r4
 80094b6:	3304      	adds	r3, #4
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	21ff      	movs	r1, #255	; 0xff
 80094be:	f002 f8d4 	bl	800b66a <memset>
}
 80094c2:	bf00      	nop
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bdb0      	pop	{r4, r5, r7, pc}
 80094ca:	bf00      	nop
 80094cc:	2400087c 	.word	0x2400087c

080094d0 <Create_SDO>:

void Create_SDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, MsgSDOCallback t_callback)
{
 80094d0:	b590      	push	{r4, r7, lr}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	603b      	str	r3, [r7, #0]
 80094d8:	4603      	mov	r3, r0
 80094da:	71fb      	strb	r3, [r7, #7]
 80094dc:	460b      	mov	r3, r1
 80094de:	71bb      	strb	r3, [r7, #6]
 80094e0:	4613      	mov	r3, r2
 80094e2:	717b      	strb	r3, [r7, #5]
	msg_dods[t_dod_id].sdos[t_obj_id].id        = t_obj_id;
 80094e4:	79f9      	ldrb	r1, [r7, #7]
 80094e6:	79ba      	ldrb	r2, [r7, #6]
 80094e8:	4840      	ldr	r0, [pc, #256]	; (80095ec <Create_SDO+0x11c>)
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80094f6:	fb01 f202 	mul.w	r2, r1, r2
 80094fa:	4413      	add	r3, r2
 80094fc:	4403      	add	r3, r0
 80094fe:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8009502:	79ba      	ldrb	r2, [r7, #6]
 8009504:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].type      = t_type;
 8009506:	79f9      	ldrb	r1, [r7, #7]
 8009508:	79ba      	ldrb	r2, [r7, #6]
 800950a:	4838      	ldr	r0, [pc, #224]	; (80095ec <Create_SDO+0x11c>)
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009518:	fb01 f202 	mul.w	r2, r1, r2
 800951c:	4413      	add	r3, r2
 800951e:	4403      	add	r3, r0
 8009520:	f203 23d9 	addw	r3, r3, #729	; 0x2d9
 8009524:	797a      	ldrb	r2, [r7, #5]
 8009526:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].callback  = t_callback;
 8009528:	79f9      	ldrb	r1, [r7, #7]
 800952a:	79ba      	ldrb	r2, [r7, #6]
 800952c:	482f      	ldr	r0, [pc, #188]	; (80095ec <Create_SDO+0x11c>)
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800953a:	fb01 f202 	mul.w	r2, r1, r2
 800953e:	4413      	add	r3, r2
 8009540:	4403      	add	r3, r0
 8009542:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	601a      	str	r2, [r3, #0]

	msg_dods[t_dod_id].sdos[t_obj_id].args.status = DATA_OBJECT_SDO_IDLE;
 800954a:	79f9      	ldrb	r1, [r7, #7]
 800954c:	79ba      	ldrb	r2, [r7, #6]
 800954e:	4827      	ldr	r0, [pc, #156]	; (80095ec <Create_SDO+0x11c>)
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800955c:	fb01 f202 	mul.w	r2, r1, r2
 8009560:	4413      	add	r3, r2
 8009562:	4403      	add	r3, r0
 8009564:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8009568:	2202      	movs	r2, #2
 800956a:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.size   = 0;
 800956c:	79f9      	ldrb	r1, [r7, #7]
 800956e:	79ba      	ldrb	r2, [r7, #6]
 8009570:	481e      	ldr	r0, [pc, #120]	; (80095ec <Create_SDO+0x11c>)
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800957e:	fb01 f202 	mul.w	r2, r1, r2
 8009582:	4413      	add	r3, r2
 8009584:	4403      	add	r3, r0
 8009586:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800958a:	2200      	movs	r2, #0
 800958c:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data   = NULL;
 800958e:	79f9      	ldrb	r1, [r7, #7]
 8009590:	79ba      	ldrb	r2, [r7, #6]
 8009592:	4816      	ldr	r0, [pc, #88]	; (80095ec <Create_SDO+0x11c>)
 8009594:	4613      	mov	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80095a0:	fb01 f202 	mul.w	r2, r1, r2
 80095a4:	4413      	add	r3, r2
 80095a6:	4403      	add	r3, r0
 80095a8:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 80095ac:	2200      	movs	r2, #0
 80095ae:	601a      	str	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data_size = Get_Msg_Data_Type_Info(t_type).size;
 80095b0:	f107 0308 	add.w	r3, r7, #8
 80095b4:	797a      	ldrb	r2, [r7, #5]
 80095b6:	4611      	mov	r1, r2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff fe41 	bl	8009240 <Get_Msg_Data_Type_Info>
 80095be:	7b3b      	ldrb	r3, [r7, #12]
 80095c0:	79f9      	ldrb	r1, [r7, #7]
 80095c2:	79ba      	ldrb	r2, [r7, #6]
 80095c4:	b29c      	uxth	r4, r3
 80095c6:	4809      	ldr	r0, [pc, #36]	; (80095ec <Create_SDO+0x11c>)
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80095d4:	fb01 f202 	mul.w	r2, r1, r2
 80095d8:	4413      	add	r3, r2
 80095da:	4403      	add	r3, r0
 80095dc:	f203 23e6 	addw	r3, r3, #742	; 0x2e6
 80095e0:	4622      	mov	r2, r4
 80095e2:	801a      	strh	r2, [r3, #0]
}
 80095e4:	bf00      	nop
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd90      	pop	{r4, r7, pc}
 80095ec:	2400087c 	.word	0x2400087c

080095f0 <Find_PDO>:

MsgPDOStruct* Find_PDO(uint8_t t_dod_id, uint8_t t_id)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	460a      	mov	r2, r1
 80095fa:	71fb      	strb	r3, [r7, #7]
 80095fc:	4613      	mov	r3, r2
 80095fe:	71bb      	strb	r3, [r7, #6]
	return &msg_dods[t_dod_id].pdos[t_id];
 8009600:	79f9      	ldrb	r1, [r7, #7]
 8009602:	79ba      	ldrb	r2, [r7, #6]
 8009604:	4613      	mov	r3, r2
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	4413      	add	r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009610:	fb01 f202 	mul.w	r2, r1, r2
 8009614:	4413      	add	r3, r2
 8009616:	3308      	adds	r3, #8
 8009618:	4a03      	ldr	r2, [pc, #12]	; (8009628 <Find_PDO+0x38>)
 800961a:	4413      	add	r3, r2
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	2400087c 	.word	0x2400087c

0800962c <Find_SDO>:

MsgSDOStruct* Find_SDO(uint8_t t_dod_id, uint8_t t_id)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	460a      	mov	r2, r1
 8009636:	71fb      	strb	r3, [r7, #7]
 8009638:	4613      	mov	r3, r2
 800963a:	71bb      	strb	r3, [r7, #6]
	return &msg_dods[t_dod_id].sdos[t_id];
 800963c:	79f9      	ldrb	r1, [r7, #7]
 800963e:	79ba      	ldrb	r2, [r7, #6]
 8009640:	4613      	mov	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800964c:	fb01 f202 	mul.w	r2, r1, r2
 8009650:	4413      	add	r3, r2
 8009652:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8009656:	4a04      	ldr	r2, [pc, #16]	; (8009668 <Find_SDO+0x3c>)
 8009658:	4413      	add	r3, r2
}
 800965a:	4618      	mov	r0, r3
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	2400087c 	.word	0x2400087c

0800966c <Set_PDO>:

uint16_t Set_PDO(MsgPDOStruct* t_pdo, void* t_data)
{    
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
    memcpy(t_data, t_pdo->addr, t_pdo->data_size);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68d9      	ldr	r1, [r3, #12]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	7d1b      	ldrb	r3, [r3, #20]
 800967e:	461a      	mov	r2, r3
 8009680:	6838      	ldr	r0, [r7, #0]
 8009682:	f002 f87d 	bl	800b780 <memcpy>
    memcpy(t_pdo->last_pub, t_pdo->addr, t_pdo->data_size);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6918      	ldr	r0, [r3, #16]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68d9      	ldr	r1, [r3, #12]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	7d1b      	ldrb	r3, [r3, #20]
 8009692:	461a      	mov	r2, r3
 8009694:	f002 f874 	bl	800b780 <memcpy>
    return t_pdo->data_size;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7d1b      	ldrb	r3, [r3, #20]
 800969c:	b29b      	uxth	r3, r3
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <Get_PDO>:

uint16_t Get_PDO(MsgPDOStruct* t_pdo, void* t_data)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
    memcpy(t_pdo->addr, t_data, t_pdo->data_size);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68d8      	ldr	r0, [r3, #12]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	7d1b      	ldrb	r3, [r3, #20]
 80096b8:	461a      	mov	r2, r3
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	f002 f860 	bl	800b780 <memcpy>
    return t_pdo->data_size;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	7d1b      	ldrb	r3, [r3, #20]
 80096c4:	b29b      	uxth	r3, r3
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <Call_SDO>:

uint16_t Call_SDO(MsgSDOStruct* t_sdo, MsgSDOargs* t_req)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	6039      	str	r1, [r7, #0]
    if (t_sdo->args.data != NULL) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d007      	beq.n	80096f0 <Call_SDO+0x22>
        free(t_sdo->args.data);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f001 fdcf 	bl	800b288 <free>
        t_sdo->args.data = NULL;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	609a      	str	r2, [r3, #8]
    }

    t_sdo->args.status = DATA_OBJECT_SDO_IDLE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	741a      	strb	r2, [r3, #16]
    t_sdo->callback(t_req, &t_sdo->args);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	3208      	adds	r2, #8
 80096fe:	4611      	mov	r1, r2
 8009700:	6838      	ldr	r0, [r7, #0]
 8009702:	4798      	blx	r3
    return t_req->size * t_sdo->args.data_size;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	791b      	ldrb	r3, [r3, #4]
 8009708:	b29a      	uxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	89db      	ldrh	r3, [r3, #14]
 800970e:	fb12 f303 	smulbb	r3, r2, r3
 8009712:	b29b      	uxth	r3, r3
}
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <Set_SDO_args>:

    return &t_sdo->args;
}

uint16_t Set_SDO_args(MsgSDOStruct* t_sdo, MsgSDOargs* t_args)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
    // Copy status
	t_sdo->args.status = t_args->status;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	741a      	strb	r2, [r3, #16]
    
    // Copy size
    int total_size = t_sdo->args.data_size * t_args->size;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	89db      	ldrh	r3, [r3, #14]
 8009734:	461a      	mov	r2, r3
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	791b      	ldrb	r3, [r3, #4]
 800973a:	fb02 f303 	mul.w	r3, r2, r3
 800973e:	60fb      	str	r3, [r7, #12]
    t_sdo->args.size = t_args->size;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	791a      	ldrb	r2, [r3, #4]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	731a      	strb	r2, [r3, #12]
    if (total_size <= 0) {
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	dc01      	bgt.n	8009752 <Set_SDO_args+0x36>
        return 0;
 800974e:	2300      	movs	r3, #0
 8009750:	e01d      	b.n	800978e <Set_SDO_args+0x72>
    }

    // Copy data
    if (t_sdo->args.data != NULL) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d007      	beq.n	800976a <Set_SDO_args+0x4e>
        free(t_sdo->args.data);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	4618      	mov	r0, r3
 8009760:	f001 fd92 	bl	800b288 <free>
        t_sdo->args.data = NULL;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	609a      	str	r2, [r3, #8]
    }
    t_sdo->args.data = malloc(total_size);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4618      	mov	r0, r3
 800976e:	f001 fd83 	bl	800b278 <malloc>
 8009772:	4603      	mov	r3, r0
 8009774:	461a      	mov	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	609a      	str	r2, [r3, #8]
    memcpy(t_sdo->args.data, t_args->data, total_size);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6898      	ldr	r0, [r3, #8]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	4619      	mov	r1, r3
 8009786:	f001 fffb 	bl	800b780 <memcpy>

    return total_size;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	b29b      	uxth	r3, r3
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <Convert_Byte_Length>:
//
//    return ((temp1<<3)|(temp2<<2)|(temp3<<1)|(temp4));
//}

static int Convert_Byte_Length(uint8_t t_length)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	4603      	mov	r3, r0
 800979e:	71fb      	strb	r3, [r7, #7]
    if(t_length == 0 )                       		{return FDCAN_DLC_BYTES_0; }
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <Convert_Byte_Length+0x14>
 80097a6:	2300      	movs	r3, #0
 80097a8:	e06f      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if(t_length == 1 )                  		{return FDCAN_DLC_BYTES_1; }
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d102      	bne.n	80097b6 <Convert_Byte_Length+0x20>
 80097b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097b4:	e069      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if(t_length == 2 )                  		{return FDCAN_DLC_BYTES_2; }
 80097b6:	79fb      	ldrb	r3, [r7, #7]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d102      	bne.n	80097c2 <Convert_Byte_Length+0x2c>
 80097bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097c0:	e063      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if(t_length == 3 )                  		{return FDCAN_DLC_BYTES_3; }
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d102      	bne.n	80097ce <Convert_Byte_Length+0x38>
 80097c8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80097cc:	e05d      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if(t_length == 4 )                  		{return FDCAN_DLC_BYTES_4; }
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d102      	bne.n	80097da <Convert_Byte_Length+0x44>
 80097d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80097d8:	e057      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if(t_length == 5 )                  		{return FDCAN_DLC_BYTES_5; }
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	2b05      	cmp	r3, #5
 80097de:	d102      	bne.n	80097e6 <Convert_Byte_Length+0x50>
 80097e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80097e4:	e051      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if(t_length == 6 )                  		{return FDCAN_DLC_BYTES_6; }
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	2b06      	cmp	r3, #6
 80097ea:	d102      	bne.n	80097f2 <Convert_Byte_Length+0x5c>
 80097ec:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80097f0:	e04b      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if(t_length == 7 )                  		{return FDCAN_DLC_BYTES_7; }
 80097f2:	79fb      	ldrb	r3, [r7, #7]
 80097f4:	2b07      	cmp	r3, #7
 80097f6:	d102      	bne.n	80097fe <Convert_Byte_Length+0x68>
 80097f8:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 80097fc:	e045      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if(t_length == 8 )                  		{return FDCAN_DLC_BYTES_8; }
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	2b08      	cmp	r3, #8
 8009802:	d102      	bne.n	800980a <Convert_Byte_Length+0x74>
 8009804:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009808:	e03f      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if((t_length > 8 ) && (t_length <= 12 )) 	{return FDCAN_DLC_BYTES_12; }
 800980a:	79fb      	ldrb	r3, [r7, #7]
 800980c:	2b08      	cmp	r3, #8
 800980e:	d905      	bls.n	800981c <Convert_Byte_Length+0x86>
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	2b0c      	cmp	r3, #12
 8009814:	d802      	bhi.n	800981c <Convert_Byte_Length+0x86>
 8009816:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800981a:	e036      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if((t_length > 12 ) && (t_length <= 16 ))	{return FDCAN_DLC_BYTES_16; }
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	2b0c      	cmp	r3, #12
 8009820:	d905      	bls.n	800982e <Convert_Byte_Length+0x98>
 8009822:	79fb      	ldrb	r3, [r7, #7]
 8009824:	2b10      	cmp	r3, #16
 8009826:	d802      	bhi.n	800982e <Convert_Byte_Length+0x98>
 8009828:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800982c:	e02d      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if((t_length > 16 ) && (t_length <= 20 ))	{return FDCAN_DLC_BYTES_20; }
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	2b10      	cmp	r3, #16
 8009832:	d905      	bls.n	8009840 <Convert_Byte_Length+0xaa>
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	2b14      	cmp	r3, #20
 8009838:	d802      	bhi.n	8009840 <Convert_Byte_Length+0xaa>
 800983a:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 800983e:	e024      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if((t_length > 20 ) && (t_length <= 24 ))	{return FDCAN_DLC_BYTES_24; }
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	2b14      	cmp	r3, #20
 8009844:	d905      	bls.n	8009852 <Convert_Byte_Length+0xbc>
 8009846:	79fb      	ldrb	r3, [r7, #7]
 8009848:	2b18      	cmp	r3, #24
 800984a:	d802      	bhi.n	8009852 <Convert_Byte_Length+0xbc>
 800984c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8009850:	e01b      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if((t_length > 24 ) && (t_length <= 32 ))	{return FDCAN_DLC_BYTES_32; }
 8009852:	79fb      	ldrb	r3, [r7, #7]
 8009854:	2b18      	cmp	r3, #24
 8009856:	d905      	bls.n	8009864 <Convert_Byte_Length+0xce>
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b20      	cmp	r3, #32
 800985c:	d802      	bhi.n	8009864 <Convert_Byte_Length+0xce>
 800985e:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 8009862:	e012      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if((t_length > 32 ) && (t_length <= 48 ))	{return FDCAN_DLC_BYTES_48; }
 8009864:	79fb      	ldrb	r3, [r7, #7]
 8009866:	2b20      	cmp	r3, #32
 8009868:	d905      	bls.n	8009876 <Convert_Byte_Length+0xe0>
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	2b30      	cmp	r3, #48	; 0x30
 800986e:	d802      	bhi.n	8009876 <Convert_Byte_Length+0xe0>
 8009870:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8009874:	e009      	b.n	800988a <Convert_Byte_Length+0xf4>
    else if((t_length > 48 ) && (t_length <= 64 ))	{return FDCAN_DLC_BYTES_64; }
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	2b30      	cmp	r3, #48	; 0x30
 800987a:	d905      	bls.n	8009888 <Convert_Byte_Length+0xf2>
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	2b40      	cmp	r3, #64	; 0x40
 8009880:	d802      	bhi.n	8009888 <Convert_Byte_Length+0xf2>
 8009882:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8009886:	e000      	b.n	800988a <Convert_Byte_Length+0xf4>
    else                                			{return FDCAN_DLC_BYTES_0; }
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <Get_Header>:

static MsgDataObjectHeader Get_Header(uint8_t* t_byte_arr)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	b29b      	uxth	r3, r3
	MsgDataObjectHeader t_header;
    memcpy(&t_header, t_byte_arr, sizeof(MsgDataObjectHeader));
 80098a4:	813b      	strh	r3, [r7, #8]
    return t_header;
 80098a6:	893b      	ldrh	r3, [r7, #8]
 80098a8:	81bb      	strh	r3, [r7, #12]
 80098aa:	2300      	movs	r3, #0
 80098ac:	7b3a      	ldrb	r2, [r7, #12]
 80098ae:	f362 0307 	bfi	r3, r2, #0, #8
 80098b2:	7b7a      	ldrb	r2, [r7, #13]
 80098b4:	f362 230f 	bfi	r3, r2, #8, #8
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <Recv_EMCY>:
    free(t_tx_data);
    t_tx_data = NULL;
}

static void Recv_EMCY(uint8_t* t_byte_arr, uint32_t* t_err_code)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
    memcpy(t_err_code, t_byte_arr, ERR_CODE_SIZE);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	601a      	str	r2, [r3, #0]
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <Convert_Bytes_to_SDO_req>:
 |___/___/ \___/  |_|_\/_/\_\
                             
*/

static MsgSDOargs Convert_Bytes_to_SDO_req(uint8_t* t_byte_arr, uint16_t *t_byte_len)
{
 80098e4:	b590      	push	{r4, r7, lr}
 80098e6:	b08b      	sub	sp, #44	; 0x2c
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
	MsgSDOargs t_req;
    *t_byte_len = 0;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	801a      	strh	r2, [r3, #0]

    int t_idx = sizeof(t_req.status);
 80098f6:	2301      	movs	r3, #1
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
    int t_len = sizeof(t_req.size);
 80098fa:	2301      	movs	r3, #1
 80098fc:	623b      	str	r3, [r7, #32]

    memcpy(&t_req.size, &t_byte_arr[t_idx], t_len);
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	18d1      	adds	r1, r2, r3
 8009904:	6a3a      	ldr	r2, [r7, #32]
 8009906:	f107 0314 	add.w	r3, r7, #20
 800990a:	3304      	adds	r3, #4
 800990c:	4618      	mov	r0, r3
 800990e:	f001 ff37 	bl	800b780 <memcpy>
    *t_byte_len += t_len;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	881a      	ldrh	r2, [r3, #0]
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	b29b      	uxth	r3, r3
 800991a:	4413      	add	r3, r2
 800991c:	b29a      	uxth	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	801a      	strh	r2, [r3, #0]

    t_req.data = &t_byte_arr[t_idx + t_len];
 8009922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	4413      	add	r3, r2
 8009928:	461a      	mov	r2, r3
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	4413      	add	r3, r2
 800992e:	617b      	str	r3, [r7, #20]

    t_req.status = t_byte_arr[0];
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	b25b      	sxtb	r3, r3
 8009936:	773b      	strb	r3, [r7, #28]
    *t_byte_len += 1;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	3301      	adds	r3, #1
 800993e:	b29a      	uxth	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	801a      	strh	r2, [r3, #0]

    return t_req;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	461c      	mov	r4, r3
 8009948:	f107 0314 	add.w	r3, r7, #20
 800994c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009950:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	372c      	adds	r7, #44	; 0x2c
 8009958:	46bd      	mov	sp, r7
 800995a:	bd90      	pop	{r4, r7, pc}

0800995c <Read_SDO>:

static int Read_SDO(uint8_t* t_byte_arr)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b090      	sub	sp, #64	; 0x40
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
    int t_byte_read = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	63bb      	str	r3, [r7, #56]	; 0x38
    MsgDataObjectHeader t_header = Get_Header(t_byte_arr);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff ff94 	bl	8009896 <Get_Header>
 800996e:	4603      	mov	r3, r0
 8009970:	83bb      	strh	r3, [r7, #28]
    t_byte_read += sizeof(MsgDataObjectHeader);
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	3302      	adds	r3, #2
 8009976:	63bb      	str	r3, [r7, #56]	; 0x38

    MsgSDOStruct* t_sdo = Find_SDO(t_header.dod_id, t_header.obj_id);
 8009978:	7f3b      	ldrb	r3, [r7, #28]
 800997a:	7f7a      	ldrb	r2, [r7, #29]
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff fe54 	bl	800962c <Find_SDO>
 8009984:	6378      	str	r0, [r7, #52]	; 0x34
    if (t_sdo == NULL) {
 8009986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009988:	2b00      	cmp	r3, #0
 800998a:	d102      	bne.n	8009992 <Read_SDO+0x36>
        //TODO: Cannot Find SDO ERROR
        return -2;
 800998c:	f06f 0301 	mvn.w	r3, #1
 8009990:	e0c9      	b.n	8009b26 <Read_SDO+0x1ca>
    }

    uint16_t t_req_bytes = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	837b      	strh	r3, [r7, #26]
    MsgSDOargs t_req = Convert_Bytes_to_SDO_req(t_byte_arr + t_byte_read, &t_req_bytes);
 8009996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	18d1      	adds	r1, r2, r3
 800999c:	f107 030c 	add.w	r3, r7, #12
 80099a0:	f107 021a 	add.w	r2, r7, #26
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff ff9d 	bl	80098e4 <Convert_Bytes_to_SDO_req>
    t_req.data_size = t_sdo->args.data_size; // Copy SDO info
 80099aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ac:	89db      	ldrh	r3, [r3, #14]
 80099ae:	827b      	strh	r3, [r7, #18]
    t_byte_read += t_req_bytes;
 80099b0:	8b7b      	ldrh	r3, [r7, #26]
 80099b2:	461a      	mov	r2, r3
 80099b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b6:	4413      	add	r3, r2
 80099b8:	63bb      	str	r3, [r7, #56]	; 0x38

    uint16_t t_n_bytes = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
    if (t_req.status == DATA_OBJECT_SDO_REQU) {
 80099be:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	f040 8095 	bne.w	8009af2 <Read_SDO+0x196>
    	t_n_bytes = Call_SDO(t_sdo, &t_req);
 80099c8:	f107 030c 	add.w	r3, r7, #12
 80099cc:	4619      	mov	r1, r3
 80099ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80099d0:	f7ff fe7d 	bl	80096ce <Call_SDO>
 80099d4:	4603      	mov	r3, r0
 80099d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        cvector_push_back(sdo_res_list, t_header); // Assign Response
 80099d8:	4b55      	ldr	r3, [pc, #340]	; (8009b30 <Read_SDO+0x1d4>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d004      	beq.n	80099ea <Read_SDO+0x8e>
 80099e0:	4b53      	ldr	r3, [pc, #332]	; (8009b30 <Read_SDO+0x1d4>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3b04      	subs	r3, #4
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	e000      	b.n	80099ec <Read_SDO+0x90>
 80099ea:	2300      	movs	r3, #0
 80099ec:	633b      	str	r3, [r7, #48]	; 0x30
 80099ee:	4b50      	ldr	r3, [pc, #320]	; (8009b30 <Read_SDO+0x1d4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d004      	beq.n	8009a00 <Read_SDO+0xa4>
 80099f6:	4b4e      	ldr	r3, [pc, #312]	; (8009b30 <Read_SDO+0x1d4>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80099fe:	e000      	b.n	8009a02 <Read_SDO+0xa6>
 8009a00:	2300      	movs	r3, #0
 8009a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d34d      	bcc.n	8009aa4 <Read_SDO+0x148>
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	3305      	adds	r3, #5
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a10:	4b47      	ldr	r3, [pc, #284]	; (8009b30 <Read_SDO+0x1d4>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d020      	beq.n	8009a5a <Read_SDO+0xfe>
 8009a18:	4b45      	ldr	r3, [pc, #276]	; (8009b30 <Read_SDO+0x1d4>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3b08      	subs	r3, #8
 8009a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a24:	f001 fce4 	bl	800b3f0 <realloc>
 8009a28:	6238      	str	r0, [r7, #32]
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d105      	bne.n	8009a3c <Read_SDO+0xe0>
 8009a30:	4b40      	ldr	r3, [pc, #256]	; (8009b34 <Read_SDO+0x1d8>)
 8009a32:	4a41      	ldr	r2, [pc, #260]	; (8009b38 <Read_SDO+0x1dc>)
 8009a34:	21a5      	movs	r1, #165	; 0xa5
 8009a36:	4841      	ldr	r0, [pc, #260]	; (8009b3c <Read_SDO+0x1e0>)
 8009a38:	f001 fc00 	bl	800b23c <__assert_func>
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	3308      	adds	r3, #8
 8009a40:	4a3b      	ldr	r2, [pc, #236]	; (8009b30 <Read_SDO+0x1d4>)
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	4b3a      	ldr	r3, [pc, #232]	; (8009b30 <Read_SDO+0x1d4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d02b      	beq.n	8009aa4 <Read_SDO+0x148>
 8009a4c:	4b38      	ldr	r3, [pc, #224]	; (8009b30 <Read_SDO+0x1d4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3b04      	subs	r3, #4
 8009a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a54:	3201      	adds	r2, #1
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	e024      	b.n	8009aa4 <Read_SDO+0x148>
 8009a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a5c:	f001 fc0c 	bl	800b278 <malloc>
 8009a60:	4603      	mov	r3, r0
 8009a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <Read_SDO+0x11a>
 8009a6a:	4b35      	ldr	r3, [pc, #212]	; (8009b40 <Read_SDO+0x1e4>)
 8009a6c:	4a32      	ldr	r2, [pc, #200]	; (8009b38 <Read_SDO+0x1dc>)
 8009a6e:	21a5      	movs	r1, #165	; 0xa5
 8009a70:	4832      	ldr	r0, [pc, #200]	; (8009b3c <Read_SDO+0x1e0>)
 8009a72:	f001 fbe3 	bl	800b23c <__assert_func>
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	3308      	adds	r3, #8
 8009a7a:	4a2d      	ldr	r2, [pc, #180]	; (8009b30 <Read_SDO+0x1d4>)
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	4b2c      	ldr	r3, [pc, #176]	; (8009b30 <Read_SDO+0x1d4>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d005      	beq.n	8009a92 <Read_SDO+0x136>
 8009a86:	4b2a      	ldr	r3, [pc, #168]	; (8009b30 <Read_SDO+0x1d4>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3b04      	subs	r3, #4
 8009a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a8e:	3201      	adds	r2, #1
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	4b27      	ldr	r3, [pc, #156]	; (8009b30 <Read_SDO+0x1d4>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d004      	beq.n	8009aa4 <Read_SDO+0x148>
 8009a9a:	4b25      	ldr	r3, [pc, #148]	; (8009b30 <Read_SDO+0x1d4>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3b08      	subs	r3, #8
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	4b22      	ldr	r3, [pc, #136]	; (8009b30 <Read_SDO+0x1d4>)
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	4b21      	ldr	r3, [pc, #132]	; (8009b30 <Read_SDO+0x1d4>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <Read_SDO+0x160>
 8009ab0:	4b1f      	ldr	r3, [pc, #124]	; (8009b30 <Read_SDO+0x1d4>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3b08      	subs	r3, #8
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	e000      	b.n	8009abe <Read_SDO+0x162>
 8009abc:	2300      	movs	r3, #0
 8009abe:	4413      	add	r3, r2
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	f107 031c 	add.w	r3, r7, #28
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	8013      	strh	r3, [r2, #0]
 8009aca:	4b19      	ldr	r3, [pc, #100]	; (8009b30 <Read_SDO+0x1d4>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d024      	beq.n	8009b1c <Read_SDO+0x1c0>
 8009ad2:	4b17      	ldr	r3, [pc, #92]	; (8009b30 <Read_SDO+0x1d4>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d005      	beq.n	8009ae6 <Read_SDO+0x18a>
 8009ada:	4b15      	ldr	r3, [pc, #84]	; (8009b30 <Read_SDO+0x1d4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3b08      	subs	r3, #8
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	e000      	b.n	8009ae8 <Read_SDO+0x18c>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4a11      	ldr	r2, [pc, #68]	; (8009b30 <Read_SDO+0x1d4>)
 8009aea:	6812      	ldr	r2, [r2, #0]
 8009aec:	3a08      	subs	r2, #8
 8009aee:	6013      	str	r3, [r2, #0]
 8009af0:	e014      	b.n	8009b1c <Read_SDO+0x1c0>
    } else if(t_req.status == DATA_OBJECT_SDO_SUCC || t_req.status == DATA_OBJECT_SDO_FAIL) {
 8009af2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d004      	beq.n	8009b04 <Read_SDO+0x1a8>
 8009afa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b02:	d108      	bne.n	8009b16 <Read_SDO+0x1ba>
    	t_n_bytes = Set_SDO_args(t_sdo, &t_req);
 8009b04:	f107 030c 	add.w	r3, r7, #12
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009b0c:	f7ff fe06 	bl	800971c <Set_SDO_args>
 8009b10:	4603      	mov	r3, r0
 8009b12:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if (t_n_bytes < 0) {
 8009b14:	e002      	b.n	8009b1c <Read_SDO+0x1c0>
            //TODO: Set SDO Argument ERROR
            return -1;
        }
    } else {
        //TODO: Read SDO Status ERROR
        return -1;
 8009b16:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1a:	e004      	b.n	8009b26 <Read_SDO+0x1ca>
    }

    t_byte_read += t_n_bytes;
 8009b1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b20:	4413      	add	r3, r2
 8009b22:	63bb      	str	r3, [r7, #56]	; 0x38
    return t_byte_read;
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3740      	adds	r7, #64	; 0x40
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	2400d2c4 	.word	0x2400d2c4
 8009b34:	0800d020 	.word	0x0800d020
 8009b38:	0800d08c 	.word	0x0800d08c
 8009b3c:	0800d028 	.word	0x0800d028
 8009b40:	0800d064 	.word	0x0800d064

08009b44 <Unpack_SDO>:

static int Unpack_SDO(uint8_t* t_byte_arr)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
    int t_cursor = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	617b      	str	r3, [r7, #20]

    // Get # of SDOs
    uint16_t t_n_sdo = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	817b      	strh	r3, [r7, #10]
    memcpy(&t_n_sdo, &t_byte_arr[t_cursor], OBJ_NUMS_SIZE);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	4413      	add	r3, r2
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	72bb      	strb	r3, [r7, #10]
    t_cursor += OBJ_NUMS_SIZE;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	3301      	adds	r3, #1
 8009b62:	617b      	str	r3, [r7, #20]

    // Call & Respond SDOs
    if (t_n_sdo > 0) {
 8009b64:	897b      	ldrh	r3, [r7, #10]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d01f      	beq.n	8009baa <Unpack_SDO+0x66>
        for (int i = 0; i < t_n_sdo; ++i) {
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	613b      	str	r3, [r7, #16]
 8009b6e:	e017      	b.n	8009ba0 <Unpack_SDO+0x5c>
            int temp_cursor = Read_SDO(&t_byte_arr[t_cursor]);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4413      	add	r3, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7ff fef0 	bl	800995c <Read_SDO>
 8009b7c:	60f8      	str	r0, [r7, #12]
            if (temp_cursor > 0) {
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	dd04      	ble.n	8009b8e <Unpack_SDO+0x4a>
            	t_cursor += temp_cursor;
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	4413      	add	r3, r2
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	e005      	b.n	8009b9a <Unpack_SDO+0x56>
            } else if (temp_cursor < 0) {
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	da02      	bge.n	8009b9a <Unpack_SDO+0x56>
                //TODO: Unpack SDO ERROR
                return MSG_SDO_FAULT;
 8009b94:	f06f 0301 	mvn.w	r3, #1
 8009b98:	e008      	b.n	8009bac <Unpack_SDO+0x68>
        for (int i = 0; i < t_n_sdo; ++i) {
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	613b      	str	r3, [r7, #16]
 8009ba0:	897b      	ldrh	r3, [r7, #10]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	dbe2      	blt.n	8009b70 <Unpack_SDO+0x2c>
            }
        }
    }

    return MSG_DO_SUCCESS;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3718      	adds	r7, #24
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <Convert_SDOres_to_Bytes>:
 |___/___/ \___/    |_| /_/\_\
                              
*/

static int Convert_SDOres_to_Bytes(MsgDataObjectHeader* t_header, uint8_t* t_byte_arr)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
    int t_byte_written = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	617b      	str	r3, [r7, #20]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	b29a      	uxth	r2, r3
    // Set SDO Header
    memcpy(t_byte_arr, t_header, sizeof(MsgDataObjectHeader));
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	801a      	strh	r2, [r3, #0]
    t_byte_written += sizeof(MsgDataObjectHeader);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	3302      	adds	r3, #2
 8009bd0:	617b      	str	r3, [r7, #20]

    // Return Response
    MsgSDOStruct* t_sdo = Find_SDO(t_header->dod_id, t_header->obj_id);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	781a      	ldrb	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7ff fd25 	bl	800962c <Find_SDO>
 8009be2:	6138      	str	r0, [r7, #16]
    if (t_sdo == NULL) {
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d102      	bne.n	8009bf0 <Convert_SDOres_to_Bytes+0x3c>
        //TODO: Cannot Find SDO ERROR
        return -2;
 8009bea:	f06f 0301 	mvn.w	r3, #1
 8009bee:	e029      	b.n	8009c44 <Convert_SDOres_to_Bytes+0x90>
    }

    memcpy(t_byte_arr + t_byte_written, &t_sdo->args.status, sizeof(t_sdo->args.status));
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	3210      	adds	r2, #16
 8009bfa:	7812      	ldrb	r2, [r2, #0]
 8009bfc:	701a      	strb	r2, [r3, #0]
    t_byte_written += sizeof(t_sdo->args.status);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	3301      	adds	r3, #1
 8009c02:	617b      	str	r3, [r7, #20]
    memcpy(t_byte_arr + t_byte_written, &t_sdo->args.size,   sizeof(t_sdo->args.size));
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4413      	add	r3, r2
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	320c      	adds	r2, #12
 8009c0e:	7812      	ldrb	r2, [r2, #0]
 8009c10:	701a      	strb	r2, [r3, #0]
    t_byte_written += sizeof(t_sdo->args.size);
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	3301      	adds	r3, #1
 8009c16:	617b      	str	r3, [r7, #20]

    int t_data_len = t_sdo->args.size * t_sdo->args.data_size;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	7b1b      	ldrb	r3, [r3, #12]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	89db      	ldrh	r3, [r3, #14]
 8009c22:	fb02 f303 	mul.w	r3, r2, r3
 8009c26:	60fb      	str	r3, [r7, #12]
    memcpy(t_byte_arr + t_byte_written, t_sdo->args.data, t_data_len);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	18d0      	adds	r0, r2, r3
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	4619      	mov	r1, r3
 8009c36:	f001 fda3 	bl	800b780 <memcpy>

    t_byte_written += t_data_len;
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4413      	add	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]

    return t_byte_written;
 8009c42:	697b      	ldr	r3, [r7, #20]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3718      	adds	r7, #24
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <Pack_SDO>:

static int Pack_SDO(uint8_t* t_byte_arr, uint8_t* t_byte_len)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08c      	sub	sp, #48	; 0x30
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
	// check send list whether these are empty or not 
	if ((sdo_res_list == NULL) && (sdo_req_list == NULL)){
 8009c56:	4b53      	ldr	r3, [pc, #332]	; (8009da4 <Pack_SDO+0x158>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d105      	bne.n	8009c6a <Pack_SDO+0x1e>
 8009c5e:	4b52      	ldr	r3, [pc, #328]	; (8009da8 <Pack_SDO+0x15c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <Pack_SDO+0x1e>
		return MSG_SDO_NOTHING;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e098      	b.n	8009d9c <Pack_SDO+0x150>
	}

	// Message Packaging
    int t_cursor = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Res SDOs
    int t_n_sdo_cursor = t_cursor;
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	623b      	str	r3, [r7, #32]
    t_cursor += OBJ_NUMS_SIZE;
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	3301      	adds	r3, #1
 8009c76:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t t_n_sdo = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73fb      	strb	r3, [r7, #15]
    
    if (sdo_res_list != NULL) {
 8009c7c:	4b49      	ldr	r3, [pc, #292]	; (8009da4 <Pack_SDO+0x158>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d03e      	beq.n	8009d02 <Pack_SDO+0xb6>
        for(int i = 0; i < cvector_size(sdo_res_list); ++i) {
 8009c84:	2300      	movs	r3, #0
 8009c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c88:	e020      	b.n	8009ccc <Pack_SDO+0x80>
            int temp_cursor = Convert_SDOres_to_Bytes(&sdo_res_list[i], &t_byte_arr[t_cursor]);
 8009c8a:	4b46      	ldr	r3, [pc, #280]	; (8009da4 <Pack_SDO+0x158>)
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	005b      	lsls	r3, r3, #1
 8009c92:	18d0      	adds	r0, r2, r3
 8009c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	4413      	add	r3, r2
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	f7ff ff8a 	bl	8009bb4 <Convert_SDOres_to_Bytes>
 8009ca0:	61b8      	str	r0, [r7, #24]
            if (temp_cursor > 0) {
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	dd08      	ble.n	8009cba <Pack_SDO+0x6e>
            	t_cursor += temp_cursor;
 8009ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	4413      	add	r3, r2
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
                ++t_n_sdo;
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	73fb      	strb	r3, [r7, #15]
 8009cb8:	e005      	b.n	8009cc6 <Pack_SDO+0x7a>
            } else if (temp_cursor < 0) {
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	da02      	bge.n	8009cc6 <Pack_SDO+0x7a>
                //TODO: Pack Response SDO Error
                return MSG_SDO_FAULT;
 8009cc0:	f06f 0301 	mvn.w	r3, #1
 8009cc4:	e06a      	b.n	8009d9c <Pack_SDO+0x150>
        for(int i = 0; i < cvector_size(sdo_res_list); ++i) {
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	3301      	adds	r3, #1
 8009cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ccc:	4b35      	ldr	r3, [pc, #212]	; (8009da4 <Pack_SDO+0x158>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d004      	beq.n	8009cde <Pack_SDO+0x92>
 8009cd4:	4b33      	ldr	r3, [pc, #204]	; (8009da4 <Pack_SDO+0x158>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3b08      	subs	r3, #8
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	e000      	b.n	8009ce0 <Pack_SDO+0x94>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d8d1      	bhi.n	8009c8a <Pack_SDO+0x3e>
            }
        }
        cvector_free(sdo_res_list);
 8009ce6:	4b2f      	ldr	r3, [pc, #188]	; (8009da4 <Pack_SDO+0x158>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d006      	beq.n	8009cfc <Pack_SDO+0xb0>
 8009cee:	4b2d      	ldr	r3, [pc, #180]	; (8009da4 <Pack_SDO+0x158>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3b08      	subs	r3, #8
 8009cf4:	61fb      	str	r3, [r7, #28]
 8009cf6:	69f8      	ldr	r0, [r7, #28]
 8009cf8:	f001 fac6 	bl	800b288 <free>
        sdo_res_list = NULL;
 8009cfc:	4b29      	ldr	r3, [pc, #164]	; (8009da4 <Pack_SDO+0x158>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	601a      	str	r2, [r3, #0]
    }

    // Req SDOs
    if (sdo_req_list != NULL) {
 8009d02:	4b29      	ldr	r3, [pc, #164]	; (8009da8 <Pack_SDO+0x15c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d03e      	beq.n	8009d88 <Pack_SDO+0x13c>
        for(int i = 0; i < cvector_size(sdo_req_list); ++i) {
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d0e:	e020      	b.n	8009d52 <Pack_SDO+0x106>
            int temp_cursor = Convert_SDOres_to_Bytes(&sdo_req_list[i], &t_byte_arr[t_cursor]);
 8009d10:	4b25      	ldr	r3, [pc, #148]	; (8009da8 <Pack_SDO+0x15c>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	18d0      	adds	r0, r2, r3
 8009d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	4413      	add	r3, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	f7ff ff47 	bl	8009bb4 <Convert_SDOres_to_Bytes>
 8009d26:	6138      	str	r0, [r7, #16]
            if (temp_cursor > 0) {
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dd08      	ble.n	8009d40 <Pack_SDO+0xf4>
            	t_cursor += temp_cursor;
 8009d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	4413      	add	r3, r2
 8009d34:	62fb      	str	r3, [r7, #44]	; 0x2c
                ++t_n_sdo;
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	73fb      	strb	r3, [r7, #15]
 8009d3e:	e005      	b.n	8009d4c <Pack_SDO+0x100>
            } else if (temp_cursor < 0) {
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	da02      	bge.n	8009d4c <Pack_SDO+0x100>
                //TODO: Pack Request SDO Error
                return MSG_SDO_FAULT;
 8009d46:	f06f 0301 	mvn.w	r3, #1
 8009d4a:	e027      	b.n	8009d9c <Pack_SDO+0x150>
        for(int i = 0; i < cvector_size(sdo_req_list); ++i) {
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	3301      	adds	r3, #1
 8009d50:	627b      	str	r3, [r7, #36]	; 0x24
 8009d52:	4b15      	ldr	r3, [pc, #84]	; (8009da8 <Pack_SDO+0x15c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d004      	beq.n	8009d64 <Pack_SDO+0x118>
 8009d5a:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <Pack_SDO+0x15c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3b08      	subs	r3, #8
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	e000      	b.n	8009d66 <Pack_SDO+0x11a>
 8009d64:	2300      	movs	r3, #0
 8009d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d8d1      	bhi.n	8009d10 <Pack_SDO+0xc4>
            }
        }
        cvector_free(sdo_req_list);
 8009d6c:	4b0e      	ldr	r3, [pc, #56]	; (8009da8 <Pack_SDO+0x15c>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d006      	beq.n	8009d82 <Pack_SDO+0x136>
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <Pack_SDO+0x15c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3b08      	subs	r3, #8
 8009d7a:	617b      	str	r3, [r7, #20]
 8009d7c:	6978      	ldr	r0, [r7, #20]
 8009d7e:	f001 fa83 	bl	800b288 <free>
        sdo_req_list = NULL;
 8009d82:	4b09      	ldr	r3, [pc, #36]	; (8009da8 <Pack_SDO+0x15c>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	601a      	str	r2, [r3, #0]
    }

    // Set # of SDOs
    memcpy(&t_byte_arr[t_n_sdo_cursor], &t_n_sdo, OBJ_NUMS_SIZE);
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	7bfa      	ldrb	r2, [r7, #15]
 8009d90:	701a      	strb	r2, [r3, #0]

    *t_byte_len = t_cursor;
 8009d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	701a      	strb	r2, [r3, #0]

    return MSG_DO_SUCCESS;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3730      	adds	r7, #48	; 0x30
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	2400d2c4 	.word	0x2400d2c4
 8009da8:	2400d2c0 	.word	0x2400d2c0

08009dac <Send_SDO>:

static int Send_SDO(uint8_t t_dest_node)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	71fb      	strb	r3, [r7, #7]
    uint8_t t_byte_len;
    uint16_t t_identifier = SDO|(node_id<<4)|t_dest_node;
 8009db6:	4b17      	ldr	r3, [pc, #92]	; (8009e14 <Send_SDO+0x68>)
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	b21b      	sxth	r3, r3
 8009dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009dc2:	b21a      	sxth	r2, r3
 8009dc4:	79fb      	ldrb	r3, [r7, #7]
 8009dc6:	b21b      	sxth	r3, r3
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	b21b      	sxth	r3, r3
 8009dcc:	82fb      	strh	r3, [r7, #22]

    int t_check = Pack_SDO(fdcanRxData, &t_byte_len);
 8009dce:	f107 030f 	add.w	r3, r7, #15
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4810      	ldr	r0, [pc, #64]	; (8009e18 <Send_SDO+0x6c>)
 8009dd6:	f7ff ff39 	bl	8009c4c <Pack_SDO>
 8009dda:	6138      	str	r0, [r7, #16]

    if(t_check < 0){
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da01      	bge.n	8009de6 <Send_SDO+0x3a>
        //TODO: Send SDO Error
    	return t_check;
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	e011      	b.n	8009e0a <Send_SDO+0x5e>
    } else if(t_check){
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <Send_SDO+0x44>
    	return t_check;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	e00c      	b.n	8009e0a <Send_SDO+0x5e>

    if (t_byte_len > 64) {
        //TODO: TX MESSAGE TOO LONG ERROR 
    }

    if(Send_MSG(t_identifier, t_byte_len, fdcanRxData) != 0){
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	4619      	mov	r1, r3
 8009df4:	8afb      	ldrh	r3, [r7, #22]
 8009df6:	4a08      	ldr	r2, [pc, #32]	; (8009e18 <Send_SDO+0x6c>)
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 fb3f 	bl	800a47c <Send_MSG>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <Send_SDO+0x5c>
        return t_check;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	e000      	b.n	8009e0a <Send_SDO+0x5e>
        //TODO: MSG TX ERROR
    }

    return t_check;
 8009e08:	693b      	ldr	r3, [r7, #16]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	2400d2c8 	.word	0x2400d2c8
 8009e18:	2400d314 	.word	0x2400d314

08009e1c <Convert_Bytes_to_PDO>:
 |_| |___/ \___/  |_|_\/_/\_\
                             
*/

static int Convert_Bytes_to_PDO(uint8_t* t_byte_arr)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
    int t_byte_read = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	617b      	str	r3, [r7, #20]

    MsgDataObjectHeader t_header = Get_Header(t_byte_arr);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f7ff fd34 	bl	8009896 <Get_Header>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	81bb      	strh	r3, [r7, #12]
    t_byte_read += sizeof(MsgDataObjectHeader);
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	3302      	adds	r3, #2
 8009e36:	617b      	str	r3, [r7, #20]

    MsgPDOStruct* t_pdo = Find_PDO(t_header.dod_id, t_header.obj_id);
 8009e38:	7b3b      	ldrb	r3, [r7, #12]
 8009e3a:	7b7a      	ldrb	r2, [r7, #13]
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff fbd6 	bl	80095f0 <Find_PDO>
 8009e44:	6138      	str	r0, [r7, #16]
    if (t_pdo == NULL) {
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <Convert_Bytes_to_PDO+0x36>
        //TODO: Cannot Find PDO Error
        return -2;
 8009e4c:	f06f 0301 	mvn.w	r3, #1
 8009e50:	e00d      	b.n	8009e6e <Convert_Bytes_to_PDO+0x52>
    }

    uint16_t t_n_bytes = Get_PDO(t_pdo, (void*)(t_byte_arr + t_byte_read));
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	4413      	add	r3, r2
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6938      	ldr	r0, [r7, #16]
 8009e5c:	f7ff fc23 	bl	80096a6 <Get_PDO>
 8009e60:	4603      	mov	r3, r0
 8009e62:	81fb      	strh	r3, [r7, #14]
    if (t_n_bytes < 0) {
        //TODO: Copy PDO to Receive Error
        return -1;
    }
    t_byte_read += t_n_bytes;
 8009e64:	89fb      	ldrh	r3, [r7, #14]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	4413      	add	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]

    return t_byte_read;
 8009e6c:	697b      	ldr	r3, [r7, #20]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <Unpack_PDO>:

static int Unpack_PDO(uint8_t* t_byte_arr)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b086      	sub	sp, #24
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
    int t_cursor = 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]

    // Get # of PDOs
    uint8_t t_n_pdo = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	72fb      	strb	r3, [r7, #11]
    memcpy(&t_n_pdo, &t_byte_arr[t_cursor], OBJ_NUMS_SIZE);
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	72fb      	strb	r3, [r7, #11]
    t_cursor += OBJ_NUMS_SIZE;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	3301      	adds	r3, #1
 8009e94:	617b      	str	r3, [r7, #20]

    if (t_n_pdo > 0) {
 8009e96:	7afb      	ldrb	r3, [r7, #11]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d01f      	beq.n	8009edc <Unpack_PDO+0x66>
        for (int i = 0; i < t_n_pdo; ++i) {
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	613b      	str	r3, [r7, #16]
 8009ea0:	e017      	b.n	8009ed2 <Unpack_PDO+0x5c>
            int temp_cursor = Convert_Bytes_to_PDO(&t_byte_arr[t_cursor]);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff ffb7 	bl	8009e1c <Convert_Bytes_to_PDO>
 8009eae:	60f8      	str	r0, [r7, #12]
            if (temp_cursor > 0) {
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	dd04      	ble.n	8009ec0 <Unpack_PDO+0x4a>
            	t_cursor += temp_cursor;
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	617b      	str	r3, [r7, #20]
 8009ebe:	e005      	b.n	8009ecc <Unpack_PDO+0x56>
            } else if (temp_cursor < 0) {
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	da02      	bge.n	8009ecc <Unpack_PDO+0x56>
                //TODO: Unpack PDO Error
                return MSG_PDO_FAULT;
 8009ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eca:	e008      	b.n	8009ede <Unpack_PDO+0x68>
        for (int i = 0; i < t_n_pdo; ++i) {
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	613b      	str	r3, [r7, #16]
 8009ed2:	7afb      	ldrb	r3, [r7, #11]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	dbe2      	blt.n	8009ea2 <Unpack_PDO+0x2c>
            }
        }
    }

    return MSG_DO_SUCCESS;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <Convert_PDO_to_Bytes>:
 |_| |___/ \___/    |_| /_/\_\
                              
*/

static int Convert_PDO_to_Bytes(MsgDataObjectHeader* t_header, uint8_t* t_byte_arr)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b086      	sub	sp, #24
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	6039      	str	r1, [r7, #0]
    int t_header_size = sizeof(MsgDataObjectHeader);
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	617b      	str	r3, [r7, #20]
    // Publish PDO
    MsgPDOStruct* t_pdo = Find_PDO(t_header->dod_id, t_header->obj_id);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	781a      	ldrb	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	785b      	ldrb	r3, [r3, #1]
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f7ff fb76 	bl	80095f0 <Find_PDO>
 8009f04:	6138      	str	r0, [r7, #16]
    if (t_pdo == NULL) {
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d102      	bne.n	8009f12 <Convert_PDO_to_Bytes+0x2c>
        //TODO: Cannot Find PDO
        return -2;
 8009f0c:	f06f 0301 	mvn.w	r3, #1
 8009f10:	e016      	b.n	8009f40 <Convert_PDO_to_Bytes+0x5a>
    }

    uint16_t t_n_bytes = Set_PDO(t_pdo, t_byte_arr + t_header_size);
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	4413      	add	r3, r2
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6938      	ldr	r0, [r7, #16]
 8009f1c:	f7ff fba6 	bl	800966c <Set_PDO>
 8009f20:	4603      	mov	r3, r0
 8009f22:	81fb      	strh	r3, [r7, #14]
    if (t_n_bytes < 0) {
        //TODO: Copy PDO to Send 
        return -1;
    } else if (t_n_bytes == 0) { // Nothing to publish
 8009f24:	89fb      	ldrh	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <Convert_PDO_to_Bytes+0x48>
        return 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e008      	b.n	8009f40 <Convert_PDO_to_Bytes+0x5a>
    }

    memcpy(t_byte_arr, t_header, t_header_size);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	461a      	mov	r2, r3
 8009f32:	6879      	ldr	r1, [r7, #4]
 8009f34:	6838      	ldr	r0, [r7, #0]
 8009f36:	f001 fc23 	bl	800b780 <memcpy>
    return t_header_size + t_n_bytes;
 8009f3a:	89fa      	ldrh	r2, [r7, #14]
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	4413      	add	r3, r2
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <Pack_PDO>:

static int Pack_PDO(uint8_t* t_byte_arr, uint8_t* t_byte_len)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
	// check send list whether these are empty or not 
    if (pdo_send_list == NULL){
 8009f52:	4b28      	ldr	r3, [pc, #160]	; (8009ff4 <Pack_PDO+0xac>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <Pack_PDO+0x16>
        return 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	e046      	b.n	8009fec <Pack_PDO+0xa4>
    }

    int t_cursor = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	61fb      	str	r3, [r7, #28]

    // Pub PDO
    int t_n_pdo_cursor = t_cursor;
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	617b      	str	r3, [r7, #20]
    t_cursor += OBJ_NUMS_SIZE;
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	61fb      	str	r3, [r7, #28]

    uint8_t t_n_pdo = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73fb      	strb	r3, [r7, #15]

    if (pdo_send_list != NULL) {
 8009f70:	4b20      	ldr	r3, [pc, #128]	; (8009ff4 <Pack_PDO+0xac>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d02f      	beq.n	8009fd8 <Pack_PDO+0x90>
        for(int i = 0; i < cvector_size(pdo_send_list); ++i) {
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61bb      	str	r3, [r7, #24]
 8009f7c:	e01f      	b.n	8009fbe <Pack_PDO+0x76>

            int temp_cursor = Convert_PDO_to_Bytes(&pdo_send_list[i], &t_byte_arr[t_cursor]);
 8009f7e:	4b1d      	ldr	r3, [pc, #116]	; (8009ff4 <Pack_PDO+0xac>)
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	18d0      	adds	r0, r2, r3
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	4619      	mov	r1, r3
 8009f90:	f7ff ffa9 	bl	8009ee6 <Convert_PDO_to_Bytes>
 8009f94:	6138      	str	r0, [r7, #16]
            if (temp_cursor > 0) {
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	dd08      	ble.n	8009fae <Pack_PDO+0x66>
            	t_cursor += temp_cursor;
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	61fb      	str	r3, [r7, #28]
                ++t_n_pdo;
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	73fb      	strb	r3, [r7, #15]
 8009fac:	e004      	b.n	8009fb8 <Pack_PDO+0x70>
            } else if (temp_cursor < 0) {
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	da01      	bge.n	8009fb8 <Pack_PDO+0x70>
                //TODO: Pack PDO Error
                return temp_cursor;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	e019      	b.n	8009fec <Pack_PDO+0xa4>
        for(int i = 0; i < cvector_size(pdo_send_list); ++i) {
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	61bb      	str	r3, [r7, #24]
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	; (8009ff4 <Pack_PDO+0xac>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d004      	beq.n	8009fd0 <Pack_PDO+0x88>
 8009fc6:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <Pack_PDO+0xac>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3b08      	subs	r3, #8
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	e000      	b.n	8009fd2 <Pack_PDO+0x8a>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d8d2      	bhi.n	8009f7e <Pack_PDO+0x36>
            }
        }
    }

    // Set # of PDOs
    memcpy(&t_byte_arr[t_n_pdo_cursor], &t_n_pdo, OBJ_NUMS_SIZE);
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	4413      	add	r3, r2
 8009fde:	7bfa      	ldrb	r2, [r7, #15]
 8009fe0:	701a      	strb	r2, [r3, #0]

    *t_byte_len = t_cursor;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	701a      	strb	r2, [r3, #0]

    return MSG_DO_SUCCESS;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3720      	adds	r7, #32
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	2400d2bc 	.word	0x2400d2bc

08009ff8 <Send_PDO>:

static int Send_PDO()
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
    uint8_t t_byte_len;
    uint8_t t_dest_node = NODE_ID_RA;
 8009ffe:	2307      	movs	r3, #7
 800a000:	737b      	strb	r3, [r7, #13]
    uint16_t t_identifier;

    if(GUI_onoff)	{	t_identifier = GUI_SYNC|GUI_command;	}
 800a002:	4b1e      	ldr	r3, [pc, #120]	; (800a07c <Send_PDO+0x84>)
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d007      	beq.n	800a01a <Send_PDO+0x22>
 800a00a:	4b1d      	ldr	r3, [pc, #116]	; (800a080 <Send_PDO+0x88>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	b21b      	sxth	r3, r3
 800a010:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800a014:	b21b      	sxth	r3, r3
 800a016:	81fb      	strh	r3, [r7, #14]
 800a018:	e00b      	b.n	800a032 <Send_PDO+0x3a>
    else 			{	t_identifier = PDO|(node_id<<4)|t_dest_node;	}
 800a01a:	4b1a      	ldr	r3, [pc, #104]	; (800a084 <Send_PDO+0x8c>)
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	b21b      	sxth	r3, r3
 800a022:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a026:	b21a      	sxth	r2, r3
 800a028:	7b7b      	ldrb	r3, [r7, #13]
 800a02a:	b21b      	sxth	r3, r3
 800a02c:	4313      	orrs	r3, r2
 800a02e:	b21b      	sxth	r3, r3
 800a030:	81fb      	strh	r3, [r7, #14]

    int t_check = Pack_PDO(fdcanTxData, &t_byte_len);
 800a032:	1dfb      	adds	r3, r7, #7
 800a034:	4619      	mov	r1, r3
 800a036:	4814      	ldr	r0, [pc, #80]	; (800a088 <Send_PDO+0x90>)
 800a038:	f7ff ff86 	bl	8009f48 <Pack_PDO>
 800a03c:	60b8      	str	r0, [r7, #8]

    if(t_check != 0){
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <Send_PDO+0x50>
        //TODO: Send PDO Error
    	return t_check;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	e014      	b.n	800a072 <Send_PDO+0x7a>
    } else if(t_check){
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <Send_PDO+0x5a>
    	return t_check;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	e00f      	b.n	800a072 <Send_PDO+0x7a>
    }

    if (t_byte_len != 1){
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d00b      	beq.n	800a070 <Send_PDO+0x78>
		if(Send_MSG(t_identifier, t_byte_len, fdcanTxData) == 0){
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	4619      	mov	r1, r3
 800a05c:	89fb      	ldrh	r3, [r7, #14]
 800a05e:	4a0a      	ldr	r2, [pc, #40]	; (800a088 <Send_PDO+0x90>)
 800a060:	4618      	mov	r0, r3
 800a062:	f000 fa0b 	bl	800a47c <Send_MSG>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <Send_PDO+0x78>
			return t_check;
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	e000      	b.n	800a072 <Send_PDO+0x7a>
			//TODO: MSG TX ERROR
		}
    }

	return t_check;
 800a070:	68bb      	ldr	r3, [r7, #8]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	2400d2ba 	.word	0x2400d2ba
 800a080:	2400d2bb 	.word	0x2400d2bb
 800a084:	2400d2c8 	.word	0x2400d2c8
 800a088:	2400d2d4 	.word	0x2400d2d4

0800a08c <Ext_Send_PDO>:

static int Ext_Send_PDO()
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
	if(GUI_command == GET_DIRECTION_SET_DATA){
 800a090:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <Ext_Send_PDO+0x20>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b1f      	cmp	r3, #31
 800a096:	d105      	bne.n	800a0a4 <Ext_Send_PDO+0x18>
		Send_MSG((uint16_t)(GUI_SYNC|GET_DIRECTION_SET_DONE), 1, (uint8_t*)0);
 800a098:	2200      	movs	r2, #0
 800a09a:	2101      	movs	r1, #1
 800a09c:	f44f 60a4 	mov.w	r0, #1312	; 0x520
 800a0a0:	f000 f9ec 	bl	800a47c <Send_MSG>
	}

	return 0;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	2400d2bb 	.word	0x2400d2bb

0800a0b0 <Set_PDO_Dummy>:

static int Set_PDO_Dummy()
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	af00      	add	r7, sp, #0
	static int t_count = 0;

	test_dummy[0] = comm_loop_cnt;
 800a0b4:	4b19      	ldr	r3, [pc, #100]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a19      	ldr	r2, [pc, #100]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a0ba:	6013      	str	r3, [r2, #0]
	test_dummy[1] = comm_loop_cnt;
 800a0bc:	4b17      	ldr	r3, [pc, #92]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a17      	ldr	r2, [pc, #92]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a0c2:	6053      	str	r3, [r2, #4]
	test_dummy[2] = comm_loop_cnt;
 800a0c4:	4b15      	ldr	r3, [pc, #84]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a15      	ldr	r2, [pc, #84]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a0ca:	6093      	str	r3, [r2, #8]
	test_dummy[3] = comm_loop_cnt;
 800a0cc:	4b13      	ldr	r3, [pc, #76]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a13      	ldr	r2, [pc, #76]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a0d2:	60d3      	str	r3, [r2, #12]
	test_dummy[4] = comm_loop_cnt;
 800a0d4:	4b11      	ldr	r3, [pc, #68]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a11      	ldr	r2, [pc, #68]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a0da:	6113      	str	r3, [r2, #16]
	test_dummy[5] = comm_loop_cnt;
 800a0dc:	4b0f      	ldr	r3, [pc, #60]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a0f      	ldr	r2, [pc, #60]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a0e2:	6153      	str	r3, [r2, #20]
	test_dummy[6] = comm_loop_cnt;
 800a0e4:	4b0d      	ldr	r3, [pc, #52]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a0d      	ldr	r2, [pc, #52]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a0ea:	6193      	str	r3, [r2, #24]
	test_dummy[7] = comm_loop_cnt;
 800a0ec:	4b0b      	ldr	r3, [pc, #44]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a0b      	ldr	r2, [pc, #44]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a0f2:	61d3      	str	r3, [r2, #28]
	test_dummy[8] = comm_loop_cnt;
 800a0f4:	4b09      	ldr	r3, [pc, #36]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a09      	ldr	r2, [pc, #36]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a0fa:	6213      	str	r3, [r2, #32]
	test_dummy[9] = comm_loop_cnt;
 800a0fc:	4b07      	ldr	r3, [pc, #28]	; (800a11c <Set_PDO_Dummy+0x6c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a07      	ldr	r2, [pc, #28]	; (800a120 <Set_PDO_Dummy+0x70>)
 800a102:	6253      	str	r3, [r2, #36]	; 0x24

	t_count++;
 800a104:	4b07      	ldr	r3, [pc, #28]	; (800a124 <Set_PDO_Dummy+0x74>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3301      	adds	r3, #1
 800a10a:	4a06      	ldr	r2, [pc, #24]	; (800a124 <Set_PDO_Dummy+0x74>)
 800a10c:	6013      	str	r3, [r2, #0]

	return 0;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	2400d354 	.word	0x2400d354
 800a120:	2400d358 	.word	0x2400d358
 800a124:	2400d384 	.word	0x2400d384

0800a128 <Check_Trajectory_Error>:

static int Check_Trajectory_Error(uint16_t t_frame_idx)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	80fb      	strh	r3, [r7, #6]
	if((t_frame_idx % D10_TRAJECTORY_ELEMENT_NUMBER) != 0)		{return -1;}
 800a132:	88fa      	ldrh	r2, [r7, #6]
 800a134:	4b11      	ldr	r3, [pc, #68]	; (800a17c <Check_Trajectory_Error+0x54>)
 800a136:	fba3 1302 	umull	r1, r3, r3, r2
 800a13a:	08d9      	lsrs	r1, r3, #3
 800a13c:	460b      	mov	r3, r1
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	440b      	add	r3, r1
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	b29b      	uxth	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <Check_Trajectory_Error+0x2a>
 800a14c:	f04f 33ff 	mov.w	r3, #4294967295
 800a150:	e00e      	b.n	800a170 <Check_Trajectory_Error+0x48>
	if( (t_frame_idx - trajectory_buffer.frame_idx) != 0)		{return -2;}
 800a152:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <Check_Trajectory_Error+0x58>)
 800a154:	881b      	ldrh	r3, [r3, #0]
 800a156:	88fa      	ldrh	r2, [r7, #6]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d002      	beq.n	800a162 <Check_Trajectory_Error+0x3a>
 800a15c:	f06f 0301 	mvn.w	r3, #1
 800a160:	e006      	b.n	800a170 <Check_Trajectory_Error+0x48>

	trajectory_buffer.frame_idx += D10_TRAJECTORY_ELEMENT_NUMBER;
 800a162:	4b07      	ldr	r3, [pc, #28]	; (800a180 <Check_Trajectory_Error+0x58>)
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	330a      	adds	r3, #10
 800a168:	b29a      	uxth	r2, r3
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <Check_Trajectory_Error+0x58>)
 800a16c:	801a      	strh	r2, [r3, #0]

	return 0;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	cccccccd 	.word	0xcccccccd
 800a180:	24003674 	.word	0x24003674

0800a184 <Assemble_Trajectory>:

static int Assemble_Trajectory(uint8_t* t_byte_arr)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	uint8_t t_cursor, t_check, t_buf;
	uint16_t t_index;
	int8_t t_ack;
    uint16_t t_identifier = TRAJECTORY|(node_id<<4)|NODE_ID_CM;
 800a18c:	4b2b      	ldr	r3, [pc, #172]	; (800a23c <Assemble_Trajectory+0xb8>)
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	b21a      	sxth	r2, r3
 800a194:	f240 4301 	movw	r3, #1025	; 0x401
 800a198:	4313      	orrs	r3, r2
 800a19a:	b21b      	sxth	r3, r3
 800a19c:	81fb      	strh	r3, [r7, #14]

	/* Get index */
	t_cursor = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75fb      	strb	r3, [r7, #23]
	memcpy(&t_index, &t_byte_arr[t_cursor], 2);
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	817b      	strh	r3, [r7, #10]
	t_cursor += 2;
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	3302      	adds	r3, #2
 800a1b2:	75fb      	strb	r3, [r7, #23]

	/* Check Error*/
	t_check = Check_Trajectory_Error(t_index);
 800a1b4:	897b      	ldrh	r3, [r7, #10]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff ffb6 	bl	800a128 <Check_Trajectory_Error>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	737b      	strb	r3, [r7, #13]

	if(t_check != 0) {
 800a1c0:	7b7b      	ldrb	r3, [r7, #13]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <Assemble_Trajectory+0x4e>
		trajectory_buffer.frame_idx = 0;
 800a1c6:	4b1e      	ldr	r3, [pc, #120]	; (800a240 <Assemble_Trajectory+0xbc>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	801a      	strh	r2, [r3, #0]
		t_ack = -2;
 800a1cc:	23fe      	movs	r3, #254	; 0xfe
 800a1ce:	727b      	strb	r3, [r7, #9]
 800a1d0:	e025      	b.n	800a21e <Assemble_Trajectory+0x9a>
	} else {

		/* Save Buffer */
		for(int i = 0; i < D10_TRAJECTORY_ELEMENT_NUMBER; ++i){
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	613b      	str	r3, [r7, #16]
 800a1d6:	e012      	b.n	800a1fe <Assemble_Trajectory+0x7a>
			memcpy(&trajectory_buffer.buff[t_index++], &t_byte_arr[t_cursor], 4);
 800a1d8:	897b      	ldrh	r3, [r7, #10]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	b292      	uxth	r2, r2
 800a1de:	817a      	strh	r2, [r7, #10]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4a17      	ldr	r2, [pc, #92]	; (800a240 <Assemble_Trajectory+0xbc>)
 800a1e4:	4413      	add	r3, r2
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	7dfa      	ldrb	r2, [r7, #23]
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	440a      	add	r2, r1
 800a1ee:	6812      	ldr	r2, [r2, #0]
 800a1f0:	601a      	str	r2, [r3, #0]
			t_cursor += 4;
 800a1f2:	7dfb      	ldrb	r3, [r7, #23]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < D10_TRAJECTORY_ELEMENT_NUMBER; ++i){
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	613b      	str	r3, [r7, #16]
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	2b09      	cmp	r3, #9
 800a202:	dde9      	ble.n	800a1d8 <Assemble_Trajectory+0x54>
		}

		/* Check End of Trajectory */
		if(t_index >= D10_TRAJECTORY_TOTAL_LENGTH){
 800a204:	897b      	ldrh	r3, [r7, #10]
 800a206:	f242 720f 	movw	r2, #9999	; 0x270f
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d905      	bls.n	800a21a <Assemble_Trajectory+0x96>
			t_ack = -1;
 800a20e:	23ff      	movs	r3, #255	; 0xff
 800a210:	727b      	strb	r3, [r7, #9]
			trajectory_buffer.frame_idx = 0;
 800a212:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <Assemble_Trajectory+0xbc>)
 800a214:	2200      	movs	r2, #0
 800a216:	801a      	strh	r2, [r3, #0]
 800a218:	e001      	b.n	800a21e <Assemble_Trajectory+0x9a>
		} else {
			t_ack = 0;
 800a21a:	2300      	movs	r3, #0
 800a21c:	727b      	strb	r3, [r7, #9]
 800a21e:	7a7b      	ldrb	r3, [r7, #9]
		}
	}

	/* Send Acknowledgement */
	memcpy(&t_buf, &t_ack, 1);
 800a220:	733b      	strb	r3, [r7, #12]
	Send_MSG(t_identifier, 1, &t_buf);
 800a222:	f107 020c 	add.w	r2, r7, #12
 800a226:	89fb      	ldrh	r3, [r7, #14]
 800a228:	2101      	movs	r1, #1
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f926 	bl	800a47c <Send_MSG>

	return t_check;
 800a230:	7b7b      	ldrb	r3, [r7, #13]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	2400d2c8 	.word	0x2400d2c8
 800a240:	24003674 	.word	0x24003674

0800a244 <Add_PDO_to_Send>:
                                       |___/                       
*/


static void Add_PDO_to_Send(uint8_t t_dod_id, uint8_t t_obj_id)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08a      	sub	sp, #40	; 0x28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	4603      	mov	r3, r0
 800a24c:	460a      	mov	r2, r1
 800a24e:	71fb      	strb	r3, [r7, #7]
 800a250:	4613      	mov	r3, r2
 800a252:	71bb      	strb	r3, [r7, #6]
	MsgPDOStruct* temp_pdo = Find_PDO(t_dod_id, t_obj_id);
 800a254:	79ba      	ldrb	r2, [r7, #6]
 800a256:	79fb      	ldrb	r3, [r7, #7]
 800a258:	4611      	mov	r1, r2
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7ff f9c8 	bl	80095f0 <Find_PDO>
 800a260:	6238      	str	r0, [r7, #32]
    if (temp_pdo == NULL) {
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80b9 	beq.w	800a3dc <Add_PDO_to_Send+0x198>
        //TODO: Cannot Find PDO Error
        return;
    }

    MsgDataObjectHeader t_pdo = {t_dod_id, t_obj_id};
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	723b      	strb	r3, [r7, #8]
 800a26e:	79bb      	ldrb	r3, [r7, #6]
 800a270:	727b      	strb	r3, [r7, #9]

    for (int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800a272:	2300      	movs	r3, #0
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
 800a276:	e015      	b.n	800a2a4 <Add_PDO_to_Send+0x60>
        if ((pdo_send_list[i].dod_id == t_dod_id) && (pdo_send_list[i].obj_id == t_obj_id)){
 800a278:	4b5b      	ldr	r3, [pc, #364]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	4413      	add	r3, r2
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	79fa      	ldrb	r2, [r7, #7]
 800a286:	429a      	cmp	r2, r3
 800a288:	d109      	bne.n	800a29e <Add_PDO_to_Send+0x5a>
 800a28a:	4b57      	ldr	r3, [pc, #348]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	4413      	add	r3, r2
 800a294:	785b      	ldrb	r3, [r3, #1]
 800a296:	79ba      	ldrb	r2, [r7, #6]
 800a298:	429a      	cmp	r2, r3
 800a29a:	f000 80a1 	beq.w	800a3e0 <Add_PDO_to_Send+0x19c>
    for (int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a2a4:	4b50      	ldr	r3, [pc, #320]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <Add_PDO_to_Send+0x72>
 800a2ac:	4b4e      	ldr	r3, [pc, #312]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3b08      	subs	r3, #8
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	e000      	b.n	800a2b8 <Add_PDO_to_Send+0x74>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d8dc      	bhi.n	800a278 <Add_PDO_to_Send+0x34>
            return;
        }
    }
    cvector_push_back(pdo_send_list, t_pdo);
 800a2be:	4b4a      	ldr	r3, [pc, #296]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d004      	beq.n	800a2d0 <Add_PDO_to_Send+0x8c>
 800a2c6:	4b48      	ldr	r3, [pc, #288]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3b04      	subs	r3, #4
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	e000      	b.n	800a2d2 <Add_PDO_to_Send+0x8e>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	61fb      	str	r3, [r7, #28]
 800a2d4:	4b44      	ldr	r3, [pc, #272]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d004      	beq.n	800a2e6 <Add_PDO_to_Send+0xa2>
 800a2dc:	4b42      	ldr	r3, [pc, #264]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800a2e4:	e000      	b.n	800a2e8 <Add_PDO_to_Send+0xa4>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	69fa      	ldr	r2, [r7, #28]
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d34f      	bcc.n	800a38e <Add_PDO_to_Send+0x14a>
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	3305      	adds	r3, #5
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	61bb      	str	r3, [r7, #24]
 800a2f6:	4b3c      	ldr	r3, [pc, #240]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d021      	beq.n	800a342 <Add_PDO_to_Send+0xfe>
 800a2fe:	4b3a      	ldr	r3, [pc, #232]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3b08      	subs	r3, #8
 800a304:	613b      	str	r3, [r7, #16]
 800a306:	69b9      	ldr	r1, [r7, #24]
 800a308:	6938      	ldr	r0, [r7, #16]
 800a30a:	f001 f871 	bl	800b3f0 <realloc>
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <Add_PDO_to_Send+0xe0>
 800a316:	4b35      	ldr	r3, [pc, #212]	; (800a3ec <Add_PDO_to_Send+0x1a8>)
 800a318:	4a35      	ldr	r2, [pc, #212]	; (800a3f0 <Add_PDO_to_Send+0x1ac>)
 800a31a:	f240 2141 	movw	r1, #577	; 0x241
 800a31e:	4835      	ldr	r0, [pc, #212]	; (800a3f4 <Add_PDO_to_Send+0x1b0>)
 800a320:	f000 ff8c 	bl	800b23c <__assert_func>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3308      	adds	r3, #8
 800a328:	4a2f      	ldr	r2, [pc, #188]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	4b2e      	ldr	r3, [pc, #184]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d02c      	beq.n	800a38e <Add_PDO_to_Send+0x14a>
 800a334:	4b2c      	ldr	r3, [pc, #176]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3b04      	subs	r3, #4
 800a33a:	69fa      	ldr	r2, [r7, #28]
 800a33c:	3201      	adds	r2, #1
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	e025      	b.n	800a38e <Add_PDO_to_Send+0x14a>
 800a342:	69b8      	ldr	r0, [r7, #24]
 800a344:	f000 ff98 	bl	800b278 <malloc>
 800a348:	4603      	mov	r3, r0
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d106      	bne.n	800a360 <Add_PDO_to_Send+0x11c>
 800a352:	4b29      	ldr	r3, [pc, #164]	; (800a3f8 <Add_PDO_to_Send+0x1b4>)
 800a354:	4a26      	ldr	r2, [pc, #152]	; (800a3f0 <Add_PDO_to_Send+0x1ac>)
 800a356:	f240 2141 	movw	r1, #577	; 0x241
 800a35a:	4826      	ldr	r0, [pc, #152]	; (800a3f4 <Add_PDO_to_Send+0x1b0>)
 800a35c:	f000 ff6e 	bl	800b23c <__assert_func>
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	3308      	adds	r3, #8
 800a364:	4a20      	ldr	r2, [pc, #128]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a366:	6013      	str	r3, [r2, #0]
 800a368:	4b1f      	ldr	r3, [pc, #124]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <Add_PDO_to_Send+0x138>
 800a370:	4b1d      	ldr	r3, [pc, #116]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3b04      	subs	r3, #4
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	3201      	adds	r2, #1
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <Add_PDO_to_Send+0x14a>
 800a384:	4b18      	ldr	r3, [pc, #96]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3b08      	subs	r3, #8
 800a38a:	2200      	movs	r2, #0
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	4b16      	ldr	r3, [pc, #88]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4b15      	ldr	r3, [pc, #84]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d005      	beq.n	800a3a6 <Add_PDO_to_Send+0x162>
 800a39a:	4b13      	ldr	r3, [pc, #76]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3b08      	subs	r3, #8
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	005b      	lsls	r3, r3, #1
 800a3a4:	e000      	b.n	800a3a8 <Add_PDO_to_Send+0x164>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	4413      	add	r3, r2
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f107 0308 	add.w	r3, r7, #8
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	8013      	strh	r3, [r2, #0]
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d012      	beq.n	800a3e2 <Add_PDO_to_Send+0x19e>
 800a3bc:	4b0a      	ldr	r3, [pc, #40]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d005      	beq.n	800a3d0 <Add_PDO_to_Send+0x18c>
 800a3c4:	4b08      	ldr	r3, [pc, #32]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3b08      	subs	r3, #8
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	e000      	b.n	800a3d2 <Add_PDO_to_Send+0x18e>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	4a05      	ldr	r2, [pc, #20]	; (800a3e8 <Add_PDO_to_Send+0x1a4>)
 800a3d4:	6812      	ldr	r2, [r2, #0]
 800a3d6:	3a08      	subs	r2, #8
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	e002      	b.n	800a3e2 <Add_PDO_to_Send+0x19e>
        return;
 800a3dc:	bf00      	nop
 800a3de:	e000      	b.n	800a3e2 <Add_PDO_to_Send+0x19e>
            return;
 800a3e0:	bf00      	nop
}
 800a3e2:	3728      	adds	r7, #40	; 0x28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	2400d2bc 	.word	0x2400d2bc
 800a3ec:	0800d020 	.word	0x0800d020
 800a3f0:	0800d098 	.word	0x0800d098
 800a3f4:	0800d028 	.word	0x0800d028
 800a3f8:	0800d064 	.word	0x0800d064

0800a3fc <Clear_PDO_to_Send>:

static void Clear_PDO_to_Send()
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
    cvector_free(pdo_send_list);
 800a402:	4b09      	ldr	r3, [pc, #36]	; (800a428 <Clear_PDO_to_Send+0x2c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d006      	beq.n	800a418 <Clear_PDO_to_Send+0x1c>
 800a40a:	4b07      	ldr	r3, [pc, #28]	; (800a428 <Clear_PDO_to_Send+0x2c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	3b08      	subs	r3, #8
 800a410:	607b      	str	r3, [r7, #4]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 ff38 	bl	800b288 <free>
    pdo_send_list = NULL;
 800a418:	4b03      	ldr	r3, [pc, #12]	; (800a428 <Clear_PDO_to_Send+0x2c>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	601a      	str	r2, [r3, #0]
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	2400d2bc 	.word	0x2400d2bc

0800a42c <Send_USB_Trick>:
 |_|  |_\___/__/__/\__,_\__, \___| |_||_\__,_|_||_\__,_|_\___|_|  
                        |___/                                     
*/

static void Send_USB_Trick(uint8_t* t_in_buf, uint32_t t_in_len, uint8_t* t_out_buf)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
	 * and MD and breaks the sequence of the GUI.
	 *
	 * Therefore, 0x00 is inserted between every byte and sent.
	 * */

	for(int i = 0; i < t_in_len; ++i){
 800a438:	2300      	movs	r3, #0
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	e013      	b.n	800a466 <Send_USB_Trick+0x3a>
		*(t_out_buf + (2*i)) = *(t_in_buf + i);
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	441a      	add	r2, r3
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	4619      	mov	r1, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	440b      	add	r3, r1
 800a44e:	7812      	ldrb	r2, [r2, #0]
 800a450:	701a      	strb	r2, [r3, #0]
		*(t_out_buf + (2*i+1)) = 0;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	005b      	lsls	r3, r3, #1
 800a456:	3301      	adds	r3, #1
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	4413      	add	r3, r2
 800a45c:	2200      	movs	r2, #0
 800a45e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < t_in_len; ++i){
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	3301      	adds	r3, #1
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d8e7      	bhi.n	800a43e <Send_USB_Trick+0x12>
	}
}
 800a46e:	bf00      	nop
 800a470:	bf00      	nop
 800a472:	371c      	adds	r7, #28
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <Send_MSG>:

int Send_MSG(uint16_t t_COB_ID, uint32_t t_len, uint8_t* t_tx_data)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b0ba      	sub	sp, #232	; 0xe8
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	81fb      	strh	r3, [r7, #14]
	static uint8_t t_fnc_code, t_node_id;
	int t_check = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	uint8_t t_txBuf[67];
	uint8_t t_usb_txBuf[137];

	if(comm_type == e_FDCAN){
 800a490:	4b2e      	ldr	r3, [pc, #184]	; (800a54c <Send_MSG+0xd0>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d111      	bne.n	800a4bc <Send_MSG+0x40>
		if(Transmit_IOIF_Fdcan(t_COB_ID, Convert_Byte_Length(t_len), t_tx_data) != 0){
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7ff f97a 	bl	8009796 <Convert_Byte_Length>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	89fb      	ldrh	r3, [r7, #14]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fd f9ae 	bl	800780c <Transmit_IOIF_Fdcan>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d043      	beq.n	800a53e <Send_MSG+0xc2>
			return t_check;
 800a4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ba:	e042      	b.n	800a542 <Send_MSG+0xc6>
			//TODO: MSG TX ERROR
		}
	} else if(comm_type == e_USB){
 800a4bc:	4b23      	ldr	r3, [pc, #140]	; (800a54c <Send_MSG+0xd0>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d13c      	bne.n	800a53e <Send_MSG+0xc2>

		t_fnc_code = (t_COB_ID & 0xF00) >> 8;
 800a4c4:	89fb      	ldrh	r3, [r7, #14]
 800a4c6:	121b      	asrs	r3, r3, #8
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	4b1f      	ldr	r3, [pc, #124]	; (800a550 <Send_MSG+0xd4>)
 800a4d2:	701a      	strb	r2, [r3, #0]
		t_node_id = (t_COB_ID & 0xFF);
 800a4d4:	89fb      	ldrh	r3, [r7, #14]
 800a4d6:	b2da      	uxtb	r2, r3
 800a4d8:	4b1e      	ldr	r3, [pc, #120]	; (800a554 <Send_MSG+0xd8>)
 800a4da:	701a      	strb	r2, [r3, #0]

		memcpy(&t_txBuf[2], t_tx_data, t_len);
 800a4dc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a4e0:	3302      	adds	r3, #2
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	6879      	ldr	r1, [r7, #4]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f001 f94a 	bl	800b780 <memcpy>
 800a4ec:	4b18      	ldr	r3, [pc, #96]	; (800a550 <Send_MSG+0xd4>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
		memcpy(t_txBuf, &t_fnc_code, 1);			t_len++;
 800a4f0:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	60bb      	str	r3, [r7, #8]
 800a4fa:	4b16      	ldr	r3, [pc, #88]	; (800a554 <Send_MSG+0xd8>)
 800a4fc:	781b      	ldrb	r3, [r3, #0]
		memcpy(&t_txBuf[1], &t_node_id, 1);			t_len++;
 800a4fe:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	3301      	adds	r3, #1
 800a506:	60bb      	str	r3, [r7, #8]


		Send_USB_Trick(t_txBuf, t_len, t_usb_txBuf);
 800a508:	f107 0214 	add.w	r2, r7, #20
 800a50c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a510:	68b9      	ldr	r1, [r7, #8]
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff ff8a 	bl	800a42c <Send_USB_Trick>
		t_len *= 2;
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	60bb      	str	r3, [r7, #8]

		t_usb_txBuf[t_len++] = '\r';
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	1c5a      	adds	r2, r3, #1
 800a522:	60ba      	str	r2, [r7, #8]
 800a524:	33e8      	adds	r3, #232	; 0xe8
 800a526:	443b      	add	r3, r7
 800a528:	220d      	movs	r2, #13
 800a52a:	f803 2cd4 	strb.w	r2, [r3, #-212]
		t_usb_txBuf[t_len++] = '\n';
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	60ba      	str	r2, [r7, #8]
 800a534:	33e8      	adds	r3, #232	; 0xe8
 800a536:	443b      	add	r3, r7
 800a538:	220a      	movs	r2, #10
 800a53a:	f803 2cd4 	strb.w	r2, [r3, #-212]
//			return t_check;
//			//TODO: MSG TX ERROR
//		}
	}

	return -1;
 800a53e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a542:	4618      	mov	r0, r3
 800a544:	37e8      	adds	r7, #232	; 0xe8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	2400d2b9 	.word	0x2400d2b9
 800a550:	2400d388 	.word	0x2400d388
 800a554:	2400d389 	.word	0x2400d389

0800a558 <Fdcan_Rx_Hdlr>:
//
//	return 0;
//}

static int Fdcan_Rx_Hdlr(uint16_t t_wasp_id, uint8_t* t_rx_data)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	4603      	mov	r3, r0
 800a560:	6039      	str	r1, [r7, #0]
 800a562:	80fb      	strh	r3, [r7, #6]
    fnc_code = t_wasp_id & 0xF00;
 800a564:	88fb      	ldrh	r3, [r7, #6]
 800a566:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a56a:	4a24      	ldr	r2, [pc, #144]	; (800a5fc <Fdcan_Rx_Hdlr+0xa4>)
 800a56c:	6013      	str	r3, [r2, #0]
    ori_node = (t_wasp_id & 0x0F0)>>4;
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	111b      	asrs	r3, r3, #4
 800a572:	b2db      	uxtb	r3, r3
 800a574:	f003 030f 	and.w	r3, r3, #15
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	4b21      	ldr	r3, [pc, #132]	; (800a600 <Fdcan_Rx_Hdlr+0xa8>)
 800a57c:	701a      	strb	r2, [r3, #0]

    switch(fnc_code){
 800a57e:	4b1f      	ldr	r3, [pc, #124]	; (800a5fc <Fdcan_Rx_Hdlr+0xa4>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a586:	d02f      	beq.n	800a5e8 <Fdcan_Rx_Hdlr+0x90>
 800a588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a58c:	d830      	bhi.n	800a5f0 <Fdcan_Rx_Hdlr+0x98>
 800a58e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a592:	d01b      	beq.n	800a5cc <Fdcan_Rx_Hdlr+0x74>
 800a594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a598:	d82a      	bhi.n	800a5f0 <Fdcan_Rx_Hdlr+0x98>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d003      	beq.n	800a5a6 <Fdcan_Rx_Hdlr+0x4e>
 800a59e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5a2:	d005      	beq.n	800a5b0 <Fdcan_Rx_Hdlr+0x58>
            break;

        case TRAJECTORY:
			Assemble_Trajectory(t_rx_data);
        	break;
        default: break;
 800a5a4:	e024      	b.n	800a5f0 <Fdcan_Rx_Hdlr+0x98>
            Recv_EMCY(t_rx_data, &err_code);
 800a5a6:	4917      	ldr	r1, [pc, #92]	; (800a604 <Fdcan_Rx_Hdlr+0xac>)
 800a5a8:	6838      	ldr	r0, [r7, #0]
 800a5aa:	f7ff f98b 	bl	80098c4 <Recv_EMCY>
            break;
 800a5ae:	e020      	b.n	800a5f2 <Fdcan_Rx_Hdlr+0x9a>
            if (Unpack_SDO(t_rx_data) < 0) {
 800a5b0:	6838      	ldr	r0, [r7, #0]
 800a5b2:	f7ff fac7 	bl	8009b44 <Unpack_SDO>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	da01      	bge.n	800a5c0 <Fdcan_Rx_Hdlr+0x68>
                return SDO_RX_ERR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e019      	b.n	800a5f4 <Fdcan_Rx_Hdlr+0x9c>
                Send_SDO(ori_node);
 800a5c0:	4b0f      	ldr	r3, [pc, #60]	; (800a600 <Fdcan_Rx_Hdlr+0xa8>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7ff fbf1 	bl	8009dac <Send_SDO>
            break;
 800a5ca:	e012      	b.n	800a5f2 <Fdcan_Rx_Hdlr+0x9a>
            if (Unpack_PDO(t_rx_data) < 0) {
 800a5cc:	6838      	ldr	r0, [r7, #0]
 800a5ce:	f7ff fc52 	bl	8009e76 <Unpack_PDO>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	da01      	bge.n	800a5dc <Fdcan_Rx_Hdlr+0x84>
                return PDO_RX_ERR;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e00b      	b.n	800a5f4 <Fdcan_Rx_Hdlr+0x9c>
                Send_PDO(ori_node);
 800a5dc:	4b08      	ldr	r3, [pc, #32]	; (800a600 <Fdcan_Rx_Hdlr+0xa8>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff fd09 	bl	8009ff8 <Send_PDO>
            break;
 800a5e6:	e004      	b.n	800a5f2 <Fdcan_Rx_Hdlr+0x9a>
			Assemble_Trajectory(t_rx_data);
 800a5e8:	6838      	ldr	r0, [r7, #0]
 800a5ea:	f7ff fdcb 	bl	800a184 <Assemble_Trajectory>
        	break;
 800a5ee:	e000      	b.n	800a5f2 <Fdcan_Rx_Hdlr+0x9a>
        default: break;
 800a5f0:	bf00      	nop
    }

    return 0;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	2400d2cc 	.word	0x2400d2cc
 800a600:	2400d2c9 	.word	0x2400d2c9
 800a604:	2400d2d0 	.word	0x2400d2d0

0800a608 <Initial_ICM2>:

static void Initial_ICM2(uint8_t* aaa)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	*aaa = 15;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	220f      	movs	r2, #15
 800a614:	701a      	strb	r2, [r3, #0]
}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
	...

0800a624 <Get_State_Callback>:
 \__ \ |) | (_) | | (__/ _` | | | '_ \/ _` / _| / /(_-<
 |___/___/ \___/   \___\__,_|_|_|_.__/\__,_\__|_\_\/__/

*/

MSG_COMMON_SDO_CALLBACK(msg_hdlr_task)
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2201      	movs	r2, #1
 800a632:	711a      	strb	r2, [r3, #4]
 800a634:	2001      	movs	r0, #1
 800a636:	f000 fe1f 	bl	800b278 <malloc>
 800a63a:	4603      	mov	r3, r0
 800a63c:	461a      	mov	r2, r3
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a04      	ldr	r2, [pc, #16]	; (800a658 <Get_State_Callback+0x34>)
 800a648:	7b12      	ldrb	r2, [r2, #12]
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2200      	movs	r2, #0
 800a650:	721a      	strb	r2, [r3, #8]
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	240035ac 	.word	0x240035ac

0800a65c <Set_State_Callback>:
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	73fb      	strb	r3, [r7, #15]
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	4619      	mov	r1, r3
 800a672:	4807      	ldr	r0, [pc, #28]	; (800a690 <Set_State_Callback+0x34>)
 800a674:	f000 fd58 	bl	800b128 <Transition_State>
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2200      	movs	r2, #0
 800a682:	711a      	strb	r2, [r3, #4]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	2200      	movs	r2, #0
 800a688:	721a      	strb	r2, [r3, #8]
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	240035b8 	.word	0x240035b8

0800a694 <Get_Routine_Callback>:
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	721a      	strb	r2, [r3, #8]
 800a6a4:	4b18      	ldr	r3, [pc, #96]	; (800a708 <Get_Routine_Callback+0x74>)
 800a6a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	711a      	strb	r2, [r3, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	791b      	ldrb	r3, [r3, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d024      	beq.n	800a700 <Get_Routine_Callback+0x6c>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	88db      	ldrh	r3, [r3, #6]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	791b      	ldrb	r3, [r3, #4]
 800a6c0:	fb02 f303 	mul.w	r3, r2, r3
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 fdd7 	bl	800b278 <malloc>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
 800a6d6:	e00d      	b.n	800a6f4 <Get_Routine_Callback+0x60>
 800a6d8:	4a0b      	ldr	r2, [pc, #44]	; (800a708 <Get_Routine_Callback+0x74>)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3310      	adds	r3, #16
 800a6de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	b2ca      	uxtb	r2, r1
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	791b      	ldrb	r3, [r3, #4]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	dbeb      	blt.n	800a6d8 <Get_Routine_Callback+0x44>
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	240035ac 	.word	0x240035ac

0800a70c <Set_Routine_Callback>:
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2200      	movs	r2, #0
 800a71a:	711a      	strb	r2, [r3, #4]
 800a71c:	4828      	ldr	r0, [pc, #160]	; (800a7c0 <Set_Routine_Callback+0xb4>)
 800a71e:	f000 fbab 	bl	800ae78 <Clear_Routines>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	791b      	ldrb	r3, [r3, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d103      	bne.n	800a732 <Set_Routine_Callback+0x26>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2200      	movs	r2, #0
 800a72e:	721a      	strb	r2, [r3, #8]
 800a730:	e043      	b.n	800a7ba <Set_Routine_Callback+0xae>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	88db      	ldrh	r3, [r3, #6]
 800a736:	461a      	mov	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	791b      	ldrb	r3, [r3, #4]
 800a73c:	fb02 f303 	mul.w	r3, r2, r3
 800a740:	4618      	mov	r0, r3
 800a742:	f000 fd99 	bl	800b278 <malloc>
 800a746:	4603      	mov	r3, r0
 800a748:	461a      	mov	r2, r3
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	2300      	movs	r3, #0
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	e020      	b.n	800a796 <Set_Routine_Callback+0x8a>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4413      	add	r3, r2
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	72fb      	strb	r3, [r7, #11]
 800a760:	7afb      	ldrb	r3, [r7, #11]
 800a762:	4619      	mov	r1, r3
 800a764:	4816      	ldr	r0, [pc, #88]	; (800a7c0 <Set_Routine_Callback+0xb4>)
 800a766:	f000 fba3 	bl	800aeb0 <Push_Routine>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10f      	bne.n	800a790 <Set_Routine_Callback+0x84>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	441a      	add	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	6819      	ldr	r1, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	440b      	add	r3, r1
 800a780:	7812      	ldrb	r2, [r2, #0]
 800a782:	701a      	strb	r2, [r3, #0]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	791b      	ldrb	r3, [r3, #4]
 800a788:	3301      	adds	r3, #1
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	711a      	strb	r2, [r3, #4]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3301      	adds	r3, #1
 800a794:	60fb      	str	r3, [r7, #12]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	791b      	ldrb	r3, [r3, #4]
 800a79a:	461a      	mov	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	dbd8      	blt.n	800a754 <Set_Routine_Callback+0x48>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	791a      	ldrb	r2, [r3, #4]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	791b      	ldrb	r3, [r3, #4]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d002      	beq.n	800a7b4 <Set_Routine_Callback+0xa8>
 800a7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b2:	e000      	b.n	800a7b6 <Set_Routine_Callback+0xaa>
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	721a      	strb	r2, [r3, #8]
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	240035ec 	.word	0x240035ec

0800a7c4 <Set_Send_PDO_List>:

static void Set_Send_PDO_List(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
	Clear_PDO_to_Send();
 800a7ce:	f7ff fe15 	bl	800a3fc <Clear_PDO_to_Send>

    int t_cursor = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	617b      	str	r3, [r7, #20]
    uint8_t* t_ids = (uint8_t*)t_req->data;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	613b      	str	r3, [r7, #16]
    while (t_cursor < 2*t_req->size) {
 800a7dc:	e015      	b.n	800a80a <Set_Send_PDO_List+0x46>
        uint8_t t_dod_id = t_ids[t_cursor++];
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	617a      	str	r2, [r7, #20]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	73fb      	strb	r3, [r7, #15]
        uint8_t t_obj_id = t_ids[t_cursor++];
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	617a      	str	r2, [r7, #20]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	73bb      	strb	r3, [r7, #14]
        Add_PDO_to_Send(t_dod_id, t_obj_id);
 800a7fe:	7bba      	ldrb	r2, [r7, #14]
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	4611      	mov	r1, r2
 800a804:	4618      	mov	r0, r3
 800a806:	f7ff fd1d 	bl	800a244 <Add_PDO_to_Send>
    while (t_cursor < 2*t_req->size) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	791b      	ldrb	r3, [r3, #4]
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	697a      	ldr	r2, [r7, #20]
 800a812:	429a      	cmp	r2, r3
 800a814:	dbe3      	blt.n	800a7de <Set_Send_PDO_List+0x1a>
    }

    t_res->status = DATA_OBJECT_SDO_SUCC;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	2200      	movs	r2, #0
 800a81a:	721a      	strb	r2, [r3, #8]
}
 800a81c:	bf00      	nop
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <Set_MS_Enum>:

static void Set_MS_Enum(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
	memcpy(&MS_enum, t_req->data, 1);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	781a      	ldrb	r2, [r3, #0]
 800a834:	4b06      	ldr	r3, [pc, #24]	; (800a850 <Set_MS_Enum+0x2c>)
 800a836:	701a      	strb	r2, [r3, #0]

	t_res->size = 0;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2200      	movs	r2, #0
 800a83c:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2200      	movs	r2, #0
 800a842:	721a      	strb	r2, [r3, #8]
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	2400d2b8 	.word	0x2400d2b8

0800a854 <Set_GUI_COMM_OnOff>:

static void Set_GUI_COMM_OnOff(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
	memcpy(&GUI_onoff, t_req->data, 1);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	781a      	ldrb	r2, [r3, #0]
 800a864:	4b06      	ldr	r3, [pc, #24]	; (800a880 <Set_GUI_COMM_OnOff+0x2c>)
 800a866:	701a      	strb	r2, [r3, #0]

	t_res->size = 1;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	2201      	movs	r2, #1
 800a86c:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2200      	movs	r2, #0
 800a872:	721a      	strb	r2, [r3, #8]
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	2400d2ba 	.word	0x2400d2ba

0800a884 <Set_GUI_COMM_Command>:

static void Set_GUI_COMM_Command(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
	memcpy(&GUI_command, t_req->data, 1);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	781a      	ldrb	r2, [r3, #0]
 800a894:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <Set_GUI_COMM_Command+0x2c>)
 800a896:	701a      	strb	r2, [r3, #0]

	t_res->size = 1;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2201      	movs	r2, #1
 800a89c:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	721a      	strb	r2, [r3, #8]
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	2400d2bb 	.word	0x2400d2bb

0800a8b4 <StateOff_Ent>:
 |___/\__\__,_|\__\___/__/

*/

static void StateOff_Ent()
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	af00      	add	r7, sp, #0
	GUI_onoff = 0;
 800a8b8:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <StateOff_Ent+0x1c>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	701a      	strb	r2, [r3, #0]
	GUI_command = 0;
 800a8be:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <StateOff_Ent+0x20>)
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	701a      	strb	r2, [r3, #0]
    Transition_State(&msg_hdlr_task.state_machine, e_State_Standby);
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	4804      	ldr	r0, [pc, #16]	; (800a8d8 <StateOff_Ent+0x24>)
 800a8c8:	f000 fc2e 	bl	800b128 <Transition_State>
}
 800a8cc:	bf00      	nop
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	2400d2ba 	.word	0x2400d2ba
 800a8d4:	2400d2bb 	.word	0x2400d2bb
 800a8d8:	240035b8 	.word	0x240035b8

0800a8dc <StateStandby_Ent>:

static void StateStandby_Ent()
{}
 800a8dc:	b480      	push	{r7}
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	bf00      	nop
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <StateStandby_Run>:

static void StateStandby_Run()
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	af00      	add	r7, sp, #0

}
 800a8ee:	bf00      	nop
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <StateStandby_Ext>:

static void StateStandby_Ext()
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
}
 800a8fc:	bf00      	nop
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
	...

0800a908 <StateEnable_Ent>:

static void StateEnable_Ent()
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	af00      	add	r7, sp, #0
	comm_loop_cnt = 0;
 800a90c:	4b03      	ldr	r3, [pc, #12]	; (800a91c <StateEnable_Ent+0x14>)
 800a90e:	2200      	movs	r2, #0
 800a910:	601a      	str	r2, [r3, #0]
	Ent_Routines(&msg_hdlr_task.routine);
 800a912:	4803      	ldr	r0, [pc, #12]	; (800a920 <StateEnable_Ent+0x18>)
 800a914:	f000 f9fa 	bl	800ad0c <Ent_Routines>
}
 800a918:	bf00      	nop
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	2400d354 	.word	0x2400d354
 800a920:	240035ec 	.word	0x240035ec

0800a924 <StateEnable_Run>:

static void StateEnable_Run()
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
	Run_Routines(&msg_hdlr_task.routine);
 800a928:	4804      	ldr	r0, [pc, #16]	; (800a93c <StateEnable_Run+0x18>)
 800a92a:	f000 fa2f 	bl	800ad8c <Run_Routines>

    comm_loop_cnt++;
 800a92e:	4b04      	ldr	r3, [pc, #16]	; (800a940 <StateEnable_Run+0x1c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3301      	adds	r3, #1
 800a934:	4a02      	ldr	r2, [pc, #8]	; (800a940 <StateEnable_Run+0x1c>)
 800a936:	6013      	str	r3, [r2, #0]
}
 800a938:	bf00      	nop
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	240035ec 	.word	0x240035ec
 800a940:	2400d354 	.word	0x2400d354

0800a944 <StateEnable_Ext>:

static void StateEnable_Ext()
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
	Ext_Routines(&msg_hdlr_task.routine);
 800a948:	4805      	ldr	r0, [pc, #20]	; (800a960 <StateEnable_Ext+0x1c>)
 800a94a:	f000 fa55 	bl	800adf8 <Ext_Routines>

	GUI_onoff = 0;
 800a94e:	4b05      	ldr	r3, [pc, #20]	; (800a964 <StateEnable_Ext+0x20>)
 800a950:	2200      	movs	r2, #0
 800a952:	701a      	strb	r2, [r3, #0]
	GUI_command = 0;
 800a954:	4b04      	ldr	r3, [pc, #16]	; (800a968 <StateEnable_Ext+0x24>)
 800a956:	2200      	movs	r2, #0
 800a958:	701a      	strb	r2, [r3, #0]
}
 800a95a:	bf00      	nop
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	240035ec 	.word	0x240035ec
 800a964:	2400d2ba 	.word	0x2400d2ba
 800a968:	2400d2bb 	.word	0x2400d2bb

0800a96c <StateError_Run>:

static void StateError_Run()
{
 800a96c:	b480      	push	{r7}
 800a96e:	af00      	add	r7, sp, #0

}
 800a970:	bf00      	nop
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
	...

0800a97c <Init_Msg_Hdlr>:
 |_|  |_\__,_|_|_||_|
                     
*/

void Init_Msg_Hdlr()
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b098      	sub	sp, #96	; 0x60
 800a980:	af02      	add	r7, sp, #8
	node_id = NODE_ID_LA;
 800a982:	4b8d      	ldr	r3, [pc, #564]	; (800abb8 <Init_Msg_Hdlr+0x23c>)
 800a984:	2206      	movs	r2, #6
 800a986:	701a      	strb	r2, [r3, #0]
    ori_node = 0x00;
 800a988:	4b8c      	ldr	r3, [pc, #560]	; (800abbc <Init_Msg_Hdlr+0x240>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]

    uint16_t t_mask = 0x00F;
 800a98e:	230f      	movs	r3, #15
 800a990:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    uint32_t t_filter1 = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t t_filter2 = NODE_ID_LA;
 800a998:	2306      	movs	r3, #6
 800a99a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /*Communication Init*/
//    comm_type = Init_IOIF_USB();
    comm_type = e_FDCAN;
 800a99c:	4b88      	ldr	r3, [pc, #544]	; (800abc0 <Init_Msg_Hdlr+0x244>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	701a      	strb	r2, [r3, #0]

    if(comm_type == e_FDCAN){
 800a9a2:	4b87      	ldr	r3, [pc, #540]	; (800abc0 <Init_Msg_Hdlr+0x244>)
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d106      	bne.n	800a9b8 <Init_Msg_Hdlr+0x3c>
    	Init_IOIF_Fdcan(t_mask, t_filter1, t_filter2);
 800a9aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a9ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fc fe98 	bl	80076e8 <Init_IOIF_Fdcan>
    }

    /*Task Init*/
    Init_Task(&msg_hdlr_task);
 800a9b8:	4882      	ldr	r0, [pc, #520]	; (800abc4 <Init_Msg_Hdlr+0x248>)
 800a9ba:	f000 fbd7 	bl	800b16c <Init_Task>

	/* State Definition */
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Off,      StateOff_Ent,       NULL,    			NULL,   				 true);
 800a9be:	1d38      	adds	r0, r7, #4
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	4980      	ldr	r1, [pc, #512]	; (800abc8 <Init_Msg_Hdlr+0x24c>)
 800a9c6:	f000 faf1 	bl	800afac <Create_State_Entity>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	9301      	str	r3, [sp, #4]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	1d3b      	adds	r3, r7, #4
 800a9d4:	cb0c      	ldmia	r3, {r2, r3}
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	487a      	ldr	r0, [pc, #488]	; (800abc4 <Init_Msg_Hdlr+0x248>)
 800a9da:	f000 fbe6 	bl	800b1aa <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Standby,  StateStandby_Ent,   StateStandby_Run,	StateStandby_Ext,   	false);
 800a9de:	f107 0010 	add.w	r0, r7, #16
 800a9e2:	4b7a      	ldr	r3, [pc, #488]	; (800abcc <Init_Msg_Hdlr+0x250>)
 800a9e4:	4a7a      	ldr	r2, [pc, #488]	; (800abd0 <Init_Msg_Hdlr+0x254>)
 800a9e6:	497b      	ldr	r1, [pc, #492]	; (800abd4 <Init_Msg_Hdlr+0x258>)
 800a9e8:	f000 fae0 	bl	800afac <Create_State_Entity>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9301      	str	r3, [sp, #4]
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	f107 0310 	add.w	r3, r7, #16
 800a9f8:	cb0c      	ldmia	r3, {r2, r3}
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	4871      	ldr	r0, [pc, #452]	; (800abc4 <Init_Msg_Hdlr+0x248>)
 800a9fe:	f000 fbd4 	bl	800b1aa <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Enable,   StateEnable_Ent,   	StateEnable_Run, 	StateEnable_Ext,   		false);
 800aa02:	f107 001c 	add.w	r0, r7, #28
 800aa06:	4b74      	ldr	r3, [pc, #464]	; (800abd8 <Init_Msg_Hdlr+0x25c>)
 800aa08:	4a74      	ldr	r2, [pc, #464]	; (800abdc <Init_Msg_Hdlr+0x260>)
 800aa0a:	4975      	ldr	r1, [pc, #468]	; (800abe0 <Init_Msg_Hdlr+0x264>)
 800aa0c:	f000 face 	bl	800afac <Create_State_Entity>
 800aa10:	2300      	movs	r3, #0
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	f107 031c 	add.w	r3, r7, #28
 800aa1c:	cb0c      	ldmia	r3, {r2, r3}
 800aa1e:	2102      	movs	r1, #2
 800aa20:	4868      	ldr	r0, [pc, #416]	; (800abc4 <Init_Msg_Hdlr+0x248>)
 800aa22:	f000 fbc2 	bl	800b1aa <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Error,    NULL,   			StateError_Run,    	NULL,   				false);
 800aa26:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4a6d      	ldr	r2, [pc, #436]	; (800abe4 <Init_Msg_Hdlr+0x268>)
 800aa2e:	2100      	movs	r1, #0
 800aa30:	f000 fabc 	bl	800afac <Create_State_Entity>
 800aa34:	2300      	movs	r3, #0
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa40:	cb0c      	ldmia	r3, {r2, r3}
 800aa42:	2103      	movs	r1, #3
 800aa44:	485f      	ldr	r0, [pc, #380]	; (800abc4 <Init_Msg_Hdlr+0x248>)
 800aa46:	f000 fbb0 	bl	800b1aa <Set_Task_State_Entity>

    TASK_CREATE_ROUTINE(&msg_hdlr_task,  ROUTINE_ID_MSG_PDO_SEND, 			NULL, Send_PDO, 		Ext_Send_PDO);
 800aa4a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800aa4e:	4b66      	ldr	r3, [pc, #408]	; (800abe8 <Init_Msg_Hdlr+0x26c>)
 800aa50:	4a66      	ldr	r2, [pc, #408]	; (800abec <Init_Msg_Hdlr+0x270>)
 800aa52:	2100      	movs	r1, #0
 800aa54:	f000 f906 	bl	800ac64 <Create_Routine_Entity>
 800aa58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aa60:	cb0c      	ldmia	r3, {r2, r3}
 800aa62:	2100      	movs	r1, #0
 800aa64:	4857      	ldr	r0, [pc, #348]	; (800abc4 <Init_Msg_Hdlr+0x248>)
 800aa66:	f000 fbc9 	bl	800b1fc <Set_Task_Routine_Entity>
    TASK_CREATE_ROUTINE(&msg_hdlr_task,  ROUTINE_ID_MSG_PDO_DUMMY_TEST, 	NULL, Set_PDO_Dummy, 	NULL);
 800aa6a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800aa6e:	2300      	movs	r3, #0
 800aa70:	4a5f      	ldr	r2, [pc, #380]	; (800abf0 <Init_Msg_Hdlr+0x274>)
 800aa72:	2100      	movs	r1, #0
 800aa74:	f000 f8f6 	bl	800ac64 <Create_Routine_Entity>
 800aa78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa80:	cb0c      	ldmia	r3, {r2, r3}
 800aa82:	2101      	movs	r1, #1
 800aa84:	484f      	ldr	r0, [pc, #316]	; (800abc4 <Init_Msg_Hdlr+0x248>)
 800aa86:	f000 fbb9 	bl	800b1fc <Set_Task_Routine_Entity>

	/* Data Object Definition */
    Create_DOD(TASK_ID_MSG);
 800aa8a:	2002      	movs	r0, #2
 800aa8c:	f7fe fc4e 	bl	800932c <Create_DOD>

	MSG_COMMON_SDO_CREATE(TASK_ID_MSG)
 800aa90:	4b58      	ldr	r3, [pc, #352]	; (800abf4 <Init_Msg_Hdlr+0x278>)
 800aa92:	2201      	movs	r2, #1
 800aa94:	2100      	movs	r1, #0
 800aa96:	2002      	movs	r0, #2
 800aa98:	f7fe fd1a 	bl	80094d0 <Create_SDO>
 800aa9c:	4b56      	ldr	r3, [pc, #344]	; (800abf8 <Init_Msg_Hdlr+0x27c>)
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	2002      	movs	r0, #2
 800aaa4:	f7fe fd14 	bl	80094d0 <Create_SDO>
 800aaa8:	4b54      	ldr	r3, [pc, #336]	; (800abfc <Init_Msg_Hdlr+0x280>)
 800aaaa:	2201      	movs	r2, #1
 800aaac:	2102      	movs	r1, #2
 800aaae:	2002      	movs	r0, #2
 800aab0:	f7fe fd0e 	bl	80094d0 <Create_SDO>
 800aab4:	4b52      	ldr	r3, [pc, #328]	; (800ac00 <Init_Msg_Hdlr+0x284>)
 800aab6:	2201      	movs	r2, #1
 800aab8:	2103      	movs	r1, #3
 800aaba:	2002      	movs	r0, #2
 800aabc:	f7fe fd08 	bl	80094d0 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_PDO_LIST, 				e_UInt16, Set_Send_PDO_List);
 800aac0:	4b50      	ldr	r3, [pc, #320]	; (800ac04 <Init_Msg_Hdlr+0x288>)
 800aac2:	2202      	movs	r2, #2
 800aac4:	2104      	movs	r1, #4
 800aac6:	2002      	movs	r0, #2
 800aac8:	f7fe fd02 	bl	80094d0 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_MS_ENUM,  				e_UInt8, Set_MS_Enum);
 800aacc:	4b4e      	ldr	r3, [pc, #312]	; (800ac08 <Init_Msg_Hdlr+0x28c>)
 800aace:	2201      	movs	r2, #1
 800aad0:	2105      	movs	r1, #5
 800aad2:	2002      	movs	r0, #2
 800aad4:	f7fe fcfc 	bl	80094d0 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_GUI_COMM_ONOFF,  		e_UInt8, Set_GUI_COMM_OnOff);
 800aad8:	4b4c      	ldr	r3, [pc, #304]	; (800ac0c <Init_Msg_Hdlr+0x290>)
 800aada:	2201      	movs	r2, #1
 800aadc:	2106      	movs	r1, #6
 800aade:	2002      	movs	r0, #2
 800aae0:	f7fe fcf6 	bl	80094d0 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_GUI_COMM_COMMAND,  		e_UInt8, Set_GUI_COMM_Command);
 800aae4:	4b4a      	ldr	r3, [pc, #296]	; (800ac10 <Init_Msg_Hdlr+0x294>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	2107      	movs	r1, #7
 800aaea:	2002      	movs	r0, #2
 800aaec:	f7fe fcf0 	bl	80094d0 <Create_SDO>

	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST1, 					e_Int32, 1, &test_dummy[0]);
 800aaf0:	4b48      	ldr	r3, [pc, #288]	; (800ac14 <Init_Msg_Hdlr+0x298>)
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	2206      	movs	r2, #6
 800aaf8:	2100      	movs	r1, #0
 800aafa:	2002      	movs	r0, #2
 800aafc:	f7fe fc2e 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST2, 					e_Int32, 1, &test_dummy[1]);
 800ab00:	4b45      	ldr	r3, [pc, #276]	; (800ac18 <Init_Msg_Hdlr+0x29c>)
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	2301      	movs	r3, #1
 800ab06:	2206      	movs	r2, #6
 800ab08:	2101      	movs	r1, #1
 800ab0a:	2002      	movs	r0, #2
 800ab0c:	f7fe fc26 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST3, 					e_Int32, 1, &test_dummy[2]);
 800ab10:	4b42      	ldr	r3, [pc, #264]	; (800ac1c <Init_Msg_Hdlr+0x2a0>)
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	2301      	movs	r3, #1
 800ab16:	2206      	movs	r2, #6
 800ab18:	2102      	movs	r1, #2
 800ab1a:	2002      	movs	r0, #2
 800ab1c:	f7fe fc1e 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST4, 					e_Int32, 1, &test_dummy[3]);
 800ab20:	4b3f      	ldr	r3, [pc, #252]	; (800ac20 <Init_Msg_Hdlr+0x2a4>)
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	2301      	movs	r3, #1
 800ab26:	2206      	movs	r2, #6
 800ab28:	2103      	movs	r1, #3
 800ab2a:	2002      	movs	r0, #2
 800ab2c:	f7fe fc16 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST5, 					e_Int32, 1, &test_dummy[4]);
 800ab30:	4b3c      	ldr	r3, [pc, #240]	; (800ac24 <Init_Msg_Hdlr+0x2a8>)
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	2301      	movs	r3, #1
 800ab36:	2206      	movs	r2, #6
 800ab38:	2104      	movs	r1, #4
 800ab3a:	2002      	movs	r0, #2
 800ab3c:	f7fe fc0e 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST6, 					e_Int32, 1, &test_dummy[5]);
 800ab40:	4b39      	ldr	r3, [pc, #228]	; (800ac28 <Init_Msg_Hdlr+0x2ac>)
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	2301      	movs	r3, #1
 800ab46:	2206      	movs	r2, #6
 800ab48:	2105      	movs	r1, #5
 800ab4a:	2002      	movs	r0, #2
 800ab4c:	f7fe fc06 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST7, 					e_Int32, 1, &test_dummy[6]);
 800ab50:	4b36      	ldr	r3, [pc, #216]	; (800ac2c <Init_Msg_Hdlr+0x2b0>)
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	2301      	movs	r3, #1
 800ab56:	2206      	movs	r2, #6
 800ab58:	2106      	movs	r1, #6
 800ab5a:	2002      	movs	r0, #2
 800ab5c:	f7fe fbfe 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST8, 					e_Int32, 1, &test_dummy[7]);
 800ab60:	4b33      	ldr	r3, [pc, #204]	; (800ac30 <Init_Msg_Hdlr+0x2b4>)
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	2301      	movs	r3, #1
 800ab66:	2206      	movs	r2, #6
 800ab68:	2107      	movs	r1, #7
 800ab6a:	2002      	movs	r0, #2
 800ab6c:	f7fe fbf6 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST9, 					e_Int32, 1, &test_dummy[8]);
 800ab70:	4b30      	ldr	r3, [pc, #192]	; (800ac34 <Init_Msg_Hdlr+0x2b8>)
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	2301      	movs	r3, #1
 800ab76:	2206      	movs	r2, #6
 800ab78:	2108      	movs	r1, #8
 800ab7a:	2002      	movs	r0, #2
 800ab7c:	f7fe fbee 	bl	800935c <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST10, 					e_Int32, 1, &test_dummy[9]);
 800ab80:	4b2d      	ldr	r3, [pc, #180]	; (800ac38 <Init_Msg_Hdlr+0x2bc>)
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	2301      	movs	r3, #1
 800ab86:	2206      	movs	r2, #6
 800ab88:	2109      	movs	r1, #9
 800ab8a:	2002      	movs	r0, #2
 800ab8c:	f7fe fbe6 	bl	800935c <Create_PDO>

	/* Callback Allocation */
    if(comm_type == e_FDCAN){
 800ab90:	4b0b      	ldr	r3, [pc, #44]	; (800abc0 <Init_Msg_Hdlr+0x244>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d102      	bne.n	800ab9e <Init_Msg_Hdlr+0x222>
    	fdcan_rx_callback_ptr = Fdcan_Rx_Hdlr;
 800ab98:	4b28      	ldr	r3, [pc, #160]	; (800ac3c <Init_Msg_Hdlr+0x2c0>)
 800ab9a:	4a29      	ldr	r2, [pc, #164]	; (800ac40 <Init_Msg_Hdlr+0x2c4>)
 800ab9c:	601a      	str	r2, [r3, #0]
    } else {
//    	ioif_usb_rx_callback_ptr = USB_Rx_Hdlr;
    }

    Initial_ICM2(&ads2);
 800ab9e:	4829      	ldr	r0, [pc, #164]	; (800ac44 <Init_Msg_Hdlr+0x2c8>)
 800aba0:	f7ff fd32 	bl	800a608 <Initial_ICM2>

    /* Start */
    if(Start_TIM6()>0){
 800aba4:	f7fc fe9e 	bl	80078e4 <Start_TIM6>
        //TODO: ERROR PROCESS
    }
    ioif_tim6_callback_ptr = Run_Msg_Hdlr;
 800aba8:	4b27      	ldr	r3, [pc, #156]	; (800ac48 <Init_Msg_Hdlr+0x2cc>)
 800abaa:	4a28      	ldr	r2, [pc, #160]	; (800ac4c <Init_Msg_Hdlr+0x2d0>)
 800abac:	601a      	str	r2, [r3, #0]
}
 800abae:	bf00      	nop
 800abb0:	3758      	adds	r7, #88	; 0x58
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	2400d2c8 	.word	0x2400d2c8
 800abbc:	2400d2c9 	.word	0x2400d2c9
 800abc0:	2400d2b9 	.word	0x2400d2b9
 800abc4:	240035ac 	.word	0x240035ac
 800abc8:	0800a8b5 	.word	0x0800a8b5
 800abcc:	0800a8f9 	.word	0x0800a8f9
 800abd0:	0800a8eb 	.word	0x0800a8eb
 800abd4:	0800a8dd 	.word	0x0800a8dd
 800abd8:	0800a945 	.word	0x0800a945
 800abdc:	0800a925 	.word	0x0800a925
 800abe0:	0800a909 	.word	0x0800a909
 800abe4:	0800a96d 	.word	0x0800a96d
 800abe8:	0800a08d 	.word	0x0800a08d
 800abec:	08009ff9 	.word	0x08009ff9
 800abf0:	0800a0b1 	.word	0x0800a0b1
 800abf4:	0800a625 	.word	0x0800a625
 800abf8:	0800a65d 	.word	0x0800a65d
 800abfc:	0800a695 	.word	0x0800a695
 800ac00:	0800a70d 	.word	0x0800a70d
 800ac04:	0800a7c5 	.word	0x0800a7c5
 800ac08:	0800a825 	.word	0x0800a825
 800ac0c:	0800a855 	.word	0x0800a855
 800ac10:	0800a885 	.word	0x0800a885
 800ac14:	2400d358 	.word	0x2400d358
 800ac18:	2400d35c 	.word	0x2400d35c
 800ac1c:	2400d360 	.word	0x2400d360
 800ac20:	2400d364 	.word	0x2400d364
 800ac24:	2400d368 	.word	0x2400d368
 800ac28:	2400d36c 	.word	0x2400d36c
 800ac2c:	2400d370 	.word	0x2400d370
 800ac30:	2400d374 	.word	0x2400d374
 800ac34:	2400d378 	.word	0x2400d378
 800ac38:	2400d37c 	.word	0x2400d37c
 800ac3c:	2400055c 	.word	0x2400055c
 800ac40:	0800a559 	.word	0x0800a559
 800ac44:	2400d380 	.word	0x2400d380
 800ac48:	24000620 	.word	0x24000620
 800ac4c:	0800ac51 	.word	0x0800ac51

0800ac50 <Run_Msg_Hdlr>:

void Run_Msg_Hdlr()
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	af00      	add	r7, sp, #0
//	uint32_t msg_hdlr_loop_time_cnt_1 = DWT->CYCCNT;

	Run_Task(&msg_hdlr_task);
 800ac54:	4802      	ldr	r0, [pc, #8]	; (800ac60 <Run_Msg_Hdlr+0x10>)
 800ac56:	f000 fa9b 	bl	800b190 <Run_Task>

//	uint32_t msg_hdlr_loop_time_cnt_2 = DWT->CYCCNT;
//	msg_hdlr_loop_time_us = (msg_hdlr_loop_time_cnt_2 - msg_hdlr_loop_time_cnt_1)/480; // microsecond
}
 800ac5a:	bf00      	nop
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	240035ac 	.word	0x240035ac

0800ac64 <Create_Routine_Entity>:
#include <routine.h>

// Routine Entity
RoutineEntityStruct Create_Routine_Entity(RoutineFncPtr t_ent, RoutineFncPtr t_run, RoutineFncPtr t_ext)
{
 800ac64:	b490      	push	{r4, r7}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
    RoutineEntityStruct t_res;
    t_res.on_enter = t_ent;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	617b      	str	r3, [r7, #20]
    t_res.on_run = t_run;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	61bb      	str	r3, [r7, #24]
    t_res.on_exit = t_ext;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	61fb      	str	r3, [r7, #28]
    return t_res;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	461c      	mov	r4, r3
 800ac82:	f107 0314 	add.w	r3, r7, #20
 800ac86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	3720      	adds	r7, #32
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bc90      	pop	{r4, r7}
 800ac96:	4770      	bx	lr

0800ac98 <Init_Routine>:


// DriveRoutine Interface
void Init_Routine(RoutineStruct* t_routine)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800aca0:	2300      	movs	r3, #0
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	e025      	b.n	800acf2 <Init_Routine+0x5a>
    	t_routine->id[i] = 0;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	2100      	movs	r1, #0
 800acac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	t_routine->entities[i].on_enter = NULL;
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	4613      	mov	r3, r2
 800acb6:	005b      	lsls	r3, r3, #1
 800acb8:	4413      	add	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	440b      	add	r3, r1
 800acbe:	3324      	adds	r3, #36	; 0x24
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_run = NULL;
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	4613      	mov	r3, r2
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	4413      	add	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	440b      	add	r3, r1
 800acd2:	3328      	adds	r3, #40	; 0x28
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_exit = NULL;
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	4613      	mov	r3, r2
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	440b      	add	r3, r1
 800ace6:	332c      	adds	r3, #44	; 0x2c
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3301      	adds	r3, #1
 800acf0:	60fb      	str	r3, [r7, #12]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b07      	cmp	r3, #7
 800acf6:	ddd6      	ble.n	800aca6 <Init_Routine+0xe>
    }
    t_routine->n_id = 0;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	621a      	str	r2, [r3, #32]
}
 800acfe:	bf00      	nop
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
	...

0800ad0c <Ent_Routines>:

int Ent_Routines(RoutineStruct* t_routine)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
	static int t_res = 0;
	static int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800ad14:	2300      	movs	r3, #0
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	e029      	b.n	800ad6e <Ent_Routines+0x62>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad22:	4a18      	ldr	r2, [pc, #96]	; (800ad84 <Ent_Routines+0x78>)
 800ad24:	6013      	str	r3, [r2, #0]
		if (t_routine->entities[t_id].on_enter) {
 800ad26:	4b17      	ldr	r3, [pc, #92]	; (800ad84 <Ent_Routines+0x78>)
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	6879      	ldr	r1, [r7, #4]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	4413      	add	r3, r2
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	440b      	add	r3, r1
 800ad36:	3324      	adds	r3, #36	; 0x24
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00d      	beq.n	800ad5a <Ent_Routines+0x4e>
			t_res = t_routine->entities[t_id].on_enter();
 800ad3e:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <Ent_Routines+0x78>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	4613      	mov	r3, r2
 800ad46:	005b      	lsls	r3, r3, #1
 800ad48:	4413      	add	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	440b      	add	r3, r1
 800ad4e:	3324      	adds	r3, #36	; 0x24
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4798      	blx	r3
 800ad54:	4603      	mov	r3, r0
 800ad56:	4a0c      	ldr	r2, [pc, #48]	; (800ad88 <Ent_Routines+0x7c>)
 800ad58:	6013      	str	r3, [r2, #0]
		}
        if (t_res < 0) {
 800ad5a:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <Ent_Routines+0x7c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	da02      	bge.n	800ad68 <Ent_Routines+0x5c>
            return t_res;
 800ad62:	4b09      	ldr	r3, [pc, #36]	; (800ad88 <Ent_Routines+0x7c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	e008      	b.n	800ad7a <Ent_Routines+0x6e>
    for (int i = 0; i < t_routine->n_id; i++){
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a1a      	ldr	r2, [r3, #32]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d8d0      	bhi.n	800ad1a <Ent_Routines+0xe>
        }
    }
    return 0;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	2400d38c 	.word	0x2400d38c
 800ad88:	2400d390 	.word	0x2400d390

0800ad8c <Run_Routines>:

int Run_Routines(RoutineStruct* t_routine)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	int t_res = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	617b      	str	r3, [r7, #20]
	int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800ad98:	2300      	movs	r3, #0
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	e022      	b.n	800ade4 <Run_Routines+0x58>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada6:	60fb      	str	r3, [r7, #12]
		if (t_routine->entities[t_id].on_run) {
 800ada8:	6879      	ldr	r1, [r7, #4]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	4613      	mov	r3, r2
 800adae:	005b      	lsls	r3, r3, #1
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	440b      	add	r3, r1
 800adb6:	3328      	adds	r3, #40	; 0x28
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00a      	beq.n	800add4 <Run_Routines+0x48>
			t_res = t_routine->entities[t_id].on_run();
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	4613      	mov	r3, r2
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	440b      	add	r3, r1
 800adcc:	3328      	adds	r3, #40	; 0x28
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4798      	blx	r3
 800add2:	6178      	str	r0, [r7, #20]
		}
        if (t_res < 0) {
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	2b00      	cmp	r3, #0
 800add8:	da01      	bge.n	800adde <Run_Routines+0x52>
            return t_res;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	e008      	b.n	800adf0 <Run_Routines+0x64>
    for (int i = 0; i < t_routine->n_id; i++){
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	3301      	adds	r3, #1
 800ade2:	613b      	str	r3, [r7, #16]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1a      	ldr	r2, [r3, #32]
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	429a      	cmp	r2, r3
 800adec:	d8d7      	bhi.n	800ad9e <Run_Routines+0x12>
        }
    }
    return 0;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <Ext_Routines>:

int Ext_Routines(RoutineStruct* t_routine)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
	static int t_res = 0;
	static int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800ae00:	2300      	movs	r3, #0
 800ae02:	60fb      	str	r3, [r7, #12]
 800ae04:	e029      	b.n	800ae5a <Ext_Routines+0x62>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae0e:	4a18      	ldr	r2, [pc, #96]	; (800ae70 <Ext_Routines+0x78>)
 800ae10:	6013      	str	r3, [r2, #0]
		if (t_routine->entities[t_id].on_exit) {
 800ae12:	4b17      	ldr	r3, [pc, #92]	; (800ae70 <Ext_Routines+0x78>)
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	4413      	add	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	440b      	add	r3, r1
 800ae22:	332c      	adds	r3, #44	; 0x2c
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00d      	beq.n	800ae46 <Ext_Routines+0x4e>
			t_res = t_routine->entities[t_id].on_exit();
 800ae2a:	4b11      	ldr	r3, [pc, #68]	; (800ae70 <Ext_Routines+0x78>)
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	6879      	ldr	r1, [r7, #4]
 800ae30:	4613      	mov	r3, r2
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	4413      	add	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	440b      	add	r3, r1
 800ae3a:	332c      	adds	r3, #44	; 0x2c
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4798      	blx	r3
 800ae40:	4603      	mov	r3, r0
 800ae42:	4a0c      	ldr	r2, [pc, #48]	; (800ae74 <Ext_Routines+0x7c>)
 800ae44:	6013      	str	r3, [r2, #0]
		}
        if (t_res < 0) {
 800ae46:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <Ext_Routines+0x7c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	da02      	bge.n	800ae54 <Ext_Routines+0x5c>
            return t_res;
 800ae4e:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <Ext_Routines+0x7c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	e008      	b.n	800ae66 <Ext_Routines+0x6e>
    for (int i = 0; i < t_routine->n_id; i++){
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3301      	adds	r3, #1
 800ae58:	60fb      	str	r3, [r7, #12]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1a      	ldr	r2, [r3, #32]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d8d0      	bhi.n	800ae06 <Ext_Routines+0xe>
        }
    }
    return 0;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2400d394 	.word	0x2400d394
 800ae74:	2400d398 	.word	0x2400d398

0800ae78 <Clear_Routines>:

void Clear_Routines(RoutineStruct* t_routine)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800ae80:	2300      	movs	r3, #0
 800ae82:	60fb      	str	r3, [r7, #12]
 800ae84:	e008      	b.n	800ae98 <Clear_Routines+0x20>
    	t_routine->id[i] = ROUTINE_DEFAULT_ID;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	f04f 31ff 	mov.w	r1, #4294967295
 800ae8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3301      	adds	r3, #1
 800ae96:	60fb      	str	r3, [r7, #12]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b07      	cmp	r3, #7
 800ae9c:	ddf3      	ble.n	800ae86 <Clear_Routines+0xe>
    }
    t_routine->n_id = 0;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	621a      	str	r2, [r3, #32]
}
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <Push_Routine>:

int Push_Routine(RoutineStruct* t_routine, uint8_t t_id)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
    if (t_routine->n_id >= ROUTINE_MAX_ENTITIES) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a1b      	ldr	r3, [r3, #32]
 800aec0:	2b07      	cmp	r3, #7
 800aec2:	d902      	bls.n	800aeca <Push_Routine+0x1a>
        return -1;
 800aec4:	f04f 33ff 	mov.w	r3, #4294967295
 800aec8:	e01d      	b.n	800af06 <Push_Routine+0x56>
    }

    for(int i = 0; i < t_routine->n_id; i++){
 800aeca:	2300      	movs	r3, #0
 800aecc:	60fb      	str	r3, [r7, #12]
 800aece:	e00b      	b.n	800aee8 <Push_Routine+0x38>
    	if(t_routine->id[i] == t_id){return 0;}
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aed8:	78fb      	ldrb	r3, [r7, #3]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d101      	bne.n	800aee2 <Push_Routine+0x32>
 800aede:	2300      	movs	r3, #0
 800aee0:	e011      	b.n	800af06 <Push_Routine+0x56>
    for(int i = 0; i < t_routine->n_id; i++){
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3301      	adds	r3, #1
 800aee6:	60fb      	str	r3, [r7, #12]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a1a      	ldr	r2, [r3, #32]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d8ee      	bhi.n	800aed0 <Push_Routine+0x20>
    }
    
    t_routine->id[t_routine->n_id++] = t_id;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	1c59      	adds	r1, r3, #1
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	6211      	str	r1, [r2, #32]
 800aefc:	78f9      	ldrb	r1, [r7, #3]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 0;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
	...

0800af14 <Transition_Map>:

#include "state_machine.h"

// State & Transition Map
static StateEnum Transition_Map(StateEnum t_curr, StateEnum t_cmd)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	460a      	mov	r2, r1
 800af1e:	71fb      	strb	r3, [r7, #7]
 800af20:	4613      	mov	r3, r2
 800af22:	71bb      	strb	r3, [r7, #6]
    if (t_curr == t_cmd) {
 800af24:	79fa      	ldrb	r2, [r7, #7]
 800af26:	79bb      	ldrb	r3, [r7, #6]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d101      	bne.n	800af30 <Transition_Map+0x1c>
        return t_curr;
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	e037      	b.n	800afa0 <Transition_Map+0x8c>
    }

    switch (t_curr) {
 800af30:	79fb      	ldrb	r3, [r7, #7]
 800af32:	2b03      	cmp	r3, #3
 800af34:	d82a      	bhi.n	800af8c <Transition_Map+0x78>
 800af36:	a201      	add	r2, pc, #4	; (adr r2, 800af3c <Transition_Map+0x28>)
 800af38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3c:	0800af4d 	.word	0x0800af4d
 800af40:	0800af57 	.word	0x0800af57
 800af44:	0800af67 	.word	0x0800af67
 800af48:	0800af7d 	.word	0x0800af7d
    /*  |- From State -|  |---------------------------------- To State ----------------------------------| |- If valid -| |else| */
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 800af4c:	79bb      	ldrb	r3, [r7, #6]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d11e      	bne.n	800af90 <Transition_Map+0x7c>
 800af52:	79bb      	ldrb	r3, [r7, #6]
 800af54:	e024      	b.n	800afa0 <Transition_Map+0x8c>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 800af56:	79bb      	ldrb	r3, [r7, #6]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <Transition_Map+0x4e>
 800af5c:	79bb      	ldrb	r3, [r7, #6]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d118      	bne.n	800af94 <Transition_Map+0x80>
 800af62:	79bb      	ldrb	r3, [r7, #6]
 800af64:	e01c      	b.n	800afa0 <Transition_Map+0x8c>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 800af66:	79bb      	ldrb	r3, [r7, #6]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d005      	beq.n	800af78 <Transition_Map+0x64>
 800af6c:	79bb      	ldrb	r3, [r7, #6]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d002      	beq.n	800af78 <Transition_Map+0x64>
 800af72:	79bb      	ldrb	r3, [r7, #6]
 800af74:	2b03      	cmp	r3, #3
 800af76:	d10f      	bne.n	800af98 <Transition_Map+0x84>
 800af78:	79bb      	ldrb	r3, [r7, #6]
 800af7a:	e011      	b.n	800afa0 <Transition_Map+0x8c>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 800af7c:	79bb      	ldrb	r3, [r7, #6]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <Transition_Map+0x74>
 800af82:	79bb      	ldrb	r3, [r7, #6]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d109      	bne.n	800af9c <Transition_Map+0x88>
 800af88:	79bb      	ldrb	r3, [r7, #6]
 800af8a:	e009      	b.n	800afa0 <Transition_Map+0x8c>
    default: break;
 800af8c:	bf00      	nop
 800af8e:	e006      	b.n	800af9e <Transition_Map+0x8a>
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 800af90:	bf00      	nop
 800af92:	e004      	b.n	800af9e <Transition_Map+0x8a>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 800af94:	bf00      	nop
 800af96:	e002      	b.n	800af9e <Transition_Map+0x8a>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 800af98:	bf00      	nop
 800af9a:	e000      	b.n	800af9e <Transition_Map+0x8a>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 800af9c:	bf00      	nop
    }

    return t_curr;
 800af9e:	79fb      	ldrb	r3, [r7, #7]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <Create_State_Entity>:


// State Functions
StateEntityStruct Create_State_Entity(StateFuncPtr t_ent, StateFuncPtr t_run, StateFuncPtr t_ext)
{
 800afac:	b490      	push	{r4, r7}
 800afae:	b088      	sub	sp, #32
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
    StateEntityStruct t_res;
    t_res.on_enter = t_ent;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	617b      	str	r3, [r7, #20]
    t_res.on_run =   t_run;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	61bb      	str	r3, [r7, #24]
    t_res.on_exit =  t_ext;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	61fb      	str	r3, [r7, #28]
    return t_res;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	461c      	mov	r4, r3
 800afca:	f107 0314 	add.w	r3, r7, #20
 800afce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800afd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	3720      	adds	r7, #32
 800afda:	46bd      	mov	sp, r7
 800afdc:	bc90      	pop	{r4, r7}
 800afde:	4770      	bx	lr

0800afe0 <Init_State_Machine>:


// State Machine Interfaces
void Init_State_Machine(StateMachineStruct* t_sm)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	e020      	b.n	800b030 <Init_State_Machine+0x50>
    	t_sm->entity[i].on_enter = NULL;
 800afee:	6879      	ldr	r1, [r7, #4]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	4613      	mov	r3, r2
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	3304      	adds	r3, #4
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_run   = NULL;
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	4613      	mov	r3, r2
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	4413      	add	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	440b      	add	r3, r1
 800b010:	3308      	adds	r3, #8
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_exit  = NULL;
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4613      	mov	r3, r2
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	440b      	add	r3, r1
 800b024:	330c      	adds	r3, #12
 800b026:	2200      	movs	r2, #0
 800b028:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3301      	adds	r3, #1
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b03      	cmp	r3, #3
 800b034:	dddb      	ble.n	800afee <Init_State_Machine+0xe>
    }
    t_sm->entity_life_cycle = e_StateEntity_Ent;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	709a      	strb	r2, [r3, #2]
}
 800b03c:	bf00      	nop
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <Run_State_Machine>:

void Run_State_Machine(StateMachineStruct* t_sm)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
    switch (t_sm->entity_life_cycle) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	789b      	ldrb	r3, [r3, #2]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d041      	beq.n	800b0dc <Run_State_Machine+0x94>
 800b058:	2b02      	cmp	r3, #2
 800b05a:	dc5c      	bgt.n	800b116 <Run_State_Machine+0xce>
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <Run_State_Machine+0x1e>
 800b060:	2b01      	cmp	r3, #1
 800b062:	d021      	beq.n	800b0a8 <Run_State_Machine+0x60>
        }
        t_sm->entity_life_cycle = e_StateEntity_Ent;
        break;

    default: // Invalid Lifecycle
        break;
 800b064:	e057      	b.n	800b116 <Run_State_Machine+0xce>
        if (t_sm->entity[t_sm->curr_state].on_enter) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	4619      	mov	r1, r3
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	460b      	mov	r3, r1
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	440b      	add	r3, r1
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	3304      	adds	r3, #4
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00b      	beq.n	800b098 <Run_State_Machine+0x50>
        	t_sm->entity[t_sm->curr_state].on_enter();
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	4619      	mov	r1, r3
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	440b      	add	r3, r1
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	3304      	adds	r3, #4
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4798      	blx	r3
        if (t_sm->entity_life_cycle == e_StateEntity_Ent){
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	789b      	ldrb	r3, [r3, #2]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d13c      	bne.n	800b11a <Run_State_Machine+0xd2>
        	t_sm->entity_life_cycle = e_StateEntity_Run;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	709a      	strb	r2, [r3, #2]
        break;
 800b0a6:	e038      	b.n	800b11a <Run_State_Machine+0xd2>
        if (t_sm->entity[t_sm->curr_state].on_run) {
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	440b      	add	r3, r1
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	3308      	adds	r3, #8
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d02d      	beq.n	800b11e <Run_State_Machine+0xd6>
        	t_sm->entity[t_sm->curr_state].on_run();
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	440b      	add	r3, r1
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4798      	blx	r3
        break;
 800b0da:	e020      	b.n	800b11e <Run_State_Machine+0xd6>
        if (t_sm->entity[t_sm->prev_state].on_exit) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	785b      	ldrb	r3, [r3, #1]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	005b      	lsls	r3, r3, #1
 800b0e8:	440b      	add	r3, r1
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	330c      	adds	r3, #12
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00b      	beq.n	800b10e <Run_State_Machine+0xc6>
        	t_sm->entity[t_sm->prev_state].on_exit();
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	785b      	ldrb	r3, [r3, #1]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	005b      	lsls	r3, r3, #1
 800b102:	440b      	add	r3, r1
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	330c      	adds	r3, #12
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4798      	blx	r3
        t_sm->entity_life_cycle = e_StateEntity_Ent;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	709a      	strb	r2, [r3, #2]
        break;
 800b114:	e004      	b.n	800b120 <Run_State_Machine+0xd8>
        break;
 800b116:	bf00      	nop
 800b118:	e002      	b.n	800b120 <Run_State_Machine+0xd8>
        break;
 800b11a:	bf00      	nop
 800b11c:	e000      	b.n	800b120 <Run_State_Machine+0xd8>
        break;
 800b11e:	bf00      	nop
    }
}
 800b120:	bf00      	nop
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <Transition_State>:

void Transition_State(StateMachineStruct* t_sm, StateEnum t_state_cmd)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
    StateEnum new_state = Transition_Map(t_sm->curr_state, t_state_cmd);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	78fa      	ldrb	r2, [r7, #3]
 800b13a:	4611      	mov	r1, r2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff fee9 	bl	800af14 <Transition_Map>
 800b142:	4603      	mov	r3, r0
 800b144:	73fb      	strb	r3, [r7, #15]
    if (t_sm->curr_state != new_state) {
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	7bfa      	ldrb	r2, [r7, #15]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d009      	beq.n	800b164 <Transition_State+0x3c>
    	t_sm->prev_state = t_sm->curr_state;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	781a      	ldrb	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	705a      	strb	r2, [r3, #1]
    	t_sm->curr_state = new_state;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7bfa      	ldrb	r2, [r7, #15]
 800b15c:	701a      	strb	r2, [r3, #0]
    	t_sm->entity_life_cycle = e_StateEntity_Ext;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2202      	movs	r2, #2
 800b162:	709a      	strb	r2, [r3, #2]
    }
}
 800b164:	bf00      	nop
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <Init_Task>:

#include <task.h>

// Device Interface
void Init_Task(TaskStruct* t_task)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
    Init_State_Machine(&t_task->state_machine);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	330c      	adds	r3, #12
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff ff31 	bl	800afe0 <Init_State_Machine>
    Init_Routine(&t_task->routine);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3340      	adds	r3, #64	; 0x40
 800b182:	4618      	mov	r0, r3
 800b184:	f7ff fd88 	bl	800ac98 <Init_Routine>
}
 800b188:	bf00      	nop
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <Run_Task>:

void Run_Task(TaskStruct* t_task)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
    Run_State_Machine(&t_task->state_machine);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	330c      	adds	r3, #12
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7ff ff53 	bl	800b048 <Run_State_Machine>
}
 800b1a2:	bf00      	nop
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <Set_Task_State_Entity>:

void Set_Task_State_Entity(TaskStruct* t_task, StateEnum t_state, StateEntityStruct t_entity, bool t_is_default)
{
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	f107 0010 	add.w	r0, r7, #16
 800b1b8:	e880 000c 	stmia.w	r0, {r2, r3}
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
	t_task->state_machine.entity[t_state] = t_entity;
 800b1c0:	78fa      	ldrb	r2, [r7, #3]
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	4413      	add	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	440b      	add	r3, r1
 800b1ce:	3308      	adds	r3, #8
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	f107 0210 	add.w	r2, r7, #16
 800b1d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800b1d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (t_is_default) {
 800b1dc:	7f3b      	ldrb	r3, [r7, #28]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d005      	beq.n	800b1ee <Set_Task_State_Entity+0x44>
    	t_task->state_machine.curr_state = t_state;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	78fa      	ldrb	r2, [r7, #3]
 800b1e6:	731a      	strb	r2, [r3, #12]
    	t_task->state_machine.prev_state = t_state;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	78fa      	ldrb	r2, [r7, #3]
 800b1ec:	735a      	strb	r2, [r3, #13]
    }
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	b002      	add	sp, #8
 800b1fa:	4770      	bx	lr

0800b1fc <Set_Task_Routine_Entity>:

//TODO: id, order range/duplication check
void Set_Task_Routine_Entity(TaskStruct* t_task, int t_id, RoutineEntityStruct t_entity)
{
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	b480      	push	{r7}
 800b200:	b083      	sub	sp, #12
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	6039      	str	r1, [r7, #0]
 800b208:	f107 0110 	add.w	r1, r7, #16
 800b20c:	e881 000c 	stmia.w	r1, {r2, r3}
	t_task->routine.entities[t_id] = t_entity;
 800b210:	6879      	ldr	r1, [r7, #4]
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	4613      	mov	r3, r2
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	4413      	add	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	440b      	add	r3, r1
 800b21e:	3360      	adds	r3, #96	; 0x60
 800b220:	3304      	adds	r3, #4
 800b222:	f107 0210 	add.w	r2, r7, #16
 800b226:	ca07      	ldmia	r2, {r0, r1, r2}
 800b228:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	b002      	add	sp, #8
 800b238:	4770      	bx	lr
	...

0800b23c <__assert_func>:
 800b23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b23e:	4614      	mov	r4, r2
 800b240:	461a      	mov	r2, r3
 800b242:	4b09      	ldr	r3, [pc, #36]	; (800b268 <__assert_func+0x2c>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4605      	mov	r5, r0
 800b248:	68d8      	ldr	r0, [r3, #12]
 800b24a:	b14c      	cbz	r4, 800b260 <__assert_func+0x24>
 800b24c:	4b07      	ldr	r3, [pc, #28]	; (800b26c <__assert_func+0x30>)
 800b24e:	9100      	str	r1, [sp, #0]
 800b250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b254:	4906      	ldr	r1, [pc, #24]	; (800b270 <__assert_func+0x34>)
 800b256:	462b      	mov	r3, r5
 800b258:	f000 f994 	bl	800b584 <fiprintf>
 800b25c:	f000 fa9e 	bl	800b79c <abort>
 800b260:	4b04      	ldr	r3, [pc, #16]	; (800b274 <__assert_func+0x38>)
 800b262:	461c      	mov	r4, r3
 800b264:	e7f3      	b.n	800b24e <__assert_func+0x12>
 800b266:	bf00      	nop
 800b268:	2400006c 	.word	0x2400006c
 800b26c:	0800d0a8 	.word	0x0800d0a8
 800b270:	0800d0b5 	.word	0x0800d0b5
 800b274:	0800d0e3 	.word	0x0800d0e3

0800b278 <malloc>:
 800b278:	4b02      	ldr	r3, [pc, #8]	; (800b284 <malloc+0xc>)
 800b27a:	4601      	mov	r1, r0
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f000 b82b 	b.w	800b2d8 <_malloc_r>
 800b282:	bf00      	nop
 800b284:	2400006c 	.word	0x2400006c

0800b288 <free>:
 800b288:	4b02      	ldr	r3, [pc, #8]	; (800b294 <free+0xc>)
 800b28a:	4601      	mov	r1, r0
 800b28c:	6818      	ldr	r0, [r3, #0]
 800b28e:	f000 ba8d 	b.w	800b7ac <_free_r>
 800b292:	bf00      	nop
 800b294:	2400006c 	.word	0x2400006c

0800b298 <sbrk_aligned>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	4e0e      	ldr	r6, [pc, #56]	; (800b2d4 <sbrk_aligned+0x3c>)
 800b29c:	460c      	mov	r4, r1
 800b29e:	6831      	ldr	r1, [r6, #0]
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	b911      	cbnz	r1, 800b2aa <sbrk_aligned+0x12>
 800b2a4:	f000 fa1e 	bl	800b6e4 <_sbrk_r>
 800b2a8:	6030      	str	r0, [r6, #0]
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f000 fa19 	bl	800b6e4 <_sbrk_r>
 800b2b2:	1c43      	adds	r3, r0, #1
 800b2b4:	d00a      	beq.n	800b2cc <sbrk_aligned+0x34>
 800b2b6:	1cc4      	adds	r4, r0, #3
 800b2b8:	f024 0403 	bic.w	r4, r4, #3
 800b2bc:	42a0      	cmp	r0, r4
 800b2be:	d007      	beq.n	800b2d0 <sbrk_aligned+0x38>
 800b2c0:	1a21      	subs	r1, r4, r0
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f000 fa0e 	bl	800b6e4 <_sbrk_r>
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d101      	bne.n	800b2d0 <sbrk_aligned+0x38>
 800b2cc:	f04f 34ff 	mov.w	r4, #4294967295
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}
 800b2d4:	2400d3a0 	.word	0x2400d3a0

0800b2d8 <_malloc_r>:
 800b2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2dc:	1ccd      	adds	r5, r1, #3
 800b2de:	f025 0503 	bic.w	r5, r5, #3
 800b2e2:	3508      	adds	r5, #8
 800b2e4:	2d0c      	cmp	r5, #12
 800b2e6:	bf38      	it	cc
 800b2e8:	250c      	movcc	r5, #12
 800b2ea:	2d00      	cmp	r5, #0
 800b2ec:	4607      	mov	r7, r0
 800b2ee:	db01      	blt.n	800b2f4 <_malloc_r+0x1c>
 800b2f0:	42a9      	cmp	r1, r5
 800b2f2:	d905      	bls.n	800b300 <_malloc_r+0x28>
 800b2f4:	230c      	movs	r3, #12
 800b2f6:	603b      	str	r3, [r7, #0]
 800b2f8:	2600      	movs	r6, #0
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b300:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b3d4 <_malloc_r+0xfc>
 800b304:	f000 f868 	bl	800b3d8 <__malloc_lock>
 800b308:	f8d8 3000 	ldr.w	r3, [r8]
 800b30c:	461c      	mov	r4, r3
 800b30e:	bb5c      	cbnz	r4, 800b368 <_malloc_r+0x90>
 800b310:	4629      	mov	r1, r5
 800b312:	4638      	mov	r0, r7
 800b314:	f7ff ffc0 	bl	800b298 <sbrk_aligned>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	4604      	mov	r4, r0
 800b31c:	d155      	bne.n	800b3ca <_malloc_r+0xf2>
 800b31e:	f8d8 4000 	ldr.w	r4, [r8]
 800b322:	4626      	mov	r6, r4
 800b324:	2e00      	cmp	r6, #0
 800b326:	d145      	bne.n	800b3b4 <_malloc_r+0xdc>
 800b328:	2c00      	cmp	r4, #0
 800b32a:	d048      	beq.n	800b3be <_malloc_r+0xe6>
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	4631      	mov	r1, r6
 800b330:	4638      	mov	r0, r7
 800b332:	eb04 0903 	add.w	r9, r4, r3
 800b336:	f000 f9d5 	bl	800b6e4 <_sbrk_r>
 800b33a:	4581      	cmp	r9, r0
 800b33c:	d13f      	bne.n	800b3be <_malloc_r+0xe6>
 800b33e:	6821      	ldr	r1, [r4, #0]
 800b340:	1a6d      	subs	r5, r5, r1
 800b342:	4629      	mov	r1, r5
 800b344:	4638      	mov	r0, r7
 800b346:	f7ff ffa7 	bl	800b298 <sbrk_aligned>
 800b34a:	3001      	adds	r0, #1
 800b34c:	d037      	beq.n	800b3be <_malloc_r+0xe6>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	442b      	add	r3, r5
 800b352:	6023      	str	r3, [r4, #0]
 800b354:	f8d8 3000 	ldr.w	r3, [r8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d038      	beq.n	800b3ce <_malloc_r+0xf6>
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	42a2      	cmp	r2, r4
 800b360:	d12b      	bne.n	800b3ba <_malloc_r+0xe2>
 800b362:	2200      	movs	r2, #0
 800b364:	605a      	str	r2, [r3, #4]
 800b366:	e00f      	b.n	800b388 <_malloc_r+0xb0>
 800b368:	6822      	ldr	r2, [r4, #0]
 800b36a:	1b52      	subs	r2, r2, r5
 800b36c:	d41f      	bmi.n	800b3ae <_malloc_r+0xd6>
 800b36e:	2a0b      	cmp	r2, #11
 800b370:	d917      	bls.n	800b3a2 <_malloc_r+0xca>
 800b372:	1961      	adds	r1, r4, r5
 800b374:	42a3      	cmp	r3, r4
 800b376:	6025      	str	r5, [r4, #0]
 800b378:	bf18      	it	ne
 800b37a:	6059      	strne	r1, [r3, #4]
 800b37c:	6863      	ldr	r3, [r4, #4]
 800b37e:	bf08      	it	eq
 800b380:	f8c8 1000 	streq.w	r1, [r8]
 800b384:	5162      	str	r2, [r4, r5]
 800b386:	604b      	str	r3, [r1, #4]
 800b388:	4638      	mov	r0, r7
 800b38a:	f104 060b 	add.w	r6, r4, #11
 800b38e:	f000 f829 	bl	800b3e4 <__malloc_unlock>
 800b392:	f026 0607 	bic.w	r6, r6, #7
 800b396:	1d23      	adds	r3, r4, #4
 800b398:	1af2      	subs	r2, r6, r3
 800b39a:	d0ae      	beq.n	800b2fa <_malloc_r+0x22>
 800b39c:	1b9b      	subs	r3, r3, r6
 800b39e:	50a3      	str	r3, [r4, r2]
 800b3a0:	e7ab      	b.n	800b2fa <_malloc_r+0x22>
 800b3a2:	42a3      	cmp	r3, r4
 800b3a4:	6862      	ldr	r2, [r4, #4]
 800b3a6:	d1dd      	bne.n	800b364 <_malloc_r+0x8c>
 800b3a8:	f8c8 2000 	str.w	r2, [r8]
 800b3ac:	e7ec      	b.n	800b388 <_malloc_r+0xb0>
 800b3ae:	4623      	mov	r3, r4
 800b3b0:	6864      	ldr	r4, [r4, #4]
 800b3b2:	e7ac      	b.n	800b30e <_malloc_r+0x36>
 800b3b4:	4634      	mov	r4, r6
 800b3b6:	6876      	ldr	r6, [r6, #4]
 800b3b8:	e7b4      	b.n	800b324 <_malloc_r+0x4c>
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	e7cc      	b.n	800b358 <_malloc_r+0x80>
 800b3be:	230c      	movs	r3, #12
 800b3c0:	603b      	str	r3, [r7, #0]
 800b3c2:	4638      	mov	r0, r7
 800b3c4:	f000 f80e 	bl	800b3e4 <__malloc_unlock>
 800b3c8:	e797      	b.n	800b2fa <_malloc_r+0x22>
 800b3ca:	6025      	str	r5, [r4, #0]
 800b3cc:	e7dc      	b.n	800b388 <_malloc_r+0xb0>
 800b3ce:	605b      	str	r3, [r3, #4]
 800b3d0:	deff      	udf	#255	; 0xff
 800b3d2:	bf00      	nop
 800b3d4:	2400d39c 	.word	0x2400d39c

0800b3d8 <__malloc_lock>:
 800b3d8:	4801      	ldr	r0, [pc, #4]	; (800b3e0 <__malloc_lock+0x8>)
 800b3da:	f000 b9cf 	b.w	800b77c <__retarget_lock_acquire_recursive>
 800b3de:	bf00      	nop
 800b3e0:	2400d4e4 	.word	0x2400d4e4

0800b3e4 <__malloc_unlock>:
 800b3e4:	4801      	ldr	r0, [pc, #4]	; (800b3ec <__malloc_unlock+0x8>)
 800b3e6:	f000 b9ca 	b.w	800b77e <__retarget_lock_release_recursive>
 800b3ea:	bf00      	nop
 800b3ec:	2400d4e4 	.word	0x2400d4e4

0800b3f0 <realloc>:
 800b3f0:	4b02      	ldr	r3, [pc, #8]	; (800b3fc <realloc+0xc>)
 800b3f2:	460a      	mov	r2, r1
 800b3f4:	4601      	mov	r1, r0
 800b3f6:	6818      	ldr	r0, [r3, #0]
 800b3f8:	f000 b802 	b.w	800b400 <_realloc_r>
 800b3fc:	2400006c 	.word	0x2400006c

0800b400 <_realloc_r>:
 800b400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b404:	4680      	mov	r8, r0
 800b406:	4614      	mov	r4, r2
 800b408:	460e      	mov	r6, r1
 800b40a:	b921      	cbnz	r1, 800b416 <_realloc_r+0x16>
 800b40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b410:	4611      	mov	r1, r2
 800b412:	f7ff bf61 	b.w	800b2d8 <_malloc_r>
 800b416:	b92a      	cbnz	r2, 800b424 <_realloc_r+0x24>
 800b418:	f000 f9c8 	bl	800b7ac <_free_r>
 800b41c:	4625      	mov	r5, r4
 800b41e:	4628      	mov	r0, r5
 800b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b424:	f000 fa0e 	bl	800b844 <_malloc_usable_size_r>
 800b428:	4284      	cmp	r4, r0
 800b42a:	4607      	mov	r7, r0
 800b42c:	d802      	bhi.n	800b434 <_realloc_r+0x34>
 800b42e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b432:	d812      	bhi.n	800b45a <_realloc_r+0x5a>
 800b434:	4621      	mov	r1, r4
 800b436:	4640      	mov	r0, r8
 800b438:	f7ff ff4e 	bl	800b2d8 <_malloc_r>
 800b43c:	4605      	mov	r5, r0
 800b43e:	2800      	cmp	r0, #0
 800b440:	d0ed      	beq.n	800b41e <_realloc_r+0x1e>
 800b442:	42bc      	cmp	r4, r7
 800b444:	4622      	mov	r2, r4
 800b446:	4631      	mov	r1, r6
 800b448:	bf28      	it	cs
 800b44a:	463a      	movcs	r2, r7
 800b44c:	f000 f998 	bl	800b780 <memcpy>
 800b450:	4631      	mov	r1, r6
 800b452:	4640      	mov	r0, r8
 800b454:	f000 f9aa 	bl	800b7ac <_free_r>
 800b458:	e7e1      	b.n	800b41e <_realloc_r+0x1e>
 800b45a:	4635      	mov	r5, r6
 800b45c:	e7df      	b.n	800b41e <_realloc_r+0x1e>
	...

0800b460 <std>:
 800b460:	2300      	movs	r3, #0
 800b462:	b510      	push	{r4, lr}
 800b464:	4604      	mov	r4, r0
 800b466:	e9c0 3300 	strd	r3, r3, [r0]
 800b46a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b46e:	6083      	str	r3, [r0, #8]
 800b470:	8181      	strh	r1, [r0, #12]
 800b472:	6643      	str	r3, [r0, #100]	; 0x64
 800b474:	81c2      	strh	r2, [r0, #14]
 800b476:	6183      	str	r3, [r0, #24]
 800b478:	4619      	mov	r1, r3
 800b47a:	2208      	movs	r2, #8
 800b47c:	305c      	adds	r0, #92	; 0x5c
 800b47e:	f000 f8f4 	bl	800b66a <memset>
 800b482:	4b05      	ldr	r3, [pc, #20]	; (800b498 <std+0x38>)
 800b484:	6263      	str	r3, [r4, #36]	; 0x24
 800b486:	4b05      	ldr	r3, [pc, #20]	; (800b49c <std+0x3c>)
 800b488:	62a3      	str	r3, [r4, #40]	; 0x28
 800b48a:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <std+0x40>)
 800b48c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b48e:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <std+0x44>)
 800b490:	6224      	str	r4, [r4, #32]
 800b492:	6323      	str	r3, [r4, #48]	; 0x30
 800b494:	bd10      	pop	{r4, pc}
 800b496:	bf00      	nop
 800b498:	0800b5e5 	.word	0x0800b5e5
 800b49c:	0800b607 	.word	0x0800b607
 800b4a0:	0800b63f 	.word	0x0800b63f
 800b4a4:	0800b663 	.word	0x0800b663

0800b4a8 <stdio_exit_handler>:
 800b4a8:	4a02      	ldr	r2, [pc, #8]	; (800b4b4 <stdio_exit_handler+0xc>)
 800b4aa:	4903      	ldr	r1, [pc, #12]	; (800b4b8 <stdio_exit_handler+0x10>)
 800b4ac:	4803      	ldr	r0, [pc, #12]	; (800b4bc <stdio_exit_handler+0x14>)
 800b4ae:	f000 b87b 	b.w	800b5a8 <_fwalk_sglue>
 800b4b2:	bf00      	nop
 800b4b4:	24000014 	.word	0x24000014
 800b4b8:	0800bf09 	.word	0x0800bf09
 800b4bc:	24000020 	.word	0x24000020

0800b4c0 <cleanup_stdio>:
 800b4c0:	6841      	ldr	r1, [r0, #4]
 800b4c2:	4b0c      	ldr	r3, [pc, #48]	; (800b4f4 <cleanup_stdio+0x34>)
 800b4c4:	4299      	cmp	r1, r3
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	d001      	beq.n	800b4d0 <cleanup_stdio+0x10>
 800b4cc:	f000 fd1c 	bl	800bf08 <_fflush_r>
 800b4d0:	68a1      	ldr	r1, [r4, #8]
 800b4d2:	4b09      	ldr	r3, [pc, #36]	; (800b4f8 <cleanup_stdio+0x38>)
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	d002      	beq.n	800b4de <cleanup_stdio+0x1e>
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 fd15 	bl	800bf08 <_fflush_r>
 800b4de:	68e1      	ldr	r1, [r4, #12]
 800b4e0:	4b06      	ldr	r3, [pc, #24]	; (800b4fc <cleanup_stdio+0x3c>)
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	d004      	beq.n	800b4f0 <cleanup_stdio+0x30>
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ec:	f000 bd0c 	b.w	800bf08 <_fflush_r>
 800b4f0:	bd10      	pop	{r4, pc}
 800b4f2:	bf00      	nop
 800b4f4:	2400d3a4 	.word	0x2400d3a4
 800b4f8:	2400d40c 	.word	0x2400d40c
 800b4fc:	2400d474 	.word	0x2400d474

0800b500 <global_stdio_init.part.0>:
 800b500:	b510      	push	{r4, lr}
 800b502:	4b0b      	ldr	r3, [pc, #44]	; (800b530 <global_stdio_init.part.0+0x30>)
 800b504:	4c0b      	ldr	r4, [pc, #44]	; (800b534 <global_stdio_init.part.0+0x34>)
 800b506:	4a0c      	ldr	r2, [pc, #48]	; (800b538 <global_stdio_init.part.0+0x38>)
 800b508:	601a      	str	r2, [r3, #0]
 800b50a:	4620      	mov	r0, r4
 800b50c:	2200      	movs	r2, #0
 800b50e:	2104      	movs	r1, #4
 800b510:	f7ff ffa6 	bl	800b460 <std>
 800b514:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b518:	2201      	movs	r2, #1
 800b51a:	2109      	movs	r1, #9
 800b51c:	f7ff ffa0 	bl	800b460 <std>
 800b520:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b524:	2202      	movs	r2, #2
 800b526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b52a:	2112      	movs	r1, #18
 800b52c:	f7ff bf98 	b.w	800b460 <std>
 800b530:	2400d4dc 	.word	0x2400d4dc
 800b534:	2400d3a4 	.word	0x2400d3a4
 800b538:	0800b4a9 	.word	0x0800b4a9

0800b53c <__sfp_lock_acquire>:
 800b53c:	4801      	ldr	r0, [pc, #4]	; (800b544 <__sfp_lock_acquire+0x8>)
 800b53e:	f000 b91d 	b.w	800b77c <__retarget_lock_acquire_recursive>
 800b542:	bf00      	nop
 800b544:	2400d4e5 	.word	0x2400d4e5

0800b548 <__sfp_lock_release>:
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <__sfp_lock_release+0x8>)
 800b54a:	f000 b918 	b.w	800b77e <__retarget_lock_release_recursive>
 800b54e:	bf00      	nop
 800b550:	2400d4e5 	.word	0x2400d4e5

0800b554 <__sinit>:
 800b554:	b510      	push	{r4, lr}
 800b556:	4604      	mov	r4, r0
 800b558:	f7ff fff0 	bl	800b53c <__sfp_lock_acquire>
 800b55c:	6a23      	ldr	r3, [r4, #32]
 800b55e:	b11b      	cbz	r3, 800b568 <__sinit+0x14>
 800b560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b564:	f7ff bff0 	b.w	800b548 <__sfp_lock_release>
 800b568:	4b04      	ldr	r3, [pc, #16]	; (800b57c <__sinit+0x28>)
 800b56a:	6223      	str	r3, [r4, #32]
 800b56c:	4b04      	ldr	r3, [pc, #16]	; (800b580 <__sinit+0x2c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1f5      	bne.n	800b560 <__sinit+0xc>
 800b574:	f7ff ffc4 	bl	800b500 <global_stdio_init.part.0>
 800b578:	e7f2      	b.n	800b560 <__sinit+0xc>
 800b57a:	bf00      	nop
 800b57c:	0800b4c1 	.word	0x0800b4c1
 800b580:	2400d4dc 	.word	0x2400d4dc

0800b584 <fiprintf>:
 800b584:	b40e      	push	{r1, r2, r3}
 800b586:	b503      	push	{r0, r1, lr}
 800b588:	4601      	mov	r1, r0
 800b58a:	ab03      	add	r3, sp, #12
 800b58c:	4805      	ldr	r0, [pc, #20]	; (800b5a4 <fiprintf+0x20>)
 800b58e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b592:	6800      	ldr	r0, [r0, #0]
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	f000 f987 	bl	800b8a8 <_vfiprintf_r>
 800b59a:	b002      	add	sp, #8
 800b59c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a0:	b003      	add	sp, #12
 800b5a2:	4770      	bx	lr
 800b5a4:	2400006c 	.word	0x2400006c

0800b5a8 <_fwalk_sglue>:
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	4607      	mov	r7, r0
 800b5ae:	4688      	mov	r8, r1
 800b5b0:	4614      	mov	r4, r2
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5b8:	f1b9 0901 	subs.w	r9, r9, #1
 800b5bc:	d505      	bpl.n	800b5ca <_fwalk_sglue+0x22>
 800b5be:	6824      	ldr	r4, [r4, #0]
 800b5c0:	2c00      	cmp	r4, #0
 800b5c2:	d1f7      	bne.n	800b5b4 <_fwalk_sglue+0xc>
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ca:	89ab      	ldrh	r3, [r5, #12]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d907      	bls.n	800b5e0 <_fwalk_sglue+0x38>
 800b5d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	d003      	beq.n	800b5e0 <_fwalk_sglue+0x38>
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4638      	mov	r0, r7
 800b5dc:	47c0      	blx	r8
 800b5de:	4306      	orrs	r6, r0
 800b5e0:	3568      	adds	r5, #104	; 0x68
 800b5e2:	e7e9      	b.n	800b5b8 <_fwalk_sglue+0x10>

0800b5e4 <__sread>:
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ec:	f000 f868 	bl	800b6c0 <_read_r>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	bfab      	itete	ge
 800b5f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b5f8:	181b      	addge	r3, r3, r0
 800b5fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5fe:	bfac      	ite	ge
 800b600:	6563      	strge	r3, [r4, #84]	; 0x54
 800b602:	81a3      	strhlt	r3, [r4, #12]
 800b604:	bd10      	pop	{r4, pc}

0800b606 <__swrite>:
 800b606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60a:	461f      	mov	r7, r3
 800b60c:	898b      	ldrh	r3, [r1, #12]
 800b60e:	05db      	lsls	r3, r3, #23
 800b610:	4605      	mov	r5, r0
 800b612:	460c      	mov	r4, r1
 800b614:	4616      	mov	r6, r2
 800b616:	d505      	bpl.n	800b624 <__swrite+0x1e>
 800b618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61c:	2302      	movs	r3, #2
 800b61e:	2200      	movs	r2, #0
 800b620:	f000 f83c 	bl	800b69c <_lseek_r>
 800b624:	89a3      	ldrh	r3, [r4, #12]
 800b626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b62a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b62e:	81a3      	strh	r3, [r4, #12]
 800b630:	4632      	mov	r2, r6
 800b632:	463b      	mov	r3, r7
 800b634:	4628      	mov	r0, r5
 800b636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b63a:	f000 b863 	b.w	800b704 <_write_r>

0800b63e <__sseek>:
 800b63e:	b510      	push	{r4, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b646:	f000 f829 	bl	800b69c <_lseek_r>
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	bf15      	itete	ne
 800b650:	6560      	strne	r0, [r4, #84]	; 0x54
 800b652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b65a:	81a3      	strheq	r3, [r4, #12]
 800b65c:	bf18      	it	ne
 800b65e:	81a3      	strhne	r3, [r4, #12]
 800b660:	bd10      	pop	{r4, pc}

0800b662 <__sclose>:
 800b662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b666:	f000 b809 	b.w	800b67c <_close_r>

0800b66a <memset>:
 800b66a:	4402      	add	r2, r0
 800b66c:	4603      	mov	r3, r0
 800b66e:	4293      	cmp	r3, r2
 800b670:	d100      	bne.n	800b674 <memset+0xa>
 800b672:	4770      	bx	lr
 800b674:	f803 1b01 	strb.w	r1, [r3], #1
 800b678:	e7f9      	b.n	800b66e <memset+0x4>
	...

0800b67c <_close_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4d06      	ldr	r5, [pc, #24]	; (800b698 <_close_r+0x1c>)
 800b680:	2300      	movs	r3, #0
 800b682:	4604      	mov	r4, r0
 800b684:	4608      	mov	r0, r1
 800b686:	602b      	str	r3, [r5, #0]
 800b688:	f7f5 fad9 	bl	8000c3e <_close>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_close_r+0x1a>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_close_r+0x1a>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	2400d4e0 	.word	0x2400d4e0

0800b69c <_lseek_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d07      	ldr	r5, [pc, #28]	; (800b6bc <_lseek_r+0x20>)
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	4608      	mov	r0, r1
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	602a      	str	r2, [r5, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f7f5 faee 	bl	8000c8c <_lseek>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d102      	bne.n	800b6ba <_lseek_r+0x1e>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	b103      	cbz	r3, 800b6ba <_lseek_r+0x1e>
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	2400d4e0 	.word	0x2400d4e0

0800b6c0 <_read_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d07      	ldr	r5, [pc, #28]	; (800b6e0 <_read_r+0x20>)
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	602a      	str	r2, [r5, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f7f5 fa7c 	bl	8000bcc <_read>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_read_r+0x1e>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_read_r+0x1e>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	2400d4e0 	.word	0x2400d4e0

0800b6e4 <_sbrk_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d06      	ldr	r5, [pc, #24]	; (800b700 <_sbrk_r+0x1c>)
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	4608      	mov	r0, r1
 800b6ee:	602b      	str	r3, [r5, #0]
 800b6f0:	f7f5 fada 	bl	8000ca8 <_sbrk>
 800b6f4:	1c43      	adds	r3, r0, #1
 800b6f6:	d102      	bne.n	800b6fe <_sbrk_r+0x1a>
 800b6f8:	682b      	ldr	r3, [r5, #0]
 800b6fa:	b103      	cbz	r3, 800b6fe <_sbrk_r+0x1a>
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	2400d4e0 	.word	0x2400d4e0

0800b704 <_write_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d07      	ldr	r5, [pc, #28]	; (800b724 <_write_r+0x20>)
 800b708:	4604      	mov	r4, r0
 800b70a:	4608      	mov	r0, r1
 800b70c:	4611      	mov	r1, r2
 800b70e:	2200      	movs	r2, #0
 800b710:	602a      	str	r2, [r5, #0]
 800b712:	461a      	mov	r2, r3
 800b714:	f7f5 fa77 	bl	8000c06 <_write>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d102      	bne.n	800b722 <_write_r+0x1e>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	b103      	cbz	r3, 800b722 <_write_r+0x1e>
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	bd38      	pop	{r3, r4, r5, pc}
 800b724:	2400d4e0 	.word	0x2400d4e0

0800b728 <__errno>:
 800b728:	4b01      	ldr	r3, [pc, #4]	; (800b730 <__errno+0x8>)
 800b72a:	6818      	ldr	r0, [r3, #0]
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	2400006c 	.word	0x2400006c

0800b734 <__libc_init_array>:
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	4d0d      	ldr	r5, [pc, #52]	; (800b76c <__libc_init_array+0x38>)
 800b738:	4c0d      	ldr	r4, [pc, #52]	; (800b770 <__libc_init_array+0x3c>)
 800b73a:	1b64      	subs	r4, r4, r5
 800b73c:	10a4      	asrs	r4, r4, #2
 800b73e:	2600      	movs	r6, #0
 800b740:	42a6      	cmp	r6, r4
 800b742:	d109      	bne.n	800b758 <__libc_init_array+0x24>
 800b744:	4d0b      	ldr	r5, [pc, #44]	; (800b774 <__libc_init_array+0x40>)
 800b746:	4c0c      	ldr	r4, [pc, #48]	; (800b778 <__libc_init_array+0x44>)
 800b748:	f001 fc0c 	bl	800cf64 <_init>
 800b74c:	1b64      	subs	r4, r4, r5
 800b74e:	10a4      	asrs	r4, r4, #2
 800b750:	2600      	movs	r6, #0
 800b752:	42a6      	cmp	r6, r4
 800b754:	d105      	bne.n	800b762 <__libc_init_array+0x2e>
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	f855 3b04 	ldr.w	r3, [r5], #4
 800b75c:	4798      	blx	r3
 800b75e:	3601      	adds	r6, #1
 800b760:	e7ee      	b.n	800b740 <__libc_init_array+0xc>
 800b762:	f855 3b04 	ldr.w	r3, [r5], #4
 800b766:	4798      	blx	r3
 800b768:	3601      	adds	r6, #1
 800b76a:	e7f2      	b.n	800b752 <__libc_init_array+0x1e>
 800b76c:	0800ea40 	.word	0x0800ea40
 800b770:	0800ea40 	.word	0x0800ea40
 800b774:	0800ea40 	.word	0x0800ea40
 800b778:	0800ea44 	.word	0x0800ea44

0800b77c <__retarget_lock_acquire_recursive>:
 800b77c:	4770      	bx	lr

0800b77e <__retarget_lock_release_recursive>:
 800b77e:	4770      	bx	lr

0800b780 <memcpy>:
 800b780:	440a      	add	r2, r1
 800b782:	4291      	cmp	r1, r2
 800b784:	f100 33ff 	add.w	r3, r0, #4294967295
 800b788:	d100      	bne.n	800b78c <memcpy+0xc>
 800b78a:	4770      	bx	lr
 800b78c:	b510      	push	{r4, lr}
 800b78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b792:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b796:	4291      	cmp	r1, r2
 800b798:	d1f9      	bne.n	800b78e <memcpy+0xe>
 800b79a:	bd10      	pop	{r4, pc}

0800b79c <abort>:
 800b79c:	b508      	push	{r3, lr}
 800b79e:	2006      	movs	r0, #6
 800b7a0:	f000 fc98 	bl	800c0d4 <raise>
 800b7a4:	2001      	movs	r0, #1
 800b7a6:	f7f5 fa07 	bl	8000bb8 <_exit>
	...

0800b7ac <_free_r>:
 800b7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ae:	2900      	cmp	r1, #0
 800b7b0:	d044      	beq.n	800b83c <_free_r+0x90>
 800b7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7b6:	9001      	str	r0, [sp, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f1a1 0404 	sub.w	r4, r1, #4
 800b7be:	bfb8      	it	lt
 800b7c0:	18e4      	addlt	r4, r4, r3
 800b7c2:	f7ff fe09 	bl	800b3d8 <__malloc_lock>
 800b7c6:	4a1e      	ldr	r2, [pc, #120]	; (800b840 <_free_r+0x94>)
 800b7c8:	9801      	ldr	r0, [sp, #4]
 800b7ca:	6813      	ldr	r3, [r2, #0]
 800b7cc:	b933      	cbnz	r3, 800b7dc <_free_r+0x30>
 800b7ce:	6063      	str	r3, [r4, #4]
 800b7d0:	6014      	str	r4, [r2, #0]
 800b7d2:	b003      	add	sp, #12
 800b7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7d8:	f7ff be04 	b.w	800b3e4 <__malloc_unlock>
 800b7dc:	42a3      	cmp	r3, r4
 800b7de:	d908      	bls.n	800b7f2 <_free_r+0x46>
 800b7e0:	6825      	ldr	r5, [r4, #0]
 800b7e2:	1961      	adds	r1, r4, r5
 800b7e4:	428b      	cmp	r3, r1
 800b7e6:	bf01      	itttt	eq
 800b7e8:	6819      	ldreq	r1, [r3, #0]
 800b7ea:	685b      	ldreq	r3, [r3, #4]
 800b7ec:	1949      	addeq	r1, r1, r5
 800b7ee:	6021      	streq	r1, [r4, #0]
 800b7f0:	e7ed      	b.n	800b7ce <_free_r+0x22>
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	b10b      	cbz	r3, 800b7fc <_free_r+0x50>
 800b7f8:	42a3      	cmp	r3, r4
 800b7fa:	d9fa      	bls.n	800b7f2 <_free_r+0x46>
 800b7fc:	6811      	ldr	r1, [r2, #0]
 800b7fe:	1855      	adds	r5, r2, r1
 800b800:	42a5      	cmp	r5, r4
 800b802:	d10b      	bne.n	800b81c <_free_r+0x70>
 800b804:	6824      	ldr	r4, [r4, #0]
 800b806:	4421      	add	r1, r4
 800b808:	1854      	adds	r4, r2, r1
 800b80a:	42a3      	cmp	r3, r4
 800b80c:	6011      	str	r1, [r2, #0]
 800b80e:	d1e0      	bne.n	800b7d2 <_free_r+0x26>
 800b810:	681c      	ldr	r4, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	6053      	str	r3, [r2, #4]
 800b816:	440c      	add	r4, r1
 800b818:	6014      	str	r4, [r2, #0]
 800b81a:	e7da      	b.n	800b7d2 <_free_r+0x26>
 800b81c:	d902      	bls.n	800b824 <_free_r+0x78>
 800b81e:	230c      	movs	r3, #12
 800b820:	6003      	str	r3, [r0, #0]
 800b822:	e7d6      	b.n	800b7d2 <_free_r+0x26>
 800b824:	6825      	ldr	r5, [r4, #0]
 800b826:	1961      	adds	r1, r4, r5
 800b828:	428b      	cmp	r3, r1
 800b82a:	bf04      	itt	eq
 800b82c:	6819      	ldreq	r1, [r3, #0]
 800b82e:	685b      	ldreq	r3, [r3, #4]
 800b830:	6063      	str	r3, [r4, #4]
 800b832:	bf04      	itt	eq
 800b834:	1949      	addeq	r1, r1, r5
 800b836:	6021      	streq	r1, [r4, #0]
 800b838:	6054      	str	r4, [r2, #4]
 800b83a:	e7ca      	b.n	800b7d2 <_free_r+0x26>
 800b83c:	b003      	add	sp, #12
 800b83e:	bd30      	pop	{r4, r5, pc}
 800b840:	2400d39c 	.word	0x2400d39c

0800b844 <_malloc_usable_size_r>:
 800b844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b848:	1f18      	subs	r0, r3, #4
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bfbc      	itt	lt
 800b84e:	580b      	ldrlt	r3, [r1, r0]
 800b850:	18c0      	addlt	r0, r0, r3
 800b852:	4770      	bx	lr

0800b854 <__sfputc_r>:
 800b854:	6893      	ldr	r3, [r2, #8]
 800b856:	3b01      	subs	r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	b410      	push	{r4}
 800b85c:	6093      	str	r3, [r2, #8]
 800b85e:	da08      	bge.n	800b872 <__sfputc_r+0x1e>
 800b860:	6994      	ldr	r4, [r2, #24]
 800b862:	42a3      	cmp	r3, r4
 800b864:	db01      	blt.n	800b86a <__sfputc_r+0x16>
 800b866:	290a      	cmp	r1, #10
 800b868:	d103      	bne.n	800b872 <__sfputc_r+0x1e>
 800b86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b86e:	f000 bb73 	b.w	800bf58 <__swbuf_r>
 800b872:	6813      	ldr	r3, [r2, #0]
 800b874:	1c58      	adds	r0, r3, #1
 800b876:	6010      	str	r0, [r2, #0]
 800b878:	7019      	strb	r1, [r3, #0]
 800b87a:	4608      	mov	r0, r1
 800b87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <__sfputs_r>:
 800b882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b884:	4606      	mov	r6, r0
 800b886:	460f      	mov	r7, r1
 800b888:	4614      	mov	r4, r2
 800b88a:	18d5      	adds	r5, r2, r3
 800b88c:	42ac      	cmp	r4, r5
 800b88e:	d101      	bne.n	800b894 <__sfputs_r+0x12>
 800b890:	2000      	movs	r0, #0
 800b892:	e007      	b.n	800b8a4 <__sfputs_r+0x22>
 800b894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b898:	463a      	mov	r2, r7
 800b89a:	4630      	mov	r0, r6
 800b89c:	f7ff ffda 	bl	800b854 <__sfputc_r>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d1f3      	bne.n	800b88c <__sfputs_r+0xa>
 800b8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8a8 <_vfiprintf_r>:
 800b8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ac:	460d      	mov	r5, r1
 800b8ae:	b09d      	sub	sp, #116	; 0x74
 800b8b0:	4614      	mov	r4, r2
 800b8b2:	4698      	mov	r8, r3
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	b118      	cbz	r0, 800b8c0 <_vfiprintf_r+0x18>
 800b8b8:	6a03      	ldr	r3, [r0, #32]
 800b8ba:	b90b      	cbnz	r3, 800b8c0 <_vfiprintf_r+0x18>
 800b8bc:	f7ff fe4a 	bl	800b554 <__sinit>
 800b8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c2:	07d9      	lsls	r1, r3, #31
 800b8c4:	d405      	bmi.n	800b8d2 <_vfiprintf_r+0x2a>
 800b8c6:	89ab      	ldrh	r3, [r5, #12]
 800b8c8:	059a      	lsls	r2, r3, #22
 800b8ca:	d402      	bmi.n	800b8d2 <_vfiprintf_r+0x2a>
 800b8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ce:	f7ff ff55 	bl	800b77c <__retarget_lock_acquire_recursive>
 800b8d2:	89ab      	ldrh	r3, [r5, #12]
 800b8d4:	071b      	lsls	r3, r3, #28
 800b8d6:	d501      	bpl.n	800b8dc <_vfiprintf_r+0x34>
 800b8d8:	692b      	ldr	r3, [r5, #16]
 800b8da:	b99b      	cbnz	r3, 800b904 <_vfiprintf_r+0x5c>
 800b8dc:	4629      	mov	r1, r5
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f000 fb78 	bl	800bfd4 <__swsetup_r>
 800b8e4:	b170      	cbz	r0, 800b904 <_vfiprintf_r+0x5c>
 800b8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8e8:	07dc      	lsls	r4, r3, #31
 800b8ea:	d504      	bpl.n	800b8f6 <_vfiprintf_r+0x4e>
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f0:	b01d      	add	sp, #116	; 0x74
 800b8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f6:	89ab      	ldrh	r3, [r5, #12]
 800b8f8:	0598      	lsls	r0, r3, #22
 800b8fa:	d4f7      	bmi.n	800b8ec <_vfiprintf_r+0x44>
 800b8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8fe:	f7ff ff3e 	bl	800b77e <__retarget_lock_release_recursive>
 800b902:	e7f3      	b.n	800b8ec <_vfiprintf_r+0x44>
 800b904:	2300      	movs	r3, #0
 800b906:	9309      	str	r3, [sp, #36]	; 0x24
 800b908:	2320      	movs	r3, #32
 800b90a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b90e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b912:	2330      	movs	r3, #48	; 0x30
 800b914:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bac8 <_vfiprintf_r+0x220>
 800b918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b91c:	f04f 0901 	mov.w	r9, #1
 800b920:	4623      	mov	r3, r4
 800b922:	469a      	mov	sl, r3
 800b924:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b928:	b10a      	cbz	r2, 800b92e <_vfiprintf_r+0x86>
 800b92a:	2a25      	cmp	r2, #37	; 0x25
 800b92c:	d1f9      	bne.n	800b922 <_vfiprintf_r+0x7a>
 800b92e:	ebba 0b04 	subs.w	fp, sl, r4
 800b932:	d00b      	beq.n	800b94c <_vfiprintf_r+0xa4>
 800b934:	465b      	mov	r3, fp
 800b936:	4622      	mov	r2, r4
 800b938:	4629      	mov	r1, r5
 800b93a:	4630      	mov	r0, r6
 800b93c:	f7ff ffa1 	bl	800b882 <__sfputs_r>
 800b940:	3001      	adds	r0, #1
 800b942:	f000 80a9 	beq.w	800ba98 <_vfiprintf_r+0x1f0>
 800b946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b948:	445a      	add	r2, fp
 800b94a:	9209      	str	r2, [sp, #36]	; 0x24
 800b94c:	f89a 3000 	ldrb.w	r3, [sl]
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 80a1 	beq.w	800ba98 <_vfiprintf_r+0x1f0>
 800b956:	2300      	movs	r3, #0
 800b958:	f04f 32ff 	mov.w	r2, #4294967295
 800b95c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b960:	f10a 0a01 	add.w	sl, sl, #1
 800b964:	9304      	str	r3, [sp, #16]
 800b966:	9307      	str	r3, [sp, #28]
 800b968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b96c:	931a      	str	r3, [sp, #104]	; 0x68
 800b96e:	4654      	mov	r4, sl
 800b970:	2205      	movs	r2, #5
 800b972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b976:	4854      	ldr	r0, [pc, #336]	; (800bac8 <_vfiprintf_r+0x220>)
 800b978:	f7f4 fcb2 	bl	80002e0 <memchr>
 800b97c:	9a04      	ldr	r2, [sp, #16]
 800b97e:	b9d8      	cbnz	r0, 800b9b8 <_vfiprintf_r+0x110>
 800b980:	06d1      	lsls	r1, r2, #27
 800b982:	bf44      	itt	mi
 800b984:	2320      	movmi	r3, #32
 800b986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b98a:	0713      	lsls	r3, r2, #28
 800b98c:	bf44      	itt	mi
 800b98e:	232b      	movmi	r3, #43	; 0x2b
 800b990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b994:	f89a 3000 	ldrb.w	r3, [sl]
 800b998:	2b2a      	cmp	r3, #42	; 0x2a
 800b99a:	d015      	beq.n	800b9c8 <_vfiprintf_r+0x120>
 800b99c:	9a07      	ldr	r2, [sp, #28]
 800b99e:	4654      	mov	r4, sl
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	f04f 0c0a 	mov.w	ip, #10
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ac:	3b30      	subs	r3, #48	; 0x30
 800b9ae:	2b09      	cmp	r3, #9
 800b9b0:	d94d      	bls.n	800ba4e <_vfiprintf_r+0x1a6>
 800b9b2:	b1b0      	cbz	r0, 800b9e2 <_vfiprintf_r+0x13a>
 800b9b4:	9207      	str	r2, [sp, #28]
 800b9b6:	e014      	b.n	800b9e2 <_vfiprintf_r+0x13a>
 800b9b8:	eba0 0308 	sub.w	r3, r0, r8
 800b9bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	9304      	str	r3, [sp, #16]
 800b9c4:	46a2      	mov	sl, r4
 800b9c6:	e7d2      	b.n	800b96e <_vfiprintf_r+0xc6>
 800b9c8:	9b03      	ldr	r3, [sp, #12]
 800b9ca:	1d19      	adds	r1, r3, #4
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	9103      	str	r1, [sp, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bfbb      	ittet	lt
 800b9d4:	425b      	neglt	r3, r3
 800b9d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b9da:	9307      	strge	r3, [sp, #28]
 800b9dc:	9307      	strlt	r3, [sp, #28]
 800b9de:	bfb8      	it	lt
 800b9e0:	9204      	strlt	r2, [sp, #16]
 800b9e2:	7823      	ldrb	r3, [r4, #0]
 800b9e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9e6:	d10c      	bne.n	800ba02 <_vfiprintf_r+0x15a>
 800b9e8:	7863      	ldrb	r3, [r4, #1]
 800b9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ec:	d134      	bne.n	800ba58 <_vfiprintf_r+0x1b0>
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	1d1a      	adds	r2, r3, #4
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	9203      	str	r2, [sp, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	bfb8      	it	lt
 800b9fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9fe:	3402      	adds	r4, #2
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bad8 <_vfiprintf_r+0x230>
 800ba06:	7821      	ldrb	r1, [r4, #0]
 800ba08:	2203      	movs	r2, #3
 800ba0a:	4650      	mov	r0, sl
 800ba0c:	f7f4 fc68 	bl	80002e0 <memchr>
 800ba10:	b138      	cbz	r0, 800ba22 <_vfiprintf_r+0x17a>
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	eba0 000a 	sub.w	r0, r0, sl
 800ba18:	2240      	movs	r2, #64	; 0x40
 800ba1a:	4082      	lsls	r2, r0
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	3401      	adds	r4, #1
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba26:	4829      	ldr	r0, [pc, #164]	; (800bacc <_vfiprintf_r+0x224>)
 800ba28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba2c:	2206      	movs	r2, #6
 800ba2e:	f7f4 fc57 	bl	80002e0 <memchr>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d03f      	beq.n	800bab6 <_vfiprintf_r+0x20e>
 800ba36:	4b26      	ldr	r3, [pc, #152]	; (800bad0 <_vfiprintf_r+0x228>)
 800ba38:	bb1b      	cbnz	r3, 800ba82 <_vfiprintf_r+0x1da>
 800ba3a:	9b03      	ldr	r3, [sp, #12]
 800ba3c:	3307      	adds	r3, #7
 800ba3e:	f023 0307 	bic.w	r3, r3, #7
 800ba42:	3308      	adds	r3, #8
 800ba44:	9303      	str	r3, [sp, #12]
 800ba46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba48:	443b      	add	r3, r7
 800ba4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba4c:	e768      	b.n	800b920 <_vfiprintf_r+0x78>
 800ba4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba52:	460c      	mov	r4, r1
 800ba54:	2001      	movs	r0, #1
 800ba56:	e7a6      	b.n	800b9a6 <_vfiprintf_r+0xfe>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	3401      	adds	r4, #1
 800ba5c:	9305      	str	r3, [sp, #20]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	f04f 0c0a 	mov.w	ip, #10
 800ba64:	4620      	mov	r0, r4
 800ba66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba6a:	3a30      	subs	r2, #48	; 0x30
 800ba6c:	2a09      	cmp	r2, #9
 800ba6e:	d903      	bls.n	800ba78 <_vfiprintf_r+0x1d0>
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d0c6      	beq.n	800ba02 <_vfiprintf_r+0x15a>
 800ba74:	9105      	str	r1, [sp, #20]
 800ba76:	e7c4      	b.n	800ba02 <_vfiprintf_r+0x15a>
 800ba78:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e7f0      	b.n	800ba64 <_vfiprintf_r+0x1bc>
 800ba82:	ab03      	add	r3, sp, #12
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	462a      	mov	r2, r5
 800ba88:	4b12      	ldr	r3, [pc, #72]	; (800bad4 <_vfiprintf_r+0x22c>)
 800ba8a:	a904      	add	r1, sp, #16
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	f3af 8000 	nop.w
 800ba92:	4607      	mov	r7, r0
 800ba94:	1c78      	adds	r0, r7, #1
 800ba96:	d1d6      	bne.n	800ba46 <_vfiprintf_r+0x19e>
 800ba98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba9a:	07d9      	lsls	r1, r3, #31
 800ba9c:	d405      	bmi.n	800baaa <_vfiprintf_r+0x202>
 800ba9e:	89ab      	ldrh	r3, [r5, #12]
 800baa0:	059a      	lsls	r2, r3, #22
 800baa2:	d402      	bmi.n	800baaa <_vfiprintf_r+0x202>
 800baa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baa6:	f7ff fe6a 	bl	800b77e <__retarget_lock_release_recursive>
 800baaa:	89ab      	ldrh	r3, [r5, #12]
 800baac:	065b      	lsls	r3, r3, #25
 800baae:	f53f af1d 	bmi.w	800b8ec <_vfiprintf_r+0x44>
 800bab2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bab4:	e71c      	b.n	800b8f0 <_vfiprintf_r+0x48>
 800bab6:	ab03      	add	r3, sp, #12
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	462a      	mov	r2, r5
 800babc:	4b05      	ldr	r3, [pc, #20]	; (800bad4 <_vfiprintf_r+0x22c>)
 800babe:	a904      	add	r1, sp, #16
 800bac0:	4630      	mov	r0, r6
 800bac2:	f000 f879 	bl	800bbb8 <_printf_i>
 800bac6:	e7e4      	b.n	800ba92 <_vfiprintf_r+0x1ea>
 800bac8:	0800d0e4 	.word	0x0800d0e4
 800bacc:	0800d0ee 	.word	0x0800d0ee
 800bad0:	00000000 	.word	0x00000000
 800bad4:	0800b883 	.word	0x0800b883
 800bad8:	0800d0ea 	.word	0x0800d0ea

0800badc <_printf_common>:
 800badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae0:	4616      	mov	r6, r2
 800bae2:	4699      	mov	r9, r3
 800bae4:	688a      	ldr	r2, [r1, #8]
 800bae6:	690b      	ldr	r3, [r1, #16]
 800bae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800baec:	4293      	cmp	r3, r2
 800baee:	bfb8      	it	lt
 800baf0:	4613      	movlt	r3, r2
 800baf2:	6033      	str	r3, [r6, #0]
 800baf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baf8:	4607      	mov	r7, r0
 800bafa:	460c      	mov	r4, r1
 800bafc:	b10a      	cbz	r2, 800bb02 <_printf_common+0x26>
 800bafe:	3301      	adds	r3, #1
 800bb00:	6033      	str	r3, [r6, #0]
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	0699      	lsls	r1, r3, #26
 800bb06:	bf42      	ittt	mi
 800bb08:	6833      	ldrmi	r3, [r6, #0]
 800bb0a:	3302      	addmi	r3, #2
 800bb0c:	6033      	strmi	r3, [r6, #0]
 800bb0e:	6825      	ldr	r5, [r4, #0]
 800bb10:	f015 0506 	ands.w	r5, r5, #6
 800bb14:	d106      	bne.n	800bb24 <_printf_common+0x48>
 800bb16:	f104 0a19 	add.w	sl, r4, #25
 800bb1a:	68e3      	ldr	r3, [r4, #12]
 800bb1c:	6832      	ldr	r2, [r6, #0]
 800bb1e:	1a9b      	subs	r3, r3, r2
 800bb20:	42ab      	cmp	r3, r5
 800bb22:	dc26      	bgt.n	800bb72 <_printf_common+0x96>
 800bb24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb28:	1e13      	subs	r3, r2, #0
 800bb2a:	6822      	ldr	r2, [r4, #0]
 800bb2c:	bf18      	it	ne
 800bb2e:	2301      	movne	r3, #1
 800bb30:	0692      	lsls	r2, r2, #26
 800bb32:	d42b      	bmi.n	800bb8c <_printf_common+0xb0>
 800bb34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb38:	4649      	mov	r1, r9
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	47c0      	blx	r8
 800bb3e:	3001      	adds	r0, #1
 800bb40:	d01e      	beq.n	800bb80 <_printf_common+0xa4>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	6922      	ldr	r2, [r4, #16]
 800bb46:	f003 0306 	and.w	r3, r3, #6
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	bf02      	ittt	eq
 800bb4e:	68e5      	ldreq	r5, [r4, #12]
 800bb50:	6833      	ldreq	r3, [r6, #0]
 800bb52:	1aed      	subeq	r5, r5, r3
 800bb54:	68a3      	ldr	r3, [r4, #8]
 800bb56:	bf0c      	ite	eq
 800bb58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb5c:	2500      	movne	r5, #0
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	bfc4      	itt	gt
 800bb62:	1a9b      	subgt	r3, r3, r2
 800bb64:	18ed      	addgt	r5, r5, r3
 800bb66:	2600      	movs	r6, #0
 800bb68:	341a      	adds	r4, #26
 800bb6a:	42b5      	cmp	r5, r6
 800bb6c:	d11a      	bne.n	800bba4 <_printf_common+0xc8>
 800bb6e:	2000      	movs	r0, #0
 800bb70:	e008      	b.n	800bb84 <_printf_common+0xa8>
 800bb72:	2301      	movs	r3, #1
 800bb74:	4652      	mov	r2, sl
 800bb76:	4649      	mov	r1, r9
 800bb78:	4638      	mov	r0, r7
 800bb7a:	47c0      	blx	r8
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d103      	bne.n	800bb88 <_printf_common+0xac>
 800bb80:	f04f 30ff 	mov.w	r0, #4294967295
 800bb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb88:	3501      	adds	r5, #1
 800bb8a:	e7c6      	b.n	800bb1a <_printf_common+0x3e>
 800bb8c:	18e1      	adds	r1, r4, r3
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	2030      	movs	r0, #48	; 0x30
 800bb92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb96:	4422      	add	r2, r4
 800bb98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bba0:	3302      	adds	r3, #2
 800bba2:	e7c7      	b.n	800bb34 <_printf_common+0x58>
 800bba4:	2301      	movs	r3, #1
 800bba6:	4622      	mov	r2, r4
 800bba8:	4649      	mov	r1, r9
 800bbaa:	4638      	mov	r0, r7
 800bbac:	47c0      	blx	r8
 800bbae:	3001      	adds	r0, #1
 800bbb0:	d0e6      	beq.n	800bb80 <_printf_common+0xa4>
 800bbb2:	3601      	adds	r6, #1
 800bbb4:	e7d9      	b.n	800bb6a <_printf_common+0x8e>
	...

0800bbb8 <_printf_i>:
 800bbb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbbc:	7e0f      	ldrb	r7, [r1, #24]
 800bbbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbc0:	2f78      	cmp	r7, #120	; 0x78
 800bbc2:	4691      	mov	r9, r2
 800bbc4:	4680      	mov	r8, r0
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	469a      	mov	sl, r3
 800bbca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbce:	d807      	bhi.n	800bbe0 <_printf_i+0x28>
 800bbd0:	2f62      	cmp	r7, #98	; 0x62
 800bbd2:	d80a      	bhi.n	800bbea <_printf_i+0x32>
 800bbd4:	2f00      	cmp	r7, #0
 800bbd6:	f000 80d4 	beq.w	800bd82 <_printf_i+0x1ca>
 800bbda:	2f58      	cmp	r7, #88	; 0x58
 800bbdc:	f000 80c0 	beq.w	800bd60 <_printf_i+0x1a8>
 800bbe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbe8:	e03a      	b.n	800bc60 <_printf_i+0xa8>
 800bbea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbee:	2b15      	cmp	r3, #21
 800bbf0:	d8f6      	bhi.n	800bbe0 <_printf_i+0x28>
 800bbf2:	a101      	add	r1, pc, #4	; (adr r1, 800bbf8 <_printf_i+0x40>)
 800bbf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbf8:	0800bc51 	.word	0x0800bc51
 800bbfc:	0800bc65 	.word	0x0800bc65
 800bc00:	0800bbe1 	.word	0x0800bbe1
 800bc04:	0800bbe1 	.word	0x0800bbe1
 800bc08:	0800bbe1 	.word	0x0800bbe1
 800bc0c:	0800bbe1 	.word	0x0800bbe1
 800bc10:	0800bc65 	.word	0x0800bc65
 800bc14:	0800bbe1 	.word	0x0800bbe1
 800bc18:	0800bbe1 	.word	0x0800bbe1
 800bc1c:	0800bbe1 	.word	0x0800bbe1
 800bc20:	0800bbe1 	.word	0x0800bbe1
 800bc24:	0800bd69 	.word	0x0800bd69
 800bc28:	0800bc91 	.word	0x0800bc91
 800bc2c:	0800bd23 	.word	0x0800bd23
 800bc30:	0800bbe1 	.word	0x0800bbe1
 800bc34:	0800bbe1 	.word	0x0800bbe1
 800bc38:	0800bd8b 	.word	0x0800bd8b
 800bc3c:	0800bbe1 	.word	0x0800bbe1
 800bc40:	0800bc91 	.word	0x0800bc91
 800bc44:	0800bbe1 	.word	0x0800bbe1
 800bc48:	0800bbe1 	.word	0x0800bbe1
 800bc4c:	0800bd2b 	.word	0x0800bd2b
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	1d1a      	adds	r2, r3, #4
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	602a      	str	r2, [r5, #0]
 800bc58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc60:	2301      	movs	r3, #1
 800bc62:	e09f      	b.n	800bda4 <_printf_i+0x1ec>
 800bc64:	6820      	ldr	r0, [r4, #0]
 800bc66:	682b      	ldr	r3, [r5, #0]
 800bc68:	0607      	lsls	r7, r0, #24
 800bc6a:	f103 0104 	add.w	r1, r3, #4
 800bc6e:	6029      	str	r1, [r5, #0]
 800bc70:	d501      	bpl.n	800bc76 <_printf_i+0xbe>
 800bc72:	681e      	ldr	r6, [r3, #0]
 800bc74:	e003      	b.n	800bc7e <_printf_i+0xc6>
 800bc76:	0646      	lsls	r6, r0, #25
 800bc78:	d5fb      	bpl.n	800bc72 <_printf_i+0xba>
 800bc7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bc7e:	2e00      	cmp	r6, #0
 800bc80:	da03      	bge.n	800bc8a <_printf_i+0xd2>
 800bc82:	232d      	movs	r3, #45	; 0x2d
 800bc84:	4276      	negs	r6, r6
 800bc86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc8a:	485a      	ldr	r0, [pc, #360]	; (800bdf4 <_printf_i+0x23c>)
 800bc8c:	230a      	movs	r3, #10
 800bc8e:	e012      	b.n	800bcb6 <_printf_i+0xfe>
 800bc90:	682b      	ldr	r3, [r5, #0]
 800bc92:	6820      	ldr	r0, [r4, #0]
 800bc94:	1d19      	adds	r1, r3, #4
 800bc96:	6029      	str	r1, [r5, #0]
 800bc98:	0605      	lsls	r5, r0, #24
 800bc9a:	d501      	bpl.n	800bca0 <_printf_i+0xe8>
 800bc9c:	681e      	ldr	r6, [r3, #0]
 800bc9e:	e002      	b.n	800bca6 <_printf_i+0xee>
 800bca0:	0641      	lsls	r1, r0, #25
 800bca2:	d5fb      	bpl.n	800bc9c <_printf_i+0xe4>
 800bca4:	881e      	ldrh	r6, [r3, #0]
 800bca6:	4853      	ldr	r0, [pc, #332]	; (800bdf4 <_printf_i+0x23c>)
 800bca8:	2f6f      	cmp	r7, #111	; 0x6f
 800bcaa:	bf0c      	ite	eq
 800bcac:	2308      	moveq	r3, #8
 800bcae:	230a      	movne	r3, #10
 800bcb0:	2100      	movs	r1, #0
 800bcb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcb6:	6865      	ldr	r5, [r4, #4]
 800bcb8:	60a5      	str	r5, [r4, #8]
 800bcba:	2d00      	cmp	r5, #0
 800bcbc:	bfa2      	ittt	ge
 800bcbe:	6821      	ldrge	r1, [r4, #0]
 800bcc0:	f021 0104 	bicge.w	r1, r1, #4
 800bcc4:	6021      	strge	r1, [r4, #0]
 800bcc6:	b90e      	cbnz	r6, 800bccc <_printf_i+0x114>
 800bcc8:	2d00      	cmp	r5, #0
 800bcca:	d04b      	beq.n	800bd64 <_printf_i+0x1ac>
 800bccc:	4615      	mov	r5, r2
 800bcce:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcd2:	fb03 6711 	mls	r7, r3, r1, r6
 800bcd6:	5dc7      	ldrb	r7, [r0, r7]
 800bcd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcdc:	4637      	mov	r7, r6
 800bcde:	42bb      	cmp	r3, r7
 800bce0:	460e      	mov	r6, r1
 800bce2:	d9f4      	bls.n	800bcce <_printf_i+0x116>
 800bce4:	2b08      	cmp	r3, #8
 800bce6:	d10b      	bne.n	800bd00 <_printf_i+0x148>
 800bce8:	6823      	ldr	r3, [r4, #0]
 800bcea:	07de      	lsls	r6, r3, #31
 800bcec:	d508      	bpl.n	800bd00 <_printf_i+0x148>
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	6861      	ldr	r1, [r4, #4]
 800bcf2:	4299      	cmp	r1, r3
 800bcf4:	bfde      	ittt	le
 800bcf6:	2330      	movle	r3, #48	; 0x30
 800bcf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bcfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd00:	1b52      	subs	r2, r2, r5
 800bd02:	6122      	str	r2, [r4, #16]
 800bd04:	f8cd a000 	str.w	sl, [sp]
 800bd08:	464b      	mov	r3, r9
 800bd0a:	aa03      	add	r2, sp, #12
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4640      	mov	r0, r8
 800bd10:	f7ff fee4 	bl	800badc <_printf_common>
 800bd14:	3001      	adds	r0, #1
 800bd16:	d14a      	bne.n	800bdae <_printf_i+0x1f6>
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1c:	b004      	add	sp, #16
 800bd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	f043 0320 	orr.w	r3, r3, #32
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	4833      	ldr	r0, [pc, #204]	; (800bdf8 <_printf_i+0x240>)
 800bd2c:	2778      	movs	r7, #120	; 0x78
 800bd2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	6829      	ldr	r1, [r5, #0]
 800bd36:	061f      	lsls	r7, r3, #24
 800bd38:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd3c:	d402      	bmi.n	800bd44 <_printf_i+0x18c>
 800bd3e:	065f      	lsls	r7, r3, #25
 800bd40:	bf48      	it	mi
 800bd42:	b2b6      	uxthmi	r6, r6
 800bd44:	07df      	lsls	r7, r3, #31
 800bd46:	bf48      	it	mi
 800bd48:	f043 0320 	orrmi.w	r3, r3, #32
 800bd4c:	6029      	str	r1, [r5, #0]
 800bd4e:	bf48      	it	mi
 800bd50:	6023      	strmi	r3, [r4, #0]
 800bd52:	b91e      	cbnz	r6, 800bd5c <_printf_i+0x1a4>
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	f023 0320 	bic.w	r3, r3, #32
 800bd5a:	6023      	str	r3, [r4, #0]
 800bd5c:	2310      	movs	r3, #16
 800bd5e:	e7a7      	b.n	800bcb0 <_printf_i+0xf8>
 800bd60:	4824      	ldr	r0, [pc, #144]	; (800bdf4 <_printf_i+0x23c>)
 800bd62:	e7e4      	b.n	800bd2e <_printf_i+0x176>
 800bd64:	4615      	mov	r5, r2
 800bd66:	e7bd      	b.n	800bce4 <_printf_i+0x12c>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	6826      	ldr	r6, [r4, #0]
 800bd6c:	6961      	ldr	r1, [r4, #20]
 800bd6e:	1d18      	adds	r0, r3, #4
 800bd70:	6028      	str	r0, [r5, #0]
 800bd72:	0635      	lsls	r5, r6, #24
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	d501      	bpl.n	800bd7c <_printf_i+0x1c4>
 800bd78:	6019      	str	r1, [r3, #0]
 800bd7a:	e002      	b.n	800bd82 <_printf_i+0x1ca>
 800bd7c:	0670      	lsls	r0, r6, #25
 800bd7e:	d5fb      	bpl.n	800bd78 <_printf_i+0x1c0>
 800bd80:	8019      	strh	r1, [r3, #0]
 800bd82:	2300      	movs	r3, #0
 800bd84:	6123      	str	r3, [r4, #16]
 800bd86:	4615      	mov	r5, r2
 800bd88:	e7bc      	b.n	800bd04 <_printf_i+0x14c>
 800bd8a:	682b      	ldr	r3, [r5, #0]
 800bd8c:	1d1a      	adds	r2, r3, #4
 800bd8e:	602a      	str	r2, [r5, #0]
 800bd90:	681d      	ldr	r5, [r3, #0]
 800bd92:	6862      	ldr	r2, [r4, #4]
 800bd94:	2100      	movs	r1, #0
 800bd96:	4628      	mov	r0, r5
 800bd98:	f7f4 faa2 	bl	80002e0 <memchr>
 800bd9c:	b108      	cbz	r0, 800bda2 <_printf_i+0x1ea>
 800bd9e:	1b40      	subs	r0, r0, r5
 800bda0:	6060      	str	r0, [r4, #4]
 800bda2:	6863      	ldr	r3, [r4, #4]
 800bda4:	6123      	str	r3, [r4, #16]
 800bda6:	2300      	movs	r3, #0
 800bda8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdac:	e7aa      	b.n	800bd04 <_printf_i+0x14c>
 800bdae:	6923      	ldr	r3, [r4, #16]
 800bdb0:	462a      	mov	r2, r5
 800bdb2:	4649      	mov	r1, r9
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	47d0      	blx	sl
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d0ad      	beq.n	800bd18 <_printf_i+0x160>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	079b      	lsls	r3, r3, #30
 800bdc0:	d413      	bmi.n	800bdea <_printf_i+0x232>
 800bdc2:	68e0      	ldr	r0, [r4, #12]
 800bdc4:	9b03      	ldr	r3, [sp, #12]
 800bdc6:	4298      	cmp	r0, r3
 800bdc8:	bfb8      	it	lt
 800bdca:	4618      	movlt	r0, r3
 800bdcc:	e7a6      	b.n	800bd1c <_printf_i+0x164>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	4632      	mov	r2, r6
 800bdd2:	4649      	mov	r1, r9
 800bdd4:	4640      	mov	r0, r8
 800bdd6:	47d0      	blx	sl
 800bdd8:	3001      	adds	r0, #1
 800bdda:	d09d      	beq.n	800bd18 <_printf_i+0x160>
 800bddc:	3501      	adds	r5, #1
 800bdde:	68e3      	ldr	r3, [r4, #12]
 800bde0:	9903      	ldr	r1, [sp, #12]
 800bde2:	1a5b      	subs	r3, r3, r1
 800bde4:	42ab      	cmp	r3, r5
 800bde6:	dcf2      	bgt.n	800bdce <_printf_i+0x216>
 800bde8:	e7eb      	b.n	800bdc2 <_printf_i+0x20a>
 800bdea:	2500      	movs	r5, #0
 800bdec:	f104 0619 	add.w	r6, r4, #25
 800bdf0:	e7f5      	b.n	800bdde <_printf_i+0x226>
 800bdf2:	bf00      	nop
 800bdf4:	0800d0f5 	.word	0x0800d0f5
 800bdf8:	0800d106 	.word	0x0800d106

0800bdfc <__sflush_r>:
 800bdfc:	898a      	ldrh	r2, [r1, #12]
 800bdfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be02:	4605      	mov	r5, r0
 800be04:	0710      	lsls	r0, r2, #28
 800be06:	460c      	mov	r4, r1
 800be08:	d458      	bmi.n	800bebc <__sflush_r+0xc0>
 800be0a:	684b      	ldr	r3, [r1, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dc05      	bgt.n	800be1c <__sflush_r+0x20>
 800be10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be12:	2b00      	cmp	r3, #0
 800be14:	dc02      	bgt.n	800be1c <__sflush_r+0x20>
 800be16:	2000      	movs	r0, #0
 800be18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be1e:	2e00      	cmp	r6, #0
 800be20:	d0f9      	beq.n	800be16 <__sflush_r+0x1a>
 800be22:	2300      	movs	r3, #0
 800be24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be28:	682f      	ldr	r7, [r5, #0]
 800be2a:	6a21      	ldr	r1, [r4, #32]
 800be2c:	602b      	str	r3, [r5, #0]
 800be2e:	d032      	beq.n	800be96 <__sflush_r+0x9a>
 800be30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	075a      	lsls	r2, r3, #29
 800be36:	d505      	bpl.n	800be44 <__sflush_r+0x48>
 800be38:	6863      	ldr	r3, [r4, #4]
 800be3a:	1ac0      	subs	r0, r0, r3
 800be3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be3e:	b10b      	cbz	r3, 800be44 <__sflush_r+0x48>
 800be40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be42:	1ac0      	subs	r0, r0, r3
 800be44:	2300      	movs	r3, #0
 800be46:	4602      	mov	r2, r0
 800be48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be4a:	6a21      	ldr	r1, [r4, #32]
 800be4c:	4628      	mov	r0, r5
 800be4e:	47b0      	blx	r6
 800be50:	1c43      	adds	r3, r0, #1
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	d106      	bne.n	800be64 <__sflush_r+0x68>
 800be56:	6829      	ldr	r1, [r5, #0]
 800be58:	291d      	cmp	r1, #29
 800be5a:	d82b      	bhi.n	800beb4 <__sflush_r+0xb8>
 800be5c:	4a29      	ldr	r2, [pc, #164]	; (800bf04 <__sflush_r+0x108>)
 800be5e:	410a      	asrs	r2, r1
 800be60:	07d6      	lsls	r6, r2, #31
 800be62:	d427      	bmi.n	800beb4 <__sflush_r+0xb8>
 800be64:	2200      	movs	r2, #0
 800be66:	6062      	str	r2, [r4, #4]
 800be68:	04d9      	lsls	r1, r3, #19
 800be6a:	6922      	ldr	r2, [r4, #16]
 800be6c:	6022      	str	r2, [r4, #0]
 800be6e:	d504      	bpl.n	800be7a <__sflush_r+0x7e>
 800be70:	1c42      	adds	r2, r0, #1
 800be72:	d101      	bne.n	800be78 <__sflush_r+0x7c>
 800be74:	682b      	ldr	r3, [r5, #0]
 800be76:	b903      	cbnz	r3, 800be7a <__sflush_r+0x7e>
 800be78:	6560      	str	r0, [r4, #84]	; 0x54
 800be7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be7c:	602f      	str	r7, [r5, #0]
 800be7e:	2900      	cmp	r1, #0
 800be80:	d0c9      	beq.n	800be16 <__sflush_r+0x1a>
 800be82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be86:	4299      	cmp	r1, r3
 800be88:	d002      	beq.n	800be90 <__sflush_r+0x94>
 800be8a:	4628      	mov	r0, r5
 800be8c:	f7ff fc8e 	bl	800b7ac <_free_r>
 800be90:	2000      	movs	r0, #0
 800be92:	6360      	str	r0, [r4, #52]	; 0x34
 800be94:	e7c0      	b.n	800be18 <__sflush_r+0x1c>
 800be96:	2301      	movs	r3, #1
 800be98:	4628      	mov	r0, r5
 800be9a:	47b0      	blx	r6
 800be9c:	1c41      	adds	r1, r0, #1
 800be9e:	d1c8      	bne.n	800be32 <__sflush_r+0x36>
 800bea0:	682b      	ldr	r3, [r5, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d0c5      	beq.n	800be32 <__sflush_r+0x36>
 800bea6:	2b1d      	cmp	r3, #29
 800bea8:	d001      	beq.n	800beae <__sflush_r+0xb2>
 800beaa:	2b16      	cmp	r3, #22
 800beac:	d101      	bne.n	800beb2 <__sflush_r+0xb6>
 800beae:	602f      	str	r7, [r5, #0]
 800beb0:	e7b1      	b.n	800be16 <__sflush_r+0x1a>
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beb8:	81a3      	strh	r3, [r4, #12]
 800beba:	e7ad      	b.n	800be18 <__sflush_r+0x1c>
 800bebc:	690f      	ldr	r7, [r1, #16]
 800bebe:	2f00      	cmp	r7, #0
 800bec0:	d0a9      	beq.n	800be16 <__sflush_r+0x1a>
 800bec2:	0793      	lsls	r3, r2, #30
 800bec4:	680e      	ldr	r6, [r1, #0]
 800bec6:	bf08      	it	eq
 800bec8:	694b      	ldreq	r3, [r1, #20]
 800beca:	600f      	str	r7, [r1, #0]
 800becc:	bf18      	it	ne
 800bece:	2300      	movne	r3, #0
 800bed0:	eba6 0807 	sub.w	r8, r6, r7
 800bed4:	608b      	str	r3, [r1, #8]
 800bed6:	f1b8 0f00 	cmp.w	r8, #0
 800beda:	dd9c      	ble.n	800be16 <__sflush_r+0x1a>
 800bedc:	6a21      	ldr	r1, [r4, #32]
 800bede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bee0:	4643      	mov	r3, r8
 800bee2:	463a      	mov	r2, r7
 800bee4:	4628      	mov	r0, r5
 800bee6:	47b0      	blx	r6
 800bee8:	2800      	cmp	r0, #0
 800beea:	dc06      	bgt.n	800befa <__sflush_r+0xfe>
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bef2:	81a3      	strh	r3, [r4, #12]
 800bef4:	f04f 30ff 	mov.w	r0, #4294967295
 800bef8:	e78e      	b.n	800be18 <__sflush_r+0x1c>
 800befa:	4407      	add	r7, r0
 800befc:	eba8 0800 	sub.w	r8, r8, r0
 800bf00:	e7e9      	b.n	800bed6 <__sflush_r+0xda>
 800bf02:	bf00      	nop
 800bf04:	dfbffffe 	.word	0xdfbffffe

0800bf08 <_fflush_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	690b      	ldr	r3, [r1, #16]
 800bf0c:	4605      	mov	r5, r0
 800bf0e:	460c      	mov	r4, r1
 800bf10:	b913      	cbnz	r3, 800bf18 <_fflush_r+0x10>
 800bf12:	2500      	movs	r5, #0
 800bf14:	4628      	mov	r0, r5
 800bf16:	bd38      	pop	{r3, r4, r5, pc}
 800bf18:	b118      	cbz	r0, 800bf22 <_fflush_r+0x1a>
 800bf1a:	6a03      	ldr	r3, [r0, #32]
 800bf1c:	b90b      	cbnz	r3, 800bf22 <_fflush_r+0x1a>
 800bf1e:	f7ff fb19 	bl	800b554 <__sinit>
 800bf22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d0f3      	beq.n	800bf12 <_fflush_r+0xa>
 800bf2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf2c:	07d0      	lsls	r0, r2, #31
 800bf2e:	d404      	bmi.n	800bf3a <_fflush_r+0x32>
 800bf30:	0599      	lsls	r1, r3, #22
 800bf32:	d402      	bmi.n	800bf3a <_fflush_r+0x32>
 800bf34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf36:	f7ff fc21 	bl	800b77c <__retarget_lock_acquire_recursive>
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	f7ff ff5d 	bl	800bdfc <__sflush_r>
 800bf42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf44:	07da      	lsls	r2, r3, #31
 800bf46:	4605      	mov	r5, r0
 800bf48:	d4e4      	bmi.n	800bf14 <_fflush_r+0xc>
 800bf4a:	89a3      	ldrh	r3, [r4, #12]
 800bf4c:	059b      	lsls	r3, r3, #22
 800bf4e:	d4e1      	bmi.n	800bf14 <_fflush_r+0xc>
 800bf50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf52:	f7ff fc14 	bl	800b77e <__retarget_lock_release_recursive>
 800bf56:	e7dd      	b.n	800bf14 <_fflush_r+0xc>

0800bf58 <__swbuf_r>:
 800bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5a:	460e      	mov	r6, r1
 800bf5c:	4614      	mov	r4, r2
 800bf5e:	4605      	mov	r5, r0
 800bf60:	b118      	cbz	r0, 800bf6a <__swbuf_r+0x12>
 800bf62:	6a03      	ldr	r3, [r0, #32]
 800bf64:	b90b      	cbnz	r3, 800bf6a <__swbuf_r+0x12>
 800bf66:	f7ff faf5 	bl	800b554 <__sinit>
 800bf6a:	69a3      	ldr	r3, [r4, #24]
 800bf6c:	60a3      	str	r3, [r4, #8]
 800bf6e:	89a3      	ldrh	r3, [r4, #12]
 800bf70:	071a      	lsls	r2, r3, #28
 800bf72:	d525      	bpl.n	800bfc0 <__swbuf_r+0x68>
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	b31b      	cbz	r3, 800bfc0 <__swbuf_r+0x68>
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	6922      	ldr	r2, [r4, #16]
 800bf7c:	1a98      	subs	r0, r3, r2
 800bf7e:	6963      	ldr	r3, [r4, #20]
 800bf80:	b2f6      	uxtb	r6, r6
 800bf82:	4283      	cmp	r3, r0
 800bf84:	4637      	mov	r7, r6
 800bf86:	dc04      	bgt.n	800bf92 <__swbuf_r+0x3a>
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f7ff ffbc 	bl	800bf08 <_fflush_r>
 800bf90:	b9e0      	cbnz	r0, 800bfcc <__swbuf_r+0x74>
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	3b01      	subs	r3, #1
 800bf96:	60a3      	str	r3, [r4, #8]
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	701e      	strb	r6, [r3, #0]
 800bfa0:	6962      	ldr	r2, [r4, #20]
 800bfa2:	1c43      	adds	r3, r0, #1
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d004      	beq.n	800bfb2 <__swbuf_r+0x5a>
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	07db      	lsls	r3, r3, #31
 800bfac:	d506      	bpl.n	800bfbc <__swbuf_r+0x64>
 800bfae:	2e0a      	cmp	r6, #10
 800bfb0:	d104      	bne.n	800bfbc <__swbuf_r+0x64>
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f7ff ffa7 	bl	800bf08 <_fflush_r>
 800bfba:	b938      	cbnz	r0, 800bfcc <__swbuf_r+0x74>
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f000 f806 	bl	800bfd4 <__swsetup_r>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d0d5      	beq.n	800bf78 <__swbuf_r+0x20>
 800bfcc:	f04f 37ff 	mov.w	r7, #4294967295
 800bfd0:	e7f4      	b.n	800bfbc <__swbuf_r+0x64>
	...

0800bfd4 <__swsetup_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4b2a      	ldr	r3, [pc, #168]	; (800c080 <__swsetup_r+0xac>)
 800bfd8:	4605      	mov	r5, r0
 800bfda:	6818      	ldr	r0, [r3, #0]
 800bfdc:	460c      	mov	r4, r1
 800bfde:	b118      	cbz	r0, 800bfe8 <__swsetup_r+0x14>
 800bfe0:	6a03      	ldr	r3, [r0, #32]
 800bfe2:	b90b      	cbnz	r3, 800bfe8 <__swsetup_r+0x14>
 800bfe4:	f7ff fab6 	bl	800b554 <__sinit>
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfee:	0718      	lsls	r0, r3, #28
 800bff0:	d422      	bmi.n	800c038 <__swsetup_r+0x64>
 800bff2:	06d9      	lsls	r1, r3, #27
 800bff4:	d407      	bmi.n	800c006 <__swsetup_r+0x32>
 800bff6:	2309      	movs	r3, #9
 800bff8:	602b      	str	r3, [r5, #0]
 800bffa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bffe:	81a3      	strh	r3, [r4, #12]
 800c000:	f04f 30ff 	mov.w	r0, #4294967295
 800c004:	e034      	b.n	800c070 <__swsetup_r+0x9c>
 800c006:	0758      	lsls	r0, r3, #29
 800c008:	d512      	bpl.n	800c030 <__swsetup_r+0x5c>
 800c00a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c00c:	b141      	cbz	r1, 800c020 <__swsetup_r+0x4c>
 800c00e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c012:	4299      	cmp	r1, r3
 800c014:	d002      	beq.n	800c01c <__swsetup_r+0x48>
 800c016:	4628      	mov	r0, r5
 800c018:	f7ff fbc8 	bl	800b7ac <_free_r>
 800c01c:	2300      	movs	r3, #0
 800c01e:	6363      	str	r3, [r4, #52]	; 0x34
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c026:	81a3      	strh	r3, [r4, #12]
 800c028:	2300      	movs	r3, #0
 800c02a:	6063      	str	r3, [r4, #4]
 800c02c:	6923      	ldr	r3, [r4, #16]
 800c02e:	6023      	str	r3, [r4, #0]
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	f043 0308 	orr.w	r3, r3, #8
 800c036:	81a3      	strh	r3, [r4, #12]
 800c038:	6923      	ldr	r3, [r4, #16]
 800c03a:	b94b      	cbnz	r3, 800c050 <__swsetup_r+0x7c>
 800c03c:	89a3      	ldrh	r3, [r4, #12]
 800c03e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c046:	d003      	beq.n	800c050 <__swsetup_r+0x7c>
 800c048:	4621      	mov	r1, r4
 800c04a:	4628      	mov	r0, r5
 800c04c:	f000 f884 	bl	800c158 <__smakebuf_r>
 800c050:	89a0      	ldrh	r0, [r4, #12]
 800c052:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c056:	f010 0301 	ands.w	r3, r0, #1
 800c05a:	d00a      	beq.n	800c072 <__swsetup_r+0x9e>
 800c05c:	2300      	movs	r3, #0
 800c05e:	60a3      	str	r3, [r4, #8]
 800c060:	6963      	ldr	r3, [r4, #20]
 800c062:	425b      	negs	r3, r3
 800c064:	61a3      	str	r3, [r4, #24]
 800c066:	6923      	ldr	r3, [r4, #16]
 800c068:	b943      	cbnz	r3, 800c07c <__swsetup_r+0xa8>
 800c06a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c06e:	d1c4      	bne.n	800bffa <__swsetup_r+0x26>
 800c070:	bd38      	pop	{r3, r4, r5, pc}
 800c072:	0781      	lsls	r1, r0, #30
 800c074:	bf58      	it	pl
 800c076:	6963      	ldrpl	r3, [r4, #20]
 800c078:	60a3      	str	r3, [r4, #8]
 800c07a:	e7f4      	b.n	800c066 <__swsetup_r+0x92>
 800c07c:	2000      	movs	r0, #0
 800c07e:	e7f7      	b.n	800c070 <__swsetup_r+0x9c>
 800c080:	2400006c 	.word	0x2400006c

0800c084 <_raise_r>:
 800c084:	291f      	cmp	r1, #31
 800c086:	b538      	push	{r3, r4, r5, lr}
 800c088:	4604      	mov	r4, r0
 800c08a:	460d      	mov	r5, r1
 800c08c:	d904      	bls.n	800c098 <_raise_r+0x14>
 800c08e:	2316      	movs	r3, #22
 800c090:	6003      	str	r3, [r0, #0]
 800c092:	f04f 30ff 	mov.w	r0, #4294967295
 800c096:	bd38      	pop	{r3, r4, r5, pc}
 800c098:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c09a:	b112      	cbz	r2, 800c0a2 <_raise_r+0x1e>
 800c09c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0a0:	b94b      	cbnz	r3, 800c0b6 <_raise_r+0x32>
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 f830 	bl	800c108 <_getpid_r>
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0b2:	f000 b817 	b.w	800c0e4 <_kill_r>
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d00a      	beq.n	800c0d0 <_raise_r+0x4c>
 800c0ba:	1c59      	adds	r1, r3, #1
 800c0bc:	d103      	bne.n	800c0c6 <_raise_r+0x42>
 800c0be:	2316      	movs	r3, #22
 800c0c0:	6003      	str	r3, [r0, #0]
 800c0c2:	2001      	movs	r0, #1
 800c0c4:	e7e7      	b.n	800c096 <_raise_r+0x12>
 800c0c6:	2400      	movs	r4, #0
 800c0c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	4798      	blx	r3
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	e7e0      	b.n	800c096 <_raise_r+0x12>

0800c0d4 <raise>:
 800c0d4:	4b02      	ldr	r3, [pc, #8]	; (800c0e0 <raise+0xc>)
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	6818      	ldr	r0, [r3, #0]
 800c0da:	f7ff bfd3 	b.w	800c084 <_raise_r>
 800c0de:	bf00      	nop
 800c0e0:	2400006c 	.word	0x2400006c

0800c0e4 <_kill_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	4d07      	ldr	r5, [pc, #28]	; (800c104 <_kill_r+0x20>)
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	4608      	mov	r0, r1
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	602b      	str	r3, [r5, #0]
 800c0f2:	f7f4 fd51 	bl	8000b98 <_kill>
 800c0f6:	1c43      	adds	r3, r0, #1
 800c0f8:	d102      	bne.n	800c100 <_kill_r+0x1c>
 800c0fa:	682b      	ldr	r3, [r5, #0]
 800c0fc:	b103      	cbz	r3, 800c100 <_kill_r+0x1c>
 800c0fe:	6023      	str	r3, [r4, #0]
 800c100:	bd38      	pop	{r3, r4, r5, pc}
 800c102:	bf00      	nop
 800c104:	2400d4e0 	.word	0x2400d4e0

0800c108 <_getpid_r>:
 800c108:	f7f4 bd3e 	b.w	8000b88 <_getpid>

0800c10c <__swhatbuf_r>:
 800c10c:	b570      	push	{r4, r5, r6, lr}
 800c10e:	460c      	mov	r4, r1
 800c110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c114:	2900      	cmp	r1, #0
 800c116:	b096      	sub	sp, #88	; 0x58
 800c118:	4615      	mov	r5, r2
 800c11a:	461e      	mov	r6, r3
 800c11c:	da0d      	bge.n	800c13a <__swhatbuf_r+0x2e>
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c124:	f04f 0100 	mov.w	r1, #0
 800c128:	bf0c      	ite	eq
 800c12a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c12e:	2340      	movne	r3, #64	; 0x40
 800c130:	2000      	movs	r0, #0
 800c132:	6031      	str	r1, [r6, #0]
 800c134:	602b      	str	r3, [r5, #0]
 800c136:	b016      	add	sp, #88	; 0x58
 800c138:	bd70      	pop	{r4, r5, r6, pc}
 800c13a:	466a      	mov	r2, sp
 800c13c:	f000 f848 	bl	800c1d0 <_fstat_r>
 800c140:	2800      	cmp	r0, #0
 800c142:	dbec      	blt.n	800c11e <__swhatbuf_r+0x12>
 800c144:	9901      	ldr	r1, [sp, #4]
 800c146:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c14a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c14e:	4259      	negs	r1, r3
 800c150:	4159      	adcs	r1, r3
 800c152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c156:	e7eb      	b.n	800c130 <__swhatbuf_r+0x24>

0800c158 <__smakebuf_r>:
 800c158:	898b      	ldrh	r3, [r1, #12]
 800c15a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c15c:	079d      	lsls	r5, r3, #30
 800c15e:	4606      	mov	r6, r0
 800c160:	460c      	mov	r4, r1
 800c162:	d507      	bpl.n	800c174 <__smakebuf_r+0x1c>
 800c164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	6123      	str	r3, [r4, #16]
 800c16c:	2301      	movs	r3, #1
 800c16e:	6163      	str	r3, [r4, #20]
 800c170:	b002      	add	sp, #8
 800c172:	bd70      	pop	{r4, r5, r6, pc}
 800c174:	ab01      	add	r3, sp, #4
 800c176:	466a      	mov	r2, sp
 800c178:	f7ff ffc8 	bl	800c10c <__swhatbuf_r>
 800c17c:	9900      	ldr	r1, [sp, #0]
 800c17e:	4605      	mov	r5, r0
 800c180:	4630      	mov	r0, r6
 800c182:	f7ff f8a9 	bl	800b2d8 <_malloc_r>
 800c186:	b948      	cbnz	r0, 800c19c <__smakebuf_r+0x44>
 800c188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c18c:	059a      	lsls	r2, r3, #22
 800c18e:	d4ef      	bmi.n	800c170 <__smakebuf_r+0x18>
 800c190:	f023 0303 	bic.w	r3, r3, #3
 800c194:	f043 0302 	orr.w	r3, r3, #2
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	e7e3      	b.n	800c164 <__smakebuf_r+0xc>
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	6020      	str	r0, [r4, #0]
 800c1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1a4:	81a3      	strh	r3, [r4, #12]
 800c1a6:	9b00      	ldr	r3, [sp, #0]
 800c1a8:	6163      	str	r3, [r4, #20]
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	6120      	str	r0, [r4, #16]
 800c1ae:	b15b      	cbz	r3, 800c1c8 <__smakebuf_r+0x70>
 800c1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f000 f81d 	bl	800c1f4 <_isatty_r>
 800c1ba:	b128      	cbz	r0, 800c1c8 <__smakebuf_r+0x70>
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	f023 0303 	bic.w	r3, r3, #3
 800c1c2:	f043 0301 	orr.w	r3, r3, #1
 800c1c6:	81a3      	strh	r3, [r4, #12]
 800c1c8:	89a3      	ldrh	r3, [r4, #12]
 800c1ca:	431d      	orrs	r5, r3
 800c1cc:	81a5      	strh	r5, [r4, #12]
 800c1ce:	e7cf      	b.n	800c170 <__smakebuf_r+0x18>

0800c1d0 <_fstat_r>:
 800c1d0:	b538      	push	{r3, r4, r5, lr}
 800c1d2:	4d07      	ldr	r5, [pc, #28]	; (800c1f0 <_fstat_r+0x20>)
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	4608      	mov	r0, r1
 800c1da:	4611      	mov	r1, r2
 800c1dc:	602b      	str	r3, [r5, #0]
 800c1de:	f7f4 fd3a 	bl	8000c56 <_fstat>
 800c1e2:	1c43      	adds	r3, r0, #1
 800c1e4:	d102      	bne.n	800c1ec <_fstat_r+0x1c>
 800c1e6:	682b      	ldr	r3, [r5, #0]
 800c1e8:	b103      	cbz	r3, 800c1ec <_fstat_r+0x1c>
 800c1ea:	6023      	str	r3, [r4, #0]
 800c1ec:	bd38      	pop	{r3, r4, r5, pc}
 800c1ee:	bf00      	nop
 800c1f0:	2400d4e0 	.word	0x2400d4e0

0800c1f4 <_isatty_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d06      	ldr	r5, [pc, #24]	; (800c210 <_isatty_r+0x1c>)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	602b      	str	r3, [r5, #0]
 800c200:	f7f4 fd39 	bl	8000c76 <_isatty>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d102      	bne.n	800c20e <_isatty_r+0x1a>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	b103      	cbz	r3, 800c20e <_isatty_r+0x1a>
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	2400d4e0 	.word	0x2400d4e0

0800c214 <atan2>:
 800c214:	f000 bde4 	b.w	800cde0 <__ieee754_atan2>

0800c218 <sqrt>:
 800c218:	b508      	push	{r3, lr}
 800c21a:	ed2d 8b04 	vpush	{d8-d9}
 800c21e:	eeb0 8b40 	vmov.f64	d8, d0
 800c222:	f000 fdd9 	bl	800cdd8 <__ieee754_sqrt>
 800c226:	eeb4 8b48 	vcmp.f64	d8, d8
 800c22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22e:	d60c      	bvs.n	800c24a <sqrt+0x32>
 800c230:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800c250 <sqrt+0x38>
 800c234:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800c238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23c:	d505      	bpl.n	800c24a <sqrt+0x32>
 800c23e:	f7ff fa73 	bl	800b728 <__errno>
 800c242:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800c246:	2321      	movs	r3, #33	; 0x21
 800c248:	6003      	str	r3, [r0, #0]
 800c24a:	ecbd 8b04 	vpop	{d8-d9}
 800c24e:	bd08      	pop	{r3, pc}
	...

0800c258 <atan>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	eeb0 7b40 	vmov.f64	d7, d0
 800c25e:	ee17 5a90 	vmov	r5, s15
 800c262:	4b73      	ldr	r3, [pc, #460]	; (800c430 <atan+0x1d8>)
 800c264:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c268:	429c      	cmp	r4, r3
 800c26a:	dd13      	ble.n	800c294 <atan+0x3c>
 800c26c:	4b71      	ldr	r3, [pc, #452]	; (800c434 <atan+0x1dc>)
 800c26e:	429c      	cmp	r4, r3
 800c270:	dc03      	bgt.n	800c27a <atan+0x22>
 800c272:	d107      	bne.n	800c284 <atan+0x2c>
 800c274:	ee10 3a10 	vmov	r3, s0
 800c278:	b123      	cbz	r3, 800c284 <atan+0x2c>
 800c27a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c27e:	eeb0 0b47 	vmov.f64	d0, d7
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 800c3c0 <atan+0x168>
 800c288:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 800c3c8 <atan+0x170>
 800c28c:	2d00      	cmp	r5, #0
 800c28e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800c292:	e7f4      	b.n	800c27e <atan+0x26>
 800c294:	4b68      	ldr	r3, [pc, #416]	; (800c438 <atan+0x1e0>)
 800c296:	429c      	cmp	r4, r3
 800c298:	dc11      	bgt.n	800c2be <atan+0x66>
 800c29a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c29e:	429c      	cmp	r4, r3
 800c2a0:	dc0a      	bgt.n	800c2b8 <atan+0x60>
 800c2a2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800c2a6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800c3d0 <atan+0x178>
 800c2aa:	ee30 6b06 	vadd.f64	d6, d0, d6
 800c2ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b6:	dce2      	bgt.n	800c27e <atan+0x26>
 800c2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2bc:	e013      	b.n	800c2e6 <atan+0x8e>
 800c2be:	f000 f8c5 	bl	800c44c <fabs>
 800c2c2:	4b5e      	ldr	r3, [pc, #376]	; (800c43c <atan+0x1e4>)
 800c2c4:	429c      	cmp	r4, r3
 800c2c6:	dc4f      	bgt.n	800c368 <atan+0x110>
 800c2c8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c2cc:	429c      	cmp	r4, r3
 800c2ce:	dc41      	bgt.n	800c354 <atan+0xfc>
 800c2d0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c2d4:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800c2d8:	2300      	movs	r3, #0
 800c2da:	eea0 5b07 	vfma.f64	d5, d0, d7
 800c2de:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c2e2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800c2e6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800c3d8 <atan+0x180>
 800c2ea:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c2ee:	ee24 5b04 	vmul.f64	d5, d4, d4
 800c2f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800c3e0 <atan+0x188>
 800c2f6:	eea5 3b06 	vfma.f64	d3, d5, d6
 800c2fa:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800c3e8 <atan+0x190>
 800c2fe:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c302:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800c3f0 <atan+0x198>
 800c306:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c30a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800c3f8 <atan+0x1a0>
 800c30e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c312:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800c400 <atan+0x1a8>
 800c316:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800c408 <atan+0x1b0>
 800c31a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c31e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800c410 <atan+0x1b8>
 800c322:	eea5 2b06 	vfma.f64	d2, d5, d6
 800c326:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800c418 <atan+0x1c0>
 800c32a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c32e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800c420 <atan+0x1c8>
 800c332:	eea6 2b05 	vfma.f64	d2, d6, d5
 800c336:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800c428 <atan+0x1d0>
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c340:	ee26 6b05 	vmul.f64	d6, d6, d5
 800c344:	eea3 6b04 	vfma.f64	d6, d3, d4
 800c348:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c34c:	d121      	bne.n	800c392 <atan+0x13a>
 800c34e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c352:	e794      	b.n	800c27e <atan+0x26>
 800c354:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800c358:	2301      	movs	r3, #1
 800c35a:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c35e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c362:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800c366:	e7be      	b.n	800c2e6 <atan+0x8e>
 800c368:	4b35      	ldr	r3, [pc, #212]	; (800c440 <atan+0x1e8>)
 800c36a:	429c      	cmp	r4, r3
 800c36c:	da0b      	bge.n	800c386 <atan+0x12e>
 800c36e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c372:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c376:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c37a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c37e:	2302      	movs	r3, #2
 800c380:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c384:	e7af      	b.n	800c2e6 <atan+0x8e>
 800c386:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c38a:	2303      	movs	r3, #3
 800c38c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c390:	e7a9      	b.n	800c2e6 <atan+0x8e>
 800c392:	4a2c      	ldr	r2, [pc, #176]	; (800c444 <atan+0x1ec>)
 800c394:	492c      	ldr	r1, [pc, #176]	; (800c448 <atan+0x1f0>)
 800c396:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c39a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c39e:	ed93 5b00 	vldr	d5, [r3]
 800c3a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c3a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c3aa:	ed92 7b00 	vldr	d7, [r2]
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c3b4:	bfb8      	it	lt
 800c3b6:	eeb1 7b47 	vneglt.f64	d7, d7
 800c3ba:	e760      	b.n	800c27e <atan+0x26>
 800c3bc:	f3af 8000 	nop.w
 800c3c0:	54442d18 	.word	0x54442d18
 800c3c4:	3ff921fb 	.word	0x3ff921fb
 800c3c8:	54442d18 	.word	0x54442d18
 800c3cc:	bff921fb 	.word	0xbff921fb
 800c3d0:	8800759c 	.word	0x8800759c
 800c3d4:	7e37e43c 	.word	0x7e37e43c
 800c3d8:	e322da11 	.word	0xe322da11
 800c3dc:	3f90ad3a 	.word	0x3f90ad3a
 800c3e0:	24760deb 	.word	0x24760deb
 800c3e4:	3fa97b4b 	.word	0x3fa97b4b
 800c3e8:	a0d03d51 	.word	0xa0d03d51
 800c3ec:	3fb10d66 	.word	0x3fb10d66
 800c3f0:	c54c206e 	.word	0xc54c206e
 800c3f4:	3fb745cd 	.word	0x3fb745cd
 800c3f8:	920083ff 	.word	0x920083ff
 800c3fc:	3fc24924 	.word	0x3fc24924
 800c400:	5555550d 	.word	0x5555550d
 800c404:	3fd55555 	.word	0x3fd55555
 800c408:	52defd9a 	.word	0x52defd9a
 800c40c:	bfadde2d 	.word	0xbfadde2d
 800c410:	2c6a6c2f 	.word	0x2c6a6c2f
 800c414:	bfa2b444 	.word	0xbfa2b444
 800c418:	af749a6d 	.word	0xaf749a6d
 800c41c:	bfb3b0f2 	.word	0xbfb3b0f2
 800c420:	fe231671 	.word	0xfe231671
 800c424:	bfbc71c6 	.word	0xbfbc71c6
 800c428:	9998ebc4 	.word	0x9998ebc4
 800c42c:	bfc99999 	.word	0xbfc99999
 800c430:	440fffff 	.word	0x440fffff
 800c434:	7ff00000 	.word	0x7ff00000
 800c438:	3fdbffff 	.word	0x3fdbffff
 800c43c:	3ff2ffff 	.word	0x3ff2ffff
 800c440:	40038000 	.word	0x40038000
 800c444:	0800d118 	.word	0x0800d118
 800c448:	0800d138 	.word	0x0800d138

0800c44c <fabs>:
 800c44c:	ec51 0b10 	vmov	r0, r1, d0
 800c450:	ee10 2a10 	vmov	r2, s0
 800c454:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c458:	ec43 2b10 	vmov	d0, r2, r3
 800c45c:	4770      	bx	lr
	...

0800c460 <tanh>:
 800c460:	b538      	push	{r3, r4, r5, lr}
 800c462:	eeb0 6b40 	vmov.f64	d6, d0
 800c466:	ee16 5a90 	vmov	r5, s13
 800c46a:	4a2e      	ldr	r2, [pc, #184]	; (800c524 <tanh+0xc4>)
 800c46c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c470:	4293      	cmp	r3, r2
 800c472:	ed2d 8b02 	vpush	{d8}
 800c476:	dd0f      	ble.n	800c498 <tanh+0x38>
 800c478:	4b2b      	ldr	r3, [pc, #172]	; (800c528 <tanh+0xc8>)
 800c47a:	ed93 4b00 	vldr	d4, [r3]
 800c47e:	ed93 0b00 	vldr	d0, [r3]
 800c482:	ee84 7b06 	vdiv.f64	d7, d4, d6
 800c486:	2d00      	cmp	r5, #0
 800c488:	bfac      	ite	ge
 800c48a:	ee37 0b00 	vaddge.f64	d0, d7, d0
 800c48e:	ee37 0b40 	vsublt.f64	d0, d7, d0
 800c492:	ecbd 8b02 	vpop	{d8}
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	4a24      	ldr	r2, [pc, #144]	; (800c52c <tanh+0xcc>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	dc39      	bgt.n	800c512 <tanh+0xb2>
 800c49e:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 800c4a2:	da07      	bge.n	800c4b4 <tanh+0x54>
 800c4a4:	4b20      	ldr	r3, [pc, #128]	; (800c528 <tanh+0xc8>)
 800c4a6:	ed93 7b00 	vldr	d7, [r3]
 800c4aa:	ee37 7b00 	vadd.f64	d7, d7, d0
 800c4ae:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c4b2:	e7ee      	b.n	800c492 <tanh+0x32>
 800c4b4:	4a1e      	ldr	r2, [pc, #120]	; (800c530 <tanh+0xd0>)
 800c4b6:	4c1f      	ldr	r4, [pc, #124]	; (800c534 <tanh+0xd4>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	dd19      	ble.n	800c4f0 <tanh+0x90>
 800c4bc:	f7ff ffc6 	bl	800c44c <fabs>
 800c4c0:	ed94 7b00 	vldr	d7, [r4]
 800c4c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c4c8:	f000 f83a 	bl	800c540 <expm1>
 800c4cc:	4b16      	ldr	r3, [pc, #88]	; (800c528 <tanh+0xc8>)
 800c4ce:	ed93 7b00 	vldr	d7, [r3]
 800c4d2:	ed94 5b00 	vldr	d5, [r4]
 800c4d6:	ed94 6b00 	vldr	d6, [r4]
 800c4da:	ee36 0b00 	vadd.f64	d0, d6, d0
 800c4de:	ee85 6b00 	vdiv.f64	d6, d5, d0
 800c4e2:	ee37 0b46 	vsub.f64	d0, d7, d6
 800c4e6:	2d00      	cmp	r5, #0
 800c4e8:	bfb8      	it	lt
 800c4ea:	eeb1 0b40 	vneglt.f64	d0, d0
 800c4ee:	e7d0      	b.n	800c492 <tanh+0x32>
 800c4f0:	ed94 8b00 	vldr	d8, [r4]
 800c4f4:	f7ff ffaa 	bl	800c44c <fabs>
 800c4f8:	ee28 0b40 	vnmul.f64	d0, d8, d0
 800c4fc:	f000 f820 	bl	800c540 <expm1>
 800c500:	ed94 7b00 	vldr	d7, [r4]
 800c504:	eeb1 6b40 	vneg.f64	d6, d0
 800c508:	ee37 7b00 	vadd.f64	d7, d7, d0
 800c50c:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800c510:	e7e9      	b.n	800c4e6 <tanh+0x86>
 800c512:	4b05      	ldr	r3, [pc, #20]	; (800c528 <tanh+0xc8>)
 800c514:	ed93 0b00 	vldr	d0, [r3]
 800c518:	4b07      	ldr	r3, [pc, #28]	; (800c538 <tanh+0xd8>)
 800c51a:	ed93 7b00 	vldr	d7, [r3]
 800c51e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c522:	e7e0      	b.n	800c4e6 <tanh+0x86>
 800c524:	7fefffff 	.word	0x7fefffff
 800c528:	24000070 	.word	0x24000070
 800c52c:	4035ffff 	.word	0x4035ffff
 800c530:	3fefffff 	.word	0x3fefffff
 800c534:	24000080 	.word	0x24000080
 800c538:	24000078 	.word	0x24000078
 800c53c:	00000000 	.word	0x00000000

0800c540 <expm1>:
 800c540:	b410      	push	{r4}
 800c542:	ee10 2a90 	vmov	r2, s1
 800c546:	49a4      	ldr	r1, [pc, #656]	; (800c7d8 <expm1+0x298>)
 800c548:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c54c:	428b      	cmp	r3, r1
 800c54e:	ed2d 8b02 	vpush	{d8}
 800c552:	d934      	bls.n	800c5be <expm1+0x7e>
 800c554:	49a1      	ldr	r1, [pc, #644]	; (800c7dc <expm1+0x29c>)
 800c556:	428b      	cmp	r3, r1
 800c558:	d923      	bls.n	800c5a2 <expm1+0x62>
 800c55a:	49a1      	ldr	r1, [pc, #644]	; (800c7e0 <expm1+0x2a0>)
 800c55c:	428b      	cmp	r3, r1
 800c55e:	d912      	bls.n	800c586 <expm1+0x46>
 800c560:	ee10 1a10 	vmov	r1, s0
 800c564:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800c568:	430b      	orrs	r3, r1
 800c56a:	d006      	beq.n	800c57a <expm1+0x3a>
 800c56c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c570:	ecbd 8b02 	vpop	{d8}
 800c574:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c578:	4770      	bx	lr
 800c57a:	2a00      	cmp	r2, #0
 800c57c:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800c580:	fe20 0b07 	vselge.f64	d0, d0, d7
 800c584:	e7f4      	b.n	800c570 <expm1+0x30>
 800c586:	ed9f 7b7c 	vldr	d7, [pc, #496]	; 800c778 <expm1+0x238>
 800c58a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c592:	dd06      	ble.n	800c5a2 <expm1+0x62>
 800c594:	ecbd 8b02 	vpop	{d8}
 800c598:	2000      	movs	r0, #0
 800c59a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c59e:	f000 b94b 	b.w	800c838 <__math_oflow>
 800c5a2:	2a00      	cmp	r2, #0
 800c5a4:	da59      	bge.n	800c65a <expm1+0x11a>
 800c5a6:	ed9f 7b76 	vldr	d7, [pc, #472]	; 800c780 <expm1+0x240>
 800c5aa:	ee30 7b07 	vadd.f64	d7, d0, d7
 800c5ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b6:	d550      	bpl.n	800c65a <expm1+0x11a>
 800c5b8:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800c5bc:	e7d8      	b.n	800c570 <expm1+0x30>
 800c5be:	4989      	ldr	r1, [pc, #548]	; (800c7e4 <expm1+0x2a4>)
 800c5c0:	428b      	cmp	r3, r1
 800c5c2:	d966      	bls.n	800c692 <expm1+0x152>
 800c5c4:	4988      	ldr	r1, [pc, #544]	; (800c7e8 <expm1+0x2a8>)
 800c5c6:	428b      	cmp	r3, r1
 800c5c8:	d847      	bhi.n	800c65a <expm1+0x11a>
 800c5ca:	2a00      	cmp	r2, #0
 800c5cc:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 800c788 <expm1+0x248>
 800c5d0:	db3c      	blt.n	800c64c <expm1+0x10c>
 800c5d2:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c5d6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 800c790 <expm1+0x250>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	ee37 0b46 	vsub.f64	d0, d7, d6
 800c5e0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800c5e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c5e8:	ed9f 4b6b 	vldr	d4, [pc, #428]	; 800c798 <expm1+0x258>
 800c5ec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c5f0:	ee20 8b03 	vmul.f64	d8, d0, d3
 800c5f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800c7a0 <expm1+0x260>
 800c5f8:	ee20 6b08 	vmul.f64	d6, d0, d8
 800c5fc:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800c600:	eea6 5b04 	vfma.f64	d5, d6, d4
 800c604:	ed9f 4b68 	vldr	d4, [pc, #416]	; 800c7a8 <expm1+0x268>
 800c608:	ed9f 2b69 	vldr	d2, [pc, #420]	; 800c7b0 <expm1+0x270>
 800c60c:	eea5 4b06 	vfma.f64	d4, d5, d6
 800c610:	ed9f 5b69 	vldr	d5, [pc, #420]	; 800c7b8 <expm1+0x278>
 800c614:	eea4 5b06 	vfma.f64	d5, d4, d6
 800c618:	eea5 2b06 	vfma.f64	d2, d5, d6
 800c61c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800c620:	eeb0 4b45 	vmov.f64	d4, d5
 800c624:	eea2 4b06 	vfma.f64	d4, d2, d6
 800c628:	eea8 1b44 	vfms.f64	d1, d8, d4
 800c62c:	eeb1 8b08 	vmov.f64	d8, #24	; 0x40c00000  6.0
 800c630:	ee34 2b41 	vsub.f64	d2, d4, d1
 800c634:	eea0 8b41 	vfms.f64	d8, d0, d1
 800c638:	ee82 4b08 	vdiv.f64	d4, d2, d8
 800c63c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800c640:	bbab      	cbnz	r3, 800c6ae <expm1+0x16e>
 800c642:	ee90 6b04 	vfnms.f64	d6, d0, d4
 800c646:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c64a:	e791      	b.n	800c570 <expm1+0x30>
 800c64c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 800c7c0 <expm1+0x280>
 800c650:	ee30 7b07 	vadd.f64	d7, d0, d7
 800c654:	f04f 33ff 	mov.w	r3, #4294967295
 800c658:	e7c0      	b.n	800c5dc <expm1+0x9c>
 800c65a:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 800c65e:	2a00      	cmp	r2, #0
 800c660:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c664:	fe27 7b06 	vselge.f64	d7, d7, d6
 800c668:	ed9f 6b57 	vldr	d6, [pc, #348]	; 800c7c8 <expm1+0x288>
 800c66c:	ed9f 5b46 	vldr	d5, [pc, #280]	; 800c788 <expm1+0x248>
 800c670:	ee00 7b06 	vmla.f64	d7, d0, d6
 800c674:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c678:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c67c:	ee17 3a90 	vmov	r3, s15
 800c680:	eeb0 7b40 	vmov.f64	d7, d0
 800c684:	eea6 7b45 	vfms.f64	d7, d6, d5
 800c688:	ed9f 5b41 	vldr	d5, [pc, #260]	; 800c790 <expm1+0x250>
 800c68c:	ee26 6b05 	vmul.f64	d6, d6, d5
 800c690:	e7a4      	b.n	800c5dc <expm1+0x9c>
 800c692:	4a56      	ldr	r2, [pc, #344]	; (800c7ec <expm1+0x2ac>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d808      	bhi.n	800c6aa <expm1+0x16a>
 800c698:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 800c7d0 <expm1+0x290>
 800c69c:	ee30 7b07 	vadd.f64	d7, d0, d7
 800c6a0:	ee37 7b47 	vsub.f64	d7, d7, d7
 800c6a4:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c6a8:	e762      	b.n	800c570 <expm1+0x30>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e79c      	b.n	800c5e8 <expm1+0xa8>
 800c6ae:	1c5a      	adds	r2, r3, #1
 800c6b0:	ee34 4b47 	vsub.f64	d4, d4, d7
 800c6b4:	ee94 7b00 	vfnms.f64	d7, d4, d0
 800c6b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6bc:	d106      	bne.n	800c6cc <expm1+0x18c>
 800c6be:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c6c2:	eebe 0b00 	vmov.f64	d0, #224	; 0xbf000000 -0.5
 800c6c6:	eea7 0b03 	vfma.f64	d0, d7, d3
 800c6ca:	e751      	b.n	800c570 <expm1+0x30>
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d118      	bne.n	800c702 <expm1+0x1c2>
 800c6d0:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 800c6d4:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6dc:	d508      	bpl.n	800c6f0 <expm1+0x1b0>
 800c6de:	ee30 3b03 	vadd.f64	d3, d0, d3
 800c6e2:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 800c6e6:	ee37 7b43 	vsub.f64	d7, d7, d3
 800c6ea:	ee27 0b00 	vmul.f64	d0, d7, d0
 800c6ee:	e73f      	b.n	800c570 <expm1+0x30>
 800c6f0:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c6f4:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800c6f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c6fc:	eeb0 0b45 	vmov.f64	d0, d5
 800c700:	e736      	b.n	800c570 <expm1+0x30>
 800c702:	1c5a      	adds	r2, r3, #1
 800c704:	2a39      	cmp	r2, #57	; 0x39
 800c706:	ea4f 5403 	mov.w	r4, r3, lsl #20
 800c70a:	d90d      	bls.n	800c728 <expm1+0x1e8>
 800c70c:	ee37 7b40 	vsub.f64	d7, d7, d0
 800c710:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c714:	ee17 1a90 	vmov	r1, s15
 800c718:	ec53 2b17 	vmov	r2, r3, d7
 800c71c:	1863      	adds	r3, r4, r1
 800c71e:	ec43 2b10 	vmov	d0, r2, r3
 800c722:	ee30 0b45 	vsub.f64	d0, d0, d5
 800c726:	e723      	b.n	800c570 <expm1+0x30>
 800c728:	2b13      	cmp	r3, #19
 800c72a:	f04f 0000 	mov.w	r0, #0
 800c72e:	dc15      	bgt.n	800c75c <expm1+0x21c>
 800c730:	ee37 7b40 	vsub.f64	d7, d7, d0
 800c734:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c738:	fa42 f303 	asr.w	r3, r2, r3
 800c73c:	f1c3 517f 	rsb	r1, r3, #1069547520	; 0x3fc00000
 800c740:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c744:	ec41 0b16 	vmov	d6, r0, r1
 800c748:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c74c:	ee17 1a90 	vmov	r1, s15
 800c750:	ec53 2b17 	vmov	r2, r3, d7
 800c754:	1863      	adds	r3, r4, r1
 800c756:	ec43 2b10 	vmov	d0, r2, r3
 800c75a:	e709      	b.n	800c570 <expm1+0x30>
 800c75c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800c760:	3303      	adds	r3, #3
 800c762:	0519      	lsls	r1, r3, #20
 800c764:	ec41 0b16 	vmov	d6, r0, r1
 800c768:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c76c:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c770:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c774:	e7ea      	b.n	800c74c <expm1+0x20c>
 800c776:	bf00      	nop
 800c778:	fefa39ef 	.word	0xfefa39ef
 800c77c:	40862e42 	.word	0x40862e42
 800c780:	c2f8f359 	.word	0xc2f8f359
 800c784:	01a56e1f 	.word	0x01a56e1f
 800c788:	fee00000 	.word	0xfee00000
 800c78c:	3fe62e42 	.word	0x3fe62e42
 800c790:	35793c76 	.word	0x35793c76
 800c794:	3dea39ef 	.word	0x3dea39ef
 800c798:	6e09c32d 	.word	0x6e09c32d
 800c79c:	be8afdb7 	.word	0xbe8afdb7
 800c7a0:	86e65239 	.word	0x86e65239
 800c7a4:	3ed0cfca 	.word	0x3ed0cfca
 800c7a8:	9eaadbb7 	.word	0x9eaadbb7
 800c7ac:	bf14ce19 	.word	0xbf14ce19
 800c7b0:	111110f4 	.word	0x111110f4
 800c7b4:	bfa11111 	.word	0xbfa11111
 800c7b8:	19fe5585 	.word	0x19fe5585
 800c7bc:	3f5a01a0 	.word	0x3f5a01a0
 800c7c0:	35793c76 	.word	0x35793c76
 800c7c4:	bdea39ef 	.word	0xbdea39ef
 800c7c8:	652b82fe 	.word	0x652b82fe
 800c7cc:	3ff71547 	.word	0x3ff71547
 800c7d0:	8800759c 	.word	0x8800759c
 800c7d4:	7e37e43c 	.word	0x7e37e43c
 800c7d8:	40436879 	.word	0x40436879
 800c7dc:	40862e41 	.word	0x40862e41
 800c7e0:	7fefffff 	.word	0x7fefffff
 800c7e4:	3fd62e42 	.word	0x3fd62e42
 800c7e8:	3ff0a2b1 	.word	0x3ff0a2b1
 800c7ec:	3c8fffff 	.word	0x3c8fffff

0800c7f0 <with_errno>:
 800c7f0:	b513      	push	{r0, r1, r4, lr}
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	ed8d 0b00 	vstr	d0, [sp]
 800c7f8:	f7fe ff96 	bl	800b728 <__errno>
 800c7fc:	ed9d 0b00 	vldr	d0, [sp]
 800c800:	6004      	str	r4, [r0, #0]
 800c802:	b002      	add	sp, #8
 800c804:	bd10      	pop	{r4, pc}

0800c806 <xflow>:
 800c806:	b082      	sub	sp, #8
 800c808:	b158      	cbz	r0, 800c822 <xflow+0x1c>
 800c80a:	eeb1 7b40 	vneg.f64	d7, d0
 800c80e:	ed8d 7b00 	vstr	d7, [sp]
 800c812:	ed9d 7b00 	vldr	d7, [sp]
 800c816:	2022      	movs	r0, #34	; 0x22
 800c818:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c81c:	b002      	add	sp, #8
 800c81e:	f7ff bfe7 	b.w	800c7f0 <with_errno>
 800c822:	eeb0 7b40 	vmov.f64	d7, d0
 800c826:	e7f2      	b.n	800c80e <xflow+0x8>

0800c828 <__math_uflow>:
 800c828:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c830 <__math_uflow+0x8>
 800c82c:	f7ff bfeb 	b.w	800c806 <xflow>
 800c830:	00000000 	.word	0x00000000
 800c834:	10000000 	.word	0x10000000

0800c838 <__math_oflow>:
 800c838:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c840 <__math_oflow+0x8>
 800c83c:	f7ff bfe3 	b.w	800c806 <xflow>
 800c840:	00000000 	.word	0x00000000
 800c844:	70000000 	.word	0x70000000

0800c848 <__math_divzero>:
 800c848:	b082      	sub	sp, #8
 800c84a:	2800      	cmp	r0, #0
 800c84c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c850:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800c854:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800c858:	ed8d 7b00 	vstr	d7, [sp]
 800c85c:	ed9d 0b00 	vldr	d0, [sp]
 800c860:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800c870 <__math_divzero+0x28>
 800c864:	2022      	movs	r0, #34	; 0x22
 800c866:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800c86a:	b002      	add	sp, #8
 800c86c:	f7ff bfc0 	b.w	800c7f0 <with_errno>
	...

0800c878 <__math_invalid>:
 800c878:	eeb0 7b40 	vmov.f64	d7, d0
 800c87c:	eeb4 7b47 	vcmp.f64	d7, d7
 800c880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c884:	ee30 6b40 	vsub.f64	d6, d0, d0
 800c888:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800c88c:	d602      	bvs.n	800c894 <__math_invalid+0x1c>
 800c88e:	2021      	movs	r0, #33	; 0x21
 800c890:	f7ff bfae 	b.w	800c7f0 <with_errno>
 800c894:	4770      	bx	lr

0800c896 <__math_check_uflow>:
 800c896:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c89e:	d102      	bne.n	800c8a6 <__math_check_uflow+0x10>
 800c8a0:	2022      	movs	r0, #34	; 0x22
 800c8a2:	f7ff bfa5 	b.w	800c7f0 <with_errno>
 800c8a6:	4770      	bx	lr

0800c8a8 <__math_check_oflow>:
 800c8a8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800c8c8 <__math_check_oflow+0x20>
 800c8ac:	eeb0 7bc0 	vabs.f64	d7, d0
 800c8b0:	eeb4 7b46 	vcmp.f64	d7, d6
 800c8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b8:	dd02      	ble.n	800c8c0 <__math_check_oflow+0x18>
 800c8ba:	2022      	movs	r0, #34	; 0x22
 800c8bc:	f7ff bf98 	b.w	800c7f0 <with_errno>
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop
 800c8c4:	f3af 8000 	nop.w
 800c8c8:	ffffffff 	.word	0xffffffff
 800c8cc:	7fefffff 	.word	0x7fefffff

0800c8d0 <checkint>:
 800c8d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c8d4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	b570      	push	{r4, r5, r6, lr}
 800c8dc:	dd2a      	ble.n	800c934 <checkint+0x64>
 800c8de:	f240 4333 	movw	r3, #1075	; 0x433
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	dc24      	bgt.n	800c930 <checkint+0x60>
 800c8e6:	1a9b      	subs	r3, r3, r2
 800c8e8:	f1a3 0620 	sub.w	r6, r3, #32
 800c8ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f0:	fa02 f403 	lsl.w	r4, r2, r3
 800c8f4:	fa02 f606 	lsl.w	r6, r2, r6
 800c8f8:	f1c3 0520 	rsb	r5, r3, #32
 800c8fc:	fa22 f505 	lsr.w	r5, r2, r5
 800c900:	4334      	orrs	r4, r6
 800c902:	432c      	orrs	r4, r5
 800c904:	409a      	lsls	r2, r3
 800c906:	ea20 0202 	bic.w	r2, r0, r2
 800c90a:	ea21 0404 	bic.w	r4, r1, r4
 800c90e:	4322      	orrs	r2, r4
 800c910:	f1a3 0420 	sub.w	r4, r3, #32
 800c914:	f1c3 0220 	rsb	r2, r3, #32
 800c918:	d10c      	bne.n	800c934 <checkint+0x64>
 800c91a:	40d8      	lsrs	r0, r3
 800c91c:	fa01 f302 	lsl.w	r3, r1, r2
 800c920:	4318      	orrs	r0, r3
 800c922:	40e1      	lsrs	r1, r4
 800c924:	4308      	orrs	r0, r1
 800c926:	f000 0001 	and.w	r0, r0, #1
 800c92a:	f1d0 0002 	rsbs	r0, r0, #2
 800c92e:	bd70      	pop	{r4, r5, r6, pc}
 800c930:	2002      	movs	r0, #2
 800c932:	e7fc      	b.n	800c92e <checkint+0x5e>
 800c934:	2000      	movs	r0, #0
 800c936:	e7fa      	b.n	800c92e <checkint+0x5e>

0800c938 <pow>:
 800c938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93c:	ee10 4a90 	vmov	r4, s1
 800c940:	ed2d 8b0a 	vpush	{d8-d12}
 800c944:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800c948:	ee11 aa90 	vmov	sl, s3
 800c94c:	f108 32ff 	add.w	r2, r8, #4294967295
 800c950:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800c954:	429a      	cmp	r2, r3
 800c956:	ee10 5a10 	vmov	r5, s0
 800c95a:	ee11 0a10 	vmov	r0, s2
 800c95e:	b087      	sub	sp, #28
 800c960:	46c4      	mov	ip, r8
 800c962:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800c966:	d806      	bhi.n	800c976 <pow+0x3e>
 800c968:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800c96c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800c970:	2b7f      	cmp	r3, #127	; 0x7f
 800c972:	f240 8156 	bls.w	800cc22 <pow+0x2ea>
 800c976:	1802      	adds	r2, r0, r0
 800c978:	eb4a 010a 	adc.w	r1, sl, sl
 800c97c:	f06f 0b01 	mvn.w	fp, #1
 800c980:	1e57      	subs	r7, r2, #1
 800c982:	f141 33ff 	adc.w	r3, r1, #4294967295
 800c986:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 800c98a:	45bb      	cmp	fp, r7
 800c98c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800c990:	d242      	bcs.n	800ca18 <pow+0xe0>
 800c992:	ea52 0301 	orrs.w	r3, r2, r1
 800c996:	f04f 0300 	mov.w	r3, #0
 800c99a:	d10c      	bne.n	800c9b6 <pow+0x7e>
 800c99c:	196d      	adds	r5, r5, r5
 800c99e:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800c9a2:	4164      	adcs	r4, r4
 800c9a4:	42ab      	cmp	r3, r5
 800c9a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c9aa:	41a3      	sbcs	r3, r4
 800c9ac:	f0c0 808f 	bcc.w	800cace <pow+0x196>
 800c9b0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c9b4:	e02b      	b.n	800ca0e <pow+0xd6>
 800c9b6:	4ed4      	ldr	r6, [pc, #848]	; (800cd08 <pow+0x3d0>)
 800c9b8:	42b4      	cmp	r4, r6
 800c9ba:	bf08      	it	eq
 800c9bc:	429d      	cmpeq	r5, r3
 800c9be:	d109      	bne.n	800c9d4 <pow+0x9c>
 800c9c0:	1800      	adds	r0, r0, r0
 800c9c2:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 800c9c6:	eb4a 0a0a 	adc.w	sl, sl, sl
 800c9ca:	4283      	cmp	r3, r0
 800c9cc:	4bcf      	ldr	r3, [pc, #828]	; (800cd0c <pow+0x3d4>)
 800c9ce:	eb73 030a 	sbcs.w	r3, r3, sl
 800c9d2:	e7eb      	b.n	800c9ac <pow+0x74>
 800c9d4:	196d      	adds	r5, r5, r5
 800c9d6:	48ce      	ldr	r0, [pc, #824]	; (800cd10 <pow+0x3d8>)
 800c9d8:	4164      	adcs	r4, r4
 800c9da:	42ab      	cmp	r3, r5
 800c9dc:	eb70 0604 	sbcs.w	r6, r0, r4
 800c9e0:	d375      	bcc.n	800cace <pow+0x196>
 800c9e2:	4281      	cmp	r1, r0
 800c9e4:	bf08      	it	eq
 800c9e6:	429a      	cmpeq	r2, r3
 800c9e8:	d171      	bne.n	800cace <pow+0x196>
 800c9ea:	4aca      	ldr	r2, [pc, #808]	; (800cd14 <pow+0x3dc>)
 800c9ec:	4294      	cmp	r4, r2
 800c9ee:	bf08      	it	eq
 800c9f0:	429d      	cmpeq	r5, r3
 800c9f2:	d0dd      	beq.n	800c9b0 <pow+0x78>
 800c9f4:	4294      	cmp	r4, r2
 800c9f6:	ea6f 0a0a 	mvn.w	sl, sl
 800c9fa:	bf34      	ite	cc
 800c9fc:	2400      	movcc	r4, #0
 800c9fe:	2401      	movcs	r4, #1
 800ca00:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800ca04:	4554      	cmp	r4, sl
 800ca06:	f040 81dc 	bne.w	800cdc2 <pow+0x48a>
 800ca0a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800ca0e:	b007      	add	sp, #28
 800ca10:	ecbd 8b0a 	vpop	{d8-d12}
 800ca14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca18:	196f      	adds	r7, r5, r5
 800ca1a:	eb44 0904 	adc.w	r9, r4, r4
 800ca1e:	1e7a      	subs	r2, r7, #1
 800ca20:	f169 0300 	sbc.w	r3, r9, #0
 800ca24:	4593      	cmp	fp, r2
 800ca26:	eb7e 0303 	sbcs.w	r3, lr, r3
 800ca2a:	d225      	bcs.n	800ca78 <pow+0x140>
 800ca2c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800ca30:	2c00      	cmp	r4, #0
 800ca32:	da13      	bge.n	800ca5c <pow+0x124>
 800ca34:	4651      	mov	r1, sl
 800ca36:	f7ff ff4b 	bl	800c8d0 <checkint>
 800ca3a:	2801      	cmp	r0, #1
 800ca3c:	d10e      	bne.n	800ca5c <pow+0x124>
 800ca3e:	eeb1 0b40 	vneg.f64	d0, d0
 800ca42:	ea57 0909 	orrs.w	r9, r7, r9
 800ca46:	d10b      	bne.n	800ca60 <pow+0x128>
 800ca48:	f1ba 0f00 	cmp.w	sl, #0
 800ca4c:	dadf      	bge.n	800ca0e <pow+0xd6>
 800ca4e:	b007      	add	sp, #28
 800ca50:	ecbd 8b0a 	vpop	{d8-d12}
 800ca54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca58:	f7ff bef6 	b.w	800c848 <__math_divzero>
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	e7f0      	b.n	800ca42 <pow+0x10a>
 800ca60:	f1ba 0f00 	cmp.w	sl, #0
 800ca64:	dad3      	bge.n	800ca0e <pow+0xd6>
 800ca66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ca6a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ca6e:	ed8d 7b00 	vstr	d7, [sp]
 800ca72:	ed9d 0b00 	vldr	d0, [sp]
 800ca76:	e7ca      	b.n	800ca0e <pow+0xd6>
 800ca78:	2c00      	cmp	r4, #0
 800ca7a:	da2b      	bge.n	800cad4 <pow+0x19c>
 800ca7c:	4651      	mov	r1, sl
 800ca7e:	f7ff ff27 	bl	800c8d0 <checkint>
 800ca82:	b930      	cbnz	r0, 800ca92 <pow+0x15a>
 800ca84:	b007      	add	sp, #28
 800ca86:	ecbd 8b0a 	vpop	{d8-d12}
 800ca8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8e:	f7ff bef3 	b.w	800c878 <__math_invalid>
 800ca92:	1e41      	subs	r1, r0, #1
 800ca94:	4248      	negs	r0, r1
 800ca96:	4148      	adcs	r0, r1
 800ca98:	0480      	lsls	r0, r0, #18
 800ca9a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ca9e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800caa2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800caa6:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800caaa:	2b7f      	cmp	r3, #127	; 0x7f
 800caac:	d92d      	bls.n	800cb0a <pow+0x1d2>
 800caae:	4b96      	ldr	r3, [pc, #600]	; (800cd08 <pow+0x3d0>)
 800cab0:	2000      	movs	r0, #0
 800cab2:	429c      	cmp	r4, r3
 800cab4:	bf08      	it	eq
 800cab6:	4285      	cmpeq	r5, r0
 800cab8:	f43f af7a 	beq.w	800c9b0 <pow+0x78>
 800cabc:	f240 31bd 	movw	r1, #957	; 0x3bd
 800cac0:	428a      	cmp	r2, r1
 800cac2:	d80c      	bhi.n	800cade <pow+0x1a6>
 800cac4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cac8:	42a8      	cmp	r0, r5
 800caca:	41a3      	sbcs	r3, r4
 800cacc:	d204      	bcs.n	800cad8 <pow+0x1a0>
 800cace:	ee31 0b00 	vadd.f64	d0, d1, d0
 800cad2:	e79c      	b.n	800ca0e <pow+0xd6>
 800cad4:	2000      	movs	r0, #0
 800cad6:	e7e4      	b.n	800caa2 <pow+0x16a>
 800cad8:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cadc:	e797      	b.n	800ca0e <pow+0xd6>
 800cade:	2d01      	cmp	r5, #1
 800cae0:	eb74 0303 	sbcs.w	r3, r4, r3
 800cae4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cae8:	bf34      	ite	cc
 800caea:	2301      	movcc	r3, #1
 800caec:	2300      	movcs	r3, #0
 800caee:	4296      	cmp	r6, r2
 800caf0:	bf8c      	ite	hi
 800caf2:	2600      	movhi	r6, #0
 800caf4:	2601      	movls	r6, #1
 800caf6:	42b3      	cmp	r3, r6
 800caf8:	f000 809b 	beq.w	800cc32 <pow+0x2fa>
 800cafc:	b007      	add	sp, #28
 800cafe:	ecbd 8b0a 	vpop	{d8-d12}
 800cb02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb06:	f7ff be97 	b.w	800c838 <__math_oflow>
 800cb0a:	f1bc 0f00 	cmp.w	ip, #0
 800cb0e:	d10b      	bne.n	800cb28 <pow+0x1f0>
 800cb10:	ed9f 7b79 	vldr	d7, [pc, #484]	; 800ccf8 <pow+0x3c0>
 800cb14:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cb18:	ec53 2b17 	vmov	r2, r3, d7
 800cb1c:	ee17 5a10 	vmov	r5, s14
 800cb20:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800cb24:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800cb28:	4b7b      	ldr	r3, [pc, #492]	; (800cd18 <pow+0x3e0>)
 800cb2a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800cb2e:	4423      	add	r3, r4
 800cb30:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800cb34:	1519      	asrs	r1, r3, #20
 800cb36:	0d1b      	lsrs	r3, r3, #20
 800cb38:	051b      	lsls	r3, r3, #20
 800cb3a:	1ae7      	subs	r7, r4, r3
 800cb3c:	4b77      	ldr	r3, [pc, #476]	; (800cd1c <pow+0x3e4>)
 800cb3e:	ee03 1a10 	vmov	s6, r1
 800cb42:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800cb46:	1e2e      	subs	r6, r5, #0
 800cb48:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800cb4c:	ec47 6b15 	vmov	d5, r6, r7
 800cb50:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800cb54:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cb58:	ed93 7b00 	vldr	d7, [r3]
 800cb5c:	ed93 5b02 	vldr	d5, [r3, #8]
 800cb60:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800cb64:	eea3 2b07 	vfma.f64	d2, d3, d7
 800cb68:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800cb6c:	ee36 4b02 	vadd.f64	d4, d6, d2
 800cb70:	ee32 2b44 	vsub.f64	d2, d2, d4
 800cb74:	eea3 7b05 	vfma.f64	d7, d3, d5
 800cb78:	ed93 5b04 	vldr	d5, [r3, #16]
 800cb7c:	ee32 2b06 	vadd.f64	d2, d2, d6
 800cb80:	ee37 7b02 	vadd.f64	d7, d7, d2
 800cb84:	ee26 5b05 	vmul.f64	d5, d6, d5
 800cb88:	ee26 0b05 	vmul.f64	d0, d6, d5
 800cb8c:	ee34 8b00 	vadd.f64	d8, d4, d0
 800cb90:	eeb0 9b40 	vmov.f64	d9, d0
 800cb94:	ee34 4b48 	vsub.f64	d4, d4, d8
 800cb98:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800cb9c:	ee34 ab00 	vadd.f64	d10, d4, d0
 800cba0:	ed93 5b06 	vldr	d5, [r3, #24]
 800cba4:	ee26 bb00 	vmul.f64	d11, d6, d0
 800cba8:	ee37 7b09 	vadd.f64	d7, d7, d9
 800cbac:	ed93 4b08 	vldr	d4, [r3, #32]
 800cbb0:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800cbb4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800cbb8:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cbbc:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800cbc0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800cbc4:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cbc8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800cbcc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800cbd0:	eea0 4b03 	vfma.f64	d4, d0, d3
 800cbd4:	eea0 5b04 	vfma.f64	d5, d0, d4
 800cbd8:	eeab 7b05 	vfma.f64	d7, d11, d5
 800cbdc:	ee38 4b07 	vadd.f64	d4, d8, d7
 800cbe0:	ee21 6b04 	vmul.f64	d6, d1, d4
 800cbe4:	ee16 3a90 	vmov	r3, s13
 800cbe8:	eeb0 5b46 	vmov.f64	d5, d6
 800cbec:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800cbf0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800cbf4:	18b2      	adds	r2, r6, r2
 800cbf6:	2a3e      	cmp	r2, #62	; 0x3e
 800cbf8:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800cbfc:	ee38 8b44 	vsub.f64	d8, d8, d4
 800cc00:	ee38 8b07 	vadd.f64	d8, d8, d7
 800cc04:	eea1 5b08 	vfma.f64	d5, d1, d8
 800cc08:	d91b      	bls.n	800cc42 <pow+0x30a>
 800cc0a:	2a00      	cmp	r2, #0
 800cc0c:	da0b      	bge.n	800cc26 <pow+0x2ee>
 800cc0e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cc12:	ee36 0b00 	vadd.f64	d0, d6, d0
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f43f aef9 	beq.w	800ca0e <pow+0xd6>
 800cc1c:	eeb1 0b40 	vneg.f64	d0, d0
 800cc20:	e6f5      	b.n	800ca0e <pow+0xd6>
 800cc22:	2000      	movs	r0, #0
 800cc24:	e780      	b.n	800cb28 <pow+0x1f0>
 800cc26:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800cc2a:	d909      	bls.n	800cc40 <pow+0x308>
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f6bf af65 	bge.w	800cafc <pow+0x1c4>
 800cc32:	b007      	add	sp, #28
 800cc34:	ecbd 8b0a 	vpop	{d8-d12}
 800cc38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	f7ff bdf4 	b.w	800c828 <__math_uflow>
 800cc40:	2600      	movs	r6, #0
 800cc42:	4937      	ldr	r1, [pc, #220]	; (800cd20 <pow+0x3e8>)
 800cc44:	ed91 4b02 	vldr	d4, [r1, #8]
 800cc48:	ed91 3b00 	vldr	d3, [r1]
 800cc4c:	eeb0 7b44 	vmov.f64	d7, d4
 800cc50:	eea6 7b03 	vfma.f64	d7, d6, d3
 800cc54:	ee17 5a10 	vmov	r5, s14
 800cc58:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cc5c:	ed91 4b04 	vldr	d4, [r1, #16]
 800cc60:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800cc64:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cc68:	ed91 4b06 	vldr	d4, [r1, #24]
 800cc6c:	18dc      	adds	r4, r3, r3
 800cc6e:	f104 030f 	add.w	r3, r4, #15
 800cc72:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800cc76:	eea7 6b04 	vfma.f64	d6, d7, d4
 800cc7a:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 800cc7e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cc82:	ee25 6b05 	vmul.f64	d6, d5, d5
 800cc86:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800cc8a:	ed91 4b08 	vldr	d4, [r1, #32]
 800cc8e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cc92:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800cc96:	eea5 4b03 	vfma.f64	d4, d5, d3
 800cc9a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 800cc9e:	eea6 7b04 	vfma.f64	d7, d6, d4
 800cca2:	ee26 6b06 	vmul.f64	d6, d6, d6
 800cca6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 800ccaa:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800ccae:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800ccb2:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ccb6:	1940      	adds	r0, r0, r5
 800ccb8:	2700      	movs	r7, #0
 800ccba:	eb17 020c 	adds.w	r2, r7, ip
 800ccbe:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800ccc2:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ccc6:	2e00      	cmp	r6, #0
 800ccc8:	d176      	bne.n	800cdb8 <pow+0x480>
 800ccca:	42bd      	cmp	r5, r7
 800cccc:	db2a      	blt.n	800cd24 <pow+0x3ec>
 800ccce:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800ccd2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800ccd6:	4610      	mov	r0, r2
 800ccd8:	ec41 0b10 	vmov	d0, r0, r1
 800ccdc:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cce0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800cd00 <pow+0x3c8>
 800cce4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cce8:	b007      	add	sp, #28
 800ccea:	ecbd 8b0a 	vpop	{d8-d12}
 800ccee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf2:	f7ff bdd9 	b.w	800c8a8 <__math_check_oflow>
 800ccf6:	bf00      	nop
 800ccf8:	00000000 	.word	0x00000000
 800ccfc:	43300000 	.word	0x43300000
 800cd00:	00000000 	.word	0x00000000
 800cd04:	7f000000 	.word	0x7f000000
 800cd08:	3ff00000 	.word	0x3ff00000
 800cd0c:	fff00000 	.word	0xfff00000
 800cd10:	ffe00000 	.word	0xffe00000
 800cd14:	7fe00000 	.word	0x7fe00000
 800cd18:	c0196aab 	.word	0xc0196aab
 800cd1c:	0800d158 	.word	0x0800d158
 800cd20:	0800e1d0 	.word	0x0800e1d0
 800cd24:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800cd28:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	ec41 0b15 	vmov	d5, r0, r1
 800cd32:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 800cd36:	ee27 6b05 	vmul.f64	d6, d7, d5
 800cd3a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800cd3e:	eeb0 4bc7 	vabs.f64	d4, d7
 800cd42:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800cd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd4a:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 800cdc8 <pow+0x490>
 800cd4e:	d52a      	bpl.n	800cda6 <pow+0x46e>
 800cd50:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cd54:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5c:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cd60:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800cd64:	bf58      	it	pl
 800cd66:	eeb0 4b43 	vmovpl.f64	d4, d3
 800cd6a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800cd6e:	ee34 6b43 	vsub.f64	d6, d4, d3
 800cd72:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cd76:	ee36 6b05 	vadd.f64	d6, d6, d5
 800cd7a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800cd7e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800cd82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd8a:	d104      	bne.n	800cd96 <pow+0x45e>
 800cd8c:	4632      	mov	r2, r6
 800cd8e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800cd92:	ec43 2b17 	vmov	d7, r2, r3
 800cd96:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cd9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd9e:	ee26 6b00 	vmul.f64	d6, d6, d0
 800cda2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800cda6:	ee27 0b00 	vmul.f64	d0, d7, d0
 800cdaa:	b007      	add	sp, #28
 800cdac:	ecbd 8b0a 	vpop	{d8-d12}
 800cdb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb4:	f7ff bd6f 	b.w	800c896 <__math_check_uflow>
 800cdb8:	ec43 2b10 	vmov	d0, r2, r3
 800cdbc:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cdc0:	e625      	b.n	800ca0e <pow+0xd6>
 800cdc2:	ed9f 0b03 	vldr	d0, [pc, #12]	; 800cdd0 <pow+0x498>
 800cdc6:	e622      	b.n	800ca0e <pow+0xd6>
 800cdc8:	00000000 	.word	0x00000000
 800cdcc:	00100000 	.word	0x00100000
	...

0800cdd8 <__ieee754_sqrt>:
 800cdd8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800cddc:	4770      	bx	lr
	...

0800cde0 <__ieee754_atan2>:
 800cde0:	ee11 1a10 	vmov	r1, s2
 800cde4:	eeb0 7b40 	vmov.f64	d7, d0
 800cde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdea:	ee11 5a90 	vmov	r5, s3
 800cdee:	424b      	negs	r3, r1
 800cdf0:	4f59      	ldr	r7, [pc, #356]	; (800cf58 <__ieee754_atan2+0x178>)
 800cdf2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800cdf6:	430b      	orrs	r3, r1
 800cdf8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cdfc:	42bb      	cmp	r3, r7
 800cdfe:	d80d      	bhi.n	800ce1c <__ieee754_atan2+0x3c>
 800ce00:	ee10 ca10 	vmov	ip, s0
 800ce04:	ee17 6a90 	vmov	r6, s15
 800ce08:	f1cc 0000 	rsb	r0, ip, #0
 800ce0c:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800ce10:	ea40 000c 	orr.w	r0, r0, ip
 800ce14:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 800ce18:	42b8      	cmp	r0, r7
 800ce1a:	d904      	bls.n	800ce26 <__ieee754_atan2+0x46>
 800ce1c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800ce20:	eeb0 0b47 	vmov.f64	d0, d7
 800ce24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce26:	f105 4040 	add.w	r0, r5, #3221225472	; 0xc0000000
 800ce2a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ce2e:	4308      	orrs	r0, r1
 800ce30:	d103      	bne.n	800ce3a <__ieee754_atan2+0x5a>
 800ce32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce36:	f7ff ba0f 	b.w	800c258 <atan>
 800ce3a:	17ac      	asrs	r4, r5, #30
 800ce3c:	f004 0402 	and.w	r4, r4, #2
 800ce40:	ea53 0c0c 	orrs.w	ip, r3, ip
 800ce44:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 800ce48:	d107      	bne.n	800ce5a <__ieee754_atan2+0x7a>
 800ce4a:	2c02      	cmp	r4, #2
 800ce4c:	d05c      	beq.n	800cf08 <__ieee754_atan2+0x128>
 800ce4e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800cf20 <__ieee754_atan2+0x140>
 800ce52:	2c03      	cmp	r4, #3
 800ce54:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800ce58:	e7e2      	b.n	800ce20 <__ieee754_atan2+0x40>
 800ce5a:	4311      	orrs	r1, r2
 800ce5c:	d107      	bne.n	800ce6e <__ieee754_atan2+0x8e>
 800ce5e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800cf28 <__ieee754_atan2+0x148>
 800ce62:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800cf30 <__ieee754_atan2+0x150>
 800ce66:	2e00      	cmp	r6, #0
 800ce68:	fe27 7b06 	vselge.f64	d7, d7, d6
 800ce6c:	e7d8      	b.n	800ce20 <__ieee754_atan2+0x40>
 800ce6e:	42ba      	cmp	r2, r7
 800ce70:	d10f      	bne.n	800ce92 <__ieee754_atan2+0xb2>
 800ce72:	4293      	cmp	r3, r2
 800ce74:	f104 34ff 	add.w	r4, r4, #4294967295
 800ce78:	d107      	bne.n	800ce8a <__ieee754_atan2+0xaa>
 800ce7a:	2c02      	cmp	r4, #2
 800ce7c:	d847      	bhi.n	800cf0e <__ieee754_atan2+0x12e>
 800ce7e:	4b37      	ldr	r3, [pc, #220]	; (800cf5c <__ieee754_atan2+0x17c>)
 800ce80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce84:	ed93 7b00 	vldr	d7, [r3]
 800ce88:	e7ca      	b.n	800ce20 <__ieee754_atan2+0x40>
 800ce8a:	2c02      	cmp	r4, #2
 800ce8c:	d842      	bhi.n	800cf14 <__ieee754_atan2+0x134>
 800ce8e:	4b34      	ldr	r3, [pc, #208]	; (800cf60 <__ieee754_atan2+0x180>)
 800ce90:	e7f6      	b.n	800ce80 <__ieee754_atan2+0xa0>
 800ce92:	42bb      	cmp	r3, r7
 800ce94:	d0e3      	beq.n	800ce5e <__ieee754_atan2+0x7e>
 800ce96:	1a9b      	subs	r3, r3, r2
 800ce98:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ce9c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cea0:	da1a      	bge.n	800ced8 <__ieee754_atan2+0xf8>
 800cea2:	2d00      	cmp	r5, #0
 800cea4:	da01      	bge.n	800ceaa <__ieee754_atan2+0xca>
 800cea6:	323c      	adds	r2, #60	; 0x3c
 800cea8:	db19      	blt.n	800cede <__ieee754_atan2+0xfe>
 800ceaa:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800ceae:	f7ff facd 	bl	800c44c <fabs>
 800ceb2:	f7ff f9d1 	bl	800c258 <atan>
 800ceb6:	eeb0 7b40 	vmov.f64	d7, d0
 800ceba:	2c01      	cmp	r4, #1
 800cebc:	d012      	beq.n	800cee4 <__ieee754_atan2+0x104>
 800cebe:	2c02      	cmp	r4, #2
 800cec0:	d019      	beq.n	800cef6 <__ieee754_atan2+0x116>
 800cec2:	2c00      	cmp	r4, #0
 800cec4:	d0ac      	beq.n	800ce20 <__ieee754_atan2+0x40>
 800cec6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800cf38 <__ieee754_atan2+0x158>
 800ceca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cece:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800cf40 <__ieee754_atan2+0x160>
 800ced2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ced6:	e7a3      	b.n	800ce20 <__ieee754_atan2+0x40>
 800ced8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cf28 <__ieee754_atan2+0x148>
 800cedc:	e7ed      	b.n	800ceba <__ieee754_atan2+0xda>
 800cede:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 800cf48 <__ieee754_atan2+0x168>
 800cee2:	e7ea      	b.n	800ceba <__ieee754_atan2+0xda>
 800cee4:	ee17 1a90 	vmov	r1, s15
 800cee8:	ec53 2b17 	vmov	r2, r3, d7
 800ceec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cef0:	ec43 2b17 	vmov	d7, r2, r3
 800cef4:	e794      	b.n	800ce20 <__ieee754_atan2+0x40>
 800cef6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800cf38 <__ieee754_atan2+0x158>
 800cefa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cefe:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800cf40 <__ieee754_atan2+0x160>
 800cf02:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cf06:	e78b      	b.n	800ce20 <__ieee754_atan2+0x40>
 800cf08:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800cf40 <__ieee754_atan2+0x160>
 800cf0c:	e788      	b.n	800ce20 <__ieee754_atan2+0x40>
 800cf0e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800cf50 <__ieee754_atan2+0x170>
 800cf12:	e785      	b.n	800ce20 <__ieee754_atan2+0x40>
 800cf14:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800cf48 <__ieee754_atan2+0x168>
 800cf18:	e782      	b.n	800ce20 <__ieee754_atan2+0x40>
 800cf1a:	bf00      	nop
 800cf1c:	f3af 8000 	nop.w
 800cf20:	54442d18 	.word	0x54442d18
 800cf24:	c00921fb 	.word	0xc00921fb
 800cf28:	54442d18 	.word	0x54442d18
 800cf2c:	3ff921fb 	.word	0x3ff921fb
 800cf30:	54442d18 	.word	0x54442d18
 800cf34:	bff921fb 	.word	0xbff921fb
 800cf38:	33145c07 	.word	0x33145c07
 800cf3c:	3ca1a626 	.word	0x3ca1a626
 800cf40:	54442d18 	.word	0x54442d18
 800cf44:	400921fb 	.word	0x400921fb
	...
 800cf50:	54442d18 	.word	0x54442d18
 800cf54:	3fe921fb 	.word	0x3fe921fb
 800cf58:	7ff00000 	.word	0x7ff00000
 800cf5c:	0800e1a0 	.word	0x0800e1a0
 800cf60:	0800e1b8 	.word	0x0800e1b8

0800cf64 <_init>:
 800cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf66:	bf00      	nop
 800cf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6a:	bc08      	pop	{r3}
 800cf6c:	469e      	mov	lr, r3
 800cf6e:	4770      	bx	lr

0800cf70 <_fini>:
 800cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf72:	bf00      	nop
 800cf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf76:	bc08      	pop	{r3}
 800cf78:	469e      	mov	lr, r3
 800cf7a:	4770      	bx	lr
