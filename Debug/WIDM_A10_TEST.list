
WIDM_A10_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ff0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b60  08011290  08011290  00021290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08012df0  08012df0  00022df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08012df4  08012df4  00022df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08012df8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000d66c  24000078  08012e70  00030078  2**2
                  ALLOC
  7 .widm_dma     00000028  30000000  30000000  00040000  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400d6e4  2400d6e4  0003d6e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041bb7  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006605  00000000  00000000  00071c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c80  00000000  00000000  00078268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a30  00000000  00000000  00079ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003db2d  00000000  00000000  0007b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025c1a  00000000  00000000  000b9445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173940  00000000  00000000  000df05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0025299f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008254  00000000  00000000  002529f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011278 	.word	0x08011278

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08011278 	.word	0x08011278

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_DMA_Init+0x4c>)
 8000388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800038c:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <MX_DMA_Init+0x4c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <MX_DMA_Init+0x4c>)
 8000398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	200b      	movs	r0, #11
 80003aa:	f001 f940 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80003ae:	200b      	movs	r0, #11
 80003b0:	f001 f957 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	200c      	movs	r0, #12
 80003ba:	f001 f938 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80003be:	200c      	movs	r0, #12
 80003c0:	f001 f94f 	bl	8001662 <HAL_NVIC_EnableIRQ>

}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	58024400 	.word	0x58024400

080003d0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80003d4:	4b2f      	ldr	r3, [pc, #188]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 80003d6:	4a30      	ldr	r2, [pc, #192]	; (8000498 <MX_FDCAN1_Init+0xc8>)
 80003d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80003da:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 80003dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003e0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003e2:	4b2c      	ldr	r3, [pc, #176]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80003e8:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003f4:	4b27      	ldr	r3, [pc, #156]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003fa:	4b26      	ldr	r3, [pc, #152]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 32;
 8000400:	4b24      	ldr	r3, [pc, #144]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000402:	2220      	movs	r2, #32
 8000404:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 127;
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000408:	227f      	movs	r2, #127	; 0x7f
 800040a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 32;
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 800040e:	2220      	movs	r2, #32
 8000410:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000412:	4b20      	ldr	r3, [pc, #128]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000414:	2201      	movs	r2, #1
 8000416:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 800041a:	2204      	movs	r2, #4
 800041c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000420:	220b      	movs	r2, #11
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000426:	2204      	movs	r2, #4
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000432:	2201      	movs	r2, #1
 8000434:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 800043e:	2204      	movs	r2, #4
 8000440:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000444:	2212      	movs	r2, #18
 8000446:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 800044a:	2204      	movs	r2, #4
 800044c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000450:	2212      	movs	r2, #18
 8000452:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000456:	2204      	movs	r2, #4
 8000458:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 800045c:	2212      	movs	r2, #18
 800045e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000462:	2204      	movs	r2, #4
 8000464:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 4;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000468:	2204      	movs	r2, #4
 800046a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 800046e:	2210      	movs	r2, #16
 8000470:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000478:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 800047c:	2212      	movs	r2, #18
 800047e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_FDCAN1_Init+0xc4>)
 8000482:	f003 fcbb 	bl	8003dfc <HAL_FDCAN_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 800048c:	f000 fc6f 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	240000bc 	.word	0x240000bc
 8000498:	4000a000 	.word	0x4000a000

0800049c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b0b8      	sub	sp, #224	; 0xe0
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	22bc      	movs	r2, #188	; 0xbc
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f00e fff1 	bl	800f4a4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a31      	ldr	r2, [pc, #196]	; (800058c <HAL_FDCAN_MspInit+0xf0>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d15a      	bne.n	8000582 <HAL_FDCAN_MspInit+0xe6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80004d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4618      	mov	r0, r3
 80004de:	f008 fb01 	bl	8008ae4 <HAL_RCCEx_PeriphCLKConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80004e8:	f000 fc41 	bl	8000d6e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80004ec:	4b28      	ldr	r3, [pc, #160]	; (8000590 <HAL_FDCAN_MspInit+0xf4>)
 80004ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80004f2:	4a27      	ldr	r2, [pc, #156]	; (8000590 <HAL_FDCAN_MspInit+0xf4>)
 80004f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <HAL_FDCAN_MspInit+0xf4>)
 80004fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800050a:	4b21      	ldr	r3, [pc, #132]	; (8000590 <HAL_FDCAN_MspInit+0xf4>)
 800050c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000510:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <HAL_FDCAN_MspInit+0xf4>)
 8000512:	f043 0308 	orr.w	r3, r3, #8
 8000516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <HAL_FDCAN_MspInit+0xf4>)
 800051c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000520:	f003 0308 	and.w	r3, r3, #8
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = WIDM_FDCAN1_RX_Pin|WIDM_FDCAN1_TX_Pin;
 8000528:	2303      	movs	r3, #3
 800052a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052e:	2302      	movs	r3, #2
 8000530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000540:	2309      	movs	r3, #9
 8000542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000546:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800054a:	4619      	mov	r1, r3
 800054c:	4811      	ldr	r0, [pc, #68]	; (8000594 <HAL_FDCAN_MspInit+0xf8>)
 800054e:	f004 fe9d 	bl	800528c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	2013      	movs	r0, #19
 8000558:	f001 f869 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800055c:	2013      	movs	r0, #19
 800055e:	f001 f880 	bl	8001662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2015      	movs	r0, #21
 8000568:	f001 f861 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800056c:	2015      	movs	r0, #21
 800056e:	f001 f878 	bl	8001662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 14, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	210e      	movs	r1, #14
 8000576:	203f      	movs	r0, #63	; 0x3f
 8000578:	f001 f859 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 800057c:	203f      	movs	r0, #63	; 0x3f
 800057e:	f001 f870 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000582:	bf00      	nop
 8000584:	37e0      	adds	r7, #224	; 0xe0
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	4000a000 	.word	0x4000a000
 8000590:	58024400 	.word	0x58024400
 8000594:	58020c00 	.word	0x58020c00

08000598 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ae:	4b5c      	ldr	r3, [pc, #368]	; (8000720 <MX_GPIO_Init+0x188>)
 80005b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b4:	4a5a      	ldr	r2, [pc, #360]	; (8000720 <MX_GPIO_Init+0x188>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005be:	4b58      	ldr	r3, [pc, #352]	; (8000720 <MX_GPIO_Init+0x188>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c4:	f003 0310 	and.w	r3, r3, #16
 80005c8:	61bb      	str	r3, [r7, #24]
 80005ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005cc:	4b54      	ldr	r3, [pc, #336]	; (8000720 <MX_GPIO_Init+0x188>)
 80005ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d2:	4a53      	ldr	r2, [pc, #332]	; (8000720 <MX_GPIO_Init+0x188>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005dc:	4b50      	ldr	r3, [pc, #320]	; (8000720 <MX_GPIO_Init+0x188>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ea:	4b4d      	ldr	r3, [pc, #308]	; (8000720 <MX_GPIO_Init+0x188>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f0:	4a4b      	ldr	r2, [pc, #300]	; (8000720 <MX_GPIO_Init+0x188>)
 80005f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005fa:	4b49      	ldr	r3, [pc, #292]	; (8000720 <MX_GPIO_Init+0x188>)
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b45      	ldr	r3, [pc, #276]	; (8000720 <MX_GPIO_Init+0x188>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060e:	4a44      	ldr	r2, [pc, #272]	; (8000720 <MX_GPIO_Init+0x188>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000618:	4b41      	ldr	r3, [pc, #260]	; (8000720 <MX_GPIO_Init+0x188>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <MX_GPIO_Init+0x188>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	4a3c      	ldr	r2, [pc, #240]	; (8000720 <MX_GPIO_Init+0x188>)
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <MX_GPIO_Init+0x188>)
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063c:	f003 0308 	and.w	r3, r3, #8
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <MX_GPIO_Init+0x188>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064a:	4a35      	ldr	r2, [pc, #212]	; (8000720 <MX_GPIO_Init+0x188>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000654:	4b32      	ldr	r3, [pc, #200]	; (8000720 <MX_GPIO_Init+0x188>)
 8000656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP11_Pin|TP12_Pin|TP9_Pin|TP10_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	210f      	movs	r1, #15
 8000666:	482f      	ldr	r0, [pc, #188]	; (8000724 <MX_GPIO_Init+0x18c>)
 8000668:	f004 ffc0 	bl	80055ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TP7_Pin|TP8_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	210c      	movs	r1, #12
 8000670:	482d      	ldr	r0, [pc, #180]	; (8000728 <MX_GPIO_Init+0x190>)
 8000672:	f004 ffbb 	bl	80055ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP3_Pin|TP1_Pin|TP2_Pin|TP4_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	210f      	movs	r1, #15
 800067a:	482c      	ldr	r0, [pc, #176]	; (800072c <MX_GPIO_Init+0x194>)
 800067c:	f004 ffb6 	bl	80055ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOOT_RED_GPIO_Port, LED_BOOT_RED_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000686:	482a      	ldr	r0, [pc, #168]	; (8000730 <MX_GPIO_Init+0x198>)
 8000688:	f004 ffb0 	bl	80055ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = TP11_Pin|TP12_Pin|TP9_Pin|TP10_Pin;
 800068c:	230f      	movs	r3, #15
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	4820      	ldr	r0, [pc, #128]	; (8000724 <MX_GPIO_Init+0x18c>)
 80006a4:	f004 fdf2 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin;
 80006a8:	230c      	movs	r3, #12
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	481a      	ldr	r0, [pc, #104]	; (8000728 <MX_GPIO_Init+0x190>)
 80006c0:	f004 fde4 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP3_Pin|TP1_Pin|TP2_Pin|TP4_Pin;
 80006c4:	230f      	movs	r3, #15
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <MX_GPIO_Init+0x194>)
 80006dc:	f004 fdd6 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BOOT_RED_Pin;
 80006e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BOOT_RED_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_GPIO_Init+0x198>)
 80006fa:	f004 fdc7 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAG_IMU_RDY_Pin;
 80006fe:	2308      	movs	r3, #8
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MAG_IMU_RDY_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <MX_GPIO_Init+0x198>)
 8000712:	f004 fdbb 	bl	800528c <HAL_GPIO_Init>

}
 8000716:	bf00      	nop
 8000718:	3730      	adds	r7, #48	; 0x30
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	58024400 	.word	0x58024400
 8000724:	58021000 	.word	0x58021000
 8000728:	58020800 	.word	0x58020800
 800072c:	58020000 	.word	0x58020000
 8000730:	58020c00 	.word	0x58020c00

08000734 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_I2C1_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <MX_I2C1_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <MX_I2C1_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_I2C1_Init+0x74>)
 800074c:	2201      	movs	r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000770:	f004 ff56 	bl	8005620 <HAL_I2C_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800077a:	f000 faf8 	bl	8000d6e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000782:	f007 f981 	bl	8007a88 <HAL_I2CEx_ConfigAnalogFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800078c:	f000 faef 	bl	8000d6e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_I2C1_Init+0x74>)
 8000794:	f007 f9c3 	bl	8007b1e <HAL_I2CEx_ConfigDigitalFilter>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 fae6 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	24000220 	.word	0x24000220
 80007ac:	40005400 	.word	0x40005400
 80007b0:	00b03fdb 	.word	0x00b03fdb

080007b4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_I2C3_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_I2C3_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_I2C3_Init+0x74>)
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_I2C3_Init+0x7c>)
 80007c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_I2C3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_I2C3_Init+0x74>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_I2C3_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_I2C3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C3_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C3_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C3_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_I2C3_Init+0x74>)
 80007f0:	f004 ff16 	bl	8005620 <HAL_I2C_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007fa:	f000 fab8 	bl	8000d6e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_I2C3_Init+0x74>)
 8000802:	f007 f941 	bl	8007a88 <HAL_I2CEx_ConfigAnalogFilter>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800080c:	f000 faaf 	bl	8000d6e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2C3_Init+0x74>)
 8000814:	f007 f983 	bl	8007b1e <HAL_I2CEx_ConfigDigitalFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 faa6 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2400015c 	.word	0x2400015c
 800082c:	40005c00 	.word	0x40005c00
 8000830:	00b03fdb 	.word	0x00b03fdb

08000834 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0bc      	sub	sp, #240	; 0xf0
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	22bc      	movs	r2, #188	; 0xbc
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f00e fe25 	bl	800f4a4 <memset>
  if(i2cHandle->Instance==I2C1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a91      	ldr	r2, [pc, #580]	; (8000aa4 <HAL_I2C_MspInit+0x270>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d177      	bne.n	8000954 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000864:	2308      	movs	r3, #8
 8000866:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	4618      	mov	r0, r3
 8000874:	f008 f936 	bl	8008ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800087e:	f000 fa76 	bl	8000d6e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b89      	ldr	r3, [pc, #548]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000888:	4a87      	ldr	r2, [pc, #540]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000892:	4b85      	ldr	r3, [pc, #532]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	f003 0302 	and.w	r3, r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
 800089e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACC_GYRO_IMU_I2C1_SCL_Pin|ACC_GYTO_IMU_I2C1_SDA_Pin;
 80008a0:	23c0      	movs	r3, #192	; 0xc0
 80008a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a6:	2312      	movs	r3, #18
 80008a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b8:	2304      	movs	r3, #4
 80008ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008c2:	4619      	mov	r1, r3
 80008c4:	4879      	ldr	r0, [pc, #484]	; (8000aac <HAL_I2C_MspInit+0x278>)
 80008c6:	f004 fce1 	bl	800528c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ca:	4b77      	ldr	r3, [pc, #476]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 80008cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008d0:	4a75      	ldr	r2, [pc, #468]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 80008d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008da:	4b73      	ldr	r3, [pc, #460]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 80008dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	69bb      	ldr	r3, [r7, #24]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80008e8:	4b71      	ldr	r3, [pc, #452]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 80008ea:	4a72      	ldr	r2, [pc, #456]	; (8000ab4 <HAL_I2C_MspInit+0x280>)
 80008ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80008ee:	4b70      	ldr	r3, [pc, #448]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 80008f0:	2221      	movs	r2, #33	; 0x21
 80008f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f4:	4b6e      	ldr	r3, [pc, #440]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fa:	4b6d      	ldr	r3, [pc, #436]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000900:	4b6b      	ldr	r3, [pc, #428]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 8000902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000906:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000908:	4b69      	ldr	r3, [pc, #420]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090e:	4b68      	ldr	r3, [pc, #416]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000914:	4b66      	ldr	r3, [pc, #408]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800091a:	4b65      	ldr	r3, [pc, #404]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000920:	4b63      	ldr	r3, [pc, #396]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000926:	4862      	ldr	r0, [pc, #392]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 8000928:	f000 ff32 	bl	8001790 <HAL_DMA_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_I2C_MspInit+0x102>
    {
      Error_Handler();
 8000932:	f000 fa1c 	bl	8000d6e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a5d      	ldr	r2, [pc, #372]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 800093a:	63da      	str	r2, [r3, #60]	; 0x3c
 800093c:	4a5c      	ldr	r2, [pc, #368]	; (8000ab0 <HAL_I2C_MspInit+0x27c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2101      	movs	r1, #1
 8000946:	201f      	movs	r0, #31
 8000948:	f000 fe71 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800094c:	201f      	movs	r0, #31
 800094e:	f000 fe88 	bl	8001662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000952:	e0a2      	b.n	8000a9a <HAL_I2C_MspInit+0x266>
  else if(i2cHandle->Instance==I2C3)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a57      	ldr	r2, [pc, #348]	; (8000ab8 <HAL_I2C_MspInit+0x284>)
 800095a:	4293      	cmp	r3, r2
 800095c:	f040 809d 	bne.w	8000a9a <HAL_I2C_MspInit+0x266>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000960:	2308      	movs	r3, #8
 8000962:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000964:	2300      	movs	r3, #0
 8000966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096a:	f107 0320 	add.w	r3, r7, #32
 800096e:	4618      	mov	r0, r3
 8000970:	f008 f8b8 	bl	8008ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_I2C_MspInit+0x14a>
      Error_Handler();
 800097a:	f000 f9f8 	bl	8000d6e <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b4a      	ldr	r3, [pc, #296]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	4a48      	ldr	r2, [pc, #288]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098e:	4b46      	ldr	r3, [pc, #280]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	4a41      	ldr	r2, [pc, #260]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ac:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MAG_IMU_I2C3_SDA_Pin;
 80009ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c2:	2312      	movs	r3, #18
 80009c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009d4:	2304      	movs	r3, #4
 80009d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MAG_IMU_I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009de:	4619      	mov	r1, r3
 80009e0:	4836      	ldr	r0, [pc, #216]	; (8000abc <HAL_I2C_MspInit+0x288>)
 80009e2:	f004 fc53 	bl	800528c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_IMU_I2C3_SCL_Pin;
 80009e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ee:	2312      	movs	r3, #18
 80009f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a00:	2304      	movs	r3, #4
 8000a02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MAG_IMU_I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	482c      	ldr	r0, [pc, #176]	; (8000ac0 <HAL_I2C_MspInit+0x28c>)
 8000a0e:	f004 fc3d 	bl	800528c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 8000a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a18:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 8000a1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <HAL_I2C_MspInit+0x274>)
 8000a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a32:	4a25      	ldr	r2, [pc, #148]	; (8000ac8 <HAL_I2C_MspInit+0x294>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8000a36:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a38:	2249      	movs	r2, #73	; 0x49
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8000a6e:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a70:	f000 fe8e 	bl	8001790 <HAL_DMA_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_I2C_MspInit+0x24a>
      Error_Handler();
 8000a7a:	f000 f978 	bl	8000d6e <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a84:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_I2C_MspInit+0x290>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	2048      	movs	r0, #72	; 0x48
 8000a90:	f000 fdcd 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000a94:	2048      	movs	r0, #72	; 0x48
 8000a96:	f000 fde4 	bl	8001662 <HAL_NVIC_EnableIRQ>
}
 8000a9a:	bf00      	nop
 8000a9c:	37f0      	adds	r7, #240	; 0xf0
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	58020400 	.word	0x58020400
 8000ab0:	2400026c 	.word	0x2400026c
 8000ab4:	40020010 	.word	0x40020010
 8000ab8:	40005c00 	.word	0x40005c00
 8000abc:	58020800 	.word	0x58020800
 8000ac0:	58020000 	.word	0x58020000
 8000ac4:	240001a8 	.word	0x240001a8
 8000ac8:	40020028 	.word	0x40020028

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ad2:	f000 f91f 	bl	8000d14 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ad6:	4b4e      	ldr	r3, [pc, #312]	; (8000c10 <main+0x144>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d11b      	bne.n	8000b1a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ae2:	f3bf 8f4f 	dsb	sy
}
 8000ae6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae8:	f3bf 8f6f 	isb	sy
}
 8000aec:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000aee:	4b48      	ldr	r3, [pc, #288]	; (8000c10 <main+0x144>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000af6:	f3bf 8f4f 	dsb	sy
}
 8000afa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000afc:	f3bf 8f6f 	isb	sy
}
 8000b00:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b02:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <main+0x144>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a42      	ldr	r2, [pc, #264]	; (8000c10 <main+0x144>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b0e:	f3bf 8f4f 	dsb	sy
}
 8000b12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b14:	f3bf 8f6f 	isb	sy
}
 8000b18:	e000      	b.n	8000b1c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b1a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b1c:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <main+0x144>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d138      	bne.n	8000b9a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b28:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <main+0x144>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b30:	f3bf 8f4f 	dsb	sy
}
 8000b34:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b36:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <main+0x144>)
 8000b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b3c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	0b5b      	lsrs	r3, r3, #13
 8000b42:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b46:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	08db      	lsrs	r3, r3, #3
 8000b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b50:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	015a      	lsls	r2, r3, #5
 8000b56:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b5a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b60:	492b      	ldr	r1, [pc, #172]	; (8000c10 <main+0x144>)
 8000b62:	4313      	orrs	r3, r2
 8000b64:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1ef      	bne.n	8000b52 <main+0x86>
    } while(sets-- != 0U);
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	60ba      	str	r2, [r7, #8]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1e5      	bne.n	8000b48 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
}
 8000b80:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b82:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <main+0x144>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <main+0x144>)
 8000b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b8c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8e:	f3bf 8f4f 	dsb	sy
}
 8000b92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b94:	f3bf 8f6f 	isb	sy
}
 8000b98:	e000      	b.n	8000b9c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b9a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9c:	f000 fbce 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba0:	f000 f83e 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba4:	f7ff fcf8 	bl	8000598 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000ba8:	f7ff fc12 	bl	80003d0 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000bac:	f7ff fdc2 	bl	8000734 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000bb0:	f000 face 	bl	8001150 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000bb4:	f000 fb1a 	bl	80011ec <MX_TIM6_Init>
  MX_DMA_Init();
 8000bb8:	f7ff fbe2 	bl	8000380 <MX_DMA_Init>
  MX_I2C3_Init();
 8000bbc:	f7ff fdfa 	bl	80007b4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  // [For Debug, HCLK = 240MHz, SysClk= 480MHz(USED) //
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <main+0x148>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <main+0x148>)
 8000bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000bca:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <main+0x148>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <main+0x148>)
 8000bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bd6:	60d3      	str	r3, [r2, #12]
  //DWT->LAR = 0xC5ACCE55;
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <main+0x14c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <main+0x14c>)
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <main+0x14c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <main+0x14c>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <main+0x14c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]

  Create_PDOTable_ObjDictionary();
 8000bf6:	f00a f885 	bl	800ad04 <Create_PDOTable_ObjDictionary>
  Create_SDOTable_ObjDictionary();
 8000bfa:	f009 fe39 	bl	800a870 <Create_SDOTable_ObjDictionary>

  MS_enum = IDLE;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <main+0x150>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]

  Init_Imu_Ctrl();
 8000c04:	f00b fc54 	bl	800c4b0 <Init_Imu_Ctrl>
  Init_Msg_Hdlr();
 8000c08:	f00d ff7a 	bl	800eb00 <Init_Msg_Hdlr>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <main+0x140>
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00
 8000c14:	e000edf0 	.word	0xe000edf0
 8000c18:	e0001000 	.word	0xe0001000
 8000c1c:	2400d054 	.word	0x2400d054

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09c      	sub	sp, #112	; 0x70
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	224c      	movs	r2, #76	; 0x4c
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00e fc38 	bl	800f4a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2220      	movs	r2, #32
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00e fc32 	bl	800f4a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c40:	2002      	movs	r0, #2
 8000c42:	f006 ffb9 	bl	8007bb8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <SystemClock_Config+0xec>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <SystemClock_Config+0xec>)
 8000c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <SystemClock_Config+0xec>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <SystemClock_Config+0xf0>)
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <SystemClock_Config+0xf0>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <SystemClock_Config+0xf0>)
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c78:	bf00      	nop
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <SystemClock_Config+0xec>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c86:	d1f8      	bne.n	8000c7a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	2302      	movs	r3, #2
 8000c94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c96:	2302      	movs	r3, #2
 8000c98:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c9e:	23c0      	movs	r3, #192	; 0xc0
 8000ca0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000cae:	2308      	movs	r3, #8
 8000cb0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 ffb4 	bl	8007c2c <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cca:	f000 f850 	bl	8000d6e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	233f      	movs	r3, #63	; 0x3f
 8000cd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cde:	2340      	movs	r3, #64	; 0x40
 8000ce0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ce2:	2340      	movs	r3, #64	; 0x40
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cec:	2340      	movs	r3, #64	; 0x40
 8000cee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f007 fbc5 	bl	8008484 <HAL_RCC_ClockConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000d00:	f000 f835 	bl	8000d6e <Error_Handler>
  }
}
 8000d04:	bf00      	nop
 8000d06:	3770      	adds	r7, #112	; 0x70
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	58024800 	.word	0x58024800
 8000d10:	58000400 	.word	0x58000400

08000d14 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d26:	f000 fcb7 	bl	8001698 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000d32:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d36:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000d38:	230e      	movs	r3, #14
 8000d3a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d44:	2303      	movs	r3, #3
 8000d46:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d58:	463b      	mov	r3, r7
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fcd4 	bl	8001708 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d60:	2004      	movs	r0, #4
 8000d62:	f000 fcb1 	bl	80016c8 <HAL_MPU_Enable>

}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d72:	b672      	cpsid	i
}
 8000d74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <Error_Handler+0x8>

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_MspInit+0x30>)
 8000d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d84:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_MspInit+0x30>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_MspInit+0x30>)
 8000d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	58024400 	.word	0x58024400

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 fb12 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <DMA1_Stream0_IRQHandler+0x10>)
 8000e06:	f001 fccd 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2400026c 	.word	0x2400026c

08000e14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <DMA1_Stream1_IRQHandler+0x10>)
 8000e1a:	f001 fcc3 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	240001a8 	.word	0x240001a8

08000e28 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e2e:	f003 fd1f 	bl	8004870 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	240000bc 	.word	0x240000bc

08000e3c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <FDCAN1_IT1_IRQHandler+0x10>)
 8000e42:	f003 fd15 	bl	8004870 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	240000bc 	.word	0x240000bc

08000e50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <TIM3_IRQHandler+0x10>)
 8000e56:	f008 ffb9 	bl	8009dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2400d60c 	.word	0x2400d60c

08000e64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <I2C1_EV_IRQHandler+0x10>)
 8000e6a:	f004 ff7d 	bl	8005d68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24000220 	.word	0x24000220

08000e78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <TIM6_DAC_IRQHandler+0x10>)
 8000e7e:	f008 ffa5 	bl	8009dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2400d658 	.word	0x2400d658

08000e8c <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <FDCAN_CAL_IRQHandler+0x10>)
 8000e92:	f003 fced 	bl	8004870 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	240000bc 	.word	0x240000bc

08000ea0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <I2C3_EV_IRQHandler+0x10>)
 8000ea6:	f004 ff5f 	bl	8005d68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2400015c 	.word	0x2400015c

08000eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_kill>:

int _kill(int pid, int sig)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ece:	f00e fa8f 	bl	800f3f0 <__errno>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2216      	movs	r2, #22
 8000ed6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_exit>:

void _exit (int status)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe7 	bl	8000ec4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ef6:	e7fe      	b.n	8000ef6 <_exit+0x12>

08000ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00a      	b.n	8000f20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f0a:	f3af 8000 	nop.w
 8000f0e:	4601      	mov	r1, r0
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf0      	blt.n	8000f0a <_read+0x12>
	}

return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e009      	b.n	8000f58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf1      	blt.n	8000f44 <_write+0x12>
	}
	return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_close>:

int _close(int file)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	return -1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f92:	605a      	str	r2, [r3, #4]
	return 0;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_isatty>:

int _isatty(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	return 1;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f00e f9f4 	bl	800f3f0 <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	24080000 	.word	0x24080000
 8001034:	00000400 	.word	0x00000400
 8001038:	24000094 	.word	0x24000094
 800103c:	2400d6e8 	.word	0x2400d6e8

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <SystemInit+0xe4>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a36      	ldr	r2, [pc, #216]	; (8001124 <SystemInit+0xe4>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001054:	4b34      	ldr	r3, [pc, #208]	; (8001128 <SystemInit+0xe8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	2b06      	cmp	r3, #6
 800105e:	d807      	bhi.n	8001070 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001060:	4b31      	ldr	r3, [pc, #196]	; (8001128 <SystemInit+0xe8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 030f 	bic.w	r3, r3, #15
 8001068:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <SystemInit+0xe8>)
 800106a:	f043 0307 	orr.w	r3, r3, #7
 800106e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001070:	4b2e      	ldr	r3, [pc, #184]	; (800112c <SystemInit+0xec>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a2d      	ldr	r2, [pc, #180]	; (800112c <SystemInit+0xec>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <SystemInit+0xec>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <SystemInit+0xec>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4929      	ldr	r1, [pc, #164]	; (800112c <SystemInit+0xec>)
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <SystemInit+0xf0>)
 800108a:	4013      	ands	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <SystemInit+0xe8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <SystemInit+0xe8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 030f 	bic.w	r3, r3, #15
 80010a2:	4a21      	ldr	r2, [pc, #132]	; (8001128 <SystemInit+0xe8>)
 80010a4:	f043 0307 	orr.w	r3, r3, #7
 80010a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <SystemInit+0xec>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <SystemInit+0xec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <SystemInit+0xec>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <SystemInit+0xec>)
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <SystemInit+0xf4>)
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <SystemInit+0xec>)
 80010c4:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <SystemInit+0xf8>)
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <SystemInit+0xec>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <SystemInit+0xfc>)
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <SystemInit+0xec>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <SystemInit+0xec>)
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <SystemInit+0xfc>)
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <SystemInit+0xec>)
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <SystemInit+0xec>)
 80010e2:	4a16      	ldr	r2, [pc, #88]	; (800113c <SystemInit+0xfc>)
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <SystemInit+0xec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <SystemInit+0xec>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <SystemInit+0xec>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <SystemInit+0xec>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <SystemInit+0x100>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <SystemInit+0x104>)
 8001104:	4013      	ands	r3, r2
 8001106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800110a:	d202      	bcs.n	8001112 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <SystemInit+0x108>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <SystemInit+0x10c>)
 8001114:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001118:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00
 8001128:	52002000 	.word	0x52002000
 800112c:	58024400 	.word	0x58024400
 8001130:	eaf6ed7f 	.word	0xeaf6ed7f
 8001134:	02020200 	.word	0x02020200
 8001138:	01ff0000 	.word	0x01ff0000
 800113c:	01010280 	.word	0x01010280
 8001140:	5c001000 	.word	0x5c001000
 8001144:	ffff0000 	.word	0xffff0000
 8001148:	51008108 	.word	0x51008108
 800114c:	52004000 	.word	0x52004000

08001150 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM3_Init+0x94>)
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <MX_TIM3_Init+0x98>)
 8001172:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_TIM3_Init+0x94>)
 8001176:	22ef      	movs	r2, #239	; 0xef
 8001178:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_TIM3_Init+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_TIM3_Init+0x94>)
 8001182:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001186:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_TIM3_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_TIM3_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MX_TIM3_Init+0x94>)
 8001196:	f008 fd49 	bl	8009c2c <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011a0:	f7ff fde5 	bl	8000d6e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_TIM3_Init+0x94>)
 80011b2:	f008 ff2b 	bl	800a00c <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011bc:	f7ff fdd7 	bl	8000d6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_TIM3_Init+0x94>)
 80011ce:	f009 f975 	bl	800a4bc <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f7ff fdc9 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2400d60c 	.word	0x2400d60c
 80011e8:	40000400 	.word	0x40000400

080011ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_TIM6_Init+0x64>)
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <MX_TIM6_Init+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_TIM6_Init+0x64>)
 8001204:	22ef      	movs	r2, #239	; 0xef
 8001206:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_TIM6_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_TIM6_Init+0x64>)
 8001210:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001214:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_TIM6_Init+0x64>)
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_TIM6_Init+0x64>)
 800121e:	f008 fd05 	bl	8009c2c <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001228:	f7ff fda1 	bl	8000d6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_TIM6_Init+0x64>)
 800123a:	f009 f93f 	bl	800a4bc <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001244:	f7ff fd93 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2400d658 	.word	0x2400d658
 8001254:	40001000 	.word	0x40001000

08001258 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_TIM_Base_MspInit+0x84>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d117      	bne.n	800129a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 800126c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 800127c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2103      	movs	r1, #3
 800128c:	201d      	movs	r0, #29
 800128e:	f000 f9ce 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001292:	201d      	movs	r0, #29
 8001294:	f000 f9e5 	bl	8001662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001298:	e01b      	b.n	80012d2 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM6)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_TIM_Base_MspInit+0x8c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d116      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 80012a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 80012ac:	f043 0310 	orr.w	r3, r3, #16
 80012b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_TIM_Base_MspInit+0x88>)
 80012b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2102      	movs	r1, #2
 80012c6:	2036      	movs	r0, #54	; 0x36
 80012c8:	f000 f9b1 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012cc:	2036      	movs	r0, #54	; 0x36
 80012ce:	f000 f9c8 	bl	8001662 <HAL_NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40000400 	.word	0x40000400
 80012e0:	58024400 	.word	0x58024400
 80012e4:	40001000 	.word	0x40001000

080012e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001320 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012ec:	f7ff fea8 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001308:	4c0a      	ldr	r4, [pc, #40]	; (8001334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001316:	f00e f883 	bl	800f420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131a:	f7ff fbd7 	bl	8000acc <main>
  bx  lr
 800131e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001320:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001324:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001328:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800132c:	08012df8 	.word	0x08012df8
  ldr r2, =_sbss
 8001330:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001334:	2400d6e4 	.word	0x2400d6e4

08001338 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC3_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001342:	2003      	movs	r0, #3
 8001344:	f000 f968 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001348:	f007 fa52 	bl	80087f0 <HAL_RCC_GetSysClockFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_Init+0x68>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	4913      	ldr	r1, [pc, #76]	; (80013a8 <HAL_Init+0x6c>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_Init+0x68>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_Init+0x6c>)
 8001370:	5cd3      	ldrb	r3, [r2, r3]
 8001372:	f003 031f 	and.w	r3, r3, #31
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_Init+0x70>)
 800137e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_Init+0x74>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001386:	200f      	movs	r0, #15
 8001388:	f000 f814 	bl	80013b4 <HAL_InitTick>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e002      	b.n	800139c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001396:	f7ff fcef 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	58024400 	.word	0x58024400
 80013a8:	080113ac 	.word	0x080113ac
 80013ac:	24000004 	.word	0x24000004
 80013b0:	24000000 	.word	0x24000000

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_InitTick+0x60>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e021      	b.n	800140c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_InitTick+0x64>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_InitTick+0x60>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f94d 	bl	800167e <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f917 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x68>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2400000c 	.word	0x2400000c
 8001418:	24000000 	.word	0x24000000
 800141c:	24000008 	.word	0x24000008

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	2400000c 	.word	0x2400000c
 8001444:	2400d6a4 	.word	0x2400d6a4

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2400d6a4 	.word	0x2400d6a4

08001460 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetREVID+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0c1b      	lsrs	r3, r3, #16
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	5c001000 	.word	0x5c001000

08001478 <__NVIC_SetPriorityGrouping>:
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <__NVIC_SetPriorityGrouping+0x40>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x40>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	05fa0000 	.word	0x05fa0000

080014c0 <__NVIC_GetPriorityGrouping>:
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff40 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff90 	bl	800156c <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5f 	bl	8001518 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff33 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa4 	bl	80015d4 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800169c:	f3bf 8f5f 	dmb	sy
}
 80016a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <HAL_MPU_Disable+0x28>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_MPU_Disable+0x28>)
 80016a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ac:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_MPU_Disable+0x2c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	e000ed90 	.word	0xe000ed90

080016c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016d0:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <HAL_MPU_Enable+0x38>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MPU_Enable+0x3c>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <HAL_MPU_Enable+0x3c>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ec:	f3bf 8f6f 	isb	sy
}
 80016f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed90 	.word	0xe000ed90
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	785a      	ldrb	r2, [r3, #1]
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_MPU_ConfigRegion+0x84>)
 8001716:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d029      	beq.n	8001774 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001720:	4a1a      	ldr	r2, [pc, #104]	; (800178c <HAL_MPU_ConfigRegion+0x84>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7b1b      	ldrb	r3, [r3, #12]
 800172c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7adb      	ldrb	r3, [r3, #11]
 8001732:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001734:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7a9b      	ldrb	r3, [r3, #10]
 800173a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800173c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7b5b      	ldrb	r3, [r3, #13]
 8001742:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001744:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7b9b      	ldrb	r3, [r3, #14]
 800174a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800174c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7bdb      	ldrb	r3, [r3, #15]
 8001752:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001754:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7a5b      	ldrb	r3, [r3, #9]
 800175a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800175c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7a1b      	ldrb	r3, [r3, #8]
 8001762:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001764:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800176e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001770:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001772:	e005      	b.n	8001780 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_MPU_ConfigRegion+0x84>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_MPU_ConfigRegion+0x84>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed90 	.word	0xe000ed90

08001790 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff fe56 	bl	8001448 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e316      	b.n	8001dd6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a66      	ldr	r2, [pc, #408]	; (8001948 <HAL_DMA_Init+0x1b8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d04a      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a65      	ldr	r2, [pc, #404]	; (800194c <HAL_DMA_Init+0x1bc>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d045      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a63      	ldr	r2, [pc, #396]	; (8001950 <HAL_DMA_Init+0x1c0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d040      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a62      	ldr	r2, [pc, #392]	; (8001954 <HAL_DMA_Init+0x1c4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d03b      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a60      	ldr	r2, [pc, #384]	; (8001958 <HAL_DMA_Init+0x1c8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d036      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a5f      	ldr	r2, [pc, #380]	; (800195c <HAL_DMA_Init+0x1cc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d031      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a5d      	ldr	r2, [pc, #372]	; (8001960 <HAL_DMA_Init+0x1d0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d02c      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a5c      	ldr	r2, [pc, #368]	; (8001964 <HAL_DMA_Init+0x1d4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d027      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a5a      	ldr	r2, [pc, #360]	; (8001968 <HAL_DMA_Init+0x1d8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d022      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a59      	ldr	r2, [pc, #356]	; (800196c <HAL_DMA_Init+0x1dc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d01d      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a57      	ldr	r2, [pc, #348]	; (8001970 <HAL_DMA_Init+0x1e0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d018      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a56      	ldr	r2, [pc, #344]	; (8001974 <HAL_DMA_Init+0x1e4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d013      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a54      	ldr	r2, [pc, #336]	; (8001978 <HAL_DMA_Init+0x1e8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00e      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a53      	ldr	r2, [pc, #332]	; (800197c <HAL_DMA_Init+0x1ec>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d009      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a51      	ldr	r2, [pc, #324]	; (8001980 <HAL_DMA_Init+0x1f0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d004      	beq.n	8001848 <HAL_DMA_Init+0xb8>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a50      	ldr	r2, [pc, #320]	; (8001984 <HAL_DMA_Init+0x1f4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_DMA_Init+0xbc>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_DMA_Init+0xbe>
 800184c:	2300      	movs	r3, #0
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 813b 	beq.w	8001aca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a37      	ldr	r2, [pc, #220]	; (8001948 <HAL_DMA_Init+0x1b8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d04a      	beq.n	8001904 <HAL_DMA_Init+0x174>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a36      	ldr	r2, [pc, #216]	; (800194c <HAL_DMA_Init+0x1bc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d045      	beq.n	8001904 <HAL_DMA_Init+0x174>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a34      	ldr	r2, [pc, #208]	; (8001950 <HAL_DMA_Init+0x1c0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d040      	beq.n	8001904 <HAL_DMA_Init+0x174>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a33      	ldr	r2, [pc, #204]	; (8001954 <HAL_DMA_Init+0x1c4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d03b      	beq.n	8001904 <HAL_DMA_Init+0x174>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a31      	ldr	r2, [pc, #196]	; (8001958 <HAL_DMA_Init+0x1c8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d036      	beq.n	8001904 <HAL_DMA_Init+0x174>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a30      	ldr	r2, [pc, #192]	; (800195c <HAL_DMA_Init+0x1cc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d031      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a2e      	ldr	r2, [pc, #184]	; (8001960 <HAL_DMA_Init+0x1d0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d02c      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a2d      	ldr	r2, [pc, #180]	; (8001964 <HAL_DMA_Init+0x1d4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d027      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <HAL_DMA_Init+0x1d8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d022      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a2a      	ldr	r2, [pc, #168]	; (800196c <HAL_DMA_Init+0x1dc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d01d      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a28      	ldr	r2, [pc, #160]	; (8001970 <HAL_DMA_Init+0x1e0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d018      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a27      	ldr	r2, [pc, #156]	; (8001974 <HAL_DMA_Init+0x1e4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a25      	ldr	r2, [pc, #148]	; (8001978 <HAL_DMA_Init+0x1e8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00e      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a24      	ldr	r2, [pc, #144]	; (800197c <HAL_DMA_Init+0x1ec>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a22      	ldr	r2, [pc, #136]	; (8001980 <HAL_DMA_Init+0x1f0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d004      	beq.n	8001904 <HAL_DMA_Init+0x174>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a21      	ldr	r2, [pc, #132]	; (8001984 <HAL_DMA_Init+0x1f4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d108      	bne.n	8001916 <HAL_DMA_Init+0x186>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e007      	b.n	8001926 <HAL_DMA_Init+0x196>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001926:	e02f      	b.n	8001988 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001928:	f7ff fd8e 	bl	8001448 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b05      	cmp	r3, #5
 8001934:	d928      	bls.n	8001988 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2220      	movs	r2, #32
 800193a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2203      	movs	r2, #3
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e246      	b.n	8001dd6 <HAL_DMA_Init+0x646>
 8001948:	40020010 	.word	0x40020010
 800194c:	40020028 	.word	0x40020028
 8001950:	40020040 	.word	0x40020040
 8001954:	40020058 	.word	0x40020058
 8001958:	40020070 	.word	0x40020070
 800195c:	40020088 	.word	0x40020088
 8001960:	400200a0 	.word	0x400200a0
 8001964:	400200b8 	.word	0x400200b8
 8001968:	40020410 	.word	0x40020410
 800196c:	40020428 	.word	0x40020428
 8001970:	40020440 	.word	0x40020440
 8001974:	40020458 	.word	0x40020458
 8001978:	40020470 	.word	0x40020470
 800197c:	40020488 	.word	0x40020488
 8001980:	400204a0 	.word	0x400204a0
 8001984:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1c8      	bne.n	8001928 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4b83      	ldr	r3, [pc, #524]	; (8001bb0 <HAL_DMA_Init+0x420>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80019ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d107      	bne.n	80019ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	4313      	orrs	r3, r2
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80019ec:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <HAL_DMA_Init+0x424>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b71      	ldr	r3, [pc, #452]	; (8001bb8 <HAL_DMA_Init+0x428>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019f8:	d328      	bcc.n	8001a4c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b28      	cmp	r3, #40	; 0x28
 8001a00:	d903      	bls.n	8001a0a <HAL_DMA_Init+0x27a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b2e      	cmp	r3, #46	; 0x2e
 8001a08:	d917      	bls.n	8001a3a <HAL_DMA_Init+0x2aa>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8001a10:	d903      	bls.n	8001a1a <HAL_DMA_Init+0x28a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b42      	cmp	r3, #66	; 0x42
 8001a18:	d90f      	bls.n	8001a3a <HAL_DMA_Init+0x2aa>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b46      	cmp	r3, #70	; 0x46
 8001a20:	d903      	bls.n	8001a2a <HAL_DMA_Init+0x29a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b48      	cmp	r3, #72	; 0x48
 8001a28:	d907      	bls.n	8001a3a <HAL_DMA_Init+0x2aa>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b4e      	cmp	r3, #78	; 0x4e
 8001a30:	d905      	bls.n	8001a3e <HAL_DMA_Init+0x2ae>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b52      	cmp	r3, #82	; 0x52
 8001a38:	d801      	bhi.n	8001a3e <HAL_DMA_Init+0x2ae>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_DMA_Init+0x2b0>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a4a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
 8001a62:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d117      	bne.n	8001aa6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00e      	beq.n	8001aa6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f002 f82d 	bl	8003ae8 <DMA_CheckFifoParam>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2240      	movs	r2, #64	; 0x40
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e197      	b.n	8001dd6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f001 ff68 	bl	8003984 <DMA_CalcBaseAndBitshift>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	223f      	movs	r2, #63	; 0x3f
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	e0cd      	b.n	8001c66 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a3b      	ldr	r2, [pc, #236]	; (8001bbc <HAL_DMA_Init+0x42c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d022      	beq.n	8001b1a <HAL_DMA_Init+0x38a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a39      	ldr	r2, [pc, #228]	; (8001bc0 <HAL_DMA_Init+0x430>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01d      	beq.n	8001b1a <HAL_DMA_Init+0x38a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a38      	ldr	r2, [pc, #224]	; (8001bc4 <HAL_DMA_Init+0x434>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d018      	beq.n	8001b1a <HAL_DMA_Init+0x38a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a36      	ldr	r2, [pc, #216]	; (8001bc8 <HAL_DMA_Init+0x438>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_DMA_Init+0x38a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a35      	ldr	r2, [pc, #212]	; (8001bcc <HAL_DMA_Init+0x43c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d00e      	beq.n	8001b1a <HAL_DMA_Init+0x38a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <HAL_DMA_Init+0x440>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d009      	beq.n	8001b1a <HAL_DMA_Init+0x38a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a32      	ldr	r2, [pc, #200]	; (8001bd4 <HAL_DMA_Init+0x444>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d004      	beq.n	8001b1a <HAL_DMA_Init+0x38a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <HAL_DMA_Init+0x448>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_DMA_Init+0x38e>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_DMA_Init+0x390>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8097 	beq.w	8001c54 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a24      	ldr	r2, [pc, #144]	; (8001bbc <HAL_DMA_Init+0x42c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d021      	beq.n	8001b74 <HAL_DMA_Init+0x3e4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <HAL_DMA_Init+0x430>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01c      	beq.n	8001b74 <HAL_DMA_Init+0x3e4>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <HAL_DMA_Init+0x434>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d017      	beq.n	8001b74 <HAL_DMA_Init+0x3e4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <HAL_DMA_Init+0x438>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d012      	beq.n	8001b74 <HAL_DMA_Init+0x3e4>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <HAL_DMA_Init+0x43c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00d      	beq.n	8001b74 <HAL_DMA_Init+0x3e4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <HAL_DMA_Init+0x440>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d008      	beq.n	8001b74 <HAL_DMA_Init+0x3e4>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <HAL_DMA_Init+0x444>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_Init+0x3e4>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_DMA_Init+0x448>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_DMA_Init+0x44c>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b40      	cmp	r3, #64	; 0x40
 8001b9c:	d020      	beq.n	8001be0 <HAL_DMA_Init+0x450>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b80      	cmp	r3, #128	; 0x80
 8001ba4:	d102      	bne.n	8001bac <HAL_DMA_Init+0x41c>
 8001ba6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001baa:	e01a      	b.n	8001be2 <HAL_DMA_Init+0x452>
 8001bac:	2300      	movs	r3, #0
 8001bae:	e018      	b.n	8001be2 <HAL_DMA_Init+0x452>
 8001bb0:	fe10803f 	.word	0xfe10803f
 8001bb4:	5c001000 	.word	0x5c001000
 8001bb8:	ffff0000 	.word	0xffff0000
 8001bbc:	58025408 	.word	0x58025408
 8001bc0:	5802541c 	.word	0x5802541c
 8001bc4:	58025430 	.word	0x58025430
 8001bc8:	58025444 	.word	0x58025444
 8001bcc:	58025458 	.word	0x58025458
 8001bd0:	5802546c 	.word	0x5802546c
 8001bd4:	58025480 	.word	0x58025480
 8001bd8:	58025494 	.word	0x58025494
 8001bdc:	fffe000f 	.word	0xfffe000f
 8001be0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68d2      	ldr	r2, [r2, #12]
 8001be6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001be8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c10:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b6e      	ldr	r3, [pc, #440]	; (8001de0 <HAL_DMA_Init+0x650>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a6e      	ldr	r2, [pc, #440]	; (8001de4 <HAL_DMA_Init+0x654>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	009a      	lsls	r2, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f001 fea3 	bl	8003984 <DMA_CalcBaseAndBitshift>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e008      	b.n	8001c66 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0b7      	b.n	8001dd6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a5f      	ldr	r2, [pc, #380]	; (8001de8 <HAL_DMA_Init+0x658>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d072      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a5d      	ldr	r2, [pc, #372]	; (8001dec <HAL_DMA_Init+0x65c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d06d      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5c      	ldr	r2, [pc, #368]	; (8001df0 <HAL_DMA_Init+0x660>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d068      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5a      	ldr	r2, [pc, #360]	; (8001df4 <HAL_DMA_Init+0x664>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d063      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a59      	ldr	r2, [pc, #356]	; (8001df8 <HAL_DMA_Init+0x668>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d05e      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a57      	ldr	r2, [pc, #348]	; (8001dfc <HAL_DMA_Init+0x66c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d059      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a56      	ldr	r2, [pc, #344]	; (8001e00 <HAL_DMA_Init+0x670>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d054      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_DMA_Init+0x674>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d04f      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <HAL_DMA_Init+0x678>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d04a      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_DMA_Init+0x67c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d045      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a50      	ldr	r2, [pc, #320]	; (8001e10 <HAL_DMA_Init+0x680>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d040      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_DMA_Init+0x684>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d03b      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a4d      	ldr	r2, [pc, #308]	; (8001e18 <HAL_DMA_Init+0x688>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d036      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_DMA_Init+0x68c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d031      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a4a      	ldr	r2, [pc, #296]	; (8001e20 <HAL_DMA_Init+0x690>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d02c      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a48      	ldr	r2, [pc, #288]	; (8001e24 <HAL_DMA_Init+0x694>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d027      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a47      	ldr	r2, [pc, #284]	; (8001e28 <HAL_DMA_Init+0x698>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d022      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a45      	ldr	r2, [pc, #276]	; (8001e2c <HAL_DMA_Init+0x69c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01d      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a44      	ldr	r2, [pc, #272]	; (8001e30 <HAL_DMA_Init+0x6a0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d018      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a42      	ldr	r2, [pc, #264]	; (8001e34 <HAL_DMA_Init+0x6a4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a41      	ldr	r2, [pc, #260]	; (8001e38 <HAL_DMA_Init+0x6a8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00e      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a3f      	ldr	r2, [pc, #252]	; (8001e3c <HAL_DMA_Init+0x6ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d009      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a3e      	ldr	r2, [pc, #248]	; (8001e40 <HAL_DMA_Init+0x6b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d004      	beq.n	8001d56 <HAL_DMA_Init+0x5c6>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a3c      	ldr	r2, [pc, #240]	; (8001e44 <HAL_DMA_Init+0x6b4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_DMA_Init+0x5ca>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_DMA_Init+0x5cc>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d032      	beq.n	8001dc6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f001 ff3d 	bl	8003be0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b80      	cmp	r3, #128	; 0x80
 8001d6c:	d102      	bne.n	8001d74 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d88:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d010      	beq.n	8001db4 <HAL_DMA_Init+0x624>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d80c      	bhi.n	8001db4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f001 ffba 	bl	8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	e008      	b.n	8001dc6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	a7fdabf8 	.word	0xa7fdabf8
 8001de4:	cccccccd 	.word	0xcccccccd
 8001de8:	40020010 	.word	0x40020010
 8001dec:	40020028 	.word	0x40020028
 8001df0:	40020040 	.word	0x40020040
 8001df4:	40020058 	.word	0x40020058
 8001df8:	40020070 	.word	0x40020070
 8001dfc:	40020088 	.word	0x40020088
 8001e00:	400200a0 	.word	0x400200a0
 8001e04:	400200b8 	.word	0x400200b8
 8001e08:	40020410 	.word	0x40020410
 8001e0c:	40020428 	.word	0x40020428
 8001e10:	40020440 	.word	0x40020440
 8001e14:	40020458 	.word	0x40020458
 8001e18:	40020470 	.word	0x40020470
 8001e1c:	40020488 	.word	0x40020488
 8001e20:	400204a0 	.word	0x400204a0
 8001e24:	400204b8 	.word	0x400204b8
 8001e28:	58025408 	.word	0x58025408
 8001e2c:	5802541c 	.word	0x5802541c
 8001e30:	58025430 	.word	0x58025430
 8001e34:	58025444 	.word	0x58025444
 8001e38:	58025458 	.word	0x58025458
 8001e3c:	5802546c 	.word	0x5802546c
 8001e40:	58025480 	.word	0x58025480
 8001e44:	58025494 	.word	0x58025494

08001e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e226      	b.n	80022b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_DMA_Start_IT+0x2a>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e21f      	b.n	80022b2 <HAL_DMA_Start_IT+0x46a>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	f040 820a 	bne.w	800229c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a68      	ldr	r2, [pc, #416]	; (800203c <HAL_DMA_Start_IT+0x1f4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d04a      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a66      	ldr	r2, [pc, #408]	; (8002040 <HAL_DMA_Start_IT+0x1f8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d045      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a65      	ldr	r2, [pc, #404]	; (8002044 <HAL_DMA_Start_IT+0x1fc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d040      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a63      	ldr	r2, [pc, #396]	; (8002048 <HAL_DMA_Start_IT+0x200>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d03b      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a62      	ldr	r2, [pc, #392]	; (800204c <HAL_DMA_Start_IT+0x204>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d036      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a60      	ldr	r2, [pc, #384]	; (8002050 <HAL_DMA_Start_IT+0x208>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d031      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a5f      	ldr	r2, [pc, #380]	; (8002054 <HAL_DMA_Start_IT+0x20c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d02c      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <HAL_DMA_Start_IT+0x210>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d027      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a5c      	ldr	r2, [pc, #368]	; (800205c <HAL_DMA_Start_IT+0x214>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d022      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a5a      	ldr	r2, [pc, #360]	; (8002060 <HAL_DMA_Start_IT+0x218>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01d      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a59      	ldr	r2, [pc, #356]	; (8002064 <HAL_DMA_Start_IT+0x21c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d018      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a57      	ldr	r2, [pc, #348]	; (8002068 <HAL_DMA_Start_IT+0x220>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a56      	ldr	r2, [pc, #344]	; (800206c <HAL_DMA_Start_IT+0x224>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00e      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a54      	ldr	r2, [pc, #336]	; (8002070 <HAL_DMA_Start_IT+0x228>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d009      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a53      	ldr	r2, [pc, #332]	; (8002074 <HAL_DMA_Start_IT+0x22c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d004      	beq.n	8001f36 <HAL_DMA_Start_IT+0xee>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a51      	ldr	r2, [pc, #324]	; (8002078 <HAL_DMA_Start_IT+0x230>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d108      	bne.n	8001f48 <HAL_DMA_Start_IT+0x100>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0201 	bic.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e007      	b.n	8001f58 <HAL_DMA_Start_IT+0x110>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f001 fb64 	bl	800362c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a34      	ldr	r2, [pc, #208]	; (800203c <HAL_DMA_Start_IT+0x1f4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d04a      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a33      	ldr	r2, [pc, #204]	; (8002040 <HAL_DMA_Start_IT+0x1f8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d045      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a31      	ldr	r2, [pc, #196]	; (8002044 <HAL_DMA_Start_IT+0x1fc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d040      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a30      	ldr	r2, [pc, #192]	; (8002048 <HAL_DMA_Start_IT+0x200>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d03b      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2e      	ldr	r2, [pc, #184]	; (800204c <HAL_DMA_Start_IT+0x204>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d036      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_DMA_Start_IT+0x208>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d031      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_DMA_Start_IT+0x20c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d02c      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <HAL_DMA_Start_IT+0x210>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d027      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	; (800205c <HAL_DMA_Start_IT+0x214>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d022      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a27      	ldr	r2, [pc, #156]	; (8002060 <HAL_DMA_Start_IT+0x218>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d01d      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a25      	ldr	r2, [pc, #148]	; (8002064 <HAL_DMA_Start_IT+0x21c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d018      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_DMA_Start_IT+0x220>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_DMA_Start_IT+0x224>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00e      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_DMA_Start_IT+0x228>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d009      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_DMA_Start_IT+0x22c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_DMA_Start_IT+0x1bc>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <HAL_DMA_Start_IT+0x230>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_DMA_Start_IT+0x1c0>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_DMA_Start_IT+0x1c2>
 8002008:	2300      	movs	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d036      	beq.n	800207c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 021e 	bic.w	r2, r3, #30
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0216 	orr.w	r2, r2, #22
 8002020:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d03e      	beq.n	80020a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0208 	orr.w	r2, r2, #8
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e035      	b.n	80020a8 <HAL_DMA_Start_IT+0x260>
 800203c:	40020010 	.word	0x40020010
 8002040:	40020028 	.word	0x40020028
 8002044:	40020040 	.word	0x40020040
 8002048:	40020058 	.word	0x40020058
 800204c:	40020070 	.word	0x40020070
 8002050:	40020088 	.word	0x40020088
 8002054:	400200a0 	.word	0x400200a0
 8002058:	400200b8 	.word	0x400200b8
 800205c:	40020410 	.word	0x40020410
 8002060:	40020428 	.word	0x40020428
 8002064:	40020440 	.word	0x40020440
 8002068:	40020458 	.word	0x40020458
 800206c:	40020470 	.word	0x40020470
 8002070:	40020488 	.word	0x40020488
 8002074:	400204a0 	.word	0x400204a0
 8002078:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 020e 	bic.w	r2, r3, #14
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 020a 	orr.w	r2, r2, #10
 800208e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0204 	orr.w	r2, r2, #4
 80020a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a83      	ldr	r2, [pc, #524]	; (80022bc <HAL_DMA_Start_IT+0x474>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d072      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a82      	ldr	r2, [pc, #520]	; (80022c0 <HAL_DMA_Start_IT+0x478>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d06d      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a80      	ldr	r2, [pc, #512]	; (80022c4 <HAL_DMA_Start_IT+0x47c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d068      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <HAL_DMA_Start_IT+0x480>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d063      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a7d      	ldr	r2, [pc, #500]	; (80022cc <HAL_DMA_Start_IT+0x484>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d05e      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7c      	ldr	r2, [pc, #496]	; (80022d0 <HAL_DMA_Start_IT+0x488>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d059      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <HAL_DMA_Start_IT+0x48c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d054      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a79      	ldr	r2, [pc, #484]	; (80022d8 <HAL_DMA_Start_IT+0x490>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d04f      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a77      	ldr	r2, [pc, #476]	; (80022dc <HAL_DMA_Start_IT+0x494>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04a      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a76      	ldr	r2, [pc, #472]	; (80022e0 <HAL_DMA_Start_IT+0x498>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d045      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a74      	ldr	r2, [pc, #464]	; (80022e4 <HAL_DMA_Start_IT+0x49c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d040      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a73      	ldr	r2, [pc, #460]	; (80022e8 <HAL_DMA_Start_IT+0x4a0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d03b      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a71      	ldr	r2, [pc, #452]	; (80022ec <HAL_DMA_Start_IT+0x4a4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d036      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a70      	ldr	r2, [pc, #448]	; (80022f0 <HAL_DMA_Start_IT+0x4a8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d031      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a6e      	ldr	r2, [pc, #440]	; (80022f4 <HAL_DMA_Start_IT+0x4ac>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02c      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <HAL_DMA_Start_IT+0x4b0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d027      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a6b      	ldr	r2, [pc, #428]	; (80022fc <HAL_DMA_Start_IT+0x4b4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d022      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_DMA_Start_IT+0x4b8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d01d      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a68      	ldr	r2, [pc, #416]	; (8002304 <HAL_DMA_Start_IT+0x4bc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d018      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a67      	ldr	r2, [pc, #412]	; (8002308 <HAL_DMA_Start_IT+0x4c0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a65      	ldr	r2, [pc, #404]	; (800230c <HAL_DMA_Start_IT+0x4c4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00e      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a64      	ldr	r2, [pc, #400]	; (8002310 <HAL_DMA_Start_IT+0x4c8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d009      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a62      	ldr	r2, [pc, #392]	; (8002314 <HAL_DMA_Start_IT+0x4cc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d004      	beq.n	8002198 <HAL_DMA_Start_IT+0x350>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a61      	ldr	r2, [pc, #388]	; (8002318 <HAL_DMA_Start_IT+0x4d0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_DMA_Start_IT+0x354>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_DMA_Start_IT+0x356>
 800219c:	2300      	movs	r3, #0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01a      	beq.n	80021d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a37      	ldr	r2, [pc, #220]	; (80022bc <HAL_DMA_Start_IT+0x474>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d04a      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a36      	ldr	r2, [pc, #216]	; (80022c0 <HAL_DMA_Start_IT+0x478>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d045      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <HAL_DMA_Start_IT+0x47c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d040      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a33      	ldr	r2, [pc, #204]	; (80022c8 <HAL_DMA_Start_IT+0x480>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d03b      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a31      	ldr	r2, [pc, #196]	; (80022cc <HAL_DMA_Start_IT+0x484>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d036      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a30      	ldr	r2, [pc, #192]	; (80022d0 <HAL_DMA_Start_IT+0x488>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d031      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a2e      	ldr	r2, [pc, #184]	; (80022d4 <HAL_DMA_Start_IT+0x48c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d02c      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a2d      	ldr	r2, [pc, #180]	; (80022d8 <HAL_DMA_Start_IT+0x490>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d027      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <HAL_DMA_Start_IT+0x494>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d022      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <HAL_DMA_Start_IT+0x498>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d01d      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <HAL_DMA_Start_IT+0x49c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d018      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <HAL_DMA_Start_IT+0x4a0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <HAL_DMA_Start_IT+0x4a4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00e      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <HAL_DMA_Start_IT+0x4a8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <HAL_DMA_Start_IT+0x4ac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d004      	beq.n	8002278 <HAL_DMA_Start_IT+0x430>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_DMA_Start_IT+0x4b0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d108      	bne.n	800228a <HAL_DMA_Start_IT+0x442>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e012      	b.n	80022b0 <HAL_DMA_Start_IT+0x468>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e009      	b.n	80022b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40020010 	.word	0x40020010
 80022c0:	40020028 	.word	0x40020028
 80022c4:	40020040 	.word	0x40020040
 80022c8:	40020058 	.word	0x40020058
 80022cc:	40020070 	.word	0x40020070
 80022d0:	40020088 	.word	0x40020088
 80022d4:	400200a0 	.word	0x400200a0
 80022d8:	400200b8 	.word	0x400200b8
 80022dc:	40020410 	.word	0x40020410
 80022e0:	40020428 	.word	0x40020428
 80022e4:	40020440 	.word	0x40020440
 80022e8:	40020458 	.word	0x40020458
 80022ec:	40020470 	.word	0x40020470
 80022f0:	40020488 	.word	0x40020488
 80022f4:	400204a0 	.word	0x400204a0
 80022f8:	400204b8 	.word	0x400204b8
 80022fc:	58025408 	.word	0x58025408
 8002300:	5802541c 	.word	0x5802541c
 8002304:	58025430 	.word	0x58025430
 8002308:	58025444 	.word	0x58025444
 800230c:	58025458 	.word	0x58025458
 8002310:	5802546c 	.word	0x5802546c
 8002314:	58025480 	.word	0x58025480
 8002318:	58025494 	.word	0x58025494

0800231c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e205      	b.n	800273a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e1fa      	b.n	800273a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a8c      	ldr	r2, [pc, #560]	; (800257c <HAL_DMA_Abort_IT+0x260>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d04a      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a8b      	ldr	r2, [pc, #556]	; (8002580 <HAL_DMA_Abort_IT+0x264>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d045      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a89      	ldr	r2, [pc, #548]	; (8002584 <HAL_DMA_Abort_IT+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d040      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a88      	ldr	r2, [pc, #544]	; (8002588 <HAL_DMA_Abort_IT+0x26c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d03b      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a86      	ldr	r2, [pc, #536]	; (800258c <HAL_DMA_Abort_IT+0x270>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d036      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a85      	ldr	r2, [pc, #532]	; (8002590 <HAL_DMA_Abort_IT+0x274>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d031      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a83      	ldr	r2, [pc, #524]	; (8002594 <HAL_DMA_Abort_IT+0x278>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d02c      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a82      	ldr	r2, [pc, #520]	; (8002598 <HAL_DMA_Abort_IT+0x27c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d027      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a80      	ldr	r2, [pc, #512]	; (800259c <HAL_DMA_Abort_IT+0x280>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d022      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7f      	ldr	r2, [pc, #508]	; (80025a0 <HAL_DMA_Abort_IT+0x284>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d01d      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7d      	ldr	r2, [pc, #500]	; (80025a4 <HAL_DMA_Abort_IT+0x288>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d018      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a7c      	ldr	r2, [pc, #496]	; (80025a8 <HAL_DMA_Abort_IT+0x28c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a7a      	ldr	r2, [pc, #488]	; (80025ac <HAL_DMA_Abort_IT+0x290>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00e      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a79      	ldr	r2, [pc, #484]	; (80025b0 <HAL_DMA_Abort_IT+0x294>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a77      	ldr	r2, [pc, #476]	; (80025b4 <HAL_DMA_Abort_IT+0x298>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_DMA_Abort_IT+0xc8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a76      	ldr	r2, [pc, #472]	; (80025b8 <HAL_DMA_Abort_IT+0x29c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d101      	bne.n	80023e8 <HAL_DMA_Abort_IT+0xcc>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_DMA_Abort_IT+0xce>
 80023e8:	2300      	movs	r3, #0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d065      	beq.n	80024ba <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2204      	movs	r2, #4
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a60      	ldr	r2, [pc, #384]	; (800257c <HAL_DMA_Abort_IT+0x260>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d04a      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a5e      	ldr	r2, [pc, #376]	; (8002580 <HAL_DMA_Abort_IT+0x264>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d045      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a5d      	ldr	r2, [pc, #372]	; (8002584 <HAL_DMA_Abort_IT+0x268>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d040      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a5b      	ldr	r2, [pc, #364]	; (8002588 <HAL_DMA_Abort_IT+0x26c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d03b      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a5a      	ldr	r2, [pc, #360]	; (800258c <HAL_DMA_Abort_IT+0x270>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d036      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a58      	ldr	r2, [pc, #352]	; (8002590 <HAL_DMA_Abort_IT+0x274>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d031      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a57      	ldr	r2, [pc, #348]	; (8002594 <HAL_DMA_Abort_IT+0x278>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d02c      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a55      	ldr	r2, [pc, #340]	; (8002598 <HAL_DMA_Abort_IT+0x27c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d027      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a54      	ldr	r2, [pc, #336]	; (800259c <HAL_DMA_Abort_IT+0x280>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d022      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a52      	ldr	r2, [pc, #328]	; (80025a0 <HAL_DMA_Abort_IT+0x284>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01d      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a51      	ldr	r2, [pc, #324]	; (80025a4 <HAL_DMA_Abort_IT+0x288>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d018      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a4f      	ldr	r2, [pc, #316]	; (80025a8 <HAL_DMA_Abort_IT+0x28c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a4e      	ldr	r2, [pc, #312]	; (80025ac <HAL_DMA_Abort_IT+0x290>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00e      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <HAL_DMA_Abort_IT+0x294>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d009      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <HAL_DMA_Abort_IT+0x298>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d004      	beq.n	8002496 <HAL_DMA_Abort_IT+0x17a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a49      	ldr	r2, [pc, #292]	; (80025b8 <HAL_DMA_Abort_IT+0x29c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d108      	bne.n	80024a8 <HAL_DMA_Abort_IT+0x18c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e147      	b.n	8002738 <HAL_DMA_Abort_IT+0x41c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e13e      	b.n	8002738 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 020e 	bic.w	r2, r2, #14
 80024c8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2b      	ldr	r2, [pc, #172]	; (800257c <HAL_DMA_Abort_IT+0x260>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d04a      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a29      	ldr	r2, [pc, #164]	; (8002580 <HAL_DMA_Abort_IT+0x264>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d045      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a28      	ldr	r2, [pc, #160]	; (8002584 <HAL_DMA_Abort_IT+0x268>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d040      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <HAL_DMA_Abort_IT+0x26c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d03b      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a25      	ldr	r2, [pc, #148]	; (800258c <HAL_DMA_Abort_IT+0x270>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d036      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <HAL_DMA_Abort_IT+0x274>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d031      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a22      	ldr	r2, [pc, #136]	; (8002594 <HAL_DMA_Abort_IT+0x278>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d02c      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <HAL_DMA_Abort_IT+0x27c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d027      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_DMA_Abort_IT+0x280>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d022      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <HAL_DMA_Abort_IT+0x284>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01d      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <HAL_DMA_Abort_IT+0x288>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d018      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <HAL_DMA_Abort_IT+0x28c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_DMA_Abort_IT+0x290>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_DMA_Abort_IT+0x294>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_DMA_Abort_IT+0x298>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_DMA_Abort_IT+0x24e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_DMA_Abort_IT+0x29c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d128      	bne.n	80025bc <HAL_DMA_Abort_IT+0x2a0>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e027      	b.n	80025cc <HAL_DMA_Abort_IT+0x2b0>
 800257c:	40020010 	.word	0x40020010
 8002580:	40020028 	.word	0x40020028
 8002584:	40020040 	.word	0x40020040
 8002588:	40020058 	.word	0x40020058
 800258c:	40020070 	.word	0x40020070
 8002590:	40020088 	.word	0x40020088
 8002594:	400200a0 	.word	0x400200a0
 8002598:	400200b8 	.word	0x400200b8
 800259c:	40020410 	.word	0x40020410
 80025a0:	40020428 	.word	0x40020428
 80025a4:	40020440 	.word	0x40020440
 80025a8:	40020458 	.word	0x40020458
 80025ac:	40020470 	.word	0x40020470
 80025b0:	40020488 	.word	0x40020488
 80025b4:	400204a0 	.word	0x400204a0
 80025b8:	400204b8 	.word	0x400204b8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a5c      	ldr	r2, [pc, #368]	; (8002744 <HAL_DMA_Abort_IT+0x428>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d072      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5b      	ldr	r2, [pc, #364]	; (8002748 <HAL_DMA_Abort_IT+0x42c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d06d      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a59      	ldr	r2, [pc, #356]	; (800274c <HAL_DMA_Abort_IT+0x430>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d068      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a58      	ldr	r2, [pc, #352]	; (8002750 <HAL_DMA_Abort_IT+0x434>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d063      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a56      	ldr	r2, [pc, #344]	; (8002754 <HAL_DMA_Abort_IT+0x438>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d05e      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a55      	ldr	r2, [pc, #340]	; (8002758 <HAL_DMA_Abort_IT+0x43c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d059      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a53      	ldr	r2, [pc, #332]	; (800275c <HAL_DMA_Abort_IT+0x440>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d054      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a52      	ldr	r2, [pc, #328]	; (8002760 <HAL_DMA_Abort_IT+0x444>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d04f      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a50      	ldr	r2, [pc, #320]	; (8002764 <HAL_DMA_Abort_IT+0x448>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d04a      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4f      	ldr	r2, [pc, #316]	; (8002768 <HAL_DMA_Abort_IT+0x44c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d045      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a4d      	ldr	r2, [pc, #308]	; (800276c <HAL_DMA_Abort_IT+0x450>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d040      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_DMA_Abort_IT+0x454>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d03b      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a4a      	ldr	r2, [pc, #296]	; (8002774 <HAL_DMA_Abort_IT+0x458>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d036      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a49      	ldr	r2, [pc, #292]	; (8002778 <HAL_DMA_Abort_IT+0x45c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d031      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a47      	ldr	r2, [pc, #284]	; (800277c <HAL_DMA_Abort_IT+0x460>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d02c      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a46      	ldr	r2, [pc, #280]	; (8002780 <HAL_DMA_Abort_IT+0x464>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d027      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a44      	ldr	r2, [pc, #272]	; (8002784 <HAL_DMA_Abort_IT+0x468>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d022      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a43      	ldr	r2, [pc, #268]	; (8002788 <HAL_DMA_Abort_IT+0x46c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d01d      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a41      	ldr	r2, [pc, #260]	; (800278c <HAL_DMA_Abort_IT+0x470>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d018      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a40      	ldr	r2, [pc, #256]	; (8002790 <HAL_DMA_Abort_IT+0x474>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a3e      	ldr	r2, [pc, #248]	; (8002794 <HAL_DMA_Abort_IT+0x478>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a3d      	ldr	r2, [pc, #244]	; (8002798 <HAL_DMA_Abort_IT+0x47c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a3b      	ldr	r2, [pc, #236]	; (800279c <HAL_DMA_Abort_IT+0x480>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_Abort_IT+0x3a0>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <HAL_DMA_Abort_IT+0x484>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d101      	bne.n	80026c0 <HAL_DMA_Abort_IT+0x3a4>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_DMA_Abort_IT+0x3a6>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d028      	beq.n	8002718 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2201      	movs	r2, #1
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80026f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800270c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002716:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40020010 	.word	0x40020010
 8002748:	40020028 	.word	0x40020028
 800274c:	40020040 	.word	0x40020040
 8002750:	40020058 	.word	0x40020058
 8002754:	40020070 	.word	0x40020070
 8002758:	40020088 	.word	0x40020088
 800275c:	400200a0 	.word	0x400200a0
 8002760:	400200b8 	.word	0x400200b8
 8002764:	40020410 	.word	0x40020410
 8002768:	40020428 	.word	0x40020428
 800276c:	40020440 	.word	0x40020440
 8002770:	40020458 	.word	0x40020458
 8002774:	40020470 	.word	0x40020470
 8002778:	40020488 	.word	0x40020488
 800277c:	400204a0 	.word	0x400204a0
 8002780:	400204b8 	.word	0x400204b8
 8002784:	58025408 	.word	0x58025408
 8002788:	5802541c 	.word	0x5802541c
 800278c:	58025430 	.word	0x58025430
 8002790:	58025444 	.word	0x58025444
 8002794:	58025458 	.word	0x58025458
 8002798:	5802546c 	.word	0x5802546c
 800279c:	58025480 	.word	0x58025480
 80027a0:	58025494 	.word	0x58025494

080027a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027b0:	4b67      	ldr	r3, [pc, #412]	; (8002950 <HAL_DMA_IRQHandler+0x1ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a67      	ldr	r2, [pc, #412]	; (8002954 <HAL_DMA_IRQHandler+0x1b0>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0a9b      	lsrs	r3, r3, #10
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5f      	ldr	r2, [pc, #380]	; (8002958 <HAL_DMA_IRQHandler+0x1b4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d04a      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a5d      	ldr	r2, [pc, #372]	; (800295c <HAL_DMA_IRQHandler+0x1b8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d045      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5c      	ldr	r2, [pc, #368]	; (8002960 <HAL_DMA_IRQHandler+0x1bc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d040      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a5a      	ldr	r2, [pc, #360]	; (8002964 <HAL_DMA_IRQHandler+0x1c0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d03b      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a59      	ldr	r2, [pc, #356]	; (8002968 <HAL_DMA_IRQHandler+0x1c4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d036      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a57      	ldr	r2, [pc, #348]	; (800296c <HAL_DMA_IRQHandler+0x1c8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d031      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a56      	ldr	r2, [pc, #344]	; (8002970 <HAL_DMA_IRQHandler+0x1cc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d02c      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a54      	ldr	r2, [pc, #336]	; (8002974 <HAL_DMA_IRQHandler+0x1d0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d027      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a53      	ldr	r2, [pc, #332]	; (8002978 <HAL_DMA_IRQHandler+0x1d4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a51      	ldr	r2, [pc, #324]	; (800297c <HAL_DMA_IRQHandler+0x1d8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01d      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a50      	ldr	r2, [pc, #320]	; (8002980 <HAL_DMA_IRQHandler+0x1dc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d018      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a4e      	ldr	r2, [pc, #312]	; (8002984 <HAL_DMA_IRQHandler+0x1e0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a4d      	ldr	r2, [pc, #308]	; (8002988 <HAL_DMA_IRQHandler+0x1e4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00e      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a4b      	ldr	r2, [pc, #300]	; (800298c <HAL_DMA_IRQHandler+0x1e8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d009      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <HAL_DMA_IRQHandler+0x1ec>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d004      	beq.n	8002876 <HAL_DMA_IRQHandler+0xd2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a48      	ldr	r2, [pc, #288]	; (8002994 <HAL_DMA_IRQHandler+0x1f0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_DMA_IRQHandler+0xd6>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_DMA_IRQHandler+0xd8>
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 842b 	beq.w	80030d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2208      	movs	r2, #8
 800288c:	409a      	lsls	r2, r3
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80a2 	beq.w	80029dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2e      	ldr	r2, [pc, #184]	; (8002958 <HAL_DMA_IRQHandler+0x1b4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d04a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_DMA_IRQHandler+0x1b8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d045      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <HAL_DMA_IRQHandler+0x1bc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d040      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <HAL_DMA_IRQHandler+0x1c0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d03b      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a28      	ldr	r2, [pc, #160]	; (8002968 <HAL_DMA_IRQHandler+0x1c4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d036      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_DMA_IRQHandler+0x1c8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d031      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a25      	ldr	r2, [pc, #148]	; (8002970 <HAL_DMA_IRQHandler+0x1cc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d02c      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a24      	ldr	r2, [pc, #144]	; (8002974 <HAL_DMA_IRQHandler+0x1d0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d027      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_DMA_IRQHandler+0x1d4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d022      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_DMA_IRQHandler+0x1d8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d01d      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_DMA_IRQHandler+0x1dc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d018      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_DMA_IRQHandler+0x1e0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_DMA_IRQHandler+0x1e4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00e      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_DMA_IRQHandler+0x1e8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d009      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_DMA_IRQHandler+0x1ec>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_DMA_IRQHandler+0x194>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_DMA_IRQHandler+0x1f0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d12f      	bne.n	8002998 <HAL_DMA_IRQHandler+0x1f4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e02e      	b.n	80029ac <HAL_DMA_IRQHandler+0x208>
 800294e:	bf00      	nop
 8002950:	24000000 	.word	0x24000000
 8002954:	1b4e81b5 	.word	0x1b4e81b5
 8002958:	40020010 	.word	0x40020010
 800295c:	40020028 	.word	0x40020028
 8002960:	40020040 	.word	0x40020040
 8002964:	40020058 	.word	0x40020058
 8002968:	40020070 	.word	0x40020070
 800296c:	40020088 	.word	0x40020088
 8002970:	400200a0 	.word	0x400200a0
 8002974:	400200b8 	.word	0x400200b8
 8002978:	40020410 	.word	0x40020410
 800297c:	40020428 	.word	0x40020428
 8002980:	40020440 	.word	0x40020440
 8002984:	40020458 	.word	0x40020458
 8002988:	40020470 	.word	0x40020470
 800298c:	40020488 	.word	0x40020488
 8002990:	400204a0 	.word	0x400204a0
 8002994:	400204b8 	.word	0x400204b8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d015      	beq.n	80029dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0204 	bic.w	r2, r2, #4
 80029be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	2208      	movs	r2, #8
 80029ca:	409a      	lsls	r2, r3
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d06e      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a69      	ldr	r2, [pc, #420]	; (8002b9c <HAL_DMA_IRQHandler+0x3f8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d04a      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a67      	ldr	r2, [pc, #412]	; (8002ba0 <HAL_DMA_IRQHandler+0x3fc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d045      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a66      	ldr	r2, [pc, #408]	; (8002ba4 <HAL_DMA_IRQHandler+0x400>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d040      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a64      	ldr	r2, [pc, #400]	; (8002ba8 <HAL_DMA_IRQHandler+0x404>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d03b      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a63      	ldr	r2, [pc, #396]	; (8002bac <HAL_DMA_IRQHandler+0x408>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d036      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a61      	ldr	r2, [pc, #388]	; (8002bb0 <HAL_DMA_IRQHandler+0x40c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d031      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a60      	ldr	r2, [pc, #384]	; (8002bb4 <HAL_DMA_IRQHandler+0x410>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d02c      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5e      	ldr	r2, [pc, #376]	; (8002bb8 <HAL_DMA_IRQHandler+0x414>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d027      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a5d      	ldr	r2, [pc, #372]	; (8002bbc <HAL_DMA_IRQHandler+0x418>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d022      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a5b      	ldr	r2, [pc, #364]	; (8002bc0 <HAL_DMA_IRQHandler+0x41c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01d      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5a      	ldr	r2, [pc, #360]	; (8002bc4 <HAL_DMA_IRQHandler+0x420>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d018      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_DMA_IRQHandler+0x424>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a57      	ldr	r2, [pc, #348]	; (8002bcc <HAL_DMA_IRQHandler+0x428>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00e      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a55      	ldr	r2, [pc, #340]	; (8002bd0 <HAL_DMA_IRQHandler+0x42c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d009      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a54      	ldr	r2, [pc, #336]	; (8002bd4 <HAL_DMA_IRQHandler+0x430>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2ee>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_DMA_IRQHandler+0x434>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10a      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x304>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e003      	b.n	8002ab0 <HAL_DMA_IRQHandler+0x30c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2201      	movs	r2, #1
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	f043 0202 	orr.w	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	2204      	movs	r2, #4
 8002ada:	409a      	lsls	r2, r3
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 808f 	beq.w	8002c04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2c      	ldr	r2, [pc, #176]	; (8002b9c <HAL_DMA_IRQHandler+0x3f8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d04a      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <HAL_DMA_IRQHandler+0x3fc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d045      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <HAL_DMA_IRQHandler+0x400>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d040      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <HAL_DMA_IRQHandler+0x404>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d03b      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a26      	ldr	r2, [pc, #152]	; (8002bac <HAL_DMA_IRQHandler+0x408>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d036      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <HAL_DMA_IRQHandler+0x40c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d031      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <HAL_DMA_IRQHandler+0x410>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d02c      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <HAL_DMA_IRQHandler+0x414>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d027      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <HAL_DMA_IRQHandler+0x418>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_DMA_IRQHandler+0x41c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_DMA_IRQHandler+0x420>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_DMA_IRQHandler+0x424>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <HAL_DMA_IRQHandler+0x428>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_DMA_IRQHandler+0x42c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_DMA_IRQHandler+0x430>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x3e2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <HAL_DMA_IRQHandler+0x434>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d12a      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x438>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e023      	b.n	8002be4 <HAL_DMA_IRQHandler+0x440>
 8002b9c:	40020010 	.word	0x40020010
 8002ba0:	40020028 	.word	0x40020028
 8002ba4:	40020040 	.word	0x40020040
 8002ba8:	40020058 	.word	0x40020058
 8002bac:	40020070 	.word	0x40020070
 8002bb0:	40020088 	.word	0x40020088
 8002bb4:	400200a0 	.word	0x400200a0
 8002bb8:	400200b8 	.word	0x400200b8
 8002bbc:	40020410 	.word	0x40020410
 8002bc0:	40020428 	.word	0x40020428
 8002bc4:	40020440 	.word	0x40020440
 8002bc8:	40020458 	.word	0x40020458
 8002bcc:	40020470 	.word	0x40020470
 8002bd0:	40020488 	.word	0x40020488
 8002bd4:	400204a0 	.word	0x400204a0
 8002bd8:	400204b8 	.word	0x400204b8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00d      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f043 0204 	orr.w	r2, r3, #4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a6 	beq.w	8002d66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a85      	ldr	r2, [pc, #532]	; (8002e34 <HAL_DMA_IRQHandler+0x690>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d04a      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a83      	ldr	r2, [pc, #524]	; (8002e38 <HAL_DMA_IRQHandler+0x694>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d045      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a82      	ldr	r2, [pc, #520]	; (8002e3c <HAL_DMA_IRQHandler+0x698>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d040      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a80      	ldr	r2, [pc, #512]	; (8002e40 <HAL_DMA_IRQHandler+0x69c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d03b      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7f      	ldr	r2, [pc, #508]	; (8002e44 <HAL_DMA_IRQHandler+0x6a0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d036      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a7d      	ldr	r2, [pc, #500]	; (8002e48 <HAL_DMA_IRQHandler+0x6a4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d031      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7c      	ldr	r2, [pc, #496]	; (8002e4c <HAL_DMA_IRQHandler+0x6a8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d02c      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a7a      	ldr	r2, [pc, #488]	; (8002e50 <HAL_DMA_IRQHandler+0x6ac>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d027      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a79      	ldr	r2, [pc, #484]	; (8002e54 <HAL_DMA_IRQHandler+0x6b0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d022      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a77      	ldr	r2, [pc, #476]	; (8002e58 <HAL_DMA_IRQHandler+0x6b4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01d      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a76      	ldr	r2, [pc, #472]	; (8002e5c <HAL_DMA_IRQHandler+0x6b8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d018      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a74      	ldr	r2, [pc, #464]	; (8002e60 <HAL_DMA_IRQHandler+0x6bc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a73      	ldr	r2, [pc, #460]	; (8002e64 <HAL_DMA_IRQHandler+0x6c0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00e      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a71      	ldr	r2, [pc, #452]	; (8002e68 <HAL_DMA_IRQHandler+0x6c4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a70      	ldr	r2, [pc, #448]	; (8002e6c <HAL_DMA_IRQHandler+0x6c8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_DMA_IRQHandler+0x516>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	; (8002e70 <HAL_DMA_IRQHandler+0x6cc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x52c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e009      	b.n	8002ce4 <HAL_DMA_IRQHandler+0x540>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf14      	ite	ne
 8002cde:	2301      	movne	r3, #1
 8002ce0:	2300      	moveq	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d03e      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d018      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d108      	bne.n	8002d26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d024      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	4798      	blx	r3
 8002d24:	e01f      	b.n	8002d66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01b      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
 8002d36:	e016      	b.n	8002d66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0208 	bic.w	r2, r2, #8
 8002d54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	2220      	movs	r2, #32
 8002d70:	409a      	lsls	r2, r3
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8110 	beq.w	8002f9c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <HAL_DMA_IRQHandler+0x690>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d04a      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2b      	ldr	r2, [pc, #172]	; (8002e38 <HAL_DMA_IRQHandler+0x694>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d045      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_DMA_IRQHandler+0x698>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d040      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <HAL_DMA_IRQHandler+0x69c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d03b      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <HAL_DMA_IRQHandler+0x6a0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d036      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <HAL_DMA_IRQHandler+0x6a4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d031      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <HAL_DMA_IRQHandler+0x6a8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02c      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a22      	ldr	r2, [pc, #136]	; (8002e50 <HAL_DMA_IRQHandler+0x6ac>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d027      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <HAL_DMA_IRQHandler+0x6b0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d022      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <HAL_DMA_IRQHandler+0x6b4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d01d      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <HAL_DMA_IRQHandler+0x6b8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d018      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1c      	ldr	r2, [pc, #112]	; (8002e60 <HAL_DMA_IRQHandler+0x6bc>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d013      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1a      	ldr	r2, [pc, #104]	; (8002e64 <HAL_DMA_IRQHandler+0x6c0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00e      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a19      	ldr	r2, [pc, #100]	; (8002e68 <HAL_DMA_IRQHandler+0x6c4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d009      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <HAL_DMA_IRQHandler+0x6c8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d004      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x678>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <HAL_DMA_IRQHandler+0x6cc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d12b      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x6d0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	e02a      	b.n	8002e88 <HAL_DMA_IRQHandler+0x6e4>
 8002e32:	bf00      	nop
 8002e34:	40020010 	.word	0x40020010
 8002e38:	40020028 	.word	0x40020028
 8002e3c:	40020040 	.word	0x40020040
 8002e40:	40020058 	.word	0x40020058
 8002e44:	40020070 	.word	0x40020070
 8002e48:	40020088 	.word	0x40020088
 8002e4c:	400200a0 	.word	0x400200a0
 8002e50:	400200b8 	.word	0x400200b8
 8002e54:	40020410 	.word	0x40020410
 8002e58:	40020428 	.word	0x40020428
 8002e5c:	40020440 	.word	0x40020440
 8002e60:	40020458 	.word	0x40020458
 8002e64:	40020470 	.word	0x40020470
 8002e68:	40020488 	.word	0x40020488
 8002e6c:	400204a0 	.word	0x400204a0
 8002e70:	400204b8 	.word	0x400204b8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8087 	beq.w	8002f9c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2220      	movs	r2, #32
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d139      	bne.n	8002f1e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0216 	bic.w	r2, r2, #22
 8002eb8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <HAL_DMA_IRQHandler+0x736>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0208 	bic.w	r2, r2, #8
 8002ee8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	223f      	movs	r2, #63	; 0x3f
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 834a 	beq.w	80035a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
          }
          return;
 8002f1c:	e344      	b.n	80035a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d018      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d108      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d02c      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4798      	blx	r3
 8002f4a:	e027      	b.n	8002f9c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d023      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
 8002f5c:	e01e      	b.n	8002f9c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10f      	bne.n	8002f8c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0210 	bic.w	r2, r2, #16
 8002f7a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8306 	beq.w	80035b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8088 	beq.w	80030c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a7a      	ldr	r2, [pc, #488]	; (80031ac <HAL_DMA_IRQHandler+0xa08>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d04a      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a79      	ldr	r2, [pc, #484]	; (80031b0 <HAL_DMA_IRQHandler+0xa0c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d045      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a77      	ldr	r2, [pc, #476]	; (80031b4 <HAL_DMA_IRQHandler+0xa10>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d040      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a76      	ldr	r2, [pc, #472]	; (80031b8 <HAL_DMA_IRQHandler+0xa14>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d03b      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a74      	ldr	r2, [pc, #464]	; (80031bc <HAL_DMA_IRQHandler+0xa18>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d036      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a73      	ldr	r2, [pc, #460]	; (80031c0 <HAL_DMA_IRQHandler+0xa1c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d031      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a71      	ldr	r2, [pc, #452]	; (80031c4 <HAL_DMA_IRQHandler+0xa20>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d02c      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a70      	ldr	r2, [pc, #448]	; (80031c8 <HAL_DMA_IRQHandler+0xa24>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d027      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a6e      	ldr	r2, [pc, #440]	; (80031cc <HAL_DMA_IRQHandler+0xa28>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d022      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6d      	ldr	r2, [pc, #436]	; (80031d0 <HAL_DMA_IRQHandler+0xa2c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d01d      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a6b      	ldr	r2, [pc, #428]	; (80031d4 <HAL_DMA_IRQHandler+0xa30>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d018      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6a      	ldr	r2, [pc, #424]	; (80031d8 <HAL_DMA_IRQHandler+0xa34>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d013      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a68      	ldr	r2, [pc, #416]	; (80031dc <HAL_DMA_IRQHandler+0xa38>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00e      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a67      	ldr	r2, [pc, #412]	; (80031e0 <HAL_DMA_IRQHandler+0xa3c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_DMA_IRQHandler+0xa40>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <HAL_DMA_IRQHandler+0x8b8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a64      	ldr	r2, [pc, #400]	; (80031e8 <HAL_DMA_IRQHandler+0xa44>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d108      	bne.n	800306e <HAL_DMA_IRQHandler+0x8ca>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e007      	b.n	800307e <HAL_DMA_IRQHandler+0x8da>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	429a      	cmp	r2, r3
 8003088:	d307      	bcc.n	800309a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f2      	bne.n	800307e <HAL_DMA_IRQHandler+0x8da>
 8003098:	e000      	b.n	800309c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800309a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2203      	movs	r2, #3
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80030b2:	e003      	b.n	80030bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 8272 	beq.w	80035b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e26c      	b.n	80035b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a43      	ldr	r2, [pc, #268]	; (80031ec <HAL_DMA_IRQHandler+0xa48>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d022      	beq.n	8003128 <HAL_DMA_IRQHandler+0x984>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a42      	ldr	r2, [pc, #264]	; (80031f0 <HAL_DMA_IRQHandler+0xa4c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d01d      	beq.n	8003128 <HAL_DMA_IRQHandler+0x984>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a40      	ldr	r2, [pc, #256]	; (80031f4 <HAL_DMA_IRQHandler+0xa50>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d018      	beq.n	8003128 <HAL_DMA_IRQHandler+0x984>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a3f      	ldr	r2, [pc, #252]	; (80031f8 <HAL_DMA_IRQHandler+0xa54>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <HAL_DMA_IRQHandler+0x984>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a3d      	ldr	r2, [pc, #244]	; (80031fc <HAL_DMA_IRQHandler+0xa58>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00e      	beq.n	8003128 <HAL_DMA_IRQHandler+0x984>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <HAL_DMA_IRQHandler+0xa5c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d009      	beq.n	8003128 <HAL_DMA_IRQHandler+0x984>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <HAL_DMA_IRQHandler+0xa60>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_DMA_IRQHandler+0x984>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a39      	ldr	r2, [pc, #228]	; (8003208 <HAL_DMA_IRQHandler+0xa64>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_DMA_IRQHandler+0x988>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_DMA_IRQHandler+0x98a>
 800312c:	2300      	movs	r3, #0
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 823f 	beq.w	80035b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	f003 031f 	and.w	r3, r3, #31
 8003144:	2204      	movs	r2, #4
 8003146:	409a      	lsls	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80cd 	beq.w	80032ec <HAL_DMA_IRQHandler+0xb48>
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80c7 	beq.w	80032ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2204      	movs	r2, #4
 8003168:	409a      	lsls	r2, r3
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d049      	beq.n	800320c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8210 	beq.w	80035ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003194:	e20a      	b.n	80035ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8206 	beq.w	80035ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031a8:	e200      	b.n	80035ac <HAL_DMA_IRQHandler+0xe08>
 80031aa:	bf00      	nop
 80031ac:	40020010 	.word	0x40020010
 80031b0:	40020028 	.word	0x40020028
 80031b4:	40020040 	.word	0x40020040
 80031b8:	40020058 	.word	0x40020058
 80031bc:	40020070 	.word	0x40020070
 80031c0:	40020088 	.word	0x40020088
 80031c4:	400200a0 	.word	0x400200a0
 80031c8:	400200b8 	.word	0x400200b8
 80031cc:	40020410 	.word	0x40020410
 80031d0:	40020428 	.word	0x40020428
 80031d4:	40020440 	.word	0x40020440
 80031d8:	40020458 	.word	0x40020458
 80031dc:	40020470 	.word	0x40020470
 80031e0:	40020488 	.word	0x40020488
 80031e4:	400204a0 	.word	0x400204a0
 80031e8:	400204b8 	.word	0x400204b8
 80031ec:	58025408 	.word	0x58025408
 80031f0:	5802541c 	.word	0x5802541c
 80031f4:	58025430 	.word	0x58025430
 80031f8:	58025444 	.word	0x58025444
 80031fc:	58025458 	.word	0x58025458
 8003200:	5802546c 	.word	0x5802546c
 8003204:	58025480 	.word	0x58025480
 8003208:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d160      	bne.n	80032d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a8c      	ldr	r2, [pc, #560]	; (800344c <HAL_DMA_IRQHandler+0xca8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d04a      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a8a      	ldr	r2, [pc, #552]	; (8003450 <HAL_DMA_IRQHandler+0xcac>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d045      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a89      	ldr	r2, [pc, #548]	; (8003454 <HAL_DMA_IRQHandler+0xcb0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d040      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a87      	ldr	r2, [pc, #540]	; (8003458 <HAL_DMA_IRQHandler+0xcb4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d03b      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a86      	ldr	r2, [pc, #536]	; (800345c <HAL_DMA_IRQHandler+0xcb8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d036      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a84      	ldr	r2, [pc, #528]	; (8003460 <HAL_DMA_IRQHandler+0xcbc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d031      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a83      	ldr	r2, [pc, #524]	; (8003464 <HAL_DMA_IRQHandler+0xcc0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d02c      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a81      	ldr	r2, [pc, #516]	; (8003468 <HAL_DMA_IRQHandler+0xcc4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d027      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a80      	ldr	r2, [pc, #512]	; (800346c <HAL_DMA_IRQHandler+0xcc8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7e      	ldr	r2, [pc, #504]	; (8003470 <HAL_DMA_IRQHandler+0xccc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01d      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a7d      	ldr	r2, [pc, #500]	; (8003474 <HAL_DMA_IRQHandler+0xcd0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d018      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a7b      	ldr	r2, [pc, #492]	; (8003478 <HAL_DMA_IRQHandler+0xcd4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7a      	ldr	r2, [pc, #488]	; (800347c <HAL_DMA_IRQHandler+0xcd8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a78      	ldr	r2, [pc, #480]	; (8003480 <HAL_DMA_IRQHandler+0xcdc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a77      	ldr	r2, [pc, #476]	; (8003484 <HAL_DMA_IRQHandler+0xce0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xb12>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a75      	ldr	r2, [pc, #468]	; (8003488 <HAL_DMA_IRQHandler+0xce4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d108      	bne.n	80032c8 <HAL_DMA_IRQHandler+0xb24>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0208 	bic.w	r2, r2, #8
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e007      	b.n	80032d8 <HAL_DMA_IRQHandler+0xb34>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0204 	bic.w	r2, r2, #4
 80032d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8165 	beq.w	80035ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032ea:	e15f      	b.n	80035ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2202      	movs	r2, #2
 80032f6:	409a      	lsls	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80c5 	beq.w	800348c <HAL_DMA_IRQHandler+0xce8>
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80bf 	beq.w	800348c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	2202      	movs	r2, #2
 8003318:	409a      	lsls	r2, r3
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d018      	beq.n	800335a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 813a 	beq.w	80035b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003344:	e134      	b.n	80035b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8130 	beq.w	80035b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003358:	e12a      	b.n	80035b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d168      	bne.n	8003436 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a38      	ldr	r2, [pc, #224]	; (800344c <HAL_DMA_IRQHandler+0xca8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d04a      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a37      	ldr	r2, [pc, #220]	; (8003450 <HAL_DMA_IRQHandler+0xcac>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d045      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a35      	ldr	r2, [pc, #212]	; (8003454 <HAL_DMA_IRQHandler+0xcb0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d040      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a34      	ldr	r2, [pc, #208]	; (8003458 <HAL_DMA_IRQHandler+0xcb4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d03b      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a32      	ldr	r2, [pc, #200]	; (800345c <HAL_DMA_IRQHandler+0xcb8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d036      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a31      	ldr	r2, [pc, #196]	; (8003460 <HAL_DMA_IRQHandler+0xcbc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d031      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2f      	ldr	r2, [pc, #188]	; (8003464 <HAL_DMA_IRQHandler+0xcc0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d02c      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2e      	ldr	r2, [pc, #184]	; (8003468 <HAL_DMA_IRQHandler+0xcc4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d027      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a2c      	ldr	r2, [pc, #176]	; (800346c <HAL_DMA_IRQHandler+0xcc8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d022      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <HAL_DMA_IRQHandler+0xccc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d01d      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a29      	ldr	r2, [pc, #164]	; (8003474 <HAL_DMA_IRQHandler+0xcd0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d018      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a28      	ldr	r2, [pc, #160]	; (8003478 <HAL_DMA_IRQHandler+0xcd4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d013      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <HAL_DMA_IRQHandler+0xcd8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00e      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a25      	ldr	r2, [pc, #148]	; (8003480 <HAL_DMA_IRQHandler+0xcdc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a23      	ldr	r2, [pc, #140]	; (8003484 <HAL_DMA_IRQHandler+0xce0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc60>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a22      	ldr	r2, [pc, #136]	; (8003488 <HAL_DMA_IRQHandler+0xce4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d108      	bne.n	8003416 <HAL_DMA_IRQHandler+0xc72>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0214 	bic.w	r2, r2, #20
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e007      	b.n	8003426 <HAL_DMA_IRQHandler+0xc82>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 020a 	bic.w	r2, r2, #10
 8003424:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80b8 	beq.w	80035b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003448:	e0b2      	b.n	80035b0 <HAL_DMA_IRQHandler+0xe0c>
 800344a:	bf00      	nop
 800344c:	40020010 	.word	0x40020010
 8003450:	40020028 	.word	0x40020028
 8003454:	40020040 	.word	0x40020040
 8003458:	40020058 	.word	0x40020058
 800345c:	40020070 	.word	0x40020070
 8003460:	40020088 	.word	0x40020088
 8003464:	400200a0 	.word	0x400200a0
 8003468:	400200b8 	.word	0x400200b8
 800346c:	40020410 	.word	0x40020410
 8003470:	40020428 	.word	0x40020428
 8003474:	40020440 	.word	0x40020440
 8003478:	40020458 	.word	0x40020458
 800347c:	40020470 	.word	0x40020470
 8003480:	40020488 	.word	0x40020488
 8003484:	400204a0 	.word	0x400204a0
 8003488:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	2208      	movs	r2, #8
 8003496:	409a      	lsls	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8088 	beq.w	80035b2 <HAL_DMA_IRQHandler+0xe0e>
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8082 	beq.w	80035b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a41      	ldr	r2, [pc, #260]	; (80035b8 <HAL_DMA_IRQHandler+0xe14>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3f      	ldr	r2, [pc, #252]	; (80035bc <HAL_DMA_IRQHandler+0xe18>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3e      	ldr	r2, [pc, #248]	; (80035c0 <HAL_DMA_IRQHandler+0xe1c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3c      	ldr	r2, [pc, #240]	; (80035c4 <HAL_DMA_IRQHandler+0xe20>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3b      	ldr	r2, [pc, #236]	; (80035c8 <HAL_DMA_IRQHandler+0xe24>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a39      	ldr	r2, [pc, #228]	; (80035cc <HAL_DMA_IRQHandler+0xe28>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a38      	ldr	r2, [pc, #224]	; (80035d0 <HAL_DMA_IRQHandler+0xe2c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a36      	ldr	r2, [pc, #216]	; (80035d4 <HAL_DMA_IRQHandler+0xe30>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a35      	ldr	r2, [pc, #212]	; (80035d8 <HAL_DMA_IRQHandler+0xe34>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a33      	ldr	r2, [pc, #204]	; (80035dc <HAL_DMA_IRQHandler+0xe38>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a32      	ldr	r2, [pc, #200]	; (80035e0 <HAL_DMA_IRQHandler+0xe3c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <HAL_DMA_IRQHandler+0xe40>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a2f      	ldr	r2, [pc, #188]	; (80035e8 <HAL_DMA_IRQHandler+0xe44>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2d      	ldr	r2, [pc, #180]	; (80035ec <HAL_DMA_IRQHandler+0xe48>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <HAL_DMA_IRQHandler+0xe4c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_IRQHandler+0xdaa>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <HAL_DMA_IRQHandler+0xe50>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d108      	bne.n	8003560 <HAL_DMA_IRQHandler+0xdbc>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 021c 	bic.w	r2, r2, #28
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e007      	b.n	8003570 <HAL_DMA_IRQHandler+0xdcc>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 020e 	bic.w	r2, r2, #14
 800356e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2201      	movs	r2, #1
 800357a:	409a      	lsls	r2, r3
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
 80035a6:	e004      	b.n	80035b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80035a8:	bf00      	nop
 80035aa:	e002      	b.n	80035b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035b2:	3728      	adds	r7, #40	; 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40020010 	.word	0x40020010
 80035bc:	40020028 	.word	0x40020028
 80035c0:	40020040 	.word	0x40020040
 80035c4:	40020058 	.word	0x40020058
 80035c8:	40020070 	.word	0x40020070
 80035cc:	40020088 	.word	0x40020088
 80035d0:	400200a0 	.word	0x400200a0
 80035d4:	400200b8 	.word	0x400200b8
 80035d8:	40020410 	.word	0x40020410
 80035dc:	40020428 	.word	0x40020428
 80035e0:	40020440 	.word	0x40020440
 80035e4:	40020458 	.word	0x40020458
 80035e8:	40020470 	.word	0x40020470
 80035ec:	40020488 	.word	0x40020488
 80035f0:	400204a0 	.word	0x400204a0
 80035f4:	400204b8 	.word	0x400204b8

080035f8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003606:	b2db      	uxtb	r3, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a84      	ldr	r2, [pc, #528]	; (800385c <DMA_SetConfig+0x230>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d072      	beq.n	8003736 <DMA_SetConfig+0x10a>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a82      	ldr	r2, [pc, #520]	; (8003860 <DMA_SetConfig+0x234>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d06d      	beq.n	8003736 <DMA_SetConfig+0x10a>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a81      	ldr	r2, [pc, #516]	; (8003864 <DMA_SetConfig+0x238>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d068      	beq.n	8003736 <DMA_SetConfig+0x10a>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a7f      	ldr	r2, [pc, #508]	; (8003868 <DMA_SetConfig+0x23c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d063      	beq.n	8003736 <DMA_SetConfig+0x10a>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a7e      	ldr	r2, [pc, #504]	; (800386c <DMA_SetConfig+0x240>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d05e      	beq.n	8003736 <DMA_SetConfig+0x10a>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a7c      	ldr	r2, [pc, #496]	; (8003870 <DMA_SetConfig+0x244>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d059      	beq.n	8003736 <DMA_SetConfig+0x10a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7b      	ldr	r2, [pc, #492]	; (8003874 <DMA_SetConfig+0x248>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d054      	beq.n	8003736 <DMA_SetConfig+0x10a>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a79      	ldr	r2, [pc, #484]	; (8003878 <DMA_SetConfig+0x24c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04f      	beq.n	8003736 <DMA_SetConfig+0x10a>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a78      	ldr	r2, [pc, #480]	; (800387c <DMA_SetConfig+0x250>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d04a      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a76      	ldr	r2, [pc, #472]	; (8003880 <DMA_SetConfig+0x254>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d045      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a75      	ldr	r2, [pc, #468]	; (8003884 <DMA_SetConfig+0x258>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d040      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a73      	ldr	r2, [pc, #460]	; (8003888 <DMA_SetConfig+0x25c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d03b      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a72      	ldr	r2, [pc, #456]	; (800388c <DMA_SetConfig+0x260>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d036      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a70      	ldr	r2, [pc, #448]	; (8003890 <DMA_SetConfig+0x264>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d031      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6f      	ldr	r2, [pc, #444]	; (8003894 <DMA_SetConfig+0x268>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d02c      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6d      	ldr	r2, [pc, #436]	; (8003898 <DMA_SetConfig+0x26c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d027      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a6c      	ldr	r2, [pc, #432]	; (800389c <DMA_SetConfig+0x270>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d022      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a6a      	ldr	r2, [pc, #424]	; (80038a0 <DMA_SetConfig+0x274>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01d      	beq.n	8003736 <DMA_SetConfig+0x10a>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a69      	ldr	r2, [pc, #420]	; (80038a4 <DMA_SetConfig+0x278>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d018      	beq.n	8003736 <DMA_SetConfig+0x10a>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a67      	ldr	r2, [pc, #412]	; (80038a8 <DMA_SetConfig+0x27c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <DMA_SetConfig+0x10a>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a66      	ldr	r2, [pc, #408]	; (80038ac <DMA_SetConfig+0x280>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <DMA_SetConfig+0x10a>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a64      	ldr	r2, [pc, #400]	; (80038b0 <DMA_SetConfig+0x284>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d009      	beq.n	8003736 <DMA_SetConfig+0x10a>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a63      	ldr	r2, [pc, #396]	; (80038b4 <DMA_SetConfig+0x288>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <DMA_SetConfig+0x10a>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a61      	ldr	r2, [pc, #388]	; (80038b8 <DMA_SetConfig+0x28c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <DMA_SetConfig+0x10e>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <DMA_SetConfig+0x110>
 800373a:	2300      	movs	r3, #0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00d      	beq.n	800375c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003748:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800375a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a3e      	ldr	r2, [pc, #248]	; (800385c <DMA_SetConfig+0x230>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d04a      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a3d      	ldr	r2, [pc, #244]	; (8003860 <DMA_SetConfig+0x234>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d045      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3b      	ldr	r2, [pc, #236]	; (8003864 <DMA_SetConfig+0x238>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d040      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3a      	ldr	r2, [pc, #232]	; (8003868 <DMA_SetConfig+0x23c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d03b      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a38      	ldr	r2, [pc, #224]	; (800386c <DMA_SetConfig+0x240>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d036      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a37      	ldr	r2, [pc, #220]	; (8003870 <DMA_SetConfig+0x244>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d031      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a35      	ldr	r2, [pc, #212]	; (8003874 <DMA_SetConfig+0x248>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d02c      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a34      	ldr	r2, [pc, #208]	; (8003878 <DMA_SetConfig+0x24c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d027      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a32      	ldr	r2, [pc, #200]	; (800387c <DMA_SetConfig+0x250>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d022      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a31      	ldr	r2, [pc, #196]	; (8003880 <DMA_SetConfig+0x254>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d01d      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2f      	ldr	r2, [pc, #188]	; (8003884 <DMA_SetConfig+0x258>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d018      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2e      	ldr	r2, [pc, #184]	; (8003888 <DMA_SetConfig+0x25c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2c      	ldr	r2, [pc, #176]	; (800388c <DMA_SetConfig+0x260>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00e      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2b      	ldr	r2, [pc, #172]	; (8003890 <DMA_SetConfig+0x264>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d009      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a29      	ldr	r2, [pc, #164]	; (8003894 <DMA_SetConfig+0x268>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <DMA_SetConfig+0x1d0>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a28      	ldr	r2, [pc, #160]	; (8003898 <DMA_SetConfig+0x26c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <DMA_SetConfig+0x1d4>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <DMA_SetConfig+0x1d6>
 8003800:	2300      	movs	r3, #0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d05a      	beq.n	80038bc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	223f      	movs	r2, #63	; 0x3f
 8003810:	409a      	lsls	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003824:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b40      	cmp	r3, #64	; 0x40
 8003834:	d108      	bne.n	8003848 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003846:	e087      	b.n	8003958 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]
}
 8003858:	e07e      	b.n	8003958 <DMA_SetConfig+0x32c>
 800385a:	bf00      	nop
 800385c:	40020010 	.word	0x40020010
 8003860:	40020028 	.word	0x40020028
 8003864:	40020040 	.word	0x40020040
 8003868:	40020058 	.word	0x40020058
 800386c:	40020070 	.word	0x40020070
 8003870:	40020088 	.word	0x40020088
 8003874:	400200a0 	.word	0x400200a0
 8003878:	400200b8 	.word	0x400200b8
 800387c:	40020410 	.word	0x40020410
 8003880:	40020428 	.word	0x40020428
 8003884:	40020440 	.word	0x40020440
 8003888:	40020458 	.word	0x40020458
 800388c:	40020470 	.word	0x40020470
 8003890:	40020488 	.word	0x40020488
 8003894:	400204a0 	.word	0x400204a0
 8003898:	400204b8 	.word	0x400204b8
 800389c:	58025408 	.word	0x58025408
 80038a0:	5802541c 	.word	0x5802541c
 80038a4:	58025430 	.word	0x58025430
 80038a8:	58025444 	.word	0x58025444
 80038ac:	58025458 	.word	0x58025458
 80038b0:	5802546c 	.word	0x5802546c
 80038b4:	58025480 	.word	0x58025480
 80038b8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a28      	ldr	r2, [pc, #160]	; (8003964 <DMA_SetConfig+0x338>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d022      	beq.n	800390c <DMA_SetConfig+0x2e0>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a27      	ldr	r2, [pc, #156]	; (8003968 <DMA_SetConfig+0x33c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d01d      	beq.n	800390c <DMA_SetConfig+0x2e0>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <DMA_SetConfig+0x340>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <DMA_SetConfig+0x2e0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a24      	ldr	r2, [pc, #144]	; (8003970 <DMA_SetConfig+0x344>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <DMA_SetConfig+0x2e0>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a22      	ldr	r2, [pc, #136]	; (8003974 <DMA_SetConfig+0x348>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <DMA_SetConfig+0x2e0>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a21      	ldr	r2, [pc, #132]	; (8003978 <DMA_SetConfig+0x34c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <DMA_SetConfig+0x2e0>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1f      	ldr	r2, [pc, #124]	; (800397c <DMA_SetConfig+0x350>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <DMA_SetConfig+0x2e0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <DMA_SetConfig+0x354>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <DMA_SetConfig+0x2e4>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <DMA_SetConfig+0x2e6>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d020      	beq.n	8003958 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	2201      	movs	r2, #1
 8003920:	409a      	lsls	r2, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d108      	bne.n	8003948 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	60da      	str	r2, [r3, #12]
}
 8003946:	e007      	b.n	8003958 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
}
 8003958:	bf00      	nop
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	58025408 	.word	0x58025408
 8003968:	5802541c 	.word	0x5802541c
 800396c:	58025430 	.word	0x58025430
 8003970:	58025444 	.word	0x58025444
 8003974:	58025458 	.word	0x58025458
 8003978:	5802546c 	.word	0x5802546c
 800397c:	58025480 	.word	0x58025480
 8003980:	58025494 	.word	0x58025494

08003984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <DMA_CalcBaseAndBitshift+0x118>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d04a      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a41      	ldr	r2, [pc, #260]	; (8003aa0 <DMA_CalcBaseAndBitshift+0x11c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d045      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3f      	ldr	r2, [pc, #252]	; (8003aa4 <DMA_CalcBaseAndBitshift+0x120>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d040      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a3e      	ldr	r2, [pc, #248]	; (8003aa8 <DMA_CalcBaseAndBitshift+0x124>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d03b      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <DMA_CalcBaseAndBitshift+0x128>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d036      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a3b      	ldr	r2, [pc, #236]	; (8003ab0 <DMA_CalcBaseAndBitshift+0x12c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d031      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a39      	ldr	r2, [pc, #228]	; (8003ab4 <DMA_CalcBaseAndBitshift+0x130>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02c      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <DMA_CalcBaseAndBitshift+0x134>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d027      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a36      	ldr	r2, [pc, #216]	; (8003abc <DMA_CalcBaseAndBitshift+0x138>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d022      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a35      	ldr	r2, [pc, #212]	; (8003ac0 <DMA_CalcBaseAndBitshift+0x13c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d01d      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a33      	ldr	r2, [pc, #204]	; (8003ac4 <DMA_CalcBaseAndBitshift+0x140>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d018      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a32      	ldr	r2, [pc, #200]	; (8003ac8 <DMA_CalcBaseAndBitshift+0x144>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a30      	ldr	r2, [pc, #192]	; (8003acc <DMA_CalcBaseAndBitshift+0x148>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2d      	ldr	r2, [pc, #180]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x150>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <DMA_CalcBaseAndBitshift+0xa8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2c      	ldr	r2, [pc, #176]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x154>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <DMA_CalcBaseAndBitshift+0xac>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <DMA_CalcBaseAndBitshift+0xae>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d024      	beq.n	8003a80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	3b10      	subs	r3, #16
 8003a3e:	4a27      	ldr	r2, [pc, #156]	; (8003adc <DMA_CalcBaseAndBitshift+0x158>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003a50:	5cd3      	ldrb	r3, [r2, r3]
 8003a52:	461a      	mov	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d908      	bls.n	8003a70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x160>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	1d1a      	adds	r2, r3, #4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8003a6e:	e00d      	b.n	8003a8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x160>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a7e:	e005      	b.n	8003a8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40020010 	.word	0x40020010
 8003aa0:	40020028 	.word	0x40020028
 8003aa4:	40020040 	.word	0x40020040
 8003aa8:	40020058 	.word	0x40020058
 8003aac:	40020070 	.word	0x40020070
 8003ab0:	40020088 	.word	0x40020088
 8003ab4:	400200a0 	.word	0x400200a0
 8003ab8:	400200b8 	.word	0x400200b8
 8003abc:	40020410 	.word	0x40020410
 8003ac0:	40020428 	.word	0x40020428
 8003ac4:	40020440 	.word	0x40020440
 8003ac8:	40020458 	.word	0x40020458
 8003acc:	40020470 	.word	0x40020470
 8003ad0:	40020488 	.word	0x40020488
 8003ad4:	400204a0 	.word	0x400204a0
 8003ad8:	400204b8 	.word	0x400204b8
 8003adc:	aaaaaaab 	.word	0xaaaaaaab
 8003ae0:	080113bc 	.word	0x080113bc
 8003ae4:	fffffc00 	.word	0xfffffc00

08003ae8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d120      	bne.n	8003b3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d858      	bhi.n	8003bb6 <DMA_CheckFifoParam+0xce>
 8003b04:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <DMA_CheckFifoParam+0x24>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b1d 	.word	0x08003b1d
 8003b10:	08003b2f 	.word	0x08003b2f
 8003b14:	08003b1d 	.word	0x08003b1d
 8003b18:	08003bb7 	.word	0x08003bb7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d048      	beq.n	8003bba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b2c:	e045      	b.n	8003bba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b36:	d142      	bne.n	8003bbe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b3c:	e03f      	b.n	8003bbe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	d123      	bne.n	8003b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d838      	bhi.n	8003bc2 <DMA_CheckFifoParam+0xda>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <DMA_CheckFifoParam+0x70>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b6f 	.word	0x08003b6f
 8003b60:	08003b69 	.word	0x08003b69
 8003b64:	08003b81 	.word	0x08003b81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6c:	e030      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d025      	beq.n	8003bc6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b7e:	e022      	b.n	8003bc6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b88:	d11f      	bne.n	8003bca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003b8e:	e01c      	b.n	8003bca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d902      	bls.n	8003b9e <DMA_CheckFifoParam+0xb6>
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d003      	beq.n	8003ba4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003b9c:	e018      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ba2:	e015      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00e      	beq.n	8003bce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8003bb4:	e00b      	b.n	8003bce <DMA_CheckFifoParam+0xe6>
        break;
 8003bb6:	bf00      	nop
 8003bb8:	e00a      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bba:	bf00      	nop
 8003bbc:	e008      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bbe:	bf00      	nop
 8003bc0:	e006      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <DMA_CheckFifoParam+0xe8>
    break;
 8003bce:	bf00      	nop
    }
  }

  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop

08003be0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a38      	ldr	r2, [pc, #224]	; (8003cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d022      	beq.n	8003c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a36      	ldr	r2, [pc, #216]	; (8003cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01d      	beq.n	8003c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a35      	ldr	r2, [pc, #212]	; (8003cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d018      	beq.n	8003c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a33      	ldr	r2, [pc, #204]	; (8003ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a32      	ldr	r2, [pc, #200]	; (8003ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00e      	beq.n	8003c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a30      	ldr	r2, [pc, #192]	; (8003ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d009      	beq.n	8003c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2d      	ldr	r2, [pc, #180]	; (8003cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01a      	beq.n	8003c7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	3b08      	subs	r3, #8
 8003c50:	4a28      	ldr	r2, [pc, #160]	; (8003cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003c6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003c7c:	e024      	b.n	8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3b10      	subs	r3, #16
 8003c86:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4a1c      	ldr	r2, [pc, #112]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d806      	bhi.n	8003ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d902      	bls.n	8003ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	461a      	mov	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003cb8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	58025408 	.word	0x58025408
 8003cd8:	5802541c 	.word	0x5802541c
 8003cdc:	58025430 	.word	0x58025430
 8003ce0:	58025444 	.word	0x58025444
 8003ce4:	58025458 	.word	0x58025458
 8003ce8:	5802546c 	.word	0x5802546c
 8003cec:	58025480 	.word	0x58025480
 8003cf0:	58025494 	.word	0x58025494
 8003cf4:	cccccccd 	.word	0xcccccccd
 8003cf8:	16009600 	.word	0x16009600
 8003cfc:	58025880 	.word	0x58025880
 8003d00:	aaaaaaab 	.word	0xaaaaaaab
 8003d04:	400204b8 	.word	0x400204b8
 8003d08:	4002040f 	.word	0x4002040f
 8003d0c:	10008200 	.word	0x10008200
 8003d10:	40020880 	.word	0x40020880

08003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d04a      	beq.n	8003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d847      	bhi.n	8003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d022      	beq.n	8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a24      	ldr	r2, [pc, #144]	; (8003dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d01d      	beq.n	8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d018      	beq.n	8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00e      	beq.n	8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1b      	ldr	r2, [pc, #108]	; (8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4b17      	ldr	r3, [pc, #92]	; (8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	461a      	mov	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003d9c:	671a      	str	r2, [r3, #112]	; 0x70
 8003d9e:	e009      	b.n	8003db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003db2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	2201      	movs	r2, #1
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	58025408 	.word	0x58025408
 8003dd0:	5802541c 	.word	0x5802541c
 8003dd4:	58025430 	.word	0x58025430
 8003dd8:	58025444 	.word	0x58025444
 8003ddc:	58025458 	.word	0x58025458
 8003de0:	5802546c 	.word	0x5802546c
 8003de4:	58025480 	.word	0x58025480
 8003de8:	58025494 	.word	0x58025494
 8003dec:	1600963f 	.word	0x1600963f
 8003df0:	58025940 	.word	0x58025940
 8003df4:	1000823f 	.word	0x1000823f
 8003df8:	40020940 	.word	0x40020940

08003dfc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b098      	sub	sp, #96	; 0x60
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003e04:	4a84      	ldr	r2, [pc, #528]	; (8004018 <HAL_FDCAN_Init+0x21c>)
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	224c      	movs	r2, #76	; 0x4c
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f00b fb3a 	bl	800f488 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e1ca      	b.n	80041b4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7e      	ldr	r2, [pc, #504]	; (800401c <HAL_FDCAN_Init+0x220>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d106      	bne.n	8003e36 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003e30:	461a      	mov	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fc fb26 	bl	800049c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0210 	bic.w	r2, r2, #16
 8003e5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e60:	f7fd faf2 	bl	8001448 <HAL_GetTick>
 8003e64:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e66:	e014      	b.n	8003e92 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e68:	f7fd faee 	bl	8001448 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b0a      	cmp	r3, #10
 8003e74:	d90d      	bls.n	8003e92 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2203      	movs	r2, #3
 8003e8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e190      	b.n	80041b4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d0e3      	beq.n	8003e68 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb0:	f7fd faca 	bl	8001448 <HAL_GetTick>
 8003eb4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003eb6:	e014      	b.n	8003ee2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003eb8:	f7fd fac6 	bl	8001448 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b0a      	cmp	r3, #10
 8003ec4:	d90d      	bls.n	8003ee2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ecc:	f043 0201 	orr.w	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2203      	movs	r2, #3
 8003eda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e168      	b.n	80041b4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0e3      	beq.n	8003eb8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0202 	orr.w	r2, r2, #2
 8003efe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	7c1b      	ldrb	r3, [r3, #16]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d108      	bne.n	8003f1a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f16:	619a      	str	r2, [r3, #24]
 8003f18:	e007      	b.n	8003f2a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f28:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7c5b      	ldrb	r3, [r3, #17]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d108      	bne.n	8003f44 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f40:	619a      	str	r2, [r3, #24]
 8003f42:	e007      	b.n	8003f54 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f52:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7c9b      	ldrb	r3, [r3, #18]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d108      	bne.n	8003f6e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f6a:	619a      	str	r2, [r3, #24]
 8003f6c:	e007      	b.n	8003f7e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699a      	ldr	r2, [r3, #24]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003fa2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0210 	bic.w	r2, r2, #16
 8003fb2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d108      	bne.n	8003fce <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0204 	orr.w	r2, r2, #4
 8003fca:	619a      	str	r2, [r3, #24]
 8003fcc:	e030      	b.n	8004030 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d02c      	beq.n	8004030 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d020      	beq.n	8004020 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0210 	orr.w	r2, r2, #16
 8003ffc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d114      	bne.n	8004030 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0220 	orr.w	r2, r2, #32
 8004014:	619a      	str	r2, [r3, #24]
 8004016:	e00b      	b.n	8004030 <HAL_FDCAN_Init+0x234>
 8004018:	08011290 	.word	0x08011290
 800401c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0220 	orr.w	r2, r2, #32
 800402e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	3b01      	subs	r3, #1
 8004036:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	3b01      	subs	r3, #1
 800403e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004040:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004048:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	3b01      	subs	r3, #1
 8004052:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004058:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800405a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004064:	d115      	bne.n	8004092 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	3b01      	subs	r3, #1
 8004072:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004074:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	3b01      	subs	r3, #1
 800407c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800407e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	3b01      	subs	r3, #1
 8004088:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800408e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004090:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b8:	4413      	add	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d012      	beq.n	80040e4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80040c6:	f023 0107 	bic.w	r1, r3, #7
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80040d4:	4413      	add	r3, r2
 80040d6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80040f4:	f023 0107 	bic.w	r1, r3, #7
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004102:	4413      	add	r3, r2
 8004104:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004116:	2b00      	cmp	r3, #0
 8004118:	d013      	beq.n	8004142 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004122:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004130:	4413      	add	r3, r2
 8004132:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004136:	011a      	lsls	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d013      	beq.n	8004172 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004152:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004160:	4413      	add	r3, r2
 8004162:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004166:	021a      	lsls	r2, r3, #8
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a11      	ldr	r2, [pc, #68]	; (80041bc <HAL_FDCAN_Init+0x3c0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d107      	bne.n	800418c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f022 0203 	bic.w	r2, r2, #3
 800418a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fe6d 	bl	8004e84 <FDCAN_CalcultateRamBlockAddresses>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80041b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3760      	adds	r7, #96	; 0x60
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	4000a000 	.word	0x4000a000

080041c0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80041d0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d002      	beq.n	80041de <HAL_FDCAN_ConfigFilter+0x1e>
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d157      	bne.n	800428e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d12b      	bne.n	800423e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	d10d      	bne.n	800420a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80041fa:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004200:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004202:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e00e      	b.n	8004228 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004216:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800421e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e025      	b.n	800428a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	075a      	lsls	r2, r3, #29
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2b07      	cmp	r3, #7
 8004252:	d103      	bne.n	800425c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e006      	b.n	800426a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	079a      	lsls	r2, r3, #30
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	3304      	adds	r3, #4
 8004282:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	e008      	b.n	80042a0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004294:	f043 0202 	orr.w	r2, r3, #2
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d110      	bne.n	80042e8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80042ce:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80042d4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80042e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e008      	b.n	80042fa <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
  }
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_FDCAN_ConfigTxDelayCompensation>:
  * @param  TdcFilter Transmitter Delay Compensation Filter Window Length.
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset, uint32_t TdcFilter)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	0219      	lsls	r1, r3, #8
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	430a      	orrs	r2, r1
 800432a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e008      	b.n	8004342 <HAL_FDCAN_ConfigTxDelayCompensation+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004336:	f043 0204 	orr.w	r2, r3, #4
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d109      	bne.n	8004376 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004370:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e008      	b.n	8004388 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800437c:	f043 0204 	orr.w	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d111      	bne.n	80043cc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e008      	b.n	80043de <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d2:	f043 0204 	orr.w	r2, r3, #4
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d141      	bne.n	8004486 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800440a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e038      	b.n	8004498 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800442e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800443c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e026      	b.n	8004498 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fe95 	bl	8005190 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2101      	movs	r1, #1
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	fa01 f202 	lsl.w	r2, r1, r2
 8004472:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004476:	2201      	movs	r2, #1
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	409a      	lsls	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e008      	b.n	8004498 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800448c:	f043 0208 	orr.w	r2, r3, #8
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b08b      	sub	sp, #44	; 0x2c
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80044b8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80044ba:	7efb      	ldrb	r3, [r7, #27]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	f040 814b 	bne.w	8004758 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d14d      	bne.n	8004564 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e13e      	b.n	800476a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e12c      	b.n	800476a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004518:	0e1b      	lsrs	r3, r3, #24
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d10b      	bne.n	800453a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800452a:	0fdb      	lsrs	r3, r3, #31
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004534:	d101      	bne.n	800453a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004536:	2301      	movs	r3, #1
 8004538:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	69f9      	ldr	r1, [r7, #28]
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
 8004562:	e069      	b.n	8004638 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b41      	cmp	r3, #65	; 0x41
 8004568:	d14d      	bne.n	8004606 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004572:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0ed      	b.n	800476a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e0db      	b.n	800476a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045ba:	0e1b      	lsrs	r3, r3, #24
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d10b      	bne.n	80045dc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045cc:	0fdb      	lsrs	r3, r3, #31
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d6:	d101      	bne.n	80045dc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80045d8:	2301      	movs	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	4413      	add	r3, r2
 80045ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f8:	69f9      	ldr	r1, [r7, #28]
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	e018      	b.n	8004638 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	429a      	cmp	r2, r3
 800460e:	d309      	bcc.n	8004624 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0a2      	b.n	800476a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d107      	bne.n	800465c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0c9b      	lsrs	r3, r3, #18
 8004652:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e005      	b.n	8004668 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	3304      	adds	r3, #4
 8004684:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b29a      	uxth	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	0e1b      	lsrs	r3, r3, #24
 80046ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	0fda      	lsrs	r2, r3, #31
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	3304      	adds	r3, #4
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	e00a      	b.n	80046f2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	441a      	add	r2, r3
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	440b      	add	r3, r1
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	3301      	adds	r3, #1
 80046f0:	623b      	str	r3, [r7, #32]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	0c1b      	lsrs	r3, r3, #16
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80046fa:	5cd3      	ldrb	r3, [r2, r3]
 80046fc:	461a      	mov	r2, r3
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	4293      	cmp	r3, r2
 8004702:	d3eb      	bcc.n	80046dc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d105      	bne.n	8004716 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004714:	e01e      	b.n	8004754 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b41      	cmp	r3, #65	; 0x41
 800471a:	d105      	bne.n	8004728 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004726:	e015      	b.n	8004754 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b1f      	cmp	r3, #31
 800472c:	d808      	bhi.n	8004740 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2101      	movs	r1, #1
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	fa01 f202 	lsl.w	r2, r1, r2
 800473a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800473e:	e009      	b.n	8004754 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f003 021f 	and.w	r2, r3, #31
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2101      	movs	r1, #1
 800474c:	fa01 f202 	lsl.w	r2, r1, r2
 8004750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e008      	b.n	800476a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800475e:	f043 0208 	orr.w	r2, r3, #8
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	372c      	adds	r7, #44	; 0x2c
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	080113c4 	.word	0x080113c4

0800477c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800478e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004790:	7dfb      	ldrb	r3, [r7, #23]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d002      	beq.n	800479c <HAL_FDCAN_ActivateNotification+0x20>
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d155      	bne.n	8004848 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d108      	bne.n	80047bc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80047ba:	e014      	b.n	80047e6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4013      	ands	r3, r2
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d108      	bne.n	80047de <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0202 	orr.w	r2, r2, #2
 80047da:	65da      	str	r2, [r3, #92]	; 0x5c
 80047dc:	e003      	b.n	80047e6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2203      	movs	r2, #3
 80047e4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d009      	beq.n	8004804 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	430a      	orrs	r2, r1
 8004800:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	430a      	orrs	r2, r1
 800481e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <HAL_FDCAN_ActivateNotification+0xec>)
 800482c:	4013      	ands	r3, r2
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	430b      	orrs	r3, r1
 8004834:	6553      	str	r3, [r2, #84]	; 0x54
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	0f9b      	lsrs	r3, r3, #30
 800483e:	490b      	ldr	r1, [pc, #44]	; (800486c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e008      	b.n	800485a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800484e:	f043 0202 	orr.w	r2, r3, #2
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	3fcfffff 	.word	0x3fcfffff
 800486c:	4000a800 	.word	0x4000a800

08004870 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b092      	sub	sp, #72	; 0x48
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004878:	4b90      	ldr	r3, [pc, #576]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	079b      	lsls	r3, r3, #30
 800487e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004880:	4b8e      	ldr	r3, [pc, #568]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	079b      	lsls	r3, r3, #30
 8004886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004888:	4013      	ands	r3, r2
 800488a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004892:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004896:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048a0:	4013      	ands	r3, r2
 80048a2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b8:	4013      	ands	r3, r2
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d0:	4013      	ands	r3, r2
 80048d2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048da:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80048de:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048e8:	4013      	ands	r3, r2
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80048f6:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004900:	4013      	ands	r3, r2
 8004902:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d011      	beq.n	8004936 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004928:	651a      	str	r2, [r3, #80]	; 0x50
 800492a:	4b64      	ldr	r3, [pc, #400]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 800492c:	2200      	movs	r2, #0
 800492e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa5a 	bl	8004dea <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01e      	beq.n	8004982 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494e:	2b00      	cmp	r3, #0
 8004950:	d017      	beq.n	8004982 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004966:	4013      	ands	r3, r2
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004972:	651a      	str	r2, [r3, #80]	; 0x50
 8004974:	4b51      	ldr	r3, [pc, #324]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800497a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fa0b 	bl	8004d98 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800498e:	4b4c      	ldr	r3, [pc, #304]	; (8004ac0 <HAL_FDCAN_IRQHandler+0x250>)
 8004990:	400b      	ands	r3, r1
 8004992:	6513      	str	r3, [r2, #80]	; 0x50
 8004994:	4a49      	ldr	r2, [pc, #292]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 8004996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004998:	0f9b      	lsrs	r3, r3, #30
 800499a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800499c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9c4 	bl	8004d2c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80049a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00d      	beq.n	80049c6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049b0:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <HAL_FDCAN_IRQHandler+0x250>)
 80049b2:	400b      	ands	r3, r1
 80049b4:	6513      	str	r3, [r2, #80]	; 0x50
 80049b6:	4a41      	ldr	r2, [pc, #260]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 80049b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ba:	0f9b      	lsrs	r3, r3, #30
 80049bc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80049be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f9be 	bl	8004d42 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80049c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049d2:	4b3b      	ldr	r3, [pc, #236]	; (8004ac0 <HAL_FDCAN_IRQHandler+0x250>)
 80049d4:	400b      	ands	r3, r1
 80049d6:	6513      	str	r3, [r2, #80]	; 0x50
 80049d8:	4a38      	ldr	r2, [pc, #224]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 80049da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049dc:	0f9b      	lsrs	r3, r3, #30
 80049de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80049e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f006 ffca 	bl	800b97c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049f4:	4b32      	ldr	r3, [pc, #200]	; (8004ac0 <HAL_FDCAN_IRQHandler+0x250>)
 80049f6:	400b      	ands	r3, r1
 80049f8:	6513      	str	r3, [r2, #80]	; 0x50
 80049fa:	4a30      	ldr	r2, [pc, #192]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	0f9b      	lsrs	r3, r3, #30
 8004a00:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004a02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f9a7 	bl	8004d58 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d011      	beq.n	8004a3c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8004a30:	4b22      	ldr	r3, [pc, #136]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f999 	bl	8004d6e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01e      	beq.n	8004a88 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d017      	beq.n	8004a88 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a78:	651a      	str	r2, [r3, #80]	; 0x50
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f97d 	bl	8004d82 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00f      	beq.n	8004ac4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004aac:	651a      	str	r2, [r3, #80]	; 0x50
 8004aae:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_FDCAN_IRQHandler+0x24c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f97a 	bl	8004dae <HAL_FDCAN_RxBufferNewMessageCallback>
 8004aba:	e003      	b.n	8004ac4 <HAL_FDCAN_IRQHandler+0x254>
 8004abc:	4000a800 	.word	0x4000a800
 8004ac0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ae8:	651a      	str	r2, [r3, #80]	; 0x50
 8004aea:	4b8d      	ldr	r3, [pc, #564]	; (8004d20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f966 	bl	8004dc2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d011      	beq.n	8004b28 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004b1a:	651a      	str	r2, [r3, #80]	; 0x50
 8004b1c:	4b80      	ldr	r3, [pc, #512]	; (8004d20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f957 	bl	8004dd6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d016      	beq.n	8004b64 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00f      	beq.n	8004b64 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b4c:	651a      	str	r2, [r3, #80]	; 0x50
 8004b4e:	4b74      	ldr	r3, [pc, #464]	; (8004d20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b70:	4b6c      	ldr	r3, [pc, #432]	; (8004d24 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	6513      	str	r3, [r2, #80]	; 0x50
 8004b76:	4a6a      	ldr	r2, [pc, #424]	; (8004d20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	0f9b      	lsrs	r3, r3, #30
 8004b7c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f946 	bl	8004e12 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d011      	beq.n	8004bb0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b92:	4b64      	ldr	r3, [pc, #400]	; (8004d24 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004b94:	400b      	ands	r3, r1
 8004b96:	6513      	str	r3, [r2, #80]	; 0x50
 8004b98:	4a61      	ldr	r2, [pc, #388]	; (8004d20 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9c:	0f9b      	lsrs	r3, r3, #30
 8004b9e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a5c      	ldr	r2, [pc, #368]	; (8004d28 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	f040 80a6 	bne.w	8004d08 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 809e 	beq.w	8004d08 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	4013      	ands	r3, r2
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bee:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	6a3a      	ldr	r2, [r7, #32]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004c06:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004c1e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004c36:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4013      	ands	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c50:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f8e7 	bl	8004e28 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	6a3a      	ldr	r2, [r7, #32]
 8004c66:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8004c68:	6a39      	ldr	r1, [r7, #32]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8e7 	bl	8004e3e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01b      	beq.n	8004cb6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d014      	beq.n	8004cb6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2240      	movs	r2, #64	; 0x40
 8004caa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	6939      	ldr	r1, [r7, #16]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8cf 	bl	8004e54 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8004cc4:	69f9      	ldr	r1, [r7, #28]
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f8d0 	bl	8004e6c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f873 	bl	8004dfe <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3748      	adds	r7, #72	; 0x48
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	4000a800 	.word	0x4000a800
 8004d24:	3fcfffff 	.word	0x3fcfffff
 8004d28:	4000a000 	.word	0x4000a000

08004d2c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004e9a:	4ba7      	ldr	r3, [pc, #668]	; (8005138 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	0091      	lsls	r1, r2, #2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	041a      	lsls	r2, r3, #16
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	4413      	add	r3, r2
 8004ed0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004eda:	4b97      	ldr	r3, [pc, #604]	; (8005138 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	0091      	lsls	r1, r2, #2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6812      	ldr	r2, [r2, #0]
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	041a      	lsls	r2, r3, #16
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4413      	add	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004f1c:	4b86      	ldr	r3, [pc, #536]	; (8005138 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	0091      	lsls	r1, r2, #2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f36:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	041a      	lsls	r2, r3, #16
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	4413      	add	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004f64:	4b74      	ldr	r3, [pc, #464]	; (8005138 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	0091      	lsls	r1, r2, #2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f7e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f86:	041a      	lsls	r2, r3, #16
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004fac:	4b62      	ldr	r3, [pc, #392]	; (8005138 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	0091      	lsls	r1, r2, #2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	430b      	orrs	r3, r1
 8004fba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004fd8:	4b57      	ldr	r3, [pc, #348]	; (8005138 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	0091      	lsls	r1, r2, #2
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ff2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffa:	041a      	lsls	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4413      	add	r3, r2
 8005010:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800501a:	4b47      	ldr	r3, [pc, #284]	; (8005138 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800501c:	4013      	ands	r3, r2
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	0091      	lsls	r1, r2, #2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	430b      	orrs	r3, r1
 8005028:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005034:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	041a      	lsls	r2, r3, #16
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005050:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005058:	061a      	lsls	r2, r3, #24
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005068:	4b34      	ldr	r3, [pc, #208]	; (800513c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800506a:	4413      	add	r3, r2
 800506c:	009a      	lsls	r2, r3, #2
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800509e:	fb01 f303 	mul.w	r3, r1, r3
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80050b6:	fb01 f303 	mul.w	r3, r1, r3
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80050fe:	fb01 f303 	mul.w	r3, r1, r3
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	441a      	add	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512e:	4a04      	ldr	r2, [pc, #16]	; (8005140 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d915      	bls.n	8005160 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005134:	e006      	b.n	8005144 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005136:	bf00      	nop
 8005138:	ffff0003 	.word	0xffff0003
 800513c:	10002b00 	.word	0x10002b00
 8005140:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2203      	movs	r2, #3
 8005158:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e010      	b.n	8005182 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e005      	b.n	8005174 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3304      	adds	r3, #4
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	429a      	cmp	r2, r3
 800517e:	d3f3      	bcc.n	8005168 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop

08005190 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	; 0x24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80051ae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e00a      	b.n	80051d2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80051c4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80051ca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80051cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80051dc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80051e2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80051e8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	fb01 f303 	mul.w	r3, r1, r3
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	3304      	adds	r3, #4
 8005212:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	3304      	adds	r3, #4
 800521e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005220:	2300      	movs	r3, #0
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e020      	b.n	8005268 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	3303      	adds	r3, #3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4413      	add	r3, r2
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	3302      	adds	r3, #2
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	440b      	add	r3, r1
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800523e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	3301      	adds	r3, #1
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	440b      	add	r3, r1
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800524c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	440a      	add	r2, r1
 8005254:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8005256:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	3304      	adds	r3, #4
 8005260:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	3304      	adds	r3, #4
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	0c1b      	lsrs	r3, r3, #16
 800526e:	4a06      	ldr	r2, [pc, #24]	; (8005288 <FDCAN_CopyMessageToRAM+0xf8>)
 8005270:	5cd3      	ldrb	r3, [r2, r3]
 8005272:	461a      	mov	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4293      	cmp	r3, r2
 8005278:	d3d5      	bcc.n	8005226 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	3724      	adds	r7, #36	; 0x24
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	080113c4 	.word	0x080113c4

0800528c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800529a:	4b89      	ldr	r3, [pc, #548]	; (80054c0 <HAL_GPIO_Init+0x234>)
 800529c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800529e:	e194      	b.n	80055ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	2101      	movs	r1, #1
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	4013      	ands	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8186 	beq.w	80055c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d005      	beq.n	80052d0 <HAL_GPIO_Init+0x44>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d130      	bne.n	8005332 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	2203      	movs	r2, #3
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005306:	2201      	movs	r2, #1
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4013      	ands	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	f003 0201 	and.w	r2, r3, #1
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b03      	cmp	r3, #3
 800533c:	d017      	beq.n	800536e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	2203      	movs	r2, #3
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43db      	mvns	r3, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4013      	ands	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	4313      	orrs	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d123      	bne.n	80053c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	08da      	lsrs	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3208      	adds	r2, #8
 8005382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	220f      	movs	r2, #15
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	43db      	mvns	r3, r3
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4013      	ands	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	08da      	lsrs	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3208      	adds	r2, #8
 80053bc:	69b9      	ldr	r1, [r7, #24]
 80053be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	2203      	movs	r2, #3
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	43db      	mvns	r3, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4013      	ands	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f003 0203 	and.w	r2, r3, #3
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 80e0 	beq.w	80055c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005404:	4b2f      	ldr	r3, [pc, #188]	; (80054c4 <HAL_GPIO_Init+0x238>)
 8005406:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800540a:	4a2e      	ldr	r2, [pc, #184]	; (80054c4 <HAL_GPIO_Init+0x238>)
 800540c:	f043 0302 	orr.w	r3, r3, #2
 8005410:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005414:	4b2b      	ldr	r3, [pc, #172]	; (80054c4 <HAL_GPIO_Init+0x238>)
 8005416:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005422:	4a29      	ldr	r2, [pc, #164]	; (80054c8 <HAL_GPIO_Init+0x23c>)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	3302      	adds	r3, #2
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	220f      	movs	r2, #15
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	4013      	ands	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a20      	ldr	r2, [pc, #128]	; (80054cc <HAL_GPIO_Init+0x240>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d052      	beq.n	80054f4 <HAL_GPIO_Init+0x268>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <HAL_GPIO_Init+0x244>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d031      	beq.n	80054ba <HAL_GPIO_Init+0x22e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1e      	ldr	r2, [pc, #120]	; (80054d4 <HAL_GPIO_Init+0x248>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d02b      	beq.n	80054b6 <HAL_GPIO_Init+0x22a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1d      	ldr	r2, [pc, #116]	; (80054d8 <HAL_GPIO_Init+0x24c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d025      	beq.n	80054b2 <HAL_GPIO_Init+0x226>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1c      	ldr	r2, [pc, #112]	; (80054dc <HAL_GPIO_Init+0x250>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d01f      	beq.n	80054ae <HAL_GPIO_Init+0x222>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <HAL_GPIO_Init+0x254>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d019      	beq.n	80054aa <HAL_GPIO_Init+0x21e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1a      	ldr	r2, [pc, #104]	; (80054e4 <HAL_GPIO_Init+0x258>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_GPIO_Init+0x21a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <HAL_GPIO_Init+0x25c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00d      	beq.n	80054a2 <HAL_GPIO_Init+0x216>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a18      	ldr	r2, [pc, #96]	; (80054ec <HAL_GPIO_Init+0x260>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d007      	beq.n	800549e <HAL_GPIO_Init+0x212>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a17      	ldr	r2, [pc, #92]	; (80054f0 <HAL_GPIO_Init+0x264>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_GPIO_Init+0x20e>
 8005496:	2309      	movs	r3, #9
 8005498:	e02d      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 800549a:	230a      	movs	r3, #10
 800549c:	e02b      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 800549e:	2308      	movs	r3, #8
 80054a0:	e029      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 80054a2:	2307      	movs	r3, #7
 80054a4:	e027      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 80054a6:	2306      	movs	r3, #6
 80054a8:	e025      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 80054aa:	2305      	movs	r3, #5
 80054ac:	e023      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 80054ae:	2304      	movs	r3, #4
 80054b0:	e021      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 80054b2:	2303      	movs	r3, #3
 80054b4:	e01f      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e01d      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e01b      	b.n	80054f6 <HAL_GPIO_Init+0x26a>
 80054be:	bf00      	nop
 80054c0:	58000080 	.word	0x58000080
 80054c4:	58024400 	.word	0x58024400
 80054c8:	58000400 	.word	0x58000400
 80054cc:	58020000 	.word	0x58020000
 80054d0:	58020400 	.word	0x58020400
 80054d4:	58020800 	.word	0x58020800
 80054d8:	58020c00 	.word	0x58020c00
 80054dc:	58021000 	.word	0x58021000
 80054e0:	58021400 	.word	0x58021400
 80054e4:	58021800 	.word	0x58021800
 80054e8:	58021c00 	.word	0x58021c00
 80054ec:	58022000 	.word	0x58022000
 80054f0:	58022400 	.word	0x58022400
 80054f4:	2300      	movs	r3, #0
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	f002 0203 	and.w	r2, r2, #3
 80054fc:	0092      	lsls	r2, r2, #2
 80054fe:	4093      	lsls	r3, r2
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4313      	orrs	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005506:	4938      	ldr	r1, [pc, #224]	; (80055e8 <HAL_GPIO_Init+0x35c>)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	089b      	lsrs	r3, r3, #2
 800550c:	3302      	adds	r3, #2
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	43db      	mvns	r3, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4013      	ands	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800553a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	43db      	mvns	r3, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	3301      	adds	r3, #1
 80055c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	fa22 f303 	lsr.w	r3, r2, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f47f ae63 	bne.w	80052a0 <HAL_GPIO_Init+0x14>
  }
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	3724      	adds	r7, #36	; 0x24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	58000400 	.word	0x58000400

080055ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	807b      	strh	r3, [r7, #2]
 80055f8:	4613      	mov	r3, r2
 80055fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055fc:	787b      	ldrb	r3, [r7, #1]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005602:	887a      	ldrh	r2, [r7, #2]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005608:	e003      	b.n	8005612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800560a:	887b      	ldrh	r3, [r7, #2]
 800560c:	041a      	lsls	r2, r3, #16
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	619a      	str	r2, [r3, #24]
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e07f      	b.n	8005732 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fb f8f4 	bl	8000834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	; 0x24
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005670:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005680:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d107      	bne.n	800569a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	e006      	b.n	80056a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d104      	bne.n	80056ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6859      	ldr	r1, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b1d      	ldr	r3, [pc, #116]	; (800573c <HAL_I2C_Init+0x11c>)
 80056c6:	430b      	orrs	r3, r1
 80056c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69d9      	ldr	r1, [r3, #28]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a1a      	ldr	r2, [r3, #32]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	02008000 	.word	0x02008000

08005740 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af02      	add	r7, sp, #8
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	4608      	mov	r0, r1
 800574a:	4611      	mov	r1, r2
 800574c:	461a      	mov	r2, r3
 800574e:	4603      	mov	r3, r0
 8005750:	817b      	strh	r3, [r7, #10]
 8005752:	460b      	mov	r3, r1
 8005754:	813b      	strh	r3, [r7, #8]
 8005756:	4613      	mov	r3, r2
 8005758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b20      	cmp	r3, #32
 8005764:	f040 80f9 	bne.w	800595a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_I2C_Mem_Write+0x34>
 800576e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d105      	bne.n	8005780 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800577a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e0ed      	b.n	800595c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_I2C_Mem_Write+0x4e>
 800578a:	2302      	movs	r3, #2
 800578c:	e0e6      	b.n	800595c <HAL_I2C_Mem_Write+0x21c>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005796:	f7fb fe57 	bl	8001448 <HAL_GetTick>
 800579a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	2319      	movs	r3, #25
 80057a2:	2201      	movs	r2, #1
 80057a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f001 fed1 	bl	8007550 <I2C_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0d1      	b.n	800595c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2221      	movs	r2, #33	; 0x21
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2240      	movs	r2, #64	; 0x40
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a3a      	ldr	r2, [r7, #32]
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057e0:	88f8      	ldrh	r0, [r7, #6]
 80057e2:	893a      	ldrh	r2, [r7, #8]
 80057e4:	8979      	ldrh	r1, [r7, #10]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	4603      	mov	r3, r0
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 ff11 	bl	8006618 <I2C_RequestMemoryWrite>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e0a9      	b.n	800595c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580c:	b29b      	uxth	r3, r3
 800580e:	2bff      	cmp	r3, #255	; 0xff
 8005810:	d90e      	bls.n	8005830 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	22ff      	movs	r2, #255	; 0xff
 8005816:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	b2da      	uxtb	r2, r3
 800581e:	8979      	ldrh	r1, [r7, #10]
 8005820:	2300      	movs	r3, #0
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f002 f839 	bl	80078a0 <I2C_TransferConfig>
 800582e:	e00f      	b.n	8005850 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583e:	b2da      	uxtb	r2, r3
 8005840:	8979      	ldrh	r1, [r7, #10]
 8005842:	2300      	movs	r3, #0
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f002 f828 	bl	80078a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f001 febb 	bl	80075d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e07b      	b.n	800595c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	781a      	ldrb	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d034      	beq.n	8005908 <HAL_I2C_Mem_Write+0x1c8>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d130      	bne.n	8005908 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	2200      	movs	r2, #0
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f001 fe4d 	bl	8007550 <I2C_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e04d      	b.n	800595c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2bff      	cmp	r3, #255	; 0xff
 80058c8:	d90e      	bls.n	80058e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	22ff      	movs	r2, #255	; 0xff
 80058ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	8979      	ldrh	r1, [r7, #10]
 80058d8:	2300      	movs	r3, #0
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f001 ffdd 	bl	80078a0 <I2C_TransferConfig>
 80058e6:	e00f      	b.n	8005908 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	8979      	ldrh	r1, [r7, #10]
 80058fa:	2300      	movs	r3, #0
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f001 ffcc 	bl	80078a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d19e      	bne.n	8005850 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f001 fe9a 	bl	8007650 <I2C_WaitOnSTOPFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e01a      	b.n	800595c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2220      	movs	r2, #32
 800592c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6859      	ldr	r1, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <HAL_I2C_Mem_Write+0x224>)
 800593a:	400b      	ands	r3, r1
 800593c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e000      	b.n	800595c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
  }
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	fe00e800 	.word	0xfe00e800

08005968 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	461a      	mov	r2, r3
 8005976:	4603      	mov	r3, r0
 8005978:	817b      	strh	r3, [r7, #10]
 800597a:	460b      	mov	r3, r1
 800597c:	813b      	strh	r3, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b20      	cmp	r3, #32
 800598c:	f040 80d5 	bne.w	8005b3a <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_I2C_Mem_Read_DMA+0x34>
 8005996:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0c9      	b.n	8005b3c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b6:	d101      	bne.n	80059bc <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80059b8:	2302      	movs	r3, #2
 80059ba:	e0bf      	b.n	8005b3c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_I2C_Mem_Read_DMA+0x62>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e0b8      	b.n	8005b3c <HAL_I2C_Mem_Read_DMA+0x1d4>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059d2:	f7fb fd39 	bl	8001448 <HAL_GetTick>
 80059d6:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2222      	movs	r2, #34	; 0x22
 80059dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2240      	movs	r2, #64	; 0x40
 80059e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80059f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4a51      	ldr	r2, [pc, #324]	; (8005b44 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80059fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a51      	ldr	r2, [pc, #324]	; (8005b48 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2bff      	cmp	r3, #255	; 0xff
 8005a0e:	d906      	bls.n	8005a1e <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	22ff      	movs	r2, #255	; 0xff
 8005a14:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	e007      	b.n	8005a2e <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a2c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005a2e:	88f8      	ldrh	r0, [r7, #6]
 8005a30:	893a      	ldrh	r2, [r7, #8]
 8005a32:	8979      	ldrh	r1, [r7, #10]
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	2319      	movs	r3, #25
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fe3e 	bl	80066c0 <I2C_RequestMemoryRead>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e072      	b.n	8005b3c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d020      	beq.n	8005aa0 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	4a3a      	ldr	r2, [pc, #232]	; (8005b4c <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	4a39      	ldr	r2, [pc, #228]	; (8005b50 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8005a6c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	2200      	movs	r2, #0
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3324      	adds	r3, #36	; 0x24
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
                                       hi2c->XferSize);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005a90:	f7fc f9da 	bl	8001e48 <HAL_DMA_Start_IT>
 8005a94:	4603      	mov	r3, r0
 8005a96:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d139      	bne.n	8005b12 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8005a9e:	e013      	b.n	8005ac8 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e039      	b.n	8005b3c <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	8979      	ldrh	r1, [r7, #10]
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f001 fee2 	bl	80078a0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005af6:	2110      	movs	r1, #16
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f001 ff03 	bl	8007904 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b0c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e014      	b.n	8005b3c <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	f043 0210 	orr.w	r2, r3, #16
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	ffff0000 	.word	0xffff0000
 8005b48:	08006073 	.word	0x08006073
 8005b4c:	0800720f 	.word	0x0800720f
 8005b50:	080072a5 	.word	0x080072a5
 8005b54:	80002400 	.word	0x80002400

08005b58 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	460b      	mov	r3, r1
 8005b66:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	f040 80ef 	bne.w	8005d58 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b88:	d101      	bne.n	8005b8e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e0e5      	b.n	8005d5a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_I2C_IsDeviceReady+0x44>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e0de      	b.n	8005d5a <HAL_I2C_IsDeviceReady+0x202>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2224      	movs	r2, #36	; 0x24
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d105      	bne.n	8005bc6 <HAL_I2C_IsDeviceReady+0x6e>
 8005bba:	897b      	ldrh	r3, [r7, #10]
 8005bbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bc0:	4b68      	ldr	r3, [pc, #416]	; (8005d64 <HAL_I2C_IsDeviceReady+0x20c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	e004      	b.n	8005bd0 <HAL_I2C_IsDeviceReady+0x78>
 8005bc6:	897b      	ldrh	r3, [r7, #10]
 8005bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bcc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005bd6:	f7fb fc37 	bl	8001448 <HAL_GetTick>
 8005bda:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	bf0c      	ite	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	2300      	movne	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	bf0c      	ite	eq
 8005c00:	2301      	moveq	r3, #1
 8005c02:	2300      	movne	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005c08:	e034      	b.n	8005c74 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d01a      	beq.n	8005c48 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fb fc19 	bl	8001448 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <HAL_I2C_IsDeviceReady+0xd0>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10f      	bne.n	8005c48 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e088      	b.n	8005d5a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2301      	moveq	r3, #1
 8005c6e:	2300      	movne	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005c74:	7ffb      	ldrb	r3, [r7, #31]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <HAL_I2C_IsDeviceReady+0x128>
 8005c7a:	7fbb      	ldrb	r3, [r7, #30]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0c4      	beq.n	8005c0a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d01a      	beq.n	8005cc4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2120      	movs	r1, #32
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f001 fc59 	bl	8007550 <I2C_WaitOnFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e058      	b.n	8005d5a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2220      	movs	r2, #32
 8005cae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e04a      	b.n	8005d5a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2120      	movs	r1, #32
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f001 fc3e 	bl	8007550 <I2C_WaitOnFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e03d      	b.n	8005d5a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2220      	movs	r2, #32
 8005cec:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d118      	bne.n	8005d28 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d04:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2120      	movs	r1, #32
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f001 fc1d 	bl	8007550 <I2C_WaitOnFlagUntilTimeout>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e01c      	b.n	8005d5a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2220      	movs	r2, #32
 8005d26:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	f63f af3d 	bhi.w	8005bb2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d44:	f043 0220 	orr.w	r2, r3, #32
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	02002000 	.word	0x02002000

08005d68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	68f9      	ldr	r1, [r7, #12]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
  }
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <I2C_Slave_ISR_IT+0x24>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e0ec      	b.n	800606a <I2C_Slave_ISR_IT+0x1fe>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d009      	beq.n	8005eb8 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005eb0:	6939      	ldr	r1, [r7, #16]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fe42 	bl	8006b3c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	091b      	lsrs	r3, r3, #4
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d04d      	beq.n	8005f60 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	091b      	lsrs	r3, r3, #4
 8005ec8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d047      	beq.n	8005f60 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d128      	bne.n	8005f2c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b28      	cmp	r3, #40	; 0x28
 8005ee4:	d108      	bne.n	8005ef8 <I2C_Slave_ISR_IT+0x8c>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eec:	d104      	bne.n	8005ef8 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005eee:	6939      	ldr	r1, [r7, #16]
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f001 f81b 	bl	8006f2c <I2C_ITListenCplt>
 8005ef6:	e032      	b.n	8005f5e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b29      	cmp	r3, #41	; 0x29
 8005f02:	d10e      	bne.n	8005f22 <I2C_Slave_ISR_IT+0xb6>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f0a:	d00a      	beq.n	8005f22 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2210      	movs	r2, #16
 8005f12:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f001 f956 	bl	80071c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fce5 	bl	80068ea <I2C_ITSlaveSeqCplt>
 8005f20:	e01d      	b.n	8005f5e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2210      	movs	r2, #16
 8005f28:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005f2a:	e096      	b.n	800605a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2210      	movs	r2, #16
 8005f32:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f38:	f043 0204 	orr.w	r2, r3, #4
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <I2C_Slave_ISR_IT+0xe4>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f4c:	f040 8085 	bne.w	800605a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f54:	4619      	mov	r1, r3
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f001 f83e 	bl	8006fd8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005f5c:	e07d      	b.n	800605a <I2C_Slave_ISR_IT+0x1ee>
 8005f5e:	e07c      	b.n	800605a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	089b      	lsrs	r3, r3, #2
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d030      	beq.n	8005fce <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	089b      	lsrs	r3, r3, #2
 8005f70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02a      	beq.n	8005fce <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d018      	beq.n	8005fb4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d14f      	bne.n	800605e <I2C_Slave_ISR_IT+0x1f2>
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fc4:	d04b      	beq.n	800605e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fc8f 	bl	80068ea <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005fcc:	e047      	b.n	800605e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	08db      	lsrs	r3, r3, #3
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d004      	beq.n	8005ff0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005fe6:	6939      	ldr	r1, [r7, #16]
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fbbd 	bl	8006768 <I2C_ITAddrCplt>
 8005fee:	e037      	b.n	8006060 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d031      	beq.n	8006060 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006004:	2b00      	cmp	r3, #0
 8006006:	d02b      	beq.n	8006060 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	781a      	ldrb	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	851a      	strh	r2, [r3, #40]	; 0x28
 8006042:	e00d      	b.n	8006060 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800604a:	d002      	beq.n	8006052 <I2C_Slave_ISR_IT+0x1e6>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fc49 	bl	80068ea <I2C_ITSlaveSeqCplt>
 8006058:	e002      	b.n	8006060 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800605a:	bf00      	nop
 800605c:	e000      	b.n	8006060 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800605e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b088      	sub	sp, #32
 8006076:	af02      	add	r7, sp, #8
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <I2C_Master_ISR_DMA+0x1a>
 8006088:	2302      	movs	r3, #2
 800608a:	e0e1      	b.n	8006250 <I2C_Master_ISR_DMA+0x1de>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	091b      	lsrs	r3, r3, #4
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d017      	beq.n	80060d0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	091b      	lsrs	r3, r3, #4
 80060a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d011      	beq.n	80060d0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2210      	movs	r2, #16
 80060b2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b8:	f043 0204 	orr.w	r2, r3, #4
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80060c0:	2120      	movs	r1, #32
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f001 fc1e 	bl	8007904 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f001 f87c 	bl	80071c6 <I2C_Flush_TXDR>
 80060ce:	e0ba      	b.n	8006246 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	09db      	lsrs	r3, r3, #7
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d072      	beq.n	80061c2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	099b      	lsrs	r3, r3, #6
 80060e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d06c      	beq.n	80061c2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d04e      	beq.n	80061a0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800610e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	2bff      	cmp	r3, #255	; 0xff
 8006118:	d906      	bls.n	8006128 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	22ff      	movs	r2, #255	; 0xff
 800611e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	e010      	b.n	800614a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800613a:	d003      	beq.n	8006144 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	e002      	b.n	800614a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006148:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614e:	b2da      	uxtb	r2, r3
 8006150:	8a79      	ldrh	r1, [r7, #18]
 8006152:	2300      	movs	r3, #0
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f001 fba1 	bl	80078a0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b22      	cmp	r3, #34	; 0x22
 800617a:	d108      	bne.n	800618e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800618a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800618c:	e05b      	b.n	8006246 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800619c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800619e:	e052      	b.n	8006246 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ae:	d003      	beq.n	80061b8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fb5d 	bl	8006870 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80061b6:	e046      	b.n	8006246 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061b8:	2140      	movs	r1, #64	; 0x40
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 ff0c 	bl	8006fd8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80061c0:	e041      	b.n	8006246 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	099b      	lsrs	r3, r3, #6
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d029      	beq.n	8006222 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	099b      	lsrs	r3, r3, #6
 80061d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d023      	beq.n	8006222 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d119      	bne.n	8006218 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061f2:	d027      	beq.n	8006244 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061fc:	d108      	bne.n	8006210 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800620c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800620e:	e019      	b.n	8006244 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fb2d 	bl	8006870 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006216:	e015      	b.n	8006244 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fedc 	bl	8006fd8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006220:	e010      	b.n	8006244 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fbb3 	bl	80069a8 <I2C_ITMasterCplt>
 8006242:	e000      	b.n	8006246 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006244:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <I2C_Slave_ISR_DMA+0x24>
 8006278:	2302      	movs	r3, #2
 800627a:	e1c8      	b.n	800660e <I2C_Slave_ISR_DMA+0x3b6>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fc4c 	bl	8006b3c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	091b      	lsrs	r3, r3, #4
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8199 	beq.w	80065e4 <I2C_Slave_ISR_DMA+0x38c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	091b      	lsrs	r3, r3, #4
 80062b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 8192 	beq.w	80065e4 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	0b9b      	lsrs	r3, r3, #14
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d106      	bne.n	80062da <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0bdb      	lsrs	r3, r3, #15
 80062d0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 817e 	beq.w	80065d6 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d07c      	beq.n	80063dc <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0bdb      	lsrs	r3, r3, #15
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d076      	beq.n	80063dc <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a8d      	ldr	r2, [pc, #564]	; (800652c <I2C_Slave_ISR_DMA+0x2d4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d059      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a8b      	ldr	r2, [pc, #556]	; (8006530 <I2C_Slave_ISR_DMA+0x2d8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d053      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a89      	ldr	r2, [pc, #548]	; (8006534 <I2C_Slave_ISR_DMA+0x2dc>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d04d      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a87      	ldr	r2, [pc, #540]	; (8006538 <I2C_Slave_ISR_DMA+0x2e0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d047      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a85      	ldr	r2, [pc, #532]	; (800653c <I2C_Slave_ISR_DMA+0x2e4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d041      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a83      	ldr	r2, [pc, #524]	; (8006540 <I2C_Slave_ISR_DMA+0x2e8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d03b      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a81      	ldr	r2, [pc, #516]	; (8006544 <I2C_Slave_ISR_DMA+0x2ec>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d035      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a7f      	ldr	r2, [pc, #508]	; (8006548 <I2C_Slave_ISR_DMA+0x2f0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d02f      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a7d      	ldr	r2, [pc, #500]	; (800654c <I2C_Slave_ISR_DMA+0x2f4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d029      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a7b      	ldr	r2, [pc, #492]	; (8006550 <I2C_Slave_ISR_DMA+0x2f8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d023      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a79      	ldr	r2, [pc, #484]	; (8006554 <I2C_Slave_ISR_DMA+0x2fc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01d      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a77      	ldr	r2, [pc, #476]	; (8006558 <I2C_Slave_ISR_DMA+0x300>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d017      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a75      	ldr	r2, [pc, #468]	; (800655c <I2C_Slave_ISR_DMA+0x304>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d011      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a73      	ldr	r2, [pc, #460]	; (8006560 <I2C_Slave_ISR_DMA+0x308>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00b      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a71      	ldr	r2, [pc, #452]	; (8006564 <I2C_Slave_ISR_DMA+0x30c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d005      	beq.n	80063ae <I2C_Slave_ISR_DMA+0x156>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a6f      	ldr	r2, [pc, #444]	; (8006568 <I2C_Slave_ISR_DMA+0x310>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d109      	bne.n	80063c2 <I2C_Slave_ISR_DMA+0x16a>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bf0c      	ite	eq
 80063ba:	2301      	moveq	r3, #1
 80063bc:	2300      	movne	r3, #0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	e008      	b.n	80063d4 <I2C_Slave_ISR_DMA+0x17c>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bf0c      	ite	eq
 80063ce:	2301      	moveq	r3, #1
 80063d0:	2300      	movne	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80063d8:	2301      	movs	r3, #1
 80063da:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d07c      	beq.n	80064de <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	0b9b      	lsrs	r3, r3, #14
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d076      	beq.n	80064de <I2C_Slave_ISR_DMA+0x286>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a4d      	ldr	r2, [pc, #308]	; (800652c <I2C_Slave_ISR_DMA+0x2d4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d059      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a4b      	ldr	r2, [pc, #300]	; (8006530 <I2C_Slave_ISR_DMA+0x2d8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d053      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a49      	ldr	r2, [pc, #292]	; (8006534 <I2C_Slave_ISR_DMA+0x2dc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d04d      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a47      	ldr	r2, [pc, #284]	; (8006538 <I2C_Slave_ISR_DMA+0x2e0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d047      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a45      	ldr	r2, [pc, #276]	; (800653c <I2C_Slave_ISR_DMA+0x2e4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d041      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a43      	ldr	r2, [pc, #268]	; (8006540 <I2C_Slave_ISR_DMA+0x2e8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d03b      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a41      	ldr	r2, [pc, #260]	; (8006544 <I2C_Slave_ISR_DMA+0x2ec>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d035      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a3f      	ldr	r2, [pc, #252]	; (8006548 <I2C_Slave_ISR_DMA+0x2f0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d02f      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a3d      	ldr	r2, [pc, #244]	; (800654c <I2C_Slave_ISR_DMA+0x2f4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d029      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a3b      	ldr	r2, [pc, #236]	; (8006550 <I2C_Slave_ISR_DMA+0x2f8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d023      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a39      	ldr	r2, [pc, #228]	; (8006554 <I2C_Slave_ISR_DMA+0x2fc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d01d      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a37      	ldr	r2, [pc, #220]	; (8006558 <I2C_Slave_ISR_DMA+0x300>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d017      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a35      	ldr	r2, [pc, #212]	; (800655c <I2C_Slave_ISR_DMA+0x304>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d011      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a33      	ldr	r2, [pc, #204]	; (8006560 <I2C_Slave_ISR_DMA+0x308>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00b      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a31      	ldr	r2, [pc, #196]	; (8006564 <I2C_Slave_ISR_DMA+0x30c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d005      	beq.n	80064b0 <I2C_Slave_ISR_DMA+0x258>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a2f      	ldr	r2, [pc, #188]	; (8006568 <I2C_Slave_ISR_DMA+0x310>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d109      	bne.n	80064c4 <I2C_Slave_ISR_DMA+0x26c>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	bf0c      	ite	eq
 80064bc:	2301      	moveq	r3, #1
 80064be:	2300      	movne	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	e008      	b.n	80064d6 <I2C_Slave_ISR_DMA+0x27e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	bf0c      	ite	eq
 80064d0:	2301      	moveq	r3, #1
 80064d2:	2300      	movne	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 80064da:	2301      	movs	r3, #1
 80064dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d148      	bne.n	8006576 <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b28      	cmp	r3, #40	; 0x28
 80064ee:	d108      	bne.n	8006502 <I2C_Slave_ISR_DMA+0x2aa>
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064f6:	d104      	bne.n	8006502 <I2C_Slave_ISR_DMA+0x2aa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 fd16 	bl	8006f2c <I2C_ITListenCplt>
 8006500:	e068      	b.n	80065d4 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b29      	cmp	r3, #41	; 0x29
 800650c:	d12e      	bne.n	800656c <I2C_Slave_ISR_DMA+0x314>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006514:	d02a      	beq.n	800656c <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2210      	movs	r2, #16
 800651c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fe51 	bl	80071c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f9e0 	bl	80068ea <I2C_ITSlaveSeqCplt>
 800652a:	e053      	b.n	80065d4 <I2C_Slave_ISR_DMA+0x37c>
 800652c:	40020010 	.word	0x40020010
 8006530:	40020028 	.word	0x40020028
 8006534:	40020040 	.word	0x40020040
 8006538:	40020058 	.word	0x40020058
 800653c:	40020070 	.word	0x40020070
 8006540:	40020088 	.word	0x40020088
 8006544:	400200a0 	.word	0x400200a0
 8006548:	400200b8 	.word	0x400200b8
 800654c:	40020410 	.word	0x40020410
 8006550:	40020428 	.word	0x40020428
 8006554:	40020440 	.word	0x40020440
 8006558:	40020458 	.word	0x40020458
 800655c:	40020470 	.word	0x40020470
 8006560:	40020488 	.word	0x40020488
 8006564:	400204a0 	.word	0x400204a0
 8006568:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2210      	movs	r2, #16
 8006572:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006574:	e034      	b.n	80065e0 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2210      	movs	r2, #16
 800657c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006582:	f043 0204 	orr.w	r2, r3, #4
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006590:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <I2C_Slave_ISR_DMA+0x348>
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800659e:	d11f      	bne.n	80065e0 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	2b21      	cmp	r3, #33	; 0x21
 80065a4:	d002      	beq.n	80065ac <I2C_Slave_ISR_DMA+0x354>
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	2b29      	cmp	r3, #41	; 0x29
 80065aa:	d103      	bne.n	80065b4 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2221      	movs	r2, #33	; 0x21
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
 80065b2:	e008      	b.n	80065c6 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b22      	cmp	r3, #34	; 0x22
 80065b8:	d002      	beq.n	80065c0 <I2C_Slave_ISR_DMA+0x368>
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	2b2a      	cmp	r3, #42	; 0x2a
 80065be:	d102      	bne.n	80065c6 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2222      	movs	r2, #34	; 0x22
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 fd03 	bl	8006fd8 <I2C_ITError>
      if (treatdmanack == 1U)
 80065d2:	e005      	b.n	80065e0 <I2C_Slave_ISR_DMA+0x388>
 80065d4:	e004      	b.n	80065e0 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2210      	movs	r2, #16
 80065dc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80065de:	e011      	b.n	8006604 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 80065e0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80065e2:	e00f      	b.n	8006604 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	08db      	lsrs	r3, r3, #3
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <I2C_Slave_ISR_DMA+0x3ac>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	08db      	lsrs	r3, r3, #3
 80065f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 f8b2 	bl	8006768 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3720      	adds	r7, #32
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop

08006618 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	4608      	mov	r0, r1
 8006622:	4611      	mov	r1, r2
 8006624:	461a      	mov	r2, r3
 8006626:	4603      	mov	r3, r0
 8006628:	817b      	strh	r3, [r7, #10]
 800662a:	460b      	mov	r3, r1
 800662c:	813b      	strh	r3, [r7, #8]
 800662e:	4613      	mov	r3, r2
 8006630:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	b2da      	uxtb	r2, r3
 8006636:	8979      	ldrh	r1, [r7, #10]
 8006638:	4b20      	ldr	r3, [pc, #128]	; (80066bc <I2C_RequestMemoryWrite+0xa4>)
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f001 f92d 	bl	80078a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 ffc0 	bl	80075d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e02c      	b.n	80066b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800665a:	88fb      	ldrh	r3, [r7, #6]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d105      	bne.n	800666c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006660:	893b      	ldrh	r3, [r7, #8]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	629a      	str	r2, [r3, #40]	; 0x28
 800666a:	e015      	b.n	8006698 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800666c:	893b      	ldrh	r3, [r7, #8]
 800666e:	0a1b      	lsrs	r3, r3, #8
 8006670:	b29b      	uxth	r3, r3
 8006672:	b2da      	uxtb	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	69b9      	ldr	r1, [r7, #24]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 ffa6 	bl	80075d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e012      	b.n	80066b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800668e:	893b      	ldrh	r3, [r7, #8]
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2200      	movs	r2, #0
 80066a0:	2180      	movs	r1, #128	; 0x80
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 ff54 	bl	8007550 <I2C_WaitOnFlagUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	80002000 	.word	0x80002000

080066c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	4608      	mov	r0, r1
 80066ca:	4611      	mov	r1, r2
 80066cc:	461a      	mov	r2, r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	817b      	strh	r3, [r7, #10]
 80066d2:	460b      	mov	r3, r1
 80066d4:	813b      	strh	r3, [r7, #8]
 80066d6:	4613      	mov	r3, r2
 80066d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80066da:	88fb      	ldrh	r3, [r7, #6]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	8979      	ldrh	r1, [r7, #10]
 80066e0:	4b20      	ldr	r3, [pc, #128]	; (8006764 <I2C_RequestMemoryRead+0xa4>)
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	2300      	movs	r3, #0
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f001 f8da 	bl	80078a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	69b9      	ldr	r1, [r7, #24]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 ff6d 	bl	80075d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e02c      	b.n	800675a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006700:	88fb      	ldrh	r3, [r7, #6]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d105      	bne.n	8006712 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006706:	893b      	ldrh	r3, [r7, #8]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	629a      	str	r2, [r3, #40]	; 0x28
 8006710:	e015      	b.n	800673e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006712:	893b      	ldrh	r3, [r7, #8]
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	b29b      	uxth	r3, r3
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	69b9      	ldr	r1, [r7, #24]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 ff53 	bl	80075d0 <I2C_WaitOnTXISFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e012      	b.n	800675a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006734:	893b      	ldrh	r3, [r7, #8]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2200      	movs	r2, #0
 8006746:	2140      	movs	r1, #64	; 0x40
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 ff01 	bl	8007550 <I2C_WaitOnFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	80002000 	.word	0x80002000

08006768 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800677e:	2b28      	cmp	r3, #40	; 0x28
 8006780:	d16a      	bne.n	8006858 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	0c1b      	lsrs	r3, r3, #16
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	0c1b      	lsrs	r3, r3, #16
 800679a:	b29b      	uxth	r3, r3
 800679c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80067a0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80067bc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d138      	bne.n	8006838 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80067c6:	897b      	ldrh	r3, [r7, #10]
 80067c8:	09db      	lsrs	r3, r3, #7
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	89bb      	ldrh	r3, [r7, #12]
 80067ce:	4053      	eors	r3, r2
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f003 0306 	and.w	r3, r3, #6
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d11c      	bne.n	8006814 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80067da:	897b      	ldrh	r3, [r7, #10]
 80067dc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d13b      	bne.n	8006868 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2208      	movs	r2, #8
 80067fc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006806:	89ba      	ldrh	r2, [r7, #12]
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff faed 	bl	8005dec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006812:	e029      	b.n	8006868 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006814:	893b      	ldrh	r3, [r7, #8]
 8006816:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 f8d5 	bl	80079cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800682a:	89ba      	ldrh	r2, [r7, #12]
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fadb 	bl	8005dec <HAL_I2C_AddrCallback>
}
 8006836:	e017      	b.n	8006868 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 f8c5 	bl	80079cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800684a:	89ba      	ldrh	r2, [r7, #12]
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7ff facb 	bl	8005dec <HAL_I2C_AddrCallback>
}
 8006856:	e007      	b.n	8006868 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2208      	movs	r2, #8
 800685e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b21      	cmp	r3, #33	; 0x21
 800688a:	d115      	bne.n	80068b8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2211      	movs	r2, #17
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80068a0:	2101      	movs	r1, #1
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f892 	bl	80079cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fa73 	bl	8005d9c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068b6:	e014      	b.n	80068e2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2212      	movs	r2, #18
 80068c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80068cc:	2102      	movs	r1, #2
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 f87c 	bl	80079cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff fa67 	bl	8005db0 <HAL_I2C_MasterRxCpltCallback>
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	0b9b      	lsrs	r3, r3, #14
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d008      	beq.n	8006920 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	e00d      	b.n	800693c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	0bdb      	lsrs	r3, r3, #15
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800693a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b29      	cmp	r3, #41	; 0x29
 8006946:	d112      	bne.n	800696e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2228      	movs	r2, #40	; 0x28
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2221      	movs	r2, #33	; 0x21
 8006954:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006956:	2101      	movs	r1, #1
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 f837 	bl	80079cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff fa2c 	bl	8005dc4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800696c:	e017      	b.n	800699e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b2a      	cmp	r3, #42	; 0x2a
 8006978:	d111      	bne.n	800699e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2228      	movs	r2, #40	; 0x28
 800697e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2222      	movs	r2, #34	; 0x22
 8006986:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006988:	2102      	movs	r1, #2
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 f81e 	bl	80079cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff fa1d 	bl	8005dd8 <HAL_I2C_SlaveRxCpltCallback>
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2220      	movs	r2, #32
 80069bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b21      	cmp	r3, #33	; 0x21
 80069c8:	d107      	bne.n	80069da <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069ca:	2101      	movs	r1, #1
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fffd 	bl	80079cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2211      	movs	r2, #17
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
 80069d8:	e00c      	b.n	80069f4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b22      	cmp	r3, #34	; 0x22
 80069e4:	d106      	bne.n	80069f4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80069e6:	2102      	movs	r1, #2
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 ffef 	bl	80079cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2212      	movs	r2, #18
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6859      	ldr	r1, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b4d      	ldr	r3, [pc, #308]	; (8006b34 <I2C_ITMasterCplt+0x18c>)
 8006a00:	400b      	ands	r3, r1
 8006a02:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a4a      	ldr	r2, [pc, #296]	; (8006b38 <I2C_ITMasterCplt+0x190>)
 8006a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	091b      	lsrs	r3, r3, #4
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2210      	movs	r2, #16
 8006a22:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a28:	f043 0204 	orr.w	r2, r3, #4
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b60      	cmp	r3, #96	; 0x60
 8006a3a:	d10b      	bne.n	8006a54 <I2C_ITMasterCplt+0xac>
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	089b      	lsrs	r3, r3, #2
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006a52:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fbb6 	bl	80071c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b60      	cmp	r3, #96	; 0x60
 8006a6a:	d002      	beq.n	8006a72 <I2C_ITMasterCplt+0xca>
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d006      	beq.n	8006a80 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 faad 	bl	8006fd8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a7e:	e054      	b.n	8006b2a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b21      	cmp	r3, #33	; 0x21
 8006a8a:	d124      	bne.n	8006ad6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d10b      	bne.n	8006abe <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff f9b0 	bl	8005e1c <HAL_I2C_MemTxCpltCallback>
}
 8006abc:	e035      	b.n	8006b2a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff f964 	bl	8005d9c <HAL_I2C_MasterTxCpltCallback>
}
 8006ad4:	e029      	b.n	8006b2a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b22      	cmp	r3, #34	; 0x22
 8006ae0:	d123      	bne.n	8006b2a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d10b      	bne.n	8006b14 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff f98f 	bl	8005e30 <HAL_I2C_MemRxCpltCallback>
}
 8006b12:	e00a      	b.n	8006b2a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff f943 	bl	8005db0 <HAL_I2C_MasterRxCpltCallback>
}
 8006b2a:	bf00      	nop
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	fe00e800 	.word	0xfe00e800
 8006b38:	ffff0000 	.word	0xffff0000

08006b3c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b58:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2b21      	cmp	r3, #33	; 0x21
 8006b66:	d002      	beq.n	8006b6e <I2C_ITSlaveCplt+0x32>
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b29      	cmp	r3, #41	; 0x29
 8006b6c:	d108      	bne.n	8006b80 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006b6e:	f248 0101 	movw	r1, #32769	; 0x8001
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 ff2a 	bl	80079cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2221      	movs	r2, #33	; 0x21
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b7e:	e00d      	b.n	8006b9c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2b22      	cmp	r3, #34	; 0x22
 8006b84:	d002      	beq.n	8006b8c <I2C_ITSlaveCplt+0x50>
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	2b2a      	cmp	r3, #42	; 0x2a
 8006b8a:	d107      	bne.n	8006b9c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006b8c:	f248 0102 	movw	r1, #32770	; 0x8002
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 ff1b 	bl	80079cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2222      	movs	r2, #34	; 0x22
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006baa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6859      	ldr	r1, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4b80      	ldr	r3, [pc, #512]	; (8006db8 <I2C_ITSlaveCplt+0x27c>)
 8006bb8:	400b      	ands	r3, r1
 8006bba:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fb02 	bl	80071c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	0b9b      	lsrs	r3, r3, #14
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d07a      	beq.n	8006cc4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bdc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 8111 	beq.w	8006e0a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a73      	ldr	r2, [pc, #460]	; (8006dbc <I2C_ITSlaveCplt+0x280>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d059      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a71      	ldr	r2, [pc, #452]	; (8006dc0 <I2C_ITSlaveCplt+0x284>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d053      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a6f      	ldr	r2, [pc, #444]	; (8006dc4 <I2C_ITSlaveCplt+0x288>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d04d      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a6d      	ldr	r2, [pc, #436]	; (8006dc8 <I2C_ITSlaveCplt+0x28c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d047      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a6b      	ldr	r2, [pc, #428]	; (8006dcc <I2C_ITSlaveCplt+0x290>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d041      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a69      	ldr	r2, [pc, #420]	; (8006dd0 <I2C_ITSlaveCplt+0x294>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d03b      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a67      	ldr	r2, [pc, #412]	; (8006dd4 <I2C_ITSlaveCplt+0x298>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d035      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a65      	ldr	r2, [pc, #404]	; (8006dd8 <I2C_ITSlaveCplt+0x29c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d02f      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a63      	ldr	r2, [pc, #396]	; (8006ddc <I2C_ITSlaveCplt+0x2a0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d029      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a61      	ldr	r2, [pc, #388]	; (8006de0 <I2C_ITSlaveCplt+0x2a4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d023      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a5f      	ldr	r2, [pc, #380]	; (8006de4 <I2C_ITSlaveCplt+0x2a8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d01d      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a5d      	ldr	r2, [pc, #372]	; (8006de8 <I2C_ITSlaveCplt+0x2ac>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d017      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a5b      	ldr	r2, [pc, #364]	; (8006dec <I2C_ITSlaveCplt+0x2b0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d011      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a59      	ldr	r2, [pc, #356]	; (8006df0 <I2C_ITSlaveCplt+0x2b4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00b      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a57      	ldr	r2, [pc, #348]	; (8006df4 <I2C_ITSlaveCplt+0x2b8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d005      	beq.n	8006ca8 <I2C_ITSlaveCplt+0x16c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a55      	ldr	r2, [pc, #340]	; (8006df8 <I2C_ITSlaveCplt+0x2bc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d105      	bne.n	8006cb4 <I2C_ITSlaveCplt+0x178>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	e004      	b.n	8006cbe <I2C_ITSlaveCplt+0x182>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	8553      	strh	r3, [r2, #42]	; 0x2a
 8006cc2:	e0a2      	b.n	8006e0a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	0bdb      	lsrs	r3, r3, #15
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 809c 	beq.w	8006e0a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ce0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 808f 	beq.w	8006e0a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a32      	ldr	r2, [pc, #200]	; (8006dbc <I2C_ITSlaveCplt+0x280>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d059      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a30      	ldr	r2, [pc, #192]	; (8006dc0 <I2C_ITSlaveCplt+0x284>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d053      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2e      	ldr	r2, [pc, #184]	; (8006dc4 <I2C_ITSlaveCplt+0x288>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d04d      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2c      	ldr	r2, [pc, #176]	; (8006dc8 <I2C_ITSlaveCplt+0x28c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d047      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a2a      	ldr	r2, [pc, #168]	; (8006dcc <I2C_ITSlaveCplt+0x290>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d041      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a28      	ldr	r2, [pc, #160]	; (8006dd0 <I2C_ITSlaveCplt+0x294>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d03b      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a26      	ldr	r2, [pc, #152]	; (8006dd4 <I2C_ITSlaveCplt+0x298>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d035      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a24      	ldr	r2, [pc, #144]	; (8006dd8 <I2C_ITSlaveCplt+0x29c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d02f      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a22      	ldr	r2, [pc, #136]	; (8006ddc <I2C_ITSlaveCplt+0x2a0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d029      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a20      	ldr	r2, [pc, #128]	; (8006de0 <I2C_ITSlaveCplt+0x2a4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d023      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <I2C_ITSlaveCplt+0x2a8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d01d      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <I2C_ITSlaveCplt+0x2ac>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d017      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <I2C_ITSlaveCplt+0x2b0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d011      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <I2C_ITSlaveCplt+0x2b4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00b      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a16      	ldr	r2, [pc, #88]	; (8006df4 <I2C_ITSlaveCplt+0x2b8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d005      	beq.n	8006dac <I2C_ITSlaveCplt+0x270>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <I2C_ITSlaveCplt+0x2bc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d127      	bne.n	8006dfc <I2C_ITSlaveCplt+0x2c0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	e026      	b.n	8006e06 <I2C_ITSlaveCplt+0x2ca>
 8006db8:	fe00e800 	.word	0xfe00e800
 8006dbc:	40020010 	.word	0x40020010
 8006dc0:	40020028 	.word	0x40020028
 8006dc4:	40020040 	.word	0x40020040
 8006dc8:	40020058 	.word	0x40020058
 8006dcc:	40020070 	.word	0x40020070
 8006dd0:	40020088 	.word	0x40020088
 8006dd4:	400200a0 	.word	0x400200a0
 8006dd8:	400200b8 	.word	0x400200b8
 8006ddc:	40020410 	.word	0x40020410
 8006de0:	40020428 	.word	0x40020428
 8006de4:	40020440 	.word	0x40020440
 8006de8:	40020458 	.word	0x40020458
 8006dec:	40020470 	.word	0x40020470
 8006df0:	40020488 	.word	0x40020488
 8006df4:	400204a0 	.word	0x400204a0
 8006df8:	400204b8 	.word	0x400204b8
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	089b      	lsrs	r3, r3, #2
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d020      	beq.n	8006e58 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f023 0304 	bic.w	r3, r3, #4
 8006e1c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e42:	3b01      	subs	r3, #1
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e66:	f043 0204 	orr.w	r2, r3, #4
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d010      	beq.n	8006ea6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f8a4 	bl	8006fd8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b28      	cmp	r3, #40	; 0x28
 8006e9a:	d141      	bne.n	8006f20 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e9c:	6979      	ldr	r1, [r7, #20]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f844 	bl	8006f2c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ea4:	e03c      	b.n	8006f20 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006eae:	d014      	beq.n	8006eda <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff fd1a 	bl	80068ea <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	; (8006f28 <I2C_ITSlaveCplt+0x3ec>)
 8006eba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fe ff98 	bl	8005e08 <HAL_I2C_ListenCpltCallback>
}
 8006ed8:	e022      	b.n	8006f20 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b22      	cmp	r3, #34	; 0x22
 8006ee4:	d10e      	bne.n	8006f04 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7fe ff6b 	bl	8005dd8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f02:	e00d      	b.n	8006f20 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fe ff52 	bl	8005dc4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f20:	bf00      	nop
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	ffff0000 	.word	0xffff0000

08006f2c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a26      	ldr	r2, [pc, #152]	; (8006fd4 <I2C_ITListenCplt+0xa8>)
 8006f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	089b      	lsrs	r3, r3, #2
 8006f5c:	f003 0301 	and.w	r3, r3, #1
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d022      	beq.n	8006faa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d012      	beq.n	8006faa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa2:	f043 0204 	orr.w	r2, r3, #4
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006faa:	f248 0103 	movw	r1, #32771	; 0x8003
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fd0c 	bl	80079cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2210      	movs	r2, #16
 8006fba:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7fe ff1f 	bl	8005e08 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006fca:	bf00      	nop
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	ffff0000 	.word	0xffff0000

08006fd8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a5d      	ldr	r2, [pc, #372]	; (800716c <I2C_ITError+0x194>)
 8006ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	2b28      	cmp	r3, #40	; 0x28
 800700e:	d005      	beq.n	800701c <I2C_ITError+0x44>
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	2b29      	cmp	r3, #41	; 0x29
 8007014:	d002      	beq.n	800701c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b2a      	cmp	r3, #42	; 0x2a
 800701a:	d10b      	bne.n	8007034 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800701c:	2103      	movs	r1, #3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fcd4 	bl	80079cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2228      	movs	r2, #40	; 0x28
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a50      	ldr	r2, [pc, #320]	; (8007170 <I2C_ITError+0x198>)
 8007030:	635a      	str	r2, [r3, #52]	; 0x34
 8007032:	e011      	b.n	8007058 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007034:	f248 0103 	movw	r1, #32771	; 0x8003
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fcc7 	bl	80079cc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b60      	cmp	r3, #96	; 0x60
 8007048:	d003      	beq.n	8007052 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	2b00      	cmp	r3, #0
 8007064:	d039      	beq.n	80070da <I2C_ITError+0x102>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b11      	cmp	r3, #17
 800706a:	d002      	beq.n	8007072 <I2C_ITError+0x9a>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b21      	cmp	r3, #33	; 0x21
 8007070:	d133      	bne.n	80070da <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800707c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007080:	d107      	bne.n	8007092 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007090:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	4618      	mov	r0, r3
 8007098:	f7fc faae 	bl	80035f8 <HAL_DMA_GetState>
 800709c:	4603      	mov	r3, r0
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d017      	beq.n	80070d2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	4a33      	ldr	r2, [pc, #204]	; (8007174 <I2C_ITError+0x19c>)
 80070a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fb f930 	bl	800231c <HAL_DMA_Abort_IT>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d04d      	beq.n	800715e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070d0:	e045      	b.n	800715e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f850 	bl	8007178 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070d8:	e041      	b.n	800715e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d039      	beq.n	8007156 <I2C_ITError+0x17e>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b12      	cmp	r3, #18
 80070e6:	d002      	beq.n	80070ee <I2C_ITError+0x116>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b22      	cmp	r3, #34	; 0x22
 80070ec:	d133      	bne.n	8007156 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fc:	d107      	bne.n	800710e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800710c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007112:	4618      	mov	r0, r3
 8007114:	f7fc fa70 	bl	80035f8 <HAL_DMA_GetState>
 8007118:	4603      	mov	r3, r0
 800711a:	2b01      	cmp	r3, #1
 800711c:	d017      	beq.n	800714e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007122:	4a14      	ldr	r2, [pc, #80]	; (8007174 <I2C_ITError+0x19c>)
 8007124:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	4618      	mov	r0, r3
 8007134:	f7fb f8f2 	bl	800231c <HAL_DMA_Abort_IT>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d011      	beq.n	8007162 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800714c:	e009      	b.n	8007162 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f812 	bl	8007178 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007154:	e005      	b.n	8007162 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f80e 	bl	8007178 <I2C_TreatErrorCallback>
  }
}
 800715c:	e002      	b.n	8007164 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800715e:	bf00      	nop
 8007160:	e000      	b.n	8007164 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007162:	bf00      	nop
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	ffff0000 	.word	0xffff0000
 8007170:	08005e6d 	.word	0x08005e6d
 8007174:	08007515 	.word	0x08007515

08007178 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b60      	cmp	r3, #96	; 0x60
 800718a:	d10e      	bne.n	80071aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2220      	movs	r2, #32
 8007190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fe fe58 	bl	8005e58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071a8:	e009      	b.n	80071be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fe fe43 	bl	8005e44 <HAL_I2C_ErrorCallback>
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d103      	bne.n	80071e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2200      	movs	r2, #0
 80071e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d007      	beq.n	8007202 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699a      	ldr	r2, [r3, #24]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	619a      	str	r2, [r3, #24]
  }
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800722a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007236:	2120      	movs	r1, #32
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fb63 	bl	8007904 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800723e:	e02d      	b.n	800729c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007248:	441a      	add	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007252:	b29b      	uxth	r3, r3
 8007254:	2bff      	cmp	r3, #255	; 0xff
 8007256:	d903      	bls.n	8007260 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	22ff      	movs	r2, #255	; 0xff
 800725c:	851a      	strh	r2, [r3, #40]	; 0x28
 800725e:	e004      	b.n	800726a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3324      	adds	r3, #36	; 0x24
 8007274:	4619      	mov	r1, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007280:	f7fa fde2 	bl	8001e48 <HAL_DMA_Start_IT>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800728a:	2110      	movs	r1, #16
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fea3 	bl	8006fd8 <I2C_ITError>
}
 8007292:	e003      	b.n	800729c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007294:	2140      	movs	r1, #64	; 0x40
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 fb34 	bl	8007904 <I2C_Enable_IRQ>
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d076      	beq.n	80073ac <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a83      	ldr	r2, [pc, #524]	; (80074d4 <I2C_DMAError+0x230>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d059      	beq.n	800737e <I2C_DMAError+0xda>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a81      	ldr	r2, [pc, #516]	; (80074d8 <I2C_DMAError+0x234>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d053      	beq.n	800737e <I2C_DMAError+0xda>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a7f      	ldr	r2, [pc, #508]	; (80074dc <I2C_DMAError+0x238>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d04d      	beq.n	800737e <I2C_DMAError+0xda>
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a7d      	ldr	r2, [pc, #500]	; (80074e0 <I2C_DMAError+0x23c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d047      	beq.n	800737e <I2C_DMAError+0xda>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a7b      	ldr	r2, [pc, #492]	; (80074e4 <I2C_DMAError+0x240>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d041      	beq.n	800737e <I2C_DMAError+0xda>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a79      	ldr	r2, [pc, #484]	; (80074e8 <I2C_DMAError+0x244>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d03b      	beq.n	800737e <I2C_DMAError+0xda>
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a77      	ldr	r2, [pc, #476]	; (80074ec <I2C_DMAError+0x248>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d035      	beq.n	800737e <I2C_DMAError+0xda>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a75      	ldr	r2, [pc, #468]	; (80074f0 <I2C_DMAError+0x24c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d02f      	beq.n	800737e <I2C_DMAError+0xda>
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a73      	ldr	r2, [pc, #460]	; (80074f4 <I2C_DMAError+0x250>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d029      	beq.n	800737e <I2C_DMAError+0xda>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a71      	ldr	r2, [pc, #452]	; (80074f8 <I2C_DMAError+0x254>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d023      	beq.n	800737e <I2C_DMAError+0xda>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a6f      	ldr	r2, [pc, #444]	; (80074fc <I2C_DMAError+0x258>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01d      	beq.n	800737e <I2C_DMAError+0xda>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a6d      	ldr	r2, [pc, #436]	; (8007500 <I2C_DMAError+0x25c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d017      	beq.n	800737e <I2C_DMAError+0xda>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a6b      	ldr	r2, [pc, #428]	; (8007504 <I2C_DMAError+0x260>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d011      	beq.n	800737e <I2C_DMAError+0xda>
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a69      	ldr	r2, [pc, #420]	; (8007508 <I2C_DMAError+0x264>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00b      	beq.n	800737e <I2C_DMAError+0xda>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a67      	ldr	r2, [pc, #412]	; (800750c <I2C_DMAError+0x268>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d005      	beq.n	800737e <I2C_DMAError+0xda>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a65      	ldr	r2, [pc, #404]	; (8007510 <I2C_DMAError+0x26c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d109      	bne.n	8007392 <I2C_DMAError+0xee>
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf0c      	ite	eq
 800738a:	2301      	moveq	r3, #1
 800738c:	2300      	movne	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	e008      	b.n	80073a4 <I2C_DMAError+0x100>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	bf0c      	ite	eq
 800739e:	2301      	moveq	r3, #1
 80073a0:	2300      	movne	r3, #0
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80073a8:	2301      	movs	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d076      	beq.n	80074a2 <I2C_DMAError+0x1fe>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a46      	ldr	r2, [pc, #280]	; (80074d4 <I2C_DMAError+0x230>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d059      	beq.n	8007474 <I2C_DMAError+0x1d0>
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a44      	ldr	r2, [pc, #272]	; (80074d8 <I2C_DMAError+0x234>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d053      	beq.n	8007474 <I2C_DMAError+0x1d0>
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a42      	ldr	r2, [pc, #264]	; (80074dc <I2C_DMAError+0x238>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d04d      	beq.n	8007474 <I2C_DMAError+0x1d0>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a40      	ldr	r2, [pc, #256]	; (80074e0 <I2C_DMAError+0x23c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d047      	beq.n	8007474 <I2C_DMAError+0x1d0>
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a3e      	ldr	r2, [pc, #248]	; (80074e4 <I2C_DMAError+0x240>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d041      	beq.n	8007474 <I2C_DMAError+0x1d0>
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a3c      	ldr	r2, [pc, #240]	; (80074e8 <I2C_DMAError+0x244>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d03b      	beq.n	8007474 <I2C_DMAError+0x1d0>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a3a      	ldr	r2, [pc, #232]	; (80074ec <I2C_DMAError+0x248>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d035      	beq.n	8007474 <I2C_DMAError+0x1d0>
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a38      	ldr	r2, [pc, #224]	; (80074f0 <I2C_DMAError+0x24c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d02f      	beq.n	8007474 <I2C_DMAError+0x1d0>
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a36      	ldr	r2, [pc, #216]	; (80074f4 <I2C_DMAError+0x250>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d029      	beq.n	8007474 <I2C_DMAError+0x1d0>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a34      	ldr	r2, [pc, #208]	; (80074f8 <I2C_DMAError+0x254>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d023      	beq.n	8007474 <I2C_DMAError+0x1d0>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a32      	ldr	r2, [pc, #200]	; (80074fc <I2C_DMAError+0x258>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d01d      	beq.n	8007474 <I2C_DMAError+0x1d0>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a30      	ldr	r2, [pc, #192]	; (8007500 <I2C_DMAError+0x25c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d017      	beq.n	8007474 <I2C_DMAError+0x1d0>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2e      	ldr	r2, [pc, #184]	; (8007504 <I2C_DMAError+0x260>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d011      	beq.n	8007474 <I2C_DMAError+0x1d0>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a2c      	ldr	r2, [pc, #176]	; (8007508 <I2C_DMAError+0x264>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00b      	beq.n	8007474 <I2C_DMAError+0x1d0>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a2a      	ldr	r2, [pc, #168]	; (800750c <I2C_DMAError+0x268>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d005      	beq.n	8007474 <I2C_DMAError+0x1d0>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a28      	ldr	r2, [pc, #160]	; (8007510 <I2C_DMAError+0x26c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d109      	bne.n	8007488 <I2C_DMAError+0x1e4>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf0c      	ite	eq
 8007480:	2301      	moveq	r3, #1
 8007482:	2300      	movne	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	e008      	b.n	800749a <I2C_DMAError+0x1f6>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	bf0c      	ite	eq
 8007494:	2301      	moveq	r3, #1
 8007496:	2300      	movne	r3, #0
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 800749e:	2301      	movs	r3, #1
 80074a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fc f8b6 	bl	8003614 <HAL_DMA_GetError>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d00e      	beq.n	80074cc <I2C_DMAError+0x228>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074c2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074c4:	2110      	movs	r1, #16
 80074c6:	68b8      	ldr	r0, [r7, #8]
 80074c8:	f7ff fd86 	bl	8006fd8 <I2C_ITError>
  }
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40020010 	.word	0x40020010
 80074d8:	40020028 	.word	0x40020028
 80074dc:	40020040 	.word	0x40020040
 80074e0:	40020058 	.word	0x40020058
 80074e4:	40020070 	.word	0x40020070
 80074e8:	40020088 	.word	0x40020088
 80074ec:	400200a0 	.word	0x400200a0
 80074f0:	400200b8 	.word	0x400200b8
 80074f4:	40020410 	.word	0x40020410
 80074f8:	40020428 	.word	0x40020428
 80074fc:	40020440 	.word	0x40020440
 8007500:	40020458 	.word	0x40020458
 8007504:	40020470 	.word	0x40020470
 8007508:	40020488 	.word	0x40020488
 800750c:	400204a0 	.word	0x400204a0
 8007510:	400204b8 	.word	0x400204b8

08007514 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	2200      	movs	r2, #0
 8007530:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753e:	2200      	movs	r2, #0
 8007540:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7ff fe18 	bl	8007178 <I2C_TreatErrorCallback>
}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	603b      	str	r3, [r7, #0]
 800755c:	4613      	mov	r3, r2
 800755e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007560:	e022      	b.n	80075a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d01e      	beq.n	80075a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756a:	f7f9 ff6d 	bl	8001448 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d302      	bcc.n	8007580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d113      	bne.n	80075a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007584:	f043 0220 	orr.w	r2, r3, #32
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e00f      	b.n	80075c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	4013      	ands	r3, r2
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	bf0c      	ite	eq
 80075b8:	2301      	moveq	r3, #1
 80075ba:	2300      	movne	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d0cd      	beq.n	8007562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075dc:	e02c      	b.n	8007638 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 f870 	bl	80076c8 <I2C_IsErrorOccurred>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e02a      	b.n	8007648 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f8:	d01e      	beq.n	8007638 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fa:	f7f9 ff25 	bl	8001448 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d113      	bne.n	8007638 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e007      	b.n	8007648 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b02      	cmp	r3, #2
 8007644:	d1cb      	bne.n	80075de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800765c:	e028      	b.n	80076b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f830 	bl	80076c8 <I2C_IsErrorOccurred>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e026      	b.n	80076c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007672:	f7f9 fee9 	bl	8001448 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	429a      	cmp	r2, r3
 8007680:	d302      	bcc.n	8007688 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d113      	bne.n	80076b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768c:	f043 0220 	orr.w	r2, r3, #32
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e007      	b.n	80076c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d1cf      	bne.n	800765e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b08a      	sub	sp, #40	; 0x28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	f003 0310 	and.w	r3, r3, #16
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d075      	beq.n	80077e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2210      	movs	r2, #16
 80076fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80076fc:	e056      	b.n	80077ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d052      	beq.n	80077ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007706:	f7f9 fe9f 	bl	8001448 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	429a      	cmp	r2, r3
 8007714:	d302      	bcc.n	800771c <I2C_IsErrorOccurred+0x54>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d147      	bne.n	80077ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007726:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800772e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800773a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773e:	d12e      	bne.n	800779e <I2C_IsErrorOccurred+0xd6>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007746:	d02a      	beq.n	800779e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007748:	7cfb      	ldrb	r3, [r7, #19]
 800774a:	2b20      	cmp	r3, #32
 800774c:	d027      	beq.n	800779e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800775c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800775e:	f7f9 fe73 	bl	8001448 <HAL_GetTick>
 8007762:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007764:	e01b      	b.n	800779e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007766:	f7f9 fe6f 	bl	8001448 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b19      	cmp	r3, #25
 8007772:	d914      	bls.n	800779e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007778:	f043 0220 	orr.w	r2, r3, #32
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d1dc      	bne.n	8007766 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d003      	beq.n	80077c2 <I2C_IsErrorOccurred+0xfa>
 80077ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d09d      	beq.n	80076fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80077c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2220      	movs	r2, #32
 80077d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	f043 0304 	orr.w	r3, r3, #4
 80077d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	f043 0301 	orr.w	r3, r3, #1
 80077f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007802:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	f043 0308 	orr.w	r3, r3, #8
 800781a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007824:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f043 0302 	orr.w	r3, r3, #2
 800783c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007846:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800784e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007852:	2b00      	cmp	r3, #0
 8007854:	d01c      	beq.n	8007890 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f7ff fcb5 	bl	80071c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6859      	ldr	r1, [r3, #4]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	4b0d      	ldr	r3, [pc, #52]	; (800789c <I2C_IsErrorOccurred+0x1d4>)
 8007868:	400b      	ands	r3, r1
 800786a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	431a      	orrs	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007894:	4618      	mov	r0, r3
 8007896:	3728      	adds	r7, #40	; 0x28
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	fe00e800 	.word	0xfe00e800

080078a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	817b      	strh	r3, [r7, #10]
 80078ae:	4613      	mov	r3, r2
 80078b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078b2:	897b      	ldrh	r3, [r7, #10]
 80078b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078b8:	7a7b      	ldrb	r3, [r7, #9]
 80078ba:	041b      	lsls	r3, r3, #16
 80078bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078c0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078ce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	0d5b      	lsrs	r3, r3, #21
 80078da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80078de:	4b08      	ldr	r3, [pc, #32]	; (8007900 <I2C_TransferConfig+0x60>)
 80078e0:	430b      	orrs	r3, r1
 80078e2:	43db      	mvns	r3, r3
 80078e4:	ea02 0103 	and.w	r1, r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80078f2:	bf00      	nop
 80078f4:	371c      	adds	r7, #28
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	03ff63ff 	.word	0x03ff63ff

08007904 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007918:	4a2a      	ldr	r2, [pc, #168]	; (80079c4 <I2C_Enable_IRQ+0xc0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007922:	4a29      	ldr	r2, [pc, #164]	; (80079c8 <I2C_Enable_IRQ+0xc4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d11d      	bne.n	8007964 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007928:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800792c:	2b00      	cmp	r3, #0
 800792e:	da03      	bge.n	8007938 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007936:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007938:	887b      	ldrh	r3, [r7, #2]
 800793a:	2b10      	cmp	r3, #16
 800793c:	d103      	bne.n	8007946 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007944:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007946:	887b      	ldrh	r3, [r7, #2]
 8007948:	2b20      	cmp	r3, #32
 800794a:	d103      	bne.n	8007954 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007952:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007954:	887b      	ldrh	r3, [r7, #2]
 8007956:	2b40      	cmp	r3, #64	; 0x40
 8007958:	d125      	bne.n	80079a6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007960:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007962:	e020      	b.n	80079a6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007964:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007968:	2b00      	cmp	r3, #0
 800796a:	da03      	bge.n	8007974 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007972:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007974:	887b      	ldrh	r3, [r7, #2]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007984:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007986:	887b      	ldrh	r3, [r7, #2]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007996:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007998:	887b      	ldrh	r3, [r7, #2]
 800799a:	2b20      	cmp	r3, #32
 800799c:	d103      	bne.n	80079a6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f043 0320 	orr.w	r3, r3, #32
 80079a4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6819      	ldr	r1, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	601a      	str	r2, [r3, #0]
}
 80079b6:	bf00      	nop
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	08006073 	.word	0x08006073
 80079c8:	08006259 	.word	0x08006259

080079cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80079dc:	887b      	ldrh	r3, [r7, #2]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00f      	beq.n	8007a06 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80079ec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079fa:	2b28      	cmp	r3, #40	; 0x28
 80079fc:	d003      	beq.n	8007a06 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007a04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007a06:	887b      	ldrh	r3, [r7, #2]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00f      	beq.n	8007a30 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007a16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a24:	2b28      	cmp	r3, #40	; 0x28
 8007a26:	d003      	beq.n	8007a30 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007a2e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007a30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da03      	bge.n	8007a40 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007a3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007a40:	887b      	ldrh	r3, [r7, #2]
 8007a42:	2b10      	cmp	r3, #16
 8007a44:	d103      	bne.n	8007a4e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007a4c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007a4e:	887b      	ldrh	r3, [r7, #2]
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	d103      	bne.n	8007a5c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f043 0320 	orr.w	r3, r3, #32
 8007a5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007a5c:	887b      	ldrh	r3, [r7, #2]
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d103      	bne.n	8007a6a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a68:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6819      	ldr	r1, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	43da      	mvns	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	400a      	ands	r2, r1
 8007a7a:	601a      	str	r2, [r3, #0]
}
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	d138      	bne.n	8007b10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e032      	b.n	8007b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2224      	movs	r2, #36	; 0x24
 8007ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ada:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6819      	ldr	r1, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0201 	orr.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
  }
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d139      	bne.n	8007ba8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e033      	b.n	8007baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2224      	movs	r2, #36	; 0x24
 8007b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0201 	bic.w	r2, r2, #1
 8007b60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0201 	orr.w	r2, r2, #1
 8007b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e000      	b.n	8007baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ba8:	2302      	movs	r3, #2
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007bc0:	4b19      	ldr	r3, [pc, #100]	; (8007c28 <HAL_PWREx_ConfigSupply+0x70>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d00a      	beq.n	8007be2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007bcc:	4b16      	ldr	r3, [pc, #88]	; (8007c28 <HAL_PWREx_ConfigSupply+0x70>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d001      	beq.n	8007bde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e01f      	b.n	8007c1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	e01d      	b.n	8007c1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007be2:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <HAL_PWREx_ConfigSupply+0x70>)
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f023 0207 	bic.w	r2, r3, #7
 8007bea:	490f      	ldr	r1, [pc, #60]	; (8007c28 <HAL_PWREx_ConfigSupply+0x70>)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007bf2:	f7f9 fc29 	bl	8001448 <HAL_GetTick>
 8007bf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007bf8:	e009      	b.n	8007c0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007bfa:	f7f9 fc25 	bl	8001448 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c08:	d901      	bls.n	8007c0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e007      	b.n	8007c1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c0e:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <HAL_PWREx_ConfigSupply+0x70>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c1a:	d1ee      	bne.n	8007bfa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	58024800 	.word	0x58024800

08007c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08c      	sub	sp, #48	; 0x30
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d102      	bne.n	8007c40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f000 bc1c 	b.w	8008478 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8087 	beq.w	8007d5c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c4e:	4b9e      	ldr	r3, [pc, #632]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c58:	4b9b      	ldr	r3, [pc, #620]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	2b10      	cmp	r3, #16
 8007c62:	d007      	beq.n	8007c74 <HAL_RCC_OscConfig+0x48>
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	2b18      	cmp	r3, #24
 8007c68:	d110      	bne.n	8007c8c <HAL_RCC_OscConfig+0x60>
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d10b      	bne.n	8007c8c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c74:	4b94      	ldr	r3, [pc, #592]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d06c      	beq.n	8007d5a <HAL_RCC_OscConfig+0x12e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d168      	bne.n	8007d5a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e3f5      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c94:	d106      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x78>
 8007c96:	4b8c      	ldr	r3, [pc, #560]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a8b      	ldr	r2, [pc, #556]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	e02e      	b.n	8007d02 <HAL_RCC_OscConfig+0xd6>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10c      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x9a>
 8007cac:	4b86      	ldr	r3, [pc, #536]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a85      	ldr	r2, [pc, #532]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	4b83      	ldr	r3, [pc, #524]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a82      	ldr	r2, [pc, #520]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	e01d      	b.n	8007d02 <HAL_RCC_OscConfig+0xd6>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cce:	d10c      	bne.n	8007cea <HAL_RCC_OscConfig+0xbe>
 8007cd0:	4b7d      	ldr	r3, [pc, #500]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a7c      	ldr	r2, [pc, #496]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	4b7a      	ldr	r3, [pc, #488]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a79      	ldr	r2, [pc, #484]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	e00b      	b.n	8007d02 <HAL_RCC_OscConfig+0xd6>
 8007cea:	4b77      	ldr	r3, [pc, #476]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a76      	ldr	r2, [pc, #472]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	4b74      	ldr	r3, [pc, #464]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a73      	ldr	r2, [pc, #460]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d013      	beq.n	8007d32 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0a:	f7f9 fb9d 	bl	8001448 <HAL_GetTick>
 8007d0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d10:	e008      	b.n	8007d24 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d12:	f7f9 fb99 	bl	8001448 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b64      	cmp	r3, #100	; 0x64
 8007d1e:	d901      	bls.n	8007d24 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e3a9      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d24:	4b68      	ldr	r3, [pc, #416]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0f0      	beq.n	8007d12 <HAL_RCC_OscConfig+0xe6>
 8007d30:	e014      	b.n	8007d5c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d32:	f7f9 fb89 	bl	8001448 <HAL_GetTick>
 8007d36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d38:	e008      	b.n	8007d4c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d3a:	f7f9 fb85 	bl	8001448 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b64      	cmp	r3, #100	; 0x64
 8007d46:	d901      	bls.n	8007d4c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e395      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d4c:	4b5e      	ldr	r3, [pc, #376]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1f0      	bne.n	8007d3a <HAL_RCC_OscConfig+0x10e>
 8007d58:	e000      	b.n	8007d5c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 80ca 	beq.w	8007efe <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d6a:	4b57      	ldr	r3, [pc, #348]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d72:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d74:	4b54      	ldr	r3, [pc, #336]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <HAL_RCC_OscConfig+0x164>
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	2b18      	cmp	r3, #24
 8007d84:	d156      	bne.n	8007e34 <HAL_RCC_OscConfig+0x208>
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d151      	bne.n	8007e34 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d90:	4b4d      	ldr	r3, [pc, #308]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_RCC_OscConfig+0x17c>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e367      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007da8:	4b47      	ldr	r3, [pc, #284]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f023 0219 	bic.w	r2, r3, #25
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4944      	ldr	r1, [pc, #272]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007dba:	f7f9 fb45 	bl	8001448 <HAL_GetTick>
 8007dbe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dc2:	f7f9 fb41 	bl	8001448 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e351      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dd4:	4b3c      	ldr	r3, [pc, #240]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f0      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de0:	f7f9 fb3e 	bl	8001460 <HAL_GetREVID>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d817      	bhi.n	8007e1e <HAL_RCC_OscConfig+0x1f2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b40      	cmp	r3, #64	; 0x40
 8007df4:	d108      	bne.n	8007e08 <HAL_RCC_OscConfig+0x1dc>
 8007df6:	4b34      	ldr	r3, [pc, #208]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007dfe:	4a32      	ldr	r2, [pc, #200]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e04:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e06:	e07a      	b.n	8007efe <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e08:	4b2f      	ldr	r3, [pc, #188]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	031b      	lsls	r3, r3, #12
 8007e16:	492c      	ldr	r1, [pc, #176]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e1c:	e06f      	b.n	8007efe <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e1e:	4b2a      	ldr	r3, [pc, #168]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	061b      	lsls	r3, r3, #24
 8007e2c:	4926      	ldr	r1, [pc, #152]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e32:	e064      	b.n	8007efe <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d047      	beq.n	8007ecc <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e3c:	4b22      	ldr	r3, [pc, #136]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f023 0219 	bic.w	r2, r3, #25
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	491f      	ldr	r1, [pc, #124]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4e:	f7f9 fafb 	bl	8001448 <HAL_GetTick>
 8007e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e54:	e008      	b.n	8007e68 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e56:	f7f9 faf7 	bl	8001448 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d901      	bls.n	8007e68 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e307      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e68:	4b17      	ldr	r3, [pc, #92]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0f0      	beq.n	8007e56 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e74:	f7f9 faf4 	bl	8001460 <HAL_GetREVID>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d817      	bhi.n	8007eb2 <HAL_RCC_OscConfig+0x286>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d108      	bne.n	8007e9c <HAL_RCC_OscConfig+0x270>
 8007e8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e92:	4a0d      	ldr	r2, [pc, #52]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e98:	6053      	str	r3, [r2, #4]
 8007e9a:	e030      	b.n	8007efe <HAL_RCC_OscConfig+0x2d2>
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	031b      	lsls	r3, r3, #12
 8007eaa:	4907      	ldr	r1, [pc, #28]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	604b      	str	r3, [r1, #4]
 8007eb0:	e025      	b.n	8007efe <HAL_RCC_OscConfig+0x2d2>
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	061b      	lsls	r3, r3, #24
 8007ec0:	4901      	ldr	r1, [pc, #4]	; (8007ec8 <HAL_RCC_OscConfig+0x29c>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	604b      	str	r3, [r1, #4]
 8007ec6:	e01a      	b.n	8007efe <HAL_RCC_OscConfig+0x2d2>
 8007ec8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ecc:	4b9e      	ldr	r3, [pc, #632]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a9d      	ldr	r2, [pc, #628]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007ed2:	f023 0301 	bic.w	r3, r3, #1
 8007ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed8:	f7f9 fab6 	bl	8001448 <HAL_GetTick>
 8007edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ee0:	f7f9 fab2 	bl	8001448 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e2c2      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ef2:	4b95      	ldr	r3, [pc, #596]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f0      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0310 	and.w	r3, r3, #16
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80a9 	beq.w	800805e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f0c:	4b8e      	ldr	r3, [pc, #568]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f14:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f16:	4b8c      	ldr	r3, [pc, #560]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d007      	beq.n	8007f32 <HAL_RCC_OscConfig+0x306>
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b18      	cmp	r3, #24
 8007f26:	d13a      	bne.n	8007f9e <HAL_RCC_OscConfig+0x372>
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d135      	bne.n	8007f9e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f32:	4b85      	ldr	r3, [pc, #532]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_RCC_OscConfig+0x31e>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	2b80      	cmp	r3, #128	; 0x80
 8007f44:	d001      	beq.n	8007f4a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e296      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f4a:	f7f9 fa89 	bl	8001460 <HAL_GetREVID>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d817      	bhi.n	8007f88 <HAL_RCC_OscConfig+0x35c>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d108      	bne.n	8007f72 <HAL_RCC_OscConfig+0x346>
 8007f60:	4b79      	ldr	r3, [pc, #484]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007f68:	4a77      	ldr	r2, [pc, #476]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f6e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f70:	e075      	b.n	800805e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f72:	4b75      	ldr	r3, [pc, #468]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	069b      	lsls	r3, r3, #26
 8007f80:	4971      	ldr	r1, [pc, #452]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f86:	e06a      	b.n	800805e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f88:	4b6f      	ldr	r3, [pc, #444]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	061b      	lsls	r3, r3, #24
 8007f96:	496c      	ldr	r1, [pc, #432]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f9c:	e05f      	b.n	800805e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d042      	beq.n	800802c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007fa6:	4b68      	ldr	r3, [pc, #416]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a67      	ldr	r2, [pc, #412]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb2:	f7f9 fa49 	bl	8001448 <HAL_GetTick>
 8007fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007fba:	f7f9 fa45 	bl	8001448 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e255      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fcc:	4b5e      	ldr	r3, [pc, #376]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0f0      	beq.n	8007fba <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fd8:	f7f9 fa42 	bl	8001460 <HAL_GetREVID>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	f241 0203 	movw	r2, #4099	; 0x1003
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d817      	bhi.n	8008016 <HAL_RCC_OscConfig+0x3ea>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	d108      	bne.n	8008000 <HAL_RCC_OscConfig+0x3d4>
 8007fee:	4b56      	ldr	r3, [pc, #344]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ff6:	4a54      	ldr	r2, [pc, #336]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8007ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ffc:	6053      	str	r3, [r2, #4]
 8007ffe:	e02e      	b.n	800805e <HAL_RCC_OscConfig+0x432>
 8008000:	4b51      	ldr	r3, [pc, #324]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a1b      	ldr	r3, [r3, #32]
 800800c:	069b      	lsls	r3, r3, #26
 800800e:	494e      	ldr	r1, [pc, #312]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008010:	4313      	orrs	r3, r2
 8008012:	604b      	str	r3, [r1, #4]
 8008014:	e023      	b.n	800805e <HAL_RCC_OscConfig+0x432>
 8008016:	4b4c      	ldr	r3, [pc, #304]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	061b      	lsls	r3, r3, #24
 8008024:	4948      	ldr	r1, [pc, #288]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008026:	4313      	orrs	r3, r2
 8008028:	60cb      	str	r3, [r1, #12]
 800802a:	e018      	b.n	800805e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800802c:	4b46      	ldr	r3, [pc, #280]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a45      	ldr	r2, [pc, #276]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008038:	f7f9 fa06 	bl	8001448 <HAL_GetTick>
 800803c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800803e:	e008      	b.n	8008052 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008040:	f7f9 fa02 	bl	8001448 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	2b02      	cmp	r3, #2
 800804c:	d901      	bls.n	8008052 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e212      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008052:	4b3d      	ldr	r3, [pc, #244]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1f0      	bne.n	8008040 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b00      	cmp	r3, #0
 8008068:	d036      	beq.n	80080d8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d019      	beq.n	80080a6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008072:	4b35      	ldr	r3, [pc, #212]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008076:	4a34      	ldr	r2, [pc, #208]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008078:	f043 0301 	orr.w	r3, r3, #1
 800807c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800807e:	f7f9 f9e3 	bl	8001448 <HAL_GetTick>
 8008082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008084:	e008      	b.n	8008098 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008086:	f7f9 f9df 	bl	8001448 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b02      	cmp	r3, #2
 8008092:	d901      	bls.n	8008098 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e1ef      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008098:	4b2b      	ldr	r3, [pc, #172]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 800809a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0f0      	beq.n	8008086 <HAL_RCC_OscConfig+0x45a>
 80080a4:	e018      	b.n	80080d8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080a6:	4b28      	ldr	r3, [pc, #160]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 80080a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080aa:	4a27      	ldr	r2, [pc, #156]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 80080ac:	f023 0301 	bic.w	r3, r3, #1
 80080b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b2:	f7f9 f9c9 	bl	8001448 <HAL_GetTick>
 80080b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080b8:	e008      	b.n	80080cc <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080ba:	f7f9 f9c5 	bl	8001448 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d901      	bls.n	80080cc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e1d5      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080cc:	4b1e      	ldr	r3, [pc, #120]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 80080ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f0      	bne.n	80080ba <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d039      	beq.n	8008158 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d019      	beq.n	8008120 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080ec:	4b16      	ldr	r3, [pc, #88]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a15      	ldr	r2, [pc, #84]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 80080f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080f8:	f7f9 f9a6 	bl	8001448 <HAL_GetTick>
 80080fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080fe:	e008      	b.n	8008112 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008100:	f7f9 f9a2 	bl	8001448 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	2b02      	cmp	r3, #2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e1b2      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008112:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0f0      	beq.n	8008100 <HAL_RCC_OscConfig+0x4d4>
 800811e:	e01b      	b.n	8008158 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008120:	4b09      	ldr	r3, [pc, #36]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a08      	ldr	r2, [pc, #32]	; (8008148 <HAL_RCC_OscConfig+0x51c>)
 8008126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800812a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800812c:	f7f9 f98c 	bl	8001448 <HAL_GetTick>
 8008130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008132:	e00b      	b.n	800814c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008134:	f7f9 f988 	bl	8001448 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d904      	bls.n	800814c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e198      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
 8008146:	bf00      	nop
 8008148:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800814c:	4ba3      	ldr	r3, [pc, #652]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1ed      	bne.n	8008134 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 8081 	beq.w	8008268 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008166:	4b9e      	ldr	r3, [pc, #632]	; (80083e0 <HAL_RCC_OscConfig+0x7b4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a9d      	ldr	r2, [pc, #628]	; (80083e0 <HAL_RCC_OscConfig+0x7b4>)
 800816c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008170:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008172:	f7f9 f969 	bl	8001448 <HAL_GetTick>
 8008176:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008178:	e008      	b.n	800818c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800817a:	f7f9 f965 	bl	8001448 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b64      	cmp	r3, #100	; 0x64
 8008186:	d901      	bls.n	800818c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e175      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800818c:	4b94      	ldr	r3, [pc, #592]	; (80083e0 <HAL_RCC_OscConfig+0x7b4>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0f0      	beq.n	800817a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d106      	bne.n	80081ae <HAL_RCC_OscConfig+0x582>
 80081a0:	4b8e      	ldr	r3, [pc, #568]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a4:	4a8d      	ldr	r2, [pc, #564]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	6713      	str	r3, [r2, #112]	; 0x70
 80081ac:	e02d      	b.n	800820a <HAL_RCC_OscConfig+0x5de>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10c      	bne.n	80081d0 <HAL_RCC_OscConfig+0x5a4>
 80081b6:	4b89      	ldr	r3, [pc, #548]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ba:	4a88      	ldr	r2, [pc, #544]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081bc:	f023 0301 	bic.w	r3, r3, #1
 80081c0:	6713      	str	r3, [r2, #112]	; 0x70
 80081c2:	4b86      	ldr	r3, [pc, #536]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c6:	4a85      	ldr	r2, [pc, #532]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081c8:	f023 0304 	bic.w	r3, r3, #4
 80081cc:	6713      	str	r3, [r2, #112]	; 0x70
 80081ce:	e01c      	b.n	800820a <HAL_RCC_OscConfig+0x5de>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2b05      	cmp	r3, #5
 80081d6:	d10c      	bne.n	80081f2 <HAL_RCC_OscConfig+0x5c6>
 80081d8:	4b80      	ldr	r3, [pc, #512]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081dc:	4a7f      	ldr	r2, [pc, #508]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081de:	f043 0304 	orr.w	r3, r3, #4
 80081e2:	6713      	str	r3, [r2, #112]	; 0x70
 80081e4:	4b7d      	ldr	r3, [pc, #500]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e8:	4a7c      	ldr	r2, [pc, #496]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	6713      	str	r3, [r2, #112]	; 0x70
 80081f0:	e00b      	b.n	800820a <HAL_RCC_OscConfig+0x5de>
 80081f2:	4b7a      	ldr	r3, [pc, #488]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f6:	4a79      	ldr	r2, [pc, #484]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	6713      	str	r3, [r2, #112]	; 0x70
 80081fe:	4b77      	ldr	r3, [pc, #476]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008202:	4a76      	ldr	r2, [pc, #472]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008204:	f023 0304 	bic.w	r3, r3, #4
 8008208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d015      	beq.n	800823e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008212:	f7f9 f919 	bl	8001448 <HAL_GetTick>
 8008216:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008218:	e00a      	b.n	8008230 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800821a:	f7f9 f915 	bl	8001448 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	f241 3288 	movw	r2, #5000	; 0x1388
 8008228:	4293      	cmp	r3, r2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e123      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008230:	4b6a      	ldr	r3, [pc, #424]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0ee      	beq.n	800821a <HAL_RCC_OscConfig+0x5ee>
 800823c:	e014      	b.n	8008268 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800823e:	f7f9 f903 	bl	8001448 <HAL_GetTick>
 8008242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008244:	e00a      	b.n	800825c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008246:	f7f9 f8ff 	bl	8001448 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	f241 3288 	movw	r2, #5000	; 0x1388
 8008254:	4293      	cmp	r3, r2
 8008256:	d901      	bls.n	800825c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e10d      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800825c:	4b5f      	ldr	r3, [pc, #380]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800825e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1ee      	bne.n	8008246 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 8102 	beq.w	8008476 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008272:	4b5a      	ldr	r3, [pc, #360]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800827a:	2b18      	cmp	r3, #24
 800827c:	f000 80bd 	beq.w	80083fa <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	2b02      	cmp	r3, #2
 8008286:	f040 8095 	bne.w	80083b4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800828a:	4b54      	ldr	r3, [pc, #336]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a53      	ldr	r2, [pc, #332]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008296:	f7f9 f8d7 	bl	8001448 <HAL_GetTick>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800829e:	f7f9 f8d3 	bl	8001448 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e0e3      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082b0:	4b4a      	ldr	r3, [pc, #296]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f0      	bne.n	800829e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082bc:	4b47      	ldr	r3, [pc, #284]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80082be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082c0:	4b48      	ldr	r3, [pc, #288]	; (80083e4 <HAL_RCC_OscConfig+0x7b8>)
 80082c2:	4013      	ands	r3, r2
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80082cc:	0112      	lsls	r2, r2, #4
 80082ce:	430a      	orrs	r2, r1
 80082d0:	4942      	ldr	r1, [pc, #264]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	628b      	str	r3, [r1, #40]	; 0x28
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082da:	3b01      	subs	r3, #1
 80082dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e4:	3b01      	subs	r3, #1
 80082e6:	025b      	lsls	r3, r3, #9
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	3b01      	subs	r3, #1
 80082f2:	041b      	lsls	r3, r3, #16
 80082f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082f8:	431a      	orrs	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fe:	3b01      	subs	r3, #1
 8008300:	061b      	lsls	r3, r3, #24
 8008302:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008306:	4935      	ldr	r1, [pc, #212]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008308:	4313      	orrs	r3, r2
 800830a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800830c:	4b33      	ldr	r3, [pc, #204]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800830e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008310:	4a32      	ldr	r2, [pc, #200]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008312:	f023 0301 	bic.w	r3, r3, #1
 8008316:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008318:	4b30      	ldr	r3, [pc, #192]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800831a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800831c:	4b32      	ldr	r3, [pc, #200]	; (80083e8 <HAL_RCC_OscConfig+0x7bc>)
 800831e:	4013      	ands	r3, r2
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008324:	00d2      	lsls	r2, r2, #3
 8008326:	492d      	ldr	r1, [pc, #180]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008328:	4313      	orrs	r3, r2
 800832a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800832c:	4b2b      	ldr	r3, [pc, #172]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	f023 020c 	bic.w	r2, r3, #12
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008338:	4928      	ldr	r1, [pc, #160]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800833a:	4313      	orrs	r3, r2
 800833c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800833e:	4b27      	ldr	r3, [pc, #156]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	f023 0202 	bic.w	r2, r3, #2
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834a:	4924      	ldr	r1, [pc, #144]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800834c:	4313      	orrs	r3, r2
 800834e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008350:	4b22      	ldr	r3, [pc, #136]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	4a21      	ldr	r2, [pc, #132]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800835a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800835c:	4b1f      	ldr	r3, [pc, #124]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	4a1e      	ldr	r2, [pc, #120]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008368:	4b1c      	ldr	r3, [pc, #112]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	4a1b      	ldr	r2, [pc, #108]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800836e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008374:	4b19      	ldr	r3, [pc, #100]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	4a18      	ldr	r2, [pc, #96]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 800837a:	f043 0301 	orr.w	r3, r3, #1
 800837e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008380:	4b16      	ldr	r3, [pc, #88]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a15      	ldr	r2, [pc, #84]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 8008386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800838a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7f9 f85c 	bl	8001448 <HAL_GetTick>
 8008390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008394:	f7f9 f858 	bl	8001448 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e068      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083a6:	4b0d      	ldr	r3, [pc, #52]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f0      	beq.n	8008394 <HAL_RCC_OscConfig+0x768>
 80083b2:	e060      	b.n	8008476 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a08      	ldr	r2, [pc, #32]	; (80083dc <HAL_RCC_OscConfig+0x7b0>)
 80083ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c0:	f7f9 f842 	bl	8001448 <HAL_GetTick>
 80083c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083c6:	e011      	b.n	80083ec <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083c8:	f7f9 f83e 	bl	8001448 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d90a      	bls.n	80083ec <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e04e      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
 80083da:	bf00      	nop
 80083dc:	58024400 	.word	0x58024400
 80083e0:	58024800 	.word	0x58024800
 80083e4:	fffffc0c 	.word	0xfffffc0c
 80083e8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083ec:	4b24      	ldr	r3, [pc, #144]	; (8008480 <HAL_RCC_OscConfig+0x854>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e7      	bne.n	80083c8 <HAL_RCC_OscConfig+0x79c>
 80083f8:	e03d      	b.n	8008476 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80083fa:	4b21      	ldr	r3, [pc, #132]	; (8008480 <HAL_RCC_OscConfig+0x854>)
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008400:	4b1f      	ldr	r3, [pc, #124]	; (8008480 <HAL_RCC_OscConfig+0x854>)
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	2b01      	cmp	r3, #1
 800840c:	d031      	beq.n	8008472 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f003 0203 	and.w	r2, r3, #3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008418:	429a      	cmp	r2, r3
 800841a:	d12a      	bne.n	8008472 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	091b      	lsrs	r3, r3, #4
 8008420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008428:	429a      	cmp	r2, r3
 800842a:	d122      	bne.n	8008472 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008438:	429a      	cmp	r2, r3
 800843a:	d11a      	bne.n	8008472 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	0a5b      	lsrs	r3, r3, #9
 8008440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008448:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800844a:	429a      	cmp	r2, r3
 800844c:	d111      	bne.n	8008472 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	0c1b      	lsrs	r3, r3, #16
 8008452:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800845c:	429a      	cmp	r2, r3
 800845e:	d108      	bne.n	8008472 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	0e1b      	lsrs	r3, r3, #24
 8008464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800846e:	429a      	cmp	r2, r3
 8008470:	d001      	beq.n	8008476 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3730      	adds	r7, #48	; 0x30
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	58024400 	.word	0x58024400

08008484 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e19c      	b.n	80087d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008498:	4b8a      	ldr	r3, [pc, #552]	; (80086c4 <HAL_RCC_ClockConfig+0x240>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d910      	bls.n	80084c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084a6:	4b87      	ldr	r3, [pc, #540]	; (80086c4 <HAL_RCC_ClockConfig+0x240>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f023 020f 	bic.w	r2, r3, #15
 80084ae:	4985      	ldr	r1, [pc, #532]	; (80086c4 <HAL_RCC_ClockConfig+0x240>)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b6:	4b83      	ldr	r3, [pc, #524]	; (80086c4 <HAL_RCC_ClockConfig+0x240>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d001      	beq.n	80084c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e184      	b.n	80087d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d010      	beq.n	80084f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	4b7b      	ldr	r3, [pc, #492]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d908      	bls.n	80084f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084e4:	4b78      	ldr	r3, [pc, #480]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	4975      	ldr	r1, [pc, #468]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d010      	beq.n	8008524 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695a      	ldr	r2, [r3, #20]
 8008506:	4b70      	ldr	r3, [pc, #448]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800850e:	429a      	cmp	r2, r3
 8008510:	d908      	bls.n	8008524 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008512:	4b6d      	ldr	r3, [pc, #436]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	496a      	ldr	r1, [pc, #424]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008520:	4313      	orrs	r3, r2
 8008522:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0310 	and.w	r3, r3, #16
 800852c:	2b00      	cmp	r3, #0
 800852e:	d010      	beq.n	8008552 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699a      	ldr	r2, [r3, #24]
 8008534:	4b64      	ldr	r3, [pc, #400]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800853c:	429a      	cmp	r2, r3
 800853e:	d908      	bls.n	8008552 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008540:	4b61      	ldr	r3, [pc, #388]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	495e      	ldr	r1, [pc, #376]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 800854e:	4313      	orrs	r3, r2
 8008550:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0320 	and.w	r3, r3, #32
 800855a:	2b00      	cmp	r3, #0
 800855c:	d010      	beq.n	8008580 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	69da      	ldr	r2, [r3, #28]
 8008562:	4b59      	ldr	r3, [pc, #356]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800856a:	429a      	cmp	r2, r3
 800856c:	d908      	bls.n	8008580 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800856e:	4b56      	ldr	r3, [pc, #344]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	69db      	ldr	r3, [r3, #28]
 800857a:	4953      	ldr	r1, [pc, #332]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 800857c:	4313      	orrs	r3, r2
 800857e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d010      	beq.n	80085ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	4b4d      	ldr	r3, [pc, #308]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	429a      	cmp	r2, r3
 800859a:	d908      	bls.n	80085ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800859c:	4b4a      	ldr	r3, [pc, #296]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	f023 020f 	bic.w	r2, r3, #15
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	4947      	ldr	r1, [pc, #284]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d055      	beq.n	8008666 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80085ba:	4b43      	ldr	r3, [pc, #268]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	4940      	ldr	r1, [pc, #256]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d107      	bne.n	80085e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085d4:	4b3c      	ldr	r3, [pc, #240]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d121      	bne.n	8008624 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e0f6      	b.n	80087d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d107      	bne.n	80085fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085ec:	4b36      	ldr	r3, [pc, #216]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d115      	bne.n	8008624 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0ea      	b.n	80087d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d107      	bne.n	8008614 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008604:	4b30      	ldr	r3, [pc, #192]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e0de      	b.n	80087d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008614:	4b2c      	ldr	r3, [pc, #176]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e0d6      	b.n	80087d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008624:	4b28      	ldr	r3, [pc, #160]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f023 0207 	bic.w	r2, r3, #7
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	4925      	ldr	r1, [pc, #148]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008632:	4313      	orrs	r3, r2
 8008634:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008636:	f7f8 ff07 	bl	8001448 <HAL_GetTick>
 800863a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800863c:	e00a      	b.n	8008654 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800863e:	f7f8 ff03 	bl	8001448 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	f241 3288 	movw	r2, #5000	; 0x1388
 800864c:	4293      	cmp	r3, r2
 800864e:	d901      	bls.n	8008654 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e0be      	b.n	80087d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008654:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	429a      	cmp	r2, r3
 8008664:	d1eb      	bne.n	800863e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d010      	beq.n	8008694 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	f003 030f 	and.w	r3, r3, #15
 800867e:	429a      	cmp	r2, r3
 8008680:	d208      	bcs.n	8008694 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008682:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	f023 020f 	bic.w	r2, r3, #15
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	490e      	ldr	r1, [pc, #56]	; (80086c8 <HAL_RCC_ClockConfig+0x244>)
 8008690:	4313      	orrs	r3, r2
 8008692:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008694:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <HAL_RCC_ClockConfig+0x240>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 030f 	and.w	r3, r3, #15
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d214      	bcs.n	80086cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086a2:	4b08      	ldr	r3, [pc, #32]	; (80086c4 <HAL_RCC_ClockConfig+0x240>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f023 020f 	bic.w	r2, r3, #15
 80086aa:	4906      	ldr	r1, [pc, #24]	; (80086c4 <HAL_RCC_ClockConfig+0x240>)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086b2:	4b04      	ldr	r3, [pc, #16]	; (80086c4 <HAL_RCC_ClockConfig+0x240>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	683a      	ldr	r2, [r7, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d005      	beq.n	80086cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e086      	b.n	80087d2 <HAL_RCC_ClockConfig+0x34e>
 80086c4:	52002000 	.word	0x52002000
 80086c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d010      	beq.n	80086fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	691a      	ldr	r2, [r3, #16]
 80086dc:	4b3f      	ldr	r3, [pc, #252]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d208      	bcs.n	80086fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086e8:	4b3c      	ldr	r3, [pc, #240]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	4939      	ldr	r1, [pc, #228]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d010      	beq.n	8008728 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	695a      	ldr	r2, [r3, #20]
 800870a:	4b34      	ldr	r3, [pc, #208]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008712:	429a      	cmp	r2, r3
 8008714:	d208      	bcs.n	8008728 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008716:	4b31      	ldr	r3, [pc, #196]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	492e      	ldr	r1, [pc, #184]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 8008724:	4313      	orrs	r3, r2
 8008726:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b00      	cmp	r3, #0
 8008732:	d010      	beq.n	8008756 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	699a      	ldr	r2, [r3, #24]
 8008738:	4b28      	ldr	r3, [pc, #160]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008740:	429a      	cmp	r2, r3
 8008742:	d208      	bcs.n	8008756 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008744:	4b25      	ldr	r3, [pc, #148]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	4922      	ldr	r1, [pc, #136]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 8008752:	4313      	orrs	r3, r2
 8008754:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b00      	cmp	r3, #0
 8008760:	d010      	beq.n	8008784 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	69da      	ldr	r2, [r3, #28]
 8008766:	4b1d      	ldr	r3, [pc, #116]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800876e:	429a      	cmp	r2, r3
 8008770:	d208      	bcs.n	8008784 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008772:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	4917      	ldr	r1, [pc, #92]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 8008780:	4313      	orrs	r3, r2
 8008782:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008784:	f000 f834 	bl	80087f0 <HAL_RCC_GetSysClockFreq>
 8008788:	4602      	mov	r2, r0
 800878a:	4b14      	ldr	r3, [pc, #80]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	0a1b      	lsrs	r3, r3, #8
 8008790:	f003 030f 	and.w	r3, r3, #15
 8008794:	4912      	ldr	r1, [pc, #72]	; (80087e0 <HAL_RCC_ClockConfig+0x35c>)
 8008796:	5ccb      	ldrb	r3, [r1, r3]
 8008798:	f003 031f 	and.w	r3, r3, #31
 800879c:	fa22 f303 	lsr.w	r3, r2, r3
 80087a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087a2:	4b0e      	ldr	r3, [pc, #56]	; (80087dc <HAL_RCC_ClockConfig+0x358>)
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	f003 030f 	and.w	r3, r3, #15
 80087aa:	4a0d      	ldr	r2, [pc, #52]	; (80087e0 <HAL_RCC_ClockConfig+0x35c>)
 80087ac:	5cd3      	ldrb	r3, [r2, r3]
 80087ae:	f003 031f 	and.w	r3, r3, #31
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	fa22 f303 	lsr.w	r3, r2, r3
 80087b8:	4a0a      	ldr	r2, [pc, #40]	; (80087e4 <HAL_RCC_ClockConfig+0x360>)
 80087ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087bc:	4a0a      	ldr	r2, [pc, #40]	; (80087e8 <HAL_RCC_ClockConfig+0x364>)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80087c2:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <HAL_RCC_ClockConfig+0x368>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f8 fdf4 	bl	80013b4 <HAL_InitTick>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	58024400 	.word	0x58024400
 80087e0:	080113ac 	.word	0x080113ac
 80087e4:	24000004 	.word	0x24000004
 80087e8:	24000000 	.word	0x24000000
 80087ec:	24000008 	.word	0x24000008

080087f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b089      	sub	sp, #36	; 0x24
 80087f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087f6:	4bb3      	ldr	r3, [pc, #716]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087fe:	2b18      	cmp	r3, #24
 8008800:	f200 8155 	bhi.w	8008aae <HAL_RCC_GetSysClockFreq+0x2be>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	08008871 	.word	0x08008871
 8008810:	08008aaf 	.word	0x08008aaf
 8008814:	08008aaf 	.word	0x08008aaf
 8008818:	08008aaf 	.word	0x08008aaf
 800881c:	08008aaf 	.word	0x08008aaf
 8008820:	08008aaf 	.word	0x08008aaf
 8008824:	08008aaf 	.word	0x08008aaf
 8008828:	08008aaf 	.word	0x08008aaf
 800882c:	08008897 	.word	0x08008897
 8008830:	08008aaf 	.word	0x08008aaf
 8008834:	08008aaf 	.word	0x08008aaf
 8008838:	08008aaf 	.word	0x08008aaf
 800883c:	08008aaf 	.word	0x08008aaf
 8008840:	08008aaf 	.word	0x08008aaf
 8008844:	08008aaf 	.word	0x08008aaf
 8008848:	08008aaf 	.word	0x08008aaf
 800884c:	0800889d 	.word	0x0800889d
 8008850:	08008aaf 	.word	0x08008aaf
 8008854:	08008aaf 	.word	0x08008aaf
 8008858:	08008aaf 	.word	0x08008aaf
 800885c:	08008aaf 	.word	0x08008aaf
 8008860:	08008aaf 	.word	0x08008aaf
 8008864:	08008aaf 	.word	0x08008aaf
 8008868:	08008aaf 	.word	0x08008aaf
 800886c:	080088a3 	.word	0x080088a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008870:	4b94      	ldr	r3, [pc, #592]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0320 	and.w	r3, r3, #32
 8008878:	2b00      	cmp	r3, #0
 800887a:	d009      	beq.n	8008890 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800887c:	4b91      	ldr	r3, [pc, #580]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	08db      	lsrs	r3, r3, #3
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	4a90      	ldr	r2, [pc, #576]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008888:	fa22 f303 	lsr.w	r3, r2, r3
 800888c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800888e:	e111      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008890:	4b8d      	ldr	r3, [pc, #564]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008892:	61bb      	str	r3, [r7, #24]
    break;
 8008894:	e10e      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008896:	4b8d      	ldr	r3, [pc, #564]	; (8008acc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008898:	61bb      	str	r3, [r7, #24]
    break;
 800889a:	e10b      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800889c:	4b8c      	ldr	r3, [pc, #560]	; (8008ad0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800889e:	61bb      	str	r3, [r7, #24]
    break;
 80088a0:	e108      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088a2:	4b88      	ldr	r3, [pc, #544]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80088ac:	4b85      	ldr	r3, [pc, #532]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	091b      	lsrs	r3, r3, #4
 80088b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80088b8:	4b82      	ldr	r3, [pc, #520]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80088c2:	4b80      	ldr	r3, [pc, #512]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c6:	08db      	lsrs	r3, r3, #3
 80088c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80e1 	beq.w	8008aa8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	f000 8083 	beq.w	80089f4 <HAL_RCC_GetSysClockFreq+0x204>
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	f200 80a1 	bhi.w	8008a38 <HAL_RCC_GetSysClockFreq+0x248>
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <HAL_RCC_GetSysClockFreq+0x114>
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d056      	beq.n	80089b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008902:	e099      	b.n	8008a38 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008904:	4b6f      	ldr	r3, [pc, #444]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b00      	cmp	r3, #0
 800890e:	d02d      	beq.n	800896c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008910:	4b6c      	ldr	r3, [pc, #432]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	08db      	lsrs	r3, r3, #3
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	4a6b      	ldr	r2, [pc, #428]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800891c:	fa22 f303 	lsr.w	r3, r2, r3
 8008920:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	ee07 3a90 	vmov	s15, r3
 8008928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	ee07 3a90 	vmov	s15, r3
 8008932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b62      	ldr	r3, [pc, #392]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a02 	vldr	s12, [r7, #8]
 800894e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ad4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800896a:	e087      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ad8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897e:	4b51      	ldr	r3, [pc, #324]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008992:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ad4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ae:	e065      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008adc <HAL_RCC_GetSysClockFreq+0x2ec>
 80089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c2:	4b40      	ldr	r3, [pc, #256]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ad4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089f2:	e043      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008ae0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a06:	4b2f      	ldr	r3, [pc, #188]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ad4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a36:	e021      	b.n	8008a7c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a42:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008adc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4a:	4b1e      	ldr	r3, [pc, #120]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ad4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a7a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008a7c:	4b11      	ldr	r3, [pc, #68]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	0a5b      	lsrs	r3, r3, #9
 8008a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a86:	3301      	adds	r3, #1
 8008a88:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	ee07 3a90 	vmov	s15, r3
 8008a90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa0:	ee17 3a90 	vmov	r3, s15
 8008aa4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008aa6:	e005      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61bb      	str	r3, [r7, #24]
    break;
 8008aac:	e002      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008aae:	4b07      	ldr	r3, [pc, #28]	; (8008acc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ab0:	61bb      	str	r3, [r7, #24]
    break;
 8008ab2:	bf00      	nop
  }

  return sysclockfreq;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3724      	adds	r7, #36	; 0x24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	58024400 	.word	0x58024400
 8008ac8:	03d09000 	.word	0x03d09000
 8008acc:	003d0900 	.word	0x003d0900
 8008ad0:	017d7840 	.word	0x017d7840
 8008ad4:	46000000 	.word	0x46000000
 8008ad8:	4c742400 	.word	0x4c742400
 8008adc:	4a742400 	.word	0x4a742400
 8008ae0:	4bbebc20 	.word	0x4bbebc20

08008ae4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008aec:	2300      	movs	r3, #0
 8008aee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008af0:	2300      	movs	r3, #0
 8008af2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d03f      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b08:	d02a      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008b0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b0e:	d824      	bhi.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b14:	d018      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b1a:	d81e      	bhi.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b24:	d007      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008b26:	e018      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b28:	4bab      	ldr	r3, [pc, #684]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	4aaa      	ldr	r2, [pc, #680]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b34:	e015      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 ff11 	bl	8009964 <RCCEx_PLL2_Config>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b46:	e00c      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3324      	adds	r3, #36	; 0x24
 8008b4c:	2102      	movs	r1, #2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 ffba 	bl	8009ac8 <RCCEx_PLL3_Config>
 8008b54:	4603      	mov	r3, r0
 8008b56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b58:	e003      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b5e:	e000      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d109      	bne.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b68:	4b9b      	ldr	r3, [pc, #620]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b74:	4998      	ldr	r1, [pc, #608]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	650b      	str	r3, [r1, #80]	; 0x50
 8008b7a:	e001      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d03d      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d826      	bhi.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008b94:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9a:	bf00      	nop
 8008b9c:	08008bb1 	.word	0x08008bb1
 8008ba0:	08008bbf 	.word	0x08008bbf
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	08008be9 	.word	0x08008be9
 8008bac:	08008be9 	.word	0x08008be9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bb0:	4b89      	ldr	r3, [pc, #548]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	4a88      	ldr	r2, [pc, #544]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bbc:	e015      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fecd 	bl	8009964 <RCCEx_PLL2_Config>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bce:	e00c      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3324      	adds	r3, #36	; 0x24
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 ff76 	bl	8009ac8 <RCCEx_PLL3_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008be0:	e003      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	75fb      	strb	r3, [r7, #23]
      break;
 8008be6:	e000      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008be8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d109      	bne.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bf0:	4b79      	ldr	r3, [pc, #484]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf4:	f023 0207 	bic.w	r2, r3, #7
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfc:	4976      	ldr	r1, [pc, #472]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	650b      	str	r3, [r1, #80]	; 0x50
 8008c02:	e001      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d042      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c1c:	d02b      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c22:	d825      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c24:	2bc0      	cmp	r3, #192	; 0xc0
 8008c26:	d028      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008c28:	2bc0      	cmp	r3, #192	; 0xc0
 8008c2a:	d821      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c2c:	2b80      	cmp	r3, #128	; 0x80
 8008c2e:	d016      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008c30:	2b80      	cmp	r3, #128	; 0x80
 8008c32:	d81d      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008c38:	2b40      	cmp	r3, #64	; 0x40
 8008c3a:	d007      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008c3c:	e018      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c3e:	4b66      	ldr	r3, [pc, #408]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	4a65      	ldr	r2, [pc, #404]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c4a:	e017      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	2100      	movs	r1, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fe86 	bl	8009964 <RCCEx_PLL2_Config>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c5c:	e00e      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3324      	adds	r3, #36	; 0x24
 8008c62:	2100      	movs	r1, #0
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 ff2f 	bl	8009ac8 <RCCEx_PLL3_Config>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c6e:	e005      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	75fb      	strb	r3, [r7, #23]
      break;
 8008c74:	e002      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008c76:	bf00      	nop
 8008c78:	e000      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008c7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d109      	bne.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008c82:	4b55      	ldr	r3, [pc, #340]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c8e:	4952      	ldr	r1, [pc, #328]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	650b      	str	r3, [r1, #80]	; 0x50
 8008c94:	e001      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d049      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cb0:	d030      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cb6:	d82a      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008cb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cbc:	d02c      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008cbe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cc2:	d824      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cc8:	d018      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cce:	d81e      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d003      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008cd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cd8:	d007      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008cda:	e018      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cdc:	4b3e      	ldr	r3, [pc, #248]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	4a3d      	ldr	r2, [pc, #244]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ce8:	e017      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3304      	adds	r3, #4
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fe37 	bl	8009964 <RCCEx_PLL2_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008cfa:	e00e      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3324      	adds	r3, #36	; 0x24
 8008d00:	2100      	movs	r1, #0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fee0 	bl	8009ac8 <RCCEx_PLL3_Config>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d0c:	e005      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	75fb      	strb	r3, [r7, #23]
      break;
 8008d12:	e002      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008d14:	bf00      	nop
 8008d16:	e000      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d20:	4b2d      	ldr	r3, [pc, #180]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d24:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d2e:	492a      	ldr	r1, [pc, #168]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	658b      	str	r3, [r1, #88]	; 0x58
 8008d34:	e001      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
 8008d38:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d04c      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d50:	d030      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d56:	d82a      	bhi.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d5c:	d02c      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008d5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d62:	d824      	bhi.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d68:	d018      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d6e:	d81e      	bhi.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d78:	d007      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008d7a:	e018      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d7c:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d88:	e017      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fde7 	bl	8009964 <RCCEx_PLL2_Config>
 8008d96:	4603      	mov	r3, r0
 8008d98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d9a:	e00e      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3324      	adds	r3, #36	; 0x24
 8008da0:	2100      	movs	r1, #0
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 fe90 	bl	8009ac8 <RCCEx_PLL3_Config>
 8008da8:	4603      	mov	r3, r0
 8008daa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dac:	e005      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	75fb      	strb	r3, [r7, #23]
      break;
 8008db2:	e002      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008db4:	bf00      	nop
 8008db6:	e000      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10d      	bne.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008dc0:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008dce:	4902      	ldr	r1, [pc, #8]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	658b      	str	r3, [r1, #88]	; 0x58
 8008dd4:	e004      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008dd6:	bf00      	nop
 8008dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d032      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df0:	2b30      	cmp	r3, #48	; 0x30
 8008df2:	d01c      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008df4:	2b30      	cmp	r3, #48	; 0x30
 8008df6:	d817      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008df8:	2b20      	cmp	r3, #32
 8008dfa:	d00c      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008dfc:	2b20      	cmp	r3, #32
 8008dfe:	d813      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d016      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d10f      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e08:	4baf      	ldr	r3, [pc, #700]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0c:	4aae      	ldr	r2, [pc, #696]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008e14:	e00e      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3304      	adds	r3, #4
 8008e1a:	2102      	movs	r1, #2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fda1 	bl	8009964 <RCCEx_PLL2_Config>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008e26:	e005      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e2c:	e002      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e3a:	4ba3      	ldr	r3, [pc, #652]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e46:	49a0      	ldr	r1, [pc, #640]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e4c:	e001      	b.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d047      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e66:	d030      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e6c:	d82a      	bhi.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e72:	d02c      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008e74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e78:	d824      	bhi.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e7e:	d018      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e84:	d81e      	bhi.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e8e:	d007      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008e90:	e018      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e92:	4b8d      	ldr	r3, [pc, #564]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e96:	4a8c      	ldr	r2, [pc, #560]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e9e:	e017      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fd5c 	bl	8009964 <RCCEx_PLL2_Config>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008eb0:	e00e      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	3324      	adds	r3, #36	; 0x24
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 fe05 	bl	8009ac8 <RCCEx_PLL3_Config>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ec2:	e005      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec8:	e002      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008eca:	bf00      	nop
 8008ecc:	e000      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d109      	bne.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ed6:	4b7c      	ldr	r3, [pc, #496]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eda:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee2:	4979      	ldr	r1, [pc, #484]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	650b      	str	r3, [r1, #80]	; 0x50
 8008ee8:	e001      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d049      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008efe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f02:	d02e      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f08:	d828      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f0e:	d02a      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f14:	d822      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f1a:	d026      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008f1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f20:	d81c      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f26:	d010      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008f28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f2c:	d816      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01d      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f36:	d111      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fd10 	bl	8009964 <RCCEx_PLL2_Config>
 8008f44:	4603      	mov	r3, r0
 8008f46:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f48:	e012      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3324      	adds	r3, #36	; 0x24
 8008f4e:	2101      	movs	r1, #1
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fdb9 	bl	8009ac8 <RCCEx_PLL3_Config>
 8008f56:	4603      	mov	r3, r0
 8008f58:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f5a:	e009      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f60:	e006      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f62:	bf00      	nop
 8008f64:	e004      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f66:	bf00      	nop
 8008f68:	e002      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f6a:	bf00      	nop
 8008f6c:	e000      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f76:	4b54      	ldr	r3, [pc, #336]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f7a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f82:	4951      	ldr	r1, [pc, #324]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	650b      	str	r3, [r1, #80]	; 0x50
 8008f88:	e001      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d04b      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fa4:	d02e      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008faa:	d828      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb0:	d02a      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb6:	d822      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fbc:	d026      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008fbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fc2:	d81c      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fc8:	d010      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fce:	d816      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d01d      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fd8:	d111      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	2101      	movs	r1, #1
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fcbf 	bl	8009964 <RCCEx_PLL2_Config>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008fea:	e012      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3324      	adds	r3, #36	; 0x24
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fd68 	bl	8009ac8 <RCCEx_PLL3_Config>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008ffc:	e009      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	75fb      	strb	r3, [r7, #23]
      break;
 8009002:	e006      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009004:	bf00      	nop
 8009006:	e004      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009008:	bf00      	nop
 800900a:	e002      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800900c:	bf00      	nop
 800900e:	e000      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10a      	bne.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009018:	4b2b      	ldr	r3, [pc, #172]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800901a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800901c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009026:	4928      	ldr	r1, [pc, #160]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009028:	4313      	orrs	r3, r2
 800902a:	658b      	str	r3, [r1, #88]	; 0x58
 800902c:	e001      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d02f      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009046:	d00e      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800904c:	d814      	bhi.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d015      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009056:	d10f      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009058:	4b1b      	ldr	r3, [pc, #108]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	4a1a      	ldr	r2, [pc, #104]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800905e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009064:	e00c      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3304      	adds	r3, #4
 800906a:	2101      	movs	r1, #1
 800906c:	4618      	mov	r0, r3
 800906e:	f000 fc79 	bl	8009964 <RCCEx_PLL2_Config>
 8009072:	4603      	mov	r3, r0
 8009074:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009076:	e003      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	75fb      	strb	r3, [r7, #23]
      break;
 800907c:	e000      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800907e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d109      	bne.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009086:	4b10      	ldr	r3, [pc, #64]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800908a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009092:	490d      	ldr	r1, [pc, #52]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009094:	4313      	orrs	r3, r2
 8009096:	650b      	str	r3, [r1, #80]	; 0x50
 8009098:	e001      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d033      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d81c      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80090b2:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	080090f3 	.word	0x080090f3
 80090bc:	080090cd 	.word	0x080090cd
 80090c0:	080090db 	.word	0x080090db
 80090c4:	080090f3 	.word	0x080090f3
 80090c8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090cc:	4bb8      	ldr	r3, [pc, #736]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	4ab7      	ldr	r2, [pc, #732]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80090d8:	e00c      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3304      	adds	r3, #4
 80090de:	2102      	movs	r1, #2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fc3f 	bl	8009964 <RCCEx_PLL2_Config>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80090ea:	e003      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
      break;
 80090f0:	e000      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80090f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d109      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80090fa:	4bad      	ldr	r3, [pc, #692]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090fe:	f023 0203 	bic.w	r2, r3, #3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009106:	49aa      	ldr	r1, [pc, #680]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009108:	4313      	orrs	r3, r2
 800910a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800910c:	e001      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 8086 	beq.w	800922c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009120:	4ba4      	ldr	r3, [pc, #656]	; (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4aa3      	ldr	r2, [pc, #652]	; (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800912a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800912c:	f7f8 f98c 	bl	8001448 <HAL_GetTick>
 8009130:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009132:	e009      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009134:	f7f8 f988 	bl	8001448 <HAL_GetTick>
 8009138:	4602      	mov	r2, r0
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	2b64      	cmp	r3, #100	; 0x64
 8009140:	d902      	bls.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	75fb      	strb	r3, [r7, #23]
        break;
 8009146:	e005      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009148:	4b9a      	ldr	r3, [pc, #616]	; (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0ef      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009154:	7dfb      	ldrb	r3, [r7, #23]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d166      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800915a:	4b95      	ldr	r3, [pc, #596]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800915c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009164:	4053      	eors	r3, r2
 8009166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800916a:	2b00      	cmp	r3, #0
 800916c:	d013      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800916e:	4b90      	ldr	r3, [pc, #576]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009176:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009178:	4b8d      	ldr	r3, [pc, #564]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800917a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917c:	4a8c      	ldr	r2, [pc, #560]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800917e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009182:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009184:	4b8a      	ldr	r3, [pc, #552]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009188:	4a89      	ldr	r2, [pc, #548]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800918a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800918e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009190:	4a87      	ldr	r2, [pc, #540]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800919c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a0:	d115      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a2:	f7f8 f951 	bl	8001448 <HAL_GetTick>
 80091a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091a8:	e00b      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091aa:	f7f8 f94d 	bl	8001448 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d902      	bls.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	75fb      	strb	r3, [r7, #23]
            break;
 80091c0:	e005      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091c2:	4b7b      	ldr	r3, [pc, #492]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0ed      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d126      	bne.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091e2:	d10d      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80091e4:	4b72      	ldr	r3, [pc, #456]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091f2:	0919      	lsrs	r1, r3, #4
 80091f4:	4b70      	ldr	r3, [pc, #448]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80091f6:	400b      	ands	r3, r1
 80091f8:	496d      	ldr	r1, [pc, #436]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	610b      	str	r3, [r1, #16]
 80091fe:	e005      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009200:	4b6b      	ldr	r3, [pc, #428]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	4a6a      	ldr	r2, [pc, #424]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009206:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800920a:	6113      	str	r3, [r2, #16]
 800920c:	4b68      	ldr	r3, [pc, #416]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800920e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800921a:	4965      	ldr	r1, [pc, #404]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800921c:	4313      	orrs	r3, r2
 800921e:	670b      	str	r3, [r1, #112]	; 0x70
 8009220:	e004      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	75bb      	strb	r3, [r7, #22]
 8009226:	e001      	b.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d07e      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800923c:	2b28      	cmp	r3, #40	; 0x28
 800923e:	d867      	bhi.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009240:	a201      	add	r2, pc, #4	; (adr r2, 8009248 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009246:	bf00      	nop
 8009248:	08009317 	.word	0x08009317
 800924c:	08009311 	.word	0x08009311
 8009250:	08009311 	.word	0x08009311
 8009254:	08009311 	.word	0x08009311
 8009258:	08009311 	.word	0x08009311
 800925c:	08009311 	.word	0x08009311
 8009260:	08009311 	.word	0x08009311
 8009264:	08009311 	.word	0x08009311
 8009268:	080092ed 	.word	0x080092ed
 800926c:	08009311 	.word	0x08009311
 8009270:	08009311 	.word	0x08009311
 8009274:	08009311 	.word	0x08009311
 8009278:	08009311 	.word	0x08009311
 800927c:	08009311 	.word	0x08009311
 8009280:	08009311 	.word	0x08009311
 8009284:	08009311 	.word	0x08009311
 8009288:	080092ff 	.word	0x080092ff
 800928c:	08009311 	.word	0x08009311
 8009290:	08009311 	.word	0x08009311
 8009294:	08009311 	.word	0x08009311
 8009298:	08009311 	.word	0x08009311
 800929c:	08009311 	.word	0x08009311
 80092a0:	08009311 	.word	0x08009311
 80092a4:	08009311 	.word	0x08009311
 80092a8:	08009317 	.word	0x08009317
 80092ac:	08009311 	.word	0x08009311
 80092b0:	08009311 	.word	0x08009311
 80092b4:	08009311 	.word	0x08009311
 80092b8:	08009311 	.word	0x08009311
 80092bc:	08009311 	.word	0x08009311
 80092c0:	08009311 	.word	0x08009311
 80092c4:	08009311 	.word	0x08009311
 80092c8:	08009317 	.word	0x08009317
 80092cc:	08009311 	.word	0x08009311
 80092d0:	08009311 	.word	0x08009311
 80092d4:	08009311 	.word	0x08009311
 80092d8:	08009311 	.word	0x08009311
 80092dc:	08009311 	.word	0x08009311
 80092e0:	08009311 	.word	0x08009311
 80092e4:	08009311 	.word	0x08009311
 80092e8:	08009317 	.word	0x08009317
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3304      	adds	r3, #4
 80092f0:	2101      	movs	r1, #1
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 fb36 	bl	8009964 <RCCEx_PLL2_Config>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80092fc:	e00c      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3324      	adds	r3, #36	; 0x24
 8009302:	2101      	movs	r1, #1
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fbdf 	bl	8009ac8 <RCCEx_PLL3_Config>
 800930a:	4603      	mov	r3, r0
 800930c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800930e:	e003      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	75fb      	strb	r3, [r7, #23]
      break;
 8009314:	e000      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d109      	bne.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800931e:	4b24      	ldr	r3, [pc, #144]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009322:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800932a:	4921      	ldr	r1, [pc, #132]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800932c:	4313      	orrs	r3, r2
 800932e:	654b      	str	r3, [r1, #84]	; 0x54
 8009330:	e001      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d03e      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009346:	2b05      	cmp	r3, #5
 8009348:	d820      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800934a:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	08009393 	.word	0x08009393
 8009354:	08009369 	.word	0x08009369
 8009358:	0800937b 	.word	0x0800937b
 800935c:	08009393 	.word	0x08009393
 8009360:	08009393 	.word	0x08009393
 8009364:	08009393 	.word	0x08009393
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3304      	adds	r3, #4
 800936c:	2101      	movs	r1, #1
 800936e:	4618      	mov	r0, r3
 8009370:	f000 faf8 	bl	8009964 <RCCEx_PLL2_Config>
 8009374:	4603      	mov	r3, r0
 8009376:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009378:	e00c      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3324      	adds	r3, #36	; 0x24
 800937e:	2101      	movs	r1, #1
 8009380:	4618      	mov	r0, r3
 8009382:	f000 fba1 	bl	8009ac8 <RCCEx_PLL3_Config>
 8009386:	4603      	mov	r3, r0
 8009388:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800938a:	e003      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	75fb      	strb	r3, [r7, #23]
      break;
 8009390:	e000      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d110      	bne.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800939a:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800939c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939e:	f023 0207 	bic.w	r2, r3, #7
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093a6:	4902      	ldr	r1, [pc, #8]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	654b      	str	r3, [r1, #84]	; 0x54
 80093ac:	e008      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80093ae:	bf00      	nop
 80093b0:	58024400 	.word	0x58024400
 80093b4:	58024800 	.word	0x58024800
 80093b8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093bc:	7dfb      	ldrb	r3, [r7, #23]
 80093be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d039      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d2:	2b05      	cmp	r3, #5
 80093d4:	d820      	bhi.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80093d6:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	0800941f 	.word	0x0800941f
 80093e0:	080093f5 	.word	0x080093f5
 80093e4:	08009407 	.word	0x08009407
 80093e8:	0800941f 	.word	0x0800941f
 80093ec:	0800941f 	.word	0x0800941f
 80093f0:	0800941f 	.word	0x0800941f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3304      	adds	r3, #4
 80093f8:	2101      	movs	r1, #1
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fab2 	bl	8009964 <RCCEx_PLL2_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009404:	e00c      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3324      	adds	r3, #36	; 0x24
 800940a:	2101      	movs	r1, #1
 800940c:	4618      	mov	r0, r3
 800940e:	f000 fb5b 	bl	8009ac8 <RCCEx_PLL3_Config>
 8009412:	4603      	mov	r3, r0
 8009414:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009416:	e003      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	75fb      	strb	r3, [r7, #23]
      break;
 800941c:	e000      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800941e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10a      	bne.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009426:	4bb7      	ldr	r3, [pc, #732]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800942a:	f023 0207 	bic.w	r2, r3, #7
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009434:	49b3      	ldr	r1, [pc, #716]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009436:	4313      	orrs	r3, r2
 8009438:	658b      	str	r3, [r1, #88]	; 0x58
 800943a:	e001      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d04b      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009456:	d02e      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800945c:	d828      	bhi.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800945e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009462:	d02a      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009468:	d822      	bhi.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800946a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800946e:	d026      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009470:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009474:	d81c      	bhi.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800947a:	d010      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800947c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009480:	d816      	bhi.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d01d      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800948a:	d111      	bne.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	3304      	adds	r3, #4
 8009490:	2100      	movs	r1, #0
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fa66 	bl	8009964 <RCCEx_PLL2_Config>
 8009498:	4603      	mov	r3, r0
 800949a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800949c:	e012      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3324      	adds	r3, #36	; 0x24
 80094a2:	2102      	movs	r1, #2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fb0f 	bl	8009ac8 <RCCEx_PLL3_Config>
 80094aa:	4603      	mov	r3, r0
 80094ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094ae:	e009      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	75fb      	strb	r3, [r7, #23]
      break;
 80094b4:	e006      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094b6:	bf00      	nop
 80094b8:	e004      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094ba:	bf00      	nop
 80094bc:	e002      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094be:	bf00      	nop
 80094c0:	e000      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10a      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094ca:	4b8e      	ldr	r3, [pc, #568]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d8:	498a      	ldr	r1, [pc, #552]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094da:	4313      	orrs	r3, r2
 80094dc:	654b      	str	r3, [r1, #84]	; 0x54
 80094de:	e001      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d04b      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094fa:	d02e      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80094fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009500:	d828      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009506:	d02a      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800950c:	d822      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800950e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009512:	d026      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009514:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009518:	d81c      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800951a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800951e:	d010      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009524:	d816      	bhi.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d01d      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800952a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800952e:	d111      	bne.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	3304      	adds	r3, #4
 8009534:	2100      	movs	r1, #0
 8009536:	4618      	mov	r0, r3
 8009538:	f000 fa14 	bl	8009964 <RCCEx_PLL2_Config>
 800953c:	4603      	mov	r3, r0
 800953e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009540:	e012      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	3324      	adds	r3, #36	; 0x24
 8009546:	2102      	movs	r1, #2
 8009548:	4618      	mov	r0, r3
 800954a:	f000 fabd 	bl	8009ac8 <RCCEx_PLL3_Config>
 800954e:	4603      	mov	r3, r0
 8009550:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009552:	e009      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	75fb      	strb	r3, [r7, #23]
      break;
 8009558:	e006      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800955a:	bf00      	nop
 800955c:	e004      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800955e:	bf00      	nop
 8009560:	e002      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009562:	bf00      	nop
 8009564:	e000      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10a      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800956e:	4b65      	ldr	r3, [pc, #404]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009572:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800957c:	4961      	ldr	r1, [pc, #388]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800957e:	4313      	orrs	r3, r2
 8009580:	658b      	str	r3, [r1, #88]	; 0x58
 8009582:	e001      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009590:	2b00      	cmp	r3, #0
 8009592:	d04b      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800959a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800959e:	d02e      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80095a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095a4:	d828      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095aa:	d02a      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80095ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b0:	d822      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095b6:	d026      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80095b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095bc:	d81c      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095c2:	d010      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80095c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095c8:	d816      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d01d      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80095ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d2:	d111      	bne.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3304      	adds	r3, #4
 80095d8:	2100      	movs	r1, #0
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f9c2 	bl	8009964 <RCCEx_PLL2_Config>
 80095e0:	4603      	mov	r3, r0
 80095e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80095e4:	e012      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3324      	adds	r3, #36	; 0x24
 80095ea:	2102      	movs	r1, #2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fa6b 	bl	8009ac8 <RCCEx_PLL3_Config>
 80095f2:	4603      	mov	r3, r0
 80095f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80095f6:	e009      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	75fb      	strb	r3, [r7, #23]
      break;
 80095fc:	e006      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80095fe:	bf00      	nop
 8009600:	e004      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009602:	bf00      	nop
 8009604:	e002      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009606:	bf00      	nop
 8009608:	e000      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800960a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10a      	bne.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009612:	4b3c      	ldr	r3, [pc, #240]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009620:	4938      	ldr	r1, [pc, #224]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009622:	4313      	orrs	r3, r2
 8009624:	658b      	str	r3, [r1, #88]	; 0x58
 8009626:	e001      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009628:	7dfb      	ldrb	r3, [r7, #23]
 800962a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0308 	and.w	r3, r3, #8
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01a      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800963e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009642:	d10a      	bne.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3324      	adds	r3, #36	; 0x24
 8009648:	2102      	movs	r1, #2
 800964a:	4618      	mov	r0, r3
 800964c:	f000 fa3c 	bl	8009ac8 <RCCEx_PLL3_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800965a:	4b2a      	ldr	r3, [pc, #168]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800965c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009668:	4926      	ldr	r1, [pc, #152]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800966a:	4313      	orrs	r3, r2
 800966c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 0310 	and.w	r3, r3, #16
 8009676:	2b00      	cmp	r3, #0
 8009678:	d01a      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009684:	d10a      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3324      	adds	r3, #36	; 0x24
 800968a:	2102      	movs	r1, #2
 800968c:	4618      	mov	r0, r3
 800968e:	f000 fa1b 	bl	8009ac8 <RCCEx_PLL3_Config>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800969c:	4b19      	ldr	r3, [pc, #100]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800969e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096aa:	4916      	ldr	r1, [pc, #88]	; (8009704 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d036      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096c6:	d01f      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80096c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096cc:	d817      	bhi.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d003      	beq.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80096d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d6:	d009      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80096d8:	e011      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3304      	adds	r3, #4
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 f93f 	bl	8009964 <RCCEx_PLL2_Config>
 80096e6:	4603      	mov	r3, r0
 80096e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80096ea:	e00e      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	3324      	adds	r3, #36	; 0x24
 80096f0:	2102      	movs	r1, #2
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 f9e8 	bl	8009ac8 <RCCEx_PLL3_Config>
 80096f8:	4603      	mov	r3, r0
 80096fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80096fc:	e005      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	75fb      	strb	r3, [r7, #23]
      break;
 8009702:	e002      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009704:	58024400 	.word	0x58024400
      break;
 8009708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10a      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009710:	4b93      	ldr	r3, [pc, #588]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009714:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800971e:	4990      	ldr	r1, [pc, #576]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009720:	4313      	orrs	r3, r2
 8009722:	658b      	str	r3, [r1, #88]	; 0x58
 8009724:	e001      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d033      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800973c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009740:	d01c      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009742:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009746:	d816      	bhi.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800974c:	d003      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800974e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009752:	d007      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009754:	e00f      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009756:	4b82      	ldr	r3, [pc, #520]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975a:	4a81      	ldr	r2, [pc, #516]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800975c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009760:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009762:	e00c      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3324      	adds	r3, #36	; 0x24
 8009768:	2101      	movs	r1, #1
 800976a:	4618      	mov	r0, r3
 800976c:	f000 f9ac 	bl	8009ac8 <RCCEx_PLL3_Config>
 8009770:	4603      	mov	r3, r0
 8009772:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009774:	e003      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	75fb      	strb	r3, [r7, #23]
      break;
 800977a:	e000      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800977c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009784:	4b76      	ldr	r3, [pc, #472]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009788:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009792:	4973      	ldr	r1, [pc, #460]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009794:	4313      	orrs	r3, r2
 8009796:	654b      	str	r3, [r1, #84]	; 0x54
 8009798:	e001      	b.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979a:	7dfb      	ldrb	r3, [r7, #23]
 800979c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d029      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80097b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b6:	d007      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80097b8:	e00f      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ba:	4b69      	ldr	r3, [pc, #420]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097be:	4a68      	ldr	r2, [pc, #416]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097c6:	e00b      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	2102      	movs	r1, #2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 f8c8 	bl	8009964 <RCCEx_PLL2_Config>
 80097d4:	4603      	mov	r3, r0
 80097d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097d8:	e002      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
      break;
 80097de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80097e6:	4b5e      	ldr	r3, [pc, #376]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f2:	495b      	ldr	r1, [pc, #364]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097f8:	e001      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3324      	adds	r3, #36	; 0x24
 800980e:	2102      	movs	r1, #2
 8009810:	4618      	mov	r0, r3
 8009812:	f000 f959 	bl	8009ac8 <RCCEx_PLL3_Config>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d030      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009834:	d017      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800983a:	d811      	bhi.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800983c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009840:	d013      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009846:	d80b      	bhi.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d010      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800984c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009850:	d106      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009852:	4b43      	ldr	r3, [pc, #268]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	4a42      	ldr	r2, [pc, #264]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800985c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800985e:	e007      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	75fb      	strb	r3, [r7, #23]
      break;
 8009864:	e004      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009866:	bf00      	nop
 8009868:	e002      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800986a:	bf00      	nop
 800986c:	e000      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800986e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009876:	4b3a      	ldr	r3, [pc, #232]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800987a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009882:	4937      	ldr	r1, [pc, #220]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009884:	4313      	orrs	r3, r2
 8009886:	654b      	str	r3, [r1, #84]	; 0x54
 8009888:	e001      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800989a:	4b31      	ldr	r3, [pc, #196]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800989c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800989e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a6:	492e      	ldr	r1, [pc, #184]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d009      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80098b8:	4b29      	ldr	r3, [pc, #164]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098c6:	4926      	ldr	r1, [pc, #152]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098c8:	4313      	orrs	r3, r2
 80098ca:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d008      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098d8:	4b21      	ldr	r3, [pc, #132]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098e4:	491e      	ldr	r1, [pc, #120]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00d      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098f6:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	4a19      	ldr	r2, [pc, #100]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009900:	6113      	str	r3, [r2, #16]
 8009902:	4b17      	ldr	r3, [pc, #92]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009904:	691a      	ldr	r2, [r3, #16]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800990c:	4914      	ldr	r1, [pc, #80]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800990e:	4313      	orrs	r3, r2
 8009910:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	da08      	bge.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800991a:	4b11      	ldr	r3, [pc, #68]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800991c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800991e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009926:	490e      	ldr	r1, [pc, #56]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009928:	4313      	orrs	r3, r2
 800992a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d009      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009938:	4b09      	ldr	r3, [pc, #36]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800993a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009946:	4906      	ldr	r1, [pc, #24]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009948:	4313      	orrs	r3, r2
 800994a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800994c:	7dbb      	ldrb	r3, [r7, #22]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d101      	bne.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	e000      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	58024400 	.word	0x58024400

08009964 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009972:	4b53      	ldr	r3, [pc, #332]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	f003 0303 	and.w	r3, r3, #3
 800997a:	2b03      	cmp	r3, #3
 800997c:	d101      	bne.n	8009982 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e099      	b.n	8009ab6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009982:	4b4f      	ldr	r3, [pc, #316]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a4e      	ldr	r2, [pc, #312]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009988:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800998c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800998e:	f7f7 fd5b 	bl	8001448 <HAL_GetTick>
 8009992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009994:	e008      	b.n	80099a8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009996:	f7f7 fd57 	bl	8001448 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d901      	bls.n	80099a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e086      	b.n	8009ab6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099a8:	4b45      	ldr	r3, [pc, #276]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1f0      	bne.n	8009996 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80099b4:	4b42      	ldr	r3, [pc, #264]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	031b      	lsls	r3, r3, #12
 80099c2:	493f      	ldr	r1, [pc, #252]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	628b      	str	r3, [r1, #40]	; 0x28
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	025b      	lsls	r3, r3, #9
 80099da:	b29b      	uxth	r3, r3
 80099dc:	431a      	orrs	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	041b      	lsls	r3, r3, #16
 80099e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099ea:	431a      	orrs	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	061b      	lsls	r3, r3, #24
 80099f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80099f8:	4931      	ldr	r1, [pc, #196]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80099fe:	4b30      	ldr	r3, [pc, #192]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	492d      	ldr	r1, [pc, #180]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a10:	4b2b      	ldr	r3, [pc, #172]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	f023 0220 	bic.w	r2, r3, #32
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	4928      	ldr	r1, [pc, #160]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a22:	4b27      	ldr	r3, [pc, #156]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	4a26      	ldr	r2, [pc, #152]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a28:	f023 0310 	bic.w	r3, r3, #16
 8009a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a2e:	4b24      	ldr	r3, [pc, #144]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a32:	4b24      	ldr	r3, [pc, #144]	; (8009ac4 <RCCEx_PLL2_Config+0x160>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	69d2      	ldr	r2, [r2, #28]
 8009a3a:	00d2      	lsls	r2, r2, #3
 8009a3c:	4920      	ldr	r1, [pc, #128]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a42:	4b1f      	ldr	r3, [pc, #124]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a48:	f043 0310 	orr.w	r3, r3, #16
 8009a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d106      	bne.n	8009a62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a54:	4b1a      	ldr	r3, [pc, #104]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	4a19      	ldr	r2, [pc, #100]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a60:	e00f      	b.n	8009a82 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d106      	bne.n	8009a76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a68:	4b15      	ldr	r3, [pc, #84]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6c:	4a14      	ldr	r2, [pc, #80]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a74:	e005      	b.n	8009a82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a76:	4b12      	ldr	r3, [pc, #72]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7a:	4a11      	ldr	r2, [pc, #68]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a82:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a0e      	ldr	r2, [pc, #56]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009a88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a8e:	f7f7 fcdb 	bl	8001448 <HAL_GetTick>
 8009a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a94:	e008      	b.n	8009aa8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a96:	f7f7 fcd7 	bl	8001448 <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d901      	bls.n	8009aa8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e006      	b.n	8009ab6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <RCCEx_PLL2_Config+0x15c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d0f0      	beq.n	8009a96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	58024400 	.word	0x58024400
 8009ac4:	ffff0007 	.word	0xffff0007

08009ac8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ad6:	4b53      	ldr	r3, [pc, #332]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d101      	bne.n	8009ae6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e099      	b.n	8009c1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ae6:	4b4f      	ldr	r3, [pc, #316]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a4e      	ldr	r2, [pc, #312]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009af2:	f7f7 fca9 	bl	8001448 <HAL_GetTick>
 8009af6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009af8:	e008      	b.n	8009b0c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009afa:	f7f7 fca5 	bl	8001448 <HAL_GetTick>
 8009afe:	4602      	mov	r2, r0
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d901      	bls.n	8009b0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e086      	b.n	8009c1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b0c:	4b45      	ldr	r3, [pc, #276]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1f0      	bne.n	8009afa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b18:	4b42      	ldr	r3, [pc, #264]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	051b      	lsls	r3, r3, #20
 8009b26:	493f      	ldr	r1, [pc, #252]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	628b      	str	r3, [r1, #40]	; 0x28
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	025b      	lsls	r3, r3, #9
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	041b      	lsls	r3, r3, #16
 8009b4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	061b      	lsls	r3, r3, #24
 8009b58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b5c:	4931      	ldr	r1, [pc, #196]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b62:	4b30      	ldr	r3, [pc, #192]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	492d      	ldr	r1, [pc, #180]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b74:	4b2b      	ldr	r3, [pc, #172]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	4928      	ldr	r1, [pc, #160]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b86:	4b27      	ldr	r3, [pc, #156]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8a:	4a26      	ldr	r2, [pc, #152]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b92:	4b24      	ldr	r3, [pc, #144]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b96:	4b24      	ldr	r3, [pc, #144]	; (8009c28 <RCCEx_PLL3_Config+0x160>)
 8009b98:	4013      	ands	r3, r2
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	69d2      	ldr	r2, [r2, #28]
 8009b9e:	00d2      	lsls	r2, r2, #3
 8009ba0:	4920      	ldr	r1, [pc, #128]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ba6:	4b1f      	ldr	r3, [pc, #124]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009baa:	4a1e      	ldr	r2, [pc, #120]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d106      	bne.n	8009bc6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009bb8:	4b1a      	ldr	r3, [pc, #104]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bbc:	4a19      	ldr	r2, [pc, #100]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009bbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bc4:	e00f      	b.n	8009be6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d106      	bne.n	8009bda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009bcc:	4b15      	ldr	r3, [pc, #84]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	4a14      	ldr	r2, [pc, #80]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009bd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bd8:	e005      	b.n	8009be6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009bda:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bde:	4a11      	ldr	r2, [pc, #68]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009be4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009be6:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a0e      	ldr	r2, [pc, #56]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bf2:	f7f7 fc29 	bl	8001448 <HAL_GetTick>
 8009bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bf8:	e008      	b.n	8009c0c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bfa:	f7f7 fc25 	bl	8001448 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d901      	bls.n	8009c0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e006      	b.n	8009c1a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <RCCEx_PLL3_Config+0x15c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0f0      	beq.n	8009bfa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	58024400 	.word	0x58024400
 8009c28:	ffff0007 	.word	0xffff0007

08009c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e049      	b.n	8009cd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7f7 fb00 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f000 faee 	bl	800a24c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d001      	beq.n	8009cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e054      	b.n	8009d9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f042 0201 	orr.w	r2, r2, #1
 8009d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a26      	ldr	r2, [pc, #152]	; (8009dac <HAL_TIM_Base_Start_IT+0xd0>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d022      	beq.n	8009d5c <HAL_TIM_Base_Start_IT+0x80>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d1e:	d01d      	beq.n	8009d5c <HAL_TIM_Base_Start_IT+0x80>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a22      	ldr	r2, [pc, #136]	; (8009db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d018      	beq.n	8009d5c <HAL_TIM_Base_Start_IT+0x80>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a21      	ldr	r2, [pc, #132]	; (8009db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d013      	beq.n	8009d5c <HAL_TIM_Base_Start_IT+0x80>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a1f      	ldr	r2, [pc, #124]	; (8009db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d00e      	beq.n	8009d5c <HAL_TIM_Base_Start_IT+0x80>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a1e      	ldr	r2, [pc, #120]	; (8009dbc <HAL_TIM_Base_Start_IT+0xe0>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d009      	beq.n	8009d5c <HAL_TIM_Base_Start_IT+0x80>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a1c      	ldr	r2, [pc, #112]	; (8009dc0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d004      	beq.n	8009d5c <HAL_TIM_Base_Start_IT+0x80>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a1b      	ldr	r2, [pc, #108]	; (8009dc4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d115      	bne.n	8009d88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	4b19      	ldr	r3, [pc, #100]	; (8009dc8 <HAL_TIM_Base_Start_IT+0xec>)
 8009d64:	4013      	ands	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b06      	cmp	r3, #6
 8009d6c:	d015      	beq.n	8009d9a <HAL_TIM_Base_Start_IT+0xbe>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d74:	d011      	beq.n	8009d9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f042 0201 	orr.w	r2, r2, #1
 8009d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d86:	e008      	b.n	8009d9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 0201 	orr.w	r2, r2, #1
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	e000      	b.n	8009d9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	40010000 	.word	0x40010000
 8009db0:	40000400 	.word	0x40000400
 8009db4:	40000800 	.word	0x40000800
 8009db8:	40000c00 	.word	0x40000c00
 8009dbc:	40010400 	.word	0x40010400
 8009dc0:	40001800 	.word	0x40001800
 8009dc4:	40014000 	.word	0x40014000
 8009dc8:	00010007 	.word	0x00010007

08009dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d122      	bne.n	8009e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	f003 0302 	and.w	r3, r3, #2
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d11b      	bne.n	8009e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f06f 0202 	mvn.w	r2, #2
 8009df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	f003 0303 	and.w	r3, r3, #3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d003      	beq.n	8009e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f9fe 	bl	800a210 <HAL_TIM_IC_CaptureCallback>
 8009e14:	e005      	b.n	8009e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f9f0 	bl	800a1fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fa01 	bl	800a224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f003 0304 	and.w	r3, r3, #4
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d122      	bne.n	8009e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	f003 0304 	and.w	r3, r3, #4
 8009e40:	2b04      	cmp	r3, #4
 8009e42:	d11b      	bne.n	8009e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f06f 0204 	mvn.w	r2, #4
 8009e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2202      	movs	r2, #2
 8009e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f9d4 	bl	800a210 <HAL_TIM_IC_CaptureCallback>
 8009e68:	e005      	b.n	8009e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f9c6 	bl	800a1fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f9d7 	bl	800a224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	f003 0308 	and.w	r3, r3, #8
 8009e86:	2b08      	cmp	r3, #8
 8009e88:	d122      	bne.n	8009ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f003 0308 	and.w	r3, r3, #8
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d11b      	bne.n	8009ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f06f 0208 	mvn.w	r2, #8
 8009ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2204      	movs	r2, #4
 8009ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	69db      	ldr	r3, [r3, #28]
 8009eae:	f003 0303 	and.w	r3, r3, #3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f9aa 	bl	800a210 <HAL_TIM_IC_CaptureCallback>
 8009ebc:	e005      	b.n	8009eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f99c 	bl	800a1fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f9ad 	bl	800a224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	f003 0310 	and.w	r3, r3, #16
 8009eda:	2b10      	cmp	r3, #16
 8009edc:	d122      	bne.n	8009f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f003 0310 	and.w	r3, r3, #16
 8009ee8:	2b10      	cmp	r3, #16
 8009eea:	d11b      	bne.n	8009f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f06f 0210 	mvn.w	r2, #16
 8009ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2208      	movs	r2, #8
 8009efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f980 	bl	800a210 <HAL_TIM_IC_CaptureCallback>
 8009f10:	e005      	b.n	8009f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f972 	bl	800a1fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f983 	bl	800a224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d10e      	bne.n	8009f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d107      	bne.n	8009f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f06f 0201 	mvn.w	r2, #1
 8009f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 fd6e 	bl	800ba2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5a:	2b80      	cmp	r3, #128	; 0x80
 8009f5c:	d10e      	bne.n	8009f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f68:	2b80      	cmp	r3, #128	; 0x80
 8009f6a:	d107      	bne.n	8009f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fb38 	bl	800a5ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8a:	d10e      	bne.n	8009faa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f96:	2b80      	cmp	r3, #128	; 0x80
 8009f98:	d107      	bne.n	8009faa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fb2b 	bl	800a600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb4:	2b40      	cmp	r3, #64	; 0x40
 8009fb6:	d10e      	bne.n	8009fd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc2:	2b40      	cmp	r3, #64	; 0x40
 8009fc4:	d107      	bne.n	8009fd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f931 	bl	800a238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	f003 0320 	and.w	r3, r3, #32
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	d10e      	bne.n	800a002 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	d107      	bne.n	800a002 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f06f 0220 	mvn.w	r2, #32
 8009ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 faeb 	bl	800a5d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a002:	bf00      	nop
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_TIM_ConfigClockSource+0x1c>
 800a024:	2302      	movs	r3, #2
 800a026:	e0dc      	b.n	800a1e2 <HAL_TIM_ConfigClockSource+0x1d6>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	4b6a      	ldr	r3, [pc, #424]	; (800a1ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800a044:	4013      	ands	r3, r2
 800a046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a04e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a64      	ldr	r2, [pc, #400]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	f000 80a9 	beq.w	800a1b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a064:	4a62      	ldr	r2, [pc, #392]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a066:	4293      	cmp	r3, r2
 800a068:	f200 80ae 	bhi.w	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a06c:	4a61      	ldr	r2, [pc, #388]	; (800a1f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	f000 80a1 	beq.w	800a1b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a074:	4a5f      	ldr	r2, [pc, #380]	; (800a1f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a076:	4293      	cmp	r3, r2
 800a078:	f200 80a6 	bhi.w	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a07c:	4a5e      	ldr	r2, [pc, #376]	; (800a1f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	f000 8099 	beq.w	800a1b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a084:	4a5c      	ldr	r2, [pc, #368]	; (800a1f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a086:	4293      	cmp	r3, r2
 800a088:	f200 809e 	bhi.w	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a08c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a090:	f000 8091 	beq.w	800a1b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a094:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a098:	f200 8096 	bhi.w	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a09c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0a0:	f000 8089 	beq.w	800a1b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0a8:	f200 808e 	bhi.w	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0b0:	d03e      	beq.n	800a130 <HAL_TIM_ConfigClockSource+0x124>
 800a0b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0b6:	f200 8087 	bhi.w	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0be:	f000 8086 	beq.w	800a1ce <HAL_TIM_ConfigClockSource+0x1c2>
 800a0c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c6:	d87f      	bhi.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0c8:	2b70      	cmp	r3, #112	; 0x70
 800a0ca:	d01a      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0xf6>
 800a0cc:	2b70      	cmp	r3, #112	; 0x70
 800a0ce:	d87b      	bhi.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0d0:	2b60      	cmp	r3, #96	; 0x60
 800a0d2:	d050      	beq.n	800a176 <HAL_TIM_ConfigClockSource+0x16a>
 800a0d4:	2b60      	cmp	r3, #96	; 0x60
 800a0d6:	d877      	bhi.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0d8:	2b50      	cmp	r3, #80	; 0x50
 800a0da:	d03c      	beq.n	800a156 <HAL_TIM_ConfigClockSource+0x14a>
 800a0dc:	2b50      	cmp	r3, #80	; 0x50
 800a0de:	d873      	bhi.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0e0:	2b40      	cmp	r3, #64	; 0x40
 800a0e2:	d058      	beq.n	800a196 <HAL_TIM_ConfigClockSource+0x18a>
 800a0e4:	2b40      	cmp	r3, #64	; 0x40
 800a0e6:	d86f      	bhi.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0e8:	2b30      	cmp	r3, #48	; 0x30
 800a0ea:	d064      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0ec:	2b30      	cmp	r3, #48	; 0x30
 800a0ee:	d86b      	bhi.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0f0:	2b20      	cmp	r3, #32
 800a0f2:	d060      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0f4:	2b20      	cmp	r3, #32
 800a0f6:	d867      	bhi.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d05c      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0fc:	2b10      	cmp	r3, #16
 800a0fe:	d05a      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a100:	e062      	b.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6899      	ldr	r1, [r3, #8]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	685a      	ldr	r2, [r3, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	f000 f9b3 	bl	800a47c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a124:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	609a      	str	r2, [r3, #8]
      break;
 800a12e:	e04f      	b.n	800a1d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	6899      	ldr	r1, [r3, #8]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	f000 f99c 	bl	800a47c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689a      	ldr	r2, [r3, #8]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a152:	609a      	str	r2, [r3, #8]
      break;
 800a154:	e03c      	b.n	800a1d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	6859      	ldr	r1, [r3, #4]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	461a      	mov	r2, r3
 800a164:	f000 f90c 	bl	800a380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2150      	movs	r1, #80	; 0x50
 800a16e:	4618      	mov	r0, r3
 800a170:	f000 f966 	bl	800a440 <TIM_ITRx_SetConfig>
      break;
 800a174:	e02c      	b.n	800a1d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	6859      	ldr	r1, [r3, #4]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	461a      	mov	r2, r3
 800a184:	f000 f92b 	bl	800a3de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2160      	movs	r1, #96	; 0x60
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 f956 	bl	800a440 <TIM_ITRx_SetConfig>
      break;
 800a194:	e01c      	b.n	800a1d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6859      	ldr	r1, [r3, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f000 f8ec 	bl	800a380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2140      	movs	r1, #64	; 0x40
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 f946 	bl	800a440 <TIM_ITRx_SetConfig>
      break;
 800a1b4:	e00c      	b.n	800a1d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	f000 f93d 	bl	800a440 <TIM_ITRx_SetConfig>
      break;
 800a1c6:	e003      	b.n	800a1d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a1cc:	e000      	b.n	800a1d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a1ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	ffceff88 	.word	0xffceff88
 800a1f0:	00100040 	.word	0x00100040
 800a1f4:	00100030 	.word	0x00100030
 800a1f8:	00100020 	.word	0x00100020

0800a1fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a40      	ldr	r2, [pc, #256]	; (800a360 <TIM_Base_SetConfig+0x114>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d013      	beq.n	800a28c <TIM_Base_SetConfig+0x40>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26a:	d00f      	beq.n	800a28c <TIM_Base_SetConfig+0x40>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a3d      	ldr	r2, [pc, #244]	; (800a364 <TIM_Base_SetConfig+0x118>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d00b      	beq.n	800a28c <TIM_Base_SetConfig+0x40>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a3c      	ldr	r2, [pc, #240]	; (800a368 <TIM_Base_SetConfig+0x11c>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d007      	beq.n	800a28c <TIM_Base_SetConfig+0x40>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a3b      	ldr	r2, [pc, #236]	; (800a36c <TIM_Base_SetConfig+0x120>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d003      	beq.n	800a28c <TIM_Base_SetConfig+0x40>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a3a      	ldr	r2, [pc, #232]	; (800a370 <TIM_Base_SetConfig+0x124>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d108      	bne.n	800a29e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a2f      	ldr	r2, [pc, #188]	; (800a360 <TIM_Base_SetConfig+0x114>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d01f      	beq.n	800a2e6 <TIM_Base_SetConfig+0x9a>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ac:	d01b      	beq.n	800a2e6 <TIM_Base_SetConfig+0x9a>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a2c      	ldr	r2, [pc, #176]	; (800a364 <TIM_Base_SetConfig+0x118>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d017      	beq.n	800a2e6 <TIM_Base_SetConfig+0x9a>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a2b      	ldr	r2, [pc, #172]	; (800a368 <TIM_Base_SetConfig+0x11c>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d013      	beq.n	800a2e6 <TIM_Base_SetConfig+0x9a>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a2a      	ldr	r2, [pc, #168]	; (800a36c <TIM_Base_SetConfig+0x120>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d00f      	beq.n	800a2e6 <TIM_Base_SetConfig+0x9a>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a29      	ldr	r2, [pc, #164]	; (800a370 <TIM_Base_SetConfig+0x124>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d00b      	beq.n	800a2e6 <TIM_Base_SetConfig+0x9a>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a28      	ldr	r2, [pc, #160]	; (800a374 <TIM_Base_SetConfig+0x128>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d007      	beq.n	800a2e6 <TIM_Base_SetConfig+0x9a>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a27      	ldr	r2, [pc, #156]	; (800a378 <TIM_Base_SetConfig+0x12c>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d003      	beq.n	800a2e6 <TIM_Base_SetConfig+0x9a>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a26      	ldr	r2, [pc, #152]	; (800a37c <TIM_Base_SetConfig+0x130>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d108      	bne.n	800a2f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	4313      	orrs	r3, r2
 800a304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a10      	ldr	r2, [pc, #64]	; (800a360 <TIM_Base_SetConfig+0x114>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d00f      	beq.n	800a344 <TIM_Base_SetConfig+0xf8>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a12      	ldr	r2, [pc, #72]	; (800a370 <TIM_Base_SetConfig+0x124>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00b      	beq.n	800a344 <TIM_Base_SetConfig+0xf8>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a11      	ldr	r2, [pc, #68]	; (800a374 <TIM_Base_SetConfig+0x128>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d007      	beq.n	800a344 <TIM_Base_SetConfig+0xf8>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a10      	ldr	r2, [pc, #64]	; (800a378 <TIM_Base_SetConfig+0x12c>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d003      	beq.n	800a344 <TIM_Base_SetConfig+0xf8>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a0f      	ldr	r2, [pc, #60]	; (800a37c <TIM_Base_SetConfig+0x130>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d103      	bne.n	800a34c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	691a      	ldr	r2, [r3, #16]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	615a      	str	r2, [r3, #20]
}
 800a352:	bf00      	nop
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	40010000 	.word	0x40010000
 800a364:	40000400 	.word	0x40000400
 800a368:	40000800 	.word	0x40000800
 800a36c:	40000c00 	.word	0x40000c00
 800a370:	40010400 	.word	0x40010400
 800a374:	40014000 	.word	0x40014000
 800a378:	40014400 	.word	0x40014400
 800a37c:	40014800 	.word	0x40014800

0800a380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	f023 0201 	bic.w	r2, r3, #1
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	011b      	lsls	r3, r3, #4
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f023 030a 	bic.w	r3, r3, #10
 800a3bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	621a      	str	r2, [r3, #32]
}
 800a3d2:	bf00      	nop
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b087      	sub	sp, #28
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	f023 0210 	bic.w	r2, r3, #16
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6a1b      	ldr	r3, [r3, #32]
 800a400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	031b      	lsls	r3, r3, #12
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	4313      	orrs	r3, r2
 800a412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a41a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	4313      	orrs	r3, r2
 800a424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	621a      	str	r2, [r3, #32]
}
 800a432:	bf00      	nop
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
	...

0800a440 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <TIM_ITRx_SetConfig+0x38>)
 800a454:	4013      	ands	r3, r2
 800a456:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	f043 0307 	orr.w	r3, r3, #7
 800a462:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	609a      	str	r2, [r3, #8]
}
 800a46a:	bf00      	nop
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	ffcfff8f 	.word	0xffcfff8f

0800a47c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	021a      	lsls	r2, r3, #8
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	609a      	str	r2, [r3, #8]
}
 800a4b0:	bf00      	nop
 800a4b2:	371c      	adds	r7, #28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d101      	bne.n	800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e06d      	b.n	800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a30      	ldr	r2, [pc, #192]	; (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d004      	beq.n	800a508 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a2f      	ldr	r2, [pc, #188]	; (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d108      	bne.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a50e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4313      	orrs	r3, r2
 800a518:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a520:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	4313      	orrs	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a20      	ldr	r2, [pc, #128]	; (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d022      	beq.n	800a584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a546:	d01d      	beq.n	800a584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a1d      	ldr	r2, [pc, #116]	; (800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d018      	beq.n	800a584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a1c      	ldr	r2, [pc, #112]	; (800a5c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d013      	beq.n	800a584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1a      	ldr	r2, [pc, #104]	; (800a5cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00e      	beq.n	800a584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a15      	ldr	r2, [pc, #84]	; (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d009      	beq.n	800a584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a16      	ldr	r2, [pc, #88]	; (800a5d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d004      	beq.n	800a584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a15      	ldr	r2, [pc, #84]	; (800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d10c      	bne.n	800a59e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a58a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	4313      	orrs	r3, r2
 800a594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40010400 	.word	0x40010400
 800a5c4:	40000400 	.word	0x40000400
 800a5c8:	40000800 	.word	0x40000800
 800a5cc:	40000c00 	.word	0x40000c00
 800a5d0:	40001800 	.word	0x40001800
 800a5d4:	40014000 	.word	0x40014000

0800a5d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <Write_Reg_BM1422AGMV>:
{
    return t_obj->io.ReadReg(t_obj->addr, t_reg, t_data, t_size);
}

static BM1422AGMV Write_Reg_BM1422AGMV(BM1422AGMVObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 800a614:	b590      	push	{r4, r7, lr}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	460b      	mov	r3, r1
 800a622:	817b      	strh	r3, [r7, #10]
    return t_obj->io.WriteReg(t_obj->addr, t_reg, t_data, t_size);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	695c      	ldr	r4, [r3, #20]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8818      	ldrh	r0, [r3, #0]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	b29b      	uxth	r3, r3
 800a630:	8979      	ldrh	r1, [r7, #10]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	47a0      	blx	r4
 800a636:	4603      	mov	r3, r0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd90      	pop	{r4, r7, pc}

0800a640 <Set_Reg_BM1422AGMV>:

static BM1422AGMV Set_Reg_BM1422AGMV(BM1422AGMVObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	607a      	str	r2, [r7, #4]
 800a64a:	603b      	str	r3, [r7, #0]
 800a64c:	460b      	mov	r3, r1
 800a64e:	817b      	strh	r3, [r7, #10]
	uint8_t t_res = e_BM1422AGMV_STATUS_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	75fb      	strb	r3, [r7, #23]
    t_res = Write_Reg_BM1422AGMV(t_obj, t_reg, t_data, t_size);
 800a654:	8979      	ldrh	r1, [r7, #10]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff ffda 	bl	800a614 <Write_Reg_BM1422AGMV>
 800a660:	4603      	mov	r3, r0
 800a662:	75fb      	strb	r3, [r7, #23]
    return t_res;
 800a664:	7dfb      	ldrb	r3, [r7, #23]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3718      	adds	r7, #24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <Set_Ioctx_BM1422AGMV>:

BM1422AGMV Set_Ioctx_BM1422AGMV(BM1422AGMVObject* t_obj, BM1422AGMVIOctx* t_ioctx)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
    if (!t_obj || !t_ioctx->IsDevReady || !t_ioctx->ReadReg || !t_ioctx->WriteReg ) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00b      	beq.n	800a696 <Set_Ioctx_BM1422AGMV+0x28>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d007      	beq.n	800a696 <Set_Ioctx_BM1422AGMV+0x28>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d003      	beq.n	800a696 <Set_Ioctx_BM1422AGMV+0x28>
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <Set_Ioctx_BM1422AGMV+0x2c>
        return e_BM1422AGMV_STATUS_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e018      	b.n	800a6cc <Set_Ioctx_BM1422AGMV+0x5e>
    }

    t_obj->io.Init       = t_ioctx->Init;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	605a      	str	r2, [r3, #4]
    t_obj->io.DeInit     = t_ioctx->DeInit;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	609a      	str	r2, [r3, #8]
    t_obj->io.IsDevReady = t_ioctx->IsDevReady;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	689a      	ldr	r2, [r3, #8]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	60da      	str	r2, [r3, #12]
    t_obj->io.ReadReg    = t_ioctx->ReadReg;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68da      	ldr	r2, [r3, #12]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	611a      	str	r2, [r3, #16]
    t_obj->io.WriteReg   = t_ioctx->WriteReg;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	691a      	ldr	r2, [r3, #16]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	615a      	str	r2, [r3, #20]
    t_obj->io.Wait       = t_ioctx->Wait;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	695a      	ldr	r2, [r3, #20]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	619a      	str	r2, [r3, #24]

    return e_BM1422AGMV_STATUS_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <Init_BM1422AGMV>:

BM1422AGMV Init_BM1422AGMV(BM1422AGMVObject* t_obj)			// Setting control register
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
	static uint8_t t_res  = e_BM1422AGMV_STATUS_OK;

    // Check Address
    t_res = e_BM1422AGMV_STATUS_ERROR;
 800a6e0:	4b2c      	ldr	r3, [pc, #176]	; (800a794 <Init_BM1422AGMV+0xbc>)
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	701a      	strb	r2, [r3, #0]
    t_obj->addr = BM1422AGMV_DEV_ADDR;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	221c      	movs	r2, #28
 800a6ea:	801a      	strh	r2, [r3, #0]
    if (t_obj->io.IsDevReady(t_obj->addr) == 0){
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	8812      	ldrh	r2, [r2, #0]
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4798      	blx	r3
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d102      	bne.n	800a704 <Init_BM1422AGMV+0x2c>
    	t_res = e_BM1422AGMV_STATUS_OK;
 800a6fe:	4b25      	ldr	r3, [pc, #148]	; (800a794 <Init_BM1422AGMV+0xbc>)
 800a700:	2200      	movs	r2, #0
 800a702:	701a      	strb	r2, [r3, #0]
    }

    // Configure Control
    if (t_res == e_BM1422AGMV_STATUS_OK) {
 800a704:	4b23      	ldr	r3, [pc, #140]	; (800a794 <Init_BM1422AGMV+0xbc>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d13c      	bne.n	800a786 <Init_BM1422AGMV+0xae>
    	uint8_t conf_1 = BM1422AGMV_CNTL1_VALUE;
 800a70c:	23d8      	movs	r3, #216	; 0xd8
 800a70e:	73fb      	strb	r3, [r7, #15]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL1_REG, &conf_1, BM1422AGMV_CONTROL_SIZE);
 800a710:	f107 020f 	add.w	r2, r7, #15
 800a714:	2301      	movs	r3, #1
 800a716:	211b      	movs	r1, #27
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7ff ff91 	bl	800a640 <Set_Reg_BM1422AGMV>
 800a71e:	4603      	mov	r3, r0
 800a720:	461a      	mov	r2, r3
 800a722:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <Init_BM1422AGMV+0xbc>)
 800a724:	701a      	strb	r2, [r3, #0]
        uint8_t conf_2 = BM1422AGMV_CNTL2_VALUE;
 800a726:	2300      	movs	r3, #0
 800a728:	73bb      	strb	r3, [r7, #14]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL2_REG, &conf_2, BM1422AGMV_CONTROL_SIZE);
 800a72a:	f107 020e 	add.w	r2, r7, #14
 800a72e:	2301      	movs	r3, #1
 800a730:	211c      	movs	r1, #28
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff ff84 	bl	800a640 <Set_Reg_BM1422AGMV>
 800a738:	4603      	mov	r3, r0
 800a73a:	461a      	mov	r2, r3
 800a73c:	4b15      	ldr	r3, [pc, #84]	; (800a794 <Init_BM1422AGMV+0xbc>)
 800a73e:	701a      	strb	r2, [r3, #0]
        uint8_t conf_4 = BM1422AGMV_CNTL4_H_VALUE;
 800a740:	2300      	movs	r3, #0
 800a742:	737b      	strb	r3, [r7, #13]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL4_REG_H, &conf_4, BM1422AGMV_CONTROL_SIZE);
 800a744:	f107 020d 	add.w	r2, r7, #13
 800a748:	2301      	movs	r3, #1
 800a74a:	215d      	movs	r1, #93	; 0x5d
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7ff ff77 	bl	800a640 <Set_Reg_BM1422AGMV>
 800a752:	4603      	mov	r3, r0
 800a754:	461a      	mov	r2, r3
 800a756:	4b0f      	ldr	r3, [pc, #60]	; (800a794 <Init_BM1422AGMV+0xbc>)
 800a758:	701a      	strb	r2, [r3, #0]
        uint8_t conf_5 = BM1422AGMV_CNTL4_L_VALUE;
 800a75a:	2300      	movs	r3, #0
 800a75c:	733b      	strb	r3, [r7, #12]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL4_REG_L, &conf_5, BM1422AGMV_CONTROL_SIZE);
 800a75e:	f107 020c 	add.w	r2, r7, #12
 800a762:	2301      	movs	r3, #1
 800a764:	215c      	movs	r1, #92	; 0x5c
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff ff6a 	bl	800a640 <Set_Reg_BM1422AGMV>
 800a76c:	4603      	mov	r3, r0
 800a76e:	461a      	mov	r2, r3
 800a770:	4b08      	ldr	r3, [pc, #32]	; (800a794 <Init_BM1422AGMV+0xbc>)
 800a772:	701a      	strb	r2, [r3, #0]


        // CNTL3 should be set at LAST //
        uint8_t conf_3 = BM1422AGMV_CNTL3_VALUE;
 800a774:	2340      	movs	r3, #64	; 0x40
 800a776:	72fb      	strb	r3, [r7, #11]
        Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL3_REG, &conf_3, BM1422AGMV_CONTROL_SIZE);
 800a778:	f107 020b 	add.w	r2, r7, #11
 800a77c:	2301      	movs	r3, #1
 800a77e:	211d      	movs	r1, #29
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7ff ff5d 	bl	800a640 <Set_Reg_BM1422AGMV>
    }

    return t_res;
 800a786:	4b03      	ldr	r3, [pc, #12]	; (800a794 <Init_BM1422AGMV+0xbc>)
 800a788:	781b      	ldrb	r3, [r3, #0]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	24000098 	.word	0x24000098

0800a798 <Get_Value_BM1422AGMV>:

BM1422AGMV Get_Value_BM1422AGMV(BM1422AGMVObject* t_obj)
{
 800a798:	b590      	push	{r4, r7, lr}
 800a79a:	b087      	sub	sp, #28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
    uint8_t t_res = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	75fb      	strb	r3, [r7, #23]
	uint8_t t_buff[6];

    t_res = t_obj->io.ReadReg(t_obj->addr, BM1422AGMV_DATAX_REG, t_buff, 6);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	691c      	ldr	r4, [r3, #16]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	8818      	ldrh	r0, [r3, #0]
 800a7ac:	f107 0208 	add.w	r2, r7, #8
 800a7b0:	2306      	movs	r3, #6
 800a7b2:	2110      	movs	r1, #16
 800a7b4:	47a0      	blx	r4
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	75fb      	strb	r3, [r7, #23]

    int16_t t_magX = (int16_t)(t_buff[0] | t_buff[1] << 8);
 800a7ba:	7a3b      	ldrb	r3, [r7, #8]
 800a7bc:	b21a      	sxth	r2, r3
 800a7be:	7a7b      	ldrb	r3, [r7, #9]
 800a7c0:	021b      	lsls	r3, r3, #8
 800a7c2:	b21b      	sxth	r3, r3
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	82bb      	strh	r3, [r7, #20]
    int16_t t_magY = (int16_t)(t_buff[2] | t_buff[3] << 8);
 800a7c8:	7abb      	ldrb	r3, [r7, #10]
 800a7ca:	b21a      	sxth	r2, r3
 800a7cc:	7afb      	ldrb	r3, [r7, #11]
 800a7ce:	021b      	lsls	r3, r3, #8
 800a7d0:	b21b      	sxth	r3, r3
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	827b      	strh	r3, [r7, #18]
    int16_t t_magZ = (int16_t)(t_buff[4] | t_buff[5] << 8);
 800a7d6:	7b3b      	ldrb	r3, [r7, #12]
 800a7d8:	b21a      	sxth	r2, r3
 800a7da:	7b7b      	ldrb	r3, [r7, #13]
 800a7dc:	021b      	lsls	r3, r3, #8
 800a7de:	b21b      	sxth	r3, r3
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	823b      	strh	r3, [r7, #16]

	/* NEED TO BE SCALED */
    t_obj->value.bm1422_mag_x = (float)t_magX;
 800a7e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	edc3 7a07 	vstr	s15, [r3, #28]
	t_obj->value.bm1422_mag_y = (float)t_magY;
 800a7f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	edc3 7a08 	vstr	s15, [r3, #32]
	t_obj->value.bm1422_mag_z = (float)t_magZ;
 800a808:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a80c:	ee07 3a90 	vmov	s15, r3
 800a810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return t_res;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	371c      	adds	r7, #28
 800a820:	46bd      	mov	sp, r7
 800a822:	bd90      	pop	{r4, r7, pc}

0800a824 <Assemble_SDO>:
	default:			return 0;		break;
	}
}

static void Assemble_SDO(SDOinfo* t_do_addr, uint8_t t_data_type)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	460b      	mov	r3, r1
 800a82e:	70fb      	strb	r3, [r7, #3]
	SDOinfo temp = t_data_type;
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	73fb      	strb	r3, [r7, #15]
 800a834:	7bfa      	ldrb	r2, [r7, #15]
	memcpy(t_do_addr, &temp, sizeof(SDOinfo));
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	701a      	strb	r2, [r3, #0]
}
 800a83a:	bf00      	nop
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <Assemble_PDO>:

static void Assemble_PDO(PDOinfo* t_do_addr, uint8_t t_data_type, uint8_t t_num_of_data)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	460b      	mov	r3, r1
 800a850:	70fb      	strb	r3, [r7, #3]
 800a852:	4613      	mov	r3, r2
 800a854:	70bb      	strb	r3, [r7, #2]
	PDOinfo temp = {t_data_type, t_num_of_data};
 800a856:	78fb      	ldrb	r3, [r7, #3]
 800a858:	733b      	strb	r3, [r7, #12]
 800a85a:	78bb      	ldrb	r3, [r7, #2]
 800a85c:	737b      	strb	r3, [r7, #13]
 800a85e:	89ba      	ldrh	r2, [r7, #12]
	memcpy(t_do_addr, &temp, sizeof(PDOinfo));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	801a      	strh	r2, [r3, #0]
}
 800a864:	bf00      	nop
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <Create_SDOTable_ObjDictionary>:
   |_/_/ \_\___/____|___|

*/

void Create_SDOTable_ObjDictionary()
{
 800a870:	b580      	push	{r7, lr}
 800a872:	af00      	add	r7, sp, #0
	//********************************************************************************//
	//						|	  Task_ID	  |			SDO_ID			| DATA_TYPE | //
	//********************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_STATE],  	    			UINT8_T);
 800a874:	2101      	movs	r1, #1
 800a876:	48c2      	ldr	r0, [pc, #776]	; (800ab80 <Create_SDOTable_ObjDictionary+0x310>)
 800a878:	f7ff ffd4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_STATE],  	    			UINT8_T);
 800a87c:	2101      	movs	r1, #1
 800a87e:	48c1      	ldr	r0, [pc, #772]	; (800ab84 <Create_SDOTable_ObjDictionary+0x314>)
 800a880:	f7ff ffd0 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_ROUTINE],  				UINT8_T);
 800a884:	2101      	movs	r1, #1
 800a886:	48c0      	ldr	r0, [pc, #768]	; (800ab88 <Create_SDOTable_ObjDictionary+0x318>)
 800a888:	f7ff ffcc 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_ROUTINE],  				UINT8_T);
 800a88c:	2101      	movs	r1, #1
 800a88e:	48bf      	ldr	r0, [pc, #764]	; (800ab8c <Create_SDOTable_ObjDictionary+0x31c>)
 800a890:	f7ff ffc8 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_NAME],  						STRING10);
 800a894:	2109      	movs	r1, #9
 800a896:	48be      	ldr	r0, [pc, #760]	; (800ab90 <Create_SDOTable_ObjDictionary+0x320>)
 800a898:	f7ff ffc4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_POLE_PAIR],  					UINT8_T);
 800a89c:	2101      	movs	r1, #1
 800a89e:	48bd      	ldr	r0, [pc, #756]	; (800ab94 <Create_SDOTable_ObjDictionary+0x324>)
 800a8a0:	f7ff ffc0 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ENCODER_RESOLUTION],  			UINT16_T);
 800a8a4:	2102      	movs	r1, #2
 800a8a6:	48bc      	ldr	r0, [pc, #752]	; (800ab98 <Create_SDOTable_ObjDictionary+0x328>)
 800a8a8:	f7ff ffbc 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GEAR_RATIO],  					FLOAT32_T);
 800a8ac:	2107      	movs	r1, #7
 800a8ae:	48bb      	ldr	r0, [pc, #748]	; (800ab9c <Create_SDOTable_ObjDictionary+0x32c>)
 800a8b0:	f7ff ffb8 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TORQUE_CONSTANT],  			FLOAT32_T);
 800a8b4:	2107      	movs	r1, #7
 800a8b6:	48ba      	ldr	r0, [pc, #744]	; (800aba0 <Create_SDOTable_ObjDictionary+0x330>)
 800a8b8:	f7ff ffb4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_VELOCITY_CONSTANT],  			FLOAT32_T);
 800a8bc:	2107      	movs	r1, #7
 800a8be:	48b9      	ldr	r0, [pc, #740]	; (800aba4 <Create_SDOTable_ObjDictionary+0x334>)
 800a8c0:	f7ff ffb0 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_PEAK_CURRENT_LIMIT],  			FLOAT32_T);
 800a8c4:	2107      	movs	r1, #7
 800a8c6:	48b8      	ldr	r0, [pc, #736]	; (800aba8 <Create_SDOTable_ObjDictionary+0x338>)
 800a8c8:	f7ff ffac 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CONTINUOUS_CURRENT_LIMIT],  	FLOAT32_T);
 800a8cc:	2107      	movs	r1, #7
 800a8ce:	48b7      	ldr	r0, [pc, #732]	; (800abac <Create_SDOTable_ObjDictionary+0x33c>)
 800a8d0:	f7ff ffa8 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MAX_VELOCITY],		  			FLOAT32_T);
 800a8d4:	2107      	movs	r1, #7
 800a8d6:	48b6      	ldr	r0, [pc, #728]	; (800abb0 <Create_SDOTable_ObjDictionary+0x340>)
 800a8d8:	f7ff ffa4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_COMMUTATION_DUTY],  			UINT16_T);
 800a8dc:	2102      	movs	r1, #2
 800a8de:	48b5      	ldr	r0, [pc, #724]	; (800abb4 <Create_SDOTable_ObjDictionary+0x344>)
 800a8e0:	f7ff ffa0 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_USER_DIRECTION],  				FLOAT32_T);
 800a8e4:	2107      	movs	r1, #7
 800a8e6:	48b4      	ldr	r0, [pc, #720]	; (800abb8 <Create_SDOTable_ObjDictionary+0x348>)
 800a8e8:	f7ff ff9c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ELEC_SYSTEM_ID_MAG],  			FLOAT32_T);
 800a8ec:	2107      	movs	r1, #7
 800a8ee:	48b3      	ldr	r0, [pc, #716]	; (800abbc <Create_SDOTable_ObjDictionary+0x34c>)
 800a8f0:	f7ff ff98 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_RESISTANCE],  		FLOAT32_T);
 800a8f4:	2107      	movs	r1, #7
 800a8f6:	48b2      	ldr	r0, [pc, #712]	; (800abc0 <Create_SDOTable_ObjDictionary+0x350>)
 800a8f8:	f7ff ff94 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_INDUCTANCE],  		FLOAT32_T);
 800a8fc:	2107      	movs	r1, #7
 800a8fe:	48b1      	ldr	r0, [pc, #708]	; (800abc4 <Create_SDOTable_ObjDictionary+0x354>)
 800a900:	f7ff ff90 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_VELOCITY],  			FLOAT32_T);
 800a904:	2107      	movs	r1, #7
 800a906:	48b0      	ldr	r0, [pc, #704]	; (800abc8 <Create_SDOTable_ObjDictionary+0x358>)
 800a908:	f7ff ff8c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_GAIN_PCTG],  			UINT8_T);
 800a90c:	2101      	movs	r1, #1
 800a90e:	48af      	ldr	r0, [pc, #700]	; (800abcc <Create_SDOTable_ObjDictionary+0x35c>)
 800a910:	f7ff ff88 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CURRENT_CTRL_BW_RAD],  		FLOAT32_T);
 800a914:	2107      	movs	r1, #7
 800a916:	48ae      	ldr	r0, [pc, #696]	; (800abd0 <Create_SDOTable_ObjDictionary+0x360>)
 800a918:	f7ff ff84 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_INERTIA],  					FLOAT32_T);
 800a91c:	2107      	movs	r1, #7
 800a91e:	48ad      	ldr	r0, [pc, #692]	; (800abd4 <Create_SDOTable_ObjDictionary+0x364>)
 800a920:	f7ff ff80 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_DAMPING_COEF],  				FLOAT32_T);
 800a924:	2107      	movs	r1, #7
 800a926:	48ac      	ldr	r0, [pc, #688]	; (800abd8 <Create_SDOTable_ObjDictionary+0x368>)
 800a928:	f7ff ff7c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_A],  				FLOAT32_T);
 800a92c:	2107      	movs	r1, #7
 800a92e:	48ab      	ldr	r0, [pc, #684]	; (800abdc <Create_SDOTable_ObjDictionary+0x36c>)
 800a930:	f7ff ff78 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_B],  				FLOAT32_T);
 800a934:	2107      	movs	r1, #7
 800a936:	48aa      	ldr	r0, [pc, #680]	; (800abe0 <Create_SDOTable_ObjDictionary+0x370>)
 800a938:	f7ff ff74 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_ID_INFO],  			FLOAT32_T);
 800a93c:	2107      	movs	r1, #7
 800a93e:	48a9      	ldr	r0, [pc, #676]	; (800abe4 <Create_SDOTable_ObjDictionary+0x374>)
 800a940:	f7ff ff70 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_LUT_INFO],  			FLOAT32_T);
 800a944:	2107      	movs	r1, #7
 800a946:	48a8      	ldr	r0, [pc, #672]	; (800abe8 <Create_SDOTable_ObjDictionary+0x378>)
 800a948:	f7ff ff6c 	bl	800a824 <Assemble_SDO>




	/*Joint Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_STATE],  					UINT8_T);
 800a94c:	2101      	movs	r1, #1
 800a94e:	48a7      	ldr	r0, [pc, #668]	; (800abec <Create_SDOTable_ObjDictionary+0x37c>)
 800a950:	f7ff ff68 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_STATE],  					UINT8_T);
 800a954:	2101      	movs	r1, #1
 800a956:	48a6      	ldr	r0, [pc, #664]	; (800abf0 <Create_SDOTable_ObjDictionary+0x380>)
 800a958:	f7ff ff64 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_ROUTINE], 					UINT8_T);
 800a95c:	2101      	movs	r1, #1
 800a95e:	48a5      	ldr	r0, [pc, #660]	; (800abf4 <Create_SDOTable_ObjDictionary+0x384>)
 800a960:	f7ff ff60 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_ROUTINE], 					UINT8_T);
 800a964:	2101      	movs	r1, #1
 800a966:	48a4      	ldr	r0, [pc, #656]	; (800abf8 <Create_SDOTable_ObjDictionary+0x388>)
 800a968:	f7ff ff5c 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR_LENGTH],	 		UINT8_T);
 800a96c:	2101      	movs	r1, #1
 800a96e:	48a3      	ldr	r0, [pc, #652]	; (800abfc <Create_SDOTable_ObjDictionary+0x38c>)
 800a970:	f7ff ff58 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR_LENGTH],		UINT8_T);
 800a974:	2101      	movs	r1, #1
 800a976:	48a2      	ldr	r0, [pc, #648]	; (800ac00 <Create_SDOTable_ObjDictionary+0x390>)
 800a978:	f7ff ff54 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR],	  			FLOAT32_T);
 800a97c:	2107      	movs	r1, #7
 800a97e:	48a1      	ldr	r0, [pc, #644]	; (800ac04 <Create_SDOTable_ObjDictionary+0x394>)
 800a980:	f7ff ff50 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR],	  			FLOAT32_T);
 800a984:	2107      	movs	r1, #7
 800a986:	48a0      	ldr	r0, [pc, #640]	; (800ac08 <Create_SDOTable_ObjDictionary+0x398>)
 800a988:	f7ff ff4c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_SATURATION],	  			FLOAT32_T);
 800a98c:	2107      	movs	r1, #7
 800a98e:	489f      	ldr	r0, [pc, #636]	; (800ac0c <Create_SDOTable_ObjDictionary+0x39c>)
 800a990:	f7ff ff48 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_STIFFNESS],	  	FLOAT32_T);
 800a994:	2107      	movs	r1, #7
 800a996:	489e      	ldr	r0, [pc, #632]	; (800ac10 <Create_SDOTable_ObjDictionary+0x3a0>)
 800a998:	f7ff ff44 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_DAMPER],	  		FLOAT32_T);
 800a99c:	2107      	movs	r1, #7
 800a99e:	489d      	ldr	r0, [pc, #628]	; (800ac14 <Create_SDOTable_ObjDictionary+0x3a4>)
 800a9a0:	f7ff ff40 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_PERIODIC_SIG_INFO],	FLOAT32_T);
 800a9a4:	2107      	movs	r1, #7
 800a9a6:	489c      	ldr	r0, [pc, #624]	; (800ac18 <Create_SDOTable_ObjDictionary+0x3a8>)
 800a9a8:	f7ff ff3c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_PERIODIC_SIG_INFO],	FLOAT32_T);
 800a9ac:	2107      	movs	r1, #7
 800a9ae:	489b      	ldr	r0, [pc, #620]	; (800ac1c <Create_SDOTable_ObjDictionary+0x3ac>)
 800a9b0:	f7ff ff38 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_BW],						FLOAT32_T);
 800a9b4:	2107      	movs	r1, #7
 800a9b6:	489a      	ldr	r0, [pc, #616]	; (800ac20 <Create_SDOTable_ObjDictionary+0x3b0>)
 800a9b8:	f7ff ff34 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_NUM],					FLOAT32_T);
 800a9bc:	2107      	movs	r1, #7
 800a9be:	4899      	ldr	r0, [pc, #612]	; (800ac24 <Create_SDOTable_ObjDictionary+0x3b4>)
 800a9c0:	f7ff ff30 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_DEN],					FLOAT32_T);
 800a9c4:	2107      	movs	r1, #7
 800a9c6:	4898      	ldr	r0, [pc, #608]	; (800ac28 <Create_SDOTable_ObjDictionary+0x3b8>)
 800a9c8:	f7ff ff2c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_NUM],					FLOAT32_T);
 800a9cc:	2107      	movs	r1, #7
 800a9ce:	4897      	ldr	r0, [pc, #604]	; (800ac2c <Create_SDOTable_ObjDictionary+0x3bc>)
 800a9d0:	f7ff ff28 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_DEN],					FLOAT32_T);
 800a9d4:	2107      	movs	r1, #7
 800a9d6:	4896      	ldr	r0, [pc, #600]	; (800ac30 <Create_SDOTable_ObjDictionary+0x3c0>)
 800a9d8:	f7ff ff24 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_SATURATION],				FLOAT32_T);
 800a9dc:	2107      	movs	r1, #7
 800a9de:	4895      	ldr	r0, [pc, #596]	; (800ac34 <Create_SDOTable_ObjDictionary+0x3c4>)
 800a9e0:	f7ff ff20 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_BW],				FLOAT32_T);
 800a9e4:	2107      	movs	r1, #7
 800a9e6:	4894      	ldr	r0, [pc, #592]	; (800ac38 <Create_SDOTable_ObjDictionary+0x3c8>)
 800a9e8:	f7ff ff1c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_P_GAIN],			FLOAT32_T);
 800a9ec:	2107      	movs	r1, #7
 800a9ee:	4893      	ldr	r0, [pc, #588]	; (800ac3c <Create_SDOTable_ObjDictionary+0x3cc>)
 800a9f0:	f7ff ff18 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_I_GAIN],			FLOAT32_T);
 800a9f4:	2107      	movs	r1, #7
 800a9f6:	4892      	ldr	r0, [pc, #584]	; (800ac40 <Create_SDOTable_ObjDictionary+0x3d0>)
 800a9f8:	f7ff ff14 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_INPUT_PENALTY],	FLOAT32_T);
 800a9fc:	2107      	movs	r1, #7
 800a9fe:	4891      	ldr	r0, [pc, #580]	; (800ac44 <Create_SDOTable_ObjDictionary+0x3d4>)
 800aa00:	f7ff ff10 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_P_GAIN],			FLOAT32_T);
 800aa04:	2107      	movs	r1, #7
 800aa06:	4890      	ldr	r0, [pc, #576]	; (800ac48 <Create_SDOTable_ObjDictionary+0x3d8>)
 800aa08:	f7ff ff0c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_D_GAIN],			FLOAT32_T);
 800aa0c:	2107      	movs	r1, #7
 800aa0e:	488f      	ldr	r0, [pc, #572]	; (800ac4c <Create_SDOTable_ObjDictionary+0x3dc>)
 800aa10:	f7ff ff08 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_MID_CTRL_SATURATION],			FLOAT32_T);
 800aa14:	2107      	movs	r1, #7
 800aa16:	488e      	ldr	r0, [pc, #568]	; (800ac50 <Create_SDOTable_ObjDictionary+0x3e0>)
 800aa18:	f7ff ff04 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_INCENCODER_SET_OFFSET],		UINT8_T);
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	488d      	ldr	r0, [pc, #564]	; (800ac54 <Create_SDOTable_ObjDictionary+0x3e4>)
 800aa20:	f7ff ff00 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_SET_OFFSET],		UINT8_T);
 800aa24:	2101      	movs	r1, #1
 800aa26:	488c      	ldr	r0, [pc, #560]	; (800ac58 <Create_SDOTable_ObjDictionary+0x3e8>)
 800aa28:	f7ff fefc 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_CHANGE_DIRECTION],	UINT8_T);
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	488b      	ldr	r0, [pc, #556]	; (800ac5c <Create_SDOTable_ObjDictionary+0x3ec>)
 800aa30:	f7ff fef8 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFFNESS],				FLOAT32_T);
 800aa34:	2107      	movs	r1, #7
 800aa36:	488a      	ldr	r0, [pc, #552]	; (800ac60 <Create_SDOTable_ObjDictionary+0x3f0>)
 800aa38:	f7ff fef4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPER],					FLOAT32_T);
 800aa3c:	2107      	movs	r1, #7
 800aa3e:	4889      	ldr	r0, [pc, #548]	; (800ac64 <Create_SDOTable_ObjDictionary+0x3f4>)
 800aa40:	f7ff fef0 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPED_RANGE],				FLOAT32_T);
 800aa44:	2107      	movs	r1, #7
 800aa46:	4888      	ldr	r0, [pc, #544]	; (800ac68 <Create_SDOTable_ObjDictionary+0x3f8>)
 800aa48:	f7ff feec 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFF_RANGE],				FLOAT32_T);
 800aa4c:	2107      	movs	r1, #7
 800aa4e:	4887      	ldr	r0, [pc, #540]	; (800ac6c <Create_SDOTable_ObjDictionary+0x3fc>)
 800aa50:	f7ff fee8 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_UPPER_LIMIT],			UINT8_T);
 800aa54:	2101      	movs	r1, #1
 800aa56:	4886      	ldr	r0, [pc, #536]	; (800ac70 <Create_SDOTable_ObjDictionary+0x400>)
 800aa58:	f7ff fee4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_LOWER_LIMIT],			UINT8_T);
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	4885      	ldr	r0, [pc, #532]	; (800ac74 <Create_SDOTable_ObjDictionary+0x404>)
 800aa60:	f7ff fee0 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_SATURATION],				FLOAT32_T);
 800aa64:	2107      	movs	r1, #7
 800aa66:	4884      	ldr	r0, [pc, #528]	; (800ac78 <Create_SDOTable_ObjDictionary+0x408>)
 800aa68:	f7ff fedc 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_NUM],				FLOAT32_T);
 800aa6c:	2107      	movs	r1, #7
 800aa6e:	4883      	ldr	r0, [pc, #524]	; (800ac7c <Create_SDOTable_ObjDictionary+0x40c>)
 800aa70:	f7ff fed8 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_DEN],				FLOAT32_T);
 800aa74:	2107      	movs	r1, #7
 800aa76:	4882      	ldr	r0, [pc, #520]	; (800ac80 <Create_SDOTable_ObjDictionary+0x410>)
 800aa78:	f7ff fed4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR],			UINT8_T);
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	4881      	ldr	r0, [pc, #516]	; (800ac84 <Create_SDOTable_ObjDictionary+0x414>)
 800aa80:	f7ff fed0 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR_LEAD_LAG],	FLOAT32_T);
 800aa84:	2107      	movs	r1, #7
 800aa86:	4880      	ldr	r0, [pc, #512]	; (800ac88 <Create_SDOTable_ObjDictionary+0x418>)
 800aa88:	f7ff fecc 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ENCODER_RESOLUTION],			UINT16_T);
 800aa8c:	2102      	movs	r1, #2
 800aa8e:	487f      	ldr	r0, [pc, #508]	; (800ac8c <Create_SDOTable_ObjDictionary+0x41c>)
 800aa90:	f7ff fec8 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_SBS_INFO],			FLOAT32_T);
 800aa94:	2107      	movs	r1, #7
 800aa96:	487e      	ldr	r0, [pc, #504]	; (800ac90 <Create_SDOTable_ObjDictionary+0x420>)
 800aa98:	f7ff fec4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_VERIFICATION_MAG],	FLOAT32_T);
 800aa9c:	2107      	movs	r1, #7
 800aa9e:	487d      	ldr	r0, [pc, #500]	; (800ac94 <Create_SDOTable_ObjDictionary+0x424>)
 800aaa0:	f7ff fec0 	bl	800a824 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_MODE_IDX],	UINT8_T);
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	487c      	ldr	r0, [pc, #496]	; (800ac98 <Create_SDOTable_ObjDictionary+0x428>)
 800aaa8:	f7ff febc 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_TMAX],		INT16_T);
 800aaac:	2105      	movs	r1, #5
 800aaae:	487b      	ldr	r0, [pc, #492]	; (800ac9c <Create_SDOTable_ObjDictionary+0x42c>)
 800aab0:	f7ff feb8 	bl	800a824 <Assemble_SDO>



	/*MSG Handler Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_STATE],  	    UINT8_T);
 800aab4:	2101      	movs	r1, #1
 800aab6:	487a      	ldr	r0, [pc, #488]	; (800aca0 <Create_SDOTable_ObjDictionary+0x430>)
 800aab8:	f7ff feb4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_STATE],  	    UINT8_T);
 800aabc:	2101      	movs	r1, #1
 800aabe:	4879      	ldr	r0, [pc, #484]	; (800aca4 <Create_SDOTable_ObjDictionary+0x434>)
 800aac0:	f7ff feb0 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_ROUTINE],  		UINT8_T);
 800aac4:	2101      	movs	r1, #1
 800aac6:	4878      	ldr	r0, [pc, #480]	; (800aca8 <Create_SDOTable_ObjDictionary+0x438>)
 800aac8:	f7ff feac 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_ROUTINE],  		UINT8_T);
 800aacc:	2101      	movs	r1, #1
 800aace:	4877      	ldr	r0, [pc, #476]	; (800acac <Create_SDOTable_ObjDictionary+0x43c>)
 800aad0:	f7ff fea8 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_PDO_LIST], 			UINT16_T);
 800aad4:	2102      	movs	r1, #2
 800aad6:	4876      	ldr	r0, [pc, #472]	; (800acb0 <Create_SDOTable_ObjDictionary+0x440>)
 800aad8:	f7ff fea4 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_MS_ENUM],  			UINT8_T);
 800aadc:	2101      	movs	r1, #1
 800aade:	4875      	ldr	r0, [pc, #468]	; (800acb4 <Create_SDOTable_ObjDictionary+0x444>)
 800aae0:	f7ff fea0 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_ONOFF],  	UINT8_T);
 800aae4:	2101      	movs	r1, #1
 800aae6:	4874      	ldr	r0, [pc, #464]	; (800acb8 <Create_SDOTable_ObjDictionary+0x448>)
 800aae8:	f7ff fe9c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_COMMAND],  	UINT8_T);
 800aaec:	2101      	movs	r1, #1
 800aaee:	4873      	ldr	r0, [pc, #460]	; (800acbc <Create_SDOTable_ObjDictionary+0x44c>)
 800aaf0:	f7ff fe98 	bl	800a824 <Assemble_SDO>

	/*IMU Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_STATE],  		UINT8_T);
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	4872      	ldr	r0, [pc, #456]	; (800acc0 <Create_SDOTable_ObjDictionary+0x450>)
 800aaf8:	f7ff fe94 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_STATE],  		UINT8_T);
 800aafc:	2101      	movs	r1, #1
 800aafe:	4871      	ldr	r0, [pc, #452]	; (800acc4 <Create_SDOTable_ObjDictionary+0x454>)
 800ab00:	f7ff fe90 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_ROUTINE],  	    UINT8_T);
 800ab04:	2101      	movs	r1, #1
 800ab06:	4870      	ldr	r0, [pc, #448]	; (800acc8 <Create_SDOTable_ObjDictionary+0x458>)
 800ab08:	f7ff fe8c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_ROUTINE],  	    UINT8_T);
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	486f      	ldr	r0, [pc, #444]	; (800accc <Create_SDOTable_ObjDictionary+0x45c>)
 800ab10:	f7ff fe88 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_FOR_TEST],  			UINT16_T);
 800ab14:	2102      	movs	r1, #2
 800ab16:	486e      	ldr	r0, [pc, #440]	; (800acd0 <Create_SDOTable_ObjDictionary+0x460>)
 800ab18:	f7ff fe84 	bl	800a824 <Assemble_SDO>


	/*SYSMNGT Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_STATE],  	UINT8_T);
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	486d      	ldr	r0, [pc, #436]	; (800acd4 <Create_SDOTable_ObjDictionary+0x464>)
 800ab20:	f7ff fe80 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_STATE],  	UINT8_T);
 800ab24:	2101      	movs	r1, #1
 800ab26:	486c      	ldr	r0, [pc, #432]	; (800acd8 <Create_SDOTable_ObjDictionary+0x468>)
 800ab28:	f7ff fe7c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_ROUTINE],  	UINT8_T);
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	486b      	ldr	r0, [pc, #428]	; (800acdc <Create_SDOTable_ObjDictionary+0x46c>)
 800ab30:	f7ff fe78 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_ROUTINE],  	UINT8_T);
 800ab34:	2101      	movs	r1, #1
 800ab36:	486a      	ldr	r0, [pc, #424]	; (800ace0 <Create_SDOTable_ObjDictionary+0x470>)
 800ab38:	f7ff fe74 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_FOR_TEST],  		UINT16_T);
 800ab3c:	2102      	movs	r1, #2
 800ab3e:	4869      	ldr	r0, [pc, #420]	; (800ace4 <Create_SDOTable_ObjDictionary+0x474>)
 800ab40:	f7ff fe70 	bl	800a824 <Assemble_SDO>


	/*EXTDEV Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_STATE],  		UINT8_T);
 800ab44:	2101      	movs	r1, #1
 800ab46:	4868      	ldr	r0, [pc, #416]	; (800ace8 <Create_SDOTable_ObjDictionary+0x478>)
 800ab48:	f7ff fe6c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_STATE],  		UINT8_T);
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	4867      	ldr	r0, [pc, #412]	; (800acec <Create_SDOTable_ObjDictionary+0x47c>)
 800ab50:	f7ff fe68 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_ROUTINE],  	UINT8_T);
 800ab54:	2101      	movs	r1, #1
 800ab56:	4866      	ldr	r0, [pc, #408]	; (800acf0 <Create_SDOTable_ObjDictionary+0x480>)
 800ab58:	f7ff fe64 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_ROUTINE],  	UINT8_T);
 800ab5c:	2101      	movs	r1, #1
 800ab5e:	4865      	ldr	r0, [pc, #404]	; (800acf4 <Create_SDOTable_ObjDictionary+0x484>)
 800ab60:	f7ff fe60 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_LENGTH],  	FLOAT32_T);
 800ab64:	2107      	movs	r1, #7
 800ab66:	4864      	ldr	r0, [pc, #400]	; (800acf8 <Create_SDOTable_ObjDictionary+0x488>)
 800ab68:	f7ff fe5c 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_DIRECT],  	UINT8_T);
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	4863      	ldr	r0, [pc, #396]	; (800acfc <Create_SDOTable_ObjDictionary+0x48c>)
 800ab70:	f7ff fe58 	bl	800a824 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_FOR_TEST],  		INT16_T);
 800ab74:	2105      	movs	r1, #5
 800ab76:	4862      	ldr	r0, [pc, #392]	; (800ad00 <Create_SDOTable_ObjDictionary+0x490>)
 800ab78:	f7ff fe54 	bl	800a824 <Assemble_SDO>
}
 800ab7c:	bf00      	nop
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	240002e8 	.word	0x240002e8
 800ab84:	240002e9 	.word	0x240002e9
 800ab88:	240002ea 	.word	0x240002ea
 800ab8c:	240002eb 	.word	0x240002eb
 800ab90:	240002ec 	.word	0x240002ec
 800ab94:	240002ed 	.word	0x240002ed
 800ab98:	240002ee 	.word	0x240002ee
 800ab9c:	240002ef 	.word	0x240002ef
 800aba0:	240002f0 	.word	0x240002f0
 800aba4:	240002f1 	.word	0x240002f1
 800aba8:	240002f2 	.word	0x240002f2
 800abac:	240002f3 	.word	0x240002f3
 800abb0:	240002f4 	.word	0x240002f4
 800abb4:	240002f5 	.word	0x240002f5
 800abb8:	240002f6 	.word	0x240002f6
 800abbc:	240002f7 	.word	0x240002f7
 800abc0:	240002f8 	.word	0x240002f8
 800abc4:	240002f9 	.word	0x240002f9
 800abc8:	240002fa 	.word	0x240002fa
 800abcc:	240002fb 	.word	0x240002fb
 800abd0:	240002fc 	.word	0x240002fc
 800abd4:	240002fd 	.word	0x240002fd
 800abd8:	240002fe 	.word	0x240002fe
 800abdc:	240002ff 	.word	0x240002ff
 800abe0:	24000300 	.word	0x24000300
 800abe4:	24000301 	.word	0x24000301
 800abe8:	24000302 	.word	0x24000302
 800abec:	24000324 	.word	0x24000324
 800abf0:	24000325 	.word	0x24000325
 800abf4:	24000326 	.word	0x24000326
 800abf8:	24000327 	.word	0x24000327
 800abfc:	24000328 	.word	0x24000328
 800ac00:	24000329 	.word	0x24000329
 800ac04:	2400032a 	.word	0x2400032a
 800ac08:	2400032b 	.word	0x2400032b
 800ac0c:	2400032c 	.word	0x2400032c
 800ac10:	2400032d 	.word	0x2400032d
 800ac14:	2400032e 	.word	0x2400032e
 800ac18:	24000330 	.word	0x24000330
 800ac1c:	24000331 	.word	0x24000331
 800ac20:	24000332 	.word	0x24000332
 800ac24:	24000333 	.word	0x24000333
 800ac28:	24000334 	.word	0x24000334
 800ac2c:	24000335 	.word	0x24000335
 800ac30:	24000336 	.word	0x24000336
 800ac34:	24000337 	.word	0x24000337
 800ac38:	24000338 	.word	0x24000338
 800ac3c:	24000339 	.word	0x24000339
 800ac40:	2400033a 	.word	0x2400033a
 800ac44:	2400033b 	.word	0x2400033b
 800ac48:	2400033c 	.word	0x2400033c
 800ac4c:	2400033d 	.word	0x2400033d
 800ac50:	2400033e 	.word	0x2400033e
 800ac54:	2400033f 	.word	0x2400033f
 800ac58:	24000340 	.word	0x24000340
 800ac5c:	24000341 	.word	0x24000341
 800ac60:	24000342 	.word	0x24000342
 800ac64:	24000343 	.word	0x24000343
 800ac68:	24000344 	.word	0x24000344
 800ac6c:	24000345 	.word	0x24000345
 800ac70:	24000346 	.word	0x24000346
 800ac74:	24000347 	.word	0x24000347
 800ac78:	24000348 	.word	0x24000348
 800ac7c:	24000349 	.word	0x24000349
 800ac80:	2400034a 	.word	0x2400034a
 800ac84:	2400034b 	.word	0x2400034b
 800ac88:	2400034c 	.word	0x2400034c
 800ac8c:	2400034d 	.word	0x2400034d
 800ac90:	2400034e 	.word	0x2400034e
 800ac94:	2400034f 	.word	0x2400034f
 800ac98:	24000354 	.word	0x24000354
 800ac9c:	24000355 	.word	0x24000355
 800aca0:	24000360 	.word	0x24000360
 800aca4:	24000361 	.word	0x24000361
 800aca8:	24000362 	.word	0x24000362
 800acac:	24000363 	.word	0x24000363
 800acb0:	24000364 	.word	0x24000364
 800acb4:	24000365 	.word	0x24000365
 800acb8:	24000366 	.word	0x24000366
 800acbc:	24000367 	.word	0x24000367
 800acc0:	2400039c 	.word	0x2400039c
 800acc4:	2400039d 	.word	0x2400039d
 800acc8:	2400039e 	.word	0x2400039e
 800accc:	2400039f 	.word	0x2400039f
 800acd0:	240003a0 	.word	0x240003a0
 800acd4:	240003d8 	.word	0x240003d8
 800acd8:	240003d9 	.word	0x240003d9
 800acdc:	240003da 	.word	0x240003da
 800ace0:	240003db 	.word	0x240003db
 800ace4:	240003dc 	.word	0x240003dc
 800ace8:	24000414 	.word	0x24000414
 800acec:	24000415 	.word	0x24000415
 800acf0:	24000416 	.word	0x24000416
 800acf4:	24000417 	.word	0x24000417
 800acf8:	24000418 	.word	0x24000418
 800acfc:	24000419 	.word	0x24000419
 800ad00:	2400041a 	.word	0x2400041a

0800ad04 <Create_PDOTable_ObjDictionary>:


void Create_PDOTable_ObjDictionary()
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	af00      	add	r7, sp, #0
	//**************************************************************************************************//
	//							   |	  Task_ID	  |				PDO_ID				| DATA_TYPE | #_of_DATA //
	//**************************************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_CURRENT],  			UINT16_T, 	 	3);
 800ad08:	2203      	movs	r2, #3
 800ad0a:	2102      	movs	r1, #2
 800ad0c:	48bd      	ldr	r0, [pc, #756]	; (800b004 <Create_PDOTable_ObjDictionary+0x300>)
 800ad0e:	f7ff fd9a 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_VOLTAGE],  			UINT16_T,  		3);
 800ad12:	2203      	movs	r2, #3
 800ad14:	2102      	movs	r1, #2
 800ad16:	48bc      	ldr	r0, [pc, #752]	; (800b008 <Create_PDOTable_ObjDictionary+0x304>)
 800ad18:	f7ff fd95 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_POSITION],  					FLOAT32_T,  	1);
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	2107      	movs	r1, #7
 800ad20:	48ba      	ldr	r0, [pc, #744]	; (800b00c <Create_PDOTable_ObjDictionary+0x308>)
 800ad22:	f7ff fd90 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VELOCITY],  					INT32_T,  		2);
 800ad26:	2202      	movs	r2, #2
 800ad28:	2106      	movs	r1, #6
 800ad2a:	48b9      	ldr	r0, [pc, #740]	; (800b010 <Create_PDOTable_ObjDictionary+0x30c>)
 800ad2c:	f7ff fd8b 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CLARKE_OUT],  				INT32_T,  		2);
 800ad30:	2202      	movs	r2, #2
 800ad32:	2106      	movs	r1, #6
 800ad34:	48b7      	ldr	r0, [pc, #732]	; (800b014 <Create_PDOTable_ObjDictionary+0x310>)
 800ad36:	f7ff fd86 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PARK_OUT],  					FLOAT32_T,  	3);
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	2107      	movs	r1, #7
 800ad3e:	48b6      	ldr	r0, [pc, #728]	; (800b018 <Create_PDOTable_ObjDictionary+0x314>)
 800ad40:	f7ff fd81 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VOLTAGE_IN],	    			FLOAT32_T,  	3);
 800ad44:	2203      	movs	r2, #3
 800ad46:	2107      	movs	r1, #7
 800ad48:	48b4      	ldr	r0, [pc, #720]	; (800b01c <Create_PDOTable_ObjDictionary+0x318>)
 800ad4a:	f7ff fd7c 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ELEC_ANGLE],	    			UINT16_T,  		1);
 800ad4e:	2201      	movs	r2, #1
 800ad50:	2102      	movs	r1, #2
 800ad52:	48b3      	ldr	r0, [pc, #716]	; (800b020 <Create_PDOTable_ObjDictionary+0x31c>)
 800ad54:	f7ff fd77 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PRBS_DATA],	    			FLOAT32_T, 		2);
 800ad58:	2202      	movs	r2, #2
 800ad5a:	2107      	movs	r1, #7
 800ad5c:	48b1      	ldr	r0, [pc, #708]	; (800b024 <Create_PDOTable_ObjDictionary+0x320>)
 800ad5e:	f7ff fd72 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_RAW_CURRENT],	    			INT32_T,  		3);
 800ad62:	2203      	movs	r2, #3
 800ad64:	2106      	movs	r1, #6
 800ad66:	48b0      	ldr	r0, [pc, #704]	; (800b028 <Create_PDOTable_ObjDictionary+0x324>)
 800ad68:	f7ff fd6d 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_KF_CURRENT],	    			FLOAT32_T, 		3);
 800ad6c:	2203      	movs	r2, #3
 800ad6e:	2107      	movs	r1, #7
 800ad70:	48ae      	ldr	r0, [pc, #696]	; (800b02c <Create_PDOTable_ObjDictionary+0x328>)
 800ad72:	f7ff fd68 	bl	800a846 <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT],			FLOAT32_T, 		1);
 800ad76:	2201      	movs	r2, #1
 800ad78:	2107      	movs	r1, #7
 800ad7a:	48ad      	ldr	r0, [pc, #692]	; (800b030 <Create_PDOTable_ObjDictionary+0x32c>)
 800ad7c:	f7ff fd63 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CURRENT_OUTPUT],  			FLOAT32_T,  	1);
 800ad80:	2201      	movs	r2, #1
 800ad82:	2107      	movs	r1, #7
 800ad84:	48ab      	ldr	r0, [pc, #684]	; (800b034 <Create_PDOTable_ObjDictionary+0x330>)
 800ad86:	f7ff fd5e 	bl	800a846 <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_AUXILIARY_INPUT],  			FLOAT32_T,  	1);
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	2107      	movs	r1, #7
 800ad8e:	48aa      	ldr	r0, [pc, #680]	; (800b038 <Create_PDOTable_ObjDictionary+0x334>)
 800ad90:	f7ff fd59 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_LOW_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 800ad94:	2201      	movs	r2, #1
 800ad96:	2107      	movs	r1, #7
 800ad98:	48a8      	ldr	r0, [pc, #672]	; (800b03c <Create_PDOTable_ObjDictionary+0x338>)
 800ad9a:	f7ff fd54 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_FRICTION_COMPENSATOR_INPUT],  FLOAT32_T,  	1);
 800ad9e:	2201      	movs	r2, #1
 800ada0:	2107      	movs	r1, #7
 800ada2:	48a7      	ldr	r0, [pc, #668]	; (800b040 <Create_PDOTable_ObjDictionary+0x33c>)
 800ada4:	f7ff fd4f 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 800ada8:	2201      	movs	r2, #1
 800adaa:	2107      	movs	r1, #7
 800adac:	48a5      	ldr	r0, [pc, #660]	; (800b044 <Create_PDOTable_ObjDictionary+0x340>)
 800adae:	f7ff fd4a 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_IRC_INPUT],					FLOAT32_T, 		1);
 800adb2:	2201      	movs	r2, #1
 800adb4:	2107      	movs	r1, #7
 800adb6:	48a4      	ldr	r0, [pc, #656]	; (800b048 <Create_PDOTable_ObjDictionary+0x344>)
 800adb8:	f7ff fd45 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_CTRL_INPUT],  			FLOAT32_T,  	1);
 800adbc:	2201      	movs	r2, #1
 800adbe:	2107      	movs	r1, #7
 800adc0:	48a2      	ldr	r0, [pc, #648]	; (800b04c <Create_PDOTable_ObjDictionary+0x348>)
 800adc2:	f7ff fd40 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ANALYZER_INPUT],				FLOAT32_T, 		1);
 800adc6:	2201      	movs	r2, #1
 800adc8:	2107      	movs	r1, #7
 800adca:	48a1      	ldr	r0, [pc, #644]	; (800b050 <Create_PDOTable_ObjDictionary+0x34c>)
 800adcc:	f7ff fd3b 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_COMMUTATION_STEP],			UINT8_T, 		1);
 800add0:	2201      	movs	r2, #1
 800add2:	2101      	movs	r1, #1
 800add4:	489f      	ldr	r0, [pc, #636]	; (800b054 <Create_PDOTable_ObjDictionary+0x350>)
 800add6:	f7ff fd36 	bl	800a846 <Assemble_PDO>


	/*Joint Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_LOOP_CNT],			UINT32_T, 		1);
 800adda:	2201      	movs	r2, #1
 800addc:	2103      	movs	r1, #3
 800adde:	489e      	ldr	r0, [pc, #632]	; (800b058 <Create_PDOTable_ObjDictionary+0x354>)
 800ade0:	f7ff fd31 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_POSITION],  		FLOAT32_T,  	1);
 800ade4:	2201      	movs	r2, #1
 800ade6:	2107      	movs	r1, #7
 800ade8:	489c      	ldr	r0, [pc, #624]	; (800b05c <Create_PDOTable_ObjDictionary+0x358>)
 800adea:	f7ff fd2c 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_VELOCITY],  		FLOAT32_T,  	1);
 800adee:	2201      	movs	r2, #1
 800adf0:	2107      	movs	r1, #7
 800adf2:	489b      	ldr	r0, [pc, #620]	; (800b060 <Create_PDOTable_ObjDictionary+0x35c>)
 800adf4:	f7ff fd27 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_POSITION], 	FLOAT32_T, 		1);
 800adf8:	2201      	movs	r2, #1
 800adfa:	2107      	movs	r1, #7
 800adfc:	4899      	ldr	r0, [pc, #612]	; (800b064 <Create_PDOTable_ObjDictionary+0x360>)
 800adfe:	f7ff fd22 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_VELOCITY_RAW], FLOAT32_T,  	1);
 800ae02:	2201      	movs	r2, #1
 800ae04:	2107      	movs	r1, #7
 800ae06:	4898      	ldr	r0, [pc, #608]	; (800b068 <Create_PDOTable_ObjDictionary+0x364>)
 800ae08:	f7ff fd1d 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_SYSTEM_ID_SBS_FREQ],	FLOAT32_T, 		1);
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	2107      	movs	r1, #7
 800ae10:	4896      	ldr	r0, [pc, #600]	; (800b06c <Create_PDOTable_ObjDictionary+0x368>)
 800ae12:	f7ff fd18 	bl	800a846 <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_IMP_INPUT], 					FLOAT32_T,  	1);
 800ae16:	2201      	movs	r2, #1
 800ae18:	2107      	movs	r1, #7
 800ae1a:	4895      	ldr	r0, [pc, #596]	; (800b070 <Create_PDOTable_ObjDictionary+0x36c>)
 800ae1c:	f7ff fd13 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_POS_PID_CTRL_INPUT], 			FLOAT32_T,  	1);
 800ae20:	2201      	movs	r2, #1
 800ae22:	2107      	movs	r1, #7
 800ae24:	4893      	ldr	r0, [pc, #588]	; (800b074 <Create_PDOTable_ObjDictionary+0x370>)
 800ae26:	f7ff fd0e 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VEL_PID_CTRL_INPUT],			FLOAT32_T, 		1);
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	2107      	movs	r1, #7
 800ae2e:	4892      	ldr	r0, [pc, #584]	; (800b078 <Create_PDOTable_ObjDictionary+0x374>)
 800ae30:	f7ff fd09 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VSD_INPUT],					FLOAT32_T, 		1);
 800ae34:	2201      	movs	r2, #1
 800ae36:	2107      	movs	r1, #7
 800ae38:	4890      	ldr	r0, [pc, #576]	; (800b07c <Create_PDOTable_ObjDictionary+0x378>)
 800ae3a:	f7ff fd04 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_UNIT_TRAJECTORY_BUFF_COUNT],	FLOAT32_T, 		1);
 800ae3e:	2201      	movs	r2, #1
 800ae40:	2107      	movs	r1, #7
 800ae42:	488f      	ldr	r0, [pc, #572]	; (800b080 <Create_PDOTable_ObjDictionary+0x37c>)
 800ae44:	f7ff fcff 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_TORQUE_TRAJECTORY_INPUT],		FLOAT32_T, 		1);
 800ae48:	2201      	movs	r2, #1
 800ae4a:	2107      	movs	r1, #7
 800ae4c:	488d      	ldr	r0, [pc, #564]	; (800b084 <Create_PDOTable_ObjDictionary+0x380>)
 800ae4e:	f7ff fcfa 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ABS_POSITION],				FLOAT32_T, 		1);
 800ae52:	2201      	movs	r2, #1
 800ae54:	2107      	movs	r1, #7
 800ae56:	488c      	ldr	r0, [pc, #560]	; (800b088 <Create_PDOTable_ObjDictionary+0x384>)
 800ae58:	f7ff fcf5 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_DISTURABNCE],				FLOAT32_T, 		1);
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	2107      	movs	r1, #7
 800ae60:	488a      	ldr	r0, [pc, #552]	; (800b08c <Create_PDOTable_ObjDictionary+0x388>)
 800ae62:	f7ff fcf0 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_INPUT],					FLOAT32_T, 		1);
 800ae66:	2201      	movs	r2, #1
 800ae68:	2107      	movs	r1, #7
 800ae6a:	4889      	ldr	r0, [pc, #548]	; (800b090 <Create_PDOTable_ObjDictionary+0x38c>)
 800ae6c:	f7ff fceb 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_FF_INPUT],					FLOAT32_T, 		1);
 800ae70:	2201      	movs	r2, #1
 800ae72:	2107      	movs	r1, #7
 800ae74:	4887      	ldr	r0, [pc, #540]	; (800b094 <Create_PDOTable_ObjDictionary+0x390>)
 800ae76:	f7ff fce6 	bl	800a846 <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VELOCITY_ESTIMATED],			FLOAT32_T, 		1);
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	2107      	movs	r1, #7
 800ae7e:	4886      	ldr	r0, [pc, #536]	; (800b098 <Create_PDOTable_ObjDictionary+0x394>)
 800ae80:	f7ff fce1 	bl	800a846 <Assemble_PDO>



	/*COMM Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST1],  			INT32_T,  	1);
 800ae84:	2201      	movs	r2, #1
 800ae86:	2106      	movs	r1, #6
 800ae88:	4884      	ldr	r0, [pc, #528]	; (800b09c <Create_PDOTable_ObjDictionary+0x398>)
 800ae8a:	f7ff fcdc 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST2],  			INT32_T,  	1);
 800ae8e:	2201      	movs	r2, #1
 800ae90:	2106      	movs	r1, #6
 800ae92:	4883      	ldr	r0, [pc, #524]	; (800b0a0 <Create_PDOTable_ObjDictionary+0x39c>)
 800ae94:	f7ff fcd7 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST3],  			INT32_T,  	1);
 800ae98:	2201      	movs	r2, #1
 800ae9a:	2106      	movs	r1, #6
 800ae9c:	4881      	ldr	r0, [pc, #516]	; (800b0a4 <Create_PDOTable_ObjDictionary+0x3a0>)
 800ae9e:	f7ff fcd2 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST4],  			INT32_T,  	1);
 800aea2:	2201      	movs	r2, #1
 800aea4:	2106      	movs	r1, #6
 800aea6:	4880      	ldr	r0, [pc, #512]	; (800b0a8 <Create_PDOTable_ObjDictionary+0x3a4>)
 800aea8:	f7ff fccd 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST5],  			INT32_T,  	1);
 800aeac:	2201      	movs	r2, #1
 800aeae:	2106      	movs	r1, #6
 800aeb0:	487e      	ldr	r0, [pc, #504]	; (800b0ac <Create_PDOTable_ObjDictionary+0x3a8>)
 800aeb2:	f7ff fcc8 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST6],  			INT32_T,  	1);
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	2106      	movs	r1, #6
 800aeba:	487d      	ldr	r0, [pc, #500]	; (800b0b0 <Create_PDOTable_ObjDictionary+0x3ac>)
 800aebc:	f7ff fcc3 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST7],  			INT32_T,  	1);
 800aec0:	2201      	movs	r2, #1
 800aec2:	2106      	movs	r1, #6
 800aec4:	487b      	ldr	r0, [pc, #492]	; (800b0b4 <Create_PDOTable_ObjDictionary+0x3b0>)
 800aec6:	f7ff fcbe 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST8],  			INT32_T,  	1);
 800aeca:	2201      	movs	r2, #1
 800aecc:	2106      	movs	r1, #6
 800aece:	487a      	ldr	r0, [pc, #488]	; (800b0b8 <Create_PDOTable_ObjDictionary+0x3b4>)
 800aed0:	f7ff fcb9 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST9],  			INT32_T,  	1);
 800aed4:	2201      	movs	r2, #1
 800aed6:	2106      	movs	r1, #6
 800aed8:	4878      	ldr	r0, [pc, #480]	; (800b0bc <Create_PDOTable_ObjDictionary+0x3b8>)
 800aeda:	f7ff fcb4 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST10],  			INT32_T,  	1);
 800aede:	2201      	movs	r2, #1
 800aee0:	2106      	movs	r1, #6
 800aee2:	4877      	ldr	r0, [pc, #476]	; (800b0c0 <Create_PDOTable_ObjDictionary+0x3bc>)
 800aee4:	f7ff fcaf 	bl	800a846 <Assemble_PDO>

	/*IMU Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_X],  			FLOAT32_T,  	1);
 800aee8:	2201      	movs	r2, #1
 800aeea:	2107      	movs	r1, #7
 800aeec:	4875      	ldr	r0, [pc, #468]	; (800b0c4 <Create_PDOTable_ObjDictionary+0x3c0>)
 800aeee:	f7ff fcaa 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Y],  			FLOAT32_T,  	1);
 800aef2:	2201      	movs	r2, #1
 800aef4:	2107      	movs	r1, #7
 800aef6:	4874      	ldr	r0, [pc, #464]	; (800b0c8 <Create_PDOTable_ObjDictionary+0x3c4>)
 800aef8:	f7ff fca5 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Z],  			FLOAT32_T,  	1);
 800aefc:	2201      	movs	r2, #1
 800aefe:	2107      	movs	r1, #7
 800af00:	4872      	ldr	r0, [pc, #456]	; (800b0cc <Create_PDOTable_ObjDictionary+0x3c8>)
 800af02:	f7ff fca0 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_X],  			FLOAT32_T,  	1);
 800af06:	2201      	movs	r2, #1
 800af08:	2107      	movs	r1, #7
 800af0a:	4871      	ldr	r0, [pc, #452]	; (800b0d0 <Create_PDOTable_ObjDictionary+0x3cc>)
 800af0c:	f7ff fc9b 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Y],  			FLOAT32_T,  	1);
 800af10:	2201      	movs	r2, #1
 800af12:	2107      	movs	r1, #7
 800af14:	486f      	ldr	r0, [pc, #444]	; (800b0d4 <Create_PDOTable_ObjDictionary+0x3d0>)
 800af16:	f7ff fc96 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Z],  			FLOAT32_T,  	1);
 800af1a:	2201      	movs	r2, #1
 800af1c:	2107      	movs	r1, #7
 800af1e:	486e      	ldr	r0, [pc, #440]	; (800b0d8 <Create_PDOTable_ObjDictionary+0x3d4>)
 800af20:	f7ff fc91 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_WALKING_STATE],  	FLOAT32_T,  	1);
 800af24:	2201      	movs	r2, #1
 800af26:	2107      	movs	r1, #7
 800af28:	486c      	ldr	r0, [pc, #432]	; (800b0dc <Create_PDOTable_ObjDictionary+0x3d8>)
 800af2a:	f7ff fc8c 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GAIT_PHASE],  		FLOAT32_T,  	1);
 800af2e:	2201      	movs	r2, #1
 800af30:	2107      	movs	r1, #7
 800af32:	486b      	ldr	r0, [pc, #428]	; (800b0e0 <Create_PDOTable_ObjDictionary+0x3dc>)
 800af34:	f7ff fc87 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_X],  			FLOAT32_T,  	1);
 800af38:	2201      	movs	r2, #1
 800af3a:	2107      	movs	r1, #7
 800af3c:	4869      	ldr	r0, [pc, #420]	; (800b0e4 <Create_PDOTable_ObjDictionary+0x3e0>)
 800af3e:	f7ff fc82 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Y],  			FLOAT32_T,  	1);
 800af42:	2201      	movs	r2, #1
 800af44:	2107      	movs	r1, #7
 800af46:	4868      	ldr	r0, [pc, #416]	; (800b0e8 <Create_PDOTable_ObjDictionary+0x3e4>)
 800af48:	f7ff fc7d 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Z],  			FLOAT32_T,  	1);
 800af4c:	2201      	movs	r2, #1
 800af4e:	2107      	movs	r1, #7
 800af50:	4866      	ldr	r0, [pc, #408]	; (800b0ec <Create_PDOTable_ObjDictionary+0x3e8>)
 800af52:	f7ff fc78 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_P],  		FLOAT32_T,  	1);
 800af56:	2201      	movs	r2, #1
 800af58:	2107      	movs	r1, #7
 800af5a:	4865      	ldr	r0, [pc, #404]	; (800b0f0 <Create_PDOTable_ObjDictionary+0x3ec>)
 800af5c:	f7ff fc73 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_D],  		FLOAT32_T,  	1);
 800af60:	2201      	movs	r2, #1
 800af62:	2107      	movs	r1, #7
 800af64:	4863      	ldr	r0, [pc, #396]	; (800b0f4 <Create_PDOTable_ObjDictionary+0x3f0>)
 800af66:	f7ff fc6e 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC],  		FLOAT32_T,  	1);
 800af6a:	2201      	movs	r2, #1
 800af6c:	2107      	movs	r1, #7
 800af6e:	4862      	ldr	r0, [pc, #392]	; (800b0f8 <Create_PDOTable_ObjDictionary+0x3f4>)
 800af70:	f7ff fc69 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR],  		FLOAT32_T,  	1);
 800af74:	2201      	movs	r2, #1
 800af76:	2107      	movs	r1, #7
 800af78:	4860      	ldr	r0, [pc, #384]	; (800b0fc <Create_PDOTable_ObjDictionary+0x3f8>)
 800af7a:	f7ff fc64 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC_FILTERED], FLOAT32_T,  	1);
 800af7e:	2201      	movs	r2, #1
 800af80:	2107      	movs	r1, #7
 800af82:	485f      	ldr	r0, [pc, #380]	; (800b100 <Create_PDOTable_ObjDictionary+0x3fc>)
 800af84:	f7ff fc5f 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR_FILTERED], FLOAT32_T,  	1);
 800af88:	2201      	movs	r2, #1
 800af8a:	2107      	movs	r1, #7
 800af8c:	485d      	ldr	r0, [pc, #372]	; (800b104 <Create_PDOTable_ObjDictionary+0x400>)
 800af8e:	f7ff fc5a 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_DEG_TVCF],  			FLOAT32_T,  	1);
 800af92:	2201      	movs	r2, #1
 800af94:	2107      	movs	r1, #7
 800af96:	485c      	ldr	r0, [pc, #368]	; (800b108 <Create_PDOTable_ObjDictionary+0x404>)
 800af98:	f7ff fc55 	bl	800a846 <Assemble_PDO>


	/*SYSMNGT Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_VOLT],  			FLOAT32_T,  	1);
 800af9c:	2201      	movs	r2, #1
 800af9e:	2107      	movs	r1, #7
 800afa0:	485a      	ldr	r0, [pc, #360]	; (800b10c <Create_PDOTable_ObjDictionary+0x408>)
 800afa2:	f7ff fc50 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_CURR],  			FLOAT32_T,  	1);
 800afa6:	2201      	movs	r2, #1
 800afa8:	2107      	movs	r1, #7
 800afaa:	4859      	ldr	r0, [pc, #356]	; (800b110 <Create_PDOTable_ObjDictionary+0x40c>)
 800afac:	f7ff fc4b 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_TEMP],  			FLOAT32_T,  	1);
 800afb0:	2201      	movs	r2, #1
 800afb2:	2107      	movs	r1, #7
 800afb4:	4857      	ldr	r0, [pc, #348]	; (800b114 <Create_PDOTable_ObjDictionary+0x410>)
 800afb6:	f7ff fc46 	bl	800a846 <Assemble_PDO>

	/*EXTDEV Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_FSR],  				FLOAT32_T,  	1);
 800afba:	2201      	movs	r2, #1
 800afbc:	2107      	movs	r1, #7
 800afbe:	4856      	ldr	r0, [pc, #344]	; (800b118 <Create_PDOTable_ObjDictionary+0x414>)
 800afc0:	f7ff fc41 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_LP],  				FLOAT32_T,  	1);
 800afc4:	2201      	movs	r2, #1
 800afc6:	2107      	movs	r1, #7
 800afc8:	4854      	ldr	r0, [pc, #336]	; (800b11c <Create_PDOTable_ObjDictionary+0x418>)
 800afca:	f7ff fc3c 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_REF],  	FLOAT32_T,  	1);
 800afce:	2201      	movs	r2, #1
 800afd0:	2107      	movs	r1, #7
 800afd2:	4853      	ldr	r0, [pc, #332]	; (800b120 <Create_PDOTable_ObjDictionary+0x41c>)
 800afd4:	f7ff fc37 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_CMD],  	UINT8_T,  		1);
 800afd8:	2201      	movs	r2, #1
 800afda:	2101      	movs	r1, #1
 800afdc:	4851      	ldr	r0, [pc, #324]	; (800b124 <Create_PDOTable_ObjDictionary+0x420>)
 800afde:	f7ff fc32 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_ACT],  	FLOAT32_T,  	1);
 800afe2:	2201      	movs	r2, #1
 800afe4:	2107      	movs	r1, #7
 800afe6:	4850      	ldr	r0, [pc, #320]	; (800b128 <Create_PDOTable_ObjDictionary+0x424>)
 800afe8:	f7ff fc2d 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_ACT],  	UINT8_T,  		1);
 800afec:	2201      	movs	r2, #1
 800afee:	2101      	movs	r1, #1
 800aff0:	484e      	ldr	r0, [pc, #312]	; (800b12c <Create_PDOTable_ObjDictionary+0x428>)
 800aff2:	f7ff fc28 	bl	800a846 <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_BUTTON_STATE],  	UINT8_T,  		1);
 800aff6:	2201      	movs	r2, #1
 800aff8:	2101      	movs	r1, #1
 800affa:	484d      	ldr	r0, [pc, #308]	; (800b130 <Create_PDOTable_ObjDictionary+0x42c>)
 800affc:	f7ff fc23 	bl	800a846 <Assemble_PDO>
}
 800b000:	bf00      	nop
 800b002:	bd80      	pop	{r7, pc}
 800b004:	2400d300 	.word	0x2400d300
 800b008:	2400d302 	.word	0x2400d302
 800b00c:	2400d304 	.word	0x2400d304
 800b010:	2400d306 	.word	0x2400d306
 800b014:	2400d308 	.word	0x2400d308
 800b018:	2400d30a 	.word	0x2400d30a
 800b01c:	2400d30c 	.word	0x2400d30c
 800b020:	2400d30e 	.word	0x2400d30e
 800b024:	2400d310 	.word	0x2400d310
 800b028:	2400d312 	.word	0x2400d312
 800b02c:	2400d314 	.word	0x2400d314
 800b030:	2400d316 	.word	0x2400d316
 800b034:	2400d318 	.word	0x2400d318
 800b038:	2400d31a 	.word	0x2400d31a
 800b03c:	2400d31c 	.word	0x2400d31c
 800b040:	2400d31e 	.word	0x2400d31e
 800b044:	2400d320 	.word	0x2400d320
 800b048:	2400d322 	.word	0x2400d322
 800b04c:	2400d324 	.word	0x2400d324
 800b050:	2400d326 	.word	0x2400d326
 800b054:	2400d328 	.word	0x2400d328
 800b058:	2400d33c 	.word	0x2400d33c
 800b05c:	2400d33e 	.word	0x2400d33e
 800b060:	2400d340 	.word	0x2400d340
 800b064:	2400d342 	.word	0x2400d342
 800b068:	2400d344 	.word	0x2400d344
 800b06c:	2400d346 	.word	0x2400d346
 800b070:	2400d348 	.word	0x2400d348
 800b074:	2400d34a 	.word	0x2400d34a
 800b078:	2400d34c 	.word	0x2400d34c
 800b07c:	2400d34e 	.word	0x2400d34e
 800b080:	2400d350 	.word	0x2400d350
 800b084:	2400d352 	.word	0x2400d352
 800b088:	2400d354 	.word	0x2400d354
 800b08c:	2400d356 	.word	0x2400d356
 800b090:	2400d358 	.word	0x2400d358
 800b094:	2400d35a 	.word	0x2400d35a
 800b098:	2400d35c 	.word	0x2400d35c
 800b09c:	2400d378 	.word	0x2400d378
 800b0a0:	2400d37a 	.word	0x2400d37a
 800b0a4:	2400d37c 	.word	0x2400d37c
 800b0a8:	2400d37e 	.word	0x2400d37e
 800b0ac:	2400d380 	.word	0x2400d380
 800b0b0:	2400d382 	.word	0x2400d382
 800b0b4:	2400d384 	.word	0x2400d384
 800b0b8:	2400d386 	.word	0x2400d386
 800b0bc:	2400d388 	.word	0x2400d388
 800b0c0:	2400d38a 	.word	0x2400d38a
 800b0c4:	2400d3b4 	.word	0x2400d3b4
 800b0c8:	2400d3b6 	.word	0x2400d3b6
 800b0cc:	2400d3b8 	.word	0x2400d3b8
 800b0d0:	2400d3ba 	.word	0x2400d3ba
 800b0d4:	2400d3bc 	.word	0x2400d3bc
 800b0d8:	2400d3be 	.word	0x2400d3be
 800b0dc:	2400d3c0 	.word	0x2400d3c0
 800b0e0:	2400d3c2 	.word	0x2400d3c2
 800b0e4:	2400d3c4 	.word	0x2400d3c4
 800b0e8:	2400d3c6 	.word	0x2400d3c6
 800b0ec:	2400d3c8 	.word	0x2400d3c8
 800b0f0:	2400d3ca 	.word	0x2400d3ca
 800b0f4:	2400d3cc 	.word	0x2400d3cc
 800b0f8:	2400d3ce 	.word	0x2400d3ce
 800b0fc:	2400d3d0 	.word	0x2400d3d0
 800b100:	2400d3d2 	.word	0x2400d3d2
 800b104:	2400d3d4 	.word	0x2400d3d4
 800b108:	2400d3d6 	.word	0x2400d3d6
 800b10c:	2400d3f0 	.word	0x2400d3f0
 800b110:	2400d3f2 	.word	0x2400d3f2
 800b114:	2400d3f4 	.word	0x2400d3f4
 800b118:	2400d42c 	.word	0x2400d42c
 800b11c:	2400d42e 	.word	0x2400d42e
 800b120:	2400d430 	.word	0x2400d430
 800b124:	2400d432 	.word	0x2400d432
 800b128:	2400d434 	.word	0x2400d434
 800b12c:	2400d436 	.word	0x2400d436
 800b130:	2400d438 	.word	0x2400d438

0800b134 <Write_Reg_ICM20608G>:
{
    return t_obj->io.ReadReg(t_obj->addr, t_reg, t_data, t_size);
}

static ICM20608G Write_Reg_ICM20608G(ICM20608GObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 800b134:	b590      	push	{r4, r7, lr}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	607a      	str	r2, [r7, #4]
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	460b      	mov	r3, r1
 800b142:	817b      	strh	r3, [r7, #10]
    return t_obj->io.WriteReg(t_obj->addr, t_reg, t_data, t_size);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	695c      	ldr	r4, [r3, #20]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	8818      	ldrh	r0, [r3, #0]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	8979      	ldrh	r1, [r7, #10]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	47a0      	blx	r4
 800b156:	4603      	mov	r3, r0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd90      	pop	{r4, r7, pc}

0800b160 <Set_Reg_ICM20608G>:

static ICM20608G Set_Reg_ICM20608G(ICM20608GObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	607a      	str	r2, [r7, #4]
 800b16a:	603b      	str	r3, [r7, #0]
 800b16c:	460b      	mov	r3, r1
 800b16e:	817b      	strh	r3, [r7, #10]
	uint8_t t_res = e_ICM20608G_STATUS_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	75fb      	strb	r3, [r7, #23]
    t_res = Write_Reg_ICM20608G(t_obj, t_reg, t_data, t_size);
 800b174:	8979      	ldrh	r1, [r7, #10]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7ff ffda 	bl	800b134 <Write_Reg_ICM20608G>
 800b180:	4603      	mov	r3, r0
 800b182:	75fb      	strb	r3, [r7, #23]
    return t_res;
 800b184:	7dfb      	ldrb	r3, [r7, #23]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <Set_Ioctx_ICM20608G>:

ICM20608G Set_Ioctx_ICM20608G(ICM20608GObject* t_obj, ICM20608GIOctx* t_ioctx)
{
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	6039      	str	r1, [r7, #0]
    if (!t_obj || !t_ioctx->IsDevReady || !t_ioctx->ReadReg || !t_ioctx->WriteReg){
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00b      	beq.n	800b1b6 <Set_Ioctx_ICM20608G+0x28>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d007      	beq.n	800b1b6 <Set_Ioctx_ICM20608G+0x28>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <Set_Ioctx_ICM20608G+0x28>
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <Set_Ioctx_ICM20608G+0x2c>
        return e_ICM20608G_STATUS_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e018      	b.n	800b1ec <Set_Ioctx_ICM20608G+0x5e>
    }

    t_obj->io.Init       = t_ioctx->Init;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	605a      	str	r2, [r3, #4]
    t_obj->io.DeInit     = t_ioctx->DeInit;
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	609a      	str	r2, [r3, #8]
    t_obj->io.IsDevReady = t_ioctx->IsDevReady;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	689a      	ldr	r2, [r3, #8]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	60da      	str	r2, [r3, #12]
    t_obj->io.ReadReg    = t_ioctx->ReadReg;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	68da      	ldr	r2, [r3, #12]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	611a      	str	r2, [r3, #16]
    t_obj->io.WriteReg   = t_ioctx->WriteReg;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	691a      	ldr	r2, [r3, #16]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	615a      	str	r2, [r3, #20]
    t_obj->io.Wait       = t_ioctx->Wait;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	695a      	ldr	r2, [r3, #20]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	619a      	str	r2, [r3, #24]

    return e_ICM20608G_STATUS_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <Init_ICM20608G>:

ICM20608G Init_ICM20608G(ICM20608GObject* t_obj)			// Setting control register
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	static uint8_t t_res = e_ICM20608G_STATUS_OK;

    // Check Address
    t_res = e_ICM20608G_STATUS_ERROR;
 800b200:	4b27      	ldr	r3, [pc, #156]	; (800b2a0 <Init_ICM20608G+0xa8>)
 800b202:	2201      	movs	r2, #1
 800b204:	701a      	strb	r2, [r3, #0]
    t_obj->addr = ICM20608G_DEV_ADDR;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	22d2      	movs	r2, #210	; 0xd2
 800b20a:	801a      	strh	r2, [r3, #0]
    if (t_obj->io.IsDevReady(t_obj->addr) == 0){
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	8812      	ldrh	r2, [r2, #0]
 800b214:	4610      	mov	r0, r2
 800b216:	4798      	blx	r3
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d102      	bne.n	800b224 <Init_ICM20608G+0x2c>
        t_res = e_ICM20608G_STATUS_OK;
 800b21e:	4b20      	ldr	r3, [pc, #128]	; (800b2a0 <Init_ICM20608G+0xa8>)
 800b220:	2200      	movs	r2, #0
 800b222:	701a      	strb	r2, [r3, #0]
    }

    // Configure Control
    if (t_res == e_ICM20608G_STATUS_OK){
 800b224:	4b1e      	ldr	r3, [pc, #120]	; (800b2a0 <Init_ICM20608G+0xa8>)
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d133      	bne.n	800b294 <Init_ICM20608G+0x9c>
        uint8_t conf_1 = ICM20608G_PWR_MGMT_1_ONE;
 800b22c:	2300      	movs	r3, #0
 800b22e:	73fb      	strb	r3, [r7, #15]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_PWR_MGMT_1, &conf_1, ICM20608G_CONTROL_SIZE);
 800b230:	f107 020f 	add.w	r2, r7, #15
 800b234:	2301      	movs	r3, #1
 800b236:	216b      	movs	r1, #107	; 0x6b
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7ff ff91 	bl	800b160 <Set_Reg_ICM20608G>
 800b23e:	4603      	mov	r3, r0
 800b240:	461a      	mov	r2, r3
 800b242:	4b17      	ldr	r3, [pc, #92]	; (800b2a0 <Init_ICM20608G+0xa8>)
 800b244:	701a      	strb	r2, [r3, #0]
        uint8_t conf_2 = ICM20608G_PWR_MGMT_2_ONE;
 800b246:	2300      	movs	r3, #0
 800b248:	73bb      	strb	r3, [r7, #14]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_PWR_MGMT_2, &conf_2, ICM20608G_CONTROL_SIZE);
 800b24a:	f107 020e 	add.w	r2, r7, #14
 800b24e:	2301      	movs	r3, #1
 800b250:	216c      	movs	r1, #108	; 0x6c
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff ff84 	bl	800b160 <Set_Reg_ICM20608G>
 800b258:	4603      	mov	r3, r0
 800b25a:	461a      	mov	r2, r3
 800b25c:	4b10      	ldr	r3, [pc, #64]	; (800b2a0 <Init_ICM20608G+0xa8>)
 800b25e:	701a      	strb	r2, [r3, #0]
        uint8_t conf_3 = ICM20608G_GYR_CONFIG_ONE;
 800b260:	2308      	movs	r3, #8
 800b262:	737b      	strb	r3, [r7, #13]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_GYRO_CONFIG, &conf_3, ICM20608G_CONTROL_SIZE);
 800b264:	f107 020d 	add.w	r2, r7, #13
 800b268:	2301      	movs	r3, #1
 800b26a:	211b      	movs	r1, #27
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff ff77 	bl	800b160 <Set_Reg_ICM20608G>
 800b272:	4603      	mov	r3, r0
 800b274:	461a      	mov	r2, r3
 800b276:	4b0a      	ldr	r3, [pc, #40]	; (800b2a0 <Init_ICM20608G+0xa8>)
 800b278:	701a      	strb	r2, [r3, #0]
        uint8_t conf_4 = ICM20608G_ACC_CONFIG_ONE;
 800b27a:	2308      	movs	r3, #8
 800b27c:	733b      	strb	r3, [r7, #12]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_ACCEL_CONFIG, &conf_4, ICM20608G_CONTROL_SIZE);
 800b27e:	f107 020c 	add.w	r2, r7, #12
 800b282:	2301      	movs	r3, #1
 800b284:	211c      	movs	r1, #28
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff ff6a 	bl	800b160 <Set_Reg_ICM20608G>
 800b28c:	4603      	mov	r3, r0
 800b28e:	461a      	mov	r2, r3
 800b290:	4b03      	ldr	r3, [pc, #12]	; (800b2a0 <Init_ICM20608G+0xa8>)
 800b292:	701a      	strb	r2, [r3, #0]
    }

    return t_res;
 800b294:	4b02      	ldr	r3, [pc, #8]	; (800b2a0 <Init_ICM20608G+0xa8>)
 800b296:	781b      	ldrb	r3, [r3, #0]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	24000099 	.word	0x24000099

0800b2a4 <Get_Value_ICM20608G>:

ICM20608G Get_Value_ICM20608G(ICM20608GObject* t_obj)
{
 800b2a4:	b590      	push	{r4, r7, lr}
 800b2a6:	b08b      	sub	sp, #44	; 0x2c
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t t_buff[14];

	t_res = t_obj->io.ReadReg(t_obj->addr, ICM20608G_ACCEL_XOUT_H, t_buff, 14);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691c      	ldr	r4, [r3, #16]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	8818      	ldrh	r0, [r3, #0]
 800b2ba:	f107 020c 	add.w	r2, r7, #12
 800b2be:	230e      	movs	r3, #14
 800b2c0:	213b      	movs	r1, #59	; 0x3b
 800b2c2:	47a0      	blx	r4
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t t_Xacc = (int16_t)(t_buff[0]  << 8 | t_buff[1]);
 800b2ca:	7b3b      	ldrb	r3, [r7, #12]
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	b21a      	sxth	r2, r3
 800b2d0:	7b7b      	ldrb	r3, [r7, #13]
 800b2d2:	b21b      	sxth	r3, r3
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t t_Yacc = (int16_t)(t_buff[2]  << 8 | t_buff[3]);
 800b2d8:	7bbb      	ldrb	r3, [r7, #14]
 800b2da:	021b      	lsls	r3, r3, #8
 800b2dc:	b21a      	sxth	r2, r3
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
 800b2e0:	b21b      	sxth	r3, r3
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t t_Zacc = (int16_t)(t_buff[4]  << 8 | t_buff[5]);
 800b2e6:	7c3b      	ldrb	r3, [r7, #16]
 800b2e8:	021b      	lsls	r3, r3, #8
 800b2ea:	b21a      	sxth	r2, r3
 800b2ec:	7c7b      	ldrb	r3, [r7, #17]
 800b2ee:	b21b      	sxth	r3, r3
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	843b      	strh	r3, [r7, #32]
	int16_t t_Xgyr = (int16_t)(t_buff[8]  << 8 | t_buff[9]);
 800b2f4:	7d3b      	ldrb	r3, [r7, #20]
 800b2f6:	021b      	lsls	r3, r3, #8
 800b2f8:	b21a      	sxth	r2, r3
 800b2fa:	7d7b      	ldrb	r3, [r7, #21]
 800b2fc:	b21b      	sxth	r3, r3
 800b2fe:	4313      	orrs	r3, r2
 800b300:	83fb      	strh	r3, [r7, #30]
	int16_t t_Ygyr = (int16_t)(t_buff[10] << 8 | t_buff[11]);
 800b302:	7dbb      	ldrb	r3, [r7, #22]
 800b304:	021b      	lsls	r3, r3, #8
 800b306:	b21a      	sxth	r2, r3
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	b21b      	sxth	r3, r3
 800b30c:	4313      	orrs	r3, r2
 800b30e:	83bb      	strh	r3, [r7, #28]
	int16_t t_Zgyr = (int16_t)(t_buff[12] << 8 | t_buff[13]);
 800b310:	7e3b      	ldrb	r3, [r7, #24]
 800b312:	021b      	lsls	r3, r3, #8
 800b314:	b21a      	sxth	r2, r3
 800b316:	7e7b      	ldrb	r3, [r7, #25]
 800b318:	b21b      	sxth	r3, r3
 800b31a:	4313      	orrs	r3, r2
 800b31c:	837b      	strh	r3, [r7, #26]

	/* NEED TO BE SCALED */
	t_obj->value.icm20608_acc_x = (float)(t_Xacc / 8192.0f);
 800b31e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b32a:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b3c8 <Get_Value_ICM20608G+0x124>
 800b32e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	edc3 7a07 	vstr	s15, [r3, #28]
	t_obj->value.icm20608_acc_y = (float)(t_Yacc / 8192.0f);
 800b338:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b33c:	ee07 3a90 	vmov	s15, r3
 800b340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b344:	eddf 6a20 	vldr	s13, [pc, #128]	; 800b3c8 <Get_Value_ICM20608G+0x124>
 800b348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	edc3 7a08 	vstr	s15, [r3, #32]
	t_obj->value.icm20608_acc_z = (float)(t_Zacc / 8192.0f);
 800b352:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b356:	ee07 3a90 	vmov	s15, r3
 800b35a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b35e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800b3c8 <Get_Value_ICM20608G+0x124>
 800b362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	t_obj->value.icm20608_gyr_x = (float)(t_Xgyr / 65.5f); //65.5f
 800b36c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b370:	ee07 3a90 	vmov	s15, r3
 800b374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b378:	eddf 6a14 	vldr	s13, [pc, #80]	; 800b3cc <Get_Value_ICM20608G+0x128>
 800b37c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	t_obj->value.icm20608_gyr_y = (float)(t_Ygyr / 65.5f);
 800b386:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b392:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800b3cc <Get_Value_ICM20608G+0x128>
 800b396:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	t_obj->value.icm20608_gyr_z = (float)(t_Zgyr / 65.5f);
 800b3a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b3a4:	ee07 3a90 	vmov	s15, r3
 800b3a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3ac:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b3cc <Get_Value_ICM20608G+0x128>
 800b3b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	return t_res;
 800b3ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	372c      	adds	r7, #44	; 0x2c
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd90      	pop	{r4, r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	46000000 	.word	0x46000000
 800b3cc:	42830000 	.word	0x42830000

0800b3d0 <IsDevReady_3Axis_IMU>:
#include "ioif_3axis_imu.h"

static HAL_StatusTypeDef IsDevReady_3Axis_IMU(uint16_t t_dev_addr)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	80fb      	strh	r3, [r7, #6]
	return IsDevReady_I2C3(t_dev_addr);
 800b3da:	88fb      	ldrh	r3, [r7, #6]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 f933 	bl	800b648 <IsDevReady_I2C3>
 800b3e2:	4603      	mov	r3, r0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <Read_3Axis_IMU>:

static HAL_StatusTypeDef Read_3Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af02      	add	r7, sp, #8
 800b3f2:	60ba      	str	r2, [r7, #8]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	81fb      	strh	r3, [r7, #14]
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	81bb      	strh	r3, [r7, #12]
 800b3fe:	4613      	mov	r3, r2
 800b400:	80fb      	strh	r3, [r7, #6]
	return Mem_Read_I2C3(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 800b402:	89b9      	ldrh	r1, [r7, #12]
 800b404:	89f8      	ldrh	r0, [r7, #14]
 800b406:	88fb      	ldrh	r3, [r7, #6]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f000 f9cb 	bl	800b7a8 <Mem_Read_I2C3>
 800b412:	4603      	mov	r3, r0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <Write_3Axis_IMU>:

static HAL_StatusTypeDef Write_3Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af02      	add	r7, sp, #8
 800b422:	60ba      	str	r2, [r7, #8]
 800b424:	461a      	mov	r2, r3
 800b426:	4603      	mov	r3, r0
 800b428:	81fb      	strh	r3, [r7, #14]
 800b42a:	460b      	mov	r3, r1
 800b42c:	81bb      	strh	r3, [r7, #12]
 800b42e:	4613      	mov	r3, r2
 800b430:	80fb      	strh	r3, [r7, #6]
	return Mem_Write_I2C3(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 800b432:	89b9      	ldrh	r1, [r7, #12]
 800b434:	89f8      	ldrh	r0, [r7, #14]
 800b436:	88fb      	ldrh	r3, [r7, #6]
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2201      	movs	r2, #1
 800b43e:	f000 f981 	bl	800b744 <Mem_Write_I2C3>
 800b442:	4603      	mov	r3, r0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <Init_3Axis_IMU>:

HAL_StatusTypeDef Init_3Axis_IMU(MagData* t_mag_data)
{
 800b44c:	b5b0      	push	{r4, r5, r7, lr}
 800b44e:	b08a      	sub	sp, #40	; 0x28
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
	uint8_t t_init_res = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	memset(t_mag_data, 0, sizeof(MagData));
 800b45a:	220c      	movs	r2, #12
 800b45c:	2100      	movs	r1, #0
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f004 f820 	bl	800f4a4 <memset>

	BM1422AGMVIOctx ioctx = {
 800b464:	4b13      	ldr	r3, [pc, #76]	; (800b4b4 <Init_3Axis_IMU+0x68>)
 800b466:	f107 040c 	add.w	r4, r7, #12
 800b46a:	461d      	mov	r5, r3
 800b46c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b46e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b470:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b474:	e884 0003 	stmia.w	r4, {r0, r1}
		Read_3Axis_IMU,
		Write_3Axis_IMU,
		NULL, 
	};

	t_init_res = Set_Ioctx_BM1422AGMV(&bm1422agmv_obj, &ioctx);
 800b478:	f107 030c 	add.w	r3, r7, #12
 800b47c:	4619      	mov	r1, r3
 800b47e:	480e      	ldr	r0, [pc, #56]	; (800b4b8 <Init_3Axis_IMU+0x6c>)
 800b480:	f7ff f8f5 	bl	800a66e <Set_Ioctx_BM1422AGMV>
 800b484:	4603      	mov	r3, r0
 800b486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Init_BM1422AGMV(&bm1422agmv_obj) != HAL_OK){
 800b48a:	480b      	ldr	r0, [pc, #44]	; (800b4b8 <Init_3Axis_IMU+0x6c>)
 800b48c:	f7ff f924 	bl	800a6d8 <Init_BM1422AGMV>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d008      	beq.n	800b4a8 <Init_3Axis_IMU+0x5c>
		t_init_res = Init_BM1422AGMV(&bm1422agmv_obj);
 800b496:	4808      	ldr	r0, [pc, #32]	; (800b4b8 <Init_3Axis_IMU+0x6c>)
 800b498:	f7ff f91e 	bl	800a6d8 <Init_BM1422AGMV>
 800b49c:	4603      	mov	r3, r0
 800b49e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return t_init_res;
 800b4a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4a6:	e001      	b.n	800b4ac <Init_3Axis_IMU+0x60>
	}

	return t_init_res;
 800b4a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3728      	adds	r7, #40	; 0x28
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b4b4:	080112dc 	.word	0x080112dc
 800b4b8:	24003250 	.word	0x24003250

0800b4bc <Get_Value_3Axis_IMU>:

HAL_StatusTypeDef Get_Value_3Axis_IMU(MagData* t_mag_data)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
	uint8_t t_get_value_res = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73fb      	strb	r3, [r7, #15]
	t_get_value_res = Get_Value_BM1422AGMV(&bm1422agmv_obj);
 800b4c8:	4809      	ldr	r0, [pc, #36]	; (800b4f0 <Get_Value_3Axis_IMU+0x34>)
 800b4ca:	f7ff f965 	bl	800a798 <Get_Value_BM1422AGMV>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73fb      	strb	r3, [r7, #15]

	if (t_get_value_res == HAL_OK){
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d106      	bne.n	800b4e6 <Get_Value_3Axis_IMU+0x2a>
		memcpy(t_mag_data, &bm1422agmv_obj.value, sizeof(MagData));
 800b4d8:	220c      	movs	r2, #12
 800b4da:	4906      	ldr	r1, [pc, #24]	; (800b4f4 <Get_Value_3Axis_IMU+0x38>)
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f003 ffd3 	bl	800f488 <memcpy>
	} else{
		return t_get_value_res;
	}

	return t_get_value_res;
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
 800b4e4:	e000      	b.n	800b4e8 <Get_Value_3Axis_IMU+0x2c>
		return t_get_value_res;
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	24003250 	.word	0x24003250
 800b4f4:	2400326c 	.word	0x2400326c

0800b4f8 <IsDevReady_6Axis_IMU>:
#include "ioif_6axis_imu.h"

static HAL_StatusTypeDef IsDevReady_6Axis_IMU(uint16_t t_dev_addr)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	80fb      	strh	r3, [r7, #6]
   return IsDevReady_I2C1(t_dev_addr);
 800b502:	88fb      	ldrh	r3, [r7, #6]
 800b504:	4618      	mov	r0, r3
 800b506:	f000 f88d 	bl	800b624 <IsDevReady_I2C1>
 800b50a:	4603      	mov	r3, r0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3708      	adds	r7, #8
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <Read_6Axis_IMU>:

static HAL_StatusTypeDef Read_6Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af02      	add	r7, sp, #8
 800b51a:	60ba      	str	r2, [r7, #8]
 800b51c:	461a      	mov	r2, r3
 800b51e:	4603      	mov	r3, r0
 800b520:	81fb      	strh	r3, [r7, #14]
 800b522:	460b      	mov	r3, r1
 800b524:	81bb      	strh	r3, [r7, #12]
 800b526:	4613      	mov	r3, r2
 800b528:	80fb      	strh	r3, [r7, #6]
	return Mem_Read_I2C1(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 800b52a:	89b9      	ldrh	r1, [r7, #12]
 800b52c:	89f8      	ldrh	r0, [r7, #14]
 800b52e:	88fb      	ldrh	r3, [r7, #6]
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	2201      	movs	r2, #1
 800b536:	f000 f8cb 	bl	800b6d0 <Mem_Read_I2C1>
 800b53a:	4603      	mov	r3, r0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <Write_6Axis_IMU>:

static HAL_StatusTypeDef Write_6Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af02      	add	r7, sp, #8
 800b54a:	60ba      	str	r2, [r7, #8]
 800b54c:	461a      	mov	r2, r3
 800b54e:	4603      	mov	r3, r0
 800b550:	81fb      	strh	r3, [r7, #14]
 800b552:	460b      	mov	r3, r1
 800b554:	81bb      	strh	r3, [r7, #12]
 800b556:	4613      	mov	r3, r2
 800b558:	80fb      	strh	r3, [r7, #6]
	return Mem_Write_I2C1(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 800b55a:	89b9      	ldrh	r1, [r7, #12]
 800b55c:	89f8      	ldrh	r0, [r7, #14]
 800b55e:	88fb      	ldrh	r3, [r7, #6]
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2201      	movs	r2, #1
 800b566:	f000 f881 	bl	800b66c <Mem_Write_I2C1>
 800b56a:	4603      	mov	r3, r0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <Init_6Axis_IMU>:

HAL_StatusTypeDef Init_6Axis_IMU(AccGyroData* t_acc_gyro_Data)
{
 800b574:	b5b0      	push	{r4, r5, r7, lr}
 800b576:	b08a      	sub	sp, #40	; 0x28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
	uint8_t t_init_res = 0;
 800b57c:	2300      	movs	r3, #0
 800b57e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	memset(&t_acc_gyro_Data, 0, sizeof(AccGyroData));
 800b582:	1d3b      	adds	r3, r7, #4
 800b584:	2218      	movs	r2, #24
 800b586:	2100      	movs	r1, #0
 800b588:	4618      	mov	r0, r3
 800b58a:	f003 ff8b 	bl	800f4a4 <memset>

	ICM20608GIOctx ioctx = {
 800b58e:	4b14      	ldr	r3, [pc, #80]	; (800b5e0 <Init_6Axis_IMU+0x6c>)
 800b590:	f107 040c 	add.w	r4, r7, #12
 800b594:	461d      	mov	r5, r3
 800b596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b59a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b59e:	e884 0003 	stmia.w	r4, {r0, r1}
		Read_6Axis_IMU,
		Write_6Axis_IMU,
		NULL
	};

	t_init_res = Set_Ioctx_ICM20608G(&icm20608_obj, &ioctx);
 800b5a2:	f107 030c 	add.w	r3, r7, #12
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	480e      	ldr	r0, [pc, #56]	; (800b5e4 <Init_6Axis_IMU+0x70>)
 800b5aa:	f7ff fdf0 	bl	800b18e <Set_Ioctx_ICM20608G>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Init_ICM20608G(&icm20608_obj) != HAL_OK){
 800b5b4:	480b      	ldr	r0, [pc, #44]	; (800b5e4 <Init_6Axis_IMU+0x70>)
 800b5b6:	f7ff fe1f 	bl	800b1f8 <Init_ICM20608G>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d008      	beq.n	800b5d2 <Init_6Axis_IMU+0x5e>
		t_init_res = Init_ICM20608G(&icm20608_obj);
 800b5c0:	4808      	ldr	r0, [pc, #32]	; (800b5e4 <Init_6Axis_IMU+0x70>)
 800b5c2:	f7ff fe19 	bl	800b1f8 <Init_ICM20608G>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return t_init_res;
 800b5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5d0:	e001      	b.n	800b5d6 <Init_6Axis_IMU+0x62>
	}

	return t_init_res;
 800b5d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3728      	adds	r7, #40	; 0x28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	080112f4 	.word	0x080112f4
 800b5e4:	2400d248 	.word	0x2400d248

0800b5e8 <Get_Value_6Axis_IMU>:

HAL_StatusTypeDef Get_Value_6Axis_IMU(AccGyroData* t_acc_gyro_Data)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
	uint8_t t_get_value_res = 0;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73fb      	strb	r3, [r7, #15]
	t_get_value_res = Get_Value_ICM20608G(&icm20608_obj);
 800b5f4:	4809      	ldr	r0, [pc, #36]	; (800b61c <Get_Value_6Axis_IMU+0x34>)
 800b5f6:	f7ff fe55 	bl	800b2a4 <Get_Value_ICM20608G>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73fb      	strb	r3, [r7, #15]

	if (t_get_value_res == HAL_OK){
 800b5fe:	7bfb      	ldrb	r3, [r7, #15]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d106      	bne.n	800b612 <Get_Value_6Axis_IMU+0x2a>
		memcpy(t_acc_gyro_Data, &icm20608_obj.value, sizeof(AccGyroData));
 800b604:	2218      	movs	r2, #24
 800b606:	4906      	ldr	r1, [pc, #24]	; (800b620 <Get_Value_6Axis_IMU+0x38>)
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f003 ff3d 	bl	800f488 <memcpy>
	} else{
		return t_get_value_res;
	}

	return t_get_value_res;
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	e000      	b.n	800b614 <Get_Value_6Axis_IMU+0x2c>
		return t_get_value_res;
 800b612:	7bfb      	ldrb	r3, [r7, #15]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	2400d248 	.word	0x2400d248
 800b620:	2400d264 	.word	0x2400d264

0800b624 <IsDevReady_I2C1>:

HAL_StatusTypeDef DeInit_I2C1( ) {return HAL_I2C_DeInit(&hi2c1);}
HAL_StatusTypeDef DeInit_I2C2( ) {return HAL_I2C_DeInit(&hi2c2);}
HAL_StatusTypeDef DeInit_I2C3( ) {return HAL_I2C_DeInit(&hi2c3);}

HAL_StatusTypeDef IsDevReady_I2C1(uint16_t t_dev_addr) {return HAL_I2C_IsDeviceReady(&hi2c1, t_dev_addr, I2C1_TRIALS, I2C1_STRAT_UP_DELAY);}
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	80fb      	strh	r3, [r7, #6]
 800b62e:	88f9      	ldrh	r1, [r7, #6]
 800b630:	2332      	movs	r3, #50	; 0x32
 800b632:	220a      	movs	r2, #10
 800b634:	4803      	ldr	r0, [pc, #12]	; (800b644 <IsDevReady_I2C1+0x20>)
 800b636:	f7fa fa8f 	bl	8005b58 <HAL_I2C_IsDeviceReady>
 800b63a:	4603      	mov	r3, r0
 800b63c:	4618      	mov	r0, r3
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	24000220 	.word	0x24000220

0800b648 <IsDevReady_I2C3>:
HAL_StatusTypeDef IsDevReady_I2C2(uint16_t t_dev_addr) {return HAL_I2C_IsDeviceReady(&hi2c2, t_dev_addr, I2C2_TRIALS, I2C2_STRAT_UP_DELAY);}
HAL_StatusTypeDef IsDevReady_I2C3(uint16_t t_dev_addr) {return HAL_I2C_IsDeviceReady(&hi2c3, t_dev_addr, I2C3_TRIALS, I2C3_STRAT_UP_DELAY);}
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	80fb      	strh	r3, [r7, #6]
 800b652:	88f9      	ldrh	r1, [r7, #6]
 800b654:	2332      	movs	r3, #50	; 0x32
 800b656:	220a      	movs	r2, #10
 800b658:	4803      	ldr	r0, [pc, #12]	; (800b668 <IsDevReady_I2C3+0x20>)
 800b65a:	f7fa fa7d 	bl	8005b58 <HAL_I2C_IsDeviceReady>
 800b65e:	4603      	mov	r3, r0
 800b660:	4618      	mov	r0, r3
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	2400015c 	.word	0x2400015c

0800b66c <Mem_Write_I2C1>:

/* I2C1 Read/Write */
HAL_StatusTypeDef Mem_Write_I2C1(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b08a      	sub	sp, #40	; 0x28
 800b670:	af04      	add	r7, sp, #16
 800b672:	607b      	str	r3, [r7, #4]
 800b674:	4603      	mov	r3, r0
 800b676:	81fb      	strh	r3, [r7, #14]
 800b678:	460b      	mov	r3, r1
 800b67a:	81bb      	strh	r3, [r7, #12]
 800b67c:	4613      	mov	r3, r2
 800b67e:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	75fb      	strb	r3, [r7, #23]

	memcpy(&i2c1_tx_buff, t_data, t_size);
 800b684:	8c3b      	ldrh	r3, [r7, #32]
 800b686:	461a      	mov	r2, r3
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	480f      	ldr	r0, [pc, #60]	; (800b6c8 <Mem_Write_I2C1+0x5c>)
 800b68c:	f003 fefc 	bl	800f488 <memcpy>
	if ( hi2c1.State != HAL_I2C_STATE_BUSY ){
 800b690:	4b0e      	ldr	r3, [pc, #56]	; (800b6cc <Mem_Write_I2C1+0x60>)
 800b692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b24      	cmp	r3, #36	; 0x24
 800b69a:	d010      	beq.n	800b6be <Mem_Write_I2C1+0x52>
		t_read_status = HAL_I2C_Mem_Write(&hi2c1, t_dev_addr, t_mem_addr, t_mem_size, &i2c1_tx_buff, t_size, I2C1_TIMEOUT);
 800b69c:	8978      	ldrh	r0, [r7, #10]
 800b69e:	89ba      	ldrh	r2, [r7, #12]
 800b6a0:	89f9      	ldrh	r1, [r7, #14]
 800b6a2:	2305      	movs	r3, #5
 800b6a4:	9302      	str	r3, [sp, #8]
 800b6a6:	8c3b      	ldrh	r3, [r7, #32]
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	4b07      	ldr	r3, [pc, #28]	; (800b6c8 <Mem_Write_I2C1+0x5c>)
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	4806      	ldr	r0, [pc, #24]	; (800b6cc <Mem_Write_I2C1+0x60>)
 800b6b2:	f7fa f845 	bl	8005740 <HAL_I2C_Mem_Write>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	75fb      	strb	r3, [r7, #23]
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	e000      	b.n	800b6c0 <Mem_Write_I2C1+0x54>
		return HAL_BUSY;
 800b6be:	2302      	movs	r3, #2
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	2400d6a8 	.word	0x2400d6a8
 800b6cc:	24000220 	.word	0x24000220

0800b6d0 <Mem_Read_I2C1>:

HAL_StatusTypeDef Mem_Read_I2C1(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af02      	add	r7, sp, #8
 800b6d6:	607b      	str	r3, [r7, #4]
 800b6d8:	4603      	mov	r3, r0
 800b6da:	81fb      	strh	r3, [r7, #14]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	81bb      	strh	r3, [r7, #12]
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	75fb      	strb	r3, [r7, #23]

	if ( hi2c1.State != HAL_I2C_STATE_BUSY ){
 800b6e8:	4b13      	ldr	r3, [pc, #76]	; (800b738 <Mem_Read_I2C1+0x68>)
 800b6ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	2b24      	cmp	r3, #36	; 0x24
 800b6f2:	d01b      	beq.n	800b72c <Mem_Read_I2C1+0x5c>
//		t_read_status = HAL_I2C_Mem_Read(&hi2c1, t_dev_addr, t_mem_addr, t_mem_size, i2c1_rx_buff, t_size, I2C1_TIMEOUT);
		t_read_status = HAL_I2C_Mem_Read_DMA(&hi2c1, t_dev_addr, t_mem_addr, t_mem_size, i2c1_rx_buff, t_size);
 800b6f4:	8978      	ldrh	r0, [r7, #10]
 800b6f6:	89ba      	ldrh	r2, [r7, #12]
 800b6f8:	89f9      	ldrh	r1, [r7, #14]
 800b6fa:	8c3b      	ldrh	r3, [r7, #32]
 800b6fc:	9301      	str	r3, [sp, #4]
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <Mem_Read_I2C1+0x6c>)
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	4603      	mov	r3, r0
 800b704:	480c      	ldr	r0, [pc, #48]	; (800b738 <Mem_Read_I2C1+0x68>)
 800b706:	f7fa f92f 	bl	8005968 <HAL_I2C_Mem_Read_DMA>
 800b70a:	4603      	mov	r3, r0
 800b70c:	75fb      	strb	r3, [r7, #23]
//		t_read_status = HAL_I2C_Master_Receive_DMA(&hi2c1, t_dev_addr, i2c1_rx_buff, t_size);
		while (HAL_DMA_GetState(&hdma_i2c1_rx) != HAL_DMA_STATE_READY){
 800b70e:	bf00      	nop
 800b710:	480b      	ldr	r0, [pc, #44]	; (800b740 <Mem_Read_I2C1+0x70>)
 800b712:	f7f7 ff71 	bl	80035f8 <HAL_DMA_GetState>
 800b716:	4603      	mov	r3, r0
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d1f9      	bne.n	800b710 <Mem_Read_I2C1+0x40>
		}
		memcpy(t_data, i2c1_rx_buff, t_size);
 800b71c:	8c3b      	ldrh	r3, [r7, #32]
 800b71e:	461a      	mov	r2, r3
 800b720:	4906      	ldr	r1, [pc, #24]	; (800b73c <Mem_Read_I2C1+0x6c>)
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f003 feb0 	bl	800f488 <memcpy>
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	e000      	b.n	800b72e <Mem_Read_I2C1+0x5e>
		return HAL_BUSY;
 800b72c:	2302      	movs	r3, #2
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3718      	adds	r7, #24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	24000220 	.word	0x24000220
 800b73c:	30000000 	.word	0x30000000
 800b740:	2400026c 	.word	0x2400026c

0800b744 <Mem_Write_I2C3>:

/* I2C3 Read/Write */
HAL_StatusTypeDef Mem_Write_I2C3(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b08a      	sub	sp, #40	; 0x28
 800b748:	af04      	add	r7, sp, #16
 800b74a:	607b      	str	r3, [r7, #4]
 800b74c:	4603      	mov	r3, r0
 800b74e:	81fb      	strh	r3, [r7, #14]
 800b750:	460b      	mov	r3, r1
 800b752:	81bb      	strh	r3, [r7, #12]
 800b754:	4613      	mov	r3, r2
 800b756:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 800b758:	2300      	movs	r3, #0
 800b75a:	75fb      	strb	r3, [r7, #23]

	memcpy(&i2c3_tx_buff, t_data, t_size);
 800b75c:	8c3b      	ldrh	r3, [r7, #32]
 800b75e:	461a      	mov	r2, r3
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	480f      	ldr	r0, [pc, #60]	; (800b7a0 <Mem_Write_I2C3+0x5c>)
 800b764:	f003 fe90 	bl	800f488 <memcpy>
	if ( hi2c3.State != HAL_I2C_STATE_BUSY ){
 800b768:	4b0e      	ldr	r3, [pc, #56]	; (800b7a4 <Mem_Write_I2C3+0x60>)
 800b76a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b24      	cmp	r3, #36	; 0x24
 800b772:	d010      	beq.n	800b796 <Mem_Write_I2C3+0x52>
		t_read_status = HAL_I2C_Mem_Write(&hi2c3, t_dev_addr, t_mem_addr, t_mem_size, &i2c3_tx_buff, t_size, I2C3_TIMEOUT);
 800b774:	8978      	ldrh	r0, [r7, #10]
 800b776:	89ba      	ldrh	r2, [r7, #12]
 800b778:	89f9      	ldrh	r1, [r7, #14]
 800b77a:	2305      	movs	r3, #5
 800b77c:	9302      	str	r3, [sp, #8]
 800b77e:	8c3b      	ldrh	r3, [r7, #32]
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	4b07      	ldr	r3, [pc, #28]	; (800b7a0 <Mem_Write_I2C3+0x5c>)
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	4603      	mov	r3, r0
 800b788:	4806      	ldr	r0, [pc, #24]	; (800b7a4 <Mem_Write_I2C3+0x60>)
 800b78a:	f7f9 ffd9 	bl	8005740 <HAL_I2C_Mem_Write>
 800b78e:	4603      	mov	r3, r0
 800b790:	75fb      	strb	r3, [r7, #23]
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	e000      	b.n	800b798 <Mem_Write_I2C3+0x54>
		return HAL_BUSY;
 800b796:	2302      	movs	r3, #2
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	2400d6a9 	.word	0x2400d6a9
 800b7a4:	2400015c 	.word	0x2400015c

0800b7a8 <Mem_Read_I2C3>:

HAL_StatusTypeDef Mem_Read_I2C3(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	607b      	str	r3, [r7, #4]
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	81fb      	strh	r3, [r7, #14]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	81bb      	strh	r3, [r7, #12]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	75fb      	strb	r3, [r7, #23]

	if ( hi2c3.State != HAL_I2C_STATE_BUSY ){
 800b7c0:	4b13      	ldr	r3, [pc, #76]	; (800b810 <Mem_Read_I2C3+0x68>)
 800b7c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	2b24      	cmp	r3, #36	; 0x24
 800b7ca:	d01b      	beq.n	800b804 <Mem_Read_I2C3+0x5c>
		t_read_status = HAL_I2C_Mem_Read_DMA(&hi2c3, t_dev_addr, t_mem_addr, t_mem_size, i2c3_rx_buff, t_size);
 800b7cc:	8978      	ldrh	r0, [r7, #10]
 800b7ce:	89ba      	ldrh	r2, [r7, #12]
 800b7d0:	89f9      	ldrh	r1, [r7, #14]
 800b7d2:	8c3b      	ldrh	r3, [r7, #32]
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	4b0f      	ldr	r3, [pc, #60]	; (800b814 <Mem_Read_I2C3+0x6c>)
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	4603      	mov	r3, r0
 800b7dc:	480c      	ldr	r0, [pc, #48]	; (800b810 <Mem_Read_I2C3+0x68>)
 800b7de:	f7fa f8c3 	bl	8005968 <HAL_I2C_Mem_Read_DMA>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	75fb      	strb	r3, [r7, #23]
//		t_read_status = HAL_I2C_Mem_Read(&hi2c3, t_dev_addr, t_mem_addr, t_mem_size, i2c3_rx_buff, t_size, I2C3_TIMEOUT);
		while (HAL_DMA_GetState(&hdma_i2c3_rx) != HAL_DMA_STATE_READY){
 800b7e6:	bf00      	nop
 800b7e8:	480b      	ldr	r0, [pc, #44]	; (800b818 <Mem_Read_I2C3+0x70>)
 800b7ea:	f7f7 ff05 	bl	80035f8 <HAL_DMA_GetState>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d1f9      	bne.n	800b7e8 <Mem_Read_I2C3+0x40>
		}
		memcpy(t_data, i2c3_rx_buff, t_size);
 800b7f4:	8c3b      	ldrh	r3, [r7, #32]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	4906      	ldr	r1, [pc, #24]	; (800b814 <Mem_Read_I2C3+0x6c>)
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f003 fe44 	bl	800f488 <memcpy>
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 800b800:	7dfb      	ldrb	r3, [r7, #23]
 800b802:	e000      	b.n	800b806 <Mem_Read_I2C3+0x5e>
		return HAL_BUSY;
 800b804:	2302      	movs	r3, #2
}
 800b806:	4618      	mov	r0, r3
 800b808:	3718      	adds	r7, #24
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	2400015c 	.word	0x2400015c
 800b814:	30000014 	.word	0x30000014
 800b818:	240001a8 	.word	0x240001a8

0800b81c <Init_IOIF_Fdcan>:

#include "ioif_fdcan.h"


void Init_IOIF_Fdcan(uint32_t t_Mask, uint32_t t_FilterID1, uint32_t t_FilterID2)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af02      	add	r7, sp, #8
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
	fdcan1_obj.hfdcan = &hfdcan1;
 800b828:	4b42      	ldr	r3, [pc, #264]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b82a:	4a43      	ldr	r2, [pc, #268]	; (800b938 <Init_IOIF_Fdcan+0x11c>)
 800b82c:	601a      	str	r2, [r3, #0]
	fdcan1_obj.mask_window = t_Mask;
 800b82e:	4a41      	ldr	r2, [pc, #260]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6713      	str	r3, [r2, #112]	; 0x70
	fdcan1_obj.filter1 = t_FilterID1;
 800b834:	4a3f      	ldr	r2, [pc, #252]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	6753      	str	r3, [r2, #116]	; 0x74
	fdcan1_obj.filter2 = t_FilterID2;
 800b83a:	4a3e      	ldr	r2, [pc, #248]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6793      	str	r3, [r2, #120]	; 0x78

	fdcan1_obj.sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800b840:	4b3c      	ldr	r3, [pc, #240]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b842:	2200      	movs	r2, #0
 800b844:	605a      	str	r2, [r3, #4]
	fdcan1_obj.sFilterConfig.FilterIndex = 0;
 800b846:	4b3b      	ldr	r3, [pc, #236]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b848:	2200      	movs	r2, #0
 800b84a:	609a      	str	r2, [r3, #8]
	fdcan1_obj.sFilterConfig.FilterType = FDCAN_FILTER_RANGE; //FDCAN_FILTER_RANGE;
 800b84c:	4b39      	ldr	r3, [pc, #228]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b84e:	2200      	movs	r2, #0
 800b850:	60da      	str	r2, [r3, #12]
	fdcan1_obj.sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800b852:	4b38      	ldr	r3, [pc, #224]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b854:	2201      	movs	r2, #1
 800b856:	611a      	str	r2, [r3, #16]
	fdcan1_obj.sFilterConfig.FilterID1 = 0x000;	// Filter ID1
 800b858:	4b36      	ldr	r3, [pc, #216]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	615a      	str	r2, [r3, #20]
	fdcan1_obj.sFilterConfig.FilterID2 = 0x7FF;	// Filter ID2
 800b85e:	4b35      	ldr	r3, [pc, #212]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b860:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b864:	619a      	str	r2, [r3, #24]

	fdcan1_obj.TxHeader.IdType = FDCAN_STANDARD_ID;
 800b866:	4b33      	ldr	r3, [pc, #204]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b868:	2200      	movs	r2, #0
 800b86a:	629a      	str	r2, [r3, #40]	; 0x28
	fdcan1_obj.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800b86c:	4b31      	ldr	r3, [pc, #196]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b86e:	2200      	movs	r2, #0
 800b870:	62da      	str	r2, [r3, #44]	; 0x2c
	fdcan1_obj.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800b872:	4b30      	ldr	r3, [pc, #192]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b874:	2200      	movs	r2, #0
 800b876:	635a      	str	r2, [r3, #52]	; 0x34
	fdcan1_obj.TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800b878:	4b2e      	ldr	r3, [pc, #184]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b87a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b87e:	639a      	str	r2, [r3, #56]	; 0x38
	fdcan1_obj.TxHeader.FDFormat = FDCAN_FD_CAN;
 800b880:	4b2c      	ldr	r3, [pc, #176]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b882:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b886:	63da      	str	r2, [r3, #60]	; 0x3c
	fdcan1_obj.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800b888:	4b2a      	ldr	r3, [pc, #168]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	641a      	str	r2, [r3, #64]	; 0x40
	fdcan1_obj.TxHeader.MessageMarker = 0;
 800b88e:	4b29      	ldr	r3, [pc, #164]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b890:	2200      	movs	r2, #0
 800b892:	645a      	str	r2, [r3, #68]	; 0x44
 
	/* Fault Check */
	if ( HAL_FDCAN_ConfigGlobalFilter ( fdcan1_obj.hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE ) != HAL_OK ){
 800b894:	4b27      	ldr	r3, [pc, #156]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b896:	6818      	ldr	r0, [r3, #0]
 800b898:	2300      	movs	r3, #0
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	2300      	movs	r3, #0
 800b89e:	2202      	movs	r2, #2
 800b8a0:	2102      	movs	r1, #2
 800b8a2:	f7f8 fd03 	bl	80042ac <HAL_FDCAN_ConfigGlobalFilter>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d001      	beq.n	800b8b0 <Init_IOIF_Fdcan+0x94>
		Error_Handler ( );  // Configure Filter
 800b8ac:	f7f5 fa5f 	bl	8000d6e <Error_Handler>
	}

	if ( HAL_FDCAN_ConfigFilter ( fdcan1_obj.hfdcan, &fdcan1_obj.sFilterConfig ) != HAL_OK ){
 800b8b0:	4b20      	ldr	r3, [pc, #128]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4921      	ldr	r1, [pc, #132]	; (800b93c <Init_IOIF_Fdcan+0x120>)
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7f8 fc82 	bl	80041c0 <HAL_FDCAN_ConfigFilter>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <Init_IOIF_Fdcan+0xaa>
		Error_Handler ( );  // Configure Filter
 800b8c2:	f7f5 fa54 	bl	8000d6e <Error_Handler>
	}

	if ( HAL_FDCAN_ActivateNotification ( fdcan1_obj.hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0 ) != HAL_OK ) {
 800b8c6:	4b1b      	ldr	r3, [pc, #108]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7f8 ff54 	bl	800477c <HAL_FDCAN_ActivateNotification>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <Init_IOIF_Fdcan+0xc2>
		Error_Handler ( );
 800b8da:	f7f5 fa48 	bl	8000d6e <Error_Handler>
	}

	if ( HAL_FDCAN_ConfigTxDelayCompensation ( fdcan1_obj.hfdcan, fdcan1_obj.hfdcan->Init.DataPrescaler * fdcan1_obj.hfdcan->Init.DataTimeSeg1, 0 ) != HAL_OK ) {
 800b8de:	4b15      	ldr	r3, [pc, #84]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b8e0:	6818      	ldr	r0, [r3, #0]
 800b8e2:	4b14      	ldr	r3, [pc, #80]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	4a12      	ldr	r2, [pc, #72]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b8ea:	6812      	ldr	r2, [r2, #0]
 800b8ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b8ee:	fb02 f303 	mul.w	r3, r2, r3
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	f7f8 fd06 	bl	8004306 <HAL_FDCAN_ConfigTxDelayCompensation>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <Init_IOIF_Fdcan+0xe8>
		Error_Handler ( );
 800b900:	f7f5 fa35 	bl	8000d6e <Error_Handler>
	}

	if ( HAL_FDCAN_EnableTxDelayCompensation ( fdcan1_obj.hfdcan ) != HAL_OK ) {
 800b904:	4b0b      	ldr	r3, [pc, #44]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4618      	mov	r0, r3
 800b90a:	f7f8 fd20 	bl	800434e <HAL_FDCAN_EnableTxDelayCompensation>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <Init_IOIF_Fdcan+0xfc>
		Error_Handler ( );
 800b914:	f7f5 fa2b 	bl	8000d6e <Error_Handler>
	}

	if ( HAL_FDCAN_Start ( fdcan1_obj.hfdcan ) != HAL_OK ) {
 800b918:	4b06      	ldr	r3, [pc, #24]	; (800b934 <Init_IOIF_Fdcan+0x118>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7f8 fd39 	bl	8004394 <HAL_FDCAN_Start>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <Init_IOIF_Fdcan+0x110>
		Error_Handler ( );
 800b928:	f7f5 fa21 	bl	8000d6e <Error_Handler>
	}
}
 800b92c:	bf00      	nop
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	2400d27c 	.word	0x2400d27c
 800b938:	240000bc 	.word	0x240000bc
 800b93c:	2400d280 	.word	0x2400d280

0800b940 <Transmit_IOIF_Fdcan>:

int Transmit_IOIF_Fdcan(uint16_t t_COB_ID, uint32_t t_len, uint8_t* t_tx_data)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	4603      	mov	r3, r0
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	81fb      	strh	r3, [r7, #14]
	fdcan1_obj.TxHeader.Identifier = t_COB_ID;
 800b94e:	89fb      	ldrh	r3, [r7, #14]
 800b950:	4a08      	ldr	r2, [pc, #32]	; (800b974 <Transmit_IOIF_Fdcan+0x34>)
 800b952:	6253      	str	r3, [r2, #36]	; 0x24
	fdcan1_obj.TxHeader.DataLength = t_len; //FDCAN_DLC_BYTES_64 //FDCAN_DLC_BYTES_32 //FDCAN_DLC_BYTES_20
 800b954:	4a07      	ldr	r2, [pc, #28]	; (800b974 <Transmit_IOIF_Fdcan+0x34>)
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	6313      	str	r3, [r2, #48]	; 0x30

	return HAL_FDCAN_AddMessageToTxFifoQ(fdcan1_obj.hfdcan, &fdcan1_obj.TxHeader, t_tx_data);
 800b95a:	4b06      	ldr	r3, [pc, #24]	; (800b974 <Transmit_IOIF_Fdcan+0x34>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	4905      	ldr	r1, [pc, #20]	; (800b978 <Transmit_IOIF_Fdcan+0x38>)
 800b962:	4618      	mov	r0, r3
 800b964:	f7f8 fd41 	bl	80043ea <HAL_FDCAN_AddMessageToTxFifoQ>
 800b968:	4603      	mov	r3, r0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	2400d27c 	.word	0x2400d27c
 800b978:	2400d2a0 	.word	0x2400d2a0

0800b97c <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
	/* Recieve Message */
	if (hfdcan->Instance == FDCAN1){
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a19      	ldr	r2, [pc, #100]	; (800b9f0 <HAL_FDCAN_RxFifo0Callback+0x74>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d12b      	bne.n	800b9e8 <HAL_FDCAN_RxFifo0Callback+0x6c>
		if (HAL_FDCAN_GetRxMessage(fdcan1_obj.hfdcan, FDCAN_RX_FIFO0, &fdcan1_obj.RxHeader, RxData1) != HAL_OK) {
 800b990:	4b18      	ldr	r3, [pc, #96]	; (800b9f4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800b992:	6818      	ldr	r0, [r3, #0]
 800b994:	4b18      	ldr	r3, [pc, #96]	; (800b9f8 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800b996:	4a19      	ldr	r2, [pc, #100]	; (800b9fc <HAL_FDCAN_RxFifo0Callback+0x80>)
 800b998:	2140      	movs	r1, #64	; 0x40
 800b99a:	f7f8 fd81 	bl	80044a0 <HAL_FDCAN_GetRxMessage>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <HAL_FDCAN_RxFifo0Callback+0x2c>
			Error_Handler();
 800b9a4:	f7f5 f9e3 	bl	8000d6e <Error_Handler>
		}
		
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 800b9a8:	4b12      	ldr	r3, [pc, #72]	; (800b9f4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800b9aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9ac:	4b11      	ldr	r3, [pc, #68]	; (800b9f4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800b9ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b0:	401a      	ands	r2, r3
 800b9b2:	4b10      	ldr	r3, [pc, #64]	; (800b9f4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800b9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d008      	beq.n	800b9cc <HAL_FDCAN_RxFifo0Callback+0x50>
			((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter2)){
 800b9ba:	4b0e      	ldr	r3, [pc, #56]	; (800b9f4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800b9bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9be:	4b0d      	ldr	r3, [pc, #52]	; (800b9f4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800b9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c2:	401a      	ands	r2, r3
 800b9c4:	4b0b      	ldr	r3, [pc, #44]	; (800b9f4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800b9c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d10c      	bne.n	800b9e6 <HAL_FDCAN_RxFifo0Callback+0x6a>
			return;
		}

		if (fdcan_rx_callback_ptr != NULL) {
 800b9cc:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <HAL_FDCAN_RxFifo0Callback+0x84>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d009      	beq.n	800b9e8 <HAL_FDCAN_RxFifo0Callback+0x6c>
			fdcan_rx_callback_ptr(fdcan1_obj.RxHeader.Identifier, RxData1);
 800b9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ba00 <HAL_FDCAN_RxFifo0Callback+0x84>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a06      	ldr	r2, [pc, #24]	; (800b9f4 <HAL_FDCAN_RxFifo0Callback+0x78>)
 800b9da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b9dc:	b292      	uxth	r2, r2
 800b9de:	4906      	ldr	r1, [pc, #24]	; (800b9f8 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
 800b9e4:	e000      	b.n	800b9e8 <HAL_FDCAN_RxFifo0Callback+0x6c>
			return;
 800b9e6:	bf00      	nop
		}
	}
}
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	4000a000 	.word	0x4000a000
 800b9f4:	2400d27c 	.word	0x2400d27c
 800b9f8:	2400d4b0 	.word	0x2400d4b0
 800b9fc:	2400d2c4 	.word	0x2400d2c4
 800ba00:	2400d068 	.word	0x2400d068

0800ba04 <Start_TIM3>:
extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim17;

int Start_TIM1()    {return HAL_TIM_Base_Start_IT(&htim1);}
int Start_TIM2()    {return HAL_TIM_Base_Start_IT(&htim2);}
int Start_TIM3()    {return HAL_TIM_Base_Start_IT(&htim3);}
 800ba04:	b580      	push	{r7, lr}
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	4802      	ldr	r0, [pc, #8]	; (800ba14 <Start_TIM3+0x10>)
 800ba0a:	f7fe f967 	bl	8009cdc <HAL_TIM_Base_Start_IT>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	4618      	mov	r0, r3
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	2400d60c 	.word	0x2400d60c

0800ba18 <Start_TIM6>:
int Start_TIM4()    {return HAL_TIM_Base_Start_IT(&htim4);}
int Start_TIM5()    {return HAL_TIM_Base_Start_IT(&htim5);}
int Start_TIM6()    {return HAL_TIM_Base_Start_IT(&htim6);}
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	4802      	ldr	r0, [pc, #8]	; (800ba28 <Start_TIM6+0x10>)
 800ba1e:	f7fe f95d 	bl	8009cdc <HAL_TIM_Base_Start_IT>
 800ba22:	4603      	mov	r3, r0
 800ba24:	4618      	mov	r0, r3
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	2400d658 	.word	0x2400d658

0800ba2c <HAL_TIM_PeriodElapsedCallback>:
{
	t_semaphore->semaphore = 0; // Release the semaphore
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	/* Timer 3(APB1) - Imu Ctrl Task CallBack*/
	if (htim->Instance == htim3.Instance) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	4b0d      	ldr	r3, [pc, #52]	; (800ba70 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d106      	bne.n	800ba4e <HAL_TIM_PeriodElapsedCallback+0x22>
		if (ioif_tim3_callback_ptr != NULL) {
 800ba40:	4b0c      	ldr	r3, [pc, #48]	; (800ba74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <HAL_TIM_PeriodElapsedCallback+0x22>
			ioif_tim3_callback_ptr( );
 800ba48:	4b0a      	ldr	r3, [pc, #40]	; (800ba74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4798      	blx	r3
		}
	}

	/* Timer 6(APB1) - Msg hdlr Task CallBack*/
	if (htim->Instance == htim6.Instance) {
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	4b09      	ldr	r3, [pc, #36]	; (800ba78 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d106      	bne.n	800ba68 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (ioif_tim6_callback_ptr != NULL) {
 800ba5a:	4b08      	ldr	r3, [pc, #32]	; (800ba7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d002      	beq.n	800ba68 <HAL_TIM_PeriodElapsedCallback+0x3c>
			ioif_tim6_callback_ptr( );
 800ba62:	4b06      	ldr	r3, [pc, #24]	; (800ba7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4798      	blx	r3
		}
	}
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	2400d60c 	.word	0x2400d60c
 800ba74:	2400d008 	.word	0x2400d008
 800ba78:	2400d658 	.word	0x2400d658
 800ba7c:	2400045c 	.word	0x2400045c

0800ba80 <Reset_Parameters>:

*/

/* Reset Value Zero */
static void Reset_Parameters( )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b0d4      	sub	sp, #336	; 0x150
 800ba84:	af00      	add	r7, sp, #0
	sensor_params 		= 	(Sensor_Params){0};
 800ba86:	4b2a      	ldr	r3, [pc, #168]	; (800bb30 <Reset_Parameters+0xb0>)
 800ba88:	4618      	mov	r0, r3
 800ba8a:	2348      	movs	r3, #72	; 0x48
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	2100      	movs	r1, #0
 800ba90:	f003 fd08 	bl	800f4a4 <memset>
	norm_params 		= 	(Normalization_Params){0};
 800ba94:	4b27      	ldr	r3, [pc, #156]	; (800bb34 <Reset_Parameters+0xb4>)
 800ba96:	4618      	mov	r0, r3
 800ba98:	2334      	movs	r3, #52	; 0x34
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	f003 fd01 	bl	800f4a4 <memset>
	gait_params 		= 	(Gait_Params){0};
 800baa2:	4b25      	ldr	r3, [pc, #148]	; (800bb38 <Reset_Parameters+0xb8>)
 800baa4:	461a      	mov	r2, r3
 800baa6:	2300      	movs	r3, #0
 800baa8:	6013      	str	r3, [r2, #0]
 800baaa:	6053      	str	r3, [r2, #4]
 800baac:	6093      	str	r3, [r2, #8]
	fuzzy_params 		= 	(Fuzzy_Params){0};
 800baae:	4b23      	ldr	r3, [pc, #140]	; (800bb3c <Reset_Parameters+0xbc>)
 800bab0:	4618      	mov	r0, r3
 800bab2:	232c      	movs	r3, #44	; 0x2c
 800bab4:	461a      	mov	r2, r3
 800bab6:	2100      	movs	r1, #0
 800bab8:	f003 fcf4 	bl	800f4a4 <memset>
	thigh_angle_params 	= 	(Thigh_Angle_Params){0};
 800babc:	4b20      	ldr	r3, [pc, #128]	; (800bb40 <Reset_Parameters+0xc0>)
 800babe:	4618      	mov	r0, r3
 800bac0:	2348      	movs	r3, #72	; 0x48
 800bac2:	461a      	mov	r2, r3
 800bac4:	2100      	movs	r1, #0
 800bac6:	f003 fced 	bl	800f4a4 <memset>
	th_params 			= 	(Threshold_Params){0};
 800baca:	4b1e      	ldr	r3, [pc, #120]	; (800bb44 <Reset_Parameters+0xc4>)
 800bacc:	461a      	mov	r2, r3
 800bace:	2300      	movs	r3, #0
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	6053      	str	r3, [r2, #4]
 800bad4:	6093      	str	r3, [r2, #8]
 800bad6:	60d3      	str	r3, [r2, #12]
	plantar_params      = 	(Plantar_Params){0};
 800bad8:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <Reset_Parameters+0xc8>)
 800bada:	461a      	mov	r2, r3
 800badc:	2300      	movs	r3, #0
 800bade:	6013      	str	r3, [r2, #0]
 800bae0:	6053      	str	r3, [r2, #4]
 800bae2:	6093      	str	r3, [r2, #8]
 800bae4:	60d3      	str	r3, [r2, #12]
 800bae6:	6113      	str	r3, [r2, #16]
 800bae8:	6153      	str	r3, [r2, #20]
 800baea:	6193      	str	r3, [r2, #24]
	dorsi_params		= 	(Dorsi_Params){0};
 800baec:	4b17      	ldr	r3, [pc, #92]	; (800bb4c <Reset_Parameters+0xcc>)
 800baee:	461a      	mov	r2, r3
 800baf0:	2300      	movs	r3, #0
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	6053      	str	r3, [r2, #4]
 800baf6:	6093      	str	r3, [r2, #8]
 800baf8:	60d3      	str	r3, [r2, #12]
 800bafa:	6113      	str	r3, [r2, #16]
 800bafc:	6153      	str	r3, [r2, #20]
 800bafe:	6193      	str	r3, [r2, #24]
	assist_params		= 	(Assist_Params){0};
 800bb00:	4b13      	ldr	r3, [pc, #76]	; (800bb50 <Reset_Parameters+0xd0>)
 800bb02:	2200      	movs	r2, #0
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	809a      	strh	r2, [r3, #4]

	walking 				=	0;
 800bb08:	4b12      	ldr	r3, [pc, #72]	; (800bb54 <Reset_Parameters+0xd4>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	701a      	strb	r2, [r3, #0]
	attach_plane 			=	e_LEFT_SAGITAL;
 800bb0e:	4b12      	ldr	r3, [pc, #72]	; (800bb58 <Reset_Parameters+0xd8>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	701a      	strb	r2, [r3, #0]
	wc_test					= 	0.0;
 800bb14:	4b11      	ldr	r3, [pc, #68]	; (800bb5c <Reset_Parameters+0xdc>)
 800bb16:	f04f 0200 	mov.w	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
	thigh_angle_tvcf_demo   =   0.0;
 800bb1c:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <Reset_Parameters+0xe0>)
 800bb1e:	f04f 0200 	mov.w	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]
}
 800bb24:	bf00      	nop
 800bb26:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	2400d200 	.word	0x2400d200
 800bb34:	2400d508 	.word	0x2400d508
 800bb38:	2400d1d4 	.word	0x2400d1d4
 800bb3c:	2400d020 	.word	0x2400d020
 800bb40:	2400d0ec 	.word	0x2400d0ec
 800bb44:	240032d8 	.word	0x240032d8
 800bb48:	2400d198 	.word	0x2400d198
 800bb4c:	2400d17c 	.word	0x2400d17c
 800bb50:	2400d060 	.word	0x2400d060
 800bb54:	240032d4 	.word	0x240032d4
 800bb58:	2400d2fc 	.word	0x2400d2fc
 800bb5c:	2400d500 	.word	0x2400d500
 800bb60:	2400d010 	.word	0x2400d010

0800bb64 <Set_Initial_Angle_Values>:


static void Set_Initial_Angle_Values(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, float t_initial_angle)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	ed87 0a01 	vstr	s0, [r7, #4]
    t_thigh_angle_params->deg_acc_filtered = t_initial_angle;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	60da      	str	r2, [r3, #12]
    t_thigh_angle_params->deg_gyr_filtered = 0;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f04f 0200 	mov.w	r2, #0
 800bb7e:	611a      	str	r2, [r3, #16]
    t_thigh_angle_params->deg_LPF_1st[0] = t_initial_angle;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	629a      	str	r2, [r3, #40]	; 0x28
    t_thigh_angle_params->deg_LPF_1st[1] = t_initial_angle;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	62da      	str	r2, [r3, #44]	; 0x2c
    t_thigh_angle_params->deg_LPF_2nd[0] = t_initial_angle;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	631a      	str	r2, [r3, #48]	; 0x30
    t_thigh_angle_params->deg_LPF_2nd[1] = t_initial_angle;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	635a      	str	r2, [r3, #52]	; 0x34
    t_norm_params->deg_o = t_initial_angle;
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	601a      	str	r2, [r3, #0]
}
 800bb9e:	bf00      	nop
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	0000      	movs	r0, r0
 800bbac:	0000      	movs	r0, r0
	...

0800bbb0 <Calculate_Initial_Thigh_Angle>:

/*
 *Function to calculate the initial thigh angle
*/
static void Calculate_Initial_Thigh_Angle(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, AccGyroData* t_acc_gyro_data, AttachPlane t_attach_plane)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b08a      	sub	sp, #40	; 0x28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	70fb      	strb	r3, [r7, #3]
	uint8_t t_total_samples = 100;
 800bbbe:	2364      	movs	r3, #100	; 0x64
 800bbc0:	75fb      	strb	r3, [r7, #23]
	float t_accumulated_angle = 0.0;
 800bbc2:	f04f 0300 	mov.w	r3, #0
 800bbc6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data_check = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	75bb      	strb	r3, [r7, #22]
	float t_init_thigh_angle = 0.0;
 800bbcc:	f04f 0300 	mov.w	r3, #0
 800bbd0:	623b      	str	r3, [r7, #32]

	for (uint8_t i = 1; i <= t_total_samples; i++){
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	77fb      	strb	r3, [r7, #31]
 800bbd6:	e088      	b.n	800bcea <Calculate_Initial_Thigh_Angle+0x13a>
        data_check = Get_Value_6Axis_IMU(t_acc_gyro_data);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7ff fd05 	bl	800b5e8 <Get_Value_6Axis_IMU>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	75bb      	strb	r3, [r7, #22]
        if (data_check == 0){
 800bbe2:	7dbb      	ldrb	r3, [r7, #22]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d177      	bne.n	800bcd8 <Calculate_Initial_Thigh_Angle+0x128>
    		/* Calculate the accelerometer angle (in degrees) */
            float accelerometer_angle = 0.0;
 800bbe8:	f04f 0300 	mov.w	r3, #0
 800bbec:	61bb      	str	r3, [r7, #24]

            if (t_attach_plane == e_LEFT_SAGITAL){
 800bbee:	78fb      	ldrb	r3, [r7, #3]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d11e      	bne.n	800bc32 <Calculate_Initial_Thigh_Angle+0x82>
            	accelerometer_angle = (atan2((t_acc_gyro_data->acc_y)*(-1), (t_acc_gyro_data->acc_x)*(-1))) * (180 / PI);	// arctan(-y/-x) Left Sagital case
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	edd3 7a01 	vldr	s15, [r3, #4]
 800bbfa:	eef1 7a67 	vneg.f32	s15, s15
 800bbfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	edd3 6a00 	vldr	s13, [r3]
 800bc08:	eef1 6a66 	vneg.f32	s13, s13
 800bc0c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800bc10:	eeb0 1b46 	vmov.f64	d1, d6
 800bc14:	eeb0 0b47 	vmov.f64	d0, d7
 800bc18:	f005 f860 	bl	8010cdc <atan2>
 800bc1c:	eeb0 7b40 	vmov.f64	d7, d0
 800bc20:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800bd10 <Calculate_Initial_Thigh_Angle+0x160>
 800bc24:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bc2c:	edc7 7a06 	vstr	s15, [r7, #24]
 800bc30:	e03e      	b.n	800bcb0 <Calculate_Initial_Thigh_Angle+0x100>
            }
            else if (t_attach_plane == e_RIGHT_SAGITAL){
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d11c      	bne.n	800bc72 <Calculate_Initial_Thigh_Angle+0xc2>
            	accelerometer_angle = (atan2(t_acc_gyro_data->acc_y, (t_acc_gyro_data->acc_x)*(-1))) * (180 / PI);	// arctan(y/-x) Right Sagital case
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	edd3 6a00 	vldr	s13, [r3]
 800bc48:	eef1 6a66 	vneg.f32	s13, s13
 800bc4c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800bc50:	eeb0 1b46 	vmov.f64	d1, d6
 800bc54:	eeb0 0b47 	vmov.f64	d0, d7
 800bc58:	f005 f840 	bl	8010cdc <atan2>
 800bc5c:	eeb0 7b40 	vmov.f64	d7, d0
 800bc60:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 800bd10 <Calculate_Initial_Thigh_Angle+0x160>
 800bc64:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc68:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bc6c:	edc7 7a06 	vstr	s15, [r7, #24]
 800bc70:	e01e      	b.n	800bcb0 <Calculate_Initial_Thigh_Angle+0x100>
            }
            else if (t_attach_plane == e_LEFT_SAGITAL_DEMO){
 800bc72:	78fb      	ldrb	r3, [r7, #3]
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d11b      	bne.n	800bcb0 <Calculate_Initial_Thigh_Angle+0x100>
            	accelerometer_angle = (atan2(t_acc_gyro_data->acc_x, (t_acc_gyro_data->acc_y)*(-1))) * (180 / PI);	// arctan(x/-y) Left Sagital - DEMO ver case
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	edd3 7a00 	vldr	s15, [r3]
 800bc7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	edd3 6a01 	vldr	s13, [r3, #4]
 800bc88:	eef1 6a66 	vneg.f32	s13, s13
 800bc8c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800bc90:	eeb0 1b46 	vmov.f64	d1, d6
 800bc94:	eeb0 0b47 	vmov.f64	d0, d7
 800bc98:	f005 f820 	bl	8010cdc <atan2>
 800bc9c:	eeb0 7b40 	vmov.f64	d7, d0
 800bca0:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 800bd10 <Calculate_Initial_Thigh_Angle+0x160>
 800bca4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bca8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bcac:	edc7 7a06 	vstr	s15, [r7, #24]
            }

    		/* Accumulate the accelerometer angle */
            t_accumulated_angle += accelerometer_angle;
 800bcb0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bcb4:	edd7 7a06 	vldr	s15, [r7, #24]
 800bcb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcbc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    		/* Calculate and update the initial thigh angle (average) */
            t_init_thigh_angle = t_accumulated_angle / ((float)i);
 800bcc0:	7ffb      	ldrb	r3, [r7, #31]
 800bcc2:	ee07 3a90 	vmov	s15, r3
 800bcc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bcca:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800bcce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcd2:	edc7 7a08 	vstr	s15, [r7, #32]
 800bcd6:	e005      	b.n	800bce4 <Calculate_Initial_Thigh_Angle+0x134>
        }
        else{

        	i--;
 800bcd8:	7ffb      	ldrb	r3, [r7, #31]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	77fb      	strb	r3, [r7, #31]
        	err_chk = 50;
 800bcde:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <Calculate_Initial_Thigh_Angle+0x168>)
 800bce0:	2232      	movs	r2, #50	; 0x32
 800bce2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i <= t_total_samples; i++){
 800bce4:	7ffb      	ldrb	r3, [r7, #31]
 800bce6:	3301      	adds	r3, #1
 800bce8:	77fb      	strb	r3, [r7, #31]
 800bcea:	7ffa      	ldrb	r2, [r7, #31]
 800bcec:	7dfb      	ldrb	r3, [r7, #23]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	f67f af72 	bls.w	800bbd8 <Calculate_Initial_Thigh_Angle+0x28>
        }
    }

	t_thigh_angle_params->angle_init = t_init_thigh_angle;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6a3a      	ldr	r2, [r7, #32]
 800bcf8:	601a      	str	r2, [r3, #0]
    Set_Initial_Angle_Values(t_thigh_angle_params, t_norm_params, t_init_thigh_angle);
 800bcfa:	ed97 0a08 	vldr	s0, [r7, #32]
 800bcfe:	68b9      	ldr	r1, [r7, #8]
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f7ff ff2f 	bl	800bb64 <Set_Initial_Angle_Values>
}
 800bd06:	bf00      	nop
 800bd08:	3728      	adds	r7, #40	; 0x28
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	7e61df46 	.word	0x7e61df46
 800bd14:	404ca5dc 	.word	0x404ca5dc
 800bd18:	2400d468 	.word	0x2400d468

0800bd1c <Run_Complementary_Filter>:

/*
 *Function to execute the time-varying complementary filter (with Fuzzy Logic - wc)
*/
static void Run_Complementary_Filter(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Fuzzy_Params* t_fuzzy_params, float t_sampling_Period, AttachPlane t_attach_plane)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6178      	str	r0, [r7, #20]
 800bd24:	6139      	str	r1, [r7, #16]
 800bd26:	60fa      	str	r2, [r7, #12]
 800bd28:	ed87 0a02 	vstr	s0, [r7, #8]
 800bd2c:	71fb      	strb	r3, [r7, #7]
	/* Apply time-varying complementary filter on the sensor data using fuzzy logic(wc) and update the thigh angle parameters */
	Run_TVCF(t_sensor_params, t_thigh_angle_params, t_fuzzy_params->wc, t_sampling_Period, t_attach_plane);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	edd3 7a04 	vldr	s15, [r3, #16]
 800bd34:	79fb      	ldrb	r3, [r7, #7]
 800bd36:	461a      	mov	r2, r3
 800bd38:	edd7 0a02 	vldr	s1, [r7, #8]
 800bd3c:	eeb0 0a67 	vmov.f32	s0, s15
 800bd40:	6939      	ldr	r1, [r7, #16]
 800bd42:	6978      	ldr	r0, [r7, #20]
 800bd44:	f000 ffd4 	bl	800ccf0 <Run_TVCF>
	/* Update the unfiltered thigh angle to be the same as the filtered thigh angle */
	t_thigh_angle_params->deg_tvcf[0] = t_thigh_angle_params->deg_tvcf_filtered;
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	695a      	ldr	r2, [r3, #20]
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	621a      	str	r2, [r3, #32]
}
 800bd50:	bf00      	nop
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <Run_Normalization_And_Get_Gait_Phase>:

/*
 *Function to normalize sensor data and calculate the current phase of the gait
*/
static void Run_Normalization_And_Get_Gait_Phase(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
	/* Prepare for circular normalization by finding the center point of the original ellipse */
	Prepare_for_Circular_Normalization(t_thigh_angle_params, t_norm_params, t_gait_params);
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	68b9      	ldr	r1, [r7, #8]
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f001 f97a 	bl	800d062 <Prepare_for_Circular_Normalization>

	/* Normalize degree and velocity data based on calculated origin and amplitude */
	t_norm_params->deg_norm = (t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o) / t_norm_params->A_deg;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	edd3 7a00 	vldr	s15, [r3]
 800bd7a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800bd84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	t_norm_params->vel_norm = (t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o) / t_norm_params->A_vel;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	edd3 7a01 	vldr	s15, [r3, #4]
 800bd9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800bda4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	/* Calculate and update the current phase of the gait */
	t_gait_params->gait_phase = Get_Current_Gait_Phase(t_norm_params, t_gait_params); // Current phase (0 ~ 100%)
 800bdae:	6879      	ldr	r1, [r7, #4]
 800bdb0:	68b8      	ldr	r0, [r7, #8]
 800bdb2:	f001 f991 	bl	800d0d8 <Get_Current_Gait_Phase>
 800bdb6:	eef0 7a40 	vmov.f32	s15, s0
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800bdc0:	bf00      	nop
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <Reduce_Noise_In_Sensor_Data>:

/*
 *Function to reduce noise in sensor data
*/
static void Reduce_Noise_In_Sensor_Data(Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
	float t_dt = 1000.0;
 800bdd2:	4b49      	ldr	r3, [pc, #292]	; (800bef8 <Reduce_Noise_In_Sensor_Data+0x130>)
 800bdd4:	617b      	str	r3, [r7, #20]
	float w_target = Get_Max_Float(0.3, t_dt/t_gait_params->gait_period);
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	ee07 3a90 	vmov	s15, r3
 800bdde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bde2:	ed97 7a05 	vldr	s14, [r7, #20]
 800bde6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bdea:	eef0 0a66 	vmov.f32	s1, s13
 800bdee:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800befc <Reduce_Noise_In_Sensor_Data+0x134>
 800bdf2:	f001 f831 	bl	800ce58 <Get_Max_Float>
 800bdf6:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_lpf_freq = 2.5 * w_target * 2 * PI;
 800bdfa:	edd7 7a04 	vldr	s15, [r7, #16]
 800bdfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800be02:	eeb0 6b04 	vmov.f64	d6, #4	; 0x40200000  2.5
 800be06:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be0a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800be0e:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800bef0 <Reduce_Noise_In_Sensor_Data+0x128>
 800be12:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800be1a:	edc7 7a03 	vstr	s15, [r7, #12]

	/* First LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_1st[0] = Perform_LPF_on_Acc(
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	edd3 7a08 	vldr	s15, [r3, #32]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800be2a:	eddf 1a35 	vldr	s3, [pc, #212]	; 800bf00 <Reduce_Noise_In_Sensor_Data+0x138>
 800be2e:	ed97 1a03 	vldr	s2, [r7, #12]
 800be32:	eef0 0a47 	vmov.f32	s1, s14
 800be36:	eeb0 0a67 	vmov.f32	s0, s15
 800be3a:	f000 fef8 	bl	800cc2e <Perform_LPF_on_Acc>
 800be3e:	eef0 7a40 	vmov.f32	s15, s0
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_2nd[0] = Perform_LPF_on_Acc(
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800be54:	eddf 1a2a 	vldr	s3, [pc, #168]	; 800bf00 <Reduce_Noise_In_Sensor_Data+0x138>
 800be58:	ed97 1a03 	vldr	s2, [r7, #12]
 800be5c:	eef0 0a47 	vmov.f32	s1, s14
 800be60:	eeb0 0a67 	vmov.f32	s0, s15
 800be64:	f000 fee3 	bl	800cc2e <Perform_LPF_on_Acc>
 800be68:	eef0 7a40 	vmov.f32	s15, s0
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Compute raw velocity from angle data */
	t_thigh_angle_params->vel_raw[0] = (t_thigh_angle_params->deg_tvcf[0] - t_thigh_angle_params->deg_tvcf[1]) * t_dt;											// dt = 0.001sec
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	ed93 7a08 	vldr	s14, [r3, #32]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800be7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800be82:	edd7 7a05 	vldr	s15, [r7, #20]
 800be86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	edc3 7a06 	vstr	s15, [r3, #24]

	/* First LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_1st[0] = Perform_LPF_on_Acc(
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	edd3 7a06 	vldr	s15, [r3, #24]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800be9c:	eddf 1a18 	vldr	s3, [pc, #96]	; 800bf00 <Reduce_Noise_In_Sensor_Data+0x138>
 800bea0:	ed97 1a03 	vldr	s2, [r7, #12]
 800bea4:	eef0 0a47 	vmov.f32	s1, s14
 800bea8:	eeb0 0a67 	vmov.f32	s0, s15
 800beac:	f000 febf 	bl	800cc2e <Perform_LPF_on_Acc>
 800beb0:	eef0 7a40 	vmov.f32	s15, s0
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_2nd[0] = Perform_LPF_on_Acc(
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800bec6:	eddf 1a0e 	vldr	s3, [pc, #56]	; 800bf00 <Reduce_Noise_In_Sensor_Data+0x138>
 800beca:	ed97 1a03 	vldr	s2, [r7, #12]
 800bece:	eef0 0a47 	vmov.f32	s1, s14
 800bed2:	eeb0 0a67 	vmov.f32	s0, s15
 800bed6:	f000 feaa 	bl	800cc2e <Perform_LPF_on_Acc>
 800beda:	eef0 7a40 	vmov.f32	s15, s0
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		t_thigh_angle_params->vel_LPF_1st[0],
		t_thigh_angle_params->vel_LPF_2nd[1],
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);
}
 800bee4:	bf00      	nop
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	f3af 8000 	nop.w
 800bef0:	fc8b007a 	.word	0xfc8b007a
 800bef4:	400921fa 	.word	0x400921fa
 800bef8:	447a0000 	.word	0x447a0000
 800befc:	3e99999a 	.word	0x3e99999a
 800bf00:	3a83126f 	.word	0x3a83126f

0800bf04 <Compute_Phase_Radius>:

/*
 *This function calculates and returns the phase radius
*/
static float Compute_Phase_Radius(float t_deg_diff, float t_deg_th, float t_vel_diff, float t_vel_th)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	ed87 0a03 	vstr	s0, [r7, #12]
 800bf0e:	edc7 0a02 	vstr	s1, [r7, #8]
 800bf12:	ed87 1a01 	vstr	s2, [r7, #4]
 800bf16:	edc7 1a00 	vstr	s3, [r7]
    /* Calculate degree ratio */
    float t_deg_ratio = t_deg_diff / t_deg_th;
 800bf1a:	edd7 6a03 	vldr	s13, [r7, #12]
 800bf1e:	ed97 7a02 	vldr	s14, [r7, #8]
 800bf22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf26:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Calculate velocity ratio */
    float t_vel_ratio = t_vel_diff / t_vel_th;
 800bf2a:	edd7 6a01 	vldr	s13, [r7, #4]
 800bf2e:	ed97 7a00 	vldr	s14, [r7]
 800bf32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf36:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Calculate and return the phase radius */
    return Calculate_Square_Root_Sum(t_deg_ratio, t_vel_ratio);
 800bf3a:	edd7 0a04 	vldr	s1, [r7, #16]
 800bf3e:	ed97 0a05 	vldr	s0, [r7, #20]
 800bf42:	f000 fd11 	bl	800c968 <Calculate_Square_Root_Sum>
 800bf46:	eef0 7a40 	vmov.f32	s15, s0
}
 800bf4a:	eeb0 0a67 	vmov.f32	s0, s15
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <Update_Walking_State>:

/*
 *This function updates the walking state based on the phase radii and sum_i
*/
static void Update_Walking_State(uint8_t* t_walking, float t_phase_radius_start, float t_phase_radius_stop, int16_t t_sum_i)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	ed87 0a02 	vstr	s0, [r7, #8]
 800bf60:	edc7 0a01 	vstr	s1, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	807b      	strh	r3, [r7, #2]
    /* The walking state is updated based on the current walking state, phase radii, and t_sum_i */
    switch (*t_walking)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d01d      	beq.n	800bfac <Update_Walking_State+0x58>
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	dc23      	bgt.n	800bfbc <Update_Walking_State+0x68>
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d002      	beq.n	800bf7e <Update_Walking_State+0x2a>
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d00e      	beq.n	800bf9a <Update_Walking_State+0x46>
 800bf7c:	e01e      	b.n	800bfbc <Update_Walking_State+0x68>
    {
        case e_STOP:
            /* If the start phase radius is greater than 1, set the walking state to 1 */
            if (t_phase_radius_start > 1){
 800bf7e:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf86:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf8e:	dc00      	bgt.n	800bf92 <Update_Walking_State+0x3e>
                *t_walking = 1;
            }
            break;
 800bf90:	e025      	b.n	800bfde <Update_Walking_State+0x8a>
                *t_walking = 1;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2201      	movs	r2, #1
 800bf96:	701a      	strb	r2, [r3, #0]
            break;
 800bf98:	e021      	b.n	800bfde <Update_Walking_State+0x8a>
        case e_WALKING_START:
            /* If sum_i is greater than 1000, set the walking state to 2 */
            if (t_sum_i > 1000){
 800bf9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfa2:	dd19      	ble.n	800bfd8 <Update_Walking_State+0x84>
                *t_walking = 2;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800bfaa:	e015      	b.n	800bfd8 <Update_Walking_State+0x84>
        case e_WALKING_HALF:
            /* If sum_i is 0, set the walking state to 3 */
            if (t_sum_i == 0){
 800bfac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d113      	bne.n	800bfdc <Update_Walking_State+0x88>
                *t_walking = 3;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	701a      	strb	r2, [r3, #0]
            }
            break;
 800bfba:	e00f      	b.n	800bfdc <Update_Walking_State+0x88>
        default:
            /* If the stop phase radius is less than 1, set the walking state to 0 */
            if (t_phase_radius_stop < 1){
 800bfbc:	edd7 7a01 	vldr	s15, [r7, #4]
 800bfc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfcc:	d400      	bmi.n	800bfd0 <Update_Walking_State+0x7c>
                *t_walking = 0;
            }
            break;
 800bfce:	e006      	b.n	800bfde <Update_Walking_State+0x8a>
                *t_walking = 0;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	701a      	strb	r2, [r3, #0]
            break;
 800bfd6:	e002      	b.n	800bfde <Update_Walking_State+0x8a>
            break;
 800bfd8:	bf00      	nop
 800bfda:	e000      	b.n	800bfde <Update_Walking_State+0x8a>
            break;
 800bfdc:	bf00      	nop
    }
}
 800bfde:	bf00      	nop
 800bfe0:	3714      	adds	r7, #20
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
	...

0800bfec <Check_Walking_State>:

/*
*This function checks the walking state using the walking parameters and IMU system information
*/
static void Check_Walking_State(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Threshold_Params* t_th_params, Gait_Params* t_gait_params, uint8_t* t_walking)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b088      	sub	sp, #32
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
	float t_deg_diff = 0.0;
 800bffa:	f04f 0300 	mov.w	r3, #0
 800bffe:	61fb      	str	r3, [r7, #28]
	float t_vel_diff = 0.0;
 800c000:	f04f 0300 	mov.w	r3, #0
 800c004:	61bb      	str	r3, [r7, #24]
	float t_phase_radius_start = 0.0;
 800c006:	f04f 0300 	mov.w	r3, #0
 800c00a:	617b      	str	r3, [r7, #20]
	float t_phase_radius_stop = 0.0;
 800c00c:	f04f 0300 	mov.w	r3, #0
 800c010:	613b      	str	r3, [r7, #16]

    /* Get the relevant values from the walking parameters and IMU system */
    t_deg_diff = t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	edd3 7a00 	vldr	s15, [r3]
 800c01e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c022:	edc7 7a07 	vstr	s15, [r7, #28]
    t_vel_diff = t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c032:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c036:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Calculate the start and stop phase radii */
    t_phase_radius_start = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_start, t_vel_diff, t_th_params->vel_th_start);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	edd3 7a00 	vldr	s15, [r3]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	ed93 7a01 	vldr	s14, [r3, #4]
 800c046:	eef0 1a47 	vmov.f32	s3, s14
 800c04a:	ed97 1a06 	vldr	s2, [r7, #24]
 800c04e:	eef0 0a67 	vmov.f32	s1, s15
 800c052:	ed97 0a07 	vldr	s0, [r7, #28]
 800c056:	f7ff ff55 	bl	800bf04 <Compute_Phase_Radius>
 800c05a:	ed87 0a05 	vstr	s0, [r7, #20]
    t_phase_radius_stop = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_stop, t_vel_diff, t_th_params->vel_th_stop);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	edd3 7a02 	vldr	s15, [r3, #8]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	ed93 7a03 	vldr	s14, [r3, #12]
 800c06a:	eef0 1a47 	vmov.f32	s3, s14
 800c06e:	ed97 1a06 	vldr	s2, [r7, #24]
 800c072:	eef0 0a67 	vmov.f32	s1, s15
 800c076:	ed97 0a07 	vldr	s0, [r7, #28]
 800c07a:	f7ff ff43 	bl	800bf04 <Compute_Phase_Radius>
 800c07e:	ed87 0a04 	vstr	s0, [r7, #16]

    /* Update the walking state based on the phase radii and sum_i */
    Update_Walking_State(t_walking, t_phase_radius_start, t_phase_radius_stop, t_norm_params->sum_i);
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	8a1b      	ldrh	r3, [r3, #16]
 800c086:	b21b      	sxth	r3, r3
 800c088:	4619      	mov	r1, r3
 800c08a:	edd7 0a04 	vldr	s1, [r7, #16]
 800c08e:	ed97 0a05 	vldr	s0, [r7, #20]
 800c092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c094:	f7ff ff5e 	bl	800bf54 <Update_Walking_State>

    /* If the walking state is 0 or 1, set the gait phase to -100 */
    if (*t_walking == 0 || *t_walking == 1){
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d003      	beq.n	800c0a8 <Check_Walking_State+0xbc>
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d102      	bne.n	800c0ae <Check_Walking_State+0xc2>
        t_gait_params->gait_phase = -100;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	4a03      	ldr	r2, [pc, #12]	; (800c0b8 <Check_Walking_State+0xcc>)
 800c0ac:	605a      	str	r2, [r3, #4]
    }
}
 800c0ae:	bf00      	nop
 800c0b0:	3720      	adds	r7, #32
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	c2c80000 	.word	0xc2c80000

0800c0bc <Setting_Assist_Time>:


static void Setting_Assist_Time(Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	603b      	str	r3, [r7, #0]
	Set_Assist_Force_Timing_Params(t_plantar_params, t_dorsi_params, t_assist_params, t_gait_params);
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	68b9      	ldr	r1, [r7, #8]
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f001 f91f 	bl	800d314 <Set_Assist_Force_Timing_Params>
}
 800c0d6:	bf00      	nop
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <Update_IMU_Raw_Value>:

/*
*The function Update_IMU_Raw_Value updates the IMU raw values.
*/
static void Update_IMU_Raw_Value(Sensor_Params* t_sensor_params, AccGyroData* t_acc_gyro_data, MagData* t_mag_data, AttachPlane t_attach_plane)
{
 800c0de:	b480      	push	{r7}
 800c0e0:	b085      	sub	sp, #20
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	60f8      	str	r0, [r7, #12]
 800c0e6:	60b9      	str	r1, [r7, #8]
 800c0e8:	607a      	str	r2, [r7, #4]
 800c0ea:	70fb      	strb	r3, [r7, #3]
	t_sensor_params->accX[0] = t_acc_gyro_data->acc_x;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	601a      	str	r2, [r3, #0]
	t_sensor_params->accY[0] = t_acc_gyro_data->acc_y;
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	685a      	ldr	r2, [r3, #4]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	609a      	str	r2, [r3, #8]
	t_sensor_params->accZ[0] = t_acc_gyro_data->acc_z;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	689a      	ldr	r2, [r3, #8]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	611a      	str	r2, [r3, #16]

	t_sensor_params->gyrX[0] = t_acc_gyro_data->gyr_x;
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	619a      	str	r2, [r3, #24]
	t_sensor_params->gyrY[0] = t_acc_gyro_data->gyr_y;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	691a      	ldr	r2, [r3, #16]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	621a      	str	r2, [r3, #32]

	if (t_attach_plane == e_LEFT_SAGITAL || t_attach_plane == e_LEFT_SAGITAL_DEMO){
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <Update_IMU_Raw_Value+0x42>
 800c11a:	78fb      	ldrb	r3, [r7, #3]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d108      	bne.n	800c132 <Update_IMU_Raw_Value+0x54>
		t_sensor_params->gyrZ[0] = (-1) * (t_acc_gyro_data->gyr_z); 	// For Left Sagital case
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	edd3 7a05 	vldr	s15, [r3, #20]
 800c126:	eef1 7a67 	vneg.f32	s15, s15
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		t_sensor_params->gyrZ[0] = t_acc_gyro_data->gyr_z; 	// For Right Sagital case
	}
//	t_sensor_params->magX[0] = t_mag_data->mag_x;
//	t_sensor_params->magY[0] = t_mag_data->mag_y;
//	t_sensor_params->magZ[0] = t_mag_data->mag_z;
}
 800c130:	e006      	b.n	800c140 <Update_IMU_Raw_Value+0x62>
	else if (t_attach_plane == e_RIGHT_SAGITAL){
 800c132:	78fb      	ldrb	r3, [r7, #3]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d103      	bne.n	800c140 <Update_IMU_Raw_Value+0x62>
		t_sensor_params->gyrZ[0] = t_acc_gyro_data->gyr_z; 	// For Right Sagital case
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	695a      	ldr	r2, [r3, #20]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c140:	bf00      	nop
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <Run_Total_function>:

 */


static int Run_Total_function()
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af02      	add	r7, sp, #8
	thigh_angle_tvcf_demo = (-1) * thigh_angle_params.deg_tvcf_filtered;
 800c152:	4b31      	ldr	r3, [pc, #196]	; (800c218 <Run_Total_function+0xcc>)
 800c154:	edd3 7a05 	vldr	s15, [r3, #20]
 800c158:	eef1 7a67 	vneg.f32	s15, s15
 800c15c:	4b2f      	ldr	r3, [pc, #188]	; (800c21c <Run_Total_function+0xd0>)
 800c15e:	edc3 7a00 	vstr	s15, [r3]

	Save_Previous_Value(&sensor_params, &thigh_angle_params, &gait_params);
 800c162:	4a2f      	ldr	r2, [pc, #188]	; (800c220 <Run_Total_function+0xd4>)
 800c164:	492c      	ldr	r1, [pc, #176]	; (800c218 <Run_Total_function+0xcc>)
 800c166:	482f      	ldr	r0, [pc, #188]	; (800c224 <Run_Total_function+0xd8>)
 800c168:	f000 fbca 	bl	800c900 <Save_Previous_Value>

	uint8_t t_3axis_res = Get_Value_3Axis_IMU(&mag_data);
 800c16c:	482e      	ldr	r0, [pc, #184]	; (800c228 <Run_Total_function+0xdc>)
 800c16e:	f7ff f9a5 	bl	800b4bc <Get_Value_3Axis_IMU>
 800c172:	4603      	mov	r3, r0
 800c174:	71fb      	strb	r3, [r7, #7]
	if (t_3axis_res != NO_ERROR){
 800c176:	79fb      	ldrb	r3, [r7, #7]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d006      	beq.n	800c18a <Run_Total_function+0x3e>
		Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR;
 800c17c:	4b2b      	ldr	r3, [pc, #172]	; (800c22c <Run_Total_function+0xe0>)
 800c17e:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 800c182:	601a      	str	r2, [r3, #0]
		err_chk = 11;
 800c184:	4b2a      	ldr	r3, [pc, #168]	; (800c230 <Run_Total_function+0xe4>)
 800c186:	220b      	movs	r2, #11
 800c188:	701a      	strb	r2, [r3, #0]
	}
	uint8_t t_6axis_res = Get_Value_6Axis_IMU(&acc_gyro_data);
 800c18a:	482a      	ldr	r0, [pc, #168]	; (800c234 <Run_Total_function+0xe8>)
 800c18c:	f7ff fa2c 	bl	800b5e8 <Get_Value_6Axis_IMU>
 800c190:	4603      	mov	r3, r0
 800c192:	71bb      	strb	r3, [r7, #6]
	if (t_6axis_res != NO_ERROR){
 800c194:	79bb      	ldrb	r3, [r7, #6]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d006      	beq.n	800c1a8 <Run_Total_function+0x5c>
		Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR;
 800c19a:	4b24      	ldr	r3, [pc, #144]	; (800c22c <Run_Total_function+0xe0>)
 800c19c:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 800c1a0:	601a      	str	r2, [r3, #0]
		err_chk = 33;
 800c1a2:	4b23      	ldr	r3, [pc, #140]	; (800c230 <Run_Total_function+0xe4>)
 800c1a4:	2221      	movs	r2, #33	; 0x21
 800c1a6:	701a      	strb	r2, [r3, #0]
	}

	Update_IMU_Raw_Value(&sensor_params, &acc_gyro_data, &mag_data, attach_plane);
 800c1a8:	4b23      	ldr	r3, [pc, #140]	; (800c238 <Run_Total_function+0xec>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	4a1e      	ldr	r2, [pc, #120]	; (800c228 <Run_Total_function+0xdc>)
 800c1ae:	4921      	ldr	r1, [pc, #132]	; (800c234 <Run_Total_function+0xe8>)
 800c1b0:	481c      	ldr	r0, [pc, #112]	; (800c224 <Run_Total_function+0xd8>)
 800c1b2:	f7ff ff94 	bl	800c0de <Update_IMU_Raw_Value>

	Generate_Fuzzy_Input(&sensor_params, &fuzzy_params);
 800c1b6:	4921      	ldr	r1, [pc, #132]	; (800c23c <Run_Total_function+0xf0>)
 800c1b8:	481a      	ldr	r0, [pc, #104]	; (800c224 <Run_Total_function+0xd8>)
 800c1ba:	f000 fc89 	bl	800cad0 <Generate_Fuzzy_Input>
	wc_test = Calculate_Fuzzy_Wc(&fuzzy_params);
 800c1be:	481f      	ldr	r0, [pc, #124]	; (800c23c <Run_Total_function+0xf0>)
 800c1c0:	f000 fcea 	bl	800cb98 <Calculate_Fuzzy_Wc>
 800c1c4:	eef0 7a40 	vmov.f32	s15, s0
 800c1c8:	4b1d      	ldr	r3, [pc, #116]	; (800c240 <Run_Total_function+0xf4>)
 800c1ca:	edc3 7a00 	vstr	s15, [r3]

	Run_Complementary_Filter(&sensor_params, &thigh_angle_params, &fuzzy_params, IMU_CONTROL_PERIOD, attach_plane);
 800c1ce:	4b1a      	ldr	r3, [pc, #104]	; (800c238 <Run_Total_function+0xec>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800c244 <Run_Total_function+0xf8>
 800c1d6:	4a19      	ldr	r2, [pc, #100]	; (800c23c <Run_Total_function+0xf0>)
 800c1d8:	490f      	ldr	r1, [pc, #60]	; (800c218 <Run_Total_function+0xcc>)
 800c1da:	4812      	ldr	r0, [pc, #72]	; (800c224 <Run_Total_function+0xd8>)
 800c1dc:	f7ff fd9e 	bl	800bd1c <Run_Complementary_Filter>

	Reduce_Noise_In_Sensor_Data(&thigh_angle_params, &gait_params);
 800c1e0:	490f      	ldr	r1, [pc, #60]	; (800c220 <Run_Total_function+0xd4>)
 800c1e2:	480d      	ldr	r0, [pc, #52]	; (800c218 <Run_Total_function+0xcc>)
 800c1e4:	f7ff fdf0 	bl	800bdc8 <Reduce_Noise_In_Sensor_Data>

	Run_Normalization_And_Get_Gait_Phase(&thigh_angle_params, &norm_params, &gait_params);
 800c1e8:	4a0d      	ldr	r2, [pc, #52]	; (800c220 <Run_Total_function+0xd4>)
 800c1ea:	4917      	ldr	r1, [pc, #92]	; (800c248 <Run_Total_function+0xfc>)
 800c1ec:	480a      	ldr	r0, [pc, #40]	; (800c218 <Run_Total_function+0xcc>)
 800c1ee:	f7ff fdb3 	bl	800bd58 <Run_Normalization_And_Get_Gait_Phase>

	Check_Walking_State(&thigh_angle_params, &norm_params, &th_params, &gait_params, &walking);
 800c1f2:	4b16      	ldr	r3, [pc, #88]	; (800c24c <Run_Total_function+0x100>)
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	4b0a      	ldr	r3, [pc, #40]	; (800c220 <Run_Total_function+0xd4>)
 800c1f8:	4a15      	ldr	r2, [pc, #84]	; (800c250 <Run_Total_function+0x104>)
 800c1fa:	4913      	ldr	r1, [pc, #76]	; (800c248 <Run_Total_function+0xfc>)
 800c1fc:	4806      	ldr	r0, [pc, #24]	; (800c218 <Run_Total_function+0xcc>)
 800c1fe:	f7ff fef5 	bl	800bfec <Check_Walking_State>

	Setting_Assist_Time(&plantar_params, &dorsi_params, &assist_params, &gait_params);
 800c202:	4b07      	ldr	r3, [pc, #28]	; (800c220 <Run_Total_function+0xd4>)
 800c204:	4a13      	ldr	r2, [pc, #76]	; (800c254 <Run_Total_function+0x108>)
 800c206:	4914      	ldr	r1, [pc, #80]	; (800c258 <Run_Total_function+0x10c>)
 800c208:	4814      	ldr	r0, [pc, #80]	; (800c25c <Run_Total_function+0x110>)
 800c20a:	f7ff ff57 	bl	800c0bc <Setting_Assist_Time>

//	// Msg_Hdlr problem //
//	Setting_Assist_Force_and_Time(&assist_params, &gait_params);
//	Set_Trigger(&assist_params, &gait_params, walking);

	return 0;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}
 800c218:	2400d0ec 	.word	0x2400d0ec
 800c21c:	2400d010 	.word	0x2400d010
 800c220:	2400d1d4 	.word	0x2400d1d4
 800c224:	2400d200 	.word	0x2400d200
 800c228:	2400d4f0 	.word	0x2400d4f0
 800c22c:	2400d1e0 	.word	0x2400d1e0
 800c230:	2400d468 	.word	0x2400d468
 800c234:	2400d1e4 	.word	0x2400d1e4
 800c238:	2400d2fc 	.word	0x2400d2fc
 800c23c:	2400d020 	.word	0x2400d020
 800c240:	2400d500 	.word	0x2400d500
 800c244:	3a83126f 	.word	0x3a83126f
 800c248:	2400d508 	.word	0x2400d508
 800c24c:	240032d4 	.word	0x240032d4
 800c250:	240032d8 	.word	0x240032d8
 800c254:	2400d060 	.word	0x2400d060
 800c258:	2400d17c 	.word	0x2400d17c
 800c25c:	2400d198 	.word	0x2400d198

0800c260 <Get_State_Callback>:
 \__ \ |) | (_) | | (__/ _` | | | '_ \/ _` / _| / /(_-<
 |___/___/ \___/   \___\__,_|_|_|_.__/\__,_\__|_\_\/__/

 */

MSG_COMMON_SDO_CALLBACK(imu_ctrl_task)
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2201      	movs	r2, #1
 800c26e:	711a      	strb	r2, [r3, #4]
 800c270:	2001      	movs	r0, #1
 800c272:	f003 f8f9 	bl	800f468 <malloc>
 800c276:	4603      	mov	r3, r0
 800c278:	461a      	mov	r2, r3
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a05      	ldr	r2, [pc, #20]	; (800c298 <Get_State_Callback+0x38>)
 800c284:	7b12      	ldrb	r2, [r2, #12]
 800c286:	701a      	strb	r2, [r3, #0]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2200      	movs	r2, #0
 800c28c:	721a      	strb	r2, [r3, #8]
 800c28e:	bf00      	nop
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	2400d544 	.word	0x2400d544

0800c29c <Set_State_Callback>:
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	73fb      	strb	r3, [r7, #15]
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	4808      	ldr	r0, [pc, #32]	; (800c2d4 <Set_State_Callback+0x38>)
 800c2b4:	f002 fff4 	bl	800f2a0 <Transition_State>
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	711a      	strb	r2, [r3, #4]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	721a      	strb	r2, [r3, #8]
 800c2ca:	bf00      	nop
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	2400d550 	.word	0x2400d550

0800c2d8 <Get_Routine_Callback>:
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	721a      	strb	r2, [r3, #8]
 800c2e8:	4b19      	ldr	r3, [pc, #100]	; (800c350 <Get_Routine_Callback+0x78>)
 800c2ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	711a      	strb	r2, [r3, #4]
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	791b      	ldrb	r3, [r3, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d025      	beq.n	800c346 <Get_Routine_Callback+0x6e>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	88db      	ldrh	r3, [r3, #6]
 800c2fe:	461a      	mov	r2, r3
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	791b      	ldrb	r3, [r3, #4]
 800c304:	fb03 f302 	mul.w	r3, r3, r2
 800c308:	4618      	mov	r0, r3
 800c30a:	f003 f8ad 	bl	800f468 <malloc>
 800c30e:	4603      	mov	r3, r0
 800c310:	461a      	mov	r2, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	2300      	movs	r3, #0
 800c318:	60fb      	str	r3, [r7, #12]
 800c31a:	e00d      	b.n	800c338 <Get_Routine_Callback+0x60>
 800c31c:	4a0c      	ldr	r2, [pc, #48]	; (800c350 <Get_Routine_Callback+0x78>)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3310      	adds	r3, #16
 800c322:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4413      	add	r3, r2
 800c32e:	b2ca      	uxtb	r2, r1
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3301      	adds	r3, #1
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	791b      	ldrb	r3, [r3, #4]
 800c33c:	461a      	mov	r2, r3
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	4293      	cmp	r3, r2
 800c342:	dbeb      	blt.n	800c31c <Get_Routine_Callback+0x44>
 800c344:	e000      	b.n	800c348 <Get_Routine_Callback+0x70>
 800c346:	bf00      	nop
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	2400d544 	.word	0x2400d544

0800c354 <Set_Routine_Callback>:
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2200      	movs	r2, #0
 800c362:	711a      	strb	r2, [r3, #4]
 800c364:	4828      	ldr	r0, [pc, #160]	; (800c408 <Set_Routine_Callback+0xb4>)
 800c366:	f002 fe43 	bl	800eff0 <Clear_Routines>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	791b      	ldrb	r3, [r3, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d103      	bne.n	800c37a <Set_Routine_Callback+0x26>
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	2200      	movs	r2, #0
 800c376:	721a      	strb	r2, [r3, #8]
 800c378:	e043      	b.n	800c402 <Set_Routine_Callback+0xae>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	88db      	ldrh	r3, [r3, #6]
 800c37e:	461a      	mov	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	791b      	ldrb	r3, [r3, #4]
 800c384:	fb03 f302 	mul.w	r3, r3, r2
 800c388:	4618      	mov	r0, r3
 800c38a:	f003 f86d 	bl	800f468 <malloc>
 800c38e:	4603      	mov	r3, r0
 800c390:	461a      	mov	r2, r3
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	601a      	str	r2, [r3, #0]
 800c396:	2300      	movs	r3, #0
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	e020      	b.n	800c3de <Set_Routine_Callback+0x8a>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	72fb      	strb	r3, [r7, #11]
 800c3a8:	7afb      	ldrb	r3, [r7, #11]
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	4816      	ldr	r0, [pc, #88]	; (800c408 <Set_Routine_Callback+0xb4>)
 800c3ae:	f002 fe3b 	bl	800f028 <Push_Routine>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10f      	bne.n	800c3d8 <Set_Routine_Callback+0x84>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	441a      	add	r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	6819      	ldr	r1, [r3, #0]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	440b      	add	r3, r1
 800c3c8:	7812      	ldrb	r2, [r2, #0]
 800c3ca:	701a      	strb	r2, [r3, #0]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	791b      	ldrb	r3, [r3, #4]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	b2da      	uxtb	r2, r3
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	711a      	strb	r2, [r3, #4]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	60fb      	str	r3, [r7, #12]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	791b      	ldrb	r3, [r3, #4]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	dbd8      	blt.n	800c39c <Set_Routine_Callback+0x48>
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	791a      	ldrb	r2, [r3, #4]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	791b      	ldrb	r3, [r3, #4]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d002      	beq.n	800c3fc <Set_Routine_Callback+0xa8>
 800c3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fa:	e000      	b.n	800c3fe <Set_Routine_Callback+0xaa>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	721a      	strb	r2, [r3, #8]
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	2400d584 	.word	0x2400d584

0800c40c <StateOff_Run>:
 \__ \  _/ _` |  _/ -_) | _| || | ' \/ _|  _| / _ \ ' \(_-<
 |___/\__\__,_|\__\___| |_| \_,_|_||_\__|\__|_\___/_||_/__/

 */
static void StateOff_Run( )
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
	// TODO: I2C Initialization
	uint8_t i2c_3axis_res = Get_Value_3Axis_IMU(&mag_data);
 800c412:	480e      	ldr	r0, [pc, #56]	; (800c44c <StateOff_Run+0x40>)
 800c414:	f7ff f852 	bl	800b4bc <Get_Value_3Axis_IMU>
 800c418:	4603      	mov	r3, r0
 800c41a:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_6axis_res = Get_Value_6Axis_IMU(&acc_gyro_data);
 800c41c:	480c      	ldr	r0, [pc, #48]	; (800c450 <StateOff_Run+0x44>)
 800c41e:	f7ff f8e3 	bl	800b5e8 <Get_Value_6Axis_IMU>
 800c422:	4603      	mov	r3, r0
 800c424:	71bb      	strb	r3, [r7, #6]

	if (i2c_3axis_res == NO_ERROR && i2c_6axis_res == NO_ERROR){
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10a      	bne.n	800c442 <StateOff_Run+0x36>
 800c42c:	79bb      	ldrb	r3, [r7, #6]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d107      	bne.n	800c442 <StateOff_Run+0x36>
		Push_Routine(&imu_ctrl_task.routine, ROUTINE_ID_IMU_TOTAL_FUNCTION);
 800c432:	2105      	movs	r1, #5
 800c434:	4807      	ldr	r0, [pc, #28]	; (800c454 <StateOff_Run+0x48>)
 800c436:	f002 fdf7 	bl	800f028 <Push_Routine>
		Transition_State(&imu_ctrl_task.state_machine, e_State_Standby);
 800c43a:	2101      	movs	r1, #1
 800c43c:	4806      	ldr	r0, [pc, #24]	; (800c458 <StateOff_Run+0x4c>)
 800c43e:	f002 ff2f 	bl	800f2a0 <Transition_State>
	}

}
 800c442:	bf00      	nop
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	2400d4f0 	.word	0x2400d4f0
 800c450:	2400d1e4 	.word	0x2400d1e4
 800c454:	2400d584 	.word	0x2400d584
 800c458:	2400d550 	.word	0x2400d550

0800c45c <StateStandby_Run>:

static void StateStandby_Run( )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
	Transition_State(&imu_ctrl_task.state_machine, e_State_Enable);
 800c460:	2102      	movs	r1, #2
 800c462:	4802      	ldr	r0, [pc, #8]	; (800c46c <StateStandby_Run+0x10>)
 800c464:	f002 ff1c 	bl	800f2a0 <Transition_State>
}
 800c468:	bf00      	nop
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	2400d550 	.word	0x2400d550

0800c470 <StateEnable_Ent>:

static void StateEnable_Ent()
{
 800c470:	b480      	push	{r7}
 800c472:	af00      	add	r7, sp, #0

}
 800c474:	bf00      	nop
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
	...

0800c480 <StateEnable_Run>:

static void StateEnable_Run( )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
	Run_Routines(&imu_ctrl_task.routine);
 800c484:	4802      	ldr	r0, [pc, #8]	; (800c490 <StateEnable_Run+0x10>)
 800c486:	f002 fd3d 	bl	800ef04 <Run_Routines>
}
 800c48a:	bf00      	nop
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	2400d584 	.word	0x2400d584

0800c494 <StateEnable_Ext>:

static void StateEnable_Ext()
{
 800c494:	b480      	push	{r7}
 800c496:	af00      	add	r7, sp, #0

}
 800c498:	bf00      	nop
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <StateError_Run>:

static void StateError_Run()
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	af00      	add	r7, sp, #0

}
 800c4a6:	bf00      	nop
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <Init_Imu_Ctrl>:
 |_|  |_\__,_|_|_||_|

 */

void Init_Imu_Ctrl(void)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b094      	sub	sp, #80	; 0x50
 800c4b4:	af04      	add	r7, sp, #16
    Init_Task(&imu_ctrl_task);
 800c4b6:	4893      	ldr	r0, [pc, #588]	; (800c704 <Init_Imu_Ctrl+0x254>)
 800c4b8:	f002 ff14 	bl	800f2e4 <Init_Task>

	/* State Definition */
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Off,      NULL,   			StateOff_Run,       NULL,         		 true);
 800c4bc:	4638      	mov	r0, r7
 800c4be:	2300      	movs	r3, #0
 800c4c0:	4a91      	ldr	r2, [pc, #580]	; (800c708 <Init_Imu_Ctrl+0x258>)
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	f002 fe2e 	bl	800f124 <Create_State_Entity>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	463b      	mov	r3, r7
 800c4d2:	cb0c      	ldmia	r3, {r2, r3}
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	488b      	ldr	r0, [pc, #556]	; (800c704 <Init_Imu_Ctrl+0x254>)
 800c4d8:	f002 ff23 	bl	800f322 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Standby,  NULL,   			StateStandby_Run,	NULL,         		 false);
 800c4dc:	f107 000c 	add.w	r0, r7, #12
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	4a8a      	ldr	r2, [pc, #552]	; (800c70c <Init_Imu_Ctrl+0x25c>)
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	f002 fe1d 	bl	800f124 <Create_State_Entity>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	f107 030c 	add.w	r3, r7, #12
 800c4f6:	cb0c      	ldmia	r3, {r2, r3}
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	4882      	ldr	r0, [pc, #520]	; (800c704 <Init_Imu_Ctrl+0x254>)
 800c4fc:	f002 ff11 	bl	800f322 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Enable,   StateEnable_Ent,  	StateEnable_Run, 	StateEnable_Ext,	 false);
 800c500:	f107 0018 	add.w	r0, r7, #24
 800c504:	4b82      	ldr	r3, [pc, #520]	; (800c710 <Init_Imu_Ctrl+0x260>)
 800c506:	4a83      	ldr	r2, [pc, #524]	; (800c714 <Init_Imu_Ctrl+0x264>)
 800c508:	4983      	ldr	r1, [pc, #524]	; (800c718 <Init_Imu_Ctrl+0x268>)
 800c50a:	f002 fe0b 	bl	800f124 <Create_State_Entity>
 800c50e:	2300      	movs	r3, #0
 800c510:	9301      	str	r3, [sp, #4]
 800c512:	6a3b      	ldr	r3, [r7, #32]
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	f107 0318 	add.w	r3, r7, #24
 800c51a:	cb0c      	ldmia	r3, {r2, r3}
 800c51c:	2102      	movs	r1, #2
 800c51e:	4879      	ldr	r0, [pc, #484]	; (800c704 <Init_Imu_Ctrl+0x254>)
 800c520:	f002 feff 	bl	800f322 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Error,    NULL,			  	StateError_Run,    	NULL,				 false);
 800c524:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c528:	2300      	movs	r3, #0
 800c52a:	4a7c      	ldr	r2, [pc, #496]	; (800c71c <Init_Imu_Ctrl+0x26c>)
 800c52c:	2100      	movs	r1, #0
 800c52e:	f002 fdf9 	bl	800f124 <Create_State_Entity>
 800c532:	2300      	movs	r3, #0
 800c534:	9301      	str	r3, [sp, #4]
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c53e:	cb0c      	ldmia	r3, {r2, r3}
 800c540:	2103      	movs	r1, #3
 800c542:	4870      	ldr	r0, [pc, #448]	; (800c704 <Init_Imu_Ctrl+0x254>)
 800c544:	f002 feed 	bl	800f322 <Set_Task_State_Entity>

	/* Routine Definition */
	TASK_CREATE_ROUTINE(&imu_ctrl_task, ROUTINE_ID_IMU_TOTAL_FUNCTION, 		NULL, Run_Total_function, 		NULL);
 800c548:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c54c:	2300      	movs	r3, #0
 800c54e:	4a74      	ldr	r2, [pc, #464]	; (800c720 <Init_Imu_Ctrl+0x270>)
 800c550:	2100      	movs	r1, #0
 800c552:	f002 fc43 	bl	800eddc <Create_Routine_Entity>
 800c556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c55e:	cb0c      	ldmia	r3, {r2, r3}
 800c560:	2105      	movs	r1, #5
 800c562:	4868      	ldr	r0, [pc, #416]	; (800c704 <Init_Imu_Ctrl+0x254>)
 800c564:	f002 ff06 	bl	800f374 <Set_Task_Routine_Entity>

	/* DOD Definition */
	// DOD
	Create_DOD(TASK_ID_IMU);
 800c568:	2003      	movs	r0, #3
 800c56a:	f000 ffa7 	bl	800d4bc <Create_DOD>

	// PDO
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_X, e_Float32, 1, &acc_gyro_data.acc_x);
 800c56e:	4b6d      	ldr	r3, [pc, #436]	; (800c724 <Init_Imu_Ctrl+0x274>)
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	2301      	movs	r3, #1
 800c574:	2207      	movs	r2, #7
 800c576:	2100      	movs	r1, #0
 800c578:	2003      	movs	r0, #3
 800c57a:	f000 ffb7 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Y, e_Float32, 1, &acc_gyro_data.acc_y);
 800c57e:	4b6a      	ldr	r3, [pc, #424]	; (800c728 <Init_Imu_Ctrl+0x278>)
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	2301      	movs	r3, #1
 800c584:	2207      	movs	r2, #7
 800c586:	2101      	movs	r1, #1
 800c588:	2003      	movs	r0, #3
 800c58a:	f000 ffaf 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Z, e_Float32, 1, &acc_gyro_data.acc_z);
 800c58e:	4b67      	ldr	r3, [pc, #412]	; (800c72c <Init_Imu_Ctrl+0x27c>)
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	2301      	movs	r3, #1
 800c594:	2207      	movs	r2, #7
 800c596:	2102      	movs	r1, #2
 800c598:	2003      	movs	r0, #3
 800c59a:	f000 ffa7 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_X, e_Float32, 1, &acc_gyro_data.gyr_x);
 800c59e:	4b64      	ldr	r3, [pc, #400]	; (800c730 <Init_Imu_Ctrl+0x280>)
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	2207      	movs	r2, #7
 800c5a6:	2103      	movs	r1, #3
 800c5a8:	2003      	movs	r0, #3
 800c5aa:	f000 ff9f 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Y, e_Float32, 1, &acc_gyro_data.gyr_y);
 800c5ae:	4b61      	ldr	r3, [pc, #388]	; (800c734 <Init_Imu_Ctrl+0x284>)
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	2207      	movs	r2, #7
 800c5b6:	2104      	movs	r1, #4
 800c5b8:	2003      	movs	r0, #3
 800c5ba:	f000 ff97 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Z, e_Float32, 1, &acc_gyro_data.gyr_z);
 800c5be:	4b5e      	ldr	r3, [pc, #376]	; (800c738 <Init_Imu_Ctrl+0x288>)
 800c5c0:	9300      	str	r3, [sp, #0]
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	2207      	movs	r2, #7
 800c5c6:	2105      	movs	r1, #5
 800c5c8:	2003      	movs	r0, #3
 800c5ca:	f000 ff8f 	bl	800d4ec <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC,          e_Float32, 1, &thigh_angle_params.deg_acc);
 800c5ce:	4b5b      	ldr	r3, [pc, #364]	; (800c73c <Init_Imu_Ctrl+0x28c>)
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	2207      	movs	r2, #7
 800c5d6:	210d      	movs	r1, #13
 800c5d8:	2003      	movs	r0, #3
 800c5da:	f000 ff87 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR,          e_Float32, 1, &thigh_angle_params.deg_gyr);
 800c5de:	4b58      	ldr	r3, [pc, #352]	; (800c740 <Init_Imu_Ctrl+0x290>)
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	2207      	movs	r2, #7
 800c5e6:	210e      	movs	r1, #14
 800c5e8:	2003      	movs	r0, #3
 800c5ea:	f000 ff7f 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC_FILTERED, e_Float32, 1, &thigh_angle_params.deg_acc_filtered);
 800c5ee:	4b55      	ldr	r3, [pc, #340]	; (800c744 <Init_Imu_Ctrl+0x294>)
 800c5f0:	9300      	str	r3, [sp, #0]
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	2207      	movs	r2, #7
 800c5f6:	210f      	movs	r1, #15
 800c5f8:	2003      	movs	r0, #3
 800c5fa:	f000 ff77 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR_FILTERED, e_Float32, 1, &thigh_angle_params.deg_gyr_filtered);
 800c5fe:	4b52      	ldr	r3, [pc, #328]	; (800c748 <Init_Imu_Ctrl+0x298>)
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	2301      	movs	r3, #1
 800c604:	2207      	movs	r2, #7
 800c606:	2110      	movs	r1, #16
 800c608:	2003      	movs	r0, #3
 800c60a:	f000 ff6f 	bl	800d4ec <Create_PDO>
//	Create_PDO(TASK_ID_IMU, PDO_ID_DEG_TVCF,             e_Float32, 1, &thigh_angle_params.deg_tvcf_filtered);			// Real application
	Create_PDO(TASK_ID_IMU, PDO_ID_DEG_TVCF,             e_Float32, 1, &thigh_angle_tvcf_demo);							// Only for DEMO
 800c60e:	4b4f      	ldr	r3, [pc, #316]	; (800c74c <Init_Imu_Ctrl+0x29c>)
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	2301      	movs	r3, #1
 800c614:	2207      	movs	r2, #7
 800c616:	2111      	movs	r1, #17
 800c618:	2003      	movs	r0, #3
 800c61a:	f000 ff67 	bl	800d4ec <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_WALKING_STATE, 	e_UInt8, 	1, &walking);
 800c61e:	4b4c      	ldr	r3, [pc, #304]	; (800c750 <Init_Imu_Ctrl+0x2a0>)
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	2301      	movs	r3, #1
 800c624:	2201      	movs	r2, #1
 800c626:	2106      	movs	r1, #6
 800c628:	2003      	movs	r0, #3
 800c62a:	f000 ff5f 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GAIT_PHASE, 		e_Float32,  1, &gait_params.gait_phase);
 800c62e:	4b49      	ldr	r3, [pc, #292]	; (800c754 <Init_Imu_Ctrl+0x2a4>)
 800c630:	9300      	str	r3, [sp, #0]
 800c632:	2301      	movs	r3, #1
 800c634:	2207      	movs	r2, #7
 800c636:	2107      	movs	r1, #7
 800c638:	2003      	movs	r0, #3
 800c63a:	f000 ff57 	bl	800d4ec <Create_PDO>

	// Assist mode //
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_P, e_Float32, 1, &plantar_params.Plantar_ref);
 800c63e:	4b46      	ldr	r3, [pc, #280]	; (800c758 <Init_Imu_Ctrl+0x2a8>)
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	2301      	movs	r3, #1
 800c644:	2207      	movs	r2, #7
 800c646:	210b      	movs	r1, #11
 800c648:	2003      	movs	r0, #3
 800c64a:	f000 ff4f 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_D, e_Float32, 1, &dorsi_params.Dorsi_ref);
 800c64e:	4b43      	ldr	r3, [pc, #268]	; (800c75c <Init_Imu_Ctrl+0x2ac>)
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	2301      	movs	r3, #1
 800c654:	2207      	movs	r2, #7
 800c656:	210c      	movs	r1, #12
 800c658:	2003      	movs	r0, #3
 800c65a:	f000 ff47 	bl	800d4ec <Create_PDO>

	// SDO
	MSG_COMMON_SDO_CREATE(TASK_ID_IMU)
 800c65e:	4b40      	ldr	r3, [pc, #256]	; (800c760 <Init_Imu_Ctrl+0x2b0>)
 800c660:	2201      	movs	r2, #1
 800c662:	2100      	movs	r1, #0
 800c664:	2003      	movs	r0, #3
 800c666:	f000 fffb 	bl	800d660 <Create_SDO>
 800c66a:	4b3e      	ldr	r3, [pc, #248]	; (800c764 <Init_Imu_Ctrl+0x2b4>)
 800c66c:	2201      	movs	r2, #1
 800c66e:	2101      	movs	r1, #1
 800c670:	2003      	movs	r0, #3
 800c672:	f000 fff5 	bl	800d660 <Create_SDO>
 800c676:	4b3c      	ldr	r3, [pc, #240]	; (800c768 <Init_Imu_Ctrl+0x2b8>)
 800c678:	2201      	movs	r2, #1
 800c67a:	2102      	movs	r1, #2
 800c67c:	2003      	movs	r0, #3
 800c67e:	f000 ffef 	bl	800d660 <Create_SDO>
 800c682:	4b3a      	ldr	r3, [pc, #232]	; (800c76c <Init_Imu_Ctrl+0x2bc>)
 800c684:	2201      	movs	r2, #1
 800c686:	2103      	movs	r1, #3
 800c688:	2003      	movs	r0, #3
 800c68a:	f000 ffe9 	bl	800d660 <Create_SDO>

	uint8_t err_chk_6axis = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t err_chk_3axis = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	err_chk_6axis = Init_6Axis_IMU(&acc_gyro_data);
 800c69a:	4822      	ldr	r0, [pc, #136]	; (800c724 <Init_Imu_Ctrl+0x274>)
 800c69c:	f7fe ff6a 	bl	800b574 <Init_6Axis_IMU>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	err_chk_3axis = Init_3Axis_IMU(&mag_data);
 800c6a6:	4832      	ldr	r0, [pc, #200]	; (800c770 <Init_Imu_Ctrl+0x2c0>)
 800c6a8:	f7fe fed0 	bl	800b44c <Init_3Axis_IMU>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (err_chk_6axis != 0){
 800c6b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d002      	beq.n	800c6c0 <Init_Imu_Ctrl+0x210>
		err_chk = 111;
 800c6ba:	4b2e      	ldr	r3, [pc, #184]	; (800c774 <Init_Imu_Ctrl+0x2c4>)
 800c6bc:	226f      	movs	r2, #111	; 0x6f
 800c6be:	701a      	strb	r2, [r3, #0]
	}

	Reset_Parameters();
 800c6c0:	f7ff f9de 	bl	800ba80 <Reset_Parameters>
	attach_plane = e_LEFT_SAGITAL_DEMO;		// WIDM Attached Plane Selection
 800c6c4:	4b2c      	ldr	r3, [pc, #176]	; (800c778 <Init_Imu_Ctrl+0x2c8>)
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	701a      	strb	r2, [r3, #0]
	Set_Init_Parameters(&norm_params, &gait_params, &fuzzy_params, &th_params, &plantar_params, &dorsi_params, &assist_params);
 800c6ca:	4b2c      	ldr	r3, [pc, #176]	; (800c77c <Init_Imu_Ctrl+0x2cc>)
 800c6cc:	9302      	str	r3, [sp, #8]
 800c6ce:	4b2c      	ldr	r3, [pc, #176]	; (800c780 <Init_Imu_Ctrl+0x2d0>)
 800c6d0:	9301      	str	r3, [sp, #4]
 800c6d2:	4b2c      	ldr	r3, [pc, #176]	; (800c784 <Init_Imu_Ctrl+0x2d4>)
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	4b2c      	ldr	r3, [pc, #176]	; (800c788 <Init_Imu_Ctrl+0x2d8>)
 800c6d8:	4a2c      	ldr	r2, [pc, #176]	; (800c78c <Init_Imu_Ctrl+0x2dc>)
 800c6da:	492d      	ldr	r1, [pc, #180]	; (800c790 <Init_Imu_Ctrl+0x2e0>)
 800c6dc:	482d      	ldr	r0, [pc, #180]	; (800c794 <Init_Imu_Ctrl+0x2e4>)
 800c6de:	f000 f883 	bl	800c7e8 <Set_Init_Parameters>
	Calculate_Initial_Thigh_Angle(&thigh_angle_params, &norm_params, &acc_gyro_data, attach_plane);
 800c6e2:	4b25      	ldr	r3, [pc, #148]	; (800c778 <Init_Imu_Ctrl+0x2c8>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	4a0f      	ldr	r2, [pc, #60]	; (800c724 <Init_Imu_Ctrl+0x274>)
 800c6e8:	492a      	ldr	r1, [pc, #168]	; (800c794 <Init_Imu_Ctrl+0x2e4>)
 800c6ea:	482b      	ldr	r0, [pc, #172]	; (800c798 <Init_Imu_Ctrl+0x2e8>)
 800c6ec:	f7ff fa60 	bl	800bbb0 <Calculate_Initial_Thigh_Angle>

	/* Callback Allocation */
    if (Start_TIM3() > 0) {
 800c6f0:	f7ff f988 	bl	800ba04 <Start_TIM3>
        //TODO: ERROR PROCESS
    }
    ioif_tim3_callback_ptr = Run_Imu_Ctrl;
 800c6f4:	4b29      	ldr	r3, [pc, #164]	; (800c79c <Init_Imu_Ctrl+0x2ec>)
 800c6f6:	4a2a      	ldr	r2, [pc, #168]	; (800c7a0 <Init_Imu_Ctrl+0x2f0>)
 800c6f8:	601a      	str	r2, [r3, #0]
}
 800c6fa:	bf00      	nop
 800c6fc:	3740      	adds	r7, #64	; 0x40
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	2400d544 	.word	0x2400d544
 800c708:	0800c40d 	.word	0x0800c40d
 800c70c:	0800c45d 	.word	0x0800c45d
 800c710:	0800c495 	.word	0x0800c495
 800c714:	0800c481 	.word	0x0800c481
 800c718:	0800c471 	.word	0x0800c471
 800c71c:	0800c4a3 	.word	0x0800c4a3
 800c720:	0800c14d 	.word	0x0800c14d
 800c724:	2400d1e4 	.word	0x2400d1e4
 800c728:	2400d1e8 	.word	0x2400d1e8
 800c72c:	2400d1ec 	.word	0x2400d1ec
 800c730:	2400d1f0 	.word	0x2400d1f0
 800c734:	2400d1f4 	.word	0x2400d1f4
 800c738:	2400d1f8 	.word	0x2400d1f8
 800c73c:	2400d0f0 	.word	0x2400d0f0
 800c740:	2400d0f4 	.word	0x2400d0f4
 800c744:	2400d0f8 	.word	0x2400d0f8
 800c748:	2400d0fc 	.word	0x2400d0fc
 800c74c:	2400d010 	.word	0x2400d010
 800c750:	240032d4 	.word	0x240032d4
 800c754:	2400d1d8 	.word	0x2400d1d8
 800c758:	2400d1ac 	.word	0x2400d1ac
 800c75c:	2400d190 	.word	0x2400d190
 800c760:	0800c261 	.word	0x0800c261
 800c764:	0800c29d 	.word	0x0800c29d
 800c768:	0800c2d9 	.word	0x0800c2d9
 800c76c:	0800c355 	.word	0x0800c355
 800c770:	2400d4f0 	.word	0x2400d4f0
 800c774:	2400d468 	.word	0x2400d468
 800c778:	2400d2fc 	.word	0x2400d2fc
 800c77c:	2400d060 	.word	0x2400d060
 800c780:	2400d17c 	.word	0x2400d17c
 800c784:	2400d198 	.word	0x2400d198
 800c788:	240032d8 	.word	0x240032d8
 800c78c:	2400d020 	.word	0x2400d020
 800c790:	2400d1d4 	.word	0x2400d1d4
 800c794:	2400d508 	.word	0x2400d508
 800c798:	2400d0ec 	.word	0x2400d0ec
 800c79c:	2400d008 	.word	0x2400d008
 800c7a0:	0800c7a5 	.word	0x0800c7a5

0800c7a4 <Run_Imu_Ctrl>:

void Run_Imu_Ctrl(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0

	uint32_t imu_ctrl_loop_time_cnt_1 = DWT->CYCCNT;
 800c7aa:	4b0b      	ldr	r3, [pc, #44]	; (800c7d8 <Run_Imu_Ctrl+0x34>)
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	607b      	str	r3, [r7, #4]

	/*Run Device */
	Run_Task(&imu_ctrl_task);
 800c7b0:	480a      	ldr	r0, [pc, #40]	; (800c7dc <Run_Imu_Ctrl+0x38>)
 800c7b2:	f002 fda9 	bl	800f308 <Run_Task>

	uint32_t imu_ctrl_loop_time_cnt_2 = DWT->CYCCNT;
 800c7b6:	4b08      	ldr	r3, [pc, #32]	; (800c7d8 <Run_Imu_Ctrl+0x34>)
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	603b      	str	r3, [r7, #0]

	/* Elapsed Time Check */
	imu_ctrl_task_us = (imu_ctrl_loop_time_cnt_2 - imu_ctrl_loop_time_cnt_1)/480;	// in microsecond
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	4a07      	ldr	r2, [pc, #28]	; (800c7e0 <Run_Imu_Ctrl+0x3c>)
 800c7c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c7c8:	0a1b      	lsrs	r3, r3, #8
 800c7ca:	4a06      	ldr	r2, [pc, #24]	; (800c7e4 <Run_Imu_Ctrl+0x40>)
 800c7cc:	6013      	str	r3, [r2, #0]
}
 800c7ce:	bf00      	nop
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	e0001000 	.word	0xe0001000
 800c7dc:	2400d544 	.word	0x2400d544
 800c7e0:	88888889 	.word	0x88888889
 800c7e4:	240032c4 	.word	0x240032c4

0800c7e8 <Set_Init_Parameters>:
 
*/

/* Set Specific Value */
void Set_Init_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params, Fuzzy_Params* t_fuzzy_params, Threshold_Params* t_th_params, Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
 800c7f4:	603b      	str	r3, [r7, #0]
	t_norm_params->A_deg = 30.0; //30
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	4a37      	ldr	r2, [pc, #220]	; (800c8d8 <Set_Init_Parameters+0xf0>)
 800c7fa:	62da      	str	r2, [r3, #44]	; 0x2c
	t_norm_params->A_vel = 400.0; //400
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	4a37      	ldr	r2, [pc, #220]	; (800c8dc <Set_Init_Parameters+0xf4>)
 800c800:	631a      	str	r2, [r3, #48]	; 0x30

	t_gait_params->gait_period 	  = 1000;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c808:	801a      	strh	r2, [r3, #0]
	t_gait_params->gait_phase 	  = -100.0;
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	4a34      	ldr	r2, [pc, #208]	; (800c8e0 <Set_Init_Parameters+0xf8>)
 800c80e:	605a      	str	r2, [r3, #4]
	t_gait_params->gait_phase_pre = -100.0;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	4a33      	ldr	r2, [pc, #204]	; (800c8e0 <Set_Init_Parameters+0xf8>)
 800c814:	609a      	str	r2, [r3, #8]

	t_fuzzy_params->wl 		= 0.5;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800c81c:	615a      	str	r2, [r3, #20]
	t_fuzzy_params->wh 		= 10.0;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a30      	ldr	r2, [pc, #192]	; (800c8e4 <Set_Init_Parameters+0xfc>)
 800c822:	619a      	str	r2, [r3, #24]
	t_fuzzy_params->var[0] 	= 8.0;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800c82a:	61da      	str	r2, [r3, #28]
	t_fuzzy_params->var[1] 	= 30.0;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a2a      	ldr	r2, [pc, #168]	; (800c8d8 <Set_Init_Parameters+0xf0>)
 800c830:	621a      	str	r2, [r3, #32]
	t_fuzzy_params->var[2] 	= 5.8;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a2c      	ldr	r2, [pc, #176]	; (800c8e8 <Set_Init_Parameters+0x100>)
 800c836:	625a      	str	r2, [r3, #36]	; 0x24
	t_fuzzy_params->var[3] 	= 320.0;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a2c      	ldr	r2, [pc, #176]	; (800c8ec <Set_Init_Parameters+0x104>)
 800c83c:	629a      	str	r2, [r3, #40]	; 0x28

	t_th_params->deg_th_start	= 5.0;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	4a2b      	ldr	r2, [pc, #172]	; (800c8f0 <Set_Init_Parameters+0x108>)
 800c842:	601a      	str	r2, [r3, #0]
	t_th_params->vel_th_start	= 20.0;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	4a2b      	ldr	r2, [pc, #172]	; (800c8f4 <Set_Init_Parameters+0x10c>)
 800c848:	605a      	str	r2, [r3, #4]
	t_th_params->deg_th_stop 	= 5.0;
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	4a28      	ldr	r2, [pc, #160]	; (800c8f0 <Set_Init_Parameters+0x108>)
 800c84e:	609a      	str	r2, [r3, #8]
	t_th_params->vel_th_stop 	= 3.0;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	4a29      	ldr	r2, [pc, #164]	; (800c8f8 <Set_Init_Parameters+0x110>)
 800c854:	60da      	str	r2, [r3, #12]

	t_plantar_params->t_P_start	  = 35;
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	2223      	movs	r2, #35	; 0x23
 800c85a:	801a      	strh	r2, [r3, #0]
	t_plantar_params->t_r_P_end   = 35;
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	2223      	movs	r2, #35	; 0x23
 800c860:	805a      	strh	r2, [r3, #2]
	t_plantar_params->t_c_P_end   = 55;
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	2237      	movs	r2, #55	; 0x37
 800c866:	809a      	strh	r2, [r3, #4]
	t_plantar_params->t_f_P_end   = 60;
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	223c      	movs	r2, #60	; 0x3c
 800c86c:	80da      	strh	r2, [r3, #6]
	t_plantar_params->t_r_P       = 100;
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	2264      	movs	r2, #100	; 0x64
 800c872:	811a      	strh	r2, [r3, #8]
	t_plantar_params->t_c_P 	  = 400;
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c87a:	815a      	strh	r2, [r3, #10]
	t_plantar_params->t_f_P 	  = 100;
 800c87c:	69bb      	ldr	r3, [r7, #24]
 800c87e:	2264      	movs	r2, #100	; 0x64
 800c880:	819a      	strh	r2, [r3, #12]
	t_plantar_params->Amplitude_P = 60.0;
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	4a1d      	ldr	r2, [pc, #116]	; (800c8fc <Set_Init_Parameters+0x114>)
 800c886:	619a      	str	r2, [r3, #24]

	t_dorsi_params->t_D_start 	  = 50;
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	2232      	movs	r2, #50	; 0x32
 800c88c:	801a      	strh	r2, [r3, #0]
	t_dorsi_params->t_r_D_end 	  = 53;
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	2235      	movs	r2, #53	; 0x35
 800c892:	805a      	strh	r2, [r3, #2]
	t_dorsi_params->t_c_D_end 	  = 70;
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	2246      	movs	r2, #70	; 0x46
 800c898:	809a      	strh	r2, [r3, #4]
	t_dorsi_params->t_f_D_end 	  = 80;
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	2250      	movs	r2, #80	; 0x50
 800c89e:	80da      	strh	r2, [r3, #6]
	t_dorsi_params->t_r_D 		  = 100;
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	2264      	movs	r2, #100	; 0x64
 800c8a4:	811a      	strh	r2, [r3, #8]
	t_dorsi_params->t_c_D 		  = 400;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c8ac:	815a      	strh	r2, [r3, #10]
	t_dorsi_params->t_f_D 		  = 100;
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	2264      	movs	r2, #100	; 0x64
 800c8b2:	819a      	strh	r2, [r3, #12]
	t_dorsi_params->Amplitude_D   = 60.0;
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	4a11      	ldr	r2, [pc, #68]	; (800c8fc <Set_Init_Parameters+0x114>)
 800c8b8:	619a      	str	r2, [r3, #24]

	t_assist_params->t_r_limit 	 = 20;
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	2214      	movs	r2, #20
 800c8be:	801a      	strh	r2, [r3, #0]
	t_assist_params->t_f_limit 	 = 20;
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	2214      	movs	r2, #20
 800c8c4:	805a      	strh	r2, [r3, #2]
	t_assist_params->ref_shape 	 = TRAPEZOIDAL;
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	711a      	strb	r2, [r3, #4]

}
 800c8cc:	bf00      	nop
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr
 800c8d8:	41f00000 	.word	0x41f00000
 800c8dc:	43c80000 	.word	0x43c80000
 800c8e0:	c2c80000 	.word	0xc2c80000
 800c8e4:	41200000 	.word	0x41200000
 800c8e8:	40b9999a 	.word	0x40b9999a
 800c8ec:	43a00000 	.word	0x43a00000
 800c8f0:	40a00000 	.word	0x40a00000
 800c8f4:	41a00000 	.word	0x41a00000
 800c8f8:	40400000 	.word	0x40400000
 800c8fc:	42700000 	.word	0x42700000

0800c900 <Save_Previous_Value>:


*/

void Save_Previous_Value(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
	t_sensor_params->accX[1] = t_sensor_params->accX[0];
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	605a      	str	r2, [r3, #4]
	t_sensor_params->accY[1] = t_sensor_params->accY[0];
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	689a      	ldr	r2, [r3, #8]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	60da      	str	r2, [r3, #12]
	t_sensor_params->gyrZ[1] = t_sensor_params->gyrZ[0];
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	62da      	str	r2, [r3, #44]	; 0x2c

	t_thigh_angle_params->vel_raw[1] = t_thigh_angle_params->vel_raw[0];
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	699a      	ldr	r2, [r3, #24]
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	61da      	str	r2, [r3, #28]

	t_thigh_angle_params->deg_tvcf[1] = t_thigh_angle_params->deg_tvcf[0];
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	6a1a      	ldr	r2, [r3, #32]
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	625a      	str	r2, [r3, #36]	; 0x24

	t_thigh_angle_params->deg_LPF_1st[1] = t_thigh_angle_params->deg_LPF_1st[0];
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	62da      	str	r2, [r3, #44]	; 0x2c
	t_thigh_angle_params->deg_LPF_2nd[1] = t_thigh_angle_params->deg_LPF_2nd[0];
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	635a      	str	r2, [r3, #52]	; 0x34
	t_thigh_angle_params->vel_LPF_1st[1] = t_thigh_angle_params->vel_LPF_1st[0];
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	63da      	str	r2, [r3, #60]	; 0x3c
	t_thigh_angle_params->vel_LPF_2nd[1] = t_thigh_angle_params->vel_LPF_2nd[0];
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	645a      	str	r2, [r3, #68]	; 0x44

	t_gait_params->gait_phase_pre = t_gait_params->gait_phase;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	609a      	str	r2, [r3, #8]
}
 800c95c:	bf00      	nop
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <Calculate_Square_Root_Sum>:
                      |___/              |___/

*/

float Calculate_Square_Root_Sum(float t_x, float t_y)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	ed2d 8b02 	vpush	{d8}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	ed87 0a01 	vstr	s0, [r7, #4]
 800c976:	edc7 0a00 	vstr	s1, [r7]
	return sqrt(pow(t_x, 2) + pow(t_y, 2));
 800c97a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c97e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c982:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800c986:	eeb0 0b47 	vmov.f64	d0, d7
 800c98a:	f003 fd89 	bl	80104a0 <pow>
 800c98e:	eeb0 8b40 	vmov.f64	d8, d0
 800c992:	edd7 7a00 	vldr	s15, [r7]
 800c996:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c99a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800c99e:	eeb0 0b47 	vmov.f64	d0, d7
 800c9a2:	f003 fd7d 	bl	80104a0 <pow>
 800c9a6:	eeb0 7b40 	vmov.f64	d7, d0
 800c9aa:	ee38 7b07 	vadd.f64	d7, d8, d7
 800c9ae:	eeb0 0b47 	vmov.f64	d0, d7
 800c9b2:	f004 f995 	bl	8010ce0 <sqrt>
 800c9b6:	eeb0 7b40 	vmov.f64	d7, d0
 800c9ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800c9be:	eeb0 0a67 	vmov.f32	s0, s15
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	ecbd 8b02 	vpop	{d8}
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <Calculate_Absolute_Value_Float>:

float Calculate_Absolute_Value_Float(float t_value)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	ed87 0a01 	vstr	s0, [r7, #4]
	return fabs(t_value);
 800c9d6:	edd7 7a01 	vldr	s15, [r7, #4]
 800c9da:	eef0 7ae7 	vabs.f32	s15, s15
}
 800c9de:	eeb0 0a67 	vmov.f32	s0, s15
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	0000      	movs	r0, r0
	...

0800c9f0 <Calculate_Delta>:

float Calculate_Delta(float t_current, float t_previous)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	ed87 0a01 	vstr	s0, [r7, #4]
 800c9fa:	edc7 0a00 	vstr	s1, [r7]
	return (t_current - t_previous) / IMU_CONTROL_PERIOD;
 800c9fe:	ed97 7a01 	vldr	s14, [r7, #4]
 800ca02:	edd7 7a00 	vldr	s15, [r7]
 800ca06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca0a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ca0e:	ed9f 5b06 	vldr	d5, [pc, #24]	; 800ca28 <Calculate_Delta+0x38>
 800ca12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ca16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800ca1a:	eeb0 0a67 	vmov.f32	s0, s15
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	d2f1a9fc 	.word	0xd2f1a9fc
 800ca2c:	3f50624d 	.word	0x3f50624d

0800ca30 <Calculate_xbar_Update_mu>:

void Calculate_xbar_Update_mu(float t_var_i, float t_fuzzy_input, float* t_mu)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	ed87 0a03 	vstr	s0, [r7, #12]
 800ca3a:	edc7 0a02 	vstr	s1, [r7, #8]
 800ca3e:	6078      	str	r0, [r7, #4]
	/* t_var_i is measurement value (initially set value in Set_Init_Parameters) */
	float t_xoi = 3 * t_var_i;											// Threshold Value (maybe middle value)
 800ca40:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca44:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800ca48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca4c:	edc7 7a07 	vstr	s15, [r7, #28]
	float t_si = log(3) / t_var_i;										// Sensor Sensitivity (natural logarithm)
 800ca50:	edd7 7a03 	vldr	s15, [r7, #12]
 800ca54:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800ca58:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 800cac8 <Calculate_xbar_Update_mu+0x98>
 800ca5c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ca60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ca64:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_xbar = 0.5 * (1 + tanh(t_si * (t_fuzzy_input - t_xoi)));	// Fuzzy Logic Relational Expressions
 800ca68:	ed97 7a02 	vldr	s14, [r7, #8]
 800ca6c:	edd7 7a07 	vldr	s15, [r7, #28]
 800ca70:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ca74:	edd7 7a06 	vldr	s15, [r7, #24]
 800ca78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ca80:	eeb0 0b47 	vmov.f64	d0, d7
 800ca84:	f004 f8d4 	bl	8010c30 <tanh>
 800ca88:	eeb0 7b40 	vmov.f64	d7, d0
 800ca8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ca90:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ca94:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ca98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800caa0:	edc7 7a05 	vstr	s15, [r7, #20]
	*t_mu *= (1 - t_xbar);	// Update mu for TVCF cutoff frequency(wc)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	ed93 7a00 	vldr	s14, [r3]
 800caaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caae:	edd7 7a05 	vldr	s15, [r7, #20]
 800cab2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	edc3 7a00 	vstr	s15, [r3]
}
 800cac0:	bf00      	nop
 800cac2:	3720      	adds	r7, #32
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	7aad030b 	.word	0x7aad030b
 800cacc:	3ff193ea 	.word	0x3ff193ea

0800cad0 <Generate_Fuzzy_Input>:

/*
*Generate Fuzzy Logic Input (Acc, Jerk, Angular Velocity, Angular Accerleration)
*/
void Generate_Fuzzy_Input(Sensor_Params* t_sensor_params, Fuzzy_Params* t_fuzzy_params)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
	float t_jerk_x = Calculate_Delta(t_sensor_params->accX[0], t_sensor_params->accX[1]);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	edd3 7a00 	vldr	s15, [r3]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	ed93 7a01 	vldr	s14, [r3, #4]
 800cae6:	eef0 0a47 	vmov.f32	s1, s14
 800caea:	eeb0 0a67 	vmov.f32	s0, s15
 800caee:	f7ff ff7f 	bl	800c9f0 <Calculate_Delta>
 800caf2:	ed87 0a05 	vstr	s0, [r7, #20]
	float t_jerk_y = Calculate_Delta(t_sensor_params->accY[0], t_sensor_params->accY[1]);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	edd3 7a02 	vldr	s15, [r3, #8]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	ed93 7a03 	vldr	s14, [r3, #12]
 800cb02:	eef0 0a47 	vmov.f32	s1, s14
 800cb06:	eeb0 0a67 	vmov.f32	s0, s15
 800cb0a:	f7ff ff71 	bl	800c9f0 <Calculate_Delta>
 800cb0e:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_wdot_z = Calculate_Delta(t_sensor_params->gyrZ[0], t_sensor_params->gyrZ[1]);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800cb1e:	eef0 0a47 	vmov.f32	s1, s14
 800cb22:	eeb0 0a67 	vmov.f32	s0, s15
 800cb26:	f7ff ff63 	bl	800c9f0 <Calculate_Delta>
 800cb2a:	ed87 0a03 	vstr	s0, [r7, #12]

	// absolute ACC
	t_fuzzy_params->Fuzzy_input[0] = Calculate_Square_Root_Sum(t_sensor_params->accX[0], t_sensor_params->accY[0]);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	edd3 7a00 	vldr	s15, [r3]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	ed93 7a02 	vldr	s14, [r3, #8]
 800cb3a:	eef0 0a47 	vmov.f32	s1, s14
 800cb3e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb42:	f7ff ff11 	bl	800c968 <Calculate_Square_Root_Sum>
 800cb46:	eef0 7a40 	vmov.f32	s15, s0
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	edc3 7a00 	vstr	s15, [r3]
	// absolute Jerk
	t_fuzzy_params->Fuzzy_input[1] = Calculate_Square_Root_Sum(t_jerk_x, t_jerk_y);
 800cb50:	edd7 0a04 	vldr	s1, [r7, #16]
 800cb54:	ed97 0a05 	vldr	s0, [r7, #20]
 800cb58:	f7ff ff06 	bl	800c968 <Calculate_Square_Root_Sum>
 800cb5c:	eef0 7a40 	vmov.f32	s15, s0
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	edc3 7a01 	vstr	s15, [r3, #4]
	// absolute Gyr(Angular Velocity)
	t_fuzzy_params->Fuzzy_input[2] = Calculate_Absolute_Value_Float(t_sensor_params->gyrZ[0]);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cb6c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb70:	f7ff ff2c 	bl	800c9cc <Calculate_Absolute_Value_Float>
 800cb74:	eef0 7a40 	vmov.f32	s15, s0
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	edc3 7a02 	vstr	s15, [r3, #8]
	// absolute Wdot(Angular Acceleration)
	t_fuzzy_params->Fuzzy_input[3] = Calculate_Absolute_Value_Float(t_wdot_z);
 800cb7e:	ed97 0a03 	vldr	s0, [r7, #12]
 800cb82:	f7ff ff23 	bl	800c9cc <Calculate_Absolute_Value_Float>
 800cb86:	eef0 7a40 	vmov.f32	s15, s0
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800cb90:	bf00      	nop
 800cb92:	3718      	adds	r7, #24
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <Calculate_Fuzzy_Wc>:

/*
*Calculate Wc(CutOff Frequency)
*/
float Calculate_Fuzzy_Wc(Fuzzy_Params* t_fuzzy_params)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
	t_fuzzy_params->wc = 0;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f04f 0200 	mov.w	r2, #0
 800cba6:	611a      	str	r2, [r3, #16]
	float t_mu = 1;
 800cba8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cbac:	60bb      	str	r3, [r7, #8]

	/* Perform calculations for each fuzzy input (Acc, Jerk, Angular Velocity, Angular Accerleration) */
	for (int i = 0; i < 4; i++) {
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60fb      	str	r3, [r7, #12]
 800cbb2:	e019      	b.n	800cbe8 <Calculate_Fuzzy_Wc+0x50>
		Calculate_xbar_Update_mu(t_fuzzy_params->var[i], t_fuzzy_params->Fuzzy_input[i], &t_mu);
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3306      	adds	r3, #6
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	edd3 7a00 	vldr	s15, [r3]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	ed93 7a00 	vldr	s14, [r3]
 800cbd0:	f107 0308 	add.w	r3, r7, #8
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	eef0 0a47 	vmov.f32	s1, s14
 800cbda:	eeb0 0a67 	vmov.f32	s0, s15
 800cbde:	f7ff ff27 	bl	800ca30 <Calculate_xbar_Update_mu>
	for (int i = 0; i < 4; i++) {
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	60fb      	str	r3, [r7, #12]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	dde2      	ble.n	800cbb4 <Calculate_Fuzzy_Wc+0x1c>
	}

	t_fuzzy_params->wc = t_mu * (t_fuzzy_params->wh) + (1 - t_mu) * (t_fuzzy_params->wl);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	ed93 7a06 	vldr	s14, [r3, #24]
 800cbf4:	edd7 7a02 	vldr	s15, [r7, #8]
 800cbf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbfc:	edd7 7a02 	vldr	s15, [r7, #8]
 800cc00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	edd3 7a05 	vldr	s15, [r3, #20]
 800cc0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cc12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	edc3 7a04 	vstr	s15, [r3, #16]

	return t_fuzzy_params->wc;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	ee07 3a90 	vmov	s15, r3
}
 800cc24:	eeb0 0a67 	vmov.f32	s0, s15
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <Perform_LPF_on_Acc>:

/*
*Low pass filtering for deg_acc
*/
float Perform_LPF_on_Acc(float t_curr_acc, float t_prev_filtered_acc, float t_cutoff_frequency, float t_sampling_Period)
{
 800cc2e:	b480      	push	{r7}
 800cc30:	b087      	sub	sp, #28
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	ed87 0a03 	vstr	s0, [r7, #12]
 800cc38:	edc7 0a02 	vstr	s1, [r7, #8]
 800cc3c:	ed87 1a01 	vstr	s2, [r7, #4]
 800cc40:	edc7 1a00 	vstr	s3, [r7]
	float filtered_acc = (t_cutoff_frequency * t_sampling_Period * t_curr_acc + t_prev_filtered_acc) / (t_cutoff_frequency * t_sampling_Period + 1);
 800cc44:	ed97 7a01 	vldr	s14, [r7, #4]
 800cc48:	edd7 7a00 	vldr	s15, [r7]
 800cc4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc50:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc58:	edd7 7a02 	vldr	s15, [r7, #8]
 800cc5c:	ee77 6a27 	vadd.f32	s13, s14, s15
 800cc60:	ed97 7a01 	vldr	s14, [r7, #4]
 800cc64:	edd7 7a00 	vldr	s15, [r7]
 800cc68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc78:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_acc;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	ee07 3a90 	vmov	s15, r3
}
 800cc82:	eeb0 0a67 	vmov.f32	s0, s15
 800cc86:	371c      	adds	r7, #28
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <Perform_HPF_on_Gyro>:

/*
*High pass filtering + Integral for gyr
*/
float Perform_HPF_on_Gyro(float t_curr_gyro, float t_prev_filtered_gyro, float t_cutoff_frequency, float t_sampling_Period)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	ed87 0a03 	vstr	s0, [r7, #12]
 800cc9a:	edc7 0a02 	vstr	s1, [r7, #8]
 800cc9e:	ed87 1a01 	vstr	s2, [r7, #4]
 800cca2:	edc7 1a00 	vstr	s3, [r7]
	float filtered_gyro = (t_curr_gyro*t_sampling_Period + t_prev_filtered_gyro) / (t_cutoff_frequency * t_sampling_Period + 1);
 800cca6:	ed97 7a03 	vldr	s14, [r7, #12]
 800ccaa:	edd7 7a00 	vldr	s15, [r7]
 800ccae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccb2:	edd7 7a02 	vldr	s15, [r7, #8]
 800ccb6:	ee77 6a27 	vadd.f32	s13, s14, s15
 800ccba:	ed97 7a01 	vldr	s14, [r7, #4]
 800ccbe:	edd7 7a00 	vldr	s15, [r7]
 800ccc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccd2:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_gyro;
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	ee07 3a90 	vmov	s15, r3
}
 800ccdc:	eeb0 0a67 	vmov.f32	s0, s15
 800cce0:	371c      	adds	r7, #28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	0000      	movs	r0, r0
 800ccec:	0000      	movs	r0, r0
	...

0800ccf0 <Run_TVCF>:

/*
*Function to apply a Time Variant Complementary Filter (TVCF) to an angle
*/
void Run_TVCF(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, float t_cutoff_frequency, float t_sampling_Period, AttachPlane t_attach_plane)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b08a      	sub	sp, #40	; 0x28
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6178      	str	r0, [r7, #20]
 800ccf8:	6139      	str	r1, [r7, #16]
 800ccfa:	ed87 0a03 	vstr	s0, [r7, #12]
 800ccfe:	edc7 0a02 	vstr	s1, [r7, #8]
 800cd02:	4613      	mov	r3, r2
 800cd04:	71fb      	strb	r3, [r7, #7]
	/* Calculate the angle using accelerometer measurements and convert it to degrees */
    /* Thigh Angle Degree */
	float t_deg_acc = 0.0;
 800cd06:	f04f 0300 	mov.w	r3, #0
 800cd0a:	627b      	str	r3, [r7, #36]	; 0x24
	float t_deg_acc_filtered_update = 0.0;
 800cd0c:	f04f 0300 	mov.w	r3, #0
 800cd10:	623b      	str	r3, [r7, #32]
	float t_deg_gyr_filtered_update = 0.0;
 800cd12:	f04f 0300 	mov.w	r3, #0
 800cd16:	61fb      	str	r3, [r7, #28]
	float t_deg_tvcf = 0.0;
 800cd18:	f04f 0300 	mov.w	r3, #0
 800cd1c:	61bb      	str	r3, [r7, #24]

	if (t_attach_plane == e_LEFT_SAGITAL){
 800cd1e:	79fb      	ldrb	r3, [r7, #7]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d11e      	bne.n	800cd62 <Run_TVCF+0x72>
		t_deg_acc = atan2((t_sensor_params->accY[0])*(-1), (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(-y/-x) : Left Sagital case
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd2a:	eef1 7a67 	vneg.f32	s15, s15
 800cd2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	edd3 6a00 	vldr	s13, [r3]
 800cd38:	eef1 6a66 	vneg.f32	s13, s13
 800cd3c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800cd40:	eeb0 1b46 	vmov.f64	d1, d6
 800cd44:	eeb0 0b47 	vmov.f64	d0, d7
 800cd48:	f003 ffc8 	bl	8010cdc <atan2>
 800cd4c:	eeb0 7b40 	vmov.f64	d7, d0
 800cd50:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 800ce50 <Run_TVCF+0x160>
 800cd54:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800cd5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800cd60:	e03e      	b.n	800cde0 <Run_TVCF+0xf0>
	}
    /* Right Thigh Angle Degree */
	else if (t_attach_plane == e_RIGHT_SAGITAL){
 800cd62:	79fb      	ldrb	r3, [r7, #7]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d11c      	bne.n	800cda2 <Run_TVCF+0xb2>
		t_deg_acc = atan2(t_sensor_params->accY[0], (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(y/-x) : Right Sagital case
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	edd3 7a02 	vldr	s15, [r3, #8]
 800cd6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	edd3 6a00 	vldr	s13, [r3]
 800cd78:	eef1 6a66 	vneg.f32	s13, s13
 800cd7c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800cd80:	eeb0 1b46 	vmov.f64	d1, d6
 800cd84:	eeb0 0b47 	vmov.f64	d0, d7
 800cd88:	f003 ffa8 	bl	8010cdc <atan2>
 800cd8c:	eeb0 7b40 	vmov.f64	d7, d0
 800cd90:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800ce50 <Run_TVCF+0x160>
 800cd94:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800cd9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800cda0:	e01e      	b.n	800cde0 <Run_TVCF+0xf0>
	}
    /* Left Thigh Angle Degree - DEMO ver */
	else if (t_attach_plane == e_LEFT_SAGITAL_DEMO){
 800cda2:	79fb      	ldrb	r3, [r7, #7]
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d11b      	bne.n	800cde0 <Run_TVCF+0xf0>
		t_deg_acc = atan2(t_sensor_params->accX[0], (t_sensor_params->accY[0])*(-1)) * (180 / PI);	// arctan(x/-y) : Left Sagital DEMO ver case
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	edd3 7a00 	vldr	s15, [r3]
 800cdae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	edd3 6a02 	vldr	s13, [r3, #8]
 800cdb8:	eef1 6a66 	vneg.f32	s13, s13
 800cdbc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800cdc0:	eeb0 1b46 	vmov.f64	d1, d6
 800cdc4:	eeb0 0b47 	vmov.f64	d0, d7
 800cdc8:	f003 ff88 	bl	8010cdc <atan2>
 800cdcc:	eeb0 7b40 	vmov.f64	d7, d0
 800cdd0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ce50 <Run_TVCF+0x160>
 800cdd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cdd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800cddc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}


	/* Apply Low Pass Filter (LPF) on accelerometer angle */
	t_deg_acc_filtered_update = Perform_LPF_on_Acc(t_deg_acc, t_thigh_angle_params->deg_acc_filtered, t_cutoff_frequency, t_sampling_Period);
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	edd3 7a03 	vldr	s15, [r3, #12]
 800cde6:	edd7 1a02 	vldr	s3, [r7, #8]
 800cdea:	ed97 1a03 	vldr	s2, [r7, #12]
 800cdee:	eef0 0a67 	vmov.f32	s1, s15
 800cdf2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800cdf6:	f7ff ff1a 	bl	800cc2e <Perform_LPF_on_Acc>
 800cdfa:	ed87 0a08 	vstr	s0, [r7, #32]

	/* Apply High Pass Filter (HPF) on gyroscope measurements */
	t_deg_gyr_filtered_update = Perform_HPF_on_Gyro(t_sensor_params->gyrZ[0], t_thigh_angle_params->deg_gyr_filtered, t_cutoff_frequency, t_sampling_Period);
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	ed93 7a04 	vldr	s14, [r3, #16]
 800ce0a:	edd7 1a02 	vldr	s3, [r7, #8]
 800ce0e:	ed97 1a03 	vldr	s2, [r7, #12]
 800ce12:	eef0 0a47 	vmov.f32	s1, s14
 800ce16:	eeb0 0a67 	vmov.f32	s0, s15
 800ce1a:	f7ff ff39 	bl	800cc90 <Perform_HPF_on_Gyro>
 800ce1e:	ed87 0a07 	vstr	s0, [r7, #28]

	/* Combine filtered accelerometer and gyroscope measurements */
	t_deg_tvcf = t_deg_acc_filtered_update + t_deg_gyr_filtered_update;
 800ce22:	ed97 7a08 	vldr	s14, [r7, #32]
 800ce26:	edd7 7a07 	vldr	s15, [r7, #28]
 800ce2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce2e:	edc7 7a06 	vstr	s15, [r7, #24]

	t_thigh_angle_params->deg_acc_filtered = t_deg_acc_filtered_update;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	6a3a      	ldr	r2, [r7, #32]
 800ce36:	60da      	str	r2, [r3, #12]
	t_thigh_angle_params->deg_gyr_filtered = t_deg_gyr_filtered_update;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	69fa      	ldr	r2, [r7, #28]
 800ce3c:	611a      	str	r2, [r3, #16]
	t_thigh_angle_params->deg_tvcf_filtered = t_deg_tvcf;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	69ba      	ldr	r2, [r7, #24]
 800ce42:	615a      	str	r2, [r3, #20]
}
 800ce44:	bf00      	nop
 800ce46:	3728      	adds	r7, #40	; 0x28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	f3af 8000 	nop.w
 800ce50:	7e61df46 	.word	0x7e61df46
 800ce54:	404ca5dc 	.word	0x404ca5dc

0800ce58 <Get_Max_Float>:

/*
*Get Max or Min Value between two variables for Normalization
*/
float Get_Max_Float(float t_x, float t_y)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	ed87 0a01 	vstr	s0, [r7, #4]
 800ce62:	edc7 0a00 	vstr	s1, [r7]
	return (t_x > t_y) ? t_x: t_y;
 800ce66:	ed97 7a01 	vldr	s14, [r7, #4]
 800ce6a:	edd7 7a00 	vldr	s15, [r7]
 800ce6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce76:	dd01      	ble.n	800ce7c <Get_Max_Float+0x24>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	e000      	b.n	800ce7e <Get_Max_Float+0x26>
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	ee07 3a90 	vmov	s15, r3
}
 800ce82:	eeb0 0a67 	vmov.f32	s0, s15
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <Get_Min_Float>:

float Get_Min_Float(float t_x, float t_y)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	ed87 0a01 	vstr	s0, [r7, #4]
 800ce9a:	edc7 0a00 	vstr	s1, [r7]
	return (t_x < t_y) ? t_x : t_y;
 800ce9e:	ed97 7a01 	vldr	s14, [r7, #4]
 800cea2:	edd7 7a00 	vldr	s15, [r7]
 800cea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ceaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceae:	d501      	bpl.n	800ceb4 <Get_Min_Float+0x24>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	e000      	b.n	800ceb6 <Get_Min_Float+0x26>
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	ee07 3a90 	vmov	s15, r3
}
 800ceba:	eeb0 0a67 	vmov.f32	s0, s15
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <Set_First_Half_Gait_Phase_Parameters>:

void Set_First_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
	t_norm_params->deg_o = t_norm_params->sum_deg / t_norm_params->sum_i;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	edd3 6a02 	vldr	s13, [r3, #8]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	8a1b      	ldrh	r3, [r3, #16]
 800cedc:	ee07 3a90 	vmov	s15, r3
 800cee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	edc3 7a00 	vstr	s15, [r3]
	t_norm_params->vel_o = t_norm_params->sum_vel / t_norm_params->sum_i;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	edd3 6a03 	vldr	s13, [r3, #12]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	8a1b      	ldrh	r3, [r3, #16]
 800cef8:	ee07 3a90 	vmov	s15, r3
 800cefc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cf00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	edc3 7a01 	vstr	s15, [r3, #4]

	t_gait_params->gait_period = t_norm_params->sum_i;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	8a1a      	ldrh	r2, [r3, #16]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	801a      	strh	r2, [r3, #0]

	t_norm_params->A_deg = (t_norm_params->deg_max - t_norm_params->deg_min) / 2;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	ed93 7a05 	vldr	s14, [r3, #20]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	edd3 7a06 	vldr	s15, [r3, #24]
 800cf1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cf22:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cf26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	t_norm_params->A_vel = (t_norm_params->vel_max - t_norm_params->vel_min) / 2;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	ed93 7a07 	vldr	s14, [r3, #28]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	edd3 7a08 	vldr	s15, [r3, #32]
 800cf3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cf40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cf44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	t_norm_params->sum_i = 0;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg = 0;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f04f 0200 	mov.w	r2, #0
 800cf5a:	609a      	str	r2, [r3, #8]
	t_norm_params->sum_vel = 0;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f04f 0200 	mov.w	r2, #0
 800cf62:	60da      	str	r2, [r3, #12]
	t_norm_params->deg_max = 0;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f04f 0200 	mov.w	r2, #0
 800cf6a:	615a      	str	r2, [r3, #20]
	t_norm_params->vel_max = 0;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f04f 0200 	mov.w	r2, #0
 800cf72:	61da      	str	r2, [r3, #28]
	t_norm_params->deg_min = 0;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f04f 0200 	mov.w	r2, #0
 800cf7a:	619a      	str	r2, [r3, #24]
	t_norm_params->vel_min = 0;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f04f 0200 	mov.w	r2, #0
 800cf82:	621a      	str	r2, [r3, #32]
}
 800cf84:	bf00      	nop
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <Set_Second_Half_Gait_Phase_Parameters>:

void Set_Second_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Thigh_Angle_Params* t_thigh_angle_params)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
	t_norm_params->sum_i++;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	8a1b      	ldrh	r3, [r3, #16]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg += t_thigh_angle_params->deg_LPF_2nd[0];
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	ed93 7a02 	vldr	s14, [r3, #8]
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800cfb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	edc3 7a02 	vstr	s15, [r3, #8]
	t_norm_params->sum_vel += t_thigh_angle_params->vel_LPF_2nd[0];
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	ed93 7a03 	vldr	s14, [r3, #12]
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800cfc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	edc3 7a03 	vstr	s15, [r3, #12]
	t_norm_params->deg_max = Get_Max_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_max);
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	ed93 7a05 	vldr	s14, [r3, #20]
 800cfde:	eef0 0a47 	vmov.f32	s1, s14
 800cfe2:	eeb0 0a67 	vmov.f32	s0, s15
 800cfe6:	f7ff ff37 	bl	800ce58 <Get_Max_Float>
 800cfea:	eef0 7a40 	vmov.f32	s15, s0
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	edc3 7a05 	vstr	s15, [r3, #20]
	t_norm_params->deg_min = Get_Min_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_min);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	ed93 7a06 	vldr	s14, [r3, #24]
 800d000:	eef0 0a47 	vmov.f32	s1, s14
 800d004:	eeb0 0a67 	vmov.f32	s0, s15
 800d008:	f7ff ff42 	bl	800ce90 <Get_Min_Float>
 800d00c:	eef0 7a40 	vmov.f32	s15, s0
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	edc3 7a06 	vstr	s15, [r3, #24]
	t_norm_params->vel_max = Get_Max_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_max);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	ed93 7a07 	vldr	s14, [r3, #28]
 800d022:	eef0 0a47 	vmov.f32	s1, s14
 800d026:	eeb0 0a67 	vmov.f32	s0, s15
 800d02a:	f7ff ff15 	bl	800ce58 <Get_Max_Float>
 800d02e:	eef0 7a40 	vmov.f32	s15, s0
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	edc3 7a07 	vstr	s15, [r3, #28]
	t_norm_params->vel_min = Get_Min_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_min);
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	ed93 7a08 	vldr	s14, [r3, #32]
 800d044:	eef0 0a47 	vmov.f32	s1, s14
 800d048:	eeb0 0a67 	vmov.f32	s0, s15
 800d04c:	f7ff ff20 	bl	800ce90 <Get_Min_Float>
 800d050:	eef0 7a40 	vmov.f32	s15, s0
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800d05a:	bf00      	nop
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <Prepare_for_Circular_Normalization>:

/*
*Function to Prepare for Circular Normalization
*/
void Prepare_for_Circular_Normalization(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b084      	sub	sp, #16
 800d066:	af00      	add	r7, sp, #0
 800d068:	60f8      	str	r0, [r7, #12]
 800d06a:	60b9      	str	r1, [r7, #8]
 800d06c:	607a      	str	r2, [r7, #4]
	if (t_thigh_angle_params->vel_LPF_2nd[0] < 0 && t_thigh_angle_params->vel_LPF_2nd[1] > 0
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800d074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d07c:	d521      	bpl.n	800d0c2 <Prepare_for_Circular_Normalization+0x60>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800d084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08c:	dd19      	ble.n	800d0c2 <Prepare_for_Circular_Normalization+0x60>
		&& t_norm_params->sum_i > (t_gait_params->gait_period)*0.5) {
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	8a1b      	ldrh	r3, [r3, #16]
 800d092:	ee07 3a90 	vmov	s15, r3
 800d096:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	ee07 3a90 	vmov	s15, r3
 800d0a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d0a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d0aa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d0ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b6:	dd04      	ble.n	800d0c2 <Prepare_for_Circular_Normalization+0x60>
		Set_First_Half_Gait_Phase_Parameters(t_norm_params, t_gait_params);
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	68b8      	ldr	r0, [r7, #8]
 800d0bc:	f7ff ff04 	bl	800cec8 <Set_First_Half_Gait_Phase_Parameters>
 800d0c0:	e004      	b.n	800d0cc <Prepare_for_Circular_Normalization+0x6a>
	}
	else{
		Set_Second_Half_Gait_Phase_Parameters(t_norm_params, t_thigh_angle_params);
 800d0c2:	68f9      	ldr	r1, [r7, #12]
 800d0c4:	68b8      	ldr	r0, [r7, #8]
 800d0c6:	f7ff ff63 	bl	800cf90 <Set_Second_Half_Gait_Phase_Parameters>
	}
}
 800d0ca:	bf00      	nop
 800d0cc:	bf00      	nop
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	0000      	movs	r0, r0
	...

0800d0d8 <Get_Current_Gait_Phase>:

/*
*Function to calculate the current phase of the gait (0~100%)
*/
float Get_Current_Gait_Phase(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
	/* Calculate initial phase using atan function */
	float t_gait_phase = atan((-1) * (t_norm_params->vel_norm) / (t_norm_params->deg_norm));
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d0e8:	eef1 6a67 	vneg.f32	s13, s15
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800d0f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0fa:	eeb0 0b47 	vmov.f64	d0, d7
 800d0fe:	f003 fc93 	bl	8010a28 <atan>
 800d102:	eeb0 7b40 	vmov.f64	d7, d0
 800d106:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d10a:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Adjust phase based on the value of normalized degree */
    if (t_norm_params->deg_norm < 0){
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d11c:	d50c      	bpl.n	800d138 <Get_Current_Gait_Phase+0x60>
        t_gait_phase += PI;
 800d11e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d122:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d126:	ed9f 6b40 	vldr	d6, [pc, #256]	; 800d228 <Get_Current_Gait_Phase+0x150>
 800d12a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d12e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d132:	edc7 7a03 	vstr	s15, [r7, #12]
 800d136:	e01b      	b.n	800d170 <Get_Current_Gait_Phase+0x98>
    } else if (t_norm_params->deg_norm > 0 && t_norm_params->vel_norm > 0){
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d13e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d146:	dd13      	ble.n	800d170 <Get_Current_Gait_Phase+0x98>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d14e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d156:	dd0b      	ble.n	800d170 <Get_Current_Gait_Phase+0x98>
        t_gait_phase += 2 * PI;
 800d158:	edd7 7a03 	vldr	s15, [r7, #12]
 800d15c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d160:	ed9f 6b33 	vldr	d6, [pc, #204]	; 800d230 <Get_Current_Gait_Phase+0x158>
 800d164:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d168:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d16c:	edc7 7a03 	vstr	s15, [r7, #12]
    }

	/* Convert phase from radians to custom scale */
    t_gait_phase = t_gait_phase * 50.0f / PI;
 800d170:	edd7 7a03 	vldr	s15, [r7, #12]
 800d174:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d240 <Get_Current_Gait_Phase+0x168>
 800d178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d17c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800d180:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800d228 <Get_Current_Gait_Phase+0x150>
 800d184:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d18c:	edc7 7a03 	vstr	s15, [r7, #12]
    t_gait_phase -= 12.11;
 800d190:	edd7 7a03 	vldr	s15, [r7, #12]
 800d194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d198:	ed9f 6b27 	vldr	d6, [pc, #156]	; 800d238 <Get_Current_Gait_Phase+0x160>
 800d19c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d1a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d1a4:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Adjust phase if it falls outside the range 0-100 */
    if (t_gait_phase < 0 && t_gait_phase != -100){
 800d1a8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b4:	d510      	bpl.n	800d1d8 <Get_Current_Gait_Phase+0x100>
 800d1b6:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1ba:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800d244 <Get_Current_Gait_Phase+0x16c>
 800d1be:	eef4 7a47 	vcmp.f32	s15, s14
 800d1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c6:	d007      	beq.n	800d1d8 <Get_Current_Gait_Phase+0x100>
        t_gait_phase += 100;
 800d1c8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1cc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d248 <Get_Current_Gait_Phase+0x170>
 800d1d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d1d4:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    /* Compare phase with the stored gait phase in gaitInfo */
    if (t_gait_phase > 5 && t_gait_phase < 95){
 800d1d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1dc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800d1e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e8:	dd13      	ble.n	800d212 <Get_Current_Gait_Phase+0x13a>
 800d1ea:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1ee:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d24c <Get_Current_Gait_Phase+0x174>
 800d1f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fa:	d50a      	bpl.n	800d212 <Get_Current_Gait_Phase+0x13a>
        t_gait_phase = Get_Max_Float(t_gait_phase, t_gait_params->gait_phase);
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	edd3 7a01 	vldr	s15, [r3, #4]
 800d202:	eef0 0a67 	vmov.f32	s1, s15
 800d206:	ed97 0a03 	vldr	s0, [r7, #12]
 800d20a:	f7ff fe25 	bl	800ce58 <Get_Max_Float>
 800d20e:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	return t_gait_phase;	// 0 ~ 100%
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	ee07 3a90 	vmov	s15, r3
}
 800d218:	eeb0 0a67 	vmov.f32	s0, s15
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	f3af 8000 	nop.w
 800d228:	fc8b007a 	.word	0xfc8b007a
 800d22c:	400921fa 	.word	0x400921fa
 800d230:	fc8b007a 	.word	0xfc8b007a
 800d234:	401921fa 	.word	0x401921fa
 800d238:	eb851eb8 	.word	0xeb851eb8
 800d23c:	40283851 	.word	0x40283851
 800d240:	42480000 	.word	0x42480000
 800d244:	c2c80000 	.word	0xc2c80000
 800d248:	42c80000 	.word	0x42c80000
 800d24c:	42be0000 	.word	0x42be0000

0800d250 <Calculate_Assist_Force_Timing_Params>:

/*
*Function to Calculate timing parameters for Plantar&Dorsi assistance force
*/
static void Calculate_Assist_Force_Timing_Params(uint16_t* t_r, uint16_t* t_c, uint16_t* t_f, uint16_t t_r_end, uint16_t t_start, uint16_t t_c_end, uint16_t t_f_end, uint16_t t_t_r_limit, uint16_t t_t_f_limit, uint16_t t_gait_period)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
 800d25c:	807b      	strh	r3, [r7, #2]
	*t_r = (t_r_end - t_start) * t_gait_period / 100;
 800d25e:	887a      	ldrh	r2, [r7, #2]
 800d260:	8b3b      	ldrh	r3, [r7, #24]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d266:	fb02 f303 	mul.w	r3, r2, r3
 800d26a:	4a29      	ldr	r2, [pc, #164]	; (800d310 <Calculate_Assist_Force_Timing_Params+0xc0>)
 800d26c:	fb82 1203 	smull	r1, r2, r2, r3
 800d270:	1152      	asrs	r2, r2, #5
 800d272:	17db      	asrs	r3, r3, #31
 800d274:	1ad3      	subs	r3, r2, r3
 800d276:	b29a      	uxth	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	801a      	strh	r2, [r3, #0]
	*t_c = (t_c_end - t_r_end) * t_gait_period / 100;
 800d27c:	8bba      	ldrh	r2, [r7, #28]
 800d27e:	887b      	ldrh	r3, [r7, #2]
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d284:	fb02 f303 	mul.w	r3, r2, r3
 800d288:	4a21      	ldr	r2, [pc, #132]	; (800d310 <Calculate_Assist_Force_Timing_Params+0xc0>)
 800d28a:	fb82 1203 	smull	r1, r2, r2, r3
 800d28e:	1152      	asrs	r2, r2, #5
 800d290:	17db      	asrs	r3, r3, #31
 800d292:	1ad3      	subs	r3, r2, r3
 800d294:	b29a      	uxth	r2, r3
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	801a      	strh	r2, [r3, #0]
	*t_f = (t_f_end - t_c_end) * t_gait_period / 100;
 800d29a:	8c3a      	ldrh	r2, [r7, #32]
 800d29c:	8bbb      	ldrh	r3, [r7, #28]
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d2a2:	fb02 f303 	mul.w	r3, r2, r3
 800d2a6:	4a1a      	ldr	r2, [pc, #104]	; (800d310 <Calculate_Assist_Force_Timing_Params+0xc0>)
 800d2a8:	fb82 1203 	smull	r1, r2, r2, r3
 800d2ac:	1152      	asrs	r2, r2, #5
 800d2ae:	17db      	asrs	r3, r3, #31
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	801a      	strh	r2, [r3, #0]

	if (*t_r < t_t_r_limit){
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	881b      	ldrh	r3, [r3, #0]
 800d2bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d90d      	bls.n	800d2de <Calculate_Assist_Force_Timing_Params+0x8e>
		*t_c = *t_c - t_t_r_limit + *t_r;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	881a      	ldrh	r2, [r3, #0]
 800d2c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	881b      	ldrh	r3, [r3, #0]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	801a      	strh	r2, [r3, #0]
		*t_r = t_t_r_limit;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d2dc:	801a      	strh	r2, [r3, #0]
	}
	if (*t_f < t_t_f_limit){
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	881b      	ldrh	r3, [r3, #0]
 800d2e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d90d      	bls.n	800d304 <Calculate_Assist_Force_Timing_Params+0xb4>
		*t_c = *t_c - t_t_f_limit + *t_f;
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	881a      	ldrh	r2, [r3, #0]
 800d2ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	881b      	ldrh	r3, [r3, #0]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	801a      	strh	r2, [r3, #0]
		*t_f = t_t_f_limit;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d302:	801a      	strh	r2, [r3, #0]
	}
	if (*t_c < 0){
		*t_c = 0;
	}
}
 800d304:	bf00      	nop
 800d306:	3714      	adds	r7, #20
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	51eb851f 	.word	0x51eb851f

0800d314 <Set_Assist_Force_Timing_Params>:
/*
*Function to Set timing parameters for Plantar&Dorsi assistance force(rising, continuous, falling time)
*/

void Set_Assist_Force_Timing_Params(Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 800d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d318:	b08a      	sub	sp, #40	; 0x28
 800d31a:	af06      	add	r7, sp, #24
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	60b9      	str	r1, [r7, #8]
 800d320:	607a      	str	r2, [r7, #4]
 800d322:	603b      	str	r3, [r7, #0]
	if (t_gait_params->gait_period > 2000){
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d32c:	d903      	bls.n	800d336 <Set_Assist_Force_Timing_Params+0x22>
		t_gait_params->gait_period = 2000;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d334:	801a      	strh	r2, [r3, #0]
	}

	/* Calculate timing parameters for Plantar assistance force */
	Calculate_Assist_Force_Timing_Params(
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f103 0608 	add.w	r6, r3, #8
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f103 0c0a 	add.w	ip, r3, #10
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f103 0e0c 	add.w	lr, r3, #12
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	8892      	ldrh	r2, [r2, #4]
 800d356:	68f9      	ldr	r1, [r7, #12]
 800d358:	88c9      	ldrh	r1, [r1, #6]
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	8800      	ldrh	r0, [r0, #0]
 800d35e:	687c      	ldr	r4, [r7, #4]
 800d360:	8864      	ldrh	r4, [r4, #2]
 800d362:	683d      	ldr	r5, [r7, #0]
 800d364:	882d      	ldrh	r5, [r5, #0]
 800d366:	9505      	str	r5, [sp, #20]
 800d368:	9404      	str	r4, [sp, #16]
 800d36a:	9003      	str	r0, [sp, #12]
 800d36c:	9102      	str	r1, [sp, #8]
 800d36e:	9201      	str	r2, [sp, #4]
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	4643      	mov	r3, r8
 800d374:	4672      	mov	r2, lr
 800d376:	4661      	mov	r1, ip
 800d378:	4630      	mov	r0, r6
 800d37a:	f7ff ff69 	bl	800d250 <Calculate_Assist_Force_Timing_Params>
            t_assist_params->t_r_limit,    	// Rising time limit
            t_assist_params->t_f_limit,    	// Falling time limit
            t_gait_params->gait_period      // Gait period
	);
	/* Calculate timing parameters for Dorsiflexion assistance force */
	Calculate_Assist_Force_Timing_Params(
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	f103 0608 	add.w	r6, r3, #8
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	f103 0c0a 	add.w	ip, r3, #10
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	f103 0e0c 	add.w	lr, r3, #12
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	8892      	ldrh	r2, [r2, #4]
 800d39e:	68b9      	ldr	r1, [r7, #8]
 800d3a0:	88c9      	ldrh	r1, [r1, #6]
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	8800      	ldrh	r0, [r0, #0]
 800d3a6:	687c      	ldr	r4, [r7, #4]
 800d3a8:	8864      	ldrh	r4, [r4, #2]
 800d3aa:	683d      	ldr	r5, [r7, #0]
 800d3ac:	882d      	ldrh	r5, [r5, #0]
 800d3ae:	9505      	str	r5, [sp, #20]
 800d3b0:	9404      	str	r4, [sp, #16]
 800d3b2:	9003      	str	r0, [sp, #12]
 800d3b4:	9102      	str	r1, [sp, #8]
 800d3b6:	9201      	str	r2, [sp, #4]
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	4643      	mov	r3, r8
 800d3bc:	4672      	mov	r2, lr
 800d3be:	4661      	mov	r1, ip
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f7ff ff45 	bl	800d250 <Calculate_Assist_Force_Timing_Params>
			t_dorsi_params->t_f_D_end,     // Dorsi falling end time
            t_assist_params->t_r_limit,    	// Rising time limit
            t_assist_params->t_f_limit,   	// Falling time limit
            t_gait_params->gait_period      // Gait period
	);
}
 800d3c6:	bf00      	nop
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d3d0 <Get_Msg_Data_Type_Info>:
 */

#include "msg_data_object.h"

MsgDataTypeInfoStruct Get_Msg_Data_Type_Info(MsgDataTypeEnum t_type)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	70fb      	strb	r3, [r7, #3]
	MsgDataTypeInfoStruct t_res;

    switch (t_type) {
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	2b09      	cmp	r3, #9
 800d3e0:	d848      	bhi.n	800d474 <Get_Msg_Data_Type_Info+0xa4>
 800d3e2:	a201      	add	r2, pc, #4	; (adr r2, 800d3e8 <Get_Msg_Data_Type_Info+0x18>)
 800d3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e8:	0800d411 	.word	0x0800d411
 800d3ec:	0800d41b 	.word	0x0800d41b
 800d3f0:	0800d425 	.word	0x0800d425
 800d3f4:	0800d42f 	.word	0x0800d42f
 800d3f8:	0800d439 	.word	0x0800d439
 800d3fc:	0800d443 	.word	0x0800d443
 800d400:	0800d44d 	.word	0x0800d44d
 800d404:	0800d457 	.word	0x0800d457
 800d408:	0800d461 	.word	0x0800d461
 800d40c:	0800d46b 	.word	0x0800d46b
    case e_Char   : t_res.name = "char"   ; t_res.size = sizeof(char);     break;
 800d410:	4b20      	ldr	r3, [pc, #128]	; (800d494 <Get_Msg_Data_Type_Info+0xc4>)
 800d412:	60bb      	str	r3, [r7, #8]
 800d414:	2301      	movs	r3, #1
 800d416:	733b      	strb	r3, [r7, #12]
 800d418:	e02d      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt8  : t_res.name = "uint8"  ; t_res.size = sizeof(uint8_t);  break;
 800d41a:	4b1f      	ldr	r3, [pc, #124]	; (800d498 <Get_Msg_Data_Type_Info+0xc8>)
 800d41c:	60bb      	str	r3, [r7, #8]
 800d41e:	2301      	movs	r3, #1
 800d420:	733b      	strb	r3, [r7, #12]
 800d422:	e028      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt16 : t_res.name = "uint16" ; t_res.size = sizeof(uint16_t); break;
 800d424:	4b1d      	ldr	r3, [pc, #116]	; (800d49c <Get_Msg_Data_Type_Info+0xcc>)
 800d426:	60bb      	str	r3, [r7, #8]
 800d428:	2302      	movs	r3, #2
 800d42a:	733b      	strb	r3, [r7, #12]
 800d42c:	e023      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt32 : t_res.name = "uint32" ; t_res.size = sizeof(uint32_t); break;
 800d42e:	4b1c      	ldr	r3, [pc, #112]	; (800d4a0 <Get_Msg_Data_Type_Info+0xd0>)
 800d430:	60bb      	str	r3, [r7, #8]
 800d432:	2304      	movs	r3, #4
 800d434:	733b      	strb	r3, [r7, #12]
 800d436:	e01e      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    case e_Int8   : t_res.name = "int8"   ; t_res.size = sizeof(int8_t);   break;
 800d438:	4b1a      	ldr	r3, [pc, #104]	; (800d4a4 <Get_Msg_Data_Type_Info+0xd4>)
 800d43a:	60bb      	str	r3, [r7, #8]
 800d43c:	2301      	movs	r3, #1
 800d43e:	733b      	strb	r3, [r7, #12]
 800d440:	e019      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    case e_Int16  : t_res.name = "int16"  ; t_res.size = sizeof(int16_t);  break;
 800d442:	4b19      	ldr	r3, [pc, #100]	; (800d4a8 <Get_Msg_Data_Type_Info+0xd8>)
 800d444:	60bb      	str	r3, [r7, #8]
 800d446:	2302      	movs	r3, #2
 800d448:	733b      	strb	r3, [r7, #12]
 800d44a:	e014      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    case e_Int32  : t_res.name = "int32"  ; t_res.size = sizeof(int32_t);  break;
 800d44c:	4b17      	ldr	r3, [pc, #92]	; (800d4ac <Get_Msg_Data_Type_Info+0xdc>)
 800d44e:	60bb      	str	r3, [r7, #8]
 800d450:	2304      	movs	r3, #4
 800d452:	733b      	strb	r3, [r7, #12]
 800d454:	e00f      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    case e_Float32: t_res.name = "float32"; t_res.size = sizeof(float);    break;
 800d456:	4b16      	ldr	r3, [pc, #88]	; (800d4b0 <Get_Msg_Data_Type_Info+0xe0>)
 800d458:	60bb      	str	r3, [r7, #8]
 800d45a:	2304      	movs	r3, #4
 800d45c:	733b      	strb	r3, [r7, #12]
 800d45e:	e00a      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    case e_Float64: t_res.name = "float64"; t_res.size = sizeof(double);   break;
 800d460:	4b14      	ldr	r3, [pc, #80]	; (800d4b4 <Get_Msg_Data_Type_Info+0xe4>)
 800d462:	60bb      	str	r3, [r7, #8]
 800d464:	2308      	movs	r3, #8
 800d466:	733b      	strb	r3, [r7, #12]
 800d468:	e005      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    case e_String10: t_res.name = "string10"; t_res.size = 32*sizeof(char);   break;
 800d46a:	4b13      	ldr	r3, [pc, #76]	; (800d4b8 <Get_Msg_Data_Type_Info+0xe8>)
 800d46c:	60bb      	str	r3, [r7, #8]
 800d46e:	2320      	movs	r3, #32
 800d470:	733b      	strb	r3, [r7, #12]
 800d472:	e000      	b.n	800d476 <Get_Msg_Data_Type_Info+0xa6>
    default: break;
 800d474:	bf00      	nop
    }
    return t_res;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	461a      	mov	r2, r3
 800d47a:	f107 0308 	add.w	r3, r7, #8
 800d47e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d482:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop
 800d494:	0801130c 	.word	0x0801130c
 800d498:	08011314 	.word	0x08011314
 800d49c:	0801131c 	.word	0x0801131c
 800d4a0:	08011324 	.word	0x08011324
 800d4a4:	0801132c 	.word	0x0801132c
 800d4a8:	08011334 	.word	0x08011334
 800d4ac:	0801133c 	.word	0x0801133c
 800d4b0:	08011344 	.word	0x08011344
 800d4b4:	0801134c 	.word	0x0801134c
 800d4b8:	08011354 	.word	0x08011354

0800d4bc <Create_DOD>:
                                |__/                                                |__/ 
*/

// Create Data Object & Dictionary
void Create_DOD(uint8_t t_dod_id)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	71fb      	strb	r3, [r7, #7]
	msg_dods[t_dod_id].id = t_dod_id;
 800d4c6:	79fb      	ldrb	r3, [r7, #7]
 800d4c8:	4a07      	ldr	r2, [pc, #28]	; (800d4e8 <Create_DOD+0x2c>)
 800d4ca:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800d4ce:	fb01 f303 	mul.w	r3, r1, r3
 800d4d2:	4413      	add	r3, r2
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	79fa      	ldrb	r2, [r7, #7]
 800d4d8:	701a      	strb	r2, [r3, #0]
}
 800d4da:	bf00      	nop
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	240004c0 	.word	0x240004c0

0800d4ec <Create_PDO>:

void Create_PDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, uint8_t t_size, void* t_addr)
{
 800d4ec:	b5b0      	push	{r4, r5, r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	4608      	mov	r0, r1
 800d4f6:	4611      	mov	r1, r2
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	4623      	mov	r3, r4
 800d4fc:	71fb      	strb	r3, [r7, #7]
 800d4fe:	4603      	mov	r3, r0
 800d500:	71bb      	strb	r3, [r7, #6]
 800d502:	460b      	mov	r3, r1
 800d504:	717b      	strb	r3, [r7, #5]
 800d506:	4613      	mov	r3, r2
 800d508:	713b      	strb	r3, [r7, #4]
    msg_dods[t_dod_id].pdos[t_obj_id].id   = t_obj_id;
 800d50a:	79f9      	ldrb	r1, [r7, #7]
 800d50c:	79ba      	ldrb	r2, [r7, #6]
 800d50e:	4853      	ldr	r0, [pc, #332]	; (800d65c <Create_PDO+0x170>)
 800d510:	4613      	mov	r3, r2
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	4413      	add	r3, r2
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d51c:	fb02 f201 	mul.w	r2, r2, r1
 800d520:	4413      	add	r3, r2
 800d522:	4403      	add	r3, r0
 800d524:	3308      	adds	r3, #8
 800d526:	79ba      	ldrb	r2, [r7, #6]
 800d528:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].type = t_type;
 800d52a:	79f9      	ldrb	r1, [r7, #7]
 800d52c:	79ba      	ldrb	r2, [r7, #6]
 800d52e:	484b      	ldr	r0, [pc, #300]	; (800d65c <Create_PDO+0x170>)
 800d530:	4613      	mov	r3, r2
 800d532:	005b      	lsls	r3, r3, #1
 800d534:	4413      	add	r3, r2
 800d536:	00db      	lsls	r3, r3, #3
 800d538:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d53c:	fb02 f201 	mul.w	r2, r2, r1
 800d540:	4413      	add	r3, r2
 800d542:	4403      	add	r3, r0
 800d544:	3310      	adds	r3, #16
 800d546:	797a      	ldrb	r2, [r7, #5]
 800d548:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].size  = t_size;
 800d54a:	79f9      	ldrb	r1, [r7, #7]
 800d54c:	79ba      	ldrb	r2, [r7, #6]
 800d54e:	4843      	ldr	r0, [pc, #268]	; (800d65c <Create_PDO+0x170>)
 800d550:	4613      	mov	r3, r2
 800d552:	005b      	lsls	r3, r3, #1
 800d554:	4413      	add	r3, r2
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d55c:	fb02 f201 	mul.w	r2, r2, r1
 800d560:	4413      	add	r3, r2
 800d562:	4403      	add	r3, r0
 800d564:	3311      	adds	r3, #17
 800d566:	793a      	ldrb	r2, [r7, #4]
 800d568:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].addr = t_addr;
 800d56a:	79f9      	ldrb	r1, [r7, #7]
 800d56c:	79ba      	ldrb	r2, [r7, #6]
 800d56e:	483b      	ldr	r0, [pc, #236]	; (800d65c <Create_PDO+0x170>)
 800d570:	4613      	mov	r3, r2
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	4413      	add	r3, r2
 800d576:	00db      	lsls	r3, r3, #3
 800d578:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d57c:	fb02 f201 	mul.w	r2, r2, r1
 800d580:	4413      	add	r3, r2
 800d582:	4403      	add	r3, r0
 800d584:	3314      	adds	r3, #20
 800d586:	6a3a      	ldr	r2, [r7, #32]
 800d588:	601a      	str	r2, [r3, #0]

    msg_dods[t_dod_id].pdos[t_obj_id].data_size  = Get_Msg_Data_Type_Info(t_type).size * t_size;
 800d58a:	f107 0308 	add.w	r3, r7, #8
 800d58e:	797a      	ldrb	r2, [r7, #5]
 800d590:	4611      	mov	r1, r2
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff ff1c 	bl	800d3d0 <Get_Msg_Data_Type_Info>
 800d598:	7b3a      	ldrb	r2, [r7, #12]
 800d59a:	79f9      	ldrb	r1, [r7, #7]
 800d59c:	79bb      	ldrb	r3, [r7, #6]
 800d59e:	7938      	ldrb	r0, [r7, #4]
 800d5a0:	fb10 f202 	smulbb	r2, r0, r2
 800d5a4:	b2d4      	uxtb	r4, r2
 800d5a6:	482d      	ldr	r0, [pc, #180]	; (800d65c <Create_PDO+0x170>)
 800d5a8:	1c5a      	adds	r2, r3, #1
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	005b      	lsls	r3, r3, #1
 800d5ae:	4413      	add	r3, r2
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d5b6:	fb02 f201 	mul.w	r2, r2, r1
 800d5ba:	4413      	add	r3, r2
 800d5bc:	4403      	add	r3, r0
 800d5be:	3304      	adds	r3, #4
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].last_pub = malloc(msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 800d5c4:	79f9      	ldrb	r1, [r7, #7]
 800d5c6:	79bb      	ldrb	r3, [r7, #6]
 800d5c8:	4824      	ldr	r0, [pc, #144]	; (800d65c <Create_PDO+0x170>)
 800d5ca:	1c5a      	adds	r2, r3, #1
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	005b      	lsls	r3, r3, #1
 800d5d0:	4413      	add	r3, r2
 800d5d2:	00db      	lsls	r3, r3, #3
 800d5d4:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d5d8:	fb02 f201 	mul.w	r2, r2, r1
 800d5dc:	4413      	add	r3, r2
 800d5de:	4403      	add	r3, r0
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	79fc      	ldrb	r4, [r7, #7]
 800d5e6:	79bd      	ldrb	r5, [r7, #6]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f001 ff3d 	bl	800f468 <malloc>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	491a      	ldr	r1, [pc, #104]	; (800d65c <Create_PDO+0x170>)
 800d5f4:	1c6a      	adds	r2, r5, #1
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	4413      	add	r3, r2
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d602:	fb02 f204 	mul.w	r2, r2, r4
 800d606:	4413      	add	r3, r2
 800d608:	440b      	add	r3, r1
 800d60a:	6018      	str	r0, [r3, #0]

    memset(msg_dods[t_dod_id].pdos[t_obj_id].last_pub, 0xFF, msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 800d60c:	79f9      	ldrb	r1, [r7, #7]
 800d60e:	79bb      	ldrb	r3, [r7, #6]
 800d610:	4812      	ldr	r0, [pc, #72]	; (800d65c <Create_PDO+0x170>)
 800d612:	1c5a      	adds	r2, r3, #1
 800d614:	4613      	mov	r3, r2
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	4413      	add	r3, r2
 800d61a:	00db      	lsls	r3, r3, #3
 800d61c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d620:	fb02 f201 	mul.w	r2, r2, r1
 800d624:	4413      	add	r3, r2
 800d626:	4403      	add	r3, r0
 800d628:	6818      	ldr	r0, [r3, #0]
 800d62a:	79f9      	ldrb	r1, [r7, #7]
 800d62c:	79bb      	ldrb	r3, [r7, #6]
 800d62e:	4c0b      	ldr	r4, [pc, #44]	; (800d65c <Create_PDO+0x170>)
 800d630:	1c5a      	adds	r2, r3, #1
 800d632:	4613      	mov	r3, r2
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	4413      	add	r3, r2
 800d638:	00db      	lsls	r3, r3, #3
 800d63a:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d63e:	fb02 f201 	mul.w	r2, r2, r1
 800d642:	4413      	add	r3, r2
 800d644:	4423      	add	r3, r4
 800d646:	3304      	adds	r3, #4
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	21ff      	movs	r1, #255	; 0xff
 800d64e:	f001 ff29 	bl	800f4a4 <memset>
}
 800d652:	bf00      	nop
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bdb0      	pop	{r4, r5, r7, pc}
 800d65a:	bf00      	nop
 800d65c:	240004c0 	.word	0x240004c0

0800d660 <Create_SDO>:

void Create_SDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, MsgSDOCallback t_callback)
{
 800d660:	b590      	push	{r4, r7, lr}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	603b      	str	r3, [r7, #0]
 800d668:	4603      	mov	r3, r0
 800d66a:	71fb      	strb	r3, [r7, #7]
 800d66c:	460b      	mov	r3, r1
 800d66e:	71bb      	strb	r3, [r7, #6]
 800d670:	4613      	mov	r3, r2
 800d672:	717b      	strb	r3, [r7, #5]
	msg_dods[t_dod_id].sdos[t_obj_id].id        = t_obj_id;
 800d674:	79f9      	ldrb	r1, [r7, #7]
 800d676:	79ba      	ldrb	r2, [r7, #6]
 800d678:	4840      	ldr	r0, [pc, #256]	; (800d77c <Create_SDO+0x11c>)
 800d67a:	4613      	mov	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	4413      	add	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d686:	fb02 f201 	mul.w	r2, r2, r1
 800d68a:	4413      	add	r3, r2
 800d68c:	4403      	add	r3, r0
 800d68e:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800d692:	79ba      	ldrb	r2, [r7, #6]
 800d694:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].type      = t_type;
 800d696:	79f9      	ldrb	r1, [r7, #7]
 800d698:	79ba      	ldrb	r2, [r7, #6]
 800d69a:	4838      	ldr	r0, [pc, #224]	; (800d77c <Create_SDO+0x11c>)
 800d69c:	4613      	mov	r3, r2
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	009b      	lsls	r3, r3, #2
 800d6a4:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d6a8:	fb02 f201 	mul.w	r2, r2, r1
 800d6ac:	4413      	add	r3, r2
 800d6ae:	4403      	add	r3, r0
 800d6b0:	f203 23d9 	addw	r3, r3, #729	; 0x2d9
 800d6b4:	797a      	ldrb	r2, [r7, #5]
 800d6b6:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].callback  = t_callback;
 800d6b8:	79f9      	ldrb	r1, [r7, #7]
 800d6ba:	79ba      	ldrb	r2, [r7, #6]
 800d6bc:	482f      	ldr	r0, [pc, #188]	; (800d77c <Create_SDO+0x11c>)
 800d6be:	4613      	mov	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d6ca:	fb02 f201 	mul.w	r2, r2, r1
 800d6ce:	4413      	add	r3, r2
 800d6d0:	4403      	add	r3, r0
 800d6d2:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	601a      	str	r2, [r3, #0]

	msg_dods[t_dod_id].sdos[t_obj_id].args.status = DATA_OBJECT_SDO_IDLE;
 800d6da:	79f9      	ldrb	r1, [r7, #7]
 800d6dc:	79ba      	ldrb	r2, [r7, #6]
 800d6de:	4827      	ldr	r0, [pc, #156]	; (800d77c <Create_SDO+0x11c>)
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	4413      	add	r3, r2
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d6ec:	fb02 f201 	mul.w	r2, r2, r1
 800d6f0:	4413      	add	r3, r2
 800d6f2:	4403      	add	r3, r0
 800d6f4:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.size   = 0;
 800d6fc:	79f9      	ldrb	r1, [r7, #7]
 800d6fe:	79ba      	ldrb	r2, [r7, #6]
 800d700:	481e      	ldr	r0, [pc, #120]	; (800d77c <Create_SDO+0x11c>)
 800d702:	4613      	mov	r3, r2
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	4413      	add	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d70e:	fb02 f201 	mul.w	r2, r2, r1
 800d712:	4413      	add	r3, r2
 800d714:	4403      	add	r3, r0
 800d716:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800d71a:	2200      	movs	r2, #0
 800d71c:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data   = NULL;
 800d71e:	79f9      	ldrb	r1, [r7, #7]
 800d720:	79ba      	ldrb	r2, [r7, #6]
 800d722:	4816      	ldr	r0, [pc, #88]	; (800d77c <Create_SDO+0x11c>)
 800d724:	4613      	mov	r3, r2
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	4413      	add	r3, r2
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d730:	fb02 f201 	mul.w	r2, r2, r1
 800d734:	4413      	add	r3, r2
 800d736:	4403      	add	r3, r0
 800d738:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800d73c:	2200      	movs	r2, #0
 800d73e:	601a      	str	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data_size = Get_Msg_Data_Type_Info(t_type).size;
 800d740:	f107 0308 	add.w	r3, r7, #8
 800d744:	797a      	ldrb	r2, [r7, #5]
 800d746:	4611      	mov	r1, r2
 800d748:	4618      	mov	r0, r3
 800d74a:	f7ff fe41 	bl	800d3d0 <Get_Msg_Data_Type_Info>
 800d74e:	7b3b      	ldrb	r3, [r7, #12]
 800d750:	79f9      	ldrb	r1, [r7, #7]
 800d752:	79ba      	ldrb	r2, [r7, #6]
 800d754:	b29c      	uxth	r4, r3
 800d756:	4809      	ldr	r0, [pc, #36]	; (800d77c <Create_SDO+0x11c>)
 800d758:	4613      	mov	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	4413      	add	r3, r2
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d764:	fb02 f201 	mul.w	r2, r2, r1
 800d768:	4413      	add	r3, r2
 800d76a:	4403      	add	r3, r0
 800d76c:	f203 23e6 	addw	r3, r3, #742	; 0x2e6
 800d770:	4622      	mov	r2, r4
 800d772:	801a      	strh	r2, [r3, #0]
}
 800d774:	bf00      	nop
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd90      	pop	{r4, r7, pc}
 800d77c:	240004c0 	.word	0x240004c0

0800d780 <Find_PDO>:

MsgPDOStruct* Find_PDO(uint8_t t_dod_id, uint8_t t_id)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	4603      	mov	r3, r0
 800d788:	460a      	mov	r2, r1
 800d78a:	71fb      	strb	r3, [r7, #7]
 800d78c:	4613      	mov	r3, r2
 800d78e:	71bb      	strb	r3, [r7, #6]
	return &msg_dods[t_dod_id].pdos[t_id];
 800d790:	79f9      	ldrb	r1, [r7, #7]
 800d792:	79ba      	ldrb	r2, [r7, #6]
 800d794:	4613      	mov	r3, r2
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	4413      	add	r3, r2
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d7a0:	fb02 f201 	mul.w	r2, r2, r1
 800d7a4:	4413      	add	r3, r2
 800d7a6:	3308      	adds	r3, #8
 800d7a8:	4a03      	ldr	r2, [pc, #12]	; (800d7b8 <Find_PDO+0x38>)
 800d7aa:	4413      	add	r3, r2
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	240004c0 	.word	0x240004c0

0800d7bc <Find_SDO>:

MsgSDOStruct* Find_SDO(uint8_t t_dod_id, uint8_t t_id)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	460a      	mov	r2, r1
 800d7c6:	71fb      	strb	r3, [r7, #7]
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	71bb      	strb	r3, [r7, #6]
	return &msg_dods[t_dod_id].sdos[t_id];
 800d7cc:	79f9      	ldrb	r1, [r7, #7]
 800d7ce:	79ba      	ldrb	r2, [r7, #6]
 800d7d0:	4613      	mov	r3, r2
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	4413      	add	r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800d7dc:	fb02 f201 	mul.w	r2, r2, r1
 800d7e0:	4413      	add	r3, r2
 800d7e2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800d7e6:	4a04      	ldr	r2, [pc, #16]	; (800d7f8 <Find_SDO+0x3c>)
 800d7e8:	4413      	add	r3, r2
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	240004c0 	.word	0x240004c0

0800d7fc <Set_PDO>:

uint16_t Set_PDO(MsgPDOStruct* t_pdo, void* t_data)
{    
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
    memcpy(t_data, t_pdo->addr, t_pdo->data_size);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	68d9      	ldr	r1, [r3, #12]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	7d1b      	ldrb	r3, [r3, #20]
 800d80e:	461a      	mov	r2, r3
 800d810:	6838      	ldr	r0, [r7, #0]
 800d812:	f001 fe39 	bl	800f488 <memcpy>
    memcpy(t_pdo->last_pub, t_pdo->addr, t_pdo->data_size);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6918      	ldr	r0, [r3, #16]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	68d9      	ldr	r1, [r3, #12]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	7d1b      	ldrb	r3, [r3, #20]
 800d822:	461a      	mov	r2, r3
 800d824:	f001 fe30 	bl	800f488 <memcpy>
    return t_pdo->data_size;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	7d1b      	ldrb	r3, [r3, #20]
 800d82c:	b29b      	uxth	r3, r3
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <Get_PDO>:

uint16_t Get_PDO(MsgPDOStruct* t_pdo, void* t_data)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	6039      	str	r1, [r7, #0]
    memcpy(t_pdo->addr, t_data, t_pdo->data_size);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68d8      	ldr	r0, [r3, #12]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	7d1b      	ldrb	r3, [r3, #20]
 800d848:	461a      	mov	r2, r3
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	f001 fe1c 	bl	800f488 <memcpy>
    return t_pdo->data_size;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	7d1b      	ldrb	r3, [r3, #20]
 800d854:	b29b      	uxth	r3, r3
}
 800d856:	4618      	mov	r0, r3
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <Call_SDO>:

uint16_t Call_SDO(MsgSDOStruct* t_sdo, MsgSDOargs* t_req)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b082      	sub	sp, #8
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	6039      	str	r1, [r7, #0]
    if (t_sdo->args.data != NULL) {
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d007      	beq.n	800d880 <Call_SDO+0x22>
        free(t_sdo->args.data);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	4618      	mov	r0, r3
 800d876:	f001 fdff 	bl	800f478 <free>
        t_sdo->args.data = NULL;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	609a      	str	r2, [r3, #8]
    }

    t_sdo->args.status = DATA_OBJECT_SDO_IDLE;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2202      	movs	r2, #2
 800d884:	741a      	strb	r2, [r3, #16]
    t_sdo->callback(t_req, &t_sdo->args);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	3208      	adds	r2, #8
 800d88e:	4611      	mov	r1, r2
 800d890:	6838      	ldr	r0, [r7, #0]
 800d892:	4798      	blx	r3
    return t_req->size * t_sdo->args.data_size;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	791b      	ldrb	r3, [r3, #4]
 800d898:	b29a      	uxth	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	89db      	ldrh	r3, [r3, #14]
 800d89e:	fb12 f303 	smulbb	r3, r2, r3
 800d8a2:	b29b      	uxth	r3, r3
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <Set_SDO_args>:

    return &t_sdo->args;
}

uint16_t Set_SDO_args(MsgSDOStruct* t_sdo, MsgSDOargs* t_args)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
    // Copy status
	t_sdo->args.status = t_args->status;
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	741a      	strb	r2, [r3, #16]
    
    // Copy size
    int total_size = t_sdo->args.data_size * t_args->size;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	89db      	ldrh	r3, [r3, #14]
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	791b      	ldrb	r3, [r3, #4]
 800d8ca:	fb03 f302 	mul.w	r3, r3, r2
 800d8ce:	60fb      	str	r3, [r7, #12]
    t_sdo->args.size = t_args->size;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	791a      	ldrb	r2, [r3, #4]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	731a      	strb	r2, [r3, #12]
    if (total_size <= 0) {
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	dc01      	bgt.n	800d8e2 <Set_SDO_args+0x36>
        return 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	e01d      	b.n	800d91e <Set_SDO_args+0x72>
    }

    // Copy data
    if (t_sdo->args.data != NULL) {
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d007      	beq.n	800d8fa <Set_SDO_args+0x4e>
        free(t_sdo->args.data);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f001 fdc2 	bl	800f478 <free>
        t_sdo->args.data = NULL;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	609a      	str	r2, [r3, #8]
    }
    t_sdo->args.data = malloc(total_size);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f001 fdb3 	bl	800f468 <malloc>
 800d902:	4603      	mov	r3, r0
 800d904:	461a      	mov	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	609a      	str	r2, [r3, #8]
    memcpy(t_sdo->args.data, t_args->data, total_size);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6898      	ldr	r0, [r3, #8]
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	4619      	mov	r1, r3
 800d916:	f001 fdb7 	bl	800f488 <memcpy>

    return total_size;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	b29b      	uxth	r3, r3
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <Convert_Byte_Length>:
//
//    return ((temp1<<3)|(temp2<<2)|(temp3<<1)|(temp4));
//}

static int Convert_Byte_Length(uint8_t t_length)
{
 800d926:	b480      	push	{r7}
 800d928:	b083      	sub	sp, #12
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	4603      	mov	r3, r0
 800d92e:	71fb      	strb	r3, [r7, #7]
    if(t_length == 0 )                       		{return FDCAN_DLC_BYTES_0; }
 800d930:	79fb      	ldrb	r3, [r7, #7]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d101      	bne.n	800d93a <Convert_Byte_Length+0x14>
 800d936:	2300      	movs	r3, #0
 800d938:	e06f      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if(t_length == 1 )                  		{return FDCAN_DLC_BYTES_1; }
 800d93a:	79fb      	ldrb	r3, [r7, #7]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d102      	bne.n	800d946 <Convert_Byte_Length+0x20>
 800d940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d944:	e069      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if(t_length == 2 )                  		{return FDCAN_DLC_BYTES_2; }
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	2b02      	cmp	r3, #2
 800d94a:	d102      	bne.n	800d952 <Convert_Byte_Length+0x2c>
 800d94c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d950:	e063      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if(t_length == 3 )                  		{return FDCAN_DLC_BYTES_3; }
 800d952:	79fb      	ldrb	r3, [r7, #7]
 800d954:	2b03      	cmp	r3, #3
 800d956:	d102      	bne.n	800d95e <Convert_Byte_Length+0x38>
 800d958:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800d95c:	e05d      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if(t_length == 4 )                  		{return FDCAN_DLC_BYTES_4; }
 800d95e:	79fb      	ldrb	r3, [r7, #7]
 800d960:	2b04      	cmp	r3, #4
 800d962:	d102      	bne.n	800d96a <Convert_Byte_Length+0x44>
 800d964:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d968:	e057      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if(t_length == 5 )                  		{return FDCAN_DLC_BYTES_5; }
 800d96a:	79fb      	ldrb	r3, [r7, #7]
 800d96c:	2b05      	cmp	r3, #5
 800d96e:	d102      	bne.n	800d976 <Convert_Byte_Length+0x50>
 800d970:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800d974:	e051      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if(t_length == 6 )                  		{return FDCAN_DLC_BYTES_6; }
 800d976:	79fb      	ldrb	r3, [r7, #7]
 800d978:	2b06      	cmp	r3, #6
 800d97a:	d102      	bne.n	800d982 <Convert_Byte_Length+0x5c>
 800d97c:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800d980:	e04b      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if(t_length == 7 )                  		{return FDCAN_DLC_BYTES_7; }
 800d982:	79fb      	ldrb	r3, [r7, #7]
 800d984:	2b07      	cmp	r3, #7
 800d986:	d102      	bne.n	800d98e <Convert_Byte_Length+0x68>
 800d988:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800d98c:	e045      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if(t_length == 8 )                  		{return FDCAN_DLC_BYTES_8; }
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	2b08      	cmp	r3, #8
 800d992:	d102      	bne.n	800d99a <Convert_Byte_Length+0x74>
 800d994:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d998:	e03f      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if((t_length > 8 ) && (t_length <= 12 )) 	{return FDCAN_DLC_BYTES_12; }
 800d99a:	79fb      	ldrb	r3, [r7, #7]
 800d99c:	2b08      	cmp	r3, #8
 800d99e:	d905      	bls.n	800d9ac <Convert_Byte_Length+0x86>
 800d9a0:	79fb      	ldrb	r3, [r7, #7]
 800d9a2:	2b0c      	cmp	r3, #12
 800d9a4:	d802      	bhi.n	800d9ac <Convert_Byte_Length+0x86>
 800d9a6:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 800d9aa:	e036      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if((t_length > 12 ) && (t_length <= 16 ))	{return FDCAN_DLC_BYTES_16; }
 800d9ac:	79fb      	ldrb	r3, [r7, #7]
 800d9ae:	2b0c      	cmp	r3, #12
 800d9b0:	d905      	bls.n	800d9be <Convert_Byte_Length+0x98>
 800d9b2:	79fb      	ldrb	r3, [r7, #7]
 800d9b4:	2b10      	cmp	r3, #16
 800d9b6:	d802      	bhi.n	800d9be <Convert_Byte_Length+0x98>
 800d9b8:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 800d9bc:	e02d      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if((t_length > 16 ) && (t_length <= 20 ))	{return FDCAN_DLC_BYTES_20; }
 800d9be:	79fb      	ldrb	r3, [r7, #7]
 800d9c0:	2b10      	cmp	r3, #16
 800d9c2:	d905      	bls.n	800d9d0 <Convert_Byte_Length+0xaa>
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	2b14      	cmp	r3, #20
 800d9c8:	d802      	bhi.n	800d9d0 <Convert_Byte_Length+0xaa>
 800d9ca:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 800d9ce:	e024      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if((t_length > 20 ) && (t_length <= 24 ))	{return FDCAN_DLC_BYTES_24; }
 800d9d0:	79fb      	ldrb	r3, [r7, #7]
 800d9d2:	2b14      	cmp	r3, #20
 800d9d4:	d905      	bls.n	800d9e2 <Convert_Byte_Length+0xbc>
 800d9d6:	79fb      	ldrb	r3, [r7, #7]
 800d9d8:	2b18      	cmp	r3, #24
 800d9da:	d802      	bhi.n	800d9e2 <Convert_Byte_Length+0xbc>
 800d9dc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800d9e0:	e01b      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if((t_length > 24 ) && (t_length <= 32 ))	{return FDCAN_DLC_BYTES_32; }
 800d9e2:	79fb      	ldrb	r3, [r7, #7]
 800d9e4:	2b18      	cmp	r3, #24
 800d9e6:	d905      	bls.n	800d9f4 <Convert_Byte_Length+0xce>
 800d9e8:	79fb      	ldrb	r3, [r7, #7]
 800d9ea:	2b20      	cmp	r3, #32
 800d9ec:	d802      	bhi.n	800d9f4 <Convert_Byte_Length+0xce>
 800d9ee:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 800d9f2:	e012      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if((t_length > 32 ) && (t_length <= 48 ))	{return FDCAN_DLC_BYTES_48; }
 800d9f4:	79fb      	ldrb	r3, [r7, #7]
 800d9f6:	2b20      	cmp	r3, #32
 800d9f8:	d905      	bls.n	800da06 <Convert_Byte_Length+0xe0>
 800d9fa:	79fb      	ldrb	r3, [r7, #7]
 800d9fc:	2b30      	cmp	r3, #48	; 0x30
 800d9fe:	d802      	bhi.n	800da06 <Convert_Byte_Length+0xe0>
 800da00:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 800da04:	e009      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else if((t_length > 48 ) && (t_length <= 64 ))	{return FDCAN_DLC_BYTES_64; }
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	2b30      	cmp	r3, #48	; 0x30
 800da0a:	d905      	bls.n	800da18 <Convert_Byte_Length+0xf2>
 800da0c:	79fb      	ldrb	r3, [r7, #7]
 800da0e:	2b40      	cmp	r3, #64	; 0x40
 800da10:	d802      	bhi.n	800da18 <Convert_Byte_Length+0xf2>
 800da12:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 800da16:	e000      	b.n	800da1a <Convert_Byte_Length+0xf4>
    else                                			{return FDCAN_DLC_BYTES_0; }
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <Get_Header>:

static MsgDataObjectHeader Get_Header(uint8_t* t_byte_arr)
{
 800da26:	b480      	push	{r7}
 800da28:	b085      	sub	sp, #20
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	b29b      	uxth	r3, r3
	MsgDataObjectHeader t_header;
    memcpy(&t_header, t_byte_arr, sizeof(MsgDataObjectHeader));
 800da34:	813b      	strh	r3, [r7, #8]
    return t_header;
 800da36:	893b      	ldrh	r3, [r7, #8]
 800da38:	81bb      	strh	r3, [r7, #12]
 800da3a:	2300      	movs	r3, #0
 800da3c:	7b3a      	ldrb	r2, [r7, #12]
 800da3e:	f362 0307 	bfi	r3, r2, #0, #8
 800da42:	7b7a      	ldrb	r2, [r7, #13]
 800da44:	f362 230f 	bfi	r3, r2, #8, #8
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3714      	adds	r7, #20
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <Recv_EMCY>:
    free(t_tx_data);
    t_tx_data = NULL;
}

static void Recv_EMCY(uint8_t* t_byte_arr, uint32_t* t_err_code)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	461a      	mov	r2, r3
    memcpy(t_err_code, t_byte_arr, ERR_CODE_SIZE);
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	601a      	str	r2, [r3, #0]
}
 800da68:	bf00      	nop
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <Convert_Bytes_to_SDO_req>:
 |___/___/ \___/  |_|_\/_/\_\
                             
*/

static MsgSDOargs Convert_Bytes_to_SDO_req(uint8_t* t_byte_arr, uint16_t *t_byte_len)
{
 800da74:	b590      	push	{r4, r7, lr}
 800da76:	b08b      	sub	sp, #44	; 0x2c
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
	MsgSDOargs t_req;
    *t_byte_len = 0;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	801a      	strh	r2, [r3, #0]

    int t_idx = sizeof(t_req.status);
 800da86:	2301      	movs	r3, #1
 800da88:	627b      	str	r3, [r7, #36]	; 0x24
    int t_len = sizeof(t_req.size);
 800da8a:	2301      	movs	r3, #1
 800da8c:	623b      	str	r3, [r7, #32]

    memcpy(&t_req.size, &t_byte_arr[t_idx], t_len);
 800da8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	18d1      	adds	r1, r2, r3
 800da94:	6a3a      	ldr	r2, [r7, #32]
 800da96:	f107 0314 	add.w	r3, r7, #20
 800da9a:	3304      	adds	r3, #4
 800da9c:	4618      	mov	r0, r3
 800da9e:	f001 fcf3 	bl	800f488 <memcpy>
    *t_byte_len += t_len;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	881a      	ldrh	r2, [r3, #0]
 800daa6:	6a3b      	ldr	r3, [r7, #32]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	4413      	add	r3, r2
 800daac:	b29a      	uxth	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	801a      	strh	r2, [r3, #0]

    t_req.data = &t_byte_arr[t_idx + t_len];
 800dab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dab4:	6a3b      	ldr	r3, [r7, #32]
 800dab6:	4413      	add	r3, r2
 800dab8:	461a      	mov	r2, r3
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	4413      	add	r3, r2
 800dabe:	617b      	str	r3, [r7, #20]

    t_req.status = t_byte_arr[0];
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	b25b      	sxtb	r3, r3
 800dac6:	773b      	strb	r3, [r7, #28]
    *t_byte_len += 1;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	881b      	ldrh	r3, [r3, #0]
 800dacc:	3301      	adds	r3, #1
 800dace:	b29a      	uxth	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	801a      	strh	r2, [r3, #0]

    return t_req;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	461c      	mov	r4, r3
 800dad8:	f107 0314 	add.w	r3, r7, #20
 800dadc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	372c      	adds	r7, #44	; 0x2c
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd90      	pop	{r4, r7, pc}

0800daec <Read_SDO>:

static int Read_SDO(uint8_t* t_byte_arr)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b090      	sub	sp, #64	; 0x40
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
    int t_byte_read = 0;
 800daf4:	2300      	movs	r3, #0
 800daf6:	63bb      	str	r3, [r7, #56]	; 0x38
    MsgDataObjectHeader t_header = Get_Header(t_byte_arr);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7ff ff94 	bl	800da26 <Get_Header>
 800dafe:	4603      	mov	r3, r0
 800db00:	83bb      	strh	r3, [r7, #28]
    t_byte_read += sizeof(MsgDataObjectHeader);
 800db02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db04:	3302      	adds	r3, #2
 800db06:	63bb      	str	r3, [r7, #56]	; 0x38

    MsgSDOStruct* t_sdo = Find_SDO(t_header.dod_id, t_header.obj_id);
 800db08:	7f3b      	ldrb	r3, [r7, #28]
 800db0a:	7f7a      	ldrb	r2, [r7, #29]
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f7ff fe54 	bl	800d7bc <Find_SDO>
 800db14:	6378      	str	r0, [r7, #52]	; 0x34
    if (t_sdo == NULL) {
 800db16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d102      	bne.n	800db22 <Read_SDO+0x36>
        //TODO: Cannot Find SDO ERROR
        return -2;
 800db1c:	f06f 0301 	mvn.w	r3, #1
 800db20:	e0c9      	b.n	800dcb6 <Read_SDO+0x1ca>
    }

    uint16_t t_req_bytes = 0;
 800db22:	2300      	movs	r3, #0
 800db24:	837b      	strh	r3, [r7, #26]
    MsgSDOargs t_req = Convert_Bytes_to_SDO_req(t_byte_arr + t_byte_read, &t_req_bytes);
 800db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	18d1      	adds	r1, r2, r3
 800db2c:	f107 030c 	add.w	r3, r7, #12
 800db30:	f107 021a 	add.w	r2, r7, #26
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff ff9d 	bl	800da74 <Convert_Bytes_to_SDO_req>
    t_req.data_size = t_sdo->args.data_size; // Copy SDO info
 800db3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3c:	89db      	ldrh	r3, [r3, #14]
 800db3e:	827b      	strh	r3, [r7, #18]
    t_byte_read += t_req_bytes;
 800db40:	8b7b      	ldrh	r3, [r7, #26]
 800db42:	461a      	mov	r2, r3
 800db44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db46:	4413      	add	r3, r2
 800db48:	63bb      	str	r3, [r7, #56]	; 0x38

    uint16_t t_n_bytes = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
    if (t_req.status == DATA_OBJECT_SDO_REQU) {
 800db4e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800db52:	2b01      	cmp	r3, #1
 800db54:	f040 8095 	bne.w	800dc82 <Read_SDO+0x196>
    	t_n_bytes = Call_SDO(t_sdo, &t_req);
 800db58:	f107 030c 	add.w	r3, r7, #12
 800db5c:	4619      	mov	r1, r3
 800db5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db60:	f7ff fe7d 	bl	800d85e <Call_SDO>
 800db64:	4603      	mov	r3, r0
 800db66:	87fb      	strh	r3, [r7, #62]	; 0x3e
        cvector_push_back(sdo_res_list, t_header); // Assign Response
 800db68:	4b55      	ldr	r3, [pc, #340]	; (800dcc0 <Read_SDO+0x1d4>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d004      	beq.n	800db7a <Read_SDO+0x8e>
 800db70:	4b53      	ldr	r3, [pc, #332]	; (800dcc0 <Read_SDO+0x1d4>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3b04      	subs	r3, #4
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	e000      	b.n	800db7c <Read_SDO+0x90>
 800db7a:	2300      	movs	r3, #0
 800db7c:	633b      	str	r3, [r7, #48]	; 0x30
 800db7e:	4b50      	ldr	r3, [pc, #320]	; (800dcc0 <Read_SDO+0x1d4>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d004      	beq.n	800db90 <Read_SDO+0xa4>
 800db86:	4b4e      	ldr	r3, [pc, #312]	; (800dcc0 <Read_SDO+0x1d4>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800db8e:	e000      	b.n	800db92 <Read_SDO+0xa6>
 800db90:	2300      	movs	r3, #0
 800db92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db94:	4293      	cmp	r3, r2
 800db96:	d34d      	bcc.n	800dc34 <Read_SDO+0x148>
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	3305      	adds	r3, #5
 800db9c:	005b      	lsls	r3, r3, #1
 800db9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dba0:	4b47      	ldr	r3, [pc, #284]	; (800dcc0 <Read_SDO+0x1d4>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d020      	beq.n	800dbea <Read_SDO+0xfe>
 800dba8:	4b45      	ldr	r3, [pc, #276]	; (800dcc0 <Read_SDO+0x1d4>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	3b08      	subs	r3, #8
 800dbae:	627b      	str	r3, [r7, #36]	; 0x24
 800dbb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbb4:	f002 f816 	bl	800fbe4 <realloc>
 800dbb8:	6238      	str	r0, [r7, #32]
 800dbba:	6a3b      	ldr	r3, [r7, #32]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d105      	bne.n	800dbcc <Read_SDO+0xe0>
 800dbc0:	4b40      	ldr	r3, [pc, #256]	; (800dcc4 <Read_SDO+0x1d8>)
 800dbc2:	4a41      	ldr	r2, [pc, #260]	; (800dcc8 <Read_SDO+0x1dc>)
 800dbc4:	2183      	movs	r1, #131	; 0x83
 800dbc6:	4841      	ldr	r0, [pc, #260]	; (800dccc <Read_SDO+0x1e0>)
 800dbc8:	f001 fbf4 	bl	800f3b4 <__assert_func>
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	3308      	adds	r3, #8
 800dbd0:	4a3b      	ldr	r2, [pc, #236]	; (800dcc0 <Read_SDO+0x1d4>)
 800dbd2:	6013      	str	r3, [r2, #0]
 800dbd4:	4b3a      	ldr	r3, [pc, #232]	; (800dcc0 <Read_SDO+0x1d4>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d02b      	beq.n	800dc34 <Read_SDO+0x148>
 800dbdc:	4b38      	ldr	r3, [pc, #224]	; (800dcc0 <Read_SDO+0x1d4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	3b04      	subs	r3, #4
 800dbe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbe4:	3201      	adds	r2, #1
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	e024      	b.n	800dc34 <Read_SDO+0x148>
 800dbea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbec:	f001 fc3c 	bl	800f468 <malloc>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d105      	bne.n	800dc06 <Read_SDO+0x11a>
 800dbfa:	4b35      	ldr	r3, [pc, #212]	; (800dcd0 <Read_SDO+0x1e4>)
 800dbfc:	4a32      	ldr	r2, [pc, #200]	; (800dcc8 <Read_SDO+0x1dc>)
 800dbfe:	2183      	movs	r1, #131	; 0x83
 800dc00:	4832      	ldr	r0, [pc, #200]	; (800dccc <Read_SDO+0x1e0>)
 800dc02:	f001 fbd7 	bl	800f3b4 <__assert_func>
 800dc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc08:	3308      	adds	r3, #8
 800dc0a:	4a2d      	ldr	r2, [pc, #180]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	4b2c      	ldr	r3, [pc, #176]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d005      	beq.n	800dc22 <Read_SDO+0x136>
 800dc16:	4b2a      	ldr	r3, [pc, #168]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3b04      	subs	r3, #4
 800dc1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc1e:	3201      	adds	r2, #1
 800dc20:	601a      	str	r2, [r3, #0]
 800dc22:	4b27      	ldr	r3, [pc, #156]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d004      	beq.n	800dc34 <Read_SDO+0x148>
 800dc2a:	4b25      	ldr	r3, [pc, #148]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	3b08      	subs	r3, #8
 800dc30:	2200      	movs	r2, #0
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	4b22      	ldr	r3, [pc, #136]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	4b21      	ldr	r3, [pc, #132]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d005      	beq.n	800dc4c <Read_SDO+0x160>
 800dc40:	4b1f      	ldr	r3, [pc, #124]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	3b08      	subs	r3, #8
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	005b      	lsls	r3, r3, #1
 800dc4a:	e000      	b.n	800dc4e <Read_SDO+0x162>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4413      	add	r3, r2
 800dc50:	461a      	mov	r2, r3
 800dc52:	f107 031c 	add.w	r3, r7, #28
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	8013      	strh	r3, [r2, #0]
 800dc5a:	4b19      	ldr	r3, [pc, #100]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d024      	beq.n	800dcac <Read_SDO+0x1c0>
 800dc62:	4b17      	ldr	r3, [pc, #92]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d005      	beq.n	800dc76 <Read_SDO+0x18a>
 800dc6a:	4b15      	ldr	r3, [pc, #84]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	3b08      	subs	r3, #8
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	3301      	adds	r3, #1
 800dc74:	e000      	b.n	800dc78 <Read_SDO+0x18c>
 800dc76:	2301      	movs	r3, #1
 800dc78:	4a11      	ldr	r2, [pc, #68]	; (800dcc0 <Read_SDO+0x1d4>)
 800dc7a:	6812      	ldr	r2, [r2, #0]
 800dc7c:	3a08      	subs	r2, #8
 800dc7e:	6013      	str	r3, [r2, #0]
 800dc80:	e014      	b.n	800dcac <Read_SDO+0x1c0>
    } else if(t_req.status == DATA_OBJECT_SDO_SUCC || t_req.status == DATA_OBJECT_SDO_FAIL) {
 800dc82:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d004      	beq.n	800dc94 <Read_SDO+0x1a8>
 800dc8a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800dc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc92:	d108      	bne.n	800dca6 <Read_SDO+0x1ba>
    	t_n_bytes = Set_SDO_args(t_sdo, &t_req);
 800dc94:	f107 030c 	add.w	r3, r7, #12
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc9c:	f7ff fe06 	bl	800d8ac <Set_SDO_args>
 800dca0:	4603      	mov	r3, r0
 800dca2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if (t_n_bytes < 0) {
 800dca4:	e002      	b.n	800dcac <Read_SDO+0x1c0>
            //TODO: Set SDO Argument ERROR
            return -1;
        }
    } else {
        //TODO: Read SDO Status ERROR
        return -1;
 800dca6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcaa:	e004      	b.n	800dcb6 <Read_SDO+0x1ca>
    }

    t_byte_read += t_n_bytes;
 800dcac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dcae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcb0:	4413      	add	r3, r2
 800dcb2:	63bb      	str	r3, [r7, #56]	; 0x38
    return t_byte_read;
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3740      	adds	r7, #64	; 0x40
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	24003234 	.word	0x24003234
 800dcc4:	08011360 	.word	0x08011360
 800dcc8:	080113d4 	.word	0x080113d4
 800dccc:	08011368 	.word	0x08011368
 800dcd0:	080113a4 	.word	0x080113a4

0800dcd4 <Unpack_SDO>:

static int Unpack_SDO(uint8_t* t_byte_arr)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b086      	sub	sp, #24
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
    int t_cursor = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	617b      	str	r3, [r7, #20]

    // Get # of SDOs
    uint16_t t_n_sdo = 0;
 800dce0:	2300      	movs	r3, #0
 800dce2:	817b      	strh	r3, [r7, #10]
    memcpy(&t_n_sdo, &t_byte_arr[t_cursor], OBJ_NUMS_SIZE);
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	4413      	add	r3, r2
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	72bb      	strb	r3, [r7, #10]
    t_cursor += OBJ_NUMS_SIZE;
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	617b      	str	r3, [r7, #20]

    // Call & Respond SDOs
    if (t_n_sdo > 0) {
 800dcf4:	897b      	ldrh	r3, [r7, #10]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d01f      	beq.n	800dd3a <Unpack_SDO+0x66>
        for (int i = 0; i < t_n_sdo; ++i) {
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	613b      	str	r3, [r7, #16]
 800dcfe:	e017      	b.n	800dd30 <Unpack_SDO+0x5c>
            int temp_cursor = Read_SDO(&t_byte_arr[t_cursor]);
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	4413      	add	r3, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7ff fef0 	bl	800daec <Read_SDO>
 800dd0c:	60f8      	str	r0, [r7, #12]
            if (temp_cursor > 0) {
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	dd04      	ble.n	800dd1e <Unpack_SDO+0x4a>
            	t_cursor += temp_cursor;
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	4413      	add	r3, r2
 800dd1a:	617b      	str	r3, [r7, #20]
 800dd1c:	e005      	b.n	800dd2a <Unpack_SDO+0x56>
            } else if (temp_cursor < 0) {
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	da02      	bge.n	800dd2a <Unpack_SDO+0x56>
                //TODO: Unpack SDO ERROR
                return MSG_SDO_FAULT;
 800dd24:	f06f 0301 	mvn.w	r3, #1
 800dd28:	e008      	b.n	800dd3c <Unpack_SDO+0x68>
        for (int i = 0; i < t_n_sdo; ++i) {
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	613b      	str	r3, [r7, #16]
 800dd30:	897b      	ldrh	r3, [r7, #10]
 800dd32:	461a      	mov	r2, r3
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	4293      	cmp	r3, r2
 800dd38:	dbe2      	blt.n	800dd00 <Unpack_SDO+0x2c>
            }
        }
    }

    return MSG_DO_SUCCESS;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3718      	adds	r7, #24
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <Convert_SDOres_to_Bytes>:
 |___/___/ \___/    |_| /_/\_\
                              
*/

static int Convert_SDOres_to_Bytes(MsgDataObjectHeader* t_header, uint8_t* t_byte_arr)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
    int t_byte_written = 0;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	617b      	str	r3, [r7, #20]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	881b      	ldrh	r3, [r3, #0]
 800dd56:	b29a      	uxth	r2, r3
    // Set SDO Header
    memcpy(t_byte_arr, t_header, sizeof(MsgDataObjectHeader));
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	801a      	strh	r2, [r3, #0]
    t_byte_written += sizeof(MsgDataObjectHeader);
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	3302      	adds	r3, #2
 800dd60:	617b      	str	r3, [r7, #20]

    // Return Response
    MsgSDOStruct* t_sdo = Find_SDO(t_header->dod_id, t_header->obj_id);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	781a      	ldrb	r2, [r3, #0]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	785b      	ldrb	r3, [r3, #1]
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	f7ff fd25 	bl	800d7bc <Find_SDO>
 800dd72:	6138      	str	r0, [r7, #16]
    if (t_sdo == NULL) {
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d102      	bne.n	800dd80 <Convert_SDOres_to_Bytes+0x3c>
        //TODO: Cannot Find SDO ERROR
        return -2;
 800dd7a:	f06f 0301 	mvn.w	r3, #1
 800dd7e:	e029      	b.n	800ddd4 <Convert_SDOres_to_Bytes+0x90>
    }

    memcpy(t_byte_arr + t_byte_written, &t_sdo->args.status, sizeof(t_sdo->args.status));
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	4413      	add	r3, r2
 800dd86:	693a      	ldr	r2, [r7, #16]
 800dd88:	3210      	adds	r2, #16
 800dd8a:	7812      	ldrb	r2, [r2, #0]
 800dd8c:	701a      	strb	r2, [r3, #0]
    t_byte_written += sizeof(t_sdo->args.status);
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	3301      	adds	r3, #1
 800dd92:	617b      	str	r3, [r7, #20]
    memcpy(t_byte_arr + t_byte_written, &t_sdo->args.size,   sizeof(t_sdo->args.size));
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	683a      	ldr	r2, [r7, #0]
 800dd98:	4413      	add	r3, r2
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	320c      	adds	r2, #12
 800dd9e:	7812      	ldrb	r2, [r2, #0]
 800dda0:	701a      	strb	r2, [r3, #0]
    t_byte_written += sizeof(t_sdo->args.size);
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	3301      	adds	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]

    int t_data_len = t_sdo->args.size * t_sdo->args.data_size;
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	7b1b      	ldrb	r3, [r3, #12]
 800ddac:	461a      	mov	r2, r3
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	89db      	ldrh	r3, [r3, #14]
 800ddb2:	fb03 f302 	mul.w	r3, r3, r2
 800ddb6:	60fb      	str	r3, [r7, #12]
    memcpy(t_byte_arr + t_byte_written, t_sdo->args.data, t_data_len);
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	683a      	ldr	r2, [r7, #0]
 800ddbc:	18d0      	adds	r0, r2, r3
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	68fa      	ldr	r2, [r7, #12]
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	f001 fb5f 	bl	800f488 <memcpy>

    t_byte_written += t_data_len;
 800ddca:	697a      	ldr	r2, [r7, #20]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	4413      	add	r3, r2
 800ddd0:	617b      	str	r3, [r7, #20]

    return t_byte_written;
 800ddd2:	697b      	ldr	r3, [r7, #20]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3718      	adds	r7, #24
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <Pack_SDO>:

static int Pack_SDO(uint8_t* t_byte_arr, uint8_t* t_byte_len)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b08c      	sub	sp, #48	; 0x30
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	// check send list whether these are empty or not 
	if ((sdo_res_list == NULL) && (sdo_req_list == NULL)){
 800dde6:	4b53      	ldr	r3, [pc, #332]	; (800df34 <Pack_SDO+0x158>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d105      	bne.n	800ddfa <Pack_SDO+0x1e>
 800ddee:	4b52      	ldr	r3, [pc, #328]	; (800df38 <Pack_SDO+0x15c>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d101      	bne.n	800ddfa <Pack_SDO+0x1e>
		return MSG_SDO_NOTHING;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e098      	b.n	800df2c <Pack_SDO+0x150>
	}

	// Message Packaging
    int t_cursor = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Res SDOs
    int t_n_sdo_cursor = t_cursor;
 800ddfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de00:	623b      	str	r3, [r7, #32]
    t_cursor += OBJ_NUMS_SIZE;
 800de02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de04:	3301      	adds	r3, #1
 800de06:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t t_n_sdo = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	73fb      	strb	r3, [r7, #15]
    
    if (sdo_res_list != NULL) {
 800de0c:	4b49      	ldr	r3, [pc, #292]	; (800df34 <Pack_SDO+0x158>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d03e      	beq.n	800de92 <Pack_SDO+0xb6>
        for(int i = 0; i < cvector_size(sdo_res_list); ++i) {
 800de14:	2300      	movs	r3, #0
 800de16:	62bb      	str	r3, [r7, #40]	; 0x28
 800de18:	e020      	b.n	800de5c <Pack_SDO+0x80>
            int temp_cursor = Convert_SDOres_to_Bytes(&sdo_res_list[i], &t_byte_arr[t_cursor]);
 800de1a:	4b46      	ldr	r3, [pc, #280]	; (800df34 <Pack_SDO+0x158>)
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de20:	005b      	lsls	r3, r3, #1
 800de22:	18d0      	adds	r0, r2, r3
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	4413      	add	r3, r2
 800de2a:	4619      	mov	r1, r3
 800de2c:	f7ff ff8a 	bl	800dd44 <Convert_SDOres_to_Bytes>
 800de30:	61b8      	str	r0, [r7, #24]
            if (temp_cursor > 0) {
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	2b00      	cmp	r3, #0
 800de36:	dd08      	ble.n	800de4a <Pack_SDO+0x6e>
            	t_cursor += temp_cursor;
 800de38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	4413      	add	r3, r2
 800de3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                ++t_n_sdo;
 800de40:	7bfb      	ldrb	r3, [r7, #15]
 800de42:	3301      	adds	r3, #1
 800de44:	b2db      	uxtb	r3, r3
 800de46:	73fb      	strb	r3, [r7, #15]
 800de48:	e005      	b.n	800de56 <Pack_SDO+0x7a>
            } else if (temp_cursor < 0) {
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	da02      	bge.n	800de56 <Pack_SDO+0x7a>
                //TODO: Pack Response SDO Error
                return MSG_SDO_FAULT;
 800de50:	f06f 0301 	mvn.w	r3, #1
 800de54:	e06a      	b.n	800df2c <Pack_SDO+0x150>
        for(int i = 0; i < cvector_size(sdo_res_list); ++i) {
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	3301      	adds	r3, #1
 800de5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800de5c:	4b35      	ldr	r3, [pc, #212]	; (800df34 <Pack_SDO+0x158>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d004      	beq.n	800de6e <Pack_SDO+0x92>
 800de64:	4b33      	ldr	r3, [pc, #204]	; (800df34 <Pack_SDO+0x158>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3b08      	subs	r3, #8
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	e000      	b.n	800de70 <Pack_SDO+0x94>
 800de6e:	2300      	movs	r3, #0
 800de70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de72:	4293      	cmp	r3, r2
 800de74:	d8d1      	bhi.n	800de1a <Pack_SDO+0x3e>
            }
        }
        cvector_free(sdo_res_list);
 800de76:	4b2f      	ldr	r3, [pc, #188]	; (800df34 <Pack_SDO+0x158>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d006      	beq.n	800de8c <Pack_SDO+0xb0>
 800de7e:	4b2d      	ldr	r3, [pc, #180]	; (800df34 <Pack_SDO+0x158>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	3b08      	subs	r3, #8
 800de84:	61fb      	str	r3, [r7, #28]
 800de86:	69f8      	ldr	r0, [r7, #28]
 800de88:	f001 faf6 	bl	800f478 <free>
        sdo_res_list = NULL;
 800de8c:	4b29      	ldr	r3, [pc, #164]	; (800df34 <Pack_SDO+0x158>)
 800de8e:	2200      	movs	r2, #0
 800de90:	601a      	str	r2, [r3, #0]
    }

    // Req SDOs
    if (sdo_req_list != NULL) {
 800de92:	4b29      	ldr	r3, [pc, #164]	; (800df38 <Pack_SDO+0x15c>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d03e      	beq.n	800df18 <Pack_SDO+0x13c>
        for(int i = 0; i < cvector_size(sdo_req_list); ++i) {
 800de9a:	2300      	movs	r3, #0
 800de9c:	627b      	str	r3, [r7, #36]	; 0x24
 800de9e:	e020      	b.n	800dee2 <Pack_SDO+0x106>
            int temp_cursor = Convert_SDOres_to_Bytes(&sdo_req_list[i], &t_byte_arr[t_cursor]);
 800dea0:	4b25      	ldr	r3, [pc, #148]	; (800df38 <Pack_SDO+0x15c>)
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	18d0      	adds	r0, r2, r3
 800deaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	4413      	add	r3, r2
 800deb0:	4619      	mov	r1, r3
 800deb2:	f7ff ff47 	bl	800dd44 <Convert_SDOres_to_Bytes>
 800deb6:	6138      	str	r0, [r7, #16]
            if (temp_cursor > 0) {
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	2b00      	cmp	r3, #0
 800debc:	dd08      	ble.n	800ded0 <Pack_SDO+0xf4>
            	t_cursor += temp_cursor;
 800debe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	4413      	add	r3, r2
 800dec4:	62fb      	str	r3, [r7, #44]	; 0x2c
                ++t_n_sdo;
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
 800dec8:	3301      	adds	r3, #1
 800deca:	b2db      	uxtb	r3, r3
 800decc:	73fb      	strb	r3, [r7, #15]
 800dece:	e005      	b.n	800dedc <Pack_SDO+0x100>
            } else if (temp_cursor < 0) {
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	da02      	bge.n	800dedc <Pack_SDO+0x100>
                //TODO: Pack Request SDO Error
                return MSG_SDO_FAULT;
 800ded6:	f06f 0301 	mvn.w	r3, #1
 800deda:	e027      	b.n	800df2c <Pack_SDO+0x150>
        for(int i = 0; i < cvector_size(sdo_req_list); ++i) {
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	3301      	adds	r3, #1
 800dee0:	627b      	str	r3, [r7, #36]	; 0x24
 800dee2:	4b15      	ldr	r3, [pc, #84]	; (800df38 <Pack_SDO+0x15c>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d004      	beq.n	800def4 <Pack_SDO+0x118>
 800deea:	4b13      	ldr	r3, [pc, #76]	; (800df38 <Pack_SDO+0x15c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	3b08      	subs	r3, #8
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	e000      	b.n	800def6 <Pack_SDO+0x11a>
 800def4:	2300      	movs	r3, #0
 800def6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def8:	4293      	cmp	r3, r2
 800defa:	d8d1      	bhi.n	800dea0 <Pack_SDO+0xc4>
            }
        }
        cvector_free(sdo_req_list);
 800defc:	4b0e      	ldr	r3, [pc, #56]	; (800df38 <Pack_SDO+0x15c>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d006      	beq.n	800df12 <Pack_SDO+0x136>
 800df04:	4b0c      	ldr	r3, [pc, #48]	; (800df38 <Pack_SDO+0x15c>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	3b08      	subs	r3, #8
 800df0a:	617b      	str	r3, [r7, #20]
 800df0c:	6978      	ldr	r0, [r7, #20]
 800df0e:	f001 fab3 	bl	800f478 <free>
        sdo_req_list = NULL;
 800df12:	4b09      	ldr	r3, [pc, #36]	; (800df38 <Pack_SDO+0x15c>)
 800df14:	2200      	movs	r2, #0
 800df16:	601a      	str	r2, [r3, #0]
    }

    // Set # of SDOs
    memcpy(&t_byte_arr[t_n_sdo_cursor], &t_n_sdo, OBJ_NUMS_SIZE);
 800df18:	6a3b      	ldr	r3, [r7, #32]
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	4413      	add	r3, r2
 800df1e:	7bfa      	ldrb	r2, [r7, #15]
 800df20:	701a      	strb	r2, [r3, #0]

    *t_byte_len = t_cursor;
 800df22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df24:	b2da      	uxtb	r2, r3
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	701a      	strb	r2, [r3, #0]

    return MSG_DO_SUCCESS;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3730      	adds	r7, #48	; 0x30
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	24003234 	.word	0x24003234
 800df38:	24000464 	.word	0x24000464

0800df3c <Send_SDO>:

static int Send_SDO(uint8_t t_dest_node)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af00      	add	r7, sp, #0
 800df42:	4603      	mov	r3, r0
 800df44:	71fb      	strb	r3, [r7, #7]
    uint8_t t_byte_len;
    uint16_t t_identifier = SDO|(node_id<<4)|t_dest_node;
 800df46:	4b17      	ldr	r3, [pc, #92]	; (800dfa4 <Send_SDO+0x68>)
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	011b      	lsls	r3, r3, #4
 800df4c:	b21b      	sxth	r3, r3
 800df4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800df52:	b21a      	sxth	r2, r3
 800df54:	79fb      	ldrb	r3, [r7, #7]
 800df56:	b21b      	sxth	r3, r3
 800df58:	4313      	orrs	r3, r2
 800df5a:	b21b      	sxth	r3, r3
 800df5c:	82fb      	strh	r3, [r7, #22]

    int t_check = Pack_SDO(fdcanRxData, &t_byte_len);
 800df5e:	f107 030f 	add.w	r3, r7, #15
 800df62:	4619      	mov	r1, r3
 800df64:	4810      	ldr	r0, [pc, #64]	; (800dfa8 <Send_SDO+0x6c>)
 800df66:	f7ff ff39 	bl	800dddc <Pack_SDO>
 800df6a:	6138      	str	r0, [r7, #16]

    if(t_check < 0){
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	da01      	bge.n	800df76 <Send_SDO+0x3a>
        //TODO: Send SDO Error
    	return t_check;
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	e011      	b.n	800df9a <Send_SDO+0x5e>
    } else if(t_check){
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d001      	beq.n	800df80 <Send_SDO+0x44>
    	return t_check;
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	e00c      	b.n	800df9a <Send_SDO+0x5e>

    if (t_byte_len > 64) {
        //TODO: TX MESSAGE TOO LONG ERROR 
    }

    if(Send_MSG(t_identifier, t_byte_len, fdcanRxData) != 0){
 800df80:	7bfb      	ldrb	r3, [r7, #15]
 800df82:	4619      	mov	r1, r3
 800df84:	8afb      	ldrh	r3, [r7, #22]
 800df86:	4a08      	ldr	r2, [pc, #32]	; (800dfa8 <Send_SDO+0x6c>)
 800df88:	4618      	mov	r0, r3
 800df8a:	f000 fb3f 	bl	800e60c <Send_MSG>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <Send_SDO+0x5c>
        return t_check;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	e000      	b.n	800df9a <Send_SDO+0x5e>
        //TODO: MSG TX ERROR
    }

    return t_check;
 800df98:	693b      	ldr	r3, [r7, #16]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	2400cf30 	.word	0x2400cf30
 800dfa8:	2400d46c 	.word	0x2400d46c

0800dfac <Convert_Bytes_to_PDO>:
 |_| |___/ \___/  |_|_\/_/\_\
                             
*/

static int Convert_Bytes_to_PDO(uint8_t* t_byte_arr)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
    int t_byte_read = 0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	617b      	str	r3, [r7, #20]

    MsgDataObjectHeader t_header = Get_Header(t_byte_arr);
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7ff fd34 	bl	800da26 <Get_Header>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	81bb      	strh	r3, [r7, #12]
    t_byte_read += sizeof(MsgDataObjectHeader);
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	3302      	adds	r3, #2
 800dfc6:	617b      	str	r3, [r7, #20]

    MsgPDOStruct* t_pdo = Find_PDO(t_header.dod_id, t_header.obj_id);
 800dfc8:	7b3b      	ldrb	r3, [r7, #12]
 800dfca:	7b7a      	ldrb	r2, [r7, #13]
 800dfcc:	4611      	mov	r1, r2
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7ff fbd6 	bl	800d780 <Find_PDO>
 800dfd4:	6138      	str	r0, [r7, #16]
    if (t_pdo == NULL) {
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d102      	bne.n	800dfe2 <Convert_Bytes_to_PDO+0x36>
        //TODO: Cannot Find PDO Error
        return -2;
 800dfdc:	f06f 0301 	mvn.w	r3, #1
 800dfe0:	e00d      	b.n	800dffe <Convert_Bytes_to_PDO+0x52>
    }

    uint16_t t_n_bytes = Get_PDO(t_pdo, (void*)(t_byte_arr + t_byte_read));
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	4619      	mov	r1, r3
 800dfea:	6938      	ldr	r0, [r7, #16]
 800dfec:	f7ff fc23 	bl	800d836 <Get_PDO>
 800dff0:	4603      	mov	r3, r0
 800dff2:	81fb      	strh	r3, [r7, #14]
    if (t_n_bytes < 0) {
        //TODO: Copy PDO to Receive Error
        return -1;
    }
    t_byte_read += t_n_bytes;
 800dff4:	89fb      	ldrh	r3, [r7, #14]
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	4413      	add	r3, r2
 800dffa:	617b      	str	r3, [r7, #20]

    return t_byte_read;
 800dffc:	697b      	ldr	r3, [r7, #20]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <Unpack_PDO>:

static int Unpack_PDO(uint8_t* t_byte_arr)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b086      	sub	sp, #24
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
    int t_cursor = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	617b      	str	r3, [r7, #20]

    // Get # of PDOs
    uint8_t t_n_pdo = 0;
 800e012:	2300      	movs	r3, #0
 800e014:	72fb      	strb	r3, [r7, #11]
    memcpy(&t_n_pdo, &t_byte_arr[t_cursor], OBJ_NUMS_SIZE);
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	4413      	add	r3, r2
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	72fb      	strb	r3, [r7, #11]
    t_cursor += OBJ_NUMS_SIZE;
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	3301      	adds	r3, #1
 800e024:	617b      	str	r3, [r7, #20]

    if (t_n_pdo > 0) {
 800e026:	7afb      	ldrb	r3, [r7, #11]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d01f      	beq.n	800e06c <Unpack_PDO+0x66>
        for (int i = 0; i < t_n_pdo; ++i) {
 800e02c:	2300      	movs	r3, #0
 800e02e:	613b      	str	r3, [r7, #16]
 800e030:	e017      	b.n	800e062 <Unpack_PDO+0x5c>
            int temp_cursor = Convert_Bytes_to_PDO(&t_byte_arr[t_cursor]);
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	4413      	add	r3, r2
 800e038:	4618      	mov	r0, r3
 800e03a:	f7ff ffb7 	bl	800dfac <Convert_Bytes_to_PDO>
 800e03e:	60f8      	str	r0, [r7, #12]
            if (temp_cursor > 0) {
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2b00      	cmp	r3, #0
 800e044:	dd04      	ble.n	800e050 <Unpack_PDO+0x4a>
            	t_cursor += temp_cursor;
 800e046:	697a      	ldr	r2, [r7, #20]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	4413      	add	r3, r2
 800e04c:	617b      	str	r3, [r7, #20]
 800e04e:	e005      	b.n	800e05c <Unpack_PDO+0x56>
            } else if (temp_cursor < 0) {
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	da02      	bge.n	800e05c <Unpack_PDO+0x56>
                //TODO: Unpack PDO Error
                return MSG_PDO_FAULT;
 800e056:	f04f 33ff 	mov.w	r3, #4294967295
 800e05a:	e008      	b.n	800e06e <Unpack_PDO+0x68>
        for (int i = 0; i < t_n_pdo; ++i) {
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	3301      	adds	r3, #1
 800e060:	613b      	str	r3, [r7, #16]
 800e062:	7afb      	ldrb	r3, [r7, #11]
 800e064:	461a      	mov	r2, r3
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	4293      	cmp	r3, r2
 800e06a:	dbe2      	blt.n	800e032 <Unpack_PDO+0x2c>
            }
        }
    }

    return MSG_DO_SUCCESS;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3718      	adds	r7, #24
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <Convert_PDO_to_Bytes>:
 |_| |___/ \___/    |_| /_/\_\
                              
*/

static int Convert_PDO_to_Bytes(MsgDataObjectHeader* t_header, uint8_t* t_byte_arr)
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b086      	sub	sp, #24
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
 800e07e:	6039      	str	r1, [r7, #0]
    int t_header_size = sizeof(MsgDataObjectHeader);
 800e080:	2302      	movs	r3, #2
 800e082:	617b      	str	r3, [r7, #20]
    // Publish PDO
    MsgPDOStruct* t_pdo = Find_PDO(t_header->dod_id, t_header->obj_id);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	781a      	ldrb	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	785b      	ldrb	r3, [r3, #1]
 800e08c:	4619      	mov	r1, r3
 800e08e:	4610      	mov	r0, r2
 800e090:	f7ff fb76 	bl	800d780 <Find_PDO>
 800e094:	6138      	str	r0, [r7, #16]
    if (t_pdo == NULL) {
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d102      	bne.n	800e0a2 <Convert_PDO_to_Bytes+0x2c>
        //TODO: Cannot Find PDO
        return -2;
 800e09c:	f06f 0301 	mvn.w	r3, #1
 800e0a0:	e016      	b.n	800e0d0 <Convert_PDO_to_Bytes+0x5a>
    }

    uint16_t t_n_bytes = Set_PDO(t_pdo, t_byte_arr + t_header_size);
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	683a      	ldr	r2, [r7, #0]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6938      	ldr	r0, [r7, #16]
 800e0ac:	f7ff fba6 	bl	800d7fc <Set_PDO>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	81fb      	strh	r3, [r7, #14]
    if (t_n_bytes < 0) {
        //TODO: Copy PDO to Send 
        return -1;
    } else if (t_n_bytes == 0) { // Nothing to publish
 800e0b4:	89fb      	ldrh	r3, [r7, #14]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d101      	bne.n	800e0be <Convert_PDO_to_Bytes+0x48>
        return 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	e008      	b.n	800e0d0 <Convert_PDO_to_Bytes+0x5a>
    }

    memcpy(t_byte_arr, t_header, t_header_size);
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	6879      	ldr	r1, [r7, #4]
 800e0c4:	6838      	ldr	r0, [r7, #0]
 800e0c6:	f001 f9df 	bl	800f488 <memcpy>
    return t_header_size + t_n_bytes;
 800e0ca:	89fa      	ldrh	r2, [r7, #14]
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	4413      	add	r3, r2
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3718      	adds	r7, #24
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <Pack_PDO>:

static int Pack_PDO(uint8_t* t_byte_arr, uint8_t* t_byte_len)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b088      	sub	sp, #32
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
	// check send list whether these are empty or not 
    if (pdo_send_list == NULL){
 800e0e2:	4b28      	ldr	r3, [pc, #160]	; (800e184 <Pack_PDO+0xac>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d101      	bne.n	800e0ee <Pack_PDO+0x16>
        return 0;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	e046      	b.n	800e17c <Pack_PDO+0xa4>
    }

    int t_cursor = 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	61fb      	str	r3, [r7, #28]

    // Pub PDO
    int t_n_pdo_cursor = t_cursor;
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	617b      	str	r3, [r7, #20]
    t_cursor += OBJ_NUMS_SIZE;
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	61fb      	str	r3, [r7, #28]

    uint8_t t_n_pdo = 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	73fb      	strb	r3, [r7, #15]

    if (pdo_send_list != NULL) {
 800e100:	4b20      	ldr	r3, [pc, #128]	; (800e184 <Pack_PDO+0xac>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d02f      	beq.n	800e168 <Pack_PDO+0x90>
        for(int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800e108:	2300      	movs	r3, #0
 800e10a:	61bb      	str	r3, [r7, #24]
 800e10c:	e01f      	b.n	800e14e <Pack_PDO+0x76>

            int temp_cursor = Convert_PDO_to_Bytes(&pdo_send_list[i], &t_byte_arr[t_cursor]);
 800e10e:	4b1d      	ldr	r3, [pc, #116]	; (800e184 <Pack_PDO+0xac>)
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	005b      	lsls	r3, r3, #1
 800e116:	18d0      	adds	r0, r2, r3
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	4413      	add	r3, r2
 800e11e:	4619      	mov	r1, r3
 800e120:	f7ff ffa9 	bl	800e076 <Convert_PDO_to_Bytes>
 800e124:	6138      	str	r0, [r7, #16]
            if (temp_cursor > 0) {
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	dd08      	ble.n	800e13e <Pack_PDO+0x66>
            	t_cursor += temp_cursor;
 800e12c:	69fa      	ldr	r2, [r7, #28]
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	4413      	add	r3, r2
 800e132:	61fb      	str	r3, [r7, #28]
                ++t_n_pdo;
 800e134:	7bfb      	ldrb	r3, [r7, #15]
 800e136:	3301      	adds	r3, #1
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	73fb      	strb	r3, [r7, #15]
 800e13c:	e004      	b.n	800e148 <Pack_PDO+0x70>
            } else if (temp_cursor < 0) {
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	2b00      	cmp	r3, #0
 800e142:	da01      	bge.n	800e148 <Pack_PDO+0x70>
                //TODO: Pack PDO Error
                return temp_cursor;
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	e019      	b.n	800e17c <Pack_PDO+0xa4>
        for(int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	3301      	adds	r3, #1
 800e14c:	61bb      	str	r3, [r7, #24]
 800e14e:	4b0d      	ldr	r3, [pc, #52]	; (800e184 <Pack_PDO+0xac>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d004      	beq.n	800e160 <Pack_PDO+0x88>
 800e156:	4b0b      	ldr	r3, [pc, #44]	; (800e184 <Pack_PDO+0xac>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	3b08      	subs	r3, #8
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	e000      	b.n	800e162 <Pack_PDO+0x8a>
 800e160:	2300      	movs	r3, #0
 800e162:	69ba      	ldr	r2, [r7, #24]
 800e164:	4293      	cmp	r3, r2
 800e166:	d8d2      	bhi.n	800e10e <Pack_PDO+0x36>
            }
        }
    }

    // Set # of PDOs
    memcpy(&t_byte_arr[t_n_pdo_cursor], &t_n_pdo, OBJ_NUMS_SIZE);
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	4413      	add	r3, r2
 800e16e:	7bfa      	ldrb	r2, [r7, #15]
 800e170:	701a      	strb	r2, [r3, #0]

    *t_byte_len = t_cursor;
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	b2da      	uxtb	r2, r3
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	701a      	strb	r2, [r3, #0]

    return MSG_DO_SUCCESS;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3720      	adds	r7, #32
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	240004bc 	.word	0x240004bc

0800e188 <Send_PDO>:

static int Send_PDO()
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
    uint8_t t_byte_len;
    uint8_t t_dest_node = NODE_ID_RA;
 800e18e:	2307      	movs	r3, #7
 800e190:	737b      	strb	r3, [r7, #13]
    uint16_t t_identifier;

    if(GUI_onoff)	{	t_identifier = GUI_SYNC|GUI_command;	}
 800e192:	4b1e      	ldr	r3, [pc, #120]	; (800e20c <Send_PDO+0x84>)
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d007      	beq.n	800e1aa <Send_PDO+0x22>
 800e19a:	4b1d      	ldr	r3, [pc, #116]	; (800e210 <Send_PDO+0x88>)
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	b21b      	sxth	r3, r3
 800e1a0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800e1a4:	b21b      	sxth	r3, r3
 800e1a6:	81fb      	strh	r3, [r7, #14]
 800e1a8:	e00b      	b.n	800e1c2 <Send_PDO+0x3a>
    else 			{	t_identifier = PDO|(node_id<<4)|t_dest_node;	}
 800e1aa:	4b1a      	ldr	r3, [pc, #104]	; (800e214 <Send_PDO+0x8c>)
 800e1ac:	781b      	ldrb	r3, [r3, #0]
 800e1ae:	011b      	lsls	r3, r3, #4
 800e1b0:	b21b      	sxth	r3, r3
 800e1b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e1b6:	b21a      	sxth	r2, r3
 800e1b8:	7b7b      	ldrb	r3, [r7, #13]
 800e1ba:	b21b      	sxth	r3, r3
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	b21b      	sxth	r3, r3
 800e1c0:	81fb      	strh	r3, [r7, #14]

    int t_check = Pack_PDO(fdcanTxData, &t_byte_len);
 800e1c2:	1dfb      	adds	r3, r7, #7
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4814      	ldr	r0, [pc, #80]	; (800e218 <Send_PDO+0x90>)
 800e1c8:	f7ff ff86 	bl	800e0d8 <Pack_PDO>
 800e1cc:	60b8      	str	r0, [r7, #8]

    if(t_check != 0){
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d001      	beq.n	800e1d8 <Send_PDO+0x50>
        //TODO: Send PDO Error
    	return t_check;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	e014      	b.n	800e202 <Send_PDO+0x7a>
    } else if(t_check){
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <Send_PDO+0x5a>
    	return t_check;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	e00f      	b.n	800e202 <Send_PDO+0x7a>
    }

    if (t_byte_len != 1){
 800e1e2:	79fb      	ldrb	r3, [r7, #7]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d00b      	beq.n	800e200 <Send_PDO+0x78>
		if(Send_MSG(t_identifier, t_byte_len, fdcanTxData) == 0){
 800e1e8:	79fb      	ldrb	r3, [r7, #7]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	89fb      	ldrh	r3, [r7, #14]
 800e1ee:	4a0a      	ldr	r2, [pc, #40]	; (800e218 <Send_PDO+0x90>)
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f000 fa0b 	bl	800e60c <Send_MSG>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d101      	bne.n	800e200 <Send_PDO+0x78>
			return t_check;
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	e000      	b.n	800e202 <Send_PDO+0x7a>
			//TODO: MSG TX ERROR
		}
    }

	return t_check;
 800e200:	68bb      	ldr	r3, [r7, #8]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	2400d05c 	.word	0x2400d05c
 800e210:	2400d000 	.word	0x2400d000
 800e214:	2400cf30 	.word	0x2400cf30
 800e218:	240031f4 	.word	0x240031f4

0800e21c <Ext_Send_PDO>:

static int Ext_Send_PDO()
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	af00      	add	r7, sp, #0
	if(GUI_command == GET_DIRECTION_SET_DATA){
 800e220:	4b06      	ldr	r3, [pc, #24]	; (800e23c <Ext_Send_PDO+0x20>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	2b1f      	cmp	r3, #31
 800e226:	d105      	bne.n	800e234 <Ext_Send_PDO+0x18>
		Send_MSG((uint16_t)(GUI_SYNC|GET_DIRECTION_SET_DONE), 1, (uint8_t*)0);
 800e228:	2200      	movs	r2, #0
 800e22a:	2101      	movs	r1, #1
 800e22c:	f44f 60a4 	mov.w	r0, #1312	; 0x520
 800e230:	f000 f9ec 	bl	800e60c <Send_MSG>
	}

	return 0;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	2400d000 	.word	0x2400d000

0800e240 <Set_PDO_Dummy>:

static int Set_PDO_Dummy()
{
 800e240:	b480      	push	{r7}
 800e242:	af00      	add	r7, sp, #0
	static int t_count = 0;

	test_dummy[0] = comm_loop_cnt;
 800e244:	4b19      	ldr	r3, [pc, #100]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a19      	ldr	r2, [pc, #100]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e24a:	6013      	str	r3, [r2, #0]
	test_dummy[1] = comm_loop_cnt;
 800e24c:	4b17      	ldr	r3, [pc, #92]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a17      	ldr	r2, [pc, #92]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e252:	6053      	str	r3, [r2, #4]
	test_dummy[2] = comm_loop_cnt;
 800e254:	4b15      	ldr	r3, [pc, #84]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a15      	ldr	r2, [pc, #84]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e25a:	6093      	str	r3, [r2, #8]
	test_dummy[3] = comm_loop_cnt;
 800e25c:	4b13      	ldr	r3, [pc, #76]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a13      	ldr	r2, [pc, #76]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e262:	60d3      	str	r3, [r2, #12]
	test_dummy[4] = comm_loop_cnt;
 800e264:	4b11      	ldr	r3, [pc, #68]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a11      	ldr	r2, [pc, #68]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e26a:	6113      	str	r3, [r2, #16]
	test_dummy[5] = comm_loop_cnt;
 800e26c:	4b0f      	ldr	r3, [pc, #60]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a0f      	ldr	r2, [pc, #60]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e272:	6153      	str	r3, [r2, #20]
	test_dummy[6] = comm_loop_cnt;
 800e274:	4b0d      	ldr	r3, [pc, #52]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a0d      	ldr	r2, [pc, #52]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e27a:	6193      	str	r3, [r2, #24]
	test_dummy[7] = comm_loop_cnt;
 800e27c:	4b0b      	ldr	r3, [pc, #44]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a0b      	ldr	r2, [pc, #44]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e282:	61d3      	str	r3, [r2, #28]
	test_dummy[8] = comm_loop_cnt;
 800e284:	4b09      	ldr	r3, [pc, #36]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a09      	ldr	r2, [pc, #36]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e28a:	6213      	str	r3, [r2, #32]
	test_dummy[9] = comm_loop_cnt;
 800e28c:	4b07      	ldr	r3, [pc, #28]	; (800e2ac <Set_PDO_Dummy+0x6c>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a07      	ldr	r2, [pc, #28]	; (800e2b0 <Set_PDO_Dummy+0x70>)
 800e292:	6253      	str	r3, [r2, #36]	; 0x24

	t_count++;
 800e294:	4b07      	ldr	r3, [pc, #28]	; (800e2b4 <Set_PDO_Dummy+0x74>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3301      	adds	r3, #1
 800e29a:	4a06      	ldr	r2, [pc, #24]	; (800e2b4 <Set_PDO_Dummy+0x74>)
 800e29c:	6013      	str	r3, [r2, #0]

	return 0;
 800e29e:	2300      	movs	r3, #0
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	24000450 	.word	0x24000450
 800e2b0:	2400d6ac 	.word	0x2400d6ac
 800e2b4:	2400009c 	.word	0x2400009c

0800e2b8 <Check_Trajectory_Error>:

static int Check_Trajectory_Error(uint16_t t_frame_idx)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	80fb      	strh	r3, [r7, #6]
	if((t_frame_idx % D10_TRAJECTORY_ELEMENT_NUMBER) != 0)		{return -1;}
 800e2c2:	88fa      	ldrh	r2, [r7, #6]
 800e2c4:	4b11      	ldr	r3, [pc, #68]	; (800e30c <Check_Trajectory_Error+0x54>)
 800e2c6:	fba3 1302 	umull	r1, r3, r3, r2
 800e2ca:	08d9      	lsrs	r1, r3, #3
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	440b      	add	r3, r1
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d002      	beq.n	800e2e2 <Check_Trajectory_Error+0x2a>
 800e2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e2e0:	e00e      	b.n	800e300 <Check_Trajectory_Error+0x48>
	if( (t_frame_idx - trajectory_buffer.frame_idx) != 0)		{return -2;}
 800e2e2:	4b0b      	ldr	r3, [pc, #44]	; (800e310 <Check_Trajectory_Error+0x58>)
 800e2e4:	881b      	ldrh	r3, [r3, #0]
 800e2e6:	88fa      	ldrh	r2, [r7, #6]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d002      	beq.n	800e2f2 <Check_Trajectory_Error+0x3a>
 800e2ec:	f06f 0301 	mvn.w	r3, #1
 800e2f0:	e006      	b.n	800e300 <Check_Trajectory_Error+0x48>

	trajectory_buffer.frame_idx += D10_TRAJECTORY_ELEMENT_NUMBER;
 800e2f2:	4b07      	ldr	r3, [pc, #28]	; (800e310 <Check_Trajectory_Error+0x58>)
 800e2f4:	881b      	ldrh	r3, [r3, #0]
 800e2f6:	330a      	adds	r3, #10
 800e2f8:	b29a      	uxth	r2, r3
 800e2fa:	4b05      	ldr	r3, [pc, #20]	; (800e310 <Check_Trajectory_Error+0x58>)
 800e2fc:	801a      	strh	r2, [r3, #0]

	return 0;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	cccccccd 	.word	0xcccccccd
 800e310:	240032ec 	.word	0x240032ec

0800e314 <Assemble_Trajectory>:

static int Assemble_Trajectory(uint8_t* t_byte_arr)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b086      	sub	sp, #24
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
	uint8_t t_cursor, t_check, t_buf;
	uint16_t t_index;
	int8_t t_ack;
    uint16_t t_identifier = TRAJECTORY|(node_id<<4)|NODE_ID_CM;
 800e31c:	4b2b      	ldr	r3, [pc, #172]	; (800e3cc <Assemble_Trajectory+0xb8>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	011b      	lsls	r3, r3, #4
 800e322:	b21a      	sxth	r2, r3
 800e324:	f240 4301 	movw	r3, #1025	; 0x401
 800e328:	4313      	orrs	r3, r2
 800e32a:	b21b      	sxth	r3, r3
 800e32c:	81fb      	strh	r3, [r7, #14]

	/* Get index */
	t_cursor = 0;
 800e32e:	2300      	movs	r3, #0
 800e330:	75fb      	strb	r3, [r7, #23]
	memcpy(&t_index, &t_byte_arr[t_cursor], 2);
 800e332:	7dfb      	ldrb	r3, [r7, #23]
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	4413      	add	r3, r2
 800e338:	881b      	ldrh	r3, [r3, #0]
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	817b      	strh	r3, [r7, #10]
	t_cursor += 2;
 800e33e:	7dfb      	ldrb	r3, [r7, #23]
 800e340:	3302      	adds	r3, #2
 800e342:	75fb      	strb	r3, [r7, #23]

	/* Check Error*/
	t_check = Check_Trajectory_Error(t_index);
 800e344:	897b      	ldrh	r3, [r7, #10]
 800e346:	4618      	mov	r0, r3
 800e348:	f7ff ffb6 	bl	800e2b8 <Check_Trajectory_Error>
 800e34c:	4603      	mov	r3, r0
 800e34e:	737b      	strb	r3, [r7, #13]

	if(t_check != 0) {
 800e350:	7b7b      	ldrb	r3, [r7, #13]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d005      	beq.n	800e362 <Assemble_Trajectory+0x4e>
		trajectory_buffer.frame_idx = 0;
 800e356:	4b1e      	ldr	r3, [pc, #120]	; (800e3d0 <Assemble_Trajectory+0xbc>)
 800e358:	2200      	movs	r2, #0
 800e35a:	801a      	strh	r2, [r3, #0]
		t_ack = -2;
 800e35c:	23fe      	movs	r3, #254	; 0xfe
 800e35e:	727b      	strb	r3, [r7, #9]
 800e360:	e025      	b.n	800e3ae <Assemble_Trajectory+0x9a>
	} else {

		/* Save Buffer */
		for(int i = 0; i < D10_TRAJECTORY_ELEMENT_NUMBER; ++i){
 800e362:	2300      	movs	r3, #0
 800e364:	613b      	str	r3, [r7, #16]
 800e366:	e012      	b.n	800e38e <Assemble_Trajectory+0x7a>
			memcpy(&trajectory_buffer.buff[t_index++], &t_byte_arr[t_cursor], 4);
 800e368:	897b      	ldrh	r3, [r7, #10]
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	b292      	uxth	r2, r2
 800e36e:	817a      	strh	r2, [r7, #10]
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4a17      	ldr	r2, [pc, #92]	; (800e3d0 <Assemble_Trajectory+0xbc>)
 800e374:	4413      	add	r3, r2
 800e376:	3304      	adds	r3, #4
 800e378:	7dfa      	ldrb	r2, [r7, #23]
 800e37a:	6879      	ldr	r1, [r7, #4]
 800e37c:	440a      	add	r2, r1
 800e37e:	6812      	ldr	r2, [r2, #0]
 800e380:	601a      	str	r2, [r3, #0]
			t_cursor += 4;
 800e382:	7dfb      	ldrb	r3, [r7, #23]
 800e384:	3304      	adds	r3, #4
 800e386:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < D10_TRAJECTORY_ELEMENT_NUMBER; ++i){
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	3301      	adds	r3, #1
 800e38c:	613b      	str	r3, [r7, #16]
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	2b09      	cmp	r3, #9
 800e392:	dde9      	ble.n	800e368 <Assemble_Trajectory+0x54>
		}

		/* Check End of Trajectory */
		if(t_index >= D10_TRAJECTORY_TOTAL_LENGTH){
 800e394:	897b      	ldrh	r3, [r7, #10]
 800e396:	f242 720f 	movw	r2, #9999	; 0x270f
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d905      	bls.n	800e3aa <Assemble_Trajectory+0x96>
			t_ack = -1;
 800e39e:	23ff      	movs	r3, #255	; 0xff
 800e3a0:	727b      	strb	r3, [r7, #9]
			trajectory_buffer.frame_idx = 0;
 800e3a2:	4b0b      	ldr	r3, [pc, #44]	; (800e3d0 <Assemble_Trajectory+0xbc>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	801a      	strh	r2, [r3, #0]
 800e3a8:	e001      	b.n	800e3ae <Assemble_Trajectory+0x9a>
		} else {
			t_ack = 0;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	727b      	strb	r3, [r7, #9]
 800e3ae:	7a7b      	ldrb	r3, [r7, #9]
		}
	}

	/* Send Acknowledgement */
	memcpy(&t_buf, &t_ack, 1);
 800e3b0:	733b      	strb	r3, [r7, #12]
	Send_MSG(t_identifier, 1, &t_buf);
 800e3b2:	f107 020c 	add.w	r2, r7, #12
 800e3b6:	89fb      	ldrh	r3, [r7, #14]
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 f926 	bl	800e60c <Send_MSG>

	return t_check;
 800e3c0:	7b7b      	ldrb	r3, [r7, #13]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3718      	adds	r7, #24
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	2400cf30 	.word	0x2400cf30
 800e3d0:	240032ec 	.word	0x240032ec

0800e3d4 <Add_PDO_to_Send>:
                                       |___/                       
*/


static void Add_PDO_to_Send(uint8_t t_dod_id, uint8_t t_obj_id)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08a      	sub	sp, #40	; 0x28
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	4603      	mov	r3, r0
 800e3dc:	460a      	mov	r2, r1
 800e3de:	71fb      	strb	r3, [r7, #7]
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	71bb      	strb	r3, [r7, #6]
	MsgPDOStruct* temp_pdo = Find_PDO(t_dod_id, t_obj_id);
 800e3e4:	79ba      	ldrb	r2, [r7, #6]
 800e3e6:	79fb      	ldrb	r3, [r7, #7]
 800e3e8:	4611      	mov	r1, r2
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7ff f9c8 	bl	800d780 <Find_PDO>
 800e3f0:	6238      	str	r0, [r7, #32]
    if (temp_pdo == NULL) {
 800e3f2:	6a3b      	ldr	r3, [r7, #32]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 80b9 	beq.w	800e56c <Add_PDO_to_Send+0x198>
        //TODO: Cannot Find PDO Error
        return;
    }

    MsgDataObjectHeader t_pdo = {t_dod_id, t_obj_id};
 800e3fa:	79fb      	ldrb	r3, [r7, #7]
 800e3fc:	723b      	strb	r3, [r7, #8]
 800e3fe:	79bb      	ldrb	r3, [r7, #6]
 800e400:	727b      	strb	r3, [r7, #9]

    for (int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800e402:	2300      	movs	r3, #0
 800e404:	627b      	str	r3, [r7, #36]	; 0x24
 800e406:	e015      	b.n	800e434 <Add_PDO_to_Send+0x60>
        if ((pdo_send_list[i].dod_id == t_dod_id) && (pdo_send_list[i].obj_id == t_obj_id)){
 800e408:	4b5b      	ldr	r3, [pc, #364]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40e:	005b      	lsls	r3, r3, #1
 800e410:	4413      	add	r3, r2
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	79fa      	ldrb	r2, [r7, #7]
 800e416:	429a      	cmp	r2, r3
 800e418:	d109      	bne.n	800e42e <Add_PDO_to_Send+0x5a>
 800e41a:	4b57      	ldr	r3, [pc, #348]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e420:	005b      	lsls	r3, r3, #1
 800e422:	4413      	add	r3, r2
 800e424:	785b      	ldrb	r3, [r3, #1]
 800e426:	79ba      	ldrb	r2, [r7, #6]
 800e428:	429a      	cmp	r2, r3
 800e42a:	f000 80a1 	beq.w	800e570 <Add_PDO_to_Send+0x19c>
    for (int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	3301      	adds	r3, #1
 800e432:	627b      	str	r3, [r7, #36]	; 0x24
 800e434:	4b50      	ldr	r3, [pc, #320]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d004      	beq.n	800e446 <Add_PDO_to_Send+0x72>
 800e43c:	4b4e      	ldr	r3, [pc, #312]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	3b08      	subs	r3, #8
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	e000      	b.n	800e448 <Add_PDO_to_Send+0x74>
 800e446:	2300      	movs	r3, #0
 800e448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d8dc      	bhi.n	800e408 <Add_PDO_to_Send+0x34>
            return;
        }
    }
    cvector_push_back(pdo_send_list, t_pdo);
 800e44e:	4b4a      	ldr	r3, [pc, #296]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d004      	beq.n	800e460 <Add_PDO_to_Send+0x8c>
 800e456:	4b48      	ldr	r3, [pc, #288]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	3b04      	subs	r3, #4
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	e000      	b.n	800e462 <Add_PDO_to_Send+0x8e>
 800e460:	2300      	movs	r3, #0
 800e462:	61fb      	str	r3, [r7, #28]
 800e464:	4b44      	ldr	r3, [pc, #272]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d004      	beq.n	800e476 <Add_PDO_to_Send+0xa2>
 800e46c:	4b42      	ldr	r3, [pc, #264]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800e474:	e000      	b.n	800e478 <Add_PDO_to_Send+0xa4>
 800e476:	2300      	movs	r3, #0
 800e478:	69fa      	ldr	r2, [r7, #28]
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d34f      	bcc.n	800e51e <Add_PDO_to_Send+0x14a>
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	3305      	adds	r3, #5
 800e482:	005b      	lsls	r3, r3, #1
 800e484:	61bb      	str	r3, [r7, #24]
 800e486:	4b3c      	ldr	r3, [pc, #240]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d021      	beq.n	800e4d2 <Add_PDO_to_Send+0xfe>
 800e48e:	4b3a      	ldr	r3, [pc, #232]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	3b08      	subs	r3, #8
 800e494:	613b      	str	r3, [r7, #16]
 800e496:	69b9      	ldr	r1, [r7, #24]
 800e498:	6938      	ldr	r0, [r7, #16]
 800e49a:	f001 fba3 	bl	800fbe4 <realloc>
 800e49e:	60f8      	str	r0, [r7, #12]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d106      	bne.n	800e4b4 <Add_PDO_to_Send+0xe0>
 800e4a6:	4b35      	ldr	r3, [pc, #212]	; (800e57c <Add_PDO_to_Send+0x1a8>)
 800e4a8:	4a35      	ldr	r2, [pc, #212]	; (800e580 <Add_PDO_to_Send+0x1ac>)
 800e4aa:	f240 211f 	movw	r1, #543	; 0x21f
 800e4ae:	4835      	ldr	r0, [pc, #212]	; (800e584 <Add_PDO_to_Send+0x1b0>)
 800e4b0:	f000 ff80 	bl	800f3b4 <__assert_func>
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	3308      	adds	r3, #8
 800e4b8:	4a2f      	ldr	r2, [pc, #188]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e4ba:	6013      	str	r3, [r2, #0]
 800e4bc:	4b2e      	ldr	r3, [pc, #184]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d02c      	beq.n	800e51e <Add_PDO_to_Send+0x14a>
 800e4c4:	4b2c      	ldr	r3, [pc, #176]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	3b04      	subs	r3, #4
 800e4ca:	69fa      	ldr	r2, [r7, #28]
 800e4cc:	3201      	adds	r2, #1
 800e4ce:	601a      	str	r2, [r3, #0]
 800e4d0:	e025      	b.n	800e51e <Add_PDO_to_Send+0x14a>
 800e4d2:	69b8      	ldr	r0, [r7, #24]
 800e4d4:	f000 ffc8 	bl	800f468 <malloc>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	617b      	str	r3, [r7, #20]
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d106      	bne.n	800e4f0 <Add_PDO_to_Send+0x11c>
 800e4e2:	4b29      	ldr	r3, [pc, #164]	; (800e588 <Add_PDO_to_Send+0x1b4>)
 800e4e4:	4a26      	ldr	r2, [pc, #152]	; (800e580 <Add_PDO_to_Send+0x1ac>)
 800e4e6:	f240 211f 	movw	r1, #543	; 0x21f
 800e4ea:	4826      	ldr	r0, [pc, #152]	; (800e584 <Add_PDO_to_Send+0x1b0>)
 800e4ec:	f000 ff62 	bl	800f3b4 <__assert_func>
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	3308      	adds	r3, #8
 800e4f4:	4a20      	ldr	r2, [pc, #128]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	4b1f      	ldr	r3, [pc, #124]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d005      	beq.n	800e50c <Add_PDO_to_Send+0x138>
 800e500:	4b1d      	ldr	r3, [pc, #116]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3b04      	subs	r3, #4
 800e506:	69fa      	ldr	r2, [r7, #28]
 800e508:	3201      	adds	r2, #1
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	4b1a      	ldr	r3, [pc, #104]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d004      	beq.n	800e51e <Add_PDO_to_Send+0x14a>
 800e514:	4b18      	ldr	r3, [pc, #96]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	3b08      	subs	r3, #8
 800e51a:	2200      	movs	r2, #0
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	4b16      	ldr	r3, [pc, #88]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	4b15      	ldr	r3, [pc, #84]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d005      	beq.n	800e536 <Add_PDO_to_Send+0x162>
 800e52a:	4b13      	ldr	r3, [pc, #76]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3b08      	subs	r3, #8
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	005b      	lsls	r3, r3, #1
 800e534:	e000      	b.n	800e538 <Add_PDO_to_Send+0x164>
 800e536:	2300      	movs	r3, #0
 800e538:	4413      	add	r3, r2
 800e53a:	461a      	mov	r2, r3
 800e53c:	f107 0308 	add.w	r3, r7, #8
 800e540:	881b      	ldrh	r3, [r3, #0]
 800e542:	8013      	strh	r3, [r2, #0]
 800e544:	4b0c      	ldr	r3, [pc, #48]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d012      	beq.n	800e572 <Add_PDO_to_Send+0x19e>
 800e54c:	4b0a      	ldr	r3, [pc, #40]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d005      	beq.n	800e560 <Add_PDO_to_Send+0x18c>
 800e554:	4b08      	ldr	r3, [pc, #32]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3b08      	subs	r3, #8
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3301      	adds	r3, #1
 800e55e:	e000      	b.n	800e562 <Add_PDO_to_Send+0x18e>
 800e560:	2301      	movs	r3, #1
 800e562:	4a05      	ldr	r2, [pc, #20]	; (800e578 <Add_PDO_to_Send+0x1a4>)
 800e564:	6812      	ldr	r2, [r2, #0]
 800e566:	3a08      	subs	r2, #8
 800e568:	6013      	str	r3, [r2, #0]
 800e56a:	e002      	b.n	800e572 <Add_PDO_to_Send+0x19e>
        return;
 800e56c:	bf00      	nop
 800e56e:	e000      	b.n	800e572 <Add_PDO_to_Send+0x19e>
            return;
 800e570:	bf00      	nop
}
 800e572:	3728      	adds	r7, #40	; 0x28
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	240004bc 	.word	0x240004bc
 800e57c:	08011360 	.word	0x08011360
 800e580:	080113e0 	.word	0x080113e0
 800e584:	08011368 	.word	0x08011368
 800e588:	080113a4 	.word	0x080113a4

0800e58c <Clear_PDO_to_Send>:

static void Clear_PDO_to_Send()
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
    cvector_free(pdo_send_list);
 800e592:	4b09      	ldr	r3, [pc, #36]	; (800e5b8 <Clear_PDO_to_Send+0x2c>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d006      	beq.n	800e5a8 <Clear_PDO_to_Send+0x1c>
 800e59a:	4b07      	ldr	r3, [pc, #28]	; (800e5b8 <Clear_PDO_to_Send+0x2c>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	3b08      	subs	r3, #8
 800e5a0:	607b      	str	r3, [r7, #4]
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 ff68 	bl	800f478 <free>
    pdo_send_list = NULL;
 800e5a8:	4b03      	ldr	r3, [pc, #12]	; (800e5b8 <Clear_PDO_to_Send+0x2c>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	601a      	str	r2, [r3, #0]
}
 800e5ae:	bf00      	nop
 800e5b0:	3708      	adds	r7, #8
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	240004bc 	.word	0x240004bc

0800e5bc <Send_USB_Trick>:
 |_|  |_\___/__/__/\__,_\__, \___| |_||_\__,_|_||_\__,_|_\___|_|  
                        |___/                                     
*/

static void Send_USB_Trick(uint8_t* t_in_buf, uint32_t t_in_len, uint8_t* t_out_buf)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b087      	sub	sp, #28
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
	 * and MD and breaks the sequence of the GUI.
	 *
	 * Therefore, 0x00 is inserted between every byte and sent.
	 * */

	for(int i = 0; i < t_in_len; ++i){
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	617b      	str	r3, [r7, #20]
 800e5cc:	e013      	b.n	800e5f6 <Send_USB_Trick+0x3a>
		*(t_out_buf + (2*i)) = *(t_in_buf + i);
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	441a      	add	r2, r3
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	4619      	mov	r1, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	440b      	add	r3, r1
 800e5de:	7812      	ldrb	r2, [r2, #0]
 800e5e0:	701a      	strb	r2, [r3, #0]
		*(t_out_buf + (2*i+1)) = 0;
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	005b      	lsls	r3, r3, #1
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < t_in_len; ++i){
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	617b      	str	r3, [r7, #20]
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d8e7      	bhi.n	800e5ce <Send_USB_Trick+0x12>
	}
}
 800e5fe:	bf00      	nop
 800e600:	bf00      	nop
 800e602:	371c      	adds	r7, #28
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <Send_MSG>:

int Send_MSG(uint16_t t_COB_ID, uint32_t t_len, uint8_t* t_tx_data)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b0ba      	sub	sp, #232	; 0xe8
 800e610:	af00      	add	r7, sp, #0
 800e612:	4603      	mov	r3, r0
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	607a      	str	r2, [r7, #4]
 800e618:	81fb      	strh	r3, [r7, #14]
	static uint8_t t_fnc_code, t_node_id;
	int t_check = 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	uint8_t t_txBuf[67];
	uint8_t t_usb_txBuf[137];

	if(comm_type == e_FDCAN){
 800e620:	4b2f      	ldr	r3, [pc, #188]	; (800e6e0 <Send_MSG+0xd4>)
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d111      	bne.n	800e64c <Send_MSG+0x40>
		if(Transmit_IOIF_Fdcan(t_COB_ID, Convert_Byte_Length(t_len), t_tx_data) != 0){
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7ff f97a 	bl	800d926 <Convert_Byte_Length>
 800e632:	4603      	mov	r3, r0
 800e634:	4619      	mov	r1, r3
 800e636:	89fb      	ldrh	r3, [r7, #14]
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fd f980 	bl	800b940 <Transmit_IOIF_Fdcan>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d045      	beq.n	800e6d2 <Send_MSG+0xc6>
			return t_check;
 800e646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e64a:	e044      	b.n	800e6d6 <Send_MSG+0xca>
			//TODO: MSG TX ERROR
		}
	} else if(comm_type == e_USB){
 800e64c:	4b24      	ldr	r3, [pc, #144]	; (800e6e0 <Send_MSG+0xd4>)
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	2b01      	cmp	r3, #1
 800e652:	d13e      	bne.n	800e6d2 <Send_MSG+0xc6>

		t_fnc_code = (t_COB_ID & 0xF00) >> 8;
 800e654:	89fb      	ldrh	r3, [r7, #14]
 800e656:	121b      	asrs	r3, r3, #8
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	f003 030f 	and.w	r3, r3, #15
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	4b20      	ldr	r3, [pc, #128]	; (800e6e4 <Send_MSG+0xd8>)
 800e662:	701a      	strb	r2, [r3, #0]
		t_node_id = (t_COB_ID & 0xFF);
 800e664:	89fb      	ldrh	r3, [r7, #14]
 800e666:	b2da      	uxtb	r2, r3
 800e668:	4b1f      	ldr	r3, [pc, #124]	; (800e6e8 <Send_MSG+0xdc>)
 800e66a:	701a      	strb	r2, [r3, #0]

		memcpy(&t_txBuf[2], t_tx_data, t_len);
 800e66c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e670:	3302      	adds	r3, #2
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	6879      	ldr	r1, [r7, #4]
 800e676:	4618      	mov	r0, r3
 800e678:	f000 ff06 	bl	800f488 <memcpy>
 800e67c:	4b19      	ldr	r3, [pc, #100]	; (800e6e4 <Send_MSG+0xd8>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
		memcpy(t_txBuf, &t_fnc_code, 1);			t_len++;
 800e680:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	3301      	adds	r3, #1
 800e688:	60bb      	str	r3, [r7, #8]
 800e68a:	4b17      	ldr	r3, [pc, #92]	; (800e6e8 <Send_MSG+0xdc>)
 800e68c:	781b      	ldrb	r3, [r3, #0]
		memcpy(&t_txBuf[1], &t_node_id, 1);			t_len++;
 800e68e:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	3301      	adds	r3, #1
 800e696:	60bb      	str	r3, [r7, #8]


		Send_USB_Trick(t_txBuf, t_len, t_usb_txBuf);
 800e698:	f107 0214 	add.w	r2, r7, #20
 800e69c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800e6a0:	68b9      	ldr	r1, [r7, #8]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7ff ff8a 	bl	800e5bc <Send_USB_Trick>
		t_len *= 2;
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	005b      	lsls	r3, r3, #1
 800e6ac:	60bb      	str	r3, [r7, #8]

		t_usb_txBuf[t_len++] = '\r';
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	1c5a      	adds	r2, r3, #1
 800e6b2:	60ba      	str	r2, [r7, #8]
 800e6b4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800e6b8:	4413      	add	r3, r2
 800e6ba:	220d      	movs	r2, #13
 800e6bc:	f803 2cd4 	strb.w	r2, [r3, #-212]
		t_usb_txBuf[t_len++] = '\n';
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	1c5a      	adds	r2, r3, #1
 800e6c4:	60ba      	str	r2, [r7, #8]
 800e6c6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800e6ca:	4413      	add	r3, r2
 800e6cc:	220a      	movs	r2, #10
 800e6ce:	f803 2cd4 	strb.w	r2, [r3, #-212]
//			return t_check;
//			//TODO: MSG TX ERROR
//		}
	}

	return -1;
 800e6d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	37e8      	adds	r7, #232	; 0xe8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	2400d469 	.word	0x2400d469
 800e6e4:	240000a0 	.word	0x240000a0
 800e6e8:	240000a1 	.word	0x240000a1

0800e6ec <Fdcan_Rx_Hdlr>:
//
//	return 0;
//}

static int Fdcan_Rx_Hdlr(uint16_t t_wasp_id, uint8_t* t_rx_data)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	6039      	str	r1, [r7, #0]
 800e6f6:	80fb      	strh	r3, [r7, #6]
    fnc_code = t_wasp_id & 0xF00;
 800e6f8:	88fb      	ldrh	r3, [r7, #6]
 800e6fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e6fe:	4a24      	ldr	r2, [pc, #144]	; (800e790 <Fdcan_Rx_Hdlr+0xa4>)
 800e700:	6013      	str	r3, [r2, #0]
    ori_node = (t_wasp_id & 0x0F0)>>4;
 800e702:	88fb      	ldrh	r3, [r7, #6]
 800e704:	111b      	asrs	r3, r3, #4
 800e706:	b2db      	uxtb	r3, r3
 800e708:	f003 030f 	and.w	r3, r3, #15
 800e70c:	b2da      	uxtb	r2, r3
 800e70e:	4b21      	ldr	r3, [pc, #132]	; (800e794 <Fdcan_Rx_Hdlr+0xa8>)
 800e710:	701a      	strb	r2, [r3, #0]

    switch(fnc_code){
 800e712:	4b1f      	ldr	r3, [pc, #124]	; (800e790 <Fdcan_Rx_Hdlr+0xa4>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e71a:	d02f      	beq.n	800e77c <Fdcan_Rx_Hdlr+0x90>
 800e71c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e720:	d830      	bhi.n	800e784 <Fdcan_Rx_Hdlr+0x98>
 800e722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e726:	d01b      	beq.n	800e760 <Fdcan_Rx_Hdlr+0x74>
 800e728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e72c:	d82a      	bhi.n	800e784 <Fdcan_Rx_Hdlr+0x98>
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d003      	beq.n	800e73a <Fdcan_Rx_Hdlr+0x4e>
 800e732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e736:	d005      	beq.n	800e744 <Fdcan_Rx_Hdlr+0x58>
            break;

        case TRAJECTORY:
			Assemble_Trajectory(t_rx_data);
        	break;
        default: break;
 800e738:	e024      	b.n	800e784 <Fdcan_Rx_Hdlr+0x98>
            Recv_EMCY(t_rx_data, &err_code);
 800e73a:	4917      	ldr	r1, [pc, #92]	; (800e798 <Fdcan_Rx_Hdlr+0xac>)
 800e73c:	6838      	ldr	r0, [r7, #0]
 800e73e:	f7ff f989 	bl	800da54 <Recv_EMCY>
            break;
 800e742:	e020      	b.n	800e786 <Fdcan_Rx_Hdlr+0x9a>
            if (Unpack_SDO(t_rx_data) < 0) {
 800e744:	6838      	ldr	r0, [r7, #0]
 800e746:	f7ff fac5 	bl	800dcd4 <Unpack_SDO>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	da01      	bge.n	800e754 <Fdcan_Rx_Hdlr+0x68>
                return SDO_RX_ERR;
 800e750:	2301      	movs	r3, #1
 800e752:	e019      	b.n	800e788 <Fdcan_Rx_Hdlr+0x9c>
                Send_SDO(ori_node);
 800e754:	4b0f      	ldr	r3, [pc, #60]	; (800e794 <Fdcan_Rx_Hdlr+0xa8>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	4618      	mov	r0, r3
 800e75a:	f7ff fbef 	bl	800df3c <Send_SDO>
            break;
 800e75e:	e012      	b.n	800e786 <Fdcan_Rx_Hdlr+0x9a>
            if (Unpack_PDO(t_rx_data) < 0) {
 800e760:	6838      	ldr	r0, [r7, #0]
 800e762:	f7ff fc50 	bl	800e006 <Unpack_PDO>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	da01      	bge.n	800e770 <Fdcan_Rx_Hdlr+0x84>
                return PDO_RX_ERR;
 800e76c:	2303      	movs	r3, #3
 800e76e:	e00b      	b.n	800e788 <Fdcan_Rx_Hdlr+0x9c>
                Send_PDO(ori_node);
 800e770:	4b08      	ldr	r3, [pc, #32]	; (800e794 <Fdcan_Rx_Hdlr+0xa8>)
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	4618      	mov	r0, r3
 800e776:	f7ff fd07 	bl	800e188 <Send_PDO>
            break;
 800e77a:	e004      	b.n	800e786 <Fdcan_Rx_Hdlr+0x9a>
			Assemble_Trajectory(t_rx_data);
 800e77c:	6838      	ldr	r0, [r7, #0]
 800e77e:	f7ff fdc9 	bl	800e314 <Assemble_Trajectory>
        	break;
 800e782:	e000      	b.n	800e786 <Fdcan_Rx_Hdlr+0x9a>
        default: break;
 800e784:	bf00      	nop
    }

    return 0;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	2400d00c 	.word	0x2400d00c
 800e794:	2400d1bc 	.word	0x2400d1bc
 800e798:	2400d058 	.word	0x2400d058

0800e79c <Get_State_Callback>:
 \__ \ |) | (_) | | (__/ _` | | | '_ \/ _` / _| / /(_-<
 |___/___/ \___/   \___\__,_|_|_|_.__/\__,_\__|_\_\/__/

*/

MSG_COMMON_SDO_CALLBACK(msg_hdlr_task)
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	711a      	strb	r2, [r3, #4]
 800e7ac:	2001      	movs	r0, #1
 800e7ae:	f000 fe5b 	bl	800f468 <malloc>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	601a      	str	r2, [r3, #0]
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4a05      	ldr	r2, [pc, #20]	; (800e7d4 <Get_State_Callback+0x38>)
 800e7c0:	7b12      	ldrb	r2, [r2, #12]
 800e7c2:	701a      	strb	r2, [r3, #0]
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	721a      	strb	r2, [r3, #8]
 800e7ca:	bf00      	nop
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	2400cf38 	.word	0x2400cf38

0800e7d8 <Set_State_Callback>:
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	73fb      	strb	r3, [r7, #15]
 800e7ea:	7bfb      	ldrb	r3, [r7, #15]
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	4808      	ldr	r0, [pc, #32]	; (800e810 <Set_State_Callback+0x38>)
 800e7f0:	f000 fd56 	bl	800f2a0 <Transition_State>
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	601a      	str	r2, [r3, #0]
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	711a      	strb	r2, [r3, #4]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	2200      	movs	r2, #0
 800e804:	721a      	strb	r2, [r3, #8]
 800e806:	bf00      	nop
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	2400cf44 	.word	0x2400cf44

0800e814 <Get_Routine_Callback>:
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	2200      	movs	r2, #0
 800e822:	721a      	strb	r2, [r3, #8]
 800e824:	4b19      	ldr	r3, [pc, #100]	; (800e88c <Get_Routine_Callback+0x78>)
 800e826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	711a      	strb	r2, [r3, #4]
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	791b      	ldrb	r3, [r3, #4]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d025      	beq.n	800e882 <Get_Routine_Callback+0x6e>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	88db      	ldrh	r3, [r3, #6]
 800e83a:	461a      	mov	r2, r3
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	791b      	ldrb	r3, [r3, #4]
 800e840:	fb03 f302 	mul.w	r3, r3, r2
 800e844:	4618      	mov	r0, r3
 800e846:	f000 fe0f 	bl	800f468 <malloc>
 800e84a:	4603      	mov	r3, r0
 800e84c:	461a      	mov	r2, r3
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	601a      	str	r2, [r3, #0]
 800e852:	2300      	movs	r3, #0
 800e854:	60fb      	str	r3, [r7, #12]
 800e856:	e00d      	b.n	800e874 <Get_Routine_Callback+0x60>
 800e858:	4a0c      	ldr	r2, [pc, #48]	; (800e88c <Get_Routine_Callback+0x78>)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	3310      	adds	r3, #16
 800e85e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	4413      	add	r3, r2
 800e86a:	b2ca      	uxtb	r2, r1
 800e86c:	701a      	strb	r2, [r3, #0]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	3301      	adds	r3, #1
 800e872:	60fb      	str	r3, [r7, #12]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	791b      	ldrb	r3, [r3, #4]
 800e878:	461a      	mov	r2, r3
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	4293      	cmp	r3, r2
 800e87e:	dbeb      	blt.n	800e858 <Get_Routine_Callback+0x44>
 800e880:	e000      	b.n	800e884 <Get_Routine_Callback+0x70>
 800e882:	bf00      	nop
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	2400cf38 	.word	0x2400cf38

0800e890 <Set_Routine_Callback>:
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2200      	movs	r2, #0
 800e89e:	711a      	strb	r2, [r3, #4]
 800e8a0:	4828      	ldr	r0, [pc, #160]	; (800e944 <Set_Routine_Callback+0xb4>)
 800e8a2:	f000 fba5 	bl	800eff0 <Clear_Routines>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	791b      	ldrb	r3, [r3, #4]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d103      	bne.n	800e8b6 <Set_Routine_Callback+0x26>
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	721a      	strb	r2, [r3, #8]
 800e8b4:	e043      	b.n	800e93e <Set_Routine_Callback+0xae>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	88db      	ldrh	r3, [r3, #6]
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	791b      	ldrb	r3, [r3, #4]
 800e8c0:	fb03 f302 	mul.w	r3, r3, r2
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f000 fdcf 	bl	800f468 <malloc>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	601a      	str	r2, [r3, #0]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	60fb      	str	r3, [r7, #12]
 800e8d6:	e020      	b.n	800e91a <Set_Routine_Callback+0x8a>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	4413      	add	r3, r2
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	72fb      	strb	r3, [r7, #11]
 800e8e4:	7afb      	ldrb	r3, [r7, #11]
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4816      	ldr	r0, [pc, #88]	; (800e944 <Set_Routine_Callback+0xb4>)
 800e8ea:	f000 fb9d 	bl	800f028 <Push_Routine>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10f      	bne.n	800e914 <Set_Routine_Callback+0x84>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	441a      	add	r2, r3
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	6819      	ldr	r1, [r3, #0]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	440b      	add	r3, r1
 800e904:	7812      	ldrb	r2, [r2, #0]
 800e906:	701a      	strb	r2, [r3, #0]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	791b      	ldrb	r3, [r3, #4]
 800e90c:	3301      	adds	r3, #1
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	711a      	strb	r2, [r3, #4]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3301      	adds	r3, #1
 800e918:	60fb      	str	r3, [r7, #12]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	791b      	ldrb	r3, [r3, #4]
 800e91e:	461a      	mov	r2, r3
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	4293      	cmp	r3, r2
 800e924:	dbd8      	blt.n	800e8d8 <Set_Routine_Callback+0x48>
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	791a      	ldrb	r2, [r3, #4]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	791b      	ldrb	r3, [r3, #4]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d002      	beq.n	800e938 <Set_Routine_Callback+0xa8>
 800e932:	f04f 32ff 	mov.w	r2, #4294967295
 800e936:	e000      	b.n	800e93a <Set_Routine_Callback+0xaa>
 800e938:	2200      	movs	r2, #0
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	721a      	strb	r2, [r3, #8]
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	2400cf78 	.word	0x2400cf78

0800e948 <Set_Send_PDO_List>:

static void Set_Send_PDO_List(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
	Clear_PDO_to_Send();
 800e952:	f7ff fe1b 	bl	800e58c <Clear_PDO_to_Send>

    int t_cursor = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	617b      	str	r3, [r7, #20]
    uint8_t* t_ids = (uint8_t*)t_req->data;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	613b      	str	r3, [r7, #16]
    while (t_cursor < 2*t_req->size) {
 800e960:	e015      	b.n	800e98e <Set_Send_PDO_List+0x46>
        uint8_t t_dod_id = t_ids[t_cursor++];
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	1c5a      	adds	r2, r3, #1
 800e966:	617a      	str	r2, [r7, #20]
 800e968:	461a      	mov	r2, r3
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	4413      	add	r3, r2
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	73fb      	strb	r3, [r7, #15]
        uint8_t t_obj_id = t_ids[t_cursor++];
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	1c5a      	adds	r2, r3, #1
 800e976:	617a      	str	r2, [r7, #20]
 800e978:	461a      	mov	r2, r3
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	4413      	add	r3, r2
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	73bb      	strb	r3, [r7, #14]
        Add_PDO_to_Send(t_dod_id, t_obj_id);
 800e982:	7bba      	ldrb	r2, [r7, #14]
 800e984:	7bfb      	ldrb	r3, [r7, #15]
 800e986:	4611      	mov	r1, r2
 800e988:	4618      	mov	r0, r3
 800e98a:	f7ff fd23 	bl	800e3d4 <Add_PDO_to_Send>
    while (t_cursor < 2*t_req->size) {
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	791b      	ldrb	r3, [r3, #4]
 800e992:	005b      	lsls	r3, r3, #1
 800e994:	697a      	ldr	r2, [r7, #20]
 800e996:	429a      	cmp	r2, r3
 800e998:	dbe3      	blt.n	800e962 <Set_Send_PDO_List+0x1a>
    }

    t_res->status = DATA_OBJECT_SDO_SUCC;
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2200      	movs	r2, #0
 800e99e:	721a      	strb	r2, [r3, #8]
}
 800e9a0:	bf00      	nop
 800e9a2:	3718      	adds	r7, #24
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <Set_MS_Enum>:

static void Set_MS_Enum(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	6039      	str	r1, [r7, #0]
	memcpy(&MS_enum, t_req->data, 1);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	781a      	ldrb	r2, [r3, #0]
 800e9b8:	4b06      	ldr	r3, [pc, #24]	; (800e9d4 <Set_MS_Enum+0x2c>)
 800e9ba:	701a      	strb	r2, [r3, #0]

	t_res->size = 0;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	721a      	strb	r2, [r3, #8]
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr
 800e9d4:	2400d054 	.word	0x2400d054

0800e9d8 <Set_GUI_COMM_OnOff>:

static void Set_GUI_COMM_OnOff(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
	memcpy(&GUI_onoff, t_req->data, 1);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	781a      	ldrb	r2, [r3, #0]
 800e9e8:	4b06      	ldr	r3, [pc, #24]	; (800ea04 <Set_GUI_COMM_OnOff+0x2c>)
 800e9ea:	701a      	strb	r2, [r3, #0]

	t_res->size = 1;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	721a      	strb	r2, [r3, #8]
}
 800e9f8:	bf00      	nop
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr
 800ea04:	2400d05c 	.word	0x2400d05c

0800ea08 <Set_GUI_COMM_Command>:

static void Set_GUI_COMM_Command(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
	memcpy(&GUI_command, t_req->data, 1);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	781a      	ldrb	r2, [r3, #0]
 800ea18:	4b06      	ldr	r3, [pc, #24]	; (800ea34 <Set_GUI_COMM_Command+0x2c>)
 800ea1a:	701a      	strb	r2, [r3, #0]

	t_res->size = 1;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	2200      	movs	r2, #0
 800ea26:	721a      	strb	r2, [r3, #8]
}
 800ea28:	bf00      	nop
 800ea2a:	370c      	adds	r7, #12
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea32:	4770      	bx	lr
 800ea34:	2400d000 	.word	0x2400d000

0800ea38 <StateOff_Ent>:
 |___/\__\__,_|\__\___/__/

*/

static void StateOff_Ent()
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	af00      	add	r7, sp, #0
	GUI_onoff = 0;
 800ea3c:	4b05      	ldr	r3, [pc, #20]	; (800ea54 <StateOff_Ent+0x1c>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	701a      	strb	r2, [r3, #0]
	GUI_command = 0;
 800ea42:	4b05      	ldr	r3, [pc, #20]	; (800ea58 <StateOff_Ent+0x20>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	701a      	strb	r2, [r3, #0]
    Transition_State(&msg_hdlr_task.state_machine, e_State_Standby);
 800ea48:	2101      	movs	r1, #1
 800ea4a:	4804      	ldr	r0, [pc, #16]	; (800ea5c <StateOff_Ent+0x24>)
 800ea4c:	f000 fc28 	bl	800f2a0 <Transition_State>
}
 800ea50:	bf00      	nop
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	2400d05c 	.word	0x2400d05c
 800ea58:	2400d000 	.word	0x2400d000
 800ea5c:	2400cf44 	.word	0x2400cf44

0800ea60 <StateStandby_Ent>:

static void StateStandby_Ent()
{}
 800ea60:	b480      	push	{r7}
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	bf00      	nop
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <StateStandby_Run>:

static void StateStandby_Run()
{
 800ea6e:	b480      	push	{r7}
 800ea70:	af00      	add	r7, sp, #0

}
 800ea72:	bf00      	nop
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr

0800ea7c <StateStandby_Ext>:

static void StateStandby_Ext()
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	af00      	add	r7, sp, #0
}
 800ea80:	bf00      	nop
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr
	...

0800ea8c <StateEnable_Ent>:

static void StateEnable_Ent()
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	af00      	add	r7, sp, #0
	comm_loop_cnt = 0;
 800ea90:	4b03      	ldr	r3, [pc, #12]	; (800eaa0 <StateEnable_Ent+0x14>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	601a      	str	r2, [r3, #0]
	Ent_Routines(&msg_hdlr_task.routine);
 800ea96:	4803      	ldr	r0, [pc, #12]	; (800eaa4 <StateEnable_Ent+0x18>)
 800ea98:	f000 f9f4 	bl	800ee84 <Ent_Routines>
}
 800ea9c:	bf00      	nop
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	24000450 	.word	0x24000450
 800eaa4:	2400cf78 	.word	0x2400cf78

0800eaa8 <StateEnable_Run>:

static void StateEnable_Run()
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	af00      	add	r7, sp, #0
	Run_Routines(&msg_hdlr_task.routine);
 800eaac:	4804      	ldr	r0, [pc, #16]	; (800eac0 <StateEnable_Run+0x18>)
 800eaae:	f000 fa29 	bl	800ef04 <Run_Routines>

    comm_loop_cnt++;
 800eab2:	4b04      	ldr	r3, [pc, #16]	; (800eac4 <StateEnable_Run+0x1c>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	3301      	adds	r3, #1
 800eab8:	4a02      	ldr	r2, [pc, #8]	; (800eac4 <StateEnable_Run+0x1c>)
 800eaba:	6013      	str	r3, [r2, #0]
}
 800eabc:	bf00      	nop
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	2400cf78 	.word	0x2400cf78
 800eac4:	24000450 	.word	0x24000450

0800eac8 <StateEnable_Ext>:

static void StateEnable_Ext()
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	af00      	add	r7, sp, #0
	Ext_Routines(&msg_hdlr_task.routine);
 800eacc:	4805      	ldr	r0, [pc, #20]	; (800eae4 <StateEnable_Ext+0x1c>)
 800eace:	f000 fa4f 	bl	800ef70 <Ext_Routines>

	GUI_onoff = 0;
 800ead2:	4b05      	ldr	r3, [pc, #20]	; (800eae8 <StateEnable_Ext+0x20>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	701a      	strb	r2, [r3, #0]
	GUI_command = 0;
 800ead8:	4b04      	ldr	r3, [pc, #16]	; (800eaec <StateEnable_Ext+0x24>)
 800eada:	2200      	movs	r2, #0
 800eadc:	701a      	strb	r2, [r3, #0]
}
 800eade:	bf00      	nop
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	2400cf78 	.word	0x2400cf78
 800eae8:	2400d05c 	.word	0x2400d05c
 800eaec:	2400d000 	.word	0x2400d000

0800eaf0 <StateError_Run>:

static void StateError_Run()
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	af00      	add	r7, sp, #0

}
 800eaf4:	bf00      	nop
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
	...

0800eb00 <Init_Msg_Hdlr>:
 |_|  |_\__,_|_|_||_|
                     
*/

void Init_Msg_Hdlr()
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b098      	sub	sp, #96	; 0x60
 800eb04:	af02      	add	r7, sp, #8
	node_id = NODE_ID_LA;
 800eb06:	4b8b      	ldr	r3, [pc, #556]	; (800ed34 <Init_Msg_Hdlr+0x234>)
 800eb08:	2206      	movs	r2, #6
 800eb0a:	701a      	strb	r2, [r3, #0]
    ori_node = 0x00;
 800eb0c:	4b8a      	ldr	r3, [pc, #552]	; (800ed38 <Init_Msg_Hdlr+0x238>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	701a      	strb	r2, [r3, #0]

    uint16_t t_mask = 0x00F;
 800eb12:	230f      	movs	r3, #15
 800eb14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    uint32_t t_filter1 = 0;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t t_filter2 = NODE_ID_LA;
 800eb1c:	2306      	movs	r3, #6
 800eb1e:	64fb      	str	r3, [r7, #76]	; 0x4c

    /*Communication Init*/
//    comm_type = Init_IOIF_USB();
    comm_type = e_FDCAN;
 800eb20:	4b86      	ldr	r3, [pc, #536]	; (800ed3c <Init_Msg_Hdlr+0x23c>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	701a      	strb	r2, [r3, #0]

    if(comm_type == e_FDCAN){
 800eb26:	4b85      	ldr	r3, [pc, #532]	; (800ed3c <Init_Msg_Hdlr+0x23c>)
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d106      	bne.n	800eb3c <Init_Msg_Hdlr+0x3c>
    	Init_IOIF_Fdcan(t_mask, t_filter1, t_filter2);
 800eb2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800eb32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fc fe70 	bl	800b81c <Init_IOIF_Fdcan>
    }

    /*Task Init*/
    Init_Task(&msg_hdlr_task);
 800eb3c:	4880      	ldr	r0, [pc, #512]	; (800ed40 <Init_Msg_Hdlr+0x240>)
 800eb3e:	f000 fbd1 	bl	800f2e4 <Init_Task>

	/* State Definition */
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Off,      StateOff_Ent,       NULL,    			NULL,   				 true);
 800eb42:	1d38      	adds	r0, r7, #4
 800eb44:	2300      	movs	r3, #0
 800eb46:	2200      	movs	r2, #0
 800eb48:	497e      	ldr	r1, [pc, #504]	; (800ed44 <Init_Msg_Hdlr+0x244>)
 800eb4a:	f000 faeb 	bl	800f124 <Create_State_Entity>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	9301      	str	r3, [sp, #4]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	1d3b      	adds	r3, r7, #4
 800eb58:	cb0c      	ldmia	r3, {r2, r3}
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	4878      	ldr	r0, [pc, #480]	; (800ed40 <Init_Msg_Hdlr+0x240>)
 800eb5e:	f000 fbe0 	bl	800f322 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Standby,  StateStandby_Ent,   StateStandby_Run,	StateStandby_Ext,   	false);
 800eb62:	f107 0010 	add.w	r0, r7, #16
 800eb66:	4b78      	ldr	r3, [pc, #480]	; (800ed48 <Init_Msg_Hdlr+0x248>)
 800eb68:	4a78      	ldr	r2, [pc, #480]	; (800ed4c <Init_Msg_Hdlr+0x24c>)
 800eb6a:	4979      	ldr	r1, [pc, #484]	; (800ed50 <Init_Msg_Hdlr+0x250>)
 800eb6c:	f000 fada 	bl	800f124 <Create_State_Entity>
 800eb70:	2300      	movs	r3, #0
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	9300      	str	r3, [sp, #0]
 800eb78:	f107 0310 	add.w	r3, r7, #16
 800eb7c:	cb0c      	ldmia	r3, {r2, r3}
 800eb7e:	2101      	movs	r1, #1
 800eb80:	486f      	ldr	r0, [pc, #444]	; (800ed40 <Init_Msg_Hdlr+0x240>)
 800eb82:	f000 fbce 	bl	800f322 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Enable,   StateEnable_Ent,   	StateEnable_Run, 	StateEnable_Ext,   		false);
 800eb86:	f107 001c 	add.w	r0, r7, #28
 800eb8a:	4b72      	ldr	r3, [pc, #456]	; (800ed54 <Init_Msg_Hdlr+0x254>)
 800eb8c:	4a72      	ldr	r2, [pc, #456]	; (800ed58 <Init_Msg_Hdlr+0x258>)
 800eb8e:	4973      	ldr	r1, [pc, #460]	; (800ed5c <Init_Msg_Hdlr+0x25c>)
 800eb90:	f000 fac8 	bl	800f124 <Create_State_Entity>
 800eb94:	2300      	movs	r3, #0
 800eb96:	9301      	str	r3, [sp, #4]
 800eb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	f107 031c 	add.w	r3, r7, #28
 800eba0:	cb0c      	ldmia	r3, {r2, r3}
 800eba2:	2102      	movs	r1, #2
 800eba4:	4866      	ldr	r0, [pc, #408]	; (800ed40 <Init_Msg_Hdlr+0x240>)
 800eba6:	f000 fbbc 	bl	800f322 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Error,    NULL,   			StateError_Run,    	NULL,   				false);
 800ebaa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ebae:	2300      	movs	r3, #0
 800ebb0:	4a6b      	ldr	r2, [pc, #428]	; (800ed60 <Init_Msg_Hdlr+0x260>)
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	f000 fab6 	bl	800f124 <Create_State_Entity>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	9301      	str	r3, [sp, #4]
 800ebbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ebc4:	cb0c      	ldmia	r3, {r2, r3}
 800ebc6:	2103      	movs	r1, #3
 800ebc8:	485d      	ldr	r0, [pc, #372]	; (800ed40 <Init_Msg_Hdlr+0x240>)
 800ebca:	f000 fbaa 	bl	800f322 <Set_Task_State_Entity>

    TASK_CREATE_ROUTINE(&msg_hdlr_task,  ROUTINE_ID_MSG_PDO_SEND, 			NULL, Send_PDO, 		Ext_Send_PDO);
 800ebce:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800ebd2:	4b64      	ldr	r3, [pc, #400]	; (800ed64 <Init_Msg_Hdlr+0x264>)
 800ebd4:	4a64      	ldr	r2, [pc, #400]	; (800ed68 <Init_Msg_Hdlr+0x268>)
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	f000 f900 	bl	800eddc <Create_Routine_Entity>
 800ebdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebde:	9300      	str	r3, [sp, #0]
 800ebe0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ebe4:	cb0c      	ldmia	r3, {r2, r3}
 800ebe6:	2100      	movs	r1, #0
 800ebe8:	4855      	ldr	r0, [pc, #340]	; (800ed40 <Init_Msg_Hdlr+0x240>)
 800ebea:	f000 fbc3 	bl	800f374 <Set_Task_Routine_Entity>
    TASK_CREATE_ROUTINE(&msg_hdlr_task,  ROUTINE_ID_MSG_PDO_DUMMY_TEST, 	NULL, Set_PDO_Dummy, 	NULL);
 800ebee:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	4a5d      	ldr	r2, [pc, #372]	; (800ed6c <Init_Msg_Hdlr+0x26c>)
 800ebf6:	2100      	movs	r1, #0
 800ebf8:	f000 f8f0 	bl	800eddc <Create_Routine_Entity>
 800ebfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebfe:	9300      	str	r3, [sp, #0]
 800ec00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ec04:	cb0c      	ldmia	r3, {r2, r3}
 800ec06:	2101      	movs	r1, #1
 800ec08:	484d      	ldr	r0, [pc, #308]	; (800ed40 <Init_Msg_Hdlr+0x240>)
 800ec0a:	f000 fbb3 	bl	800f374 <Set_Task_Routine_Entity>

	/* Data Object Definition */
    Create_DOD(TASK_ID_MSG);
 800ec0e:	2002      	movs	r0, #2
 800ec10:	f7fe fc54 	bl	800d4bc <Create_DOD>

	MSG_COMMON_SDO_CREATE(TASK_ID_MSG)
 800ec14:	4b56      	ldr	r3, [pc, #344]	; (800ed70 <Init_Msg_Hdlr+0x270>)
 800ec16:	2201      	movs	r2, #1
 800ec18:	2100      	movs	r1, #0
 800ec1a:	2002      	movs	r0, #2
 800ec1c:	f7fe fd20 	bl	800d660 <Create_SDO>
 800ec20:	4b54      	ldr	r3, [pc, #336]	; (800ed74 <Init_Msg_Hdlr+0x274>)
 800ec22:	2201      	movs	r2, #1
 800ec24:	2101      	movs	r1, #1
 800ec26:	2002      	movs	r0, #2
 800ec28:	f7fe fd1a 	bl	800d660 <Create_SDO>
 800ec2c:	4b52      	ldr	r3, [pc, #328]	; (800ed78 <Init_Msg_Hdlr+0x278>)
 800ec2e:	2201      	movs	r2, #1
 800ec30:	2102      	movs	r1, #2
 800ec32:	2002      	movs	r0, #2
 800ec34:	f7fe fd14 	bl	800d660 <Create_SDO>
 800ec38:	4b50      	ldr	r3, [pc, #320]	; (800ed7c <Init_Msg_Hdlr+0x27c>)
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	2103      	movs	r1, #3
 800ec3e:	2002      	movs	r0, #2
 800ec40:	f7fe fd0e 	bl	800d660 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_PDO_LIST, 				e_UInt16, Set_Send_PDO_List);
 800ec44:	4b4e      	ldr	r3, [pc, #312]	; (800ed80 <Init_Msg_Hdlr+0x280>)
 800ec46:	2202      	movs	r2, #2
 800ec48:	2104      	movs	r1, #4
 800ec4a:	2002      	movs	r0, #2
 800ec4c:	f7fe fd08 	bl	800d660 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_MS_ENUM,  				e_UInt8, Set_MS_Enum);
 800ec50:	4b4c      	ldr	r3, [pc, #304]	; (800ed84 <Init_Msg_Hdlr+0x284>)
 800ec52:	2201      	movs	r2, #1
 800ec54:	2105      	movs	r1, #5
 800ec56:	2002      	movs	r0, #2
 800ec58:	f7fe fd02 	bl	800d660 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_GUI_COMM_ONOFF,  		e_UInt8, Set_GUI_COMM_OnOff);
 800ec5c:	4b4a      	ldr	r3, [pc, #296]	; (800ed88 <Init_Msg_Hdlr+0x288>)
 800ec5e:	2201      	movs	r2, #1
 800ec60:	2106      	movs	r1, #6
 800ec62:	2002      	movs	r0, #2
 800ec64:	f7fe fcfc 	bl	800d660 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_GUI_COMM_COMMAND,  		e_UInt8, Set_GUI_COMM_Command);
 800ec68:	4b48      	ldr	r3, [pc, #288]	; (800ed8c <Init_Msg_Hdlr+0x28c>)
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	2107      	movs	r1, #7
 800ec6e:	2002      	movs	r0, #2
 800ec70:	f7fe fcf6 	bl	800d660 <Create_SDO>

	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST1, 					e_Int32, 1, &test_dummy[0]);
 800ec74:	4b46      	ldr	r3, [pc, #280]	; (800ed90 <Init_Msg_Hdlr+0x290>)
 800ec76:	9300      	str	r3, [sp, #0]
 800ec78:	2301      	movs	r3, #1
 800ec7a:	2206      	movs	r2, #6
 800ec7c:	2100      	movs	r1, #0
 800ec7e:	2002      	movs	r0, #2
 800ec80:	f7fe fc34 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST2, 					e_Int32, 1, &test_dummy[1]);
 800ec84:	4b43      	ldr	r3, [pc, #268]	; (800ed94 <Init_Msg_Hdlr+0x294>)
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	2301      	movs	r3, #1
 800ec8a:	2206      	movs	r2, #6
 800ec8c:	2101      	movs	r1, #1
 800ec8e:	2002      	movs	r0, #2
 800ec90:	f7fe fc2c 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST3, 					e_Int32, 1, &test_dummy[2]);
 800ec94:	4b40      	ldr	r3, [pc, #256]	; (800ed98 <Init_Msg_Hdlr+0x298>)
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	2301      	movs	r3, #1
 800ec9a:	2206      	movs	r2, #6
 800ec9c:	2102      	movs	r1, #2
 800ec9e:	2002      	movs	r0, #2
 800eca0:	f7fe fc24 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST4, 					e_Int32, 1, &test_dummy[3]);
 800eca4:	4b3d      	ldr	r3, [pc, #244]	; (800ed9c <Init_Msg_Hdlr+0x29c>)
 800eca6:	9300      	str	r3, [sp, #0]
 800eca8:	2301      	movs	r3, #1
 800ecaa:	2206      	movs	r2, #6
 800ecac:	2103      	movs	r1, #3
 800ecae:	2002      	movs	r0, #2
 800ecb0:	f7fe fc1c 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST5, 					e_Int32, 1, &test_dummy[4]);
 800ecb4:	4b3a      	ldr	r3, [pc, #232]	; (800eda0 <Init_Msg_Hdlr+0x2a0>)
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	2301      	movs	r3, #1
 800ecba:	2206      	movs	r2, #6
 800ecbc:	2104      	movs	r1, #4
 800ecbe:	2002      	movs	r0, #2
 800ecc0:	f7fe fc14 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST6, 					e_Int32, 1, &test_dummy[5]);
 800ecc4:	4b37      	ldr	r3, [pc, #220]	; (800eda4 <Init_Msg_Hdlr+0x2a4>)
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	2301      	movs	r3, #1
 800ecca:	2206      	movs	r2, #6
 800eccc:	2105      	movs	r1, #5
 800ecce:	2002      	movs	r0, #2
 800ecd0:	f7fe fc0c 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST7, 					e_Int32, 1, &test_dummy[6]);
 800ecd4:	4b34      	ldr	r3, [pc, #208]	; (800eda8 <Init_Msg_Hdlr+0x2a8>)
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	2301      	movs	r3, #1
 800ecda:	2206      	movs	r2, #6
 800ecdc:	2106      	movs	r1, #6
 800ecde:	2002      	movs	r0, #2
 800ece0:	f7fe fc04 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST8, 					e_Int32, 1, &test_dummy[7]);
 800ece4:	4b31      	ldr	r3, [pc, #196]	; (800edac <Init_Msg_Hdlr+0x2ac>)
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	2301      	movs	r3, #1
 800ecea:	2206      	movs	r2, #6
 800ecec:	2107      	movs	r1, #7
 800ecee:	2002      	movs	r0, #2
 800ecf0:	f7fe fbfc 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST9, 					e_Int32, 1, &test_dummy[8]);
 800ecf4:	4b2e      	ldr	r3, [pc, #184]	; (800edb0 <Init_Msg_Hdlr+0x2b0>)
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	2206      	movs	r2, #6
 800ecfc:	2108      	movs	r1, #8
 800ecfe:	2002      	movs	r0, #2
 800ed00:	f7fe fbf4 	bl	800d4ec <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST10, 					e_Int32, 1, &test_dummy[9]);
 800ed04:	4b2b      	ldr	r3, [pc, #172]	; (800edb4 <Init_Msg_Hdlr+0x2b4>)
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	2301      	movs	r3, #1
 800ed0a:	2206      	movs	r2, #6
 800ed0c:	2109      	movs	r1, #9
 800ed0e:	2002      	movs	r0, #2
 800ed10:	f7fe fbec 	bl	800d4ec <Create_PDO>

	/* Callback Allocation */
    if(comm_type == e_FDCAN){
 800ed14:	4b09      	ldr	r3, [pc, #36]	; (800ed3c <Init_Msg_Hdlr+0x23c>)
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d102      	bne.n	800ed22 <Init_Msg_Hdlr+0x222>
    	fdcan_rx_callback_ptr = Fdcan_Rx_Hdlr;
 800ed1c:	4b26      	ldr	r3, [pc, #152]	; (800edb8 <Init_Msg_Hdlr+0x2b8>)
 800ed1e:	4a27      	ldr	r2, [pc, #156]	; (800edbc <Init_Msg_Hdlr+0x2bc>)
 800ed20:	601a      	str	r2, [r3, #0]
    } else {
//    	ioif_usb_rx_callback_ptr = USB_Rx_Hdlr;
    }

    /* Start */
    if(Start_TIM6()>0){
 800ed22:	f7fc fe79 	bl	800ba18 <Start_TIM6>
        //TODO: ERROR PROCESS
    }
    ioif_tim6_callback_ptr = Run_Msg_Hdlr;
 800ed26:	4b26      	ldr	r3, [pc, #152]	; (800edc0 <Init_Msg_Hdlr+0x2c0>)
 800ed28:	4a26      	ldr	r2, [pc, #152]	; (800edc4 <Init_Msg_Hdlr+0x2c4>)
 800ed2a:	601a      	str	r2, [r3, #0]
}
 800ed2c:	bf00      	nop
 800ed2e:	3758      	adds	r7, #88	; 0x58
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	2400cf30 	.word	0x2400cf30
 800ed38:	2400d1bc 	.word	0x2400d1bc
 800ed3c:	2400d469 	.word	0x2400d469
 800ed40:	2400cf38 	.word	0x2400cf38
 800ed44:	0800ea39 	.word	0x0800ea39
 800ed48:	0800ea7d 	.word	0x0800ea7d
 800ed4c:	0800ea6f 	.word	0x0800ea6f
 800ed50:	0800ea61 	.word	0x0800ea61
 800ed54:	0800eac9 	.word	0x0800eac9
 800ed58:	0800eaa9 	.word	0x0800eaa9
 800ed5c:	0800ea8d 	.word	0x0800ea8d
 800ed60:	0800eaf1 	.word	0x0800eaf1
 800ed64:	0800e21d 	.word	0x0800e21d
 800ed68:	0800e189 	.word	0x0800e189
 800ed6c:	0800e241 	.word	0x0800e241
 800ed70:	0800e79d 	.word	0x0800e79d
 800ed74:	0800e7d9 	.word	0x0800e7d9
 800ed78:	0800e815 	.word	0x0800e815
 800ed7c:	0800e891 	.word	0x0800e891
 800ed80:	0800e949 	.word	0x0800e949
 800ed84:	0800e9a9 	.word	0x0800e9a9
 800ed88:	0800e9d9 	.word	0x0800e9d9
 800ed8c:	0800ea09 	.word	0x0800ea09
 800ed90:	2400d6ac 	.word	0x2400d6ac
 800ed94:	2400d6b0 	.word	0x2400d6b0
 800ed98:	2400d6b4 	.word	0x2400d6b4
 800ed9c:	2400d6b8 	.word	0x2400d6b8
 800eda0:	2400d6bc 	.word	0x2400d6bc
 800eda4:	2400d6c0 	.word	0x2400d6c0
 800eda8:	2400d6c4 	.word	0x2400d6c4
 800edac:	2400d6c8 	.word	0x2400d6c8
 800edb0:	2400d6cc 	.word	0x2400d6cc
 800edb4:	2400d6d0 	.word	0x2400d6d0
 800edb8:	2400d068 	.word	0x2400d068
 800edbc:	0800e6ed 	.word	0x0800e6ed
 800edc0:	2400045c 	.word	0x2400045c
 800edc4:	0800edc9 	.word	0x0800edc9

0800edc8 <Run_Msg_Hdlr>:

void Run_Msg_Hdlr()
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	af00      	add	r7, sp, #0
//	uint32_t msg_hdlr_loop_time_cnt_1 = DWT->CYCCNT;

	Run_Task(&msg_hdlr_task);
 800edcc:	4802      	ldr	r0, [pc, #8]	; (800edd8 <Run_Msg_Hdlr+0x10>)
 800edce:	f000 fa9b 	bl	800f308 <Run_Task>

//	uint32_t msg_hdlr_loop_time_cnt_2 = DWT->CYCCNT;
//	msg_hdlr_loop_time_us = (msg_hdlr_loop_time_cnt_2 - msg_hdlr_loop_time_cnt_1)/480; // microsecond
}
 800edd2:	bf00      	nop
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	2400cf38 	.word	0x2400cf38

0800eddc <Create_Routine_Entity>:
#include <routine.h>

// Routine Entity
RoutineEntityStruct Create_Routine_Entity(RoutineFncPtr t_ent, RoutineFncPtr t_run, RoutineFncPtr t_ext)
{
 800eddc:	b490      	push	{r4, r7}
 800edde:	b088      	sub	sp, #32
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
 800ede8:	603b      	str	r3, [r7, #0]
    RoutineEntityStruct t_res;
    t_res.on_enter = t_ent;
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	617b      	str	r3, [r7, #20]
    t_res.on_run = t_run;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	61bb      	str	r3, [r7, #24]
    t_res.on_exit = t_ext;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	61fb      	str	r3, [r7, #28]
    return t_res;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	461c      	mov	r4, r3
 800edfa:	f107 0314 	add.w	r3, r7, #20
 800edfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	3720      	adds	r7, #32
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bc90      	pop	{r4, r7}
 800ee0e:	4770      	bx	lr

0800ee10 <Init_Routine>:


// DriveRoutine Interface
void Init_Routine(RoutineStruct* t_routine)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800ee18:	2300      	movs	r3, #0
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	e025      	b.n	800ee6a <Init_Routine+0x5a>
    	t_routine->id[i] = 0;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68fa      	ldr	r2, [r7, #12]
 800ee22:	2100      	movs	r1, #0
 800ee24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	t_routine->entities[i].on_enter = NULL;
 800ee28:	6879      	ldr	r1, [r7, #4]
 800ee2a:	68fa      	ldr	r2, [r7, #12]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	4413      	add	r3, r2
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	440b      	add	r3, r1
 800ee36:	3324      	adds	r3, #36	; 0x24
 800ee38:	2200      	movs	r2, #0
 800ee3a:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_run = NULL;
 800ee3c:	6879      	ldr	r1, [r7, #4]
 800ee3e:	68fa      	ldr	r2, [r7, #12]
 800ee40:	4613      	mov	r3, r2
 800ee42:	005b      	lsls	r3, r3, #1
 800ee44:	4413      	add	r3, r2
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	440b      	add	r3, r1
 800ee4a:	3328      	adds	r3, #40	; 0x28
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_exit = NULL;
 800ee50:	6879      	ldr	r1, [r7, #4]
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	4613      	mov	r3, r2
 800ee56:	005b      	lsls	r3, r3, #1
 800ee58:	4413      	add	r3, r2
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	440b      	add	r3, r1
 800ee5e:	332c      	adds	r3, #44	; 0x2c
 800ee60:	2200      	movs	r2, #0
 800ee62:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	3301      	adds	r3, #1
 800ee68:	60fb      	str	r3, [r7, #12]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2b07      	cmp	r3, #7
 800ee6e:	ddd6      	ble.n	800ee1e <Init_Routine+0xe>
    }
    t_routine->n_id = 0;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	621a      	str	r2, [r3, #32]
}
 800ee76:	bf00      	nop
 800ee78:	3714      	adds	r7, #20
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
	...

0800ee84 <Ent_Routines>:

int Ent_Routines(RoutineStruct* t_routine)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
	static int t_res = 0;
	static int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	60fb      	str	r3, [r7, #12]
 800ee90:	e029      	b.n	800eee6 <Ent_Routines+0x62>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee9a:	4a18      	ldr	r2, [pc, #96]	; (800eefc <Ent_Routines+0x78>)
 800ee9c:	6013      	str	r3, [r2, #0]
		if (t_routine->entities[t_id].on_enter) {
 800ee9e:	4b17      	ldr	r3, [pc, #92]	; (800eefc <Ent_Routines+0x78>)
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	6879      	ldr	r1, [r7, #4]
 800eea4:	4613      	mov	r3, r2
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	4413      	add	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	440b      	add	r3, r1
 800eeae:	3324      	adds	r3, #36	; 0x24
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00d      	beq.n	800eed2 <Ent_Routines+0x4e>
			t_res = t_routine->entities[t_id].on_enter();
 800eeb6:	4b11      	ldr	r3, [pc, #68]	; (800eefc <Ent_Routines+0x78>)
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	6879      	ldr	r1, [r7, #4]
 800eebc:	4613      	mov	r3, r2
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	4413      	add	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	440b      	add	r3, r1
 800eec6:	3324      	adds	r3, #36	; 0x24
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4798      	blx	r3
 800eecc:	4603      	mov	r3, r0
 800eece:	4a0c      	ldr	r2, [pc, #48]	; (800ef00 <Ent_Routines+0x7c>)
 800eed0:	6013      	str	r3, [r2, #0]
		}
        if (t_res < 0) {
 800eed2:	4b0b      	ldr	r3, [pc, #44]	; (800ef00 <Ent_Routines+0x7c>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	da02      	bge.n	800eee0 <Ent_Routines+0x5c>
            return t_res;
 800eeda:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <Ent_Routines+0x7c>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	e008      	b.n	800eef2 <Ent_Routines+0x6e>
    for (int i = 0; i < t_routine->n_id; i++){
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	3301      	adds	r3, #1
 800eee4:	60fb      	str	r3, [r7, #12]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6a1a      	ldr	r2, [r3, #32]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d8d0      	bhi.n	800ee92 <Ent_Routines+0xe>
        }
    }
    return 0;
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	240000a4 	.word	0x240000a4
 800ef00:	240000a8 	.word	0x240000a8

0800ef04 <Run_Routines>:

int Run_Routines(RoutineStruct* t_routine)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b086      	sub	sp, #24
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
	int t_res = 0;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	617b      	str	r3, [r7, #20]
	int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800ef10:	2300      	movs	r3, #0
 800ef12:	613b      	str	r3, [r7, #16]
 800ef14:	e022      	b.n	800ef5c <Run_Routines+0x58>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef1e:	60fb      	str	r3, [r7, #12]
		if (t_routine->entities[t_id].on_run) {
 800ef20:	6879      	ldr	r1, [r7, #4]
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	4613      	mov	r3, r2
 800ef26:	005b      	lsls	r3, r3, #1
 800ef28:	4413      	add	r3, r2
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	440b      	add	r3, r1
 800ef2e:	3328      	adds	r3, #40	; 0x28
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d00a      	beq.n	800ef4c <Run_Routines+0x48>
			t_res = t_routine->entities[t_id].on_run();
 800ef36:	6879      	ldr	r1, [r7, #4]
 800ef38:	68fa      	ldr	r2, [r7, #12]
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	005b      	lsls	r3, r3, #1
 800ef3e:	4413      	add	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	440b      	add	r3, r1
 800ef44:	3328      	adds	r3, #40	; 0x28
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4798      	blx	r3
 800ef4a:	6178      	str	r0, [r7, #20]
		}
        if (t_res < 0) {
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	da01      	bge.n	800ef56 <Run_Routines+0x52>
            return t_res;
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	e008      	b.n	800ef68 <Run_Routines+0x64>
    for (int i = 0; i < t_routine->n_id; i++){
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	613b      	str	r3, [r7, #16]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6a1a      	ldr	r2, [r3, #32]
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d8d7      	bhi.n	800ef16 <Run_Routines+0x12>
        }
    }
    return 0;
 800ef66:	2300      	movs	r3, #0
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <Ext_Routines>:

int Ext_Routines(RoutineStruct* t_routine)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
	static int t_res = 0;
	static int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800ef78:	2300      	movs	r3, #0
 800ef7a:	60fb      	str	r3, [r7, #12]
 800ef7c:	e029      	b.n	800efd2 <Ext_Routines+0x62>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef86:	4a18      	ldr	r2, [pc, #96]	; (800efe8 <Ext_Routines+0x78>)
 800ef88:	6013      	str	r3, [r2, #0]
		if (t_routine->entities[t_id].on_exit) {
 800ef8a:	4b17      	ldr	r3, [pc, #92]	; (800efe8 <Ext_Routines+0x78>)
 800ef8c:	681a      	ldr	r2, [r3, #0]
 800ef8e:	6879      	ldr	r1, [r7, #4]
 800ef90:	4613      	mov	r3, r2
 800ef92:	005b      	lsls	r3, r3, #1
 800ef94:	4413      	add	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	440b      	add	r3, r1
 800ef9a:	332c      	adds	r3, #44	; 0x2c
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d00d      	beq.n	800efbe <Ext_Routines+0x4e>
			t_res = t_routine->entities[t_id].on_exit();
 800efa2:	4b11      	ldr	r3, [pc, #68]	; (800efe8 <Ext_Routines+0x78>)
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	6879      	ldr	r1, [r7, #4]
 800efa8:	4613      	mov	r3, r2
 800efaa:	005b      	lsls	r3, r3, #1
 800efac:	4413      	add	r3, r2
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	440b      	add	r3, r1
 800efb2:	332c      	adds	r3, #44	; 0x2c
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4798      	blx	r3
 800efb8:	4603      	mov	r3, r0
 800efba:	4a0c      	ldr	r2, [pc, #48]	; (800efec <Ext_Routines+0x7c>)
 800efbc:	6013      	str	r3, [r2, #0]
		}
        if (t_res < 0) {
 800efbe:	4b0b      	ldr	r3, [pc, #44]	; (800efec <Ext_Routines+0x7c>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	da02      	bge.n	800efcc <Ext_Routines+0x5c>
            return t_res;
 800efc6:	4b09      	ldr	r3, [pc, #36]	; (800efec <Ext_Routines+0x7c>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	e008      	b.n	800efde <Ext_Routines+0x6e>
    for (int i = 0; i < t_routine->n_id; i++){
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	3301      	adds	r3, #1
 800efd0:	60fb      	str	r3, [r7, #12]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a1a      	ldr	r2, [r3, #32]
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d8d0      	bhi.n	800ef7e <Ext_Routines+0xe>
        }
    }
    return 0;
 800efdc:	2300      	movs	r3, #0
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	240000ac 	.word	0x240000ac
 800efec:	240000b0 	.word	0x240000b0

0800eff0 <Clear_Routines>:

void Clear_Routines(RoutineStruct* t_routine)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800eff8:	2300      	movs	r3, #0
 800effa:	60fb      	str	r3, [r7, #12]
 800effc:	e008      	b.n	800f010 <Clear_Routines+0x20>
    	t_routine->id[i] = ROUTINE_DEFAULT_ID;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	68fa      	ldr	r2, [r7, #12]
 800f002:	f04f 31ff 	mov.w	r1, #4294967295
 800f006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	3301      	adds	r3, #1
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2b07      	cmp	r3, #7
 800f014:	ddf3      	ble.n	800effe <Clear_Routines+0xe>
    }
    t_routine->n_id = 0;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	621a      	str	r2, [r3, #32]
}
 800f01c:	bf00      	nop
 800f01e:	3714      	adds	r7, #20
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <Push_Routine>:

int Push_Routine(RoutineStruct* t_routine, uint8_t t_id)
{
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	460b      	mov	r3, r1
 800f032:	70fb      	strb	r3, [r7, #3]
    if (t_routine->n_id >= ROUTINE_MAX_ENTITIES) {
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a1b      	ldr	r3, [r3, #32]
 800f038:	2b07      	cmp	r3, #7
 800f03a:	d902      	bls.n	800f042 <Push_Routine+0x1a>
        return -1;
 800f03c:	f04f 33ff 	mov.w	r3, #4294967295
 800f040:	e01d      	b.n	800f07e <Push_Routine+0x56>
    }

    for(int i = 0; i < t_routine->n_id; i++){
 800f042:	2300      	movs	r3, #0
 800f044:	60fb      	str	r3, [r7, #12]
 800f046:	e00b      	b.n	800f060 <Push_Routine+0x38>
    	if(t_routine->id[i] == t_id){return 0;}
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f050:	78fb      	ldrb	r3, [r7, #3]
 800f052:	429a      	cmp	r2, r3
 800f054:	d101      	bne.n	800f05a <Push_Routine+0x32>
 800f056:	2300      	movs	r3, #0
 800f058:	e011      	b.n	800f07e <Push_Routine+0x56>
    for(int i = 0; i < t_routine->n_id; i++){
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	3301      	adds	r3, #1
 800f05e:	60fb      	str	r3, [r7, #12]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6a1a      	ldr	r2, [r3, #32]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	429a      	cmp	r2, r3
 800f068:	d8ee      	bhi.n	800f048 <Push_Routine+0x20>
    }
    
    t_routine->id[t_routine->n_id++] = t_id;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a1b      	ldr	r3, [r3, #32]
 800f06e:	1c59      	adds	r1, r3, #1
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	6211      	str	r1, [r2, #32]
 800f074:	78f9      	ldrb	r1, [r7, #3]
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 0;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
	...

0800f08c <Transition_Map>:

#include "state_machine.h"

// State & Transition Map
static StateEnum Transition_Map(StateEnum t_curr, StateEnum t_cmd)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	4603      	mov	r3, r0
 800f094:	460a      	mov	r2, r1
 800f096:	71fb      	strb	r3, [r7, #7]
 800f098:	4613      	mov	r3, r2
 800f09a:	71bb      	strb	r3, [r7, #6]
    if (t_curr == t_cmd) {
 800f09c:	79fa      	ldrb	r2, [r7, #7]
 800f09e:	79bb      	ldrb	r3, [r7, #6]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d101      	bne.n	800f0a8 <Transition_Map+0x1c>
        return t_curr;
 800f0a4:	79fb      	ldrb	r3, [r7, #7]
 800f0a6:	e037      	b.n	800f118 <Transition_Map+0x8c>
    }

    switch (t_curr) {
 800f0a8:	79fb      	ldrb	r3, [r7, #7]
 800f0aa:	2b03      	cmp	r3, #3
 800f0ac:	d82a      	bhi.n	800f104 <Transition_Map+0x78>
 800f0ae:	a201      	add	r2, pc, #4	; (adr r2, 800f0b4 <Transition_Map+0x28>)
 800f0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b4:	0800f0c5 	.word	0x0800f0c5
 800f0b8:	0800f0cf 	.word	0x0800f0cf
 800f0bc:	0800f0df 	.word	0x0800f0df
 800f0c0:	0800f0f5 	.word	0x0800f0f5
    /*  |- From State -|  |---------------------------------- To State ----------------------------------| |- If valid -| |else| */
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 800f0c4:	79bb      	ldrb	r3, [r7, #6]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d11e      	bne.n	800f108 <Transition_Map+0x7c>
 800f0ca:	79bb      	ldrb	r3, [r7, #6]
 800f0cc:	e024      	b.n	800f118 <Transition_Map+0x8c>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 800f0ce:	79bb      	ldrb	r3, [r7, #6]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d002      	beq.n	800f0da <Transition_Map+0x4e>
 800f0d4:	79bb      	ldrb	r3, [r7, #6]
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d118      	bne.n	800f10c <Transition_Map+0x80>
 800f0da:	79bb      	ldrb	r3, [r7, #6]
 800f0dc:	e01c      	b.n	800f118 <Transition_Map+0x8c>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 800f0de:	79bb      	ldrb	r3, [r7, #6]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d005      	beq.n	800f0f0 <Transition_Map+0x64>
 800f0e4:	79bb      	ldrb	r3, [r7, #6]
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d002      	beq.n	800f0f0 <Transition_Map+0x64>
 800f0ea:	79bb      	ldrb	r3, [r7, #6]
 800f0ec:	2b03      	cmp	r3, #3
 800f0ee:	d10f      	bne.n	800f110 <Transition_Map+0x84>
 800f0f0:	79bb      	ldrb	r3, [r7, #6]
 800f0f2:	e011      	b.n	800f118 <Transition_Map+0x8c>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 800f0f4:	79bb      	ldrb	r3, [r7, #6]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d002      	beq.n	800f100 <Transition_Map+0x74>
 800f0fa:	79bb      	ldrb	r3, [r7, #6]
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d109      	bne.n	800f114 <Transition_Map+0x88>
 800f100:	79bb      	ldrb	r3, [r7, #6]
 800f102:	e009      	b.n	800f118 <Transition_Map+0x8c>
    default: break;
 800f104:	bf00      	nop
 800f106:	e006      	b.n	800f116 <Transition_Map+0x8a>
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 800f108:	bf00      	nop
 800f10a:	e004      	b.n	800f116 <Transition_Map+0x8a>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 800f10c:	bf00      	nop
 800f10e:	e002      	b.n	800f116 <Transition_Map+0x8a>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 800f110:	bf00      	nop
 800f112:	e000      	b.n	800f116 <Transition_Map+0x8a>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 800f114:	bf00      	nop
    }

    return t_curr;
 800f116:	79fb      	ldrb	r3, [r7, #7]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	370c      	adds	r7, #12
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr

0800f124 <Create_State_Entity>:


// State Functions
StateEntityStruct Create_State_Entity(StateFuncPtr t_ent, StateFuncPtr t_run, StateFuncPtr t_ext)
{
 800f124:	b490      	push	{r4, r7}
 800f126:	b088      	sub	sp, #32
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	603b      	str	r3, [r7, #0]
    StateEntityStruct t_res;
    t_res.on_enter = t_ent;
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	617b      	str	r3, [r7, #20]
    t_res.on_run =   t_run;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	61bb      	str	r3, [r7, #24]
    t_res.on_exit =  t_ext;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	61fb      	str	r3, [r7, #28]
    return t_res;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	461c      	mov	r4, r3
 800f142:	f107 0314 	add.w	r3, r7, #20
 800f146:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f14a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	3720      	adds	r7, #32
 800f152:	46bd      	mov	sp, r7
 800f154:	bc90      	pop	{r4, r7}
 800f156:	4770      	bx	lr

0800f158 <Init_State_Machine>:


// State Machine Interfaces
void Init_State_Machine(StateMachineStruct* t_sm)
{
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 800f160:	2300      	movs	r3, #0
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	e020      	b.n	800f1a8 <Init_State_Machine+0x50>
    	t_sm->entity[i].on_enter = NULL;
 800f166:	6879      	ldr	r1, [r7, #4]
 800f168:	68fa      	ldr	r2, [r7, #12]
 800f16a:	4613      	mov	r3, r2
 800f16c:	005b      	lsls	r3, r3, #1
 800f16e:	4413      	add	r3, r2
 800f170:	009b      	lsls	r3, r3, #2
 800f172:	440b      	add	r3, r1
 800f174:	3304      	adds	r3, #4
 800f176:	2200      	movs	r2, #0
 800f178:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_run   = NULL;
 800f17a:	6879      	ldr	r1, [r7, #4]
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	4613      	mov	r3, r2
 800f180:	005b      	lsls	r3, r3, #1
 800f182:	4413      	add	r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	440b      	add	r3, r1
 800f188:	3308      	adds	r3, #8
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_exit  = NULL;
 800f18e:	6879      	ldr	r1, [r7, #4]
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	4613      	mov	r3, r2
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	4413      	add	r3, r2
 800f198:	009b      	lsls	r3, r3, #2
 800f19a:	440b      	add	r3, r1
 800f19c:	330c      	adds	r3, #12
 800f19e:	2200      	movs	r2, #0
 800f1a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	60fb      	str	r3, [r7, #12]
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2b03      	cmp	r3, #3
 800f1ac:	dddb      	ble.n	800f166 <Init_State_Machine+0xe>
    }
    t_sm->entity_life_cycle = e_StateEntity_Ent;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	709a      	strb	r2, [r3, #2]
}
 800f1b4:	bf00      	nop
 800f1b6:	3714      	adds	r7, #20
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr

0800f1c0 <Run_State_Machine>:

void Run_State_Machine(StateMachineStruct* t_sm)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
    switch (t_sm->entity_life_cycle) {
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	789b      	ldrb	r3, [r3, #2]
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d041      	beq.n	800f254 <Run_State_Machine+0x94>
 800f1d0:	2b02      	cmp	r3, #2
 800f1d2:	dc5c      	bgt.n	800f28e <Run_State_Machine+0xce>
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <Run_State_Machine+0x1e>
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d021      	beq.n	800f220 <Run_State_Machine+0x60>
        }
        t_sm->entity_life_cycle = e_StateEntity_Ent;
        break;

    default: // Invalid Lifecycle
        break;
 800f1dc:	e057      	b.n	800f28e <Run_State_Machine+0xce>
        if (t_sm->entity[t_sm->curr_state].on_enter) {
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	005b      	lsls	r3, r3, #1
 800f1ea:	440b      	add	r3, r1
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	4413      	add	r3, r2
 800f1f0:	3304      	adds	r3, #4
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d00b      	beq.n	800f210 <Run_State_Machine+0x50>
        	t_sm->entity[t_sm->curr_state].on_enter();
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	005b      	lsls	r3, r3, #1
 800f204:	440b      	add	r3, r1
 800f206:	009b      	lsls	r3, r3, #2
 800f208:	4413      	add	r3, r2
 800f20a:	3304      	adds	r3, #4
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4798      	blx	r3
        if (t_sm->entity_life_cycle == e_StateEntity_Ent){
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	789b      	ldrb	r3, [r3, #2]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d13c      	bne.n	800f292 <Run_State_Machine+0xd2>
        	t_sm->entity_life_cycle = e_StateEntity_Run;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2201      	movs	r2, #1
 800f21c:	709a      	strb	r2, [r3, #2]
        break;
 800f21e:	e038      	b.n	800f292 <Run_State_Machine+0xd2>
        if (t_sm->entity[t_sm->curr_state].on_run) {
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	4619      	mov	r1, r3
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	005b      	lsls	r3, r3, #1
 800f22c:	440b      	add	r3, r1
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	4413      	add	r3, r2
 800f232:	3308      	adds	r3, #8
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d02d      	beq.n	800f296 <Run_State_Machine+0xd6>
        	t_sm->entity[t_sm->curr_state].on_run();
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	4619      	mov	r1, r3
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	460b      	mov	r3, r1
 800f244:	005b      	lsls	r3, r3, #1
 800f246:	440b      	add	r3, r1
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4413      	add	r3, r2
 800f24c:	3308      	adds	r3, #8
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4798      	blx	r3
        break;
 800f252:	e020      	b.n	800f296 <Run_State_Machine+0xd6>
        if (t_sm->entity[t_sm->prev_state].on_exit) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	785b      	ldrb	r3, [r3, #1]
 800f258:	4619      	mov	r1, r3
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	460b      	mov	r3, r1
 800f25e:	005b      	lsls	r3, r3, #1
 800f260:	440b      	add	r3, r1
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	330c      	adds	r3, #12
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00b      	beq.n	800f286 <Run_State_Machine+0xc6>
        	t_sm->entity[t_sm->prev_state].on_exit();
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	785b      	ldrb	r3, [r3, #1]
 800f272:	4619      	mov	r1, r3
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	460b      	mov	r3, r1
 800f278:	005b      	lsls	r3, r3, #1
 800f27a:	440b      	add	r3, r1
 800f27c:	009b      	lsls	r3, r3, #2
 800f27e:	4413      	add	r3, r2
 800f280:	330c      	adds	r3, #12
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4798      	blx	r3
        t_sm->entity_life_cycle = e_StateEntity_Ent;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	709a      	strb	r2, [r3, #2]
        break;
 800f28c:	e004      	b.n	800f298 <Run_State_Machine+0xd8>
        break;
 800f28e:	bf00      	nop
 800f290:	e002      	b.n	800f298 <Run_State_Machine+0xd8>
        break;
 800f292:	bf00      	nop
 800f294:	e000      	b.n	800f298 <Run_State_Machine+0xd8>
        break;
 800f296:	bf00      	nop
    }
}
 800f298:	bf00      	nop
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <Transition_State>:

void Transition_State(StateMachineStruct* t_sm, StateEnum t_state_cmd)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	70fb      	strb	r3, [r7, #3]
    StateEnum new_state = Transition_Map(t_sm->curr_state, t_state_cmd);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	78fa      	ldrb	r2, [r7, #3]
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7ff fee9 	bl	800f08c <Transition_Map>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	73fb      	strb	r3, [r7, #15]
    if (t_sm->curr_state != new_state) {
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	7bfa      	ldrb	r2, [r7, #15]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d009      	beq.n	800f2dc <Transition_State+0x3c>
    	t_sm->prev_state = t_sm->curr_state;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	781a      	ldrb	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	705a      	strb	r2, [r3, #1]
    	t_sm->curr_state = new_state;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	7bfa      	ldrb	r2, [r7, #15]
 800f2d4:	701a      	strb	r2, [r3, #0]
    	t_sm->entity_life_cycle = e_StateEntity_Ext;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2202      	movs	r2, #2
 800f2da:	709a      	strb	r2, [r3, #2]
    }
}
 800f2dc:	bf00      	nop
 800f2de:	3710      	adds	r7, #16
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}

0800f2e4 <Init_Task>:

#include <task.h>

// Device Interface
void Init_Task(TaskStruct* t_task)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
    Init_State_Machine(&t_task->state_machine);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	330c      	adds	r3, #12
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff ff31 	bl	800f158 <Init_State_Machine>
    Init_Routine(&t_task->routine);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	3340      	adds	r3, #64	; 0x40
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7ff fd88 	bl	800ee10 <Init_Routine>
}
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <Run_Task>:

void Run_Task(TaskStruct* t_task)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
    Run_State_Machine(&t_task->state_machine);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	330c      	adds	r3, #12
 800f314:	4618      	mov	r0, r3
 800f316:	f7ff ff53 	bl	800f1c0 <Run_State_Machine>
}
 800f31a:	bf00      	nop
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <Set_Task_State_Entity>:

void Set_Task_State_Entity(TaskStruct* t_task, StateEnum t_state, StateEntityStruct t_entity, bool t_is_default)
{
 800f322:	b082      	sub	sp, #8
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	f107 0010 	add.w	r0, r7, #16
 800f330:	e880 000c 	stmia.w	r0, {r2, r3}
 800f334:	460b      	mov	r3, r1
 800f336:	70fb      	strb	r3, [r7, #3]
	t_task->state_machine.entity[t_state] = t_entity;
 800f338:	78fa      	ldrb	r2, [r7, #3]
 800f33a:	6879      	ldr	r1, [r7, #4]
 800f33c:	4613      	mov	r3, r2
 800f33e:	005b      	lsls	r3, r3, #1
 800f340:	4413      	add	r3, r2
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	440b      	add	r3, r1
 800f346:	3308      	adds	r3, #8
 800f348:	3308      	adds	r3, #8
 800f34a:	f107 0210 	add.w	r2, r7, #16
 800f34e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f350:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (t_is_default) {
 800f354:	7f3b      	ldrb	r3, [r7, #28]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d005      	beq.n	800f366 <Set_Task_State_Entity+0x44>
    	t_task->state_machine.curr_state = t_state;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	78fa      	ldrb	r2, [r7, #3]
 800f35e:	731a      	strb	r2, [r3, #12]
    	t_task->state_machine.prev_state = t_state;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	78fa      	ldrb	r2, [r7, #3]
 800f364:	735a      	strb	r2, [r3, #13]
    }
}
 800f366:	bf00      	nop
 800f368:	370c      	adds	r7, #12
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	b002      	add	sp, #8
 800f372:	4770      	bx	lr

0800f374 <Set_Task_Routine_Entity>:

//TODO: id, order range/duplication check
void Set_Task_Routine_Entity(TaskStruct* t_task, int t_id, RoutineEntityStruct t_entity)
{
 800f374:	b082      	sub	sp, #8
 800f376:	b480      	push	{r7}
 800f378:	b083      	sub	sp, #12
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	6039      	str	r1, [r7, #0]
 800f380:	f107 0110 	add.w	r1, r7, #16
 800f384:	e881 000c 	stmia.w	r1, {r2, r3}
	t_task->routine.entities[t_id] = t_entity;
 800f388:	6879      	ldr	r1, [r7, #4]
 800f38a:	683a      	ldr	r2, [r7, #0]
 800f38c:	4613      	mov	r3, r2
 800f38e:	005b      	lsls	r3, r3, #1
 800f390:	4413      	add	r3, r2
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	440b      	add	r3, r1
 800f396:	3360      	adds	r3, #96	; 0x60
 800f398:	3304      	adds	r3, #4
 800f39a:	f107 0210 	add.w	r2, r7, #16
 800f39e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f3a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800f3a4:	bf00      	nop
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	b002      	add	sp, #8
 800f3b0:	4770      	bx	lr
	...

0800f3b4 <__assert_func>:
 800f3b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3b6:	4614      	mov	r4, r2
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	4b09      	ldr	r3, [pc, #36]	; (800f3e0 <__assert_func+0x2c>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4605      	mov	r5, r0
 800f3c0:	68d8      	ldr	r0, [r3, #12]
 800f3c2:	b14c      	cbz	r4, 800f3d8 <__assert_func+0x24>
 800f3c4:	4b07      	ldr	r3, [pc, #28]	; (800f3e4 <__assert_func+0x30>)
 800f3c6:	9100      	str	r1, [sp, #0]
 800f3c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3cc:	4906      	ldr	r1, [pc, #24]	; (800f3e8 <__assert_func+0x34>)
 800f3ce:	462b      	mov	r3, r5
 800f3d0:	f000 f814 	bl	800f3fc <fiprintf>
 800f3d4:	f000 fcde 	bl	800fd94 <abort>
 800f3d8:	4b04      	ldr	r3, [pc, #16]	; (800f3ec <__assert_func+0x38>)
 800f3da:	461c      	mov	r4, r3
 800f3dc:	e7f3      	b.n	800f3c6 <__assert_func+0x12>
 800f3de:	bf00      	nop
 800f3e0:	24000010 	.word	0x24000010
 800f3e4:	080113f0 	.word	0x080113f0
 800f3e8:	080113fd 	.word	0x080113fd
 800f3ec:	0801142b 	.word	0x0801142b

0800f3f0 <__errno>:
 800f3f0:	4b01      	ldr	r3, [pc, #4]	; (800f3f8 <__errno+0x8>)
 800f3f2:	6818      	ldr	r0, [r3, #0]
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	24000010 	.word	0x24000010

0800f3fc <fiprintf>:
 800f3fc:	b40e      	push	{r1, r2, r3}
 800f3fe:	b503      	push	{r0, r1, lr}
 800f400:	4601      	mov	r1, r0
 800f402:	ab03      	add	r3, sp, #12
 800f404:	4805      	ldr	r0, [pc, #20]	; (800f41c <fiprintf+0x20>)
 800f406:	f853 2b04 	ldr.w	r2, [r3], #4
 800f40a:	6800      	ldr	r0, [r0, #0]
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	f000 f925 	bl	800f65c <_vfiprintf_r>
 800f412:	b002      	add	sp, #8
 800f414:	f85d eb04 	ldr.w	lr, [sp], #4
 800f418:	b003      	add	sp, #12
 800f41a:	4770      	bx	lr
 800f41c:	24000010 	.word	0x24000010

0800f420 <__libc_init_array>:
 800f420:	b570      	push	{r4, r5, r6, lr}
 800f422:	4d0d      	ldr	r5, [pc, #52]	; (800f458 <__libc_init_array+0x38>)
 800f424:	4c0d      	ldr	r4, [pc, #52]	; (800f45c <__libc_init_array+0x3c>)
 800f426:	1b64      	subs	r4, r4, r5
 800f428:	10a4      	asrs	r4, r4, #2
 800f42a:	2600      	movs	r6, #0
 800f42c:	42a6      	cmp	r6, r4
 800f42e:	d109      	bne.n	800f444 <__libc_init_array+0x24>
 800f430:	4d0b      	ldr	r5, [pc, #44]	; (800f460 <__libc_init_array+0x40>)
 800f432:	4c0c      	ldr	r4, [pc, #48]	; (800f464 <__libc_init_array+0x44>)
 800f434:	f001 ff20 	bl	8011278 <_init>
 800f438:	1b64      	subs	r4, r4, r5
 800f43a:	10a4      	asrs	r4, r4, #2
 800f43c:	2600      	movs	r6, #0
 800f43e:	42a6      	cmp	r6, r4
 800f440:	d105      	bne.n	800f44e <__libc_init_array+0x2e>
 800f442:	bd70      	pop	{r4, r5, r6, pc}
 800f444:	f855 3b04 	ldr.w	r3, [r5], #4
 800f448:	4798      	blx	r3
 800f44a:	3601      	adds	r6, #1
 800f44c:	e7ee      	b.n	800f42c <__libc_init_array+0xc>
 800f44e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f452:	4798      	blx	r3
 800f454:	3601      	adds	r6, #1
 800f456:	e7f2      	b.n	800f43e <__libc_init_array+0x1e>
 800f458:	08012df0 	.word	0x08012df0
 800f45c:	08012df0 	.word	0x08012df0
 800f460:	08012df0 	.word	0x08012df0
 800f464:	08012df4 	.word	0x08012df4

0800f468 <malloc>:
 800f468:	4b02      	ldr	r3, [pc, #8]	; (800f474 <malloc+0xc>)
 800f46a:	4601      	mov	r1, r0
 800f46c:	6818      	ldr	r0, [r3, #0]
 800f46e:	f000 b871 	b.w	800f554 <_malloc_r>
 800f472:	bf00      	nop
 800f474:	24000010 	.word	0x24000010

0800f478 <free>:
 800f478:	4b02      	ldr	r3, [pc, #8]	; (800f484 <free+0xc>)
 800f47a:	4601      	mov	r1, r0
 800f47c:	6818      	ldr	r0, [r3, #0]
 800f47e:	f000 b819 	b.w	800f4b4 <_free_r>
 800f482:	bf00      	nop
 800f484:	24000010 	.word	0x24000010

0800f488 <memcpy>:
 800f488:	440a      	add	r2, r1
 800f48a:	4291      	cmp	r1, r2
 800f48c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f490:	d100      	bne.n	800f494 <memcpy+0xc>
 800f492:	4770      	bx	lr
 800f494:	b510      	push	{r4, lr}
 800f496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f49a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f49e:	4291      	cmp	r1, r2
 800f4a0:	d1f9      	bne.n	800f496 <memcpy+0xe>
 800f4a2:	bd10      	pop	{r4, pc}

0800f4a4 <memset>:
 800f4a4:	4402      	add	r2, r0
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d100      	bne.n	800f4ae <memset+0xa>
 800f4ac:	4770      	bx	lr
 800f4ae:	f803 1b01 	strb.w	r1, [r3], #1
 800f4b2:	e7f9      	b.n	800f4a8 <memset+0x4>

0800f4b4 <_free_r>:
 800f4b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4b6:	2900      	cmp	r1, #0
 800f4b8:	d048      	beq.n	800f54c <_free_r+0x98>
 800f4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4be:	9001      	str	r0, [sp, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f1a1 0404 	sub.w	r4, r1, #4
 800f4c6:	bfb8      	it	lt
 800f4c8:	18e4      	addlt	r4, r4, r3
 800f4ca:	f000 fe89 	bl	80101e0 <__malloc_lock>
 800f4ce:	4a20      	ldr	r2, [pc, #128]	; (800f550 <_free_r+0x9c>)
 800f4d0:	9801      	ldr	r0, [sp, #4]
 800f4d2:	6813      	ldr	r3, [r2, #0]
 800f4d4:	4615      	mov	r5, r2
 800f4d6:	b933      	cbnz	r3, 800f4e6 <_free_r+0x32>
 800f4d8:	6063      	str	r3, [r4, #4]
 800f4da:	6014      	str	r4, [r2, #0]
 800f4dc:	b003      	add	sp, #12
 800f4de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4e2:	f000 be83 	b.w	80101ec <__malloc_unlock>
 800f4e6:	42a3      	cmp	r3, r4
 800f4e8:	d90b      	bls.n	800f502 <_free_r+0x4e>
 800f4ea:	6821      	ldr	r1, [r4, #0]
 800f4ec:	1862      	adds	r2, r4, r1
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	bf04      	itt	eq
 800f4f2:	681a      	ldreq	r2, [r3, #0]
 800f4f4:	685b      	ldreq	r3, [r3, #4]
 800f4f6:	6063      	str	r3, [r4, #4]
 800f4f8:	bf04      	itt	eq
 800f4fa:	1852      	addeq	r2, r2, r1
 800f4fc:	6022      	streq	r2, [r4, #0]
 800f4fe:	602c      	str	r4, [r5, #0]
 800f500:	e7ec      	b.n	800f4dc <_free_r+0x28>
 800f502:	461a      	mov	r2, r3
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	b10b      	cbz	r3, 800f50c <_free_r+0x58>
 800f508:	42a3      	cmp	r3, r4
 800f50a:	d9fa      	bls.n	800f502 <_free_r+0x4e>
 800f50c:	6811      	ldr	r1, [r2, #0]
 800f50e:	1855      	adds	r5, r2, r1
 800f510:	42a5      	cmp	r5, r4
 800f512:	d10b      	bne.n	800f52c <_free_r+0x78>
 800f514:	6824      	ldr	r4, [r4, #0]
 800f516:	4421      	add	r1, r4
 800f518:	1854      	adds	r4, r2, r1
 800f51a:	42a3      	cmp	r3, r4
 800f51c:	6011      	str	r1, [r2, #0]
 800f51e:	d1dd      	bne.n	800f4dc <_free_r+0x28>
 800f520:	681c      	ldr	r4, [r3, #0]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	6053      	str	r3, [r2, #4]
 800f526:	4421      	add	r1, r4
 800f528:	6011      	str	r1, [r2, #0]
 800f52a:	e7d7      	b.n	800f4dc <_free_r+0x28>
 800f52c:	d902      	bls.n	800f534 <_free_r+0x80>
 800f52e:	230c      	movs	r3, #12
 800f530:	6003      	str	r3, [r0, #0]
 800f532:	e7d3      	b.n	800f4dc <_free_r+0x28>
 800f534:	6825      	ldr	r5, [r4, #0]
 800f536:	1961      	adds	r1, r4, r5
 800f538:	428b      	cmp	r3, r1
 800f53a:	bf04      	itt	eq
 800f53c:	6819      	ldreq	r1, [r3, #0]
 800f53e:	685b      	ldreq	r3, [r3, #4]
 800f540:	6063      	str	r3, [r4, #4]
 800f542:	bf04      	itt	eq
 800f544:	1949      	addeq	r1, r1, r5
 800f546:	6021      	streq	r1, [r4, #0]
 800f548:	6054      	str	r4, [r2, #4]
 800f54a:	e7c7      	b.n	800f4dc <_free_r+0x28>
 800f54c:	b003      	add	sp, #12
 800f54e:	bd30      	pop	{r4, r5, pc}
 800f550:	240000b4 	.word	0x240000b4

0800f554 <_malloc_r>:
 800f554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f556:	1ccd      	adds	r5, r1, #3
 800f558:	f025 0503 	bic.w	r5, r5, #3
 800f55c:	3508      	adds	r5, #8
 800f55e:	2d0c      	cmp	r5, #12
 800f560:	bf38      	it	cc
 800f562:	250c      	movcc	r5, #12
 800f564:	2d00      	cmp	r5, #0
 800f566:	4606      	mov	r6, r0
 800f568:	db01      	blt.n	800f56e <_malloc_r+0x1a>
 800f56a:	42a9      	cmp	r1, r5
 800f56c:	d903      	bls.n	800f576 <_malloc_r+0x22>
 800f56e:	230c      	movs	r3, #12
 800f570:	6033      	str	r3, [r6, #0]
 800f572:	2000      	movs	r0, #0
 800f574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f576:	f000 fe33 	bl	80101e0 <__malloc_lock>
 800f57a:	4921      	ldr	r1, [pc, #132]	; (800f600 <_malloc_r+0xac>)
 800f57c:	680a      	ldr	r2, [r1, #0]
 800f57e:	4614      	mov	r4, r2
 800f580:	b99c      	cbnz	r4, 800f5aa <_malloc_r+0x56>
 800f582:	4f20      	ldr	r7, [pc, #128]	; (800f604 <_malloc_r+0xb0>)
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	b923      	cbnz	r3, 800f592 <_malloc_r+0x3e>
 800f588:	4621      	mov	r1, r4
 800f58a:	4630      	mov	r0, r6
 800f58c:	f000 fb32 	bl	800fbf4 <_sbrk_r>
 800f590:	6038      	str	r0, [r7, #0]
 800f592:	4629      	mov	r1, r5
 800f594:	4630      	mov	r0, r6
 800f596:	f000 fb2d 	bl	800fbf4 <_sbrk_r>
 800f59a:	1c43      	adds	r3, r0, #1
 800f59c:	d123      	bne.n	800f5e6 <_malloc_r+0x92>
 800f59e:	230c      	movs	r3, #12
 800f5a0:	6033      	str	r3, [r6, #0]
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f000 fe22 	bl	80101ec <__malloc_unlock>
 800f5a8:	e7e3      	b.n	800f572 <_malloc_r+0x1e>
 800f5aa:	6823      	ldr	r3, [r4, #0]
 800f5ac:	1b5b      	subs	r3, r3, r5
 800f5ae:	d417      	bmi.n	800f5e0 <_malloc_r+0x8c>
 800f5b0:	2b0b      	cmp	r3, #11
 800f5b2:	d903      	bls.n	800f5bc <_malloc_r+0x68>
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	441c      	add	r4, r3
 800f5b8:	6025      	str	r5, [r4, #0]
 800f5ba:	e004      	b.n	800f5c6 <_malloc_r+0x72>
 800f5bc:	6863      	ldr	r3, [r4, #4]
 800f5be:	42a2      	cmp	r2, r4
 800f5c0:	bf0c      	ite	eq
 800f5c2:	600b      	streq	r3, [r1, #0]
 800f5c4:	6053      	strne	r3, [r2, #4]
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f000 fe10 	bl	80101ec <__malloc_unlock>
 800f5cc:	f104 000b 	add.w	r0, r4, #11
 800f5d0:	1d23      	adds	r3, r4, #4
 800f5d2:	f020 0007 	bic.w	r0, r0, #7
 800f5d6:	1ac2      	subs	r2, r0, r3
 800f5d8:	d0cc      	beq.n	800f574 <_malloc_r+0x20>
 800f5da:	1a1b      	subs	r3, r3, r0
 800f5dc:	50a3      	str	r3, [r4, r2]
 800f5de:	e7c9      	b.n	800f574 <_malloc_r+0x20>
 800f5e0:	4622      	mov	r2, r4
 800f5e2:	6864      	ldr	r4, [r4, #4]
 800f5e4:	e7cc      	b.n	800f580 <_malloc_r+0x2c>
 800f5e6:	1cc4      	adds	r4, r0, #3
 800f5e8:	f024 0403 	bic.w	r4, r4, #3
 800f5ec:	42a0      	cmp	r0, r4
 800f5ee:	d0e3      	beq.n	800f5b8 <_malloc_r+0x64>
 800f5f0:	1a21      	subs	r1, r4, r0
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f000 fafe 	bl	800fbf4 <_sbrk_r>
 800f5f8:	3001      	adds	r0, #1
 800f5fa:	d1dd      	bne.n	800f5b8 <_malloc_r+0x64>
 800f5fc:	e7cf      	b.n	800f59e <_malloc_r+0x4a>
 800f5fe:	bf00      	nop
 800f600:	240000b4 	.word	0x240000b4
 800f604:	240000b8 	.word	0x240000b8

0800f608 <__sfputc_r>:
 800f608:	6893      	ldr	r3, [r2, #8]
 800f60a:	3b01      	subs	r3, #1
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	b410      	push	{r4}
 800f610:	6093      	str	r3, [r2, #8]
 800f612:	da08      	bge.n	800f626 <__sfputc_r+0x1e>
 800f614:	6994      	ldr	r4, [r2, #24]
 800f616:	42a3      	cmp	r3, r4
 800f618:	db01      	blt.n	800f61e <__sfputc_r+0x16>
 800f61a:	290a      	cmp	r1, #10
 800f61c:	d103      	bne.n	800f626 <__sfputc_r+0x1e>
 800f61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f622:	f000 baf7 	b.w	800fc14 <__swbuf_r>
 800f626:	6813      	ldr	r3, [r2, #0]
 800f628:	1c58      	adds	r0, r3, #1
 800f62a:	6010      	str	r0, [r2, #0]
 800f62c:	7019      	strb	r1, [r3, #0]
 800f62e:	4608      	mov	r0, r1
 800f630:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f634:	4770      	bx	lr

0800f636 <__sfputs_r>:
 800f636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f638:	4606      	mov	r6, r0
 800f63a:	460f      	mov	r7, r1
 800f63c:	4614      	mov	r4, r2
 800f63e:	18d5      	adds	r5, r2, r3
 800f640:	42ac      	cmp	r4, r5
 800f642:	d101      	bne.n	800f648 <__sfputs_r+0x12>
 800f644:	2000      	movs	r0, #0
 800f646:	e007      	b.n	800f658 <__sfputs_r+0x22>
 800f648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f64c:	463a      	mov	r2, r7
 800f64e:	4630      	mov	r0, r6
 800f650:	f7ff ffda 	bl	800f608 <__sfputc_r>
 800f654:	1c43      	adds	r3, r0, #1
 800f656:	d1f3      	bne.n	800f640 <__sfputs_r+0xa>
 800f658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f65c <_vfiprintf_r>:
 800f65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f660:	460d      	mov	r5, r1
 800f662:	b09d      	sub	sp, #116	; 0x74
 800f664:	4614      	mov	r4, r2
 800f666:	4698      	mov	r8, r3
 800f668:	4606      	mov	r6, r0
 800f66a:	b118      	cbz	r0, 800f674 <_vfiprintf_r+0x18>
 800f66c:	6983      	ldr	r3, [r0, #24]
 800f66e:	b90b      	cbnz	r3, 800f674 <_vfiprintf_r+0x18>
 800f670:	f000 fcb2 	bl	800ffd8 <__sinit>
 800f674:	4b89      	ldr	r3, [pc, #548]	; (800f89c <_vfiprintf_r+0x240>)
 800f676:	429d      	cmp	r5, r3
 800f678:	d11b      	bne.n	800f6b2 <_vfiprintf_r+0x56>
 800f67a:	6875      	ldr	r5, [r6, #4]
 800f67c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f67e:	07d9      	lsls	r1, r3, #31
 800f680:	d405      	bmi.n	800f68e <_vfiprintf_r+0x32>
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	059a      	lsls	r2, r3, #22
 800f686:	d402      	bmi.n	800f68e <_vfiprintf_r+0x32>
 800f688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f68a:	f000 fd43 	bl	8010114 <__retarget_lock_acquire_recursive>
 800f68e:	89ab      	ldrh	r3, [r5, #12]
 800f690:	071b      	lsls	r3, r3, #28
 800f692:	d501      	bpl.n	800f698 <_vfiprintf_r+0x3c>
 800f694:	692b      	ldr	r3, [r5, #16]
 800f696:	b9eb      	cbnz	r3, 800f6d4 <_vfiprintf_r+0x78>
 800f698:	4629      	mov	r1, r5
 800f69a:	4630      	mov	r0, r6
 800f69c:	f000 fb0c 	bl	800fcb8 <__swsetup_r>
 800f6a0:	b1c0      	cbz	r0, 800f6d4 <_vfiprintf_r+0x78>
 800f6a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6a4:	07dc      	lsls	r4, r3, #31
 800f6a6:	d50e      	bpl.n	800f6c6 <_vfiprintf_r+0x6a>
 800f6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ac:	b01d      	add	sp, #116	; 0x74
 800f6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6b2:	4b7b      	ldr	r3, [pc, #492]	; (800f8a0 <_vfiprintf_r+0x244>)
 800f6b4:	429d      	cmp	r5, r3
 800f6b6:	d101      	bne.n	800f6bc <_vfiprintf_r+0x60>
 800f6b8:	68b5      	ldr	r5, [r6, #8]
 800f6ba:	e7df      	b.n	800f67c <_vfiprintf_r+0x20>
 800f6bc:	4b79      	ldr	r3, [pc, #484]	; (800f8a4 <_vfiprintf_r+0x248>)
 800f6be:	429d      	cmp	r5, r3
 800f6c0:	bf08      	it	eq
 800f6c2:	68f5      	ldreq	r5, [r6, #12]
 800f6c4:	e7da      	b.n	800f67c <_vfiprintf_r+0x20>
 800f6c6:	89ab      	ldrh	r3, [r5, #12]
 800f6c8:	0598      	lsls	r0, r3, #22
 800f6ca:	d4ed      	bmi.n	800f6a8 <_vfiprintf_r+0x4c>
 800f6cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6ce:	f000 fd22 	bl	8010116 <__retarget_lock_release_recursive>
 800f6d2:	e7e9      	b.n	800f6a8 <_vfiprintf_r+0x4c>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d8:	2320      	movs	r3, #32
 800f6da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6de:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6e2:	2330      	movs	r3, #48	; 0x30
 800f6e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f8a8 <_vfiprintf_r+0x24c>
 800f6e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6ec:	f04f 0901 	mov.w	r9, #1
 800f6f0:	4623      	mov	r3, r4
 800f6f2:	469a      	mov	sl, r3
 800f6f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6f8:	b10a      	cbz	r2, 800f6fe <_vfiprintf_r+0xa2>
 800f6fa:	2a25      	cmp	r2, #37	; 0x25
 800f6fc:	d1f9      	bne.n	800f6f2 <_vfiprintf_r+0x96>
 800f6fe:	ebba 0b04 	subs.w	fp, sl, r4
 800f702:	d00b      	beq.n	800f71c <_vfiprintf_r+0xc0>
 800f704:	465b      	mov	r3, fp
 800f706:	4622      	mov	r2, r4
 800f708:	4629      	mov	r1, r5
 800f70a:	4630      	mov	r0, r6
 800f70c:	f7ff ff93 	bl	800f636 <__sfputs_r>
 800f710:	3001      	adds	r0, #1
 800f712:	f000 80aa 	beq.w	800f86a <_vfiprintf_r+0x20e>
 800f716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f718:	445a      	add	r2, fp
 800f71a:	9209      	str	r2, [sp, #36]	; 0x24
 800f71c:	f89a 3000 	ldrb.w	r3, [sl]
 800f720:	2b00      	cmp	r3, #0
 800f722:	f000 80a2 	beq.w	800f86a <_vfiprintf_r+0x20e>
 800f726:	2300      	movs	r3, #0
 800f728:	f04f 32ff 	mov.w	r2, #4294967295
 800f72c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f730:	f10a 0a01 	add.w	sl, sl, #1
 800f734:	9304      	str	r3, [sp, #16]
 800f736:	9307      	str	r3, [sp, #28]
 800f738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f73c:	931a      	str	r3, [sp, #104]	; 0x68
 800f73e:	4654      	mov	r4, sl
 800f740:	2205      	movs	r2, #5
 800f742:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f746:	4858      	ldr	r0, [pc, #352]	; (800f8a8 <_vfiprintf_r+0x24c>)
 800f748:	f7f0 fdca 	bl	80002e0 <memchr>
 800f74c:	9a04      	ldr	r2, [sp, #16]
 800f74e:	b9d8      	cbnz	r0, 800f788 <_vfiprintf_r+0x12c>
 800f750:	06d1      	lsls	r1, r2, #27
 800f752:	bf44      	itt	mi
 800f754:	2320      	movmi	r3, #32
 800f756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f75a:	0713      	lsls	r3, r2, #28
 800f75c:	bf44      	itt	mi
 800f75e:	232b      	movmi	r3, #43	; 0x2b
 800f760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f764:	f89a 3000 	ldrb.w	r3, [sl]
 800f768:	2b2a      	cmp	r3, #42	; 0x2a
 800f76a:	d015      	beq.n	800f798 <_vfiprintf_r+0x13c>
 800f76c:	9a07      	ldr	r2, [sp, #28]
 800f76e:	4654      	mov	r4, sl
 800f770:	2000      	movs	r0, #0
 800f772:	f04f 0c0a 	mov.w	ip, #10
 800f776:	4621      	mov	r1, r4
 800f778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f77c:	3b30      	subs	r3, #48	; 0x30
 800f77e:	2b09      	cmp	r3, #9
 800f780:	d94e      	bls.n	800f820 <_vfiprintf_r+0x1c4>
 800f782:	b1b0      	cbz	r0, 800f7b2 <_vfiprintf_r+0x156>
 800f784:	9207      	str	r2, [sp, #28]
 800f786:	e014      	b.n	800f7b2 <_vfiprintf_r+0x156>
 800f788:	eba0 0308 	sub.w	r3, r0, r8
 800f78c:	fa09 f303 	lsl.w	r3, r9, r3
 800f790:	4313      	orrs	r3, r2
 800f792:	9304      	str	r3, [sp, #16]
 800f794:	46a2      	mov	sl, r4
 800f796:	e7d2      	b.n	800f73e <_vfiprintf_r+0xe2>
 800f798:	9b03      	ldr	r3, [sp, #12]
 800f79a:	1d19      	adds	r1, r3, #4
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	9103      	str	r1, [sp, #12]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	bfbb      	ittet	lt
 800f7a4:	425b      	neglt	r3, r3
 800f7a6:	f042 0202 	orrlt.w	r2, r2, #2
 800f7aa:	9307      	strge	r3, [sp, #28]
 800f7ac:	9307      	strlt	r3, [sp, #28]
 800f7ae:	bfb8      	it	lt
 800f7b0:	9204      	strlt	r2, [sp, #16]
 800f7b2:	7823      	ldrb	r3, [r4, #0]
 800f7b4:	2b2e      	cmp	r3, #46	; 0x2e
 800f7b6:	d10c      	bne.n	800f7d2 <_vfiprintf_r+0x176>
 800f7b8:	7863      	ldrb	r3, [r4, #1]
 800f7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800f7bc:	d135      	bne.n	800f82a <_vfiprintf_r+0x1ce>
 800f7be:	9b03      	ldr	r3, [sp, #12]
 800f7c0:	1d1a      	adds	r2, r3, #4
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	9203      	str	r2, [sp, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	bfb8      	it	lt
 800f7ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7ce:	3402      	adds	r4, #2
 800f7d0:	9305      	str	r3, [sp, #20]
 800f7d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f8b8 <_vfiprintf_r+0x25c>
 800f7d6:	7821      	ldrb	r1, [r4, #0]
 800f7d8:	2203      	movs	r2, #3
 800f7da:	4650      	mov	r0, sl
 800f7dc:	f7f0 fd80 	bl	80002e0 <memchr>
 800f7e0:	b140      	cbz	r0, 800f7f4 <_vfiprintf_r+0x198>
 800f7e2:	2340      	movs	r3, #64	; 0x40
 800f7e4:	eba0 000a 	sub.w	r0, r0, sl
 800f7e8:	fa03 f000 	lsl.w	r0, r3, r0
 800f7ec:	9b04      	ldr	r3, [sp, #16]
 800f7ee:	4303      	orrs	r3, r0
 800f7f0:	3401      	adds	r4, #1
 800f7f2:	9304      	str	r3, [sp, #16]
 800f7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7f8:	482c      	ldr	r0, [pc, #176]	; (800f8ac <_vfiprintf_r+0x250>)
 800f7fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7fe:	2206      	movs	r2, #6
 800f800:	f7f0 fd6e 	bl	80002e0 <memchr>
 800f804:	2800      	cmp	r0, #0
 800f806:	d03f      	beq.n	800f888 <_vfiprintf_r+0x22c>
 800f808:	4b29      	ldr	r3, [pc, #164]	; (800f8b0 <_vfiprintf_r+0x254>)
 800f80a:	bb1b      	cbnz	r3, 800f854 <_vfiprintf_r+0x1f8>
 800f80c:	9b03      	ldr	r3, [sp, #12]
 800f80e:	3307      	adds	r3, #7
 800f810:	f023 0307 	bic.w	r3, r3, #7
 800f814:	3308      	adds	r3, #8
 800f816:	9303      	str	r3, [sp, #12]
 800f818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f81a:	443b      	add	r3, r7
 800f81c:	9309      	str	r3, [sp, #36]	; 0x24
 800f81e:	e767      	b.n	800f6f0 <_vfiprintf_r+0x94>
 800f820:	fb0c 3202 	mla	r2, ip, r2, r3
 800f824:	460c      	mov	r4, r1
 800f826:	2001      	movs	r0, #1
 800f828:	e7a5      	b.n	800f776 <_vfiprintf_r+0x11a>
 800f82a:	2300      	movs	r3, #0
 800f82c:	3401      	adds	r4, #1
 800f82e:	9305      	str	r3, [sp, #20]
 800f830:	4619      	mov	r1, r3
 800f832:	f04f 0c0a 	mov.w	ip, #10
 800f836:	4620      	mov	r0, r4
 800f838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f83c:	3a30      	subs	r2, #48	; 0x30
 800f83e:	2a09      	cmp	r2, #9
 800f840:	d903      	bls.n	800f84a <_vfiprintf_r+0x1ee>
 800f842:	2b00      	cmp	r3, #0
 800f844:	d0c5      	beq.n	800f7d2 <_vfiprintf_r+0x176>
 800f846:	9105      	str	r1, [sp, #20]
 800f848:	e7c3      	b.n	800f7d2 <_vfiprintf_r+0x176>
 800f84a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f84e:	4604      	mov	r4, r0
 800f850:	2301      	movs	r3, #1
 800f852:	e7f0      	b.n	800f836 <_vfiprintf_r+0x1da>
 800f854:	ab03      	add	r3, sp, #12
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	462a      	mov	r2, r5
 800f85a:	4b16      	ldr	r3, [pc, #88]	; (800f8b4 <_vfiprintf_r+0x258>)
 800f85c:	a904      	add	r1, sp, #16
 800f85e:	4630      	mov	r0, r6
 800f860:	f3af 8000 	nop.w
 800f864:	4607      	mov	r7, r0
 800f866:	1c78      	adds	r0, r7, #1
 800f868:	d1d6      	bne.n	800f818 <_vfiprintf_r+0x1bc>
 800f86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f86c:	07d9      	lsls	r1, r3, #31
 800f86e:	d405      	bmi.n	800f87c <_vfiprintf_r+0x220>
 800f870:	89ab      	ldrh	r3, [r5, #12]
 800f872:	059a      	lsls	r2, r3, #22
 800f874:	d402      	bmi.n	800f87c <_vfiprintf_r+0x220>
 800f876:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f878:	f000 fc4d 	bl	8010116 <__retarget_lock_release_recursive>
 800f87c:	89ab      	ldrh	r3, [r5, #12]
 800f87e:	065b      	lsls	r3, r3, #25
 800f880:	f53f af12 	bmi.w	800f6a8 <_vfiprintf_r+0x4c>
 800f884:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f886:	e711      	b.n	800f6ac <_vfiprintf_r+0x50>
 800f888:	ab03      	add	r3, sp, #12
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	462a      	mov	r2, r5
 800f88e:	4b09      	ldr	r3, [pc, #36]	; (800f8b4 <_vfiprintf_r+0x258>)
 800f890:	a904      	add	r1, sp, #16
 800f892:	4630      	mov	r0, r6
 800f894:	f000 f880 	bl	800f998 <_printf_i>
 800f898:	e7e4      	b.n	800f864 <_vfiprintf_r+0x208>
 800f89a:	bf00      	nop
 800f89c:	08011484 	.word	0x08011484
 800f8a0:	080114a4 	.word	0x080114a4
 800f8a4:	08011464 	.word	0x08011464
 800f8a8:	08011430 	.word	0x08011430
 800f8ac:	0801143a 	.word	0x0801143a
 800f8b0:	00000000 	.word	0x00000000
 800f8b4:	0800f637 	.word	0x0800f637
 800f8b8:	08011436 	.word	0x08011436

0800f8bc <_printf_common>:
 800f8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	4616      	mov	r6, r2
 800f8c2:	4699      	mov	r9, r3
 800f8c4:	688a      	ldr	r2, [r1, #8]
 800f8c6:	690b      	ldr	r3, [r1, #16]
 800f8c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	bfb8      	it	lt
 800f8d0:	4613      	movlt	r3, r2
 800f8d2:	6033      	str	r3, [r6, #0]
 800f8d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8d8:	4607      	mov	r7, r0
 800f8da:	460c      	mov	r4, r1
 800f8dc:	b10a      	cbz	r2, 800f8e2 <_printf_common+0x26>
 800f8de:	3301      	adds	r3, #1
 800f8e0:	6033      	str	r3, [r6, #0]
 800f8e2:	6823      	ldr	r3, [r4, #0]
 800f8e4:	0699      	lsls	r1, r3, #26
 800f8e6:	bf42      	ittt	mi
 800f8e8:	6833      	ldrmi	r3, [r6, #0]
 800f8ea:	3302      	addmi	r3, #2
 800f8ec:	6033      	strmi	r3, [r6, #0]
 800f8ee:	6825      	ldr	r5, [r4, #0]
 800f8f0:	f015 0506 	ands.w	r5, r5, #6
 800f8f4:	d106      	bne.n	800f904 <_printf_common+0x48>
 800f8f6:	f104 0a19 	add.w	sl, r4, #25
 800f8fa:	68e3      	ldr	r3, [r4, #12]
 800f8fc:	6832      	ldr	r2, [r6, #0]
 800f8fe:	1a9b      	subs	r3, r3, r2
 800f900:	42ab      	cmp	r3, r5
 800f902:	dc26      	bgt.n	800f952 <_printf_common+0x96>
 800f904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f908:	1e13      	subs	r3, r2, #0
 800f90a:	6822      	ldr	r2, [r4, #0]
 800f90c:	bf18      	it	ne
 800f90e:	2301      	movne	r3, #1
 800f910:	0692      	lsls	r2, r2, #26
 800f912:	d42b      	bmi.n	800f96c <_printf_common+0xb0>
 800f914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f918:	4649      	mov	r1, r9
 800f91a:	4638      	mov	r0, r7
 800f91c:	47c0      	blx	r8
 800f91e:	3001      	adds	r0, #1
 800f920:	d01e      	beq.n	800f960 <_printf_common+0xa4>
 800f922:	6823      	ldr	r3, [r4, #0]
 800f924:	68e5      	ldr	r5, [r4, #12]
 800f926:	6832      	ldr	r2, [r6, #0]
 800f928:	f003 0306 	and.w	r3, r3, #6
 800f92c:	2b04      	cmp	r3, #4
 800f92e:	bf08      	it	eq
 800f930:	1aad      	subeq	r5, r5, r2
 800f932:	68a3      	ldr	r3, [r4, #8]
 800f934:	6922      	ldr	r2, [r4, #16]
 800f936:	bf0c      	ite	eq
 800f938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f93c:	2500      	movne	r5, #0
 800f93e:	4293      	cmp	r3, r2
 800f940:	bfc4      	itt	gt
 800f942:	1a9b      	subgt	r3, r3, r2
 800f944:	18ed      	addgt	r5, r5, r3
 800f946:	2600      	movs	r6, #0
 800f948:	341a      	adds	r4, #26
 800f94a:	42b5      	cmp	r5, r6
 800f94c:	d11a      	bne.n	800f984 <_printf_common+0xc8>
 800f94e:	2000      	movs	r0, #0
 800f950:	e008      	b.n	800f964 <_printf_common+0xa8>
 800f952:	2301      	movs	r3, #1
 800f954:	4652      	mov	r2, sl
 800f956:	4649      	mov	r1, r9
 800f958:	4638      	mov	r0, r7
 800f95a:	47c0      	blx	r8
 800f95c:	3001      	adds	r0, #1
 800f95e:	d103      	bne.n	800f968 <_printf_common+0xac>
 800f960:	f04f 30ff 	mov.w	r0, #4294967295
 800f964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f968:	3501      	adds	r5, #1
 800f96a:	e7c6      	b.n	800f8fa <_printf_common+0x3e>
 800f96c:	18e1      	adds	r1, r4, r3
 800f96e:	1c5a      	adds	r2, r3, #1
 800f970:	2030      	movs	r0, #48	; 0x30
 800f972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f976:	4422      	add	r2, r4
 800f978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f97c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f980:	3302      	adds	r3, #2
 800f982:	e7c7      	b.n	800f914 <_printf_common+0x58>
 800f984:	2301      	movs	r3, #1
 800f986:	4622      	mov	r2, r4
 800f988:	4649      	mov	r1, r9
 800f98a:	4638      	mov	r0, r7
 800f98c:	47c0      	blx	r8
 800f98e:	3001      	adds	r0, #1
 800f990:	d0e6      	beq.n	800f960 <_printf_common+0xa4>
 800f992:	3601      	adds	r6, #1
 800f994:	e7d9      	b.n	800f94a <_printf_common+0x8e>
	...

0800f998 <_printf_i>:
 800f998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	460c      	mov	r4, r1
 800f99e:	4691      	mov	r9, r2
 800f9a0:	7e27      	ldrb	r7, [r4, #24]
 800f9a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f9a4:	2f78      	cmp	r7, #120	; 0x78
 800f9a6:	4680      	mov	r8, r0
 800f9a8:	469a      	mov	sl, r3
 800f9aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9ae:	d807      	bhi.n	800f9c0 <_printf_i+0x28>
 800f9b0:	2f62      	cmp	r7, #98	; 0x62
 800f9b2:	d80a      	bhi.n	800f9ca <_printf_i+0x32>
 800f9b4:	2f00      	cmp	r7, #0
 800f9b6:	f000 80d8 	beq.w	800fb6a <_printf_i+0x1d2>
 800f9ba:	2f58      	cmp	r7, #88	; 0x58
 800f9bc:	f000 80a3 	beq.w	800fb06 <_printf_i+0x16e>
 800f9c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f9c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9c8:	e03a      	b.n	800fa40 <_printf_i+0xa8>
 800f9ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9ce:	2b15      	cmp	r3, #21
 800f9d0:	d8f6      	bhi.n	800f9c0 <_printf_i+0x28>
 800f9d2:	a001      	add	r0, pc, #4	; (adr r0, 800f9d8 <_printf_i+0x40>)
 800f9d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f9d8:	0800fa31 	.word	0x0800fa31
 800f9dc:	0800fa45 	.word	0x0800fa45
 800f9e0:	0800f9c1 	.word	0x0800f9c1
 800f9e4:	0800f9c1 	.word	0x0800f9c1
 800f9e8:	0800f9c1 	.word	0x0800f9c1
 800f9ec:	0800f9c1 	.word	0x0800f9c1
 800f9f0:	0800fa45 	.word	0x0800fa45
 800f9f4:	0800f9c1 	.word	0x0800f9c1
 800f9f8:	0800f9c1 	.word	0x0800f9c1
 800f9fc:	0800f9c1 	.word	0x0800f9c1
 800fa00:	0800f9c1 	.word	0x0800f9c1
 800fa04:	0800fb51 	.word	0x0800fb51
 800fa08:	0800fa75 	.word	0x0800fa75
 800fa0c:	0800fb33 	.word	0x0800fb33
 800fa10:	0800f9c1 	.word	0x0800f9c1
 800fa14:	0800f9c1 	.word	0x0800f9c1
 800fa18:	0800fb73 	.word	0x0800fb73
 800fa1c:	0800f9c1 	.word	0x0800f9c1
 800fa20:	0800fa75 	.word	0x0800fa75
 800fa24:	0800f9c1 	.word	0x0800f9c1
 800fa28:	0800f9c1 	.word	0x0800f9c1
 800fa2c:	0800fb3b 	.word	0x0800fb3b
 800fa30:	680b      	ldr	r3, [r1, #0]
 800fa32:	1d1a      	adds	r2, r3, #4
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	600a      	str	r2, [r1, #0]
 800fa38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fa3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa40:	2301      	movs	r3, #1
 800fa42:	e0a3      	b.n	800fb8c <_printf_i+0x1f4>
 800fa44:	6825      	ldr	r5, [r4, #0]
 800fa46:	6808      	ldr	r0, [r1, #0]
 800fa48:	062e      	lsls	r6, r5, #24
 800fa4a:	f100 0304 	add.w	r3, r0, #4
 800fa4e:	d50a      	bpl.n	800fa66 <_printf_i+0xce>
 800fa50:	6805      	ldr	r5, [r0, #0]
 800fa52:	600b      	str	r3, [r1, #0]
 800fa54:	2d00      	cmp	r5, #0
 800fa56:	da03      	bge.n	800fa60 <_printf_i+0xc8>
 800fa58:	232d      	movs	r3, #45	; 0x2d
 800fa5a:	426d      	negs	r5, r5
 800fa5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa60:	485e      	ldr	r0, [pc, #376]	; (800fbdc <_printf_i+0x244>)
 800fa62:	230a      	movs	r3, #10
 800fa64:	e019      	b.n	800fa9a <_printf_i+0x102>
 800fa66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fa6a:	6805      	ldr	r5, [r0, #0]
 800fa6c:	600b      	str	r3, [r1, #0]
 800fa6e:	bf18      	it	ne
 800fa70:	b22d      	sxthne	r5, r5
 800fa72:	e7ef      	b.n	800fa54 <_printf_i+0xbc>
 800fa74:	680b      	ldr	r3, [r1, #0]
 800fa76:	6825      	ldr	r5, [r4, #0]
 800fa78:	1d18      	adds	r0, r3, #4
 800fa7a:	6008      	str	r0, [r1, #0]
 800fa7c:	0628      	lsls	r0, r5, #24
 800fa7e:	d501      	bpl.n	800fa84 <_printf_i+0xec>
 800fa80:	681d      	ldr	r5, [r3, #0]
 800fa82:	e002      	b.n	800fa8a <_printf_i+0xf2>
 800fa84:	0669      	lsls	r1, r5, #25
 800fa86:	d5fb      	bpl.n	800fa80 <_printf_i+0xe8>
 800fa88:	881d      	ldrh	r5, [r3, #0]
 800fa8a:	4854      	ldr	r0, [pc, #336]	; (800fbdc <_printf_i+0x244>)
 800fa8c:	2f6f      	cmp	r7, #111	; 0x6f
 800fa8e:	bf0c      	ite	eq
 800fa90:	2308      	moveq	r3, #8
 800fa92:	230a      	movne	r3, #10
 800fa94:	2100      	movs	r1, #0
 800fa96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa9a:	6866      	ldr	r6, [r4, #4]
 800fa9c:	60a6      	str	r6, [r4, #8]
 800fa9e:	2e00      	cmp	r6, #0
 800faa0:	bfa2      	ittt	ge
 800faa2:	6821      	ldrge	r1, [r4, #0]
 800faa4:	f021 0104 	bicge.w	r1, r1, #4
 800faa8:	6021      	strge	r1, [r4, #0]
 800faaa:	b90d      	cbnz	r5, 800fab0 <_printf_i+0x118>
 800faac:	2e00      	cmp	r6, #0
 800faae:	d04d      	beq.n	800fb4c <_printf_i+0x1b4>
 800fab0:	4616      	mov	r6, r2
 800fab2:	fbb5 f1f3 	udiv	r1, r5, r3
 800fab6:	fb03 5711 	mls	r7, r3, r1, r5
 800faba:	5dc7      	ldrb	r7, [r0, r7]
 800fabc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fac0:	462f      	mov	r7, r5
 800fac2:	42bb      	cmp	r3, r7
 800fac4:	460d      	mov	r5, r1
 800fac6:	d9f4      	bls.n	800fab2 <_printf_i+0x11a>
 800fac8:	2b08      	cmp	r3, #8
 800faca:	d10b      	bne.n	800fae4 <_printf_i+0x14c>
 800facc:	6823      	ldr	r3, [r4, #0]
 800face:	07df      	lsls	r7, r3, #31
 800fad0:	d508      	bpl.n	800fae4 <_printf_i+0x14c>
 800fad2:	6923      	ldr	r3, [r4, #16]
 800fad4:	6861      	ldr	r1, [r4, #4]
 800fad6:	4299      	cmp	r1, r3
 800fad8:	bfde      	ittt	le
 800fada:	2330      	movle	r3, #48	; 0x30
 800fadc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fae4:	1b92      	subs	r2, r2, r6
 800fae6:	6122      	str	r2, [r4, #16]
 800fae8:	f8cd a000 	str.w	sl, [sp]
 800faec:	464b      	mov	r3, r9
 800faee:	aa03      	add	r2, sp, #12
 800faf0:	4621      	mov	r1, r4
 800faf2:	4640      	mov	r0, r8
 800faf4:	f7ff fee2 	bl	800f8bc <_printf_common>
 800faf8:	3001      	adds	r0, #1
 800fafa:	d14c      	bne.n	800fb96 <_printf_i+0x1fe>
 800fafc:	f04f 30ff 	mov.w	r0, #4294967295
 800fb00:	b004      	add	sp, #16
 800fb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb06:	4835      	ldr	r0, [pc, #212]	; (800fbdc <_printf_i+0x244>)
 800fb08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fb0c:	6823      	ldr	r3, [r4, #0]
 800fb0e:	680e      	ldr	r6, [r1, #0]
 800fb10:	061f      	lsls	r7, r3, #24
 800fb12:	f856 5b04 	ldr.w	r5, [r6], #4
 800fb16:	600e      	str	r6, [r1, #0]
 800fb18:	d514      	bpl.n	800fb44 <_printf_i+0x1ac>
 800fb1a:	07d9      	lsls	r1, r3, #31
 800fb1c:	bf44      	itt	mi
 800fb1e:	f043 0320 	orrmi.w	r3, r3, #32
 800fb22:	6023      	strmi	r3, [r4, #0]
 800fb24:	b91d      	cbnz	r5, 800fb2e <_printf_i+0x196>
 800fb26:	6823      	ldr	r3, [r4, #0]
 800fb28:	f023 0320 	bic.w	r3, r3, #32
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	2310      	movs	r3, #16
 800fb30:	e7b0      	b.n	800fa94 <_printf_i+0xfc>
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	f043 0320 	orr.w	r3, r3, #32
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	2378      	movs	r3, #120	; 0x78
 800fb3c:	4828      	ldr	r0, [pc, #160]	; (800fbe0 <_printf_i+0x248>)
 800fb3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb42:	e7e3      	b.n	800fb0c <_printf_i+0x174>
 800fb44:	065e      	lsls	r6, r3, #25
 800fb46:	bf48      	it	mi
 800fb48:	b2ad      	uxthmi	r5, r5
 800fb4a:	e7e6      	b.n	800fb1a <_printf_i+0x182>
 800fb4c:	4616      	mov	r6, r2
 800fb4e:	e7bb      	b.n	800fac8 <_printf_i+0x130>
 800fb50:	680b      	ldr	r3, [r1, #0]
 800fb52:	6826      	ldr	r6, [r4, #0]
 800fb54:	6960      	ldr	r0, [r4, #20]
 800fb56:	1d1d      	adds	r5, r3, #4
 800fb58:	600d      	str	r5, [r1, #0]
 800fb5a:	0635      	lsls	r5, r6, #24
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	d501      	bpl.n	800fb64 <_printf_i+0x1cc>
 800fb60:	6018      	str	r0, [r3, #0]
 800fb62:	e002      	b.n	800fb6a <_printf_i+0x1d2>
 800fb64:	0671      	lsls	r1, r6, #25
 800fb66:	d5fb      	bpl.n	800fb60 <_printf_i+0x1c8>
 800fb68:	8018      	strh	r0, [r3, #0]
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	6123      	str	r3, [r4, #16]
 800fb6e:	4616      	mov	r6, r2
 800fb70:	e7ba      	b.n	800fae8 <_printf_i+0x150>
 800fb72:	680b      	ldr	r3, [r1, #0]
 800fb74:	1d1a      	adds	r2, r3, #4
 800fb76:	600a      	str	r2, [r1, #0]
 800fb78:	681e      	ldr	r6, [r3, #0]
 800fb7a:	6862      	ldr	r2, [r4, #4]
 800fb7c:	2100      	movs	r1, #0
 800fb7e:	4630      	mov	r0, r6
 800fb80:	f7f0 fbae 	bl	80002e0 <memchr>
 800fb84:	b108      	cbz	r0, 800fb8a <_printf_i+0x1f2>
 800fb86:	1b80      	subs	r0, r0, r6
 800fb88:	6060      	str	r0, [r4, #4]
 800fb8a:	6863      	ldr	r3, [r4, #4]
 800fb8c:	6123      	str	r3, [r4, #16]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb94:	e7a8      	b.n	800fae8 <_printf_i+0x150>
 800fb96:	6923      	ldr	r3, [r4, #16]
 800fb98:	4632      	mov	r2, r6
 800fb9a:	4649      	mov	r1, r9
 800fb9c:	4640      	mov	r0, r8
 800fb9e:	47d0      	blx	sl
 800fba0:	3001      	adds	r0, #1
 800fba2:	d0ab      	beq.n	800fafc <_printf_i+0x164>
 800fba4:	6823      	ldr	r3, [r4, #0]
 800fba6:	079b      	lsls	r3, r3, #30
 800fba8:	d413      	bmi.n	800fbd2 <_printf_i+0x23a>
 800fbaa:	68e0      	ldr	r0, [r4, #12]
 800fbac:	9b03      	ldr	r3, [sp, #12]
 800fbae:	4298      	cmp	r0, r3
 800fbb0:	bfb8      	it	lt
 800fbb2:	4618      	movlt	r0, r3
 800fbb4:	e7a4      	b.n	800fb00 <_printf_i+0x168>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	4632      	mov	r2, r6
 800fbba:	4649      	mov	r1, r9
 800fbbc:	4640      	mov	r0, r8
 800fbbe:	47d0      	blx	sl
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	d09b      	beq.n	800fafc <_printf_i+0x164>
 800fbc4:	3501      	adds	r5, #1
 800fbc6:	68e3      	ldr	r3, [r4, #12]
 800fbc8:	9903      	ldr	r1, [sp, #12]
 800fbca:	1a5b      	subs	r3, r3, r1
 800fbcc:	42ab      	cmp	r3, r5
 800fbce:	dcf2      	bgt.n	800fbb6 <_printf_i+0x21e>
 800fbd0:	e7eb      	b.n	800fbaa <_printf_i+0x212>
 800fbd2:	2500      	movs	r5, #0
 800fbd4:	f104 0619 	add.w	r6, r4, #25
 800fbd8:	e7f5      	b.n	800fbc6 <_printf_i+0x22e>
 800fbda:	bf00      	nop
 800fbdc:	08011441 	.word	0x08011441
 800fbe0:	08011452 	.word	0x08011452

0800fbe4 <realloc>:
 800fbe4:	4b02      	ldr	r3, [pc, #8]	; (800fbf0 <realloc+0xc>)
 800fbe6:	460a      	mov	r2, r1
 800fbe8:	4601      	mov	r1, r0
 800fbea:	6818      	ldr	r0, [r3, #0]
 800fbec:	f000 bb04 	b.w	80101f8 <_realloc_r>
 800fbf0:	24000010 	.word	0x24000010

0800fbf4 <_sbrk_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d06      	ldr	r5, [pc, #24]	; (800fc10 <_sbrk_r+0x1c>)
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	4608      	mov	r0, r1
 800fbfe:	602b      	str	r3, [r5, #0]
 800fc00:	f7f1 f9e8 	bl	8000fd4 <_sbrk>
 800fc04:	1c43      	adds	r3, r0, #1
 800fc06:	d102      	bne.n	800fc0e <_sbrk_r+0x1a>
 800fc08:	682b      	ldr	r3, [r5, #0]
 800fc0a:	b103      	cbz	r3, 800fc0e <_sbrk_r+0x1a>
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	bd38      	pop	{r3, r4, r5, pc}
 800fc10:	2400d6e0 	.word	0x2400d6e0

0800fc14 <__swbuf_r>:
 800fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc16:	460e      	mov	r6, r1
 800fc18:	4614      	mov	r4, r2
 800fc1a:	4605      	mov	r5, r0
 800fc1c:	b118      	cbz	r0, 800fc26 <__swbuf_r+0x12>
 800fc1e:	6983      	ldr	r3, [r0, #24]
 800fc20:	b90b      	cbnz	r3, 800fc26 <__swbuf_r+0x12>
 800fc22:	f000 f9d9 	bl	800ffd8 <__sinit>
 800fc26:	4b21      	ldr	r3, [pc, #132]	; (800fcac <__swbuf_r+0x98>)
 800fc28:	429c      	cmp	r4, r3
 800fc2a:	d12b      	bne.n	800fc84 <__swbuf_r+0x70>
 800fc2c:	686c      	ldr	r4, [r5, #4]
 800fc2e:	69a3      	ldr	r3, [r4, #24]
 800fc30:	60a3      	str	r3, [r4, #8]
 800fc32:	89a3      	ldrh	r3, [r4, #12]
 800fc34:	071a      	lsls	r2, r3, #28
 800fc36:	d52f      	bpl.n	800fc98 <__swbuf_r+0x84>
 800fc38:	6923      	ldr	r3, [r4, #16]
 800fc3a:	b36b      	cbz	r3, 800fc98 <__swbuf_r+0x84>
 800fc3c:	6923      	ldr	r3, [r4, #16]
 800fc3e:	6820      	ldr	r0, [r4, #0]
 800fc40:	1ac0      	subs	r0, r0, r3
 800fc42:	6963      	ldr	r3, [r4, #20]
 800fc44:	b2f6      	uxtb	r6, r6
 800fc46:	4283      	cmp	r3, r0
 800fc48:	4637      	mov	r7, r6
 800fc4a:	dc04      	bgt.n	800fc56 <__swbuf_r+0x42>
 800fc4c:	4621      	mov	r1, r4
 800fc4e:	4628      	mov	r0, r5
 800fc50:	f000 f92e 	bl	800feb0 <_fflush_r>
 800fc54:	bb30      	cbnz	r0, 800fca4 <__swbuf_r+0x90>
 800fc56:	68a3      	ldr	r3, [r4, #8]
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	60a3      	str	r3, [r4, #8]
 800fc5c:	6823      	ldr	r3, [r4, #0]
 800fc5e:	1c5a      	adds	r2, r3, #1
 800fc60:	6022      	str	r2, [r4, #0]
 800fc62:	701e      	strb	r6, [r3, #0]
 800fc64:	6963      	ldr	r3, [r4, #20]
 800fc66:	3001      	adds	r0, #1
 800fc68:	4283      	cmp	r3, r0
 800fc6a:	d004      	beq.n	800fc76 <__swbuf_r+0x62>
 800fc6c:	89a3      	ldrh	r3, [r4, #12]
 800fc6e:	07db      	lsls	r3, r3, #31
 800fc70:	d506      	bpl.n	800fc80 <__swbuf_r+0x6c>
 800fc72:	2e0a      	cmp	r6, #10
 800fc74:	d104      	bne.n	800fc80 <__swbuf_r+0x6c>
 800fc76:	4621      	mov	r1, r4
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f000 f919 	bl	800feb0 <_fflush_r>
 800fc7e:	b988      	cbnz	r0, 800fca4 <__swbuf_r+0x90>
 800fc80:	4638      	mov	r0, r7
 800fc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc84:	4b0a      	ldr	r3, [pc, #40]	; (800fcb0 <__swbuf_r+0x9c>)
 800fc86:	429c      	cmp	r4, r3
 800fc88:	d101      	bne.n	800fc8e <__swbuf_r+0x7a>
 800fc8a:	68ac      	ldr	r4, [r5, #8]
 800fc8c:	e7cf      	b.n	800fc2e <__swbuf_r+0x1a>
 800fc8e:	4b09      	ldr	r3, [pc, #36]	; (800fcb4 <__swbuf_r+0xa0>)
 800fc90:	429c      	cmp	r4, r3
 800fc92:	bf08      	it	eq
 800fc94:	68ec      	ldreq	r4, [r5, #12]
 800fc96:	e7ca      	b.n	800fc2e <__swbuf_r+0x1a>
 800fc98:	4621      	mov	r1, r4
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	f000 f80c 	bl	800fcb8 <__swsetup_r>
 800fca0:	2800      	cmp	r0, #0
 800fca2:	d0cb      	beq.n	800fc3c <__swbuf_r+0x28>
 800fca4:	f04f 37ff 	mov.w	r7, #4294967295
 800fca8:	e7ea      	b.n	800fc80 <__swbuf_r+0x6c>
 800fcaa:	bf00      	nop
 800fcac:	08011484 	.word	0x08011484
 800fcb0:	080114a4 	.word	0x080114a4
 800fcb4:	08011464 	.word	0x08011464

0800fcb8 <__swsetup_r>:
 800fcb8:	4b32      	ldr	r3, [pc, #200]	; (800fd84 <__swsetup_r+0xcc>)
 800fcba:	b570      	push	{r4, r5, r6, lr}
 800fcbc:	681d      	ldr	r5, [r3, #0]
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	460c      	mov	r4, r1
 800fcc2:	b125      	cbz	r5, 800fcce <__swsetup_r+0x16>
 800fcc4:	69ab      	ldr	r3, [r5, #24]
 800fcc6:	b913      	cbnz	r3, 800fcce <__swsetup_r+0x16>
 800fcc8:	4628      	mov	r0, r5
 800fcca:	f000 f985 	bl	800ffd8 <__sinit>
 800fcce:	4b2e      	ldr	r3, [pc, #184]	; (800fd88 <__swsetup_r+0xd0>)
 800fcd0:	429c      	cmp	r4, r3
 800fcd2:	d10f      	bne.n	800fcf4 <__swsetup_r+0x3c>
 800fcd4:	686c      	ldr	r4, [r5, #4]
 800fcd6:	89a3      	ldrh	r3, [r4, #12]
 800fcd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fcdc:	0719      	lsls	r1, r3, #28
 800fcde:	d42c      	bmi.n	800fd3a <__swsetup_r+0x82>
 800fce0:	06dd      	lsls	r5, r3, #27
 800fce2:	d411      	bmi.n	800fd08 <__swsetup_r+0x50>
 800fce4:	2309      	movs	r3, #9
 800fce6:	6033      	str	r3, [r6, #0]
 800fce8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fcec:	81a3      	strh	r3, [r4, #12]
 800fcee:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf2:	e03e      	b.n	800fd72 <__swsetup_r+0xba>
 800fcf4:	4b25      	ldr	r3, [pc, #148]	; (800fd8c <__swsetup_r+0xd4>)
 800fcf6:	429c      	cmp	r4, r3
 800fcf8:	d101      	bne.n	800fcfe <__swsetup_r+0x46>
 800fcfa:	68ac      	ldr	r4, [r5, #8]
 800fcfc:	e7eb      	b.n	800fcd6 <__swsetup_r+0x1e>
 800fcfe:	4b24      	ldr	r3, [pc, #144]	; (800fd90 <__swsetup_r+0xd8>)
 800fd00:	429c      	cmp	r4, r3
 800fd02:	bf08      	it	eq
 800fd04:	68ec      	ldreq	r4, [r5, #12]
 800fd06:	e7e6      	b.n	800fcd6 <__swsetup_r+0x1e>
 800fd08:	0758      	lsls	r0, r3, #29
 800fd0a:	d512      	bpl.n	800fd32 <__swsetup_r+0x7a>
 800fd0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd0e:	b141      	cbz	r1, 800fd22 <__swsetup_r+0x6a>
 800fd10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd14:	4299      	cmp	r1, r3
 800fd16:	d002      	beq.n	800fd1e <__swsetup_r+0x66>
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f7ff fbcb 	bl	800f4b4 <_free_r>
 800fd1e:	2300      	movs	r3, #0
 800fd20:	6363      	str	r3, [r4, #52]	; 0x34
 800fd22:	89a3      	ldrh	r3, [r4, #12]
 800fd24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd28:	81a3      	strh	r3, [r4, #12]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	6063      	str	r3, [r4, #4]
 800fd2e:	6923      	ldr	r3, [r4, #16]
 800fd30:	6023      	str	r3, [r4, #0]
 800fd32:	89a3      	ldrh	r3, [r4, #12]
 800fd34:	f043 0308 	orr.w	r3, r3, #8
 800fd38:	81a3      	strh	r3, [r4, #12]
 800fd3a:	6923      	ldr	r3, [r4, #16]
 800fd3c:	b94b      	cbnz	r3, 800fd52 <__swsetup_r+0x9a>
 800fd3e:	89a3      	ldrh	r3, [r4, #12]
 800fd40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd48:	d003      	beq.n	800fd52 <__swsetup_r+0x9a>
 800fd4a:	4621      	mov	r1, r4
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	f000 fa07 	bl	8010160 <__smakebuf_r>
 800fd52:	89a0      	ldrh	r0, [r4, #12]
 800fd54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd58:	f010 0301 	ands.w	r3, r0, #1
 800fd5c:	d00a      	beq.n	800fd74 <__swsetup_r+0xbc>
 800fd5e:	2300      	movs	r3, #0
 800fd60:	60a3      	str	r3, [r4, #8]
 800fd62:	6963      	ldr	r3, [r4, #20]
 800fd64:	425b      	negs	r3, r3
 800fd66:	61a3      	str	r3, [r4, #24]
 800fd68:	6923      	ldr	r3, [r4, #16]
 800fd6a:	b943      	cbnz	r3, 800fd7e <__swsetup_r+0xc6>
 800fd6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fd70:	d1ba      	bne.n	800fce8 <__swsetup_r+0x30>
 800fd72:	bd70      	pop	{r4, r5, r6, pc}
 800fd74:	0781      	lsls	r1, r0, #30
 800fd76:	bf58      	it	pl
 800fd78:	6963      	ldrpl	r3, [r4, #20]
 800fd7a:	60a3      	str	r3, [r4, #8]
 800fd7c:	e7f4      	b.n	800fd68 <__swsetup_r+0xb0>
 800fd7e:	2000      	movs	r0, #0
 800fd80:	e7f7      	b.n	800fd72 <__swsetup_r+0xba>
 800fd82:	bf00      	nop
 800fd84:	24000010 	.word	0x24000010
 800fd88:	08011484 	.word	0x08011484
 800fd8c:	080114a4 	.word	0x080114a4
 800fd90:	08011464 	.word	0x08011464

0800fd94 <abort>:
 800fd94:	b508      	push	{r3, lr}
 800fd96:	2006      	movs	r0, #6
 800fd98:	f000 fa7c 	bl	8010294 <raise>
 800fd9c:	2001      	movs	r0, #1
 800fd9e:	f7f1 f8a1 	bl	8000ee4 <_exit>
	...

0800fda4 <__sflush_r>:
 800fda4:	898a      	ldrh	r2, [r1, #12]
 800fda6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdaa:	4605      	mov	r5, r0
 800fdac:	0710      	lsls	r0, r2, #28
 800fdae:	460c      	mov	r4, r1
 800fdb0:	d458      	bmi.n	800fe64 <__sflush_r+0xc0>
 800fdb2:	684b      	ldr	r3, [r1, #4]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	dc05      	bgt.n	800fdc4 <__sflush_r+0x20>
 800fdb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	dc02      	bgt.n	800fdc4 <__sflush_r+0x20>
 800fdbe:	2000      	movs	r0, #0
 800fdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdc6:	2e00      	cmp	r6, #0
 800fdc8:	d0f9      	beq.n	800fdbe <__sflush_r+0x1a>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdd0:	682f      	ldr	r7, [r5, #0]
 800fdd2:	602b      	str	r3, [r5, #0]
 800fdd4:	d032      	beq.n	800fe3c <__sflush_r+0x98>
 800fdd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	075a      	lsls	r2, r3, #29
 800fddc:	d505      	bpl.n	800fdea <__sflush_r+0x46>
 800fdde:	6863      	ldr	r3, [r4, #4]
 800fde0:	1ac0      	subs	r0, r0, r3
 800fde2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fde4:	b10b      	cbz	r3, 800fdea <__sflush_r+0x46>
 800fde6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fde8:	1ac0      	subs	r0, r0, r3
 800fdea:	2300      	movs	r3, #0
 800fdec:	4602      	mov	r2, r0
 800fdee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdf0:	6a21      	ldr	r1, [r4, #32]
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	47b0      	blx	r6
 800fdf6:	1c43      	adds	r3, r0, #1
 800fdf8:	89a3      	ldrh	r3, [r4, #12]
 800fdfa:	d106      	bne.n	800fe0a <__sflush_r+0x66>
 800fdfc:	6829      	ldr	r1, [r5, #0]
 800fdfe:	291d      	cmp	r1, #29
 800fe00:	d82c      	bhi.n	800fe5c <__sflush_r+0xb8>
 800fe02:	4a2a      	ldr	r2, [pc, #168]	; (800feac <__sflush_r+0x108>)
 800fe04:	40ca      	lsrs	r2, r1
 800fe06:	07d6      	lsls	r6, r2, #31
 800fe08:	d528      	bpl.n	800fe5c <__sflush_r+0xb8>
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	6062      	str	r2, [r4, #4]
 800fe0e:	04d9      	lsls	r1, r3, #19
 800fe10:	6922      	ldr	r2, [r4, #16]
 800fe12:	6022      	str	r2, [r4, #0]
 800fe14:	d504      	bpl.n	800fe20 <__sflush_r+0x7c>
 800fe16:	1c42      	adds	r2, r0, #1
 800fe18:	d101      	bne.n	800fe1e <__sflush_r+0x7a>
 800fe1a:	682b      	ldr	r3, [r5, #0]
 800fe1c:	b903      	cbnz	r3, 800fe20 <__sflush_r+0x7c>
 800fe1e:	6560      	str	r0, [r4, #84]	; 0x54
 800fe20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe22:	602f      	str	r7, [r5, #0]
 800fe24:	2900      	cmp	r1, #0
 800fe26:	d0ca      	beq.n	800fdbe <__sflush_r+0x1a>
 800fe28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe2c:	4299      	cmp	r1, r3
 800fe2e:	d002      	beq.n	800fe36 <__sflush_r+0x92>
 800fe30:	4628      	mov	r0, r5
 800fe32:	f7ff fb3f 	bl	800f4b4 <_free_r>
 800fe36:	2000      	movs	r0, #0
 800fe38:	6360      	str	r0, [r4, #52]	; 0x34
 800fe3a:	e7c1      	b.n	800fdc0 <__sflush_r+0x1c>
 800fe3c:	6a21      	ldr	r1, [r4, #32]
 800fe3e:	2301      	movs	r3, #1
 800fe40:	4628      	mov	r0, r5
 800fe42:	47b0      	blx	r6
 800fe44:	1c41      	adds	r1, r0, #1
 800fe46:	d1c7      	bne.n	800fdd8 <__sflush_r+0x34>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d0c4      	beq.n	800fdd8 <__sflush_r+0x34>
 800fe4e:	2b1d      	cmp	r3, #29
 800fe50:	d001      	beq.n	800fe56 <__sflush_r+0xb2>
 800fe52:	2b16      	cmp	r3, #22
 800fe54:	d101      	bne.n	800fe5a <__sflush_r+0xb6>
 800fe56:	602f      	str	r7, [r5, #0]
 800fe58:	e7b1      	b.n	800fdbe <__sflush_r+0x1a>
 800fe5a:	89a3      	ldrh	r3, [r4, #12]
 800fe5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe60:	81a3      	strh	r3, [r4, #12]
 800fe62:	e7ad      	b.n	800fdc0 <__sflush_r+0x1c>
 800fe64:	690f      	ldr	r7, [r1, #16]
 800fe66:	2f00      	cmp	r7, #0
 800fe68:	d0a9      	beq.n	800fdbe <__sflush_r+0x1a>
 800fe6a:	0793      	lsls	r3, r2, #30
 800fe6c:	680e      	ldr	r6, [r1, #0]
 800fe6e:	bf08      	it	eq
 800fe70:	694b      	ldreq	r3, [r1, #20]
 800fe72:	600f      	str	r7, [r1, #0]
 800fe74:	bf18      	it	ne
 800fe76:	2300      	movne	r3, #0
 800fe78:	eba6 0807 	sub.w	r8, r6, r7
 800fe7c:	608b      	str	r3, [r1, #8]
 800fe7e:	f1b8 0f00 	cmp.w	r8, #0
 800fe82:	dd9c      	ble.n	800fdbe <__sflush_r+0x1a>
 800fe84:	6a21      	ldr	r1, [r4, #32]
 800fe86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe88:	4643      	mov	r3, r8
 800fe8a:	463a      	mov	r2, r7
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	47b0      	blx	r6
 800fe90:	2800      	cmp	r0, #0
 800fe92:	dc06      	bgt.n	800fea2 <__sflush_r+0xfe>
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe9a:	81a3      	strh	r3, [r4, #12]
 800fe9c:	f04f 30ff 	mov.w	r0, #4294967295
 800fea0:	e78e      	b.n	800fdc0 <__sflush_r+0x1c>
 800fea2:	4407      	add	r7, r0
 800fea4:	eba8 0800 	sub.w	r8, r8, r0
 800fea8:	e7e9      	b.n	800fe7e <__sflush_r+0xda>
 800feaa:	bf00      	nop
 800feac:	20400001 	.word	0x20400001

0800feb0 <_fflush_r>:
 800feb0:	b538      	push	{r3, r4, r5, lr}
 800feb2:	690b      	ldr	r3, [r1, #16]
 800feb4:	4605      	mov	r5, r0
 800feb6:	460c      	mov	r4, r1
 800feb8:	b913      	cbnz	r3, 800fec0 <_fflush_r+0x10>
 800feba:	2500      	movs	r5, #0
 800febc:	4628      	mov	r0, r5
 800febe:	bd38      	pop	{r3, r4, r5, pc}
 800fec0:	b118      	cbz	r0, 800feca <_fflush_r+0x1a>
 800fec2:	6983      	ldr	r3, [r0, #24]
 800fec4:	b90b      	cbnz	r3, 800feca <_fflush_r+0x1a>
 800fec6:	f000 f887 	bl	800ffd8 <__sinit>
 800feca:	4b14      	ldr	r3, [pc, #80]	; (800ff1c <_fflush_r+0x6c>)
 800fecc:	429c      	cmp	r4, r3
 800fece:	d11b      	bne.n	800ff08 <_fflush_r+0x58>
 800fed0:	686c      	ldr	r4, [r5, #4]
 800fed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d0ef      	beq.n	800feba <_fflush_r+0xa>
 800feda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fedc:	07d0      	lsls	r0, r2, #31
 800fede:	d404      	bmi.n	800feea <_fflush_r+0x3a>
 800fee0:	0599      	lsls	r1, r3, #22
 800fee2:	d402      	bmi.n	800feea <_fflush_r+0x3a>
 800fee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fee6:	f000 f915 	bl	8010114 <__retarget_lock_acquire_recursive>
 800feea:	4628      	mov	r0, r5
 800feec:	4621      	mov	r1, r4
 800feee:	f7ff ff59 	bl	800fda4 <__sflush_r>
 800fef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fef4:	07da      	lsls	r2, r3, #31
 800fef6:	4605      	mov	r5, r0
 800fef8:	d4e0      	bmi.n	800febc <_fflush_r+0xc>
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	059b      	lsls	r3, r3, #22
 800fefe:	d4dd      	bmi.n	800febc <_fflush_r+0xc>
 800ff00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff02:	f000 f908 	bl	8010116 <__retarget_lock_release_recursive>
 800ff06:	e7d9      	b.n	800febc <_fflush_r+0xc>
 800ff08:	4b05      	ldr	r3, [pc, #20]	; (800ff20 <_fflush_r+0x70>)
 800ff0a:	429c      	cmp	r4, r3
 800ff0c:	d101      	bne.n	800ff12 <_fflush_r+0x62>
 800ff0e:	68ac      	ldr	r4, [r5, #8]
 800ff10:	e7df      	b.n	800fed2 <_fflush_r+0x22>
 800ff12:	4b04      	ldr	r3, [pc, #16]	; (800ff24 <_fflush_r+0x74>)
 800ff14:	429c      	cmp	r4, r3
 800ff16:	bf08      	it	eq
 800ff18:	68ec      	ldreq	r4, [r5, #12]
 800ff1a:	e7da      	b.n	800fed2 <_fflush_r+0x22>
 800ff1c:	08011484 	.word	0x08011484
 800ff20:	080114a4 	.word	0x080114a4
 800ff24:	08011464 	.word	0x08011464

0800ff28 <std>:
 800ff28:	2300      	movs	r3, #0
 800ff2a:	b510      	push	{r4, lr}
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	e9c0 3300 	strd	r3, r3, [r0]
 800ff32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff36:	6083      	str	r3, [r0, #8]
 800ff38:	8181      	strh	r1, [r0, #12]
 800ff3a:	6643      	str	r3, [r0, #100]	; 0x64
 800ff3c:	81c2      	strh	r2, [r0, #14]
 800ff3e:	6183      	str	r3, [r0, #24]
 800ff40:	4619      	mov	r1, r3
 800ff42:	2208      	movs	r2, #8
 800ff44:	305c      	adds	r0, #92	; 0x5c
 800ff46:	f7ff faad 	bl	800f4a4 <memset>
 800ff4a:	4b05      	ldr	r3, [pc, #20]	; (800ff60 <std+0x38>)
 800ff4c:	6263      	str	r3, [r4, #36]	; 0x24
 800ff4e:	4b05      	ldr	r3, [pc, #20]	; (800ff64 <std+0x3c>)
 800ff50:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff52:	4b05      	ldr	r3, [pc, #20]	; (800ff68 <std+0x40>)
 800ff54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff56:	4b05      	ldr	r3, [pc, #20]	; (800ff6c <std+0x44>)
 800ff58:	6224      	str	r4, [r4, #32]
 800ff5a:	6323      	str	r3, [r4, #48]	; 0x30
 800ff5c:	bd10      	pop	{r4, pc}
 800ff5e:	bf00      	nop
 800ff60:	080102cd 	.word	0x080102cd
 800ff64:	080102ef 	.word	0x080102ef
 800ff68:	08010327 	.word	0x08010327
 800ff6c:	0801034b 	.word	0x0801034b

0800ff70 <_cleanup_r>:
 800ff70:	4901      	ldr	r1, [pc, #4]	; (800ff78 <_cleanup_r+0x8>)
 800ff72:	f000 b8af 	b.w	80100d4 <_fwalk_reent>
 800ff76:	bf00      	nop
 800ff78:	0800feb1 	.word	0x0800feb1

0800ff7c <__sfmoreglue>:
 800ff7c:	b570      	push	{r4, r5, r6, lr}
 800ff7e:	1e4a      	subs	r2, r1, #1
 800ff80:	2568      	movs	r5, #104	; 0x68
 800ff82:	4355      	muls	r5, r2
 800ff84:	460e      	mov	r6, r1
 800ff86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff8a:	f7ff fae3 	bl	800f554 <_malloc_r>
 800ff8e:	4604      	mov	r4, r0
 800ff90:	b140      	cbz	r0, 800ffa4 <__sfmoreglue+0x28>
 800ff92:	2100      	movs	r1, #0
 800ff94:	e9c0 1600 	strd	r1, r6, [r0]
 800ff98:	300c      	adds	r0, #12
 800ff9a:	60a0      	str	r0, [r4, #8]
 800ff9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ffa0:	f7ff fa80 	bl	800f4a4 <memset>
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	bd70      	pop	{r4, r5, r6, pc}

0800ffa8 <__sfp_lock_acquire>:
 800ffa8:	4801      	ldr	r0, [pc, #4]	; (800ffb0 <__sfp_lock_acquire+0x8>)
 800ffaa:	f000 b8b3 	b.w	8010114 <__retarget_lock_acquire_recursive>
 800ffae:	bf00      	nop
 800ffb0:	2400d6dc 	.word	0x2400d6dc

0800ffb4 <__sfp_lock_release>:
 800ffb4:	4801      	ldr	r0, [pc, #4]	; (800ffbc <__sfp_lock_release+0x8>)
 800ffb6:	f000 b8ae 	b.w	8010116 <__retarget_lock_release_recursive>
 800ffba:	bf00      	nop
 800ffbc:	2400d6dc 	.word	0x2400d6dc

0800ffc0 <__sinit_lock_acquire>:
 800ffc0:	4801      	ldr	r0, [pc, #4]	; (800ffc8 <__sinit_lock_acquire+0x8>)
 800ffc2:	f000 b8a7 	b.w	8010114 <__retarget_lock_acquire_recursive>
 800ffc6:	bf00      	nop
 800ffc8:	2400d6d7 	.word	0x2400d6d7

0800ffcc <__sinit_lock_release>:
 800ffcc:	4801      	ldr	r0, [pc, #4]	; (800ffd4 <__sinit_lock_release+0x8>)
 800ffce:	f000 b8a2 	b.w	8010116 <__retarget_lock_release_recursive>
 800ffd2:	bf00      	nop
 800ffd4:	2400d6d7 	.word	0x2400d6d7

0800ffd8 <__sinit>:
 800ffd8:	b510      	push	{r4, lr}
 800ffda:	4604      	mov	r4, r0
 800ffdc:	f7ff fff0 	bl	800ffc0 <__sinit_lock_acquire>
 800ffe0:	69a3      	ldr	r3, [r4, #24]
 800ffe2:	b11b      	cbz	r3, 800ffec <__sinit+0x14>
 800ffe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffe8:	f7ff bff0 	b.w	800ffcc <__sinit_lock_release>
 800ffec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fff0:	6523      	str	r3, [r4, #80]	; 0x50
 800fff2:	4b13      	ldr	r3, [pc, #76]	; (8010040 <__sinit+0x68>)
 800fff4:	4a13      	ldr	r2, [pc, #76]	; (8010044 <__sinit+0x6c>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	62a2      	str	r2, [r4, #40]	; 0x28
 800fffa:	42a3      	cmp	r3, r4
 800fffc:	bf04      	itt	eq
 800fffe:	2301      	moveq	r3, #1
 8010000:	61a3      	streq	r3, [r4, #24]
 8010002:	4620      	mov	r0, r4
 8010004:	f000 f820 	bl	8010048 <__sfp>
 8010008:	6060      	str	r0, [r4, #4]
 801000a:	4620      	mov	r0, r4
 801000c:	f000 f81c 	bl	8010048 <__sfp>
 8010010:	60a0      	str	r0, [r4, #8]
 8010012:	4620      	mov	r0, r4
 8010014:	f000 f818 	bl	8010048 <__sfp>
 8010018:	2200      	movs	r2, #0
 801001a:	60e0      	str	r0, [r4, #12]
 801001c:	2104      	movs	r1, #4
 801001e:	6860      	ldr	r0, [r4, #4]
 8010020:	f7ff ff82 	bl	800ff28 <std>
 8010024:	68a0      	ldr	r0, [r4, #8]
 8010026:	2201      	movs	r2, #1
 8010028:	2109      	movs	r1, #9
 801002a:	f7ff ff7d 	bl	800ff28 <std>
 801002e:	68e0      	ldr	r0, [r4, #12]
 8010030:	2202      	movs	r2, #2
 8010032:	2112      	movs	r1, #18
 8010034:	f7ff ff78 	bl	800ff28 <std>
 8010038:	2301      	movs	r3, #1
 801003a:	61a3      	str	r3, [r4, #24]
 801003c:	e7d2      	b.n	800ffe4 <__sinit+0xc>
 801003e:	bf00      	nop
 8010040:	0801142c 	.word	0x0801142c
 8010044:	0800ff71 	.word	0x0800ff71

08010048 <__sfp>:
 8010048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801004a:	4607      	mov	r7, r0
 801004c:	f7ff ffac 	bl	800ffa8 <__sfp_lock_acquire>
 8010050:	4b1e      	ldr	r3, [pc, #120]	; (80100cc <__sfp+0x84>)
 8010052:	681e      	ldr	r6, [r3, #0]
 8010054:	69b3      	ldr	r3, [r6, #24]
 8010056:	b913      	cbnz	r3, 801005e <__sfp+0x16>
 8010058:	4630      	mov	r0, r6
 801005a:	f7ff ffbd 	bl	800ffd8 <__sinit>
 801005e:	3648      	adds	r6, #72	; 0x48
 8010060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010064:	3b01      	subs	r3, #1
 8010066:	d503      	bpl.n	8010070 <__sfp+0x28>
 8010068:	6833      	ldr	r3, [r6, #0]
 801006a:	b30b      	cbz	r3, 80100b0 <__sfp+0x68>
 801006c:	6836      	ldr	r6, [r6, #0]
 801006e:	e7f7      	b.n	8010060 <__sfp+0x18>
 8010070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010074:	b9d5      	cbnz	r5, 80100ac <__sfp+0x64>
 8010076:	4b16      	ldr	r3, [pc, #88]	; (80100d0 <__sfp+0x88>)
 8010078:	60e3      	str	r3, [r4, #12]
 801007a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801007e:	6665      	str	r5, [r4, #100]	; 0x64
 8010080:	f000 f847 	bl	8010112 <__retarget_lock_init_recursive>
 8010084:	f7ff ff96 	bl	800ffb4 <__sfp_lock_release>
 8010088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801008c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010090:	6025      	str	r5, [r4, #0]
 8010092:	61a5      	str	r5, [r4, #24]
 8010094:	2208      	movs	r2, #8
 8010096:	4629      	mov	r1, r5
 8010098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801009c:	f7ff fa02 	bl	800f4a4 <memset>
 80100a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80100a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80100a8:	4620      	mov	r0, r4
 80100aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100ac:	3468      	adds	r4, #104	; 0x68
 80100ae:	e7d9      	b.n	8010064 <__sfp+0x1c>
 80100b0:	2104      	movs	r1, #4
 80100b2:	4638      	mov	r0, r7
 80100b4:	f7ff ff62 	bl	800ff7c <__sfmoreglue>
 80100b8:	4604      	mov	r4, r0
 80100ba:	6030      	str	r0, [r6, #0]
 80100bc:	2800      	cmp	r0, #0
 80100be:	d1d5      	bne.n	801006c <__sfp+0x24>
 80100c0:	f7ff ff78 	bl	800ffb4 <__sfp_lock_release>
 80100c4:	230c      	movs	r3, #12
 80100c6:	603b      	str	r3, [r7, #0]
 80100c8:	e7ee      	b.n	80100a8 <__sfp+0x60>
 80100ca:	bf00      	nop
 80100cc:	0801142c 	.word	0x0801142c
 80100d0:	ffff0001 	.word	0xffff0001

080100d4 <_fwalk_reent>:
 80100d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100d8:	4606      	mov	r6, r0
 80100da:	4688      	mov	r8, r1
 80100dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80100e0:	2700      	movs	r7, #0
 80100e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100e6:	f1b9 0901 	subs.w	r9, r9, #1
 80100ea:	d505      	bpl.n	80100f8 <_fwalk_reent+0x24>
 80100ec:	6824      	ldr	r4, [r4, #0]
 80100ee:	2c00      	cmp	r4, #0
 80100f0:	d1f7      	bne.n	80100e2 <_fwalk_reent+0xe>
 80100f2:	4638      	mov	r0, r7
 80100f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100f8:	89ab      	ldrh	r3, [r5, #12]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d907      	bls.n	801010e <_fwalk_reent+0x3a>
 80100fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010102:	3301      	adds	r3, #1
 8010104:	d003      	beq.n	801010e <_fwalk_reent+0x3a>
 8010106:	4629      	mov	r1, r5
 8010108:	4630      	mov	r0, r6
 801010a:	47c0      	blx	r8
 801010c:	4307      	orrs	r7, r0
 801010e:	3568      	adds	r5, #104	; 0x68
 8010110:	e7e9      	b.n	80100e6 <_fwalk_reent+0x12>

08010112 <__retarget_lock_init_recursive>:
 8010112:	4770      	bx	lr

08010114 <__retarget_lock_acquire_recursive>:
 8010114:	4770      	bx	lr

08010116 <__retarget_lock_release_recursive>:
 8010116:	4770      	bx	lr

08010118 <__swhatbuf_r>:
 8010118:	b570      	push	{r4, r5, r6, lr}
 801011a:	460e      	mov	r6, r1
 801011c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010120:	2900      	cmp	r1, #0
 8010122:	b096      	sub	sp, #88	; 0x58
 8010124:	4614      	mov	r4, r2
 8010126:	461d      	mov	r5, r3
 8010128:	da07      	bge.n	801013a <__swhatbuf_r+0x22>
 801012a:	2300      	movs	r3, #0
 801012c:	602b      	str	r3, [r5, #0]
 801012e:	89b3      	ldrh	r3, [r6, #12]
 8010130:	061a      	lsls	r2, r3, #24
 8010132:	d410      	bmi.n	8010156 <__swhatbuf_r+0x3e>
 8010134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010138:	e00e      	b.n	8010158 <__swhatbuf_r+0x40>
 801013a:	466a      	mov	r2, sp
 801013c:	f000 f92c 	bl	8010398 <_fstat_r>
 8010140:	2800      	cmp	r0, #0
 8010142:	dbf2      	blt.n	801012a <__swhatbuf_r+0x12>
 8010144:	9a01      	ldr	r2, [sp, #4]
 8010146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801014a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801014e:	425a      	negs	r2, r3
 8010150:	415a      	adcs	r2, r3
 8010152:	602a      	str	r2, [r5, #0]
 8010154:	e7ee      	b.n	8010134 <__swhatbuf_r+0x1c>
 8010156:	2340      	movs	r3, #64	; 0x40
 8010158:	2000      	movs	r0, #0
 801015a:	6023      	str	r3, [r4, #0]
 801015c:	b016      	add	sp, #88	; 0x58
 801015e:	bd70      	pop	{r4, r5, r6, pc}

08010160 <__smakebuf_r>:
 8010160:	898b      	ldrh	r3, [r1, #12]
 8010162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010164:	079d      	lsls	r5, r3, #30
 8010166:	4606      	mov	r6, r0
 8010168:	460c      	mov	r4, r1
 801016a:	d507      	bpl.n	801017c <__smakebuf_r+0x1c>
 801016c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010170:	6023      	str	r3, [r4, #0]
 8010172:	6123      	str	r3, [r4, #16]
 8010174:	2301      	movs	r3, #1
 8010176:	6163      	str	r3, [r4, #20]
 8010178:	b002      	add	sp, #8
 801017a:	bd70      	pop	{r4, r5, r6, pc}
 801017c:	ab01      	add	r3, sp, #4
 801017e:	466a      	mov	r2, sp
 8010180:	f7ff ffca 	bl	8010118 <__swhatbuf_r>
 8010184:	9900      	ldr	r1, [sp, #0]
 8010186:	4605      	mov	r5, r0
 8010188:	4630      	mov	r0, r6
 801018a:	f7ff f9e3 	bl	800f554 <_malloc_r>
 801018e:	b948      	cbnz	r0, 80101a4 <__smakebuf_r+0x44>
 8010190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010194:	059a      	lsls	r2, r3, #22
 8010196:	d4ef      	bmi.n	8010178 <__smakebuf_r+0x18>
 8010198:	f023 0303 	bic.w	r3, r3, #3
 801019c:	f043 0302 	orr.w	r3, r3, #2
 80101a0:	81a3      	strh	r3, [r4, #12]
 80101a2:	e7e3      	b.n	801016c <__smakebuf_r+0xc>
 80101a4:	4b0d      	ldr	r3, [pc, #52]	; (80101dc <__smakebuf_r+0x7c>)
 80101a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80101a8:	89a3      	ldrh	r3, [r4, #12]
 80101aa:	6020      	str	r0, [r4, #0]
 80101ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101b0:	81a3      	strh	r3, [r4, #12]
 80101b2:	9b00      	ldr	r3, [sp, #0]
 80101b4:	6163      	str	r3, [r4, #20]
 80101b6:	9b01      	ldr	r3, [sp, #4]
 80101b8:	6120      	str	r0, [r4, #16]
 80101ba:	b15b      	cbz	r3, 80101d4 <__smakebuf_r+0x74>
 80101bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101c0:	4630      	mov	r0, r6
 80101c2:	f000 f8fb 	bl	80103bc <_isatty_r>
 80101c6:	b128      	cbz	r0, 80101d4 <__smakebuf_r+0x74>
 80101c8:	89a3      	ldrh	r3, [r4, #12]
 80101ca:	f023 0303 	bic.w	r3, r3, #3
 80101ce:	f043 0301 	orr.w	r3, r3, #1
 80101d2:	81a3      	strh	r3, [r4, #12]
 80101d4:	89a0      	ldrh	r0, [r4, #12]
 80101d6:	4305      	orrs	r5, r0
 80101d8:	81a5      	strh	r5, [r4, #12]
 80101da:	e7cd      	b.n	8010178 <__smakebuf_r+0x18>
 80101dc:	0800ff71 	.word	0x0800ff71

080101e0 <__malloc_lock>:
 80101e0:	4801      	ldr	r0, [pc, #4]	; (80101e8 <__malloc_lock+0x8>)
 80101e2:	f7ff bf97 	b.w	8010114 <__retarget_lock_acquire_recursive>
 80101e6:	bf00      	nop
 80101e8:	2400d6d8 	.word	0x2400d6d8

080101ec <__malloc_unlock>:
 80101ec:	4801      	ldr	r0, [pc, #4]	; (80101f4 <__malloc_unlock+0x8>)
 80101ee:	f7ff bf92 	b.w	8010116 <__retarget_lock_release_recursive>
 80101f2:	bf00      	nop
 80101f4:	2400d6d8 	.word	0x2400d6d8

080101f8 <_realloc_r>:
 80101f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fa:	4607      	mov	r7, r0
 80101fc:	4614      	mov	r4, r2
 80101fe:	460e      	mov	r6, r1
 8010200:	b921      	cbnz	r1, 801020c <_realloc_r+0x14>
 8010202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010206:	4611      	mov	r1, r2
 8010208:	f7ff b9a4 	b.w	800f554 <_malloc_r>
 801020c:	b922      	cbnz	r2, 8010218 <_realloc_r+0x20>
 801020e:	f7ff f951 	bl	800f4b4 <_free_r>
 8010212:	4625      	mov	r5, r4
 8010214:	4628      	mov	r0, r5
 8010216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010218:	f000 f8f2 	bl	8010400 <_malloc_usable_size_r>
 801021c:	42a0      	cmp	r0, r4
 801021e:	d20f      	bcs.n	8010240 <_realloc_r+0x48>
 8010220:	4621      	mov	r1, r4
 8010222:	4638      	mov	r0, r7
 8010224:	f7ff f996 	bl	800f554 <_malloc_r>
 8010228:	4605      	mov	r5, r0
 801022a:	2800      	cmp	r0, #0
 801022c:	d0f2      	beq.n	8010214 <_realloc_r+0x1c>
 801022e:	4631      	mov	r1, r6
 8010230:	4622      	mov	r2, r4
 8010232:	f7ff f929 	bl	800f488 <memcpy>
 8010236:	4631      	mov	r1, r6
 8010238:	4638      	mov	r0, r7
 801023a:	f7ff f93b 	bl	800f4b4 <_free_r>
 801023e:	e7e9      	b.n	8010214 <_realloc_r+0x1c>
 8010240:	4635      	mov	r5, r6
 8010242:	e7e7      	b.n	8010214 <_realloc_r+0x1c>

08010244 <_raise_r>:
 8010244:	291f      	cmp	r1, #31
 8010246:	b538      	push	{r3, r4, r5, lr}
 8010248:	4604      	mov	r4, r0
 801024a:	460d      	mov	r5, r1
 801024c:	d904      	bls.n	8010258 <_raise_r+0x14>
 801024e:	2316      	movs	r3, #22
 8010250:	6003      	str	r3, [r0, #0]
 8010252:	f04f 30ff 	mov.w	r0, #4294967295
 8010256:	bd38      	pop	{r3, r4, r5, pc}
 8010258:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801025a:	b112      	cbz	r2, 8010262 <_raise_r+0x1e>
 801025c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010260:	b94b      	cbnz	r3, 8010276 <_raise_r+0x32>
 8010262:	4620      	mov	r0, r4
 8010264:	f000 f830 	bl	80102c8 <_getpid_r>
 8010268:	462a      	mov	r2, r5
 801026a:	4601      	mov	r1, r0
 801026c:	4620      	mov	r0, r4
 801026e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010272:	f000 b817 	b.w	80102a4 <_kill_r>
 8010276:	2b01      	cmp	r3, #1
 8010278:	d00a      	beq.n	8010290 <_raise_r+0x4c>
 801027a:	1c59      	adds	r1, r3, #1
 801027c:	d103      	bne.n	8010286 <_raise_r+0x42>
 801027e:	2316      	movs	r3, #22
 8010280:	6003      	str	r3, [r0, #0]
 8010282:	2001      	movs	r0, #1
 8010284:	e7e7      	b.n	8010256 <_raise_r+0x12>
 8010286:	2400      	movs	r4, #0
 8010288:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801028c:	4628      	mov	r0, r5
 801028e:	4798      	blx	r3
 8010290:	2000      	movs	r0, #0
 8010292:	e7e0      	b.n	8010256 <_raise_r+0x12>

08010294 <raise>:
 8010294:	4b02      	ldr	r3, [pc, #8]	; (80102a0 <raise+0xc>)
 8010296:	4601      	mov	r1, r0
 8010298:	6818      	ldr	r0, [r3, #0]
 801029a:	f7ff bfd3 	b.w	8010244 <_raise_r>
 801029e:	bf00      	nop
 80102a0:	24000010 	.word	0x24000010

080102a4 <_kill_r>:
 80102a4:	b538      	push	{r3, r4, r5, lr}
 80102a6:	4d07      	ldr	r5, [pc, #28]	; (80102c4 <_kill_r+0x20>)
 80102a8:	2300      	movs	r3, #0
 80102aa:	4604      	mov	r4, r0
 80102ac:	4608      	mov	r0, r1
 80102ae:	4611      	mov	r1, r2
 80102b0:	602b      	str	r3, [r5, #0]
 80102b2:	f7f0 fe07 	bl	8000ec4 <_kill>
 80102b6:	1c43      	adds	r3, r0, #1
 80102b8:	d102      	bne.n	80102c0 <_kill_r+0x1c>
 80102ba:	682b      	ldr	r3, [r5, #0]
 80102bc:	b103      	cbz	r3, 80102c0 <_kill_r+0x1c>
 80102be:	6023      	str	r3, [r4, #0]
 80102c0:	bd38      	pop	{r3, r4, r5, pc}
 80102c2:	bf00      	nop
 80102c4:	2400d6e0 	.word	0x2400d6e0

080102c8 <_getpid_r>:
 80102c8:	f7f0 bdf4 	b.w	8000eb4 <_getpid>

080102cc <__sread>:
 80102cc:	b510      	push	{r4, lr}
 80102ce:	460c      	mov	r4, r1
 80102d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d4:	f000 f89c 	bl	8010410 <_read_r>
 80102d8:	2800      	cmp	r0, #0
 80102da:	bfab      	itete	ge
 80102dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80102de:	89a3      	ldrhlt	r3, [r4, #12]
 80102e0:	181b      	addge	r3, r3, r0
 80102e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102e6:	bfac      	ite	ge
 80102e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80102ea:	81a3      	strhlt	r3, [r4, #12]
 80102ec:	bd10      	pop	{r4, pc}

080102ee <__swrite>:
 80102ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102f2:	461f      	mov	r7, r3
 80102f4:	898b      	ldrh	r3, [r1, #12]
 80102f6:	05db      	lsls	r3, r3, #23
 80102f8:	4605      	mov	r5, r0
 80102fa:	460c      	mov	r4, r1
 80102fc:	4616      	mov	r6, r2
 80102fe:	d505      	bpl.n	801030c <__swrite+0x1e>
 8010300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010304:	2302      	movs	r3, #2
 8010306:	2200      	movs	r2, #0
 8010308:	f000 f868 	bl	80103dc <_lseek_r>
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010316:	81a3      	strh	r3, [r4, #12]
 8010318:	4632      	mov	r2, r6
 801031a:	463b      	mov	r3, r7
 801031c:	4628      	mov	r0, r5
 801031e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010322:	f000 b817 	b.w	8010354 <_write_r>

08010326 <__sseek>:
 8010326:	b510      	push	{r4, lr}
 8010328:	460c      	mov	r4, r1
 801032a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801032e:	f000 f855 	bl	80103dc <_lseek_r>
 8010332:	1c43      	adds	r3, r0, #1
 8010334:	89a3      	ldrh	r3, [r4, #12]
 8010336:	bf15      	itete	ne
 8010338:	6560      	strne	r0, [r4, #84]	; 0x54
 801033a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801033e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010342:	81a3      	strheq	r3, [r4, #12]
 8010344:	bf18      	it	ne
 8010346:	81a3      	strhne	r3, [r4, #12]
 8010348:	bd10      	pop	{r4, pc}

0801034a <__sclose>:
 801034a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801034e:	f000 b813 	b.w	8010378 <_close_r>
	...

08010354 <_write_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4d07      	ldr	r5, [pc, #28]	; (8010374 <_write_r+0x20>)
 8010358:	4604      	mov	r4, r0
 801035a:	4608      	mov	r0, r1
 801035c:	4611      	mov	r1, r2
 801035e:	2200      	movs	r2, #0
 8010360:	602a      	str	r2, [r5, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	f7f0 fde5 	bl	8000f32 <_write>
 8010368:	1c43      	adds	r3, r0, #1
 801036a:	d102      	bne.n	8010372 <_write_r+0x1e>
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	b103      	cbz	r3, 8010372 <_write_r+0x1e>
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	bd38      	pop	{r3, r4, r5, pc}
 8010374:	2400d6e0 	.word	0x2400d6e0

08010378 <_close_r>:
 8010378:	b538      	push	{r3, r4, r5, lr}
 801037a:	4d06      	ldr	r5, [pc, #24]	; (8010394 <_close_r+0x1c>)
 801037c:	2300      	movs	r3, #0
 801037e:	4604      	mov	r4, r0
 8010380:	4608      	mov	r0, r1
 8010382:	602b      	str	r3, [r5, #0]
 8010384:	f7f0 fdf1 	bl	8000f6a <_close>
 8010388:	1c43      	adds	r3, r0, #1
 801038a:	d102      	bne.n	8010392 <_close_r+0x1a>
 801038c:	682b      	ldr	r3, [r5, #0]
 801038e:	b103      	cbz	r3, 8010392 <_close_r+0x1a>
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	bd38      	pop	{r3, r4, r5, pc}
 8010394:	2400d6e0 	.word	0x2400d6e0

08010398 <_fstat_r>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4d07      	ldr	r5, [pc, #28]	; (80103b8 <_fstat_r+0x20>)
 801039c:	2300      	movs	r3, #0
 801039e:	4604      	mov	r4, r0
 80103a0:	4608      	mov	r0, r1
 80103a2:	4611      	mov	r1, r2
 80103a4:	602b      	str	r3, [r5, #0]
 80103a6:	f7f0 fdec 	bl	8000f82 <_fstat>
 80103aa:	1c43      	adds	r3, r0, #1
 80103ac:	d102      	bne.n	80103b4 <_fstat_r+0x1c>
 80103ae:	682b      	ldr	r3, [r5, #0]
 80103b0:	b103      	cbz	r3, 80103b4 <_fstat_r+0x1c>
 80103b2:	6023      	str	r3, [r4, #0]
 80103b4:	bd38      	pop	{r3, r4, r5, pc}
 80103b6:	bf00      	nop
 80103b8:	2400d6e0 	.word	0x2400d6e0

080103bc <_isatty_r>:
 80103bc:	b538      	push	{r3, r4, r5, lr}
 80103be:	4d06      	ldr	r5, [pc, #24]	; (80103d8 <_isatty_r+0x1c>)
 80103c0:	2300      	movs	r3, #0
 80103c2:	4604      	mov	r4, r0
 80103c4:	4608      	mov	r0, r1
 80103c6:	602b      	str	r3, [r5, #0]
 80103c8:	f7f0 fdeb 	bl	8000fa2 <_isatty>
 80103cc:	1c43      	adds	r3, r0, #1
 80103ce:	d102      	bne.n	80103d6 <_isatty_r+0x1a>
 80103d0:	682b      	ldr	r3, [r5, #0]
 80103d2:	b103      	cbz	r3, 80103d6 <_isatty_r+0x1a>
 80103d4:	6023      	str	r3, [r4, #0]
 80103d6:	bd38      	pop	{r3, r4, r5, pc}
 80103d8:	2400d6e0 	.word	0x2400d6e0

080103dc <_lseek_r>:
 80103dc:	b538      	push	{r3, r4, r5, lr}
 80103de:	4d07      	ldr	r5, [pc, #28]	; (80103fc <_lseek_r+0x20>)
 80103e0:	4604      	mov	r4, r0
 80103e2:	4608      	mov	r0, r1
 80103e4:	4611      	mov	r1, r2
 80103e6:	2200      	movs	r2, #0
 80103e8:	602a      	str	r2, [r5, #0]
 80103ea:	461a      	mov	r2, r3
 80103ec:	f7f0 fde4 	bl	8000fb8 <_lseek>
 80103f0:	1c43      	adds	r3, r0, #1
 80103f2:	d102      	bne.n	80103fa <_lseek_r+0x1e>
 80103f4:	682b      	ldr	r3, [r5, #0]
 80103f6:	b103      	cbz	r3, 80103fa <_lseek_r+0x1e>
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	bd38      	pop	{r3, r4, r5, pc}
 80103fc:	2400d6e0 	.word	0x2400d6e0

08010400 <_malloc_usable_size_r>:
 8010400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010404:	1f18      	subs	r0, r3, #4
 8010406:	2b00      	cmp	r3, #0
 8010408:	bfbc      	itt	lt
 801040a:	580b      	ldrlt	r3, [r1, r0]
 801040c:	18c0      	addlt	r0, r0, r3
 801040e:	4770      	bx	lr

08010410 <_read_r>:
 8010410:	b538      	push	{r3, r4, r5, lr}
 8010412:	4d07      	ldr	r5, [pc, #28]	; (8010430 <_read_r+0x20>)
 8010414:	4604      	mov	r4, r0
 8010416:	4608      	mov	r0, r1
 8010418:	4611      	mov	r1, r2
 801041a:	2200      	movs	r2, #0
 801041c:	602a      	str	r2, [r5, #0]
 801041e:	461a      	mov	r2, r3
 8010420:	f7f0 fd6a 	bl	8000ef8 <_read>
 8010424:	1c43      	adds	r3, r0, #1
 8010426:	d102      	bne.n	801042e <_read_r+0x1e>
 8010428:	682b      	ldr	r3, [r5, #0]
 801042a:	b103      	cbz	r3, 801042e <_read_r+0x1e>
 801042c:	6023      	str	r3, [r4, #0]
 801042e:	bd38      	pop	{r3, r4, r5, pc}
 8010430:	2400d6e0 	.word	0x2400d6e0

08010434 <checkint>:
 8010434:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010438:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801043c:	429a      	cmp	r2, r3
 801043e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010440:	dd2b      	ble.n	801049a <checkint+0x66>
 8010442:	f240 4333 	movw	r3, #1075	; 0x433
 8010446:	429a      	cmp	r2, r3
 8010448:	dc25      	bgt.n	8010496 <checkint+0x62>
 801044a:	1a9b      	subs	r3, r3, r2
 801044c:	f1a3 0620 	sub.w	r6, r3, #32
 8010450:	f04f 32ff 	mov.w	r2, #4294967295
 8010454:	fa02 f606 	lsl.w	r6, r2, r6
 8010458:	fa02 f403 	lsl.w	r4, r2, r3
 801045c:	f1c3 0520 	rsb	r5, r3, #32
 8010460:	4334      	orrs	r4, r6
 8010462:	fa22 f505 	lsr.w	r5, r2, r5
 8010466:	432c      	orrs	r4, r5
 8010468:	409a      	lsls	r2, r3
 801046a:	ea20 0602 	bic.w	r6, r0, r2
 801046e:	ea21 0704 	bic.w	r7, r1, r4
 8010472:	ea56 0207 	orrs.w	r2, r6, r7
 8010476:	f1a3 0420 	sub.w	r4, r3, #32
 801047a:	f1c3 0220 	rsb	r2, r3, #32
 801047e:	d10c      	bne.n	801049a <checkint+0x66>
 8010480:	40d8      	lsrs	r0, r3
 8010482:	fa01 f302 	lsl.w	r3, r1, r2
 8010486:	4318      	orrs	r0, r3
 8010488:	40e1      	lsrs	r1, r4
 801048a:	4308      	orrs	r0, r1
 801048c:	f000 0301 	and.w	r3, r0, #1
 8010490:	f1c3 0002 	rsb	r0, r3, #2
 8010494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010496:	2002      	movs	r0, #2
 8010498:	e7fc      	b.n	8010494 <checkint+0x60>
 801049a:	2000      	movs	r0, #0
 801049c:	e7fa      	b.n	8010494 <checkint+0x60>
	...

080104a0 <pow>:
 80104a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a4:	ed2d 8b0a 	vpush	{d8-d12}
 80104a8:	b09b      	sub	sp, #108	; 0x6c
 80104aa:	ed8d 0b02 	vstr	d0, [sp, #8]
 80104ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80104b2:	ed8d 1b00 	vstr	d1, [sp]
 80104b6:	ea4f 5915 	mov.w	r9, r5, lsr #20
 80104ba:	e9dd 6700 	ldrd	r6, r7, [sp]
 80104be:	f109 30ff 	add.w	r0, r9, #4294967295
 80104c2:	f240 71fd 	movw	r1, #2045	; 0x7fd
 80104c6:	4288      	cmp	r0, r1
 80104c8:	46cc      	mov	ip, r9
 80104ca:	ea4f 5817 	mov.w	r8, r7, lsr #20
 80104ce:	d806      	bhi.n	80104de <pow+0x3e>
 80104d0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 80104d4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 80104d8:	297f      	cmp	r1, #127	; 0x7f
 80104da:	f240 81ab 	bls.w	8010834 <pow+0x394>
 80104de:	19b1      	adds	r1, r6, r6
 80104e0:	9104      	str	r1, [sp, #16]
 80104e2:	eb47 0107 	adc.w	r1, r7, r7
 80104e6:	9105      	str	r1, [sp, #20]
 80104e8:	9904      	ldr	r1, [sp, #16]
 80104ea:	f111 31ff 	adds.w	r1, r1, #4294967295
 80104ee:	460a      	mov	r2, r1
 80104f0:	9905      	ldr	r1, [sp, #20]
 80104f2:	f141 31ff 	adc.w	r1, r1, #4294967295
 80104f6:	460b      	mov	r3, r1
 80104f8:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 80104fc:	f06f 0001 	mvn.w	r0, #1
 8010500:	4299      	cmp	r1, r3
 8010502:	bf08      	it	eq
 8010504:	4290      	cmpeq	r0, r2
 8010506:	d260      	bcs.n	80105ca <pow+0x12a>
 8010508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801050c:	4313      	orrs	r3, r2
 801050e:	d11a      	bne.n	8010546 <pow+0xa6>
 8010510:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8010514:	1923      	adds	r3, r4, r4
 8010516:	930c      	str	r3, [sp, #48]	; 0x30
 8010518:	eb42 0302 	adc.w	r3, r2, r2
 801051c:	930d      	str	r3, [sp, #52]	; 0x34
 801051e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010522:	4bcf      	ldr	r3, [pc, #828]	; (8010860 <pow+0x3c0>)
 8010524:	2200      	movs	r2, #0
 8010526:	428b      	cmp	r3, r1
 8010528:	bf08      	it	eq
 801052a:	4282      	cmpeq	r2, r0
 801052c:	f080 8265 	bcs.w	80109fa <pow+0x55a>
 8010530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010534:	ed9d 6b00 	vldr	d6, [sp]
 8010538:	ee37 0b06 	vadd.f64	d0, d7, d6
 801053c:	b01b      	add	sp, #108	; 0x6c
 801053e:	ecbd 8b0a 	vpop	{d8-d12}
 8010542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010546:	49c7      	ldr	r1, [pc, #796]	; (8010864 <pow+0x3c4>)
 8010548:	2000      	movs	r0, #0
 801054a:	428d      	cmp	r5, r1
 801054c:	bf08      	it	eq
 801054e:	4284      	cmpeq	r4, r0
 8010550:	d10b      	bne.n	801056a <pow+0xca>
 8010552:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010556:	19b3      	adds	r3, r6, r6
 8010558:	930e      	str	r3, [sp, #56]	; 0x38
 801055a:	eb42 0302 	adc.w	r3, r2, r2
 801055e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010560:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010564:	4bbe      	ldr	r3, [pc, #760]	; (8010860 <pow+0x3c0>)
 8010566:	2200      	movs	r2, #0
 8010568:	e7dd      	b.n	8010526 <pow+0x86>
 801056a:	1921      	adds	r1, r4, r4
 801056c:	9106      	str	r1, [sp, #24]
 801056e:	eb45 0105 	adc.w	r1, r5, r5
 8010572:	9107      	str	r1, [sp, #28]
 8010574:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010578:	49bb      	ldr	r1, [pc, #748]	; (8010868 <pow+0x3c8>)
 801057a:	2000      	movs	r0, #0
 801057c:	42a1      	cmp	r1, r4
 801057e:	bf08      	it	eq
 8010580:	4298      	cmpeq	r0, r3
 8010582:	d3d5      	bcc.n	8010530 <pow+0x90>
 8010584:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010588:	428c      	cmp	r4, r1
 801058a:	bf08      	it	eq
 801058c:	4283      	cmpeq	r3, r0
 801058e:	d1cf      	bne.n	8010530 <pow+0x90>
 8010590:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8010594:	49b5      	ldr	r1, [pc, #724]	; (801086c <pow+0x3cc>)
 8010596:	2000      	movs	r0, #0
 8010598:	428c      	cmp	r4, r1
 801059a:	bf08      	it	eq
 801059c:	4283      	cmpeq	r3, r0
 801059e:	f000 822c 	beq.w	80109fa <pow+0x55a>
 80105a2:	49b3      	ldr	r1, [pc, #716]	; (8010870 <pow+0x3d0>)
 80105a4:	f04f 30ff 	mov.w	r0, #4294967295
 80105a8:	42a1      	cmp	r1, r4
 80105aa:	bf08      	it	eq
 80105ac:	4298      	cmpeq	r0, r3
 80105ae:	ea6f 0307 	mvn.w	r3, r7
 80105b2:	bf34      	ite	cc
 80105b4:	2201      	movcc	r2, #1
 80105b6:	2200      	movcs	r2, #0
 80105b8:	0fdb      	lsrs	r3, r3, #31
 80105ba:	429a      	cmp	r2, r3
 80105bc:	f040 821a 	bne.w	80109f4 <pow+0x554>
 80105c0:	ed9d 7b00 	vldr	d7, [sp]
 80105c4:	ee27 0b07 	vmul.f64	d0, d7, d7
 80105c8:	e7b8      	b.n	801053c <pow+0x9c>
 80105ca:	1923      	adds	r3, r4, r4
 80105cc:	9308      	str	r3, [sp, #32]
 80105ce:	eb45 0305 	adc.w	r3, r5, r5
 80105d2:	9309      	str	r3, [sp, #36]	; 0x24
 80105d4:	9b08      	ldr	r3, [sp, #32]
 80105d6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80105da:	9310      	str	r3, [sp, #64]	; 0x40
 80105dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105de:	f143 33ff 	adc.w	r3, r3, #4294967295
 80105e2:	9311      	str	r3, [sp, #68]	; 0x44
 80105e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80105e8:	4299      	cmp	r1, r3
 80105ea:	bf08      	it	eq
 80105ec:	4290      	cmpeq	r0, r2
 80105ee:	d22d      	bcs.n	801064c <pow+0x1ac>
 80105f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105f4:	2c00      	cmp	r4, #0
 80105f6:	f175 0300 	sbcs.w	r3, r5, #0
 80105fa:	ee27 0b07 	vmul.f64	d0, d7, d7
 80105fe:	da16      	bge.n	801062e <pow+0x18e>
 8010600:	4630      	mov	r0, r6
 8010602:	4639      	mov	r1, r7
 8010604:	f7ff ff16 	bl	8010434 <checkint>
 8010608:	2801      	cmp	r0, #1
 801060a:	d110      	bne.n	801062e <pow+0x18e>
 801060c:	eeb1 0b40 	vneg.f64	d0, d0
 8010610:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8010614:	4323      	orrs	r3, r4
 8010616:	d10c      	bne.n	8010632 <pow+0x192>
 8010618:	2e00      	cmp	r6, #0
 801061a:	f177 0300 	sbcs.w	r3, r7, #0
 801061e:	da8d      	bge.n	801053c <pow+0x9c>
 8010620:	b01b      	add	sp, #108	; 0x6c
 8010622:	ecbd 8b0a 	vpop	{d8-d12}
 8010626:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801062a:	f000 bc85 	b.w	8010f38 <__math_divzero>
 801062e:	2000      	movs	r0, #0
 8010630:	e7ee      	b.n	8010610 <pow+0x170>
 8010632:	2e00      	cmp	r6, #0
 8010634:	f177 0300 	sbcs.w	r3, r7, #0
 8010638:	da80      	bge.n	801053c <pow+0x9c>
 801063a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801063e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010642:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8010646:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 801064a:	e777      	b.n	801053c <pow+0x9c>
 801064c:	2c00      	cmp	r4, #0
 801064e:	f175 0300 	sbcs.w	r3, r5, #0
 8010652:	da35      	bge.n	80106c0 <pow+0x220>
 8010654:	4630      	mov	r0, r6
 8010656:	4639      	mov	r1, r7
 8010658:	f7ff feec 	bl	8010434 <checkint>
 801065c:	b940      	cbnz	r0, 8010670 <pow+0x1d0>
 801065e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8010662:	b01b      	add	sp, #108	; 0x6c
 8010664:	ecbd 8b0a 	vpop	{d8-d12}
 8010668:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	f000 bc7c 	b.w	8010f68 <__math_invalid>
 8010670:	2801      	cmp	r0, #1
 8010672:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010676:	bf14      	ite	ne
 8010678:	2000      	movne	r0, #0
 801067a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801067e:	461d      	mov	r5, r3
 8010680:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8010684:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8010688:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 801068c:	2a7f      	cmp	r2, #127	; 0x7f
 801068e:	d933      	bls.n	80106f8 <pow+0x258>
 8010690:	4974      	ldr	r1, [pc, #464]	; (8010864 <pow+0x3c4>)
 8010692:	2000      	movs	r0, #0
 8010694:	428d      	cmp	r5, r1
 8010696:	bf08      	it	eq
 8010698:	4284      	cmpeq	r4, r0
 801069a:	f000 81ae 	beq.w	80109fa <pow+0x55a>
 801069e:	f240 32bd 	movw	r2, #957	; 0x3bd
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d80e      	bhi.n	80106c4 <pow+0x224>
 80106a6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80106aa:	ed9d 7b00 	vldr	d7, [sp]
 80106ae:	42a9      	cmp	r1, r5
 80106b0:	bf08      	it	eq
 80106b2:	42a0      	cmpeq	r0, r4
 80106b4:	bf34      	ite	cc
 80106b6:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 80106ba:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 80106be:	e73d      	b.n	801053c <pow+0x9c>
 80106c0:	2000      	movs	r0, #0
 80106c2:	e7df      	b.n	8010684 <pow+0x1e4>
 80106c4:	42a9      	cmp	r1, r5
 80106c6:	bf08      	it	eq
 80106c8:	42a0      	cmpeq	r0, r4
 80106ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80106ce:	bf2c      	ite	cs
 80106d0:	2301      	movcs	r3, #1
 80106d2:	2300      	movcc	r3, #0
 80106d4:	4590      	cmp	r8, r2
 80106d6:	bf8c      	ite	hi
 80106d8:	f04f 0800 	movhi.w	r8, #0
 80106dc:	f04f 0801 	movls.w	r8, #1
 80106e0:	4543      	cmp	r3, r8
 80106e2:	f04f 0000 	mov.w	r0, #0
 80106e6:	f000 80af 	beq.w	8010848 <pow+0x3a8>
 80106ea:	b01b      	add	sp, #108	; 0x6c
 80106ec:	ecbd 8b0a 	vpop	{d8-d12}
 80106f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f4:	f000 bc18 	b.w	8010f28 <__math_oflow>
 80106f8:	f1bc 0f00 	cmp.w	ip, #0
 80106fc:	d10e      	bne.n	801071c <pow+0x27c>
 80106fe:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010858 <pow+0x3b8>
 8010702:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010706:	ee26 7b07 	vmul.f64	d7, d6, d7
 801070a:	ec57 6b17 	vmov	r6, r7, d7
 801070e:	4b59      	ldr	r3, [pc, #356]	; (8010874 <pow+0x3d4>)
 8010710:	2100      	movs	r1, #0
 8010712:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010716:	1874      	adds	r4, r6, r1
 8010718:	eb42 0503 	adc.w	r5, r2, r3
 801071c:	2300      	movs	r3, #0
 801071e:	18e3      	adds	r3, r4, r3
 8010720:	4b55      	ldr	r3, [pc, #340]	; (8010878 <pow+0x3d8>)
 8010722:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010726:	eb45 0303 	adc.w	r3, r5, r3
 801072a:	1519      	asrs	r1, r3, #20
 801072c:	ee03 1a10 	vmov	s6, r1
 8010730:	0d1e      	lsrs	r6, r3, #20
 8010732:	2100      	movs	r1, #0
 8010734:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010738:	0536      	lsls	r6, r6, #20
 801073a:	1a63      	subs	r3, r4, r1
 801073c:	9312      	str	r3, [sp, #72]	; 0x48
 801073e:	eb65 0306 	sbc.w	r3, r5, r6
 8010742:	9313      	str	r3, [sp, #76]	; 0x4c
 8010744:	4b4d      	ldr	r3, [pc, #308]	; (801087c <pow+0x3dc>)
 8010746:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 801074a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801074e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8010752:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010756:	ed93 7b00 	vldr	d7, [r3]
 801075a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 801075e:	ed93 4b02 	vldr	d4, [r3, #8]
 8010762:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8010766:	eea3 5b07 	vfma.f64	d5, d3, d7
 801076a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 801076e:	ee36 9b05 	vadd.f64	d9, d6, d5
 8010772:	ee35 5b49 	vsub.f64	d5, d5, d9
 8010776:	eea3 7b04 	vfma.f64	d7, d3, d4
 801077a:	ed93 4b04 	vldr	d4, [r3, #16]
 801077e:	ee35 5b06 	vadd.f64	d5, d5, d6
 8010782:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010786:	ee26 4b04 	vmul.f64	d4, d6, d4
 801078a:	ed93 3b08 	vldr	d3, [r3, #32]
 801078e:	ee26 0b04 	vmul.f64	d0, d6, d4
 8010792:	eeb0 8b40 	vmov.f64	d8, d0
 8010796:	ee94 8b06 	vfnms.f64	d8, d4, d6
 801079a:	ed93 4b06 	vldr	d4, [r3, #24]
 801079e:	ee26 ab00 	vmul.f64	d10, d6, d0
 80107a2:	ee39 1b00 	vadd.f64	d1, d9, d0
 80107a6:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 80107aa:	eea6 4b03 	vfma.f64	d4, d6, d3
 80107ae:	ee39 9b41 	vsub.f64	d9, d9, d1
 80107b2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 80107b6:	ee37 8b08 	vadd.f64	d8, d7, d8
 80107ba:	ee39 9b00 	vadd.f64	d9, d9, d0
 80107be:	eea6 3b02 	vfma.f64	d3, d6, d2
 80107c2:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80107c6:	ee38 9b09 	vadd.f64	d9, d8, d9
 80107ca:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 80107ce:	eea6 2b0c 	vfma.f64	d2, d6, d12
 80107d2:	ed9d 6b00 	vldr	d6, [sp]
 80107d6:	eea0 3b02 	vfma.f64	d3, d0, d2
 80107da:	eea0 4b03 	vfma.f64	d4, d0, d3
 80107de:	eeaa 9b04 	vfma.f64	d9, d10, d4
 80107e2:	ee31 7b09 	vadd.f64	d7, d1, d9
 80107e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80107ea:	ed8d 6b02 	vstr	d6, [sp, #8]
 80107ee:	eeb0 3b46 	vmov.f64	d3, d6
 80107f2:	ee31 1b47 	vsub.f64	d1, d1, d7
 80107f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107fa:	ee31 9b09 	vadd.f64	d9, d1, d9
 80107fe:	ed9d 6b00 	vldr	d6, [sp]
 8010802:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8010806:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 801080a:	193c      	adds	r4, r7, r4
 801080c:	2c3e      	cmp	r4, #62	; 0x3e
 801080e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8010812:	eea6 3b09 	vfma.f64	d3, d6, d9
 8010816:	d934      	bls.n	8010882 <pow+0x3e2>
 8010818:	428c      	cmp	r4, r1
 801081a:	da0d      	bge.n	8010838 <pow+0x398>
 801081c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010820:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010824:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010828:	2800      	cmp	r0, #0
 801082a:	f43f ae87 	beq.w	801053c <pow+0x9c>
 801082e:	eeb1 0b40 	vneg.f64	d0, d0
 8010832:	e683      	b.n	801053c <pow+0x9c>
 8010834:	2000      	movs	r0, #0
 8010836:	e771      	b.n	801071c <pow+0x27c>
 8010838:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 801083c:	d920      	bls.n	8010880 <pow+0x3e0>
 801083e:	2a00      	cmp	r2, #0
 8010840:	f173 0300 	sbcs.w	r3, r3, #0
 8010844:	f6bf af51 	bge.w	80106ea <pow+0x24a>
 8010848:	b01b      	add	sp, #108	; 0x6c
 801084a:	ecbd 8b0a 	vpop	{d8-d12}
 801084e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010852:	f000 bb61 	b.w	8010f18 <__math_uflow>
 8010856:	bf00      	nop
 8010858:	00000000 	.word	0x00000000
 801085c:	43300000 	.word	0x43300000
 8010860:	fff00000 	.word	0xfff00000
 8010864:	3ff00000 	.word	0x3ff00000
 8010868:	ffe00000 	.word	0xffe00000
 801086c:	7fe00000 	.word	0x7fe00000
 8010870:	7fdfffff 	.word	0x7fdfffff
 8010874:	fcc00000 	.word	0xfcc00000
 8010878:	c0196aab 	.word	0xc0196aab
 801087c:	080114c8 	.word	0x080114c8
 8010880:	460f      	mov	r7, r1
 8010882:	4e65      	ldr	r6, [pc, #404]	; (8010a18 <pow+0x578>)
 8010884:	ed9d 4b02 	vldr	d4, [sp, #8]
 8010888:	ed96 6b02 	vldr	d6, [r6, #8]
 801088c:	ed96 7b00 	vldr	d7, [r6]
 8010890:	eeb0 5b46 	vmov.f64	d5, d6
 8010894:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010898:	ed8d 5b00 	vstr	d5, [sp]
 801089c:	ee35 6b46 	vsub.f64	d6, d5, d6
 80108a0:	eeb0 5b44 	vmov.f64	d5, d4
 80108a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108a8:	ed96 7b04 	vldr	d7, [r6, #16]
 80108ac:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 80108b0:	eea6 5b07 	vfma.f64	d5, d6, d7
 80108b4:	eeb0 7b45 	vmov.f64	d7, d5
 80108b8:	ed96 5b06 	vldr	d5, [r6, #24]
 80108bc:	1849      	adds	r1, r1, r1
 80108be:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 80108c2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 80108c6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80108ca:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 80108ce:	ee33 3b07 	vadd.f64	d3, d3, d7
 80108d2:	ee23 6b03 	vmul.f64	d6, d3, d3
 80108d6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 80108da:	ed96 5b08 	vldr	d5, [r6, #32]
 80108de:	ee33 7b07 	vadd.f64	d7, d3, d7
 80108e2:	1814      	adds	r4, r2, r0
 80108e4:	0365      	lsls	r5, r4, #13
 80108e6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 80108ea:	eea3 5b04 	vfma.f64	d5, d3, d4
 80108ee:	eea6 7b05 	vfma.f64	d7, d6, d5
 80108f2:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 80108f6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80108fa:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 80108fe:	2000      	movs	r0, #0
 8010900:	eb10 0a04 	adds.w	sl, r0, r4
 8010904:	eea3 5b04 	vfma.f64	d5, d3, d4
 8010908:	eb45 0b0c 	adc.w	fp, r5, ip
 801090c:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010910:	2f00      	cmp	r7, #0
 8010912:	d16a      	bne.n	80109ea <pow+0x54a>
 8010914:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8010918:	4639      	mov	r1, r7
 801091a:	ea50 0301 	orrs.w	r3, r0, r1
 801091e:	f04f 0300 	mov.w	r3, #0
 8010922:	d115      	bne.n	8010950 <pow+0x4b0>
 8010924:	eb1a 0303 	adds.w	r3, sl, r3
 8010928:	ee0b 3a10 	vmov	s22, r3
 801092c:	4b3b      	ldr	r3, [pc, #236]	; (8010a1c <pow+0x57c>)
 801092e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8010a00 <pow+0x560>
 8010932:	eb4b 0303 	adc.w	r3, fp, r3
 8010936:	ee0b 3a90 	vmov	s23, r3
 801093a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 801093e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8010942:	b01b      	add	sp, #108	; 0x6c
 8010944:	ecbd 8b0a 	vpop	{d8-d12}
 8010948:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094c:	f000 bb24 	b.w	8010f98 <__math_check_oflow>
 8010950:	eb1a 0303 	adds.w	r3, sl, r3
 8010954:	930a      	str	r3, [sp, #40]	; 0x28
 8010956:	4b32      	ldr	r3, [pc, #200]	; (8010a20 <pow+0x580>)
 8010958:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801095c:	eb4b 0303 	adc.w	r3, fp, r3
 8010960:	930b      	str	r3, [sp, #44]	; 0x2c
 8010962:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010966:	ee27 6b05 	vmul.f64	d6, d7, d5
 801096a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801096e:	eeb0 3bc7 	vabs.f64	d3, d7
 8010972:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8010976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8010a08 <pow+0x568>
 801097e:	d52b      	bpl.n	80109d8 <pow+0x538>
 8010980:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010984:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010990:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010994:	bf48      	it	mi
 8010996:	eeb0 4b43 	vmovmi.f64	d4, d3
 801099a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801099e:	ee34 5b43 	vsub.f64	d5, d4, d3
 80109a2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80109a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80109aa:	ee37 7b03 	vadd.f64	d7, d7, d3
 80109ae:	ee37 7b44 	vsub.f64	d7, d7, d4
 80109b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ba:	d105      	bne.n	80109c8 <pow+0x528>
 80109bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80109be:	463a      	mov	r2, r7
 80109c0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80109c4:	ec43 2b17 	vmov	d7, r2, r3
 80109c8:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 80109cc:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 80109d0:	ee26 6b00 	vmul.f64	d6, d6, d0
 80109d4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 80109d8:	ee27 0b00 	vmul.f64	d0, d7, d0
 80109dc:	b01b      	add	sp, #108	; 0x6c
 80109de:	ecbd 8b0a 	vpop	{d8-d12}
 80109e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e6:	f000 bace 	b.w	8010f86 <__math_check_uflow>
 80109ea:	ec4b ab10 	vmov	d0, sl, fp
 80109ee:	eea7 0b00 	vfma.f64	d0, d7, d0
 80109f2:	e5a3      	b.n	801053c <pow+0x9c>
 80109f4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8010a10 <pow+0x570>
 80109f8:	e5a0      	b.n	801053c <pow+0x9c>
 80109fa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80109fe:	e59d      	b.n	801053c <pow+0x9c>
 8010a00:	00000000 	.word	0x00000000
 8010a04:	7f000000 	.word	0x7f000000
 8010a08:	00000000 	.word	0x00000000
 8010a0c:	00100000 	.word	0x00100000
	...
 8010a18:	08012580 	.word	0x08012580
 8010a1c:	c0f00000 	.word	0xc0f00000
 8010a20:	3fe00000 	.word	0x3fe00000
 8010a24:	00000000 	.word	0x00000000

08010a28 <atan>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	eeb0 7b40 	vmov.f64	d7, d0
 8010a2e:	ee17 5a90 	vmov	r5, s15
 8010a32:	4b73      	ldr	r3, [pc, #460]	; (8010c00 <atan+0x1d8>)
 8010a34:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010a38:	429c      	cmp	r4, r3
 8010a3a:	dd13      	ble.n	8010a64 <atan+0x3c>
 8010a3c:	4b71      	ldr	r3, [pc, #452]	; (8010c04 <atan+0x1dc>)
 8010a3e:	429c      	cmp	r4, r3
 8010a40:	dc03      	bgt.n	8010a4a <atan+0x22>
 8010a42:	d107      	bne.n	8010a54 <atan+0x2c>
 8010a44:	ee10 3a10 	vmov	r3, s0
 8010a48:	b123      	cbz	r3, 8010a54 <atan+0x2c>
 8010a4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010a4e:	eeb0 0b47 	vmov.f64	d0, d7
 8010a52:	bd38      	pop	{r3, r4, r5, pc}
 8010a54:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010b90 <atan+0x168>
 8010a58:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010b98 <atan+0x170>
 8010a5c:	2d00      	cmp	r5, #0
 8010a5e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8010a62:	e7f4      	b.n	8010a4e <atan+0x26>
 8010a64:	4b68      	ldr	r3, [pc, #416]	; (8010c08 <atan+0x1e0>)
 8010a66:	429c      	cmp	r4, r3
 8010a68:	dc11      	bgt.n	8010a8e <atan+0x66>
 8010a6a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010a6e:	429c      	cmp	r4, r3
 8010a70:	dc0a      	bgt.n	8010a88 <atan+0x60>
 8010a72:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010a76:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8010ba0 <atan+0x178>
 8010a7a:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010a7e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a86:	dce2      	bgt.n	8010a4e <atan+0x26>
 8010a88:	f04f 33ff 	mov.w	r3, #4294967295
 8010a8c:	e013      	b.n	8010ab6 <atan+0x8e>
 8010a8e:	f000 f8c5 	bl	8010c1c <fabs>
 8010a92:	4b5e      	ldr	r3, [pc, #376]	; (8010c0c <atan+0x1e4>)
 8010a94:	429c      	cmp	r4, r3
 8010a96:	dc4f      	bgt.n	8010b38 <atan+0x110>
 8010a98:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010a9c:	429c      	cmp	r4, r3
 8010a9e:	dc41      	bgt.n	8010b24 <atan+0xfc>
 8010aa0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010aa4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010aae:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010ab2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010ab6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010ba8 <atan+0x180>
 8010aba:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010abe:	ee24 5b04 	vmul.f64	d5, d4, d4
 8010ac2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010bb0 <atan+0x188>
 8010ac6:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010aca:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010bb8 <atan+0x190>
 8010ace:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010ad2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010bc0 <atan+0x198>
 8010ad6:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010ada:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010bc8 <atan+0x1a0>
 8010ade:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010ae2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010bd0 <atan+0x1a8>
 8010ae6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010bd8 <atan+0x1b0>
 8010aea:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010aee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010be0 <atan+0x1b8>
 8010af2:	eea5 2b06 	vfma.f64	d2, d5, d6
 8010af6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010be8 <atan+0x1c0>
 8010afa:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010afe:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010bf0 <atan+0x1c8>
 8010b02:	eea6 2b05 	vfma.f64	d2, d6, d5
 8010b06:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010bf8 <atan+0x1d0>
 8010b0a:	1c5a      	adds	r2, r3, #1
 8010b0c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010b10:	ee26 6b05 	vmul.f64	d6, d6, d5
 8010b14:	eea3 6b04 	vfma.f64	d6, d3, d4
 8010b18:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010b1c:	d121      	bne.n	8010b62 <atan+0x13a>
 8010b1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b22:	e794      	b.n	8010a4e <atan+0x26>
 8010b24:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010b28:	2301      	movs	r3, #1
 8010b2a:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010b2e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010b32:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010b36:	e7be      	b.n	8010ab6 <atan+0x8e>
 8010b38:	4b35      	ldr	r3, [pc, #212]	; (8010c10 <atan+0x1e8>)
 8010b3a:	429c      	cmp	r4, r3
 8010b3c:	da0b      	bge.n	8010b56 <atan+0x12e>
 8010b3e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010b42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010b46:	ee30 5b47 	vsub.f64	d5, d0, d7
 8010b4a:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010b4e:	2302      	movs	r3, #2
 8010b50:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8010b54:	e7af      	b.n	8010ab6 <atan+0x8e>
 8010b56:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010b5a:	2303      	movs	r3, #3
 8010b5c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010b60:	e7a9      	b.n	8010ab6 <atan+0x8e>
 8010b62:	4a2c      	ldr	r2, [pc, #176]	; (8010c14 <atan+0x1ec>)
 8010b64:	492c      	ldr	r1, [pc, #176]	; (8010c18 <atan+0x1f0>)
 8010b66:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010b6a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010b6e:	ed93 5b00 	vldr	d5, [r3]
 8010b72:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010b76:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010b7a:	ed92 6b00 	vldr	d6, [r2]
 8010b7e:	2d00      	cmp	r5, #0
 8010b80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010b84:	bfb8      	it	lt
 8010b86:	eeb1 7b47 	vneglt.f64	d7, d7
 8010b8a:	e760      	b.n	8010a4e <atan+0x26>
 8010b8c:	f3af 8000 	nop.w
 8010b90:	54442d18 	.word	0x54442d18
 8010b94:	3ff921fb 	.word	0x3ff921fb
 8010b98:	54442d18 	.word	0x54442d18
 8010b9c:	bff921fb 	.word	0xbff921fb
 8010ba0:	8800759c 	.word	0x8800759c
 8010ba4:	7e37e43c 	.word	0x7e37e43c
 8010ba8:	e322da11 	.word	0xe322da11
 8010bac:	3f90ad3a 	.word	0x3f90ad3a
 8010bb0:	24760deb 	.word	0x24760deb
 8010bb4:	3fa97b4b 	.word	0x3fa97b4b
 8010bb8:	a0d03d51 	.word	0xa0d03d51
 8010bbc:	3fb10d66 	.word	0x3fb10d66
 8010bc0:	c54c206e 	.word	0xc54c206e
 8010bc4:	3fb745cd 	.word	0x3fb745cd
 8010bc8:	920083ff 	.word	0x920083ff
 8010bcc:	3fc24924 	.word	0x3fc24924
 8010bd0:	5555550d 	.word	0x5555550d
 8010bd4:	3fd55555 	.word	0x3fd55555
 8010bd8:	52defd9a 	.word	0x52defd9a
 8010bdc:	bfadde2d 	.word	0xbfadde2d
 8010be0:	2c6a6c2f 	.word	0x2c6a6c2f
 8010be4:	bfa2b444 	.word	0xbfa2b444
 8010be8:	af749a6d 	.word	0xaf749a6d
 8010bec:	bfb3b0f2 	.word	0xbfb3b0f2
 8010bf0:	fe231671 	.word	0xfe231671
 8010bf4:	bfbc71c6 	.word	0xbfbc71c6
 8010bf8:	9998ebc4 	.word	0x9998ebc4
 8010bfc:	bfc99999 	.word	0xbfc99999
 8010c00:	440fffff 	.word	0x440fffff
 8010c04:	7ff00000 	.word	0x7ff00000
 8010c08:	3fdbffff 	.word	0x3fdbffff
 8010c0c:	3ff2ffff 	.word	0x3ff2ffff
 8010c10:	40038000 	.word	0x40038000
 8010c14:	08012510 	.word	0x08012510
 8010c18:	08012530 	.word	0x08012530

08010c1c <fabs>:
 8010c1c:	ec51 0b10 	vmov	r0, r1, d0
 8010c20:	ee10 2a10 	vmov	r2, s0
 8010c24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c28:	ec43 2b10 	vmov	d0, r2, r3
 8010c2c:	4770      	bx	lr
	...

08010c30 <tanh>:
 8010c30:	b510      	push	{r4, lr}
 8010c32:	eeb0 6b40 	vmov.f64	d6, d0
 8010c36:	ee16 4a90 	vmov	r4, s13
 8010c3a:	4a25      	ldr	r2, [pc, #148]	; (8010cd0 <tanh+0xa0>)
 8010c3c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010c40:	4293      	cmp	r3, r2
 8010c42:	ed2d 8b02 	vpush	{d8}
 8010c46:	dd0c      	ble.n	8010c62 <tanh+0x32>
 8010c48:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010c4c:	ee80 7b06 	vdiv.f64	d7, d0, d6
 8010c50:	2c00      	cmp	r4, #0
 8010c52:	bfac      	ite	ge
 8010c54:	ee37 0b00 	vaddge.f64	d0, d7, d0
 8010c58:	ee37 0b40 	vsublt.f64	d0, d7, d0
 8010c5c:	ecbd 8b02 	vpop	{d8}
 8010c60:	bd10      	pop	{r4, pc}
 8010c62:	4a1c      	ldr	r2, [pc, #112]	; (8010cd4 <tanh+0xa4>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	dc30      	bgt.n	8010cca <tanh+0x9a>
 8010c68:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 8010c6c:	da06      	bge.n	8010c7c <tanh+0x4c>
 8010c6e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010c72:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010c76:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010c7a:	e7ef      	b.n	8010c5c <tanh+0x2c>
 8010c7c:	4a16      	ldr	r2, [pc, #88]	; (8010cd8 <tanh+0xa8>)
 8010c7e:	eeb0 8b00 	vmov.f64	d8, #0	; 0x40000000  2.0
 8010c82:	4293      	cmp	r3, r2
 8010c84:	dd12      	ble.n	8010cac <tanh+0x7c>
 8010c86:	f7ff ffc9 	bl	8010c1c <fabs>
 8010c8a:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010c8e:	f000 f997 	bl	8010fc0 <expm1>
 8010c92:	ee30 0b08 	vadd.f64	d0, d0, d8
 8010c96:	ee88 7b00 	vdiv.f64	d7, d8, d0
 8010c9a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010c9e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010ca2:	2c00      	cmp	r4, #0
 8010ca4:	bfb8      	it	lt
 8010ca6:	eeb1 0b40 	vneglt.f64	d0, d0
 8010caa:	e7d7      	b.n	8010c5c <tanh+0x2c>
 8010cac:	f7ff ffb6 	bl	8010c1c <fabs>
 8010cb0:	eeb8 7b00 	vmov.f64	d7, #128	; 0xc0000000 -2.0
 8010cb4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010cb8:	f000 f982 	bl	8010fc0 <expm1>
 8010cbc:	eeb1 6b40 	vneg.f64	d6, d0
 8010cc0:	ee30 8b08 	vadd.f64	d8, d0, d8
 8010cc4:	ee86 0b08 	vdiv.f64	d0, d6, d8
 8010cc8:	e7eb      	b.n	8010ca2 <tanh+0x72>
 8010cca:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010cce:	e7e8      	b.n	8010ca2 <tanh+0x72>
 8010cd0:	7fefffff 	.word	0x7fefffff
 8010cd4:	4035ffff 	.word	0x4035ffff
 8010cd8:	3fefffff 	.word	0x3fefffff

08010cdc <atan2>:
 8010cdc:	f000 b82c 	b.w	8010d38 <__ieee754_atan2>

08010ce0 <sqrt>:
 8010ce0:	b508      	push	{r3, lr}
 8010ce2:	ed2d 8b04 	vpush	{d8-d9}
 8010ce6:	eeb0 8b40 	vmov.f64	d8, d0
 8010cea:	f000 f8f3 	bl	8010ed4 <__ieee754_sqrt>
 8010cee:	4b10      	ldr	r3, [pc, #64]	; (8010d30 <sqrt+0x50>)
 8010cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	d011      	beq.n	8010d1c <sqrt+0x3c>
 8010cf8:	eeb4 8b48 	vcmp.f64	d8, d8
 8010cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d00:	d60c      	bvs.n	8010d1c <sqrt+0x3c>
 8010d02:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8010d28 <sqrt+0x48>
 8010d06:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0e:	d505      	bpl.n	8010d1c <sqrt+0x3c>
 8010d10:	f7fe fb6e 	bl	800f3f0 <__errno>
 8010d14:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010d18:	2321      	movs	r3, #33	; 0x21
 8010d1a:	6003      	str	r3, [r0, #0]
 8010d1c:	ecbd 8b04 	vpop	{d8-d9}
 8010d20:	bd08      	pop	{r3, pc}
 8010d22:	bf00      	nop
 8010d24:	f3af 8000 	nop.w
	...
 8010d30:	24000074 	.word	0x24000074
 8010d34:	00000000 	.word	0x00000000

08010d38 <__ieee754_atan2>:
 8010d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d3a:	ee11 6a10 	vmov	r6, s2
 8010d3e:	ee11 0a90 	vmov	r0, s3
 8010d42:	4273      	negs	r3, r6
 8010d44:	4f60      	ldr	r7, [pc, #384]	; (8010ec8 <__ieee754_atan2+0x190>)
 8010d46:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8010d4a:	4333      	orrs	r3, r6
 8010d4c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010d50:	42bb      	cmp	r3, r7
 8010d52:	ed8d 0b00 	vstr	d0, [sp]
 8010d56:	d80b      	bhi.n	8010d70 <__ieee754_atan2+0x38>
 8010d58:	e9dd c500 	ldrd	ip, r5, [sp]
 8010d5c:	f1cc 0100 	rsb	r1, ip, #0
 8010d60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010d64:	ea41 010c 	orr.w	r1, r1, ip
 8010d68:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8010d6c:	42b9      	cmp	r1, r7
 8010d6e:	d906      	bls.n	8010d7e <__ieee754_atan2+0x46>
 8010d70:	ed9d 7b00 	vldr	d7, [sp]
 8010d74:	ee37 7b01 	vadd.f64	d7, d7, d1
 8010d78:	ed8d 7b00 	vstr	d7, [sp]
 8010d7c:	e054      	b.n	8010e28 <__ieee754_atan2+0xf0>
 8010d7e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8010d82:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8010d86:	4331      	orrs	r1, r6
 8010d88:	d104      	bne.n	8010d94 <__ieee754_atan2+0x5c>
 8010d8a:	b003      	add	sp, #12
 8010d8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010d90:	f7ff be4a 	b.w	8010a28 <atan>
 8010d94:	1784      	asrs	r4, r0, #30
 8010d96:	f004 0402 	and.w	r4, r4, #2
 8010d9a:	ea53 010c 	orrs.w	r1, r3, ip
 8010d9e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8010da2:	d109      	bne.n	8010db8 <__ieee754_atan2+0x80>
 8010da4:	2c02      	cmp	r4, #2
 8010da6:	d069      	beq.n	8010e7c <__ieee754_atan2+0x144>
 8010da8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8010e90 <__ieee754_atan2+0x158>
 8010dac:	ed9d 6b00 	vldr	d6, [sp]
 8010db0:	2c03      	cmp	r4, #3
 8010db2:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8010db6:	e7df      	b.n	8010d78 <__ieee754_atan2+0x40>
 8010db8:	ea52 0106 	orrs.w	r1, r2, r6
 8010dbc:	d107      	bne.n	8010dce <__ieee754_atan2+0x96>
 8010dbe:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8010e98 <__ieee754_atan2+0x160>
 8010dc2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8010ea0 <__ieee754_atan2+0x168>
 8010dc6:	2d00      	cmp	r5, #0
 8010dc8:	fe26 7b07 	vselge.f64	d7, d6, d7
 8010dcc:	e7d4      	b.n	8010d78 <__ieee754_atan2+0x40>
 8010dce:	42ba      	cmp	r2, r7
 8010dd0:	d10f      	bne.n	8010df2 <__ieee754_atan2+0xba>
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	f104 34ff 	add.w	r4, r4, #4294967295
 8010dd8:	d107      	bne.n	8010dea <__ieee754_atan2+0xb2>
 8010dda:	2c02      	cmp	r4, #2
 8010ddc:	d851      	bhi.n	8010e82 <__ieee754_atan2+0x14a>
 8010dde:	4b3b      	ldr	r3, [pc, #236]	; (8010ecc <__ieee754_atan2+0x194>)
 8010de0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010de4:	ed94 7b00 	vldr	d7, [r4]
 8010de8:	e7c6      	b.n	8010d78 <__ieee754_atan2+0x40>
 8010dea:	2c02      	cmp	r4, #2
 8010dec:	d84c      	bhi.n	8010e88 <__ieee754_atan2+0x150>
 8010dee:	4b38      	ldr	r3, [pc, #224]	; (8010ed0 <__ieee754_atan2+0x198>)
 8010df0:	e7f6      	b.n	8010de0 <__ieee754_atan2+0xa8>
 8010df2:	42bb      	cmp	r3, r7
 8010df4:	d0e3      	beq.n	8010dbe <__ieee754_atan2+0x86>
 8010df6:	1a9b      	subs	r3, r3, r2
 8010df8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010dfc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010e00:	da16      	bge.n	8010e30 <__ieee754_atan2+0xf8>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	da01      	bge.n	8010e0a <__ieee754_atan2+0xd2>
 8010e06:	323c      	adds	r2, #60	; 0x3c
 8010e08:	db17      	blt.n	8010e3a <__ieee754_atan2+0x102>
 8010e0a:	ed9d 7b00 	vldr	d7, [sp]
 8010e0e:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8010e12:	f7ff ff03 	bl	8010c1c <fabs>
 8010e16:	f7ff fe07 	bl	8010a28 <atan>
 8010e1a:	ed8d 0b00 	vstr	d0, [sp]
 8010e1e:	2c01      	cmp	r4, #1
 8010e20:	d00e      	beq.n	8010e40 <__ieee754_atan2+0x108>
 8010e22:	2c02      	cmp	r4, #2
 8010e24:	d014      	beq.n	8010e50 <__ieee754_atan2+0x118>
 8010e26:	b9f4      	cbnz	r4, 8010e66 <__ieee754_atan2+0x12e>
 8010e28:	ed9d 0b00 	vldr	d0, [sp]
 8010e2c:	b003      	add	sp, #12
 8010e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e30:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8010e98 <__ieee754_atan2+0x160>
 8010e34:	ed8d 7b00 	vstr	d7, [sp]
 8010e38:	e7f1      	b.n	8010e1e <__ieee754_atan2+0xe6>
 8010e3a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8010ea8 <__ieee754_atan2+0x170>
 8010e3e:	e7f9      	b.n	8010e34 <__ieee754_atan2+0xfc>
 8010e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010e44:	9901      	ldr	r1, [sp, #4]
 8010e46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e4a:	e9cd 2300 	strd	r2, r3, [sp]
 8010e4e:	e7eb      	b.n	8010e28 <__ieee754_atan2+0xf0>
 8010e50:	ed9d 6b00 	vldr	d6, [sp]
 8010e54:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010eb0 <__ieee754_atan2+0x178>
 8010e58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010e5c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8010eb8 <__ieee754_atan2+0x180>
 8010e60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010e64:	e788      	b.n	8010d78 <__ieee754_atan2+0x40>
 8010e66:	ed9d 6b00 	vldr	d6, [sp]
 8010e6a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8010eb0 <__ieee754_atan2+0x178>
 8010e6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010e72:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8010eb8 <__ieee754_atan2+0x180>
 8010e76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e7a:	e77d      	b.n	8010d78 <__ieee754_atan2+0x40>
 8010e7c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010eb8 <__ieee754_atan2+0x180>
 8010e80:	e77a      	b.n	8010d78 <__ieee754_atan2+0x40>
 8010e82:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010ec0 <__ieee754_atan2+0x188>
 8010e86:	e777      	b.n	8010d78 <__ieee754_atan2+0x40>
 8010e88:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010ea8 <__ieee754_atan2+0x170>
 8010e8c:	e774      	b.n	8010d78 <__ieee754_atan2+0x40>
 8010e8e:	bf00      	nop
 8010e90:	54442d18 	.word	0x54442d18
 8010e94:	c00921fb 	.word	0xc00921fb
 8010e98:	54442d18 	.word	0x54442d18
 8010e9c:	3ff921fb 	.word	0x3ff921fb
 8010ea0:	54442d18 	.word	0x54442d18
 8010ea4:	bff921fb 	.word	0xbff921fb
	...
 8010eb0:	33145c07 	.word	0x33145c07
 8010eb4:	3ca1a626 	.word	0x3ca1a626
 8010eb8:	54442d18 	.word	0x54442d18
 8010ebc:	400921fb 	.word	0x400921fb
 8010ec0:	54442d18 	.word	0x54442d18
 8010ec4:	3fe921fb 	.word	0x3fe921fb
 8010ec8:	7ff00000 	.word	0x7ff00000
 8010ecc:	08012550 	.word	0x08012550
 8010ed0:	08012568 	.word	0x08012568

08010ed4 <__ieee754_sqrt>:
 8010ed4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010ed8:	4770      	bx	lr

08010eda <with_errno>:
 8010eda:	b513      	push	{r0, r1, r4, lr}
 8010edc:	4604      	mov	r4, r0
 8010ede:	ed8d 0b00 	vstr	d0, [sp]
 8010ee2:	f7fe fa85 	bl	800f3f0 <__errno>
 8010ee6:	ed9d 0b00 	vldr	d0, [sp]
 8010eea:	6004      	str	r4, [r0, #0]
 8010eec:	b002      	add	sp, #8
 8010eee:	bd10      	pop	{r4, pc}

08010ef0 <xflow>:
 8010ef0:	b082      	sub	sp, #8
 8010ef2:	b158      	cbz	r0, 8010f0c <xflow+0x1c>
 8010ef4:	eeb1 7b40 	vneg.f64	d7, d0
 8010ef8:	ed8d 7b00 	vstr	d7, [sp]
 8010efc:	ed9d 7b00 	vldr	d7, [sp]
 8010f00:	2022      	movs	r0, #34	; 0x22
 8010f02:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f06:	b002      	add	sp, #8
 8010f08:	f7ff bfe7 	b.w	8010eda <with_errno>
 8010f0c:	eeb0 7b40 	vmov.f64	d7, d0
 8010f10:	e7f2      	b.n	8010ef8 <xflow+0x8>
 8010f12:	0000      	movs	r0, r0
 8010f14:	0000      	movs	r0, r0
	...

08010f18 <__math_uflow>:
 8010f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010f20 <__math_uflow+0x8>
 8010f1c:	f7ff bfe8 	b.w	8010ef0 <xflow>
 8010f20:	00000000 	.word	0x00000000
 8010f24:	10000000 	.word	0x10000000

08010f28 <__math_oflow>:
 8010f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010f30 <__math_oflow+0x8>
 8010f2c:	f7ff bfe0 	b.w	8010ef0 <xflow>
 8010f30:	00000000 	.word	0x00000000
 8010f34:	70000000 	.word	0x70000000

08010f38 <__math_divzero>:
 8010f38:	b082      	sub	sp, #8
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010f40:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010f44:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010f48:	ed8d 7b00 	vstr	d7, [sp]
 8010f4c:	ed9d 0b00 	vldr	d0, [sp]
 8010f50:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010f60 <__math_divzero+0x28>
 8010f54:	2022      	movs	r0, #34	; 0x22
 8010f56:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010f5a:	b002      	add	sp, #8
 8010f5c:	f7ff bfbd 	b.w	8010eda <with_errno>
	...

08010f68 <__math_invalid>:
 8010f68:	eeb0 7b40 	vmov.f64	d7, d0
 8010f6c:	eeb4 7b47 	vcmp.f64	d7, d7
 8010f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f74:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010f78:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010f7c:	d602      	bvs.n	8010f84 <__math_invalid+0x1c>
 8010f7e:	2021      	movs	r0, #33	; 0x21
 8010f80:	f7ff bfab 	b.w	8010eda <with_errno>
 8010f84:	4770      	bx	lr

08010f86 <__math_check_uflow>:
 8010f86:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8e:	d102      	bne.n	8010f96 <__math_check_uflow+0x10>
 8010f90:	2022      	movs	r0, #34	; 0x22
 8010f92:	f7ff bfa2 	b.w	8010eda <with_errno>
 8010f96:	4770      	bx	lr

08010f98 <__math_check_oflow>:
 8010f98:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010fb8 <__math_check_oflow+0x20>
 8010f9c:	eeb0 7bc0 	vabs.f64	d7, d0
 8010fa0:	eeb4 7b46 	vcmp.f64	d7, d6
 8010fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa8:	dd02      	ble.n	8010fb0 <__math_check_oflow+0x18>
 8010faa:	2022      	movs	r0, #34	; 0x22
 8010fac:	f7ff bf95 	b.w	8010eda <with_errno>
 8010fb0:	4770      	bx	lr
 8010fb2:	bf00      	nop
 8010fb4:	f3af 8000 	nop.w
 8010fb8:	ffffffff 	.word	0xffffffff
 8010fbc:	7fefffff 	.word	0x7fefffff

08010fc0 <expm1>:
 8010fc0:	b417      	push	{r0, r1, r2, r4}
 8010fc2:	ee10 2a90 	vmov	r2, s1
 8010fc6:	49a6      	ldr	r1, [pc, #664]	; (8011260 <expm1+0x2a0>)
 8010fc8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010fcc:	428b      	cmp	r3, r1
 8010fce:	d932      	bls.n	8011036 <expm1+0x76>
 8010fd0:	49a4      	ldr	r1, [pc, #656]	; (8011264 <expm1+0x2a4>)
 8010fd2:	428b      	cmp	r3, r1
 8010fd4:	d921      	bls.n	801101a <expm1+0x5a>
 8010fd6:	49a4      	ldr	r1, [pc, #656]	; (8011268 <expm1+0x2a8>)
 8010fd8:	428b      	cmp	r3, r1
 8010fda:	d911      	bls.n	8011000 <expm1+0x40>
 8010fdc:	ee10 1a10 	vmov	r1, s0
 8010fe0:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8010fe4:	430b      	orrs	r3, r1
 8010fe6:	d005      	beq.n	8010ff4 <expm1+0x34>
 8010fe8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010fec:	b003      	add	sp, #12
 8010fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ff2:	4770      	bx	lr
 8010ff4:	2a00      	cmp	r2, #0
 8010ff6:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010ffa:	fe20 0b07 	vselge.f64	d0, d0, d7
 8010ffe:	e7f5      	b.n	8010fec <expm1+0x2c>
 8011000:	ed9f 7b7f 	vldr	d7, [pc, #508]	; 8011200 <expm1+0x240>
 8011004:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8011008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100c:	dd05      	ble.n	801101a <expm1+0x5a>
 801100e:	2000      	movs	r0, #0
 8011010:	b003      	add	sp, #12
 8011012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011016:	f7ff bf87 	b.w	8010f28 <__math_oflow>
 801101a:	2a00      	cmp	r2, #0
 801101c:	da5d      	bge.n	80110da <expm1+0x11a>
 801101e:	ed9f 7b7a 	vldr	d7, [pc, #488]	; 8011208 <expm1+0x248>
 8011022:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011026:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102e:	d554      	bpl.n	80110da <expm1+0x11a>
 8011030:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8011034:	e7da      	b.n	8010fec <expm1+0x2c>
 8011036:	498d      	ldr	r1, [pc, #564]	; (801126c <expm1+0x2ac>)
 8011038:	428b      	cmp	r3, r1
 801103a:	d96a      	bls.n	8011112 <expm1+0x152>
 801103c:	498c      	ldr	r1, [pc, #560]	; (8011270 <expm1+0x2b0>)
 801103e:	428b      	cmp	r3, r1
 8011040:	d84b      	bhi.n	80110da <expm1+0x11a>
 8011042:	2a00      	cmp	r2, #0
 8011044:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8011210 <expm1+0x250>
 8011048:	db40      	blt.n	80110cc <expm1+0x10c>
 801104a:	ee30 6b46 	vsub.f64	d6, d0, d6
 801104e:	ed9f 5b72 	vldr	d5, [pc, #456]	; 8011218 <expm1+0x258>
 8011052:	2301      	movs	r3, #1
 8011054:	ee36 0b45 	vsub.f64	d0, d6, d5
 8011058:	ee36 7b40 	vsub.f64	d7, d6, d0
 801105c:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011060:	ed9f 4b6f 	vldr	d4, [pc, #444]	; 8011220 <expm1+0x260>
 8011064:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011068:	ee20 2b03 	vmul.f64	d2, d0, d3
 801106c:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8011228 <expm1+0x268>
 8011070:	ee20 6b02 	vmul.f64	d6, d0, d2
 8011074:	eea6 5b04 	vfma.f64	d5, d6, d4
 8011078:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8011230 <expm1+0x270>
 801107c:	eea5 4b06 	vfma.f64	d4, d5, d6
 8011080:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 8011238 <expm1+0x278>
 8011084:	eea4 5b06 	vfma.f64	d5, d4, d6
 8011088:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8011240 <expm1+0x280>
 801108c:	eea5 4b06 	vfma.f64	d4, d5, d6
 8011090:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8011094:	eeb0 1b45 	vmov.f64	d1, d5
 8011098:	eea4 1b06 	vfma.f64	d1, d4, d6
 801109c:	eeb0 4b41 	vmov.f64	d4, d1
 80110a0:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 80110a4:	eea2 1b44 	vfms.f64	d1, d2, d4
 80110a8:	ee34 2b41 	vsub.f64	d2, d4, d1
 80110ac:	eeb1 4b08 	vmov.f64	d4, #24	; 0x40c00000  6.0
 80110b0:	eea0 4b41 	vfms.f64	d4, d0, d1
 80110b4:	eeb0 1b44 	vmov.f64	d1, d4
 80110b8:	ee82 4b01 	vdiv.f64	d4, d2, d1
 80110bc:	ee24 4b06 	vmul.f64	d4, d4, d6
 80110c0:	bbab      	cbnz	r3, 801112e <expm1+0x16e>
 80110c2:	ee90 6b04 	vfnms.f64	d6, d0, d4
 80110c6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80110ca:	e78f      	b.n	8010fec <expm1+0x2c>
 80110cc:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 8011248 <expm1+0x288>
 80110d0:	ee30 6b06 	vadd.f64	d6, d0, d6
 80110d4:	f04f 33ff 	mov.w	r3, #4294967295
 80110d8:	e7bc      	b.n	8011054 <expm1+0x94>
 80110da:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 80110de:	2a00      	cmp	r2, #0
 80110e0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80110e4:	fe27 7b06 	vselge.f64	d7, d7, d6
 80110e8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8011250 <expm1+0x290>
 80110ec:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8011218 <expm1+0x258>
 80110f0:	ee00 7b06 	vmla.f64	d7, d0, d6
 80110f4:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8011210 <expm1+0x250>
 80110f8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80110fc:	ee17 3a90 	vmov	r3, s15
 8011100:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011104:	eea7 0b46 	vfms.f64	d0, d7, d6
 8011108:	ee27 5b05 	vmul.f64	d5, d7, d5
 801110c:	eeb0 6b40 	vmov.f64	d6, d0
 8011110:	e7a0      	b.n	8011054 <expm1+0x94>
 8011112:	4a58      	ldr	r2, [pc, #352]	; (8011274 <expm1+0x2b4>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d808      	bhi.n	801112a <expm1+0x16a>
 8011118:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011258 <expm1+0x298>
 801111c:	ee30 7b07 	vadd.f64	d7, d0, d7
 8011120:	ee37 7b47 	vsub.f64	d7, d7, d7
 8011124:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011128:	e760      	b.n	8010fec <expm1+0x2c>
 801112a:	2300      	movs	r3, #0
 801112c:	e798      	b.n	8011060 <expm1+0xa0>
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	ee34 4b47 	vsub.f64	d4, d4, d7
 8011134:	ee94 7b00 	vfnms.f64	d7, d4, d0
 8011138:	ee37 7b46 	vsub.f64	d7, d7, d6
 801113c:	d106      	bne.n	801114c <expm1+0x18c>
 801113e:	ee30 7b47 	vsub.f64	d7, d0, d7
 8011142:	eebe 0b00 	vmov.f64	d0, #224	; 0xbf000000 -0.5
 8011146:	eea7 0b03 	vfma.f64	d0, d7, d3
 801114a:	e74f      	b.n	8010fec <expm1+0x2c>
 801114c:	2b01      	cmp	r3, #1
 801114e:	d118      	bne.n	8011182 <expm1+0x1c2>
 8011150:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8011154:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801115c:	d508      	bpl.n	8011170 <expm1+0x1b0>
 801115e:	ee30 0b03 	vadd.f64	d0, d0, d3
 8011162:	ee37 0b40 	vsub.f64	d0, d7, d0
 8011166:	eeb8 7b00 	vmov.f64	d7, #128	; 0xc0000000 -2.0
 801116a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801116e:	e73d      	b.n	8010fec <expm1+0x2c>
 8011170:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011174:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8011178:	eea0 5b07 	vfma.f64	d5, d0, d7
 801117c:	eeb0 0b45 	vmov.f64	d0, d5
 8011180:	e734      	b.n	8010fec <expm1+0x2c>
 8011182:	1c5a      	adds	r2, r3, #1
 8011184:	2a39      	cmp	r2, #57	; 0x39
 8011186:	ea4f 5403 	mov.w	r4, r3, lsl #20
 801118a:	d90e      	bls.n	80111aa <expm1+0x1ea>
 801118c:	ee37 0b40 	vsub.f64	d0, d7, d0
 8011190:	ee35 7b40 	vsub.f64	d7, d5, d0
 8011194:	ed8d 7b00 	vstr	d7, [sp]
 8011198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801119c:	9901      	ldr	r1, [sp, #4]
 801119e:	1863      	adds	r3, r4, r1
 80111a0:	ec43 2b10 	vmov	d0, r2, r3
 80111a4:	ee30 0b45 	vsub.f64	d0, d0, d5
 80111a8:	e720      	b.n	8010fec <expm1+0x2c>
 80111aa:	2b13      	cmp	r3, #19
 80111ac:	f04f 0000 	mov.w	r0, #0
 80111b0:	dc16      	bgt.n	80111e0 <expm1+0x220>
 80111b2:	ee37 0b40 	vsub.f64	d0, d7, d0
 80111b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80111ba:	fa42 f303 	asr.w	r3, r2, r3
 80111be:	f1c3 517f 	rsb	r1, r3, #1069547520	; 0x3fc00000
 80111c2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80111c6:	ec41 0b16 	vmov	d6, r0, r1
 80111ca:	ee36 7b40 	vsub.f64	d7, d6, d0
 80111ce:	ed8d 7b00 	vstr	d7, [sp]
 80111d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111d6:	9901      	ldr	r1, [sp, #4]
 80111d8:	1863      	adds	r3, r4, r1
 80111da:	ec43 2b10 	vmov	d0, r2, r3
 80111de:	e705      	b.n	8010fec <expm1+0x2c>
 80111e0:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80111e4:	3303      	adds	r3, #3
 80111e6:	0519      	lsls	r1, r3, #20
 80111e8:	ec41 0b16 	vmov	d6, r0, r1
 80111ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111f0:	ee30 7b47 	vsub.f64	d7, d0, d7
 80111f4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80111f8:	e7e9      	b.n	80111ce <expm1+0x20e>
 80111fa:	bf00      	nop
 80111fc:	f3af 8000 	nop.w
 8011200:	fefa39ef 	.word	0xfefa39ef
 8011204:	40862e42 	.word	0x40862e42
 8011208:	c2f8f359 	.word	0xc2f8f359
 801120c:	01a56e1f 	.word	0x01a56e1f
 8011210:	fee00000 	.word	0xfee00000
 8011214:	3fe62e42 	.word	0x3fe62e42
 8011218:	35793c76 	.word	0x35793c76
 801121c:	3dea39ef 	.word	0x3dea39ef
 8011220:	6e09c32d 	.word	0x6e09c32d
 8011224:	be8afdb7 	.word	0xbe8afdb7
 8011228:	86e65239 	.word	0x86e65239
 801122c:	3ed0cfca 	.word	0x3ed0cfca
 8011230:	9eaadbb7 	.word	0x9eaadbb7
 8011234:	bf14ce19 	.word	0xbf14ce19
 8011238:	19fe5585 	.word	0x19fe5585
 801123c:	3f5a01a0 	.word	0x3f5a01a0
 8011240:	111110f4 	.word	0x111110f4
 8011244:	bfa11111 	.word	0xbfa11111
 8011248:	35793c76 	.word	0x35793c76
 801124c:	bdea39ef 	.word	0xbdea39ef
 8011250:	652b82fe 	.word	0x652b82fe
 8011254:	3ff71547 	.word	0x3ff71547
 8011258:	8800759c 	.word	0x8800759c
 801125c:	7e37e43c 	.word	0x7e37e43c
 8011260:	40436879 	.word	0x40436879
 8011264:	40862e41 	.word	0x40862e41
 8011268:	7fefffff 	.word	0x7fefffff
 801126c:	3fd62e42 	.word	0x3fd62e42
 8011270:	3ff0a2b1 	.word	0x3ff0a2b1
 8011274:	3c8fffff 	.word	0x3c8fffff

08011278 <_init>:
 8011278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801127a:	bf00      	nop
 801127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801127e:	bc08      	pop	{r3}
 8011280:	469e      	mov	lr, r3
 8011282:	4770      	bx	lr

08011284 <_fini>:
 8011284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011286:	bf00      	nop
 8011288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801128a:	bc08      	pop	{r3}
 801128c:	469e      	mov	lr, r3
 801128e:	4770      	bx	lr
