
WIDM_A10_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b454  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c50  0800b6f0  0800b6f0  0001b6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d340  0800d340  0001d340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d344  0800d344  0001d344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  0800d348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000d554  24000078  0800d3c0  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400d5cc  0800d3c0  0002d5cc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003968a  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000059ac  00000000  00000000  00059730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000019c8  00000000  00000000  0005f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000017a0  00000000  00000000  00060aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c2fe  00000000  00000000  00062248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00020e53  00000000  00000000  0009e546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001716c1  00000000  00000000  000bf399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00230a5a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007230  00000000  00000000  00230ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b6d4 	.word	0x0800b6d4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	0800b6d4 	.word	0x0800b6d4

080002d8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002dc:	4b2f      	ldr	r3, [pc, #188]	; (800039c <MX_FDCAN1_Init+0xc4>)
 80002de:	4a30      	ldr	r2, [pc, #192]	; (80003a0 <MX_FDCAN1_Init+0xc8>)
 80002e0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80002e2:	4b2e      	ldr	r3, [pc, #184]	; (800039c <MX_FDCAN1_Init+0xc4>)
 80002e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002e8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002ea:	4b2c      	ldr	r3, [pc, #176]	; (800039c <MX_FDCAN1_Init+0xc4>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80002f0:	4b2a      	ldr	r3, [pc, #168]	; (800039c <MX_FDCAN1_Init+0xc4>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80002f6:	4b29      	ldr	r3, [pc, #164]	; (800039c <MX_FDCAN1_Init+0xc4>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80002fc:	4b27      	ldr	r3, [pc, #156]	; (800039c <MX_FDCAN1_Init+0xc4>)
 80002fe:	2200      	movs	r2, #0
 8000300:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000302:	4b26      	ldr	r3, [pc, #152]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000304:	2201      	movs	r2, #1
 8000306:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 32;
 8000308:	4b24      	ldr	r3, [pc, #144]	; (800039c <MX_FDCAN1_Init+0xc4>)
 800030a:	2220      	movs	r2, #32
 800030c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 127;
 800030e:	4b23      	ldr	r3, [pc, #140]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000310:	227f      	movs	r2, #127	; 0x7f
 8000312:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 32;
 8000314:	4b21      	ldr	r3, [pc, #132]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000316:	2220      	movs	r2, #32
 8000318:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800031a:	4b20      	ldr	r3, [pc, #128]	; (800039c <MX_FDCAN1_Init+0xc4>)
 800031c:	2201      	movs	r2, #1
 800031e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000322:	2204      	movs	r2, #4
 8000324:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 8000326:	4b1d      	ldr	r3, [pc, #116]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000328:	220b      	movs	r2, #11
 800032a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <MX_FDCAN1_Init+0xc4>)
 800032e:	2204      	movs	r2, #4
 8000330:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000334:	2200      	movs	r2, #0
 8000336:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_FDCAN1_Init+0xc4>)
 800033a:	2201      	movs	r2, #1
 800033c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000340:	2200      	movs	r2, #0
 8000342:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000346:	2204      	movs	r2, #4
 8000348:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_FDCAN1_Init+0xc4>)
 800034c:	2212      	movs	r2, #18
 800034e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000352:	2204      	movs	r2, #4
 8000354:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000358:	2212      	movs	r2, #18
 800035a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_FDCAN1_Init+0xc4>)
 800035e:	2204      	movs	r2, #4
 8000360:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000364:	2212      	movs	r2, #18
 8000366:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_FDCAN1_Init+0xc4>)
 800036a:	2204      	movs	r2, #4
 800036c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 4;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000370:	2204      	movs	r2, #4
 8000372:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000376:	2210      	movs	r2, #16
 8000378:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_FDCAN1_Init+0xc4>)
 800037c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000380:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_FDCAN1_Init+0xc4>)
 8000384:	2212      	movs	r2, #18
 8000386:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_FDCAN1_Init+0xc4>)
 800038a:	f001 f859 	bl	8001440 <HAL_FDCAN_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 8000394:	f000 fbe7 	bl	8000b66 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	240000a4 	.word	0x240000a4
 80003a0:	4000a000 	.word	0x4000a000

080003a4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b0b8      	sub	sp, #224	; 0xe0
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	22bc      	movs	r2, #188	; 0xbc
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f009 fc0f 	bl	8009be8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a31      	ldr	r2, [pc, #196]	; (8000494 <HAL_FDCAN_MspInit+0xf0>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d15a      	bne.n	800048a <HAL_FDCAN_MspInit+0xe6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80003d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80003da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80003de:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4618      	mov	r0, r3
 80003e6:	f004 f889 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80003f0:	f000 fbb9 	bl	8000b66 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80003f4:	4b28      	ldr	r3, [pc, #160]	; (8000498 <HAL_FDCAN_MspInit+0xf4>)
 80003f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80003fa:	4a27      	ldr	r2, [pc, #156]	; (8000498 <HAL_FDCAN_MspInit+0xf4>)
 80003fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000400:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000404:	4b24      	ldr	r3, [pc, #144]	; (8000498 <HAL_FDCAN_MspInit+0xf4>)
 8000406:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800040a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <HAL_FDCAN_MspInit+0xf4>)
 8000414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000418:	4a1f      	ldr	r2, [pc, #124]	; (8000498 <HAL_FDCAN_MspInit+0xf4>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000422:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <HAL_FDCAN_MspInit+0xf4>)
 8000424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = WIDM_FDCAN1_RX_Pin|WIDM_FDCAN1_TX_Pin;
 8000430:	2303      	movs	r3, #3
 8000432:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000436:	2302      	movs	r3, #2
 8000438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2300      	movs	r3, #0
 8000444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000448:	2309      	movs	r3, #9
 800044a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800044e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000452:	4619      	mov	r1, r3
 8000454:	4811      	ldr	r0, [pc, #68]	; (800049c <HAL_FDCAN_MspInit+0xf8>)
 8000456:	f001 ffd3 	bl	8002400 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2100      	movs	r1, #0
 800045e:	2013      	movs	r0, #19
 8000460:	f000 ff3d 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000464:	2013      	movs	r0, #19
 8000466:	f000 ff54 	bl	8001312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	2015      	movs	r0, #21
 8000470:	f000 ff35 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000474:	2015      	movs	r0, #21
 8000476:	f000 ff4c 	bl	8001312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 14, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	210e      	movs	r1, #14
 800047e:	203f      	movs	r0, #63	; 0x3f
 8000480:	f000 ff2d 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 8000484:	203f      	movs	r0, #63	; 0x3f
 8000486:	f000 ff44 	bl	8001312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800048a:	bf00      	nop
 800048c:	37e0      	adds	r7, #224	; 0xe0
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	4000a000 	.word	0x4000a000
 8000498:	58024400 	.word	0x58024400
 800049c:	58020c00 	.word	0x58020c00

080004a0 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	; 0x30
 80004a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 031c 	add.w	r3, r7, #28
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004b6:	4b5c      	ldr	r3, [pc, #368]	; (8000628 <MX_GPIO_Init+0x188>)
 80004b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004bc:	4a5a      	ldr	r2, [pc, #360]	; (8000628 <MX_GPIO_Init+0x188>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004c6:	4b58      	ldr	r3, [pc, #352]	; (8000628 <MX_GPIO_Init+0x188>)
 80004c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	61bb      	str	r3, [r7, #24]
 80004d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d4:	4b54      	ldr	r3, [pc, #336]	; (8000628 <MX_GPIO_Init+0x188>)
 80004d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004da:	4a53      	ldr	r2, [pc, #332]	; (8000628 <MX_GPIO_Init+0x188>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004e4:	4b50      	ldr	r3, [pc, #320]	; (8000628 <MX_GPIO_Init+0x188>)
 80004e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	4b4d      	ldr	r3, [pc, #308]	; (8000628 <MX_GPIO_Init+0x188>)
 80004f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f8:	4a4b      	ldr	r2, [pc, #300]	; (8000628 <MX_GPIO_Init+0x188>)
 80004fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000502:	4b49      	ldr	r3, [pc, #292]	; (8000628 <MX_GPIO_Init+0x188>)
 8000504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b45      	ldr	r3, [pc, #276]	; (8000628 <MX_GPIO_Init+0x188>)
 8000512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000516:	4a44      	ldr	r2, [pc, #272]	; (8000628 <MX_GPIO_Init+0x188>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000520:	4b41      	ldr	r3, [pc, #260]	; (8000628 <MX_GPIO_Init+0x188>)
 8000522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052e:	4b3e      	ldr	r3, [pc, #248]	; (8000628 <MX_GPIO_Init+0x188>)
 8000530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000534:	4a3c      	ldr	r2, [pc, #240]	; (8000628 <MX_GPIO_Init+0x188>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800053e:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <MX_GPIO_Init+0x188>)
 8000540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000544:	f003 0308 	and.w	r3, r3, #8
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	4b36      	ldr	r3, [pc, #216]	; (8000628 <MX_GPIO_Init+0x188>)
 800054e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000552:	4a35      	ldr	r2, [pc, #212]	; (8000628 <MX_GPIO_Init+0x188>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800055c:	4b32      	ldr	r3, [pc, #200]	; (8000628 <MX_GPIO_Init+0x188>)
 800055e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP11_Pin|TP12_Pin|TP9_Pin|TP10_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	210f      	movs	r1, #15
 800056e:	482f      	ldr	r0, [pc, #188]	; (800062c <MX_GPIO_Init+0x18c>)
 8000570:	f002 f8f6 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TP7_Pin|TP8_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	210c      	movs	r1, #12
 8000578:	482d      	ldr	r0, [pc, #180]	; (8000630 <MX_GPIO_Init+0x190>)
 800057a:	f002 f8f1 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP3_Pin|TP1_Pin|TP2_Pin|TP4_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	210f      	movs	r1, #15
 8000582:	482c      	ldr	r0, [pc, #176]	; (8000634 <MX_GPIO_Init+0x194>)
 8000584:	f002 f8ec 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOOT_RED_GPIO_Port, LED_BOOT_RED_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	482a      	ldr	r0, [pc, #168]	; (8000638 <MX_GPIO_Init+0x198>)
 8000590:	f002 f8e6 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = TP11_Pin|TP12_Pin|TP9_Pin|TP10_Pin;
 8000594:	230f      	movs	r3, #15
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2300      	movs	r3, #0
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	4619      	mov	r1, r3
 80005aa:	4820      	ldr	r0, [pc, #128]	; (800062c <MX_GPIO_Init+0x18c>)
 80005ac:	f001 ff28 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin;
 80005b0:	230c      	movs	r3, #12
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4619      	mov	r1, r3
 80005c6:	481a      	ldr	r0, [pc, #104]	; (8000630 <MX_GPIO_Init+0x190>)
 80005c8:	f001 ff1a 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP3_Pin|TP1_Pin|TP2_Pin|TP4_Pin;
 80005cc:	230f      	movs	r3, #15
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	4814      	ldr	r0, [pc, #80]	; (8000634 <MX_GPIO_Init+0x194>)
 80005e4:	f001 ff0c 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BOOT_RED_Pin;
 80005e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BOOT_RED_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_GPIO_Init+0x198>)
 8000602:	f001 fefd 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAG_IMU_RDY_Pin;
 8000606:	2308      	movs	r3, #8
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MAG_IMU_RDY_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <MX_GPIO_Init+0x198>)
 800061a:	f001 fef1 	bl	8002400 <HAL_GPIO_Init>

}
 800061e:	bf00      	nop
 8000620:	3730      	adds	r7, #48	; 0x30
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	58024400 	.word	0x58024400
 800062c:	58021000 	.word	0x58021000
 8000630:	58020800 	.word	0x58020800
 8000634:	58020000 	.word	0x58020000
 8000638:	58020c00 	.word	0x58020c00

0800063c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <MX_I2C1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <MX_I2C1_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000678:	f002 f88c 	bl	8002794 <HAL_I2C_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 fa70 	bl	8000b66 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <MX_I2C1_Init+0x74>)
 800068a:	f002 ff09 	bl	80034a0 <HAL_I2CEx_ConfigAnalogFilter>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 fa67 	bl	8000b66 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_I2C1_Init+0x74>)
 800069c:	f002 ff4b 	bl	8003536 <HAL_I2CEx_ConfigDigitalFilter>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 fa5e 	bl	8000b66 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	24000190 	.word	0x24000190
 80006b4:	40005400 	.word	0x40005400
 80006b8:	00b03fdb 	.word	0x00b03fdb

080006bc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_I2C3_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	; (8000734 <MX_I2C3_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_I2C3_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_I2C3_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_I2C3_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_I2C3_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_I2C3_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_I2C3_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C3_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C3_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C3_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_I2C3_Init+0x74>)
 80006f8:	f002 f84c 	bl	8002794 <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 fa30 	bl	8000b66 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_I2C3_Init+0x74>)
 800070a:	f002 fec9 	bl	80034a0 <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 fa27 	bl	8000b66 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_I2C3_Init+0x74>)
 800071c:	f002 ff0b 	bl	8003536 <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 fa1e 	bl	8000b66 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	24000144 	.word	0x24000144
 8000734:	40005c00 	.word	0x40005c00
 8000738:	00b03fdb 	.word	0x00b03fdb

0800073c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0bc      	sub	sp, #240	; 0xf0
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	22bc      	movs	r2, #188	; 0xbc
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f009 fa43 	bl	8009be8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a63      	ldr	r2, [pc, #396]	; (80008f4 <HAL_I2C_MspInit+0x1b8>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d14a      	bne.n	8000802 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800076c:	2308      	movs	r3, #8
 800076e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	4618      	mov	r0, r3
 800077c:	f003 febe 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000786:	f000 f9ee 	bl	8000b66 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	4a59      	ldr	r2, [pc, #356]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079a:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
 80007a6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACC_GYRO_IMU_I2C1_SCL_Pin|ACC_GYTO_IMU_I2C1_SDA_Pin;
 80007a8:	23c0      	movs	r3, #192	; 0xc0
 80007aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ae:	2312      	movs	r3, #18
 80007b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c0:	2304      	movs	r3, #4
 80007c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007ca:	4619      	mov	r1, r3
 80007cc:	484b      	ldr	r0, [pc, #300]	; (80008fc <HAL_I2C_MspInit+0x1c0>)
 80007ce:	f001 fe17 	bl	8002400 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007d2:	4b49      	ldr	r3, [pc, #292]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 80007d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80007d8:	4a47      	ldr	r2, [pc, #284]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 80007da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 80007e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80007e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69bb      	ldr	r3, [r7, #24]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	201f      	movs	r0, #31
 80007f6:	f000 fd72 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007fa:	201f      	movs	r0, #31
 80007fc:	f000 fd89 	bl	8001312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000800:	e074      	b.n	80008ec <HAL_I2C_MspInit+0x1b0>
  else if(i2cHandle->Instance==I2C3)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a3e      	ldr	r2, [pc, #248]	; (8000900 <HAL_I2C_MspInit+0x1c4>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d16f      	bne.n	80008ec <HAL_I2C_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800080c:	2308      	movs	r3, #8
 800080e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fe6e 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000826:	f000 f99e 	bl	8000b66 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	4a31      	ldr	r2, [pc, #196]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MAG_IMU_I2C3_SDA_Pin;
 8000866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800086a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086e:	2312      	movs	r3, #18
 8000870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000880:	2304      	movs	r3, #4
 8000882:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MAG_IMU_I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800088a:	4619      	mov	r1, r3
 800088c:	481d      	ldr	r0, [pc, #116]	; (8000904 <HAL_I2C_MspInit+0x1c8>)
 800088e:	f001 fdb7 	bl	8002400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_IMU_I2C3_SCL_Pin;
 8000892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089a:	2312      	movs	r3, #18
 800089c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008ac:	2304      	movs	r3, #4
 80008ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MAG_IMU_I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008b6:	4619      	mov	r1, r3
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <HAL_I2C_MspInit+0x1cc>)
 80008ba:	f001 fda1 	bl	8002400 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 80008c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 80008c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_I2C_MspInit+0x1bc>)
 80008d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2102      	movs	r1, #2
 80008e0:	2048      	movs	r0, #72	; 0x48
 80008e2:	f000 fcfc 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80008e6:	2048      	movs	r0, #72	; 0x48
 80008e8:	f000 fd13 	bl	8001312 <HAL_NVIC_EnableIRQ>
}
 80008ec:	bf00      	nop
 80008ee:	37f0      	adds	r7, #240	; 0xf0
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40005400 	.word	0x40005400
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58020400 	.word	0x58020400
 8000900:	40005c00 	.word	0x40005c00
 8000904:	58020800 	.word	0x58020800
 8000908:	58020000 	.word	0x58020000

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000912:	f000 f8fb 	bl	8000b0c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000916:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <main+0x104>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d11b      	bne.n	800095a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000922:	f3bf 8f4f 	dsb	sy
}
 8000926:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000928:	f3bf 8f6f 	isb	sy
}
 800092c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <main+0x104>)
 8000930:	2200      	movs	r2, #0
 8000932:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000936:	f3bf 8f4f 	dsb	sy
}
 800093a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800093c:	f3bf 8f6f 	isb	sy
}
 8000940:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000942:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <main+0x104>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a32      	ldr	r2, [pc, #200]	; (8000a10 <main+0x104>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800094e:	f3bf 8f4f 	dsb	sy
}
 8000952:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000954:	f3bf 8f6f 	isb	sy
}
 8000958:	e000      	b.n	800095c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800095a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <main+0x104>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d138      	bne.n	80009da <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <main+0x104>)
 800096a:	2200      	movs	r2, #0
 800096c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000970:	f3bf 8f4f 	dsb	sy
}
 8000974:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000976:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <main+0x104>)
 8000978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800097c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	0b5b      	lsrs	r3, r3, #13
 8000982:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000986:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000990:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	015a      	lsls	r2, r3, #5
 8000996:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800099a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009a0:	491b      	ldr	r1, [pc, #108]	; (8000a10 <main+0x104>)
 80009a2:	4313      	orrs	r3, r2
 80009a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	1e5a      	subs	r2, r3, #1
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1ef      	bne.n	8000992 <main+0x86>
    } while(sets-- != 0U);
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	60ba      	str	r2, [r7, #8]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1e5      	bne.n	8000988 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80009bc:	f3bf 8f4f 	dsb	sy
}
 80009c0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <main+0x104>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <main+0x104>)
 80009c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ce:	f3bf 8f4f 	dsb	sy
}
 80009d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d4:	f3bf 8f6f 	isb	sy
}
 80009d8:	e000      	b.n	80009dc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009da:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 fb06 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f81a 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff fd5c 	bl	80004a0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80009e8:	f7ff fc76 	bl	80002d8 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 80009ec:	f7ff fe26 	bl	800063c <MX_I2C1_Init>
  MX_TIM3_Init();
 80009f0:	f000 fa06 	bl	8000e00 <MX_TIM3_Init>
  MX_TIM6_Init();
 80009f4:	f000 fa52 	bl	8000e9c <MX_TIM6_Init>
  MX_I2C3_Init();
 80009f8:	f7ff fe60 	bl	80006bc <MX_I2C3_Init>
//  //DWT->LAR = 0xC5ACCE55;
//  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
//  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
//  DWT->CYCCNT = 0;

  Create_PDOTable_ObjDictionary();
 80009fc:	f005 fe8e 	bl	800671c <Create_PDOTable_ObjDictionary>
  Create_SDOTable_ObjDictionary();
 8000a00:	f005 fc42 	bl	8006288 <Create_SDOTable_ObjDictionary>

  MS_enum = IDLE;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <main+0x108>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]

  Init_Imu_Ctrl();
 8000a0a:	f007 fa35 	bl	8007e78 <Init_Imu_Ctrl>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <main+0x102>
 8000a10:	e000ed00 	.word	0xe000ed00
 8000a14:	2400cf40 	.word	0x2400cf40

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b09c      	sub	sp, #112	; 0x70
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	224c      	movs	r2, #76	; 0x4c
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f009 f8de 	bl	8009be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2220      	movs	r2, #32
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f009 f8d8 	bl	8009be8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f002 fdc9 	bl	80035d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <SystemClock_Config+0xec>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <SystemClock_Config+0xec>)
 8000a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <SystemClock_Config+0xec>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <SystemClock_Config+0xf0>)
 8000a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5c:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <SystemClock_Config+0xf0>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <SystemClock_Config+0xf0>)
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a70:	bf00      	nop
 8000a72:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <SystemClock_Config+0xec>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a7e:	d1f8      	bne.n	8000a72 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a80:	2301      	movs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a92:	2305      	movs	r3, #5
 8000a94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a96:	23c0      	movs	r3, #192	; 0xc0
 8000a98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fdc4 	bl	8003644 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ac2:	f000 f850 	bl	8000b66 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	233f      	movs	r3, #63	; 0x3f
 8000ac8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2303      	movs	r3, #3
 8000acc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ada:	2340      	movs	r3, #64	; 0x40
 8000adc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2104      	movs	r1, #4
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 f9d5 	bl	8003e9c <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000af8:	f000 f835 	bl	8000b66 <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3770      	adds	r7, #112	; 0x70
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	58024800 	.word	0x58024800
 8000b08:	58000400 	.word	0x58000400

08000b0c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b12:	463b      	mov	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b1e:	f000 fc13 	bl	8001348 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000b2a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000b2e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000b30:	230e      	movs	r3, #14
 8000b32:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b40:	2301      	movs	r3, #1
 8000b42:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b50:	463b      	mov	r3, r7
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fc30 	bl	80013b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b58:	2004      	movs	r0, #4
 8000b5a:	f000 fc0d 	bl	8001378 <HAL_MPU_Enable>

}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6a:	b672      	cpsid	i
}
 8000b6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <Error_Handler+0x8>

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_MspInit+0x30>)
 8000b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b7c:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x30>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	58024400 	.word	0x58024400

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 fa6e 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <FDCAN1_IT0_IRQHandler+0x10>)
 8000bfe:	f000 ff6f 	bl	8001ae0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	240000a4 	.word	0x240000a4

08000c0c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <FDCAN1_IT1_IRQHandler+0x10>)
 8000c12:	f000 ff65 	bl	8001ae0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	240000a4 	.word	0x240000a4

08000c20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM3_IRQHandler+0x10>)
 8000c26:	f004 fddd 	bl	80057e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2400d4f4 	.word	0x2400d4f4

08000c34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <I2C1_EV_IRQHandler+0x10>)
 8000c3a:	f002 f971 	bl	8002f20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	24000190 	.word	0x24000190

08000c48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <TIM6_DAC_IRQHandler+0x10>)
 8000c4e:	f004 fdc9 	bl	80057e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2400d540 	.word	0x2400d540

08000c5c <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <FDCAN_CAL_IRQHandler+0x10>)
 8000c62:	f000 ff3d 	bl	8001ae0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	240000a4 	.word	0x240000a4

08000c70 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <I2C3_EV_IRQHandler+0x10>)
 8000c76:	f002 f953 	bl	8002f20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24000144 	.word	0x24000144

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f008 ff58 	bl	8009b68 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	24080000 	.word	0x24080000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	24000094 	.word	0x24000094
 8000cec:	2400d5d0 	.word	0x2400d5d0

08000cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <SystemInit+0xe4>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <SystemInit+0xe4>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d04:	4b34      	ldr	r3, [pc, #208]	; (8000dd8 <SystemInit+0xe8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 030f 	and.w	r3, r3, #15
 8000d0c:	2b06      	cmp	r3, #6
 8000d0e:	d807      	bhi.n	8000d20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d10:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <SystemInit+0xe8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 030f 	bic.w	r3, r3, #15
 8000d18:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <SystemInit+0xe8>)
 8000d1a:	f043 0307 	orr.w	r3, r3, #7
 8000d1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <SystemInit+0xec>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2d      	ldr	r2, [pc, #180]	; (8000ddc <SystemInit+0xec>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <SystemInit+0xec>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <SystemInit+0xec>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4929      	ldr	r1, [pc, #164]	; (8000ddc <SystemInit+0xec>)
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <SystemInit+0xf0>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <SystemInit+0xe8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d007      	beq.n	8000d5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d4a:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <SystemInit+0xe8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f023 030f 	bic.w	r3, r3, #15
 8000d52:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <SystemInit+0xe8>)
 8000d54:	f043 0307 	orr.w	r3, r3, #7
 8000d58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <SystemInit+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <SystemInit+0xec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <SystemInit+0xec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <SystemInit+0xec>)
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <SystemInit+0xf4>)
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <SystemInit+0xec>)
 8000d74:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <SystemInit+0xf8>)
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <SystemInit+0xec>)
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <SystemInit+0xfc>)
 8000d7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <SystemInit+0xec>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <SystemInit+0xec>)
 8000d86:	4a19      	ldr	r2, [pc, #100]	; (8000dec <SystemInit+0xfc>)
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <SystemInit+0xec>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <SystemInit+0xec>)
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <SystemInit+0xfc>)
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <SystemInit+0xec>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <SystemInit+0xec>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <SystemInit+0xec>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <SystemInit+0xec>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <SystemInit+0x100>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <SystemInit+0x104>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dba:	d202      	bcs.n	8000dc2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <SystemInit+0x108>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <SystemInit+0x10c>)
 8000dc4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000dc8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00
 8000dd8:	52002000 	.word	0x52002000
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000de4:	02020200 	.word	0x02020200
 8000de8:	01ff0000 	.word	0x01ff0000
 8000dec:	01010280 	.word	0x01010280
 8000df0:	5c001000 	.word	0x5c001000
 8000df4:	ffff0000 	.word	0xffff0000
 8000df8:	51008108 	.word	0x51008108
 8000dfc:	52004000 	.word	0x52004000

08000e00 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e20:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <MX_TIM3_Init+0x98>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e26:	22ef      	movs	r2, #239	; 0xef
 8000e28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e46:	f004 fbfd 	bl	8005644 <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e50:	f7ff fe89 	bl	8000b66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e62:	f004 fddf 	bl	8005a24 <HAL_TIM_ConfigClockSource>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e6c:	f7ff fe7b 	bl	8000b66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e7e:	f005 f829 	bl	8005ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f7ff fe6d 	bl	8000b66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2400d4f4 	.word	0x2400d4f4
 8000e98:	40000400 	.word	0x40000400

08000e9c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <MX_TIM6_Init+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000eb4:	22ef      	movs	r2, #239	; 0xef
 8000eb6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000ec0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000ece:	f004 fbb9 	bl	8005644 <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ed8:	f7ff fe45 	bl	8000b66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_TIM6_Init+0x64>)
 8000eea:	f004 fff3 	bl	8005ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ef4:	f7ff fe37 	bl	8000b66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2400d540 	.word	0x2400d540
 8000f04:	40001000 	.word	0x40001000

08000f08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_TIM_Base_MspInit+0x84>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d117      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_TIM_Base_MspInit+0x88>)
 8000f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <HAL_TIM_Base_MspInit+0x88>)
 8000f22:	f043 0302 	orr.w	r3, r3, #2
 8000f26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_TIM_Base_MspInit+0x88>)
 8000f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2103      	movs	r1, #3
 8000f3c:	201d      	movs	r0, #29
 8000f3e:	f000 f9ce 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f42:	201d      	movs	r0, #29
 8000f44:	f000 f9e5 	bl	8001312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f48:	e01b      	b.n	8000f82 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM6)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_TIM_Base_MspInit+0x8c>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d116      	bne.n	8000f82 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_TIM_Base_MspInit+0x88>)
 8000f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_TIM_Base_MspInit+0x88>)
 8000f5c:	f043 0310 	orr.w	r3, r3, #16
 8000f60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_TIM_Base_MspInit+0x88>)
 8000f66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2102      	movs	r1, #2
 8000f76:	2036      	movs	r0, #54	; 0x36
 8000f78:	f000 f9b1 	bl	80012de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f7c:	2036      	movs	r0, #54	; 0x36
 8000f7e:	f000 f9c8 	bl	8001312 <HAL_NVIC_EnableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40000400 	.word	0x40000400
 8000f90:	58024400 	.word	0x58024400
 8000f94:	40001000 	.word	0x40001000

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f9c:	f7ff fea8 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f008 fdd5 	bl	8009b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff fc9f 	bl	800090c <main>
  bx  lr
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fd8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000fdc:	0800d348 	.word	0x0800d348
  ldr r2, =_sbss
 8000fe0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000fe4:	2400d5cc 	.word	0x2400d5cc

08000fe8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC3_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 f968 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ff8:	f003 f906 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_Init+0x68>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	f003 030f 	and.w	r3, r3, #15
 8001008:	4913      	ldr	r1, [pc, #76]	; (8001058 <HAL_Init+0x6c>)
 800100a:	5ccb      	ldrb	r3, [r1, r3]
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_Init+0x68>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_Init+0x6c>)
 8001020:	5cd3      	ldrb	r3, [r2, r3]
 8001022:	f003 031f 	and.w	r3, r3, #31
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_Init+0x70>)
 800102e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_Init+0x74>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001036:	200f      	movs	r0, #15
 8001038:	f000 f814 	bl	8001064 <HAL_InitTick>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e002      	b.n	800104c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001046:	f7ff fd93 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	58024400 	.word	0x58024400
 8001058:	0800b7c0 	.word	0x0800b7c0
 800105c:	24000004 	.word	0x24000004
 8001060:	24000000 	.word	0x24000000

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_InitTick+0x60>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e021      	b.n	80010bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_InitTick+0x64>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_InitTick+0x60>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f94d 	bl	800132e <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f917 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x68>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400000c 	.word	0x2400000c
 80010c8:	24000000 	.word	0x24000000
 80010cc:	24000008 	.word	0x24000008

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2400000c 	.word	0x2400000c
 80010f4:	2400d58c 	.word	0x2400d58c

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2400d58c 	.word	0x2400d58c

08001110 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetREVID+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0c1b      	lsrs	r3, r3, #16
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	5c001000 	.word	0x5c001000

08001128 <__NVIC_SetPriorityGrouping>:
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <__NVIC_SetPriorityGrouping+0x40>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	4313      	orrs	r3, r2
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <__NVIC_SetPriorityGrouping+0x40>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	05fa0000 	.word	0x05fa0000

08001170 <__NVIC_GetPriorityGrouping>:
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_EnableIRQ>:
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db0b      	blt.n	80011b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	f003 021f 	and.w	r2, r3, #31
 80011a4:	4907      	ldr	r1, [pc, #28]	; (80011c4 <__NVIC_EnableIRQ+0x38>)
 80011a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011aa:	095b      	lsrs	r3, r3, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	fa00 f202 	lsl.w	r2, r0, r2
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff29 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff40 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff33 	bl	800118c <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa4 	bl	8001284 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800134c:	f3bf 8f5f 	dmb	sy
}
 8001350:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <HAL_MPU_Disable+0x28>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_MPU_Disable+0x28>)
 8001358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_MPU_Disable+0x2c>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	e000ed90 	.word	0xe000ed90

08001378 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <HAL_MPU_Enable+0x38>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_MPU_Enable+0x3c>)
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_MPU_Enable+0x3c>)
 8001390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001394:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001396:	f3bf 8f4f 	dsb	sy
}
 800139a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800139c:	f3bf 8f6f 	isb	sy
}
 80013a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed90 	.word	0xe000ed90
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	785a      	ldrb	r2, [r3, #1]
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_MPU_ConfigRegion+0x84>)
 80013c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d029      	beq.n	8001424 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80013d0:	4a1a      	ldr	r2, [pc, #104]	; (800143c <HAL_MPU_ConfigRegion+0x84>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7b1b      	ldrb	r3, [r3, #12]
 80013dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7adb      	ldrb	r3, [r3, #11]
 80013e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7a9b      	ldrb	r3, [r3, #10]
 80013ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7b5b      	ldrb	r3, [r3, #13]
 80013f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7b9b      	ldrb	r3, [r3, #14]
 80013fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7bdb      	ldrb	r3, [r3, #15]
 8001402:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001404:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7a5b      	ldrb	r3, [r3, #9]
 800140a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800140c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7a1b      	ldrb	r3, [r3, #8]
 8001412:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001414:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800141e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001420:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001422:	e005      	b.n	8001430 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_MPU_ConfigRegion+0x84>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <HAL_MPU_ConfigRegion+0x84>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed90 	.word	0xe000ed90

08001440 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b098      	sub	sp, #96	; 0x60
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001448:	4a84      	ldr	r2, [pc, #528]	; (800165c <HAL_FDCAN_Init+0x21c>)
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	4611      	mov	r1, r2
 8001450:	224c      	movs	r2, #76	; 0x4c
 8001452:	4618      	mov	r0, r3
 8001454:	f008 fbba 	bl	8009bcc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1ca      	b.n	80017f8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a7e      	ldr	r2, [pc, #504]	; (8001660 <HAL_FDCAN_Init+0x220>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d106      	bne.n	800147a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001474:	461a      	mov	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7fe ff88 	bl	80003a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0210 	bic.w	r2, r2, #16
 80014a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff fe28 	bl	80010f8 <HAL_GetTick>
 80014a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014aa:	e014      	b.n	80014d6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014ac:	f7ff fe24 	bl	80010f8 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b0a      	cmp	r3, #10
 80014b8:	d90d      	bls.n	80014d6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e190      	b.n	80017f8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d0e3      	beq.n	80014ac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f4:	f7ff fe00 	bl	80010f8 <HAL_GetTick>
 80014f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014fa:	e014      	b.n	8001526 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014fc:	f7ff fdfc 	bl	80010f8 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b0a      	cmp	r3, #10
 8001508:	d90d      	bls.n	8001526 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e168      	b.n	80017f8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0e3      	beq.n	80014fc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699a      	ldr	r2, [r3, #24]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0202 	orr.w	r2, r2, #2
 8001542:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7c1b      	ldrb	r3, [r3, #16]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d108      	bne.n	800155e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800155a:	619a      	str	r2, [r3, #24]
 800155c:	e007      	b.n	800156e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800156c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7c5b      	ldrb	r3, [r3, #17]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699a      	ldr	r2, [r3, #24]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001584:	619a      	str	r2, [r3, #24]
 8001586:	e007      	b.n	8001598 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001596:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7c9b      	ldrb	r3, [r3, #18]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015ae:	619a      	str	r2, [r3, #24]
 80015b0:	e007      	b.n	80015c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80015e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0210 	bic.w	r2, r2, #16
 80015f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0204 	orr.w	r2, r2, #4
 800160e:	619a      	str	r2, [r3, #24]
 8001610:	e030      	b.n	8001674 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d02c      	beq.n	8001674 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d020      	beq.n	8001664 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699a      	ldr	r2, [r3, #24]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001630:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0210 	orr.w	r2, r2, #16
 8001640:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d114      	bne.n	8001674 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699a      	ldr	r2, [r3, #24]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0220 	orr.w	r2, r2, #32
 8001658:	619a      	str	r2, [r3, #24]
 800165a:	e00b      	b.n	8001674 <HAL_FDCAN_Init+0x234>
 800165c:	0800b6f0 	.word	0x0800b6f0
 8001660:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0220 	orr.w	r2, r2, #32
 8001672:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	3b01      	subs	r3, #1
 800167a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	3b01      	subs	r3, #1
 8001682:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001684:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800168c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	3b01      	subs	r3, #1
 8001696:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800169c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800169e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016a8:	d115      	bne.n	80016d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	3b01      	subs	r3, #1
 80016b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	3b01      	subs	r3, #1
 80016c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80016c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	3b01      	subs	r3, #1
 80016cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80016d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80016d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00a      	beq.n	80016f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fc:	4413      	add	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d012      	beq.n	8001728 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800170a:	f023 0107 	bic.w	r1, r3, #7
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001718:	4413      	add	r3, r2
 800171a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	2b00      	cmp	r3, #0
 800172e:	d012      	beq.n	8001756 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001738:	f023 0107 	bic.w	r1, r3, #7
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001746:	4413      	add	r3, r2
 8001748:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175a:	2b00      	cmp	r3, #0
 800175c:	d013      	beq.n	8001786 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001766:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001774:	4413      	add	r3, r2
 8001776:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800177a:	011a      	lsls	r2, r3, #4
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178a:	2b00      	cmp	r3, #0
 800178c:	d013      	beq.n	80017b6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001796:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017a4:	4413      	add	r3, r2
 80017a6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80017aa:	021a      	lsls	r2, r3, #8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_FDCAN_Init+0x3c0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d107      	bne.n	80017d0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f022 0203 	bic.w	r2, r2, #3
 80017ce:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fc83 	bl	80020f4 <FDCAN_CalcultateRamBlockAddresses>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80017f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3760      	adds	r7, #96	; 0x60
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	4000a000 	.word	0x4000a000

08001804 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800181c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800181e:	7efb      	ldrb	r3, [r7, #27]
 8001820:	2b02      	cmp	r3, #2
 8001822:	f040 814b 	bne.w	8001abc <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b40      	cmp	r3, #64	; 0x40
 800182a:	d14d      	bne.n	80018c8 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001834:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001842:	f043 0220 	orr.w	r2, r3, #32
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e13e      	b.n	8001ace <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001866:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e12c      	b.n	8001ace <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800187c:	0e1b      	lsrs	r3, r3, #24
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10b      	bne.n	800189e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800188e:	0fdb      	lsrs	r3, r3, #31
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001898:	d101      	bne.n	800189e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800189a:	2301      	movs	r3, #1
 800189c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	4413      	add	r3, r2
 80018b0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	69f9      	ldr	r1, [r7, #28]
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	e069      	b.n	800199c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b41      	cmp	r3, #65	; 0x41
 80018cc:	d14d      	bne.n	800196a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80018d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018e4:	f043 0220 	orr.w	r2, r3, #32
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0ed      	b.n	8001ace <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80018fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001908:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0db      	b.n	8001ace <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800191e:	0e1b      	lsrs	r3, r3, #24
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d10b      	bne.n	8001940 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001930:	0fdb      	lsrs	r3, r3, #31
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800193a:	d101      	bne.n	8001940 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800193c:	2301      	movs	r3, #1
 800193e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	4413      	add	r3, r2
 8001952:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	69f9      	ldr	r1, [r7, #28]
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	e018      	b.n	800199c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	429a      	cmp	r2, r3
 8001972:	d309      	bcc.n	8001988 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800197a:	f043 0220 	orr.w	r2, r3, #32
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0a2      	b.n	8001ace <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0c9b      	lsrs	r3, r3, #18
 80019b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e005      	b.n	80019cc <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	3304      	adds	r3, #4
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0e1b      	lsrs	r3, r3, #24
 8001a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0fda      	lsrs	r2, r3, #31
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	3304      	adds	r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
 8001a3e:	e00a      	b.n	8001a56 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	441a      	add	r2, r3
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	440b      	add	r3, r1
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	3301      	adds	r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	0c1b      	lsrs	r3, r3, #16
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001a5e:	5cd3      	ldrb	r3, [r2, r3]
 8001a60:	461a      	mov	r2, r3
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d3eb      	bcc.n	8001a40 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b40      	cmp	r3, #64	; 0x40
 8001a6c:	d105      	bne.n	8001a7a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001a78:	e01e      	b.n	8001ab8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b41      	cmp	r3, #65	; 0x41
 8001a7e:	d105      	bne.n	8001a8c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001a8a:	e015      	b.n	8001ab8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b1f      	cmp	r3, #31
 8001a90:	d808      	bhi.n	8001aa4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2101      	movs	r1, #1
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001aa2:	e009      	b.n	8001ab8 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 021f 	and.w	r2, r3, #31
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e008      	b.n	8001ace <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ac2:	f043 0208 	orr.w	r2, r3, #8
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
  }
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	372c      	adds	r7, #44	; 0x2c
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	0800b7d0 	.word	0x0800b7d0

08001ae0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b092      	sub	sp, #72	; 0x48
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001ae8:	4b90      	ldr	r3, [pc, #576]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	079b      	lsls	r3, r3, #30
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001af0:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	079b      	lsls	r3, r3, #30
 8001af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001af8:	4013      	ands	r3, r2
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b10:	4013      	ands	r3, r2
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b28:	4013      	ands	r3, r2
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b40:	4013      	ands	r3, r2
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b58:	4013      	ands	r3, r2
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b62:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b70:	4013      	ands	r3, r2
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d011      	beq.n	8001ba6 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00a      	beq.n	8001ba6 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b98:	651a      	str	r2, [r3, #80]	; 0x50
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fa5a 	bl	800205a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01e      	beq.n	8001bf2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d017      	beq.n	8001bf2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be2:	651a      	str	r2, [r3, #80]	; 0x50
 8001be4:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fa0b 	bl	8002008 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00d      	beq.n	8001c14 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_FDCAN_IRQHandler+0x250>)
 8001c00:	400b      	ands	r3, r1
 8001c02:	6513      	str	r3, [r2, #80]	; 0x50
 8001c04:	4a49      	ldr	r2, [pc, #292]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c08:	0f9b      	lsrs	r3, r3, #30
 8001c0a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001c0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f9c4 	bl	8001f9c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00d      	beq.n	8001c36 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c20:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_FDCAN_IRQHandler+0x250>)
 8001c22:	400b      	ands	r3, r1
 8001c24:	6513      	str	r3, [r2, #80]	; 0x50
 8001c26:	4a41      	ldr	r2, [pc, #260]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c2a:	0f9b      	lsrs	r3, r3, #30
 8001c2c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f9be 	bl	8001fb2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c42:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_FDCAN_IRQHandler+0x250>)
 8001c44:	400b      	ands	r3, r1
 8001c46:	6513      	str	r3, [r2, #80]	; 0x50
 8001c48:	4a38      	ldr	r2, [pc, #224]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4c:	0f9b      	lsrs	r3, r3, #30
 8001c4e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f005 fade 	bl	8007214 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00d      	beq.n	8001c7a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c64:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <HAL_FDCAN_IRQHandler+0x250>)
 8001c66:	400b      	ands	r3, r1
 8001c68:	6513      	str	r3, [r2, #80]	; 0x50
 8001c6a:	4a30      	ldr	r2, [pc, #192]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6e:	0f9b      	lsrs	r3, r3, #30
 8001c70:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001c72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f9a7 	bl	8001fc8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d011      	beq.n	8001cac <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c9e:	651a      	str	r2, [r3, #80]	; 0x50
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f999 	bl	8001fde <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01e      	beq.n	8001cf8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d017      	beq.n	8001cf8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cdc:	4013      	ands	r3, r2
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce8:	651a      	str	r2, [r3, #80]	; 0x50
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f97d 	bl	8001ff2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d016      	beq.n	8001d34 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00f      	beq.n	8001d34 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d1c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d1e:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_FDCAN_IRQHandler+0x24c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f97a 	bl	800201e <HAL_FDCAN_RxBufferNewMessageCallback>
 8001d2a:	e003      	b.n	8001d34 <HAL_FDCAN_IRQHandler+0x254>
 8001d2c:	4000a800 	.word	0x4000a800
 8001d30:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d011      	beq.n	8001d66 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d58:	651a      	str	r2, [r3, #80]	; 0x50
 8001d5a:	4b8d      	ldr	r3, [pc, #564]	; (8001f90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f966 	bl	8002032 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d011      	beq.n	8001d98 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001d8a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d8c:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f957 	bl	8002046 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d016      	beq.n	8001dd4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00f      	beq.n	8001dd4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8001dbe:	4b74      	ldr	r3, [pc, #464]	; (8001f90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00d      	beq.n	8001df6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001de0:	4b6c      	ldr	r3, [pc, #432]	; (8001f94 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001de2:	400b      	ands	r3, r1
 8001de4:	6513      	str	r3, [r2, #80]	; 0x50
 8001de6:	4a6a      	ldr	r2, [pc, #424]	; (8001f90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	0f9b      	lsrs	r3, r3, #30
 8001dec:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001dee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f946 	bl	8002082 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d011      	beq.n	8001e20 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e02:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001e04:	400b      	ands	r3, r1
 8001e06:	6513      	str	r3, [r2, #80]	; 0x50
 8001e08:	4a61      	ldr	r2, [pc, #388]	; (8001f90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0c:	0f9b      	lsrs	r3, r3, #30
 8001e0e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a5c      	ldr	r2, [pc, #368]	; (8001f98 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	f040 80a6 	bne.w	8001f78 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 809e 	beq.w	8001f78 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	4013      	ands	r3, r2
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e5e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	6a3a      	ldr	r2, [r7, #32]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001e76:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001e8e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001ea6:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8e7 	bl	8002098 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	6a3a      	ldr	r2, [r7, #32]
 8001ed6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8e7 	bl	80020ae <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01b      	beq.n	8001f26 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d014      	beq.n	8001f26 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f02:	0c1b      	lsrs	r3, r3, #16
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f12:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2240      	movs	r2, #64	; 0x40
 8001f1a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	6939      	ldr	r1, [r7, #16]
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8cf 	bl	80020c4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001f34:	69f9      	ldr	r1, [r7, #28]
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8d0 	bl	80020dc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00b      	beq.n	8001f78 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f873 	bl	800206e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3748      	adds	r7, #72	; 0x48
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	4000a800 	.word	0x4000a800
 8001f94:	3fcfffff 	.word	0x3fcfffff
 8001f98:	4000a000 	.word	0x4000a000

08001f9c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800210a:	4ba7      	ldr	r3, [pc, #668]	; (80023a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800210c:	4013      	ands	r3, r2
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	0091      	lsls	r1, r2, #2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	430b      	orrs	r3, r1
 8002118:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002124:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	4413      	add	r3, r2
 8002140:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800214a:	4b97      	ldr	r3, [pc, #604]	; (80023a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800214c:	4013      	ands	r3, r2
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	0091      	lsls	r1, r2, #2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	430b      	orrs	r3, r1
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002164:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	4413      	add	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800218c:	4b86      	ldr	r3, [pc, #536]	; (80023a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800218e:	4013      	ands	r3, r2
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	0091      	lsls	r1, r2, #2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80021a6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	041a      	lsls	r2, r3, #16
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4413      	add	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021d4:	4b74      	ldr	r3, [pc, #464]	; (80023a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	0091      	lsls	r1, r2, #2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80021ee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	041a      	lsls	r2, r3, #16
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4413      	add	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800221c:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800221e:	4013      	ands	r3, r2
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	0091      	lsls	r1, r2, #2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	430b      	orrs	r3, r1
 800222a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002248:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800224a:	4013      	ands	r3, r2
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	0091      	lsls	r1, r2, #2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	430b      	orrs	r3, r1
 8002256:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002262:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	041a      	lsls	r2, r3, #16
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	4413      	add	r3, r2
 8002280:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800228c:	4013      	ands	r3, r2
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	0091      	lsls	r1, r2, #2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	430b      	orrs	r3, r1
 8002298:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022a4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022c0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c8:	061a      	lsls	r2, r3, #24
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d8:	4b34      	ldr	r3, [pc, #208]	; (80023ac <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80022da:	4413      	add	r3, r2
 80022dc:	009a      	lsls	r2, r3, #2
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	441a      	add	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	441a      	add	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	441a      	add	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d915      	bls.n	80023d0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80023a4:	e006      	b.n	80023b4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80023a6:	bf00      	nop
 80023a8:	ffff0003 	.word	0xffff0003
 80023ac:	10002b00 	.word	0x10002b00
 80023b0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2203      	movs	r2, #3
 80023c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e010      	b.n	80023f2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e005      	b.n	80023e4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3304      	adds	r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3f3      	bcc.n	80023d8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800240e:	4b89      	ldr	r3, [pc, #548]	; (8002634 <HAL_GPIO_Init+0x234>)
 8002410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002412:	e194      	b.n	800273e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8186 	beq.w	8002738 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d005      	beq.n	8002444 <HAL_GPIO_Init+0x44>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d130      	bne.n	80024a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800247a:	2201      	movs	r2, #1
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f003 0201 	and.w	r2, r3, #1
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d017      	beq.n	80024e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d123      	bne.n	8002536 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	69b9      	ldr	r1, [r7, #24]
 8002532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0203 	and.w	r2, r3, #3
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80e0 	beq.w	8002738 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002578:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_GPIO_Init+0x238>)
 800257a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800257e:	4a2e      	ldr	r2, [pc, #184]	; (8002638 <HAL_GPIO_Init+0x238>)
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_GPIO_Init+0x238>)
 800258a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002596:	4a29      	ldr	r2, [pc, #164]	; (800263c <HAL_GPIO_Init+0x23c>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_GPIO_Init+0x240>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d052      	beq.n	8002668 <HAL_GPIO_Init+0x268>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <HAL_GPIO_Init+0x244>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d031      	beq.n	800262e <HAL_GPIO_Init+0x22e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1e      	ldr	r2, [pc, #120]	; (8002648 <HAL_GPIO_Init+0x248>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02b      	beq.n	800262a <HAL_GPIO_Init+0x22a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_GPIO_Init+0x24c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d025      	beq.n	8002626 <HAL_GPIO_Init+0x226>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	; (8002650 <HAL_GPIO_Init+0x250>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d01f      	beq.n	8002622 <HAL_GPIO_Init+0x222>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_GPIO_Init+0x254>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x21e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_GPIO_Init+0x258>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x21a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_GPIO_Init+0x25c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x216>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_GPIO_Init+0x260>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x212>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_GPIO_Init+0x264>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x20e>
 800260a:	2309      	movs	r3, #9
 800260c:	e02d      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800260e:	230a      	movs	r3, #10
 8002610:	e02b      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002612:	2308      	movs	r3, #8
 8002614:	e029      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002616:	2307      	movs	r3, #7
 8002618:	e027      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800261a:	2306      	movs	r3, #6
 800261c:	e025      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800261e:	2305      	movs	r3, #5
 8002620:	e023      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002622:	2304      	movs	r3, #4
 8002624:	e021      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002626:	2303      	movs	r3, #3
 8002628:	e01f      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800262a:	2302      	movs	r3, #2
 800262c:	e01d      	b.n	800266a <HAL_GPIO_Init+0x26a>
 800262e:	2301      	movs	r3, #1
 8002630:	e01b      	b.n	800266a <HAL_GPIO_Init+0x26a>
 8002632:	bf00      	nop
 8002634:	58000080 	.word	0x58000080
 8002638:	58024400 	.word	0x58024400
 800263c:	58000400 	.word	0x58000400
 8002640:	58020000 	.word	0x58020000
 8002644:	58020400 	.word	0x58020400
 8002648:	58020800 	.word	0x58020800
 800264c:	58020c00 	.word	0x58020c00
 8002650:	58021000 	.word	0x58021000
 8002654:	58021400 	.word	0x58021400
 8002658:	58021800 	.word	0x58021800
 800265c:	58021c00 	.word	0x58021c00
 8002660:	58022000 	.word	0x58022000
 8002664:	58022400 	.word	0x58022400
 8002668:	2300      	movs	r3, #0
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	f002 0203 	and.w	r2, r2, #3
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	4093      	lsls	r3, r2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267a:	4938      	ldr	r1, [pc, #224]	; (800275c <HAL_GPIO_Init+0x35c>)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	3302      	adds	r3, #2
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f ae63 	bne.w	8002414 <HAL_GPIO_Init+0x14>
  }
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	3724      	adds	r7, #36	; 0x24
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	58000400 	.word	0x58000400

08002760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
 800276c:	4613      	mov	r3, r2
 800276e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002770:	787b      	ldrb	r3, [r7, #1]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800277c:	e003      	b.n	8002786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	041a      	lsls	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07f      	b.n	80028a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fd ffbe 	bl	800073c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2224      	movs	r2, #36	; 0x24
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	e006      	b.n	800281c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800281a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d104      	bne.n	800282e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800282c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_I2C_Init+0x11c>)
 800283a:	430b      	orrs	r3, r1
 800283c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800284c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69d9      	ldr	r1, [r3, #28]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	02008000 	.word	0x02008000

080028b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	460b      	mov	r3, r1
 80028c8:	813b      	strh	r3, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	f040 80f9 	bne.w	8002ace <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x34>
 80028e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0ed      	b.n	8002ad0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_I2C_Mem_Write+0x4e>
 80028fe:	2302      	movs	r3, #2
 8002900:	e0e6      	b.n	8002ad0 <HAL_I2C_Mem_Write+0x21c>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800290a:	f7fe fbf5 	bl	80010f8 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2319      	movs	r3, #25
 8002916:	2201      	movs	r2, #1
 8002918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fbe5 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0d1      	b.n	8002ad0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2221      	movs	r2, #33	; 0x21
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a3a      	ldr	r2, [r7, #32]
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800294c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002954:	88f8      	ldrh	r0, [r7, #6]
 8002956:	893a      	ldrh	r2, [r7, #8]
 8002958:	8979      	ldrh	r1, [r7, #10]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4603      	mov	r3, r0
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 faf5 	bl	8002f54 <I2C_RequestMemoryWrite>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0a9      	b.n	8002ad0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d90e      	bls.n	80029a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fd4d 	bl	800343c <I2C_TransferConfig>
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fd3c 	bl	800343c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fbcf 	bl	800316c <I2C_WaitOnTXISFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e07b      	b.n	8002ad0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d034      	beq.n	8002a7c <HAL_I2C_Mem_Write+0x1c8>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d130      	bne.n	8002a7c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	2200      	movs	r2, #0
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fb61 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04d      	b.n	8002ad0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2bff      	cmp	r3, #255	; 0xff
 8002a3c:	d90e      	bls.n	8002a5c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	8979      	ldrh	r1, [r7, #10]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fcf1 	bl	800343c <I2C_TransferConfig>
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	8979      	ldrh	r1, [r7, #10]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fce0 	bl	800343c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d19e      	bne.n	80029c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fbae 	bl	80031ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e01a      	b.n	8002ad0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_I2C_Mem_Write+0x224>)
 8002aae:	400b      	ands	r3, r1
 8002ab0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	fe00e800 	.word	0xfe00e800

08002adc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	817b      	strh	r3, [r7, #10]
 8002aee:	460b      	mov	r3, r1
 8002af0:	813b      	strh	r3, [r7, #8]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	f040 80fd 	bne.w	8002cfe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_I2C_Mem_Read+0x34>
 8002b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0f1      	b.n	8002d00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_I2C_Mem_Read+0x4e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0ea      	b.n	8002d00 <HAL_I2C_Mem_Read+0x224>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b32:	f7fe fae1 	bl	80010f8 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2319      	movs	r3, #25
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fad1 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0d5      	b.n	8002d00 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2222      	movs	r2, #34	; 0x22
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b7c:	88f8      	ldrh	r0, [r7, #6]
 8002b7e:	893a      	ldrh	r2, [r7, #8]
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fa35 	bl	8002ffc <I2C_RequestMemoryRead>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0ad      	b.n	8002d00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2bff      	cmp	r3, #255	; 0xff
 8002bac:	d90e      	bls.n	8002bcc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	22ff      	movs	r2, #255	; 0xff
 8002bb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	8979      	ldrh	r1, [r7, #10]
 8002bbc:	4b52      	ldr	r3, [pc, #328]	; (8002d08 <HAL_I2C_Mem_Read+0x22c>)
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fc39 	bl	800343c <I2C_TransferConfig>
 8002bca:	e00f      	b.n	8002bec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	8979      	ldrh	r1, [r7, #10]
 8002bde:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <HAL_I2C_Mem_Read+0x22c>)
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fc28 	bl	800343c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 fa78 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07c      	b.n	8002d00 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d034      	beq.n	8002cac <HAL_I2C_Mem_Read+0x1d0>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d130      	bne.n	8002cac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	2200      	movs	r2, #0
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fa49 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e04d      	b.n	8002d00 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2bff      	cmp	r3, #255	; 0xff
 8002c6c:	d90e      	bls.n	8002c8c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	22ff      	movs	r2, #255	; 0xff
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	8979      	ldrh	r1, [r7, #10]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fbd9 	bl	800343c <I2C_TransferConfig>
 8002c8a:	e00f      	b.n	8002cac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fbc8 	bl	800343c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d19a      	bne.n	8002bec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fa96 	bl	80031ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e01a      	b.n	8002d00 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_I2C_Mem_Read+0x230>)
 8002cde:	400b      	ands	r3, r1
 8002ce0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e000      	b.n	8002d00 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
  }
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	80002400 	.word	0x80002400
 8002d0c:	fe00e800 	.word	0xfe00e800

08002d10 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	; 0x28
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	f040 80ef 	bne.w	8002f10 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0e5      	b.n	8002f12 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2C_IsDeviceReady+0x44>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e0de      	b.n	8002f12 <HAL_I2C_IsDeviceReady+0x202>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d105      	bne.n	8002d7e <HAL_I2C_IsDeviceReady+0x6e>
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_I2C_IsDeviceReady+0x20c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	e004      	b.n	8002d88 <HAL_I2C_IsDeviceReady+0x78>
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d84:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002d8e:	f7fe f9b3 	bl	80010f8 <HAL_GetTick>
 8002d92:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002dc0:	e034      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d01a      	beq.n	8002e00 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dca:	f7fe f995 	bl	80010f8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <HAL_I2C_IsDeviceReady+0xd0>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10f      	bne.n	8002e00 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e088      	b.n	8002f12 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <HAL_I2C_IsDeviceReady+0x128>
 8002e32:	7fbb      	ldrb	r3, [r7, #30]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0c4      	beq.n	8002dc2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d01a      	beq.n	8002e7c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2120      	movs	r1, #32
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f94b 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e058      	b.n	8002f12 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2220      	movs	r2, #32
 8002e66:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e04a      	b.n	8002f12 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2200      	movs	r2, #0
 8002e84:	2120      	movs	r1, #32
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f930 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e03d      	b.n	8002f12 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d118      	bne.n	8002ee0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ebc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f90f 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01c      	b.n	8002f12 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2220      	movs	r2, #32
 8002ede:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	f63f af3d 	bhi.w	8002d6a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	02002000 	.word	0x02002000

08002f20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	68f9      	ldr	r1, [r7, #12]
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	8979      	ldrh	r1, [r7, #10]
 8002f74:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <I2C_RequestMemoryWrite+0xa4>)
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fa5d 	bl	800343c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	69b9      	ldr	r1, [r7, #24]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8f0 	bl	800316c <I2C_WaitOnTXISFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02c      	b.n	8002ff0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f9c:	893b      	ldrh	r3, [r7, #8]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa6:	e015      	b.n	8002fd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fa8:	893b      	ldrh	r3, [r7, #8]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	69b9      	ldr	r1, [r7, #24]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f8d6 	bl	800316c <I2C_WaitOnTXISFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e012      	b.n	8002ff0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fca:	893b      	ldrh	r3, [r7, #8]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f884 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	80002000 	.word	0x80002000

08002ffc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	4608      	mov	r0, r1
 8003006:	4611      	mov	r1, r2
 8003008:	461a      	mov	r2, r3
 800300a:	4603      	mov	r3, r0
 800300c:	817b      	strh	r3, [r7, #10]
 800300e:	460b      	mov	r3, r1
 8003010:	813b      	strh	r3, [r7, #8]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	8979      	ldrh	r1, [r7, #10]
 800301c:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <I2C_RequestMemoryRead+0xa4>)
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fa0a 	bl	800343c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f89d 	bl	800316c <I2C_WaitOnTXISFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e02c      	b.n	8003096 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003042:	893b      	ldrh	r3, [r7, #8]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28
 800304c:	e015      	b.n	800307a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800304e:	893b      	ldrh	r3, [r7, #8]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	b29b      	uxth	r3, r3
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	69b9      	ldr	r1, [r7, #24]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f883 	bl	800316c <I2C_WaitOnTXISFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e012      	b.n	8003096 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003070:	893b      	ldrh	r3, [r7, #8]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2200      	movs	r2, #0
 8003082:	2140      	movs	r1, #64	; 0x40
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f831 	bl	80030ec <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	80002000 	.word	0x80002000

080030a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d103      	bne.n	80030c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d007      	beq.n	80030e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	619a      	str	r2, [r3, #24]
  }
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030fc:	e022      	b.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d01e      	beq.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7fd fff7 	bl	80010f8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d302      	bcc.n	800311c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d113      	bne.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e00f      	b.n	8003164 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4013      	ands	r3, r2
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	429a      	cmp	r2, r3
 8003160:	d0cd      	beq.n	80030fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003178:	e02c      	b.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 f870 	bl	8003264 <I2C_IsErrorOccurred>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e02a      	b.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d01e      	beq.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003196:	f7fd ffaf 	bl	80010f8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d302      	bcc.n	80031ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d113      	bne.n	80031d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e007      	b.n	80031e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d1cb      	bne.n	800317a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f8:	e028      	b.n	800324c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f830 	bl	8003264 <I2C_IsErrorOccurred>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e026      	b.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7fd ff73 	bl	80010f8 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d113      	bne.n	800324c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e007      	b.n	800325c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b20      	cmp	r3, #32
 8003258:	d1cf      	bne.n	80031fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d075      	beq.n	800337c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2210      	movs	r2, #16
 8003296:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003298:	e056      	b.n	8003348 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d052      	beq.n	8003348 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fd ff29 	bl	80010f8 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_IsErrorOccurred+0x54>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d147      	bne.n	8003348 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032da:	d12e      	bne.n	800333a <I2C_IsErrorOccurred+0xd6>
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e2:	d02a      	beq.n	800333a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d027      	beq.n	800333a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032fa:	f7fd fefd 	bl	80010f8 <HAL_GetTick>
 80032fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003300:	e01b      	b.n	800333a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003302:	f7fd fef9 	bl	80010f8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b19      	cmp	r3, #25
 800330e:	d914      	bls.n	800333a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b20      	cmp	r3, #32
 8003346:	d1dc      	bne.n	8003302 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	d003      	beq.n	800335e <I2C_IsErrorOccurred+0xfa>
 8003356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800335a:	2b00      	cmp	r3, #0
 800335c:	d09d      	beq.n	800329a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800335e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2220      	movs	r2, #32
 800336c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800339e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00b      	beq.n	80033c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	f043 0308 	orr.w	r3, r3, #8
 80033b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80033ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01c      	beq.n	800342c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff fe56 	bl	80030a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <I2C_IsErrorOccurred+0x1d4>)
 8003404:	400b      	ands	r3, r1
 8003406:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800342c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003430:	4618      	mov	r0, r3
 8003432:	3728      	adds	r7, #40	; 0x28
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	fe00e800 	.word	0xfe00e800

0800343c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	817b      	strh	r3, [r7, #10]
 800344a:	4613      	mov	r3, r2
 800344c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003454:	7a7b      	ldrb	r3, [r7, #9]
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800345c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	4313      	orrs	r3, r2
 8003466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800346a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	0d5b      	lsrs	r3, r3, #21
 8003476:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <I2C_TransferConfig+0x60>)
 800347c:	430b      	orrs	r3, r1
 800347e:	43db      	mvns	r3, r3
 8003480:	ea02 0103 	and.w	r1, r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	03ff63ff 	.word	0x03ff63ff

080034a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d138      	bne.n	8003528 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e032      	b.n	800352a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2224      	movs	r2, #36	; 0x24
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	d139      	bne.n	80035c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003556:	2302      	movs	r3, #2
 8003558:	e033      	b.n	80035c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2224      	movs	r2, #36	; 0x24
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003588:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e000      	b.n	80035c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_PWREx_ConfigSupply+0x70>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d00a      	beq.n	80035fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035e4:	4b16      	ldr	r3, [pc, #88]	; (8003640 <HAL_PWREx_ConfigSupply+0x70>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d001      	beq.n	80035f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e01f      	b.n	8003636 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e01d      	b.n	8003636 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_PWREx_ConfigSupply+0x70>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f023 0207 	bic.w	r2, r3, #7
 8003602:	490f      	ldr	r1, [pc, #60]	; (8003640 <HAL_PWREx_ConfigSupply+0x70>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4313      	orrs	r3, r2
 8003608:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800360a:	f7fd fd75 	bl	80010f8 <HAL_GetTick>
 800360e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003610:	e009      	b.n	8003626 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003612:	f7fd fd71 	bl	80010f8 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003620:	d901      	bls.n	8003626 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e007      	b.n	8003636 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_PWREx_ConfigSupply+0x70>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003632:	d1ee      	bne.n	8003612 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	58024800 	.word	0x58024800

08003644 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08c      	sub	sp, #48	; 0x30
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f000 bc1c 	b.w	8003e90 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8087 	beq.w	8003774 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003666:	4b9e      	ldr	r3, [pc, #632]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003670:	4b9b      	ldr	r3, [pc, #620]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	2b10      	cmp	r3, #16
 800367a:	d007      	beq.n	800368c <HAL_RCC_OscConfig+0x48>
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	2b18      	cmp	r3, #24
 8003680:	d110      	bne.n	80036a4 <HAL_RCC_OscConfig+0x60>
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d10b      	bne.n	80036a4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	4b94      	ldr	r3, [pc, #592]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d06c      	beq.n	8003772 <HAL_RCC_OscConfig+0x12e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d168      	bne.n	8003772 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e3f5      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d106      	bne.n	80036bc <HAL_RCC_OscConfig+0x78>
 80036ae:	4b8c      	ldr	r3, [pc, #560]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a8b      	ldr	r2, [pc, #556]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e02e      	b.n	800371a <HAL_RCC_OscConfig+0xd6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10c      	bne.n	80036de <HAL_RCC_OscConfig+0x9a>
 80036c4:	4b86      	ldr	r3, [pc, #536]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a85      	ldr	r2, [pc, #532]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a82      	ldr	r2, [pc, #520]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e01d      	b.n	800371a <HAL_RCC_OscConfig+0xd6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e6:	d10c      	bne.n	8003702 <HAL_RCC_OscConfig+0xbe>
 80036e8:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a7c      	ldr	r2, [pc, #496]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a79      	ldr	r2, [pc, #484]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80036fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	e00b      	b.n	800371a <HAL_RCC_OscConfig+0xd6>
 8003702:	4b77      	ldr	r3, [pc, #476]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a76      	ldr	r2, [pc, #472]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b74      	ldr	r3, [pc, #464]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a73      	ldr	r2, [pc, #460]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003718:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d013      	beq.n	800374a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd fce9 	bl	80010f8 <HAL_GetTick>
 8003726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372a:	f7fd fce5 	bl	80010f8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b64      	cmp	r3, #100	; 0x64
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e3a9      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800373c:	4b68      	ldr	r3, [pc, #416]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0xe6>
 8003748:	e014      	b.n	8003774 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7fd fcd5 	bl	80010f8 <HAL_GetTick>
 800374e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003752:	f7fd fcd1 	bl	80010f8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b64      	cmp	r3, #100	; 0x64
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e395      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003764:	4b5e      	ldr	r3, [pc, #376]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f0      	bne.n	8003752 <HAL_RCC_OscConfig+0x10e>
 8003770:	e000      	b.n	8003774 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003772:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80ca 	beq.w	8003916 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003782:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800378a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800378c:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_RCC_OscConfig+0x164>
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b18      	cmp	r3, #24
 800379c:	d156      	bne.n	800384c <HAL_RCC_OscConfig+0x208>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d151      	bne.n	800384c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a8:	4b4d      	ldr	r3, [pc, #308]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_OscConfig+0x17c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e367      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037c0:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 0219 	bic.w	r2, r3, #25
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4944      	ldr	r1, [pc, #272]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037d2:	f7fd fc91 	bl	80010f8 <HAL_GetTick>
 80037d6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037da:	f7fd fc8d 	bl	80010f8 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e351      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ec:	4b3c      	ldr	r3, [pc, #240]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	f7fd fc8a 	bl	8001110 <HAL_GetREVID>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8003802:	4293      	cmp	r3, r2
 8003804:	d817      	bhi.n	8003836 <HAL_RCC_OscConfig+0x1f2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d108      	bne.n	8003820 <HAL_RCC_OscConfig+0x1dc>
 800380e:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003816:	4a32      	ldr	r2, [pc, #200]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800381e:	e07a      	b.n	8003916 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b2f      	ldr	r3, [pc, #188]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	031b      	lsls	r3, r3, #12
 800382e:	492c      	ldr	r1, [pc, #176]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003834:	e06f      	b.n	8003916 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003836:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	4926      	ldr	r1, [pc, #152]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800384a:	e064      	b.n	8003916 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d047      	beq.n	80038e4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003854:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 0219 	bic.w	r2, r3, #25
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	491f      	ldr	r1, [pc, #124]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fd fc47 	bl	80010f8 <HAL_GetTick>
 800386a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800386e:	f7fd fc43 	bl	80010f8 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e307      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	f7fd fc40 	bl	8001110 <HAL_GetREVID>
 8003890:	4603      	mov	r3, r0
 8003892:	f241 0203 	movw	r2, #4099	; 0x1003
 8003896:	4293      	cmp	r3, r2
 8003898:	d817      	bhi.n	80038ca <HAL_RCC_OscConfig+0x286>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d108      	bne.n	80038b4 <HAL_RCC_OscConfig+0x270>
 80038a2:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038aa:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80038ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b0:	6053      	str	r3, [r2, #4]
 80038b2:	e030      	b.n	8003916 <HAL_RCC_OscConfig+0x2d2>
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	031b      	lsls	r3, r3, #12
 80038c2:	4907      	ldr	r1, [pc, #28]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
 80038c8:	e025      	b.n	8003916 <HAL_RCC_OscConfig+0x2d2>
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	4901      	ldr	r1, [pc, #4]	; (80038e0 <HAL_RCC_OscConfig+0x29c>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
 80038de:	e01a      	b.n	8003916 <HAL_RCC_OscConfig+0x2d2>
 80038e0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e4:	4b9e      	ldr	r3, [pc, #632]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a9d      	ldr	r2, [pc, #628]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fd fc02 	bl	80010f8 <HAL_GetTick>
 80038f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f8:	f7fd fbfe 	bl	80010f8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e2c2      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800390a:	4b95      	ldr	r3, [pc, #596]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80a9 	beq.w	8003a76 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003924:	4b8e      	ldr	r3, [pc, #568]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800392c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800392e:	4b8c      	ldr	r3, [pc, #560]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d007      	beq.n	800394a <HAL_RCC_OscConfig+0x306>
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b18      	cmp	r3, #24
 800393e:	d13a      	bne.n	80039b6 <HAL_RCC_OscConfig+0x372>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d135      	bne.n	80039b6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800394a:	4b85      	ldr	r3, [pc, #532]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_RCC_OscConfig+0x31e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e296      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003962:	f7fd fbd5 	bl	8001110 <HAL_GetREVID>
 8003966:	4603      	mov	r3, r0
 8003968:	f241 0203 	movw	r2, #4099	; 0x1003
 800396c:	4293      	cmp	r3, r2
 800396e:	d817      	bhi.n	80039a0 <HAL_RCC_OscConfig+0x35c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	2b20      	cmp	r3, #32
 8003976:	d108      	bne.n	800398a <HAL_RCC_OscConfig+0x346>
 8003978:	4b79      	ldr	r3, [pc, #484]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003980:	4a77      	ldr	r2, [pc, #476]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003986:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003988:	e075      	b.n	8003a76 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800398a:	4b75      	ldr	r3, [pc, #468]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	069b      	lsls	r3, r3, #26
 8003998:	4971      	ldr	r1, [pc, #452]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800399e:	e06a      	b.n	8003a76 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039a0:	4b6f      	ldr	r3, [pc, #444]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	496c      	ldr	r1, [pc, #432]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039b4:	e05f      	b.n	8003a76 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d042      	beq.n	8003a44 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039be:	4b68      	ldr	r3, [pc, #416]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a67      	ldr	r2, [pc, #412]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 80039c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fd fb95 	bl	80010f8 <HAL_GetTick>
 80039ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039d2:	f7fd fb91 	bl	80010f8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e255      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039e4:	4b5e      	ldr	r3, [pc, #376]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039f0:	f7fd fb8e 	bl	8001110 <HAL_GetREVID>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d817      	bhi.n	8003a2e <HAL_RCC_OscConfig+0x3ea>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d108      	bne.n	8003a18 <HAL_RCC_OscConfig+0x3d4>
 8003a06:	4b56      	ldr	r3, [pc, #344]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a0e:	4a54      	ldr	r2, [pc, #336]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	e02e      	b.n	8003a76 <HAL_RCC_OscConfig+0x432>
 8003a18:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	069b      	lsls	r3, r3, #26
 8003a26:	494e      	ldr	r1, [pc, #312]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
 8003a2c:	e023      	b.n	8003a76 <HAL_RCC_OscConfig+0x432>
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	061b      	lsls	r3, r3, #24
 8003a3c:	4948      	ldr	r1, [pc, #288]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60cb      	str	r3, [r1, #12]
 8003a42:	e018      	b.n	8003a76 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a44:	4b46      	ldr	r3, [pc, #280]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a45      	ldr	r2, [pc, #276]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fd fb52 	bl	80010f8 <HAL_GetTick>
 8003a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a58:	f7fd fb4e 	bl	80010f8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e212      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a6a:	4b3d      	ldr	r3, [pc, #244]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d036      	beq.n	8003af0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d019      	beq.n	8003abe <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8a:	4b35      	ldr	r3, [pc, #212]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8e:	4a34      	ldr	r2, [pc, #208]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a96:	f7fd fb2f 	bl	80010f8 <HAL_GetTick>
 8003a9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7fd fb2b 	bl	80010f8 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e1ef      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ab0:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x45a>
 8003abc:	e018      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003abe:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fd fb15 	bl	80010f8 <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fb11 	bl	80010f8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1d5      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ae4:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d039      	beq.n	8003b70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d019      	beq.n	8003b38 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b04:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a15      	ldr	r2, [pc, #84]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003b0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b10:	f7fd faf2 	bl	80010f8 <HAL_GetTick>
 8003b14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b18:	f7fd faee 	bl	80010f8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e1b2      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x4d4>
 8003b36:	e01b      	b.n	8003b70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b38:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <HAL_RCC_OscConfig+0x51c>)
 8003b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b44:	f7fd fad8 	bl	80010f8 <HAL_GetTick>
 8003b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b4c:	f7fd fad4 	bl	80010f8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d904      	bls.n	8003b64 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e198      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
 8003b5e:	bf00      	nop
 8003b60:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b64:	4ba3      	ldr	r3, [pc, #652]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ed      	bne.n	8003b4c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8081 	beq.w	8003c80 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b7e:	4b9e      	ldr	r3, [pc, #632]	; (8003df8 <HAL_RCC_OscConfig+0x7b4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a9d      	ldr	r2, [pc, #628]	; (8003df8 <HAL_RCC_OscConfig+0x7b4>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fab5 	bl	80010f8 <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fd fab1 	bl	80010f8 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e175      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba4:	4b94      	ldr	r3, [pc, #592]	; (8003df8 <HAL_RCC_OscConfig+0x7b4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x582>
 8003bb8:	4b8e      	ldr	r3, [pc, #568]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a8d      	ldr	r2, [pc, #564]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	e02d      	b.n	8003c22 <HAL_RCC_OscConfig+0x5de>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5a4>
 8003bce:	4b89      	ldr	r3, [pc, #548]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a88      	ldr	r2, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bda:	4b86      	ldr	r3, [pc, #536]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a85      	ldr	r2, [pc, #532]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	e01c      	b.n	8003c22 <HAL_RCC_OscConfig+0x5de>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x5c6>
 8003bf0:	4b80      	ldr	r3, [pc, #512]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	4a7f      	ldr	r2, [pc, #508]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	4b7d      	ldr	r3, [pc, #500]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a7c      	ldr	r2, [pc, #496]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0x5de>
 8003c0a:	4b7a      	ldr	r3, [pc, #488]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a79      	ldr	r2, [pc, #484]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	4b77      	ldr	r3, [pc, #476]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a76      	ldr	r2, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d015      	beq.n	8003c56 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fd fa65 	bl	80010f8 <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fd fa61 	bl	80010f8 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e123      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c48:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCC_OscConfig+0x5ee>
 8003c54:	e014      	b.n	8003c80 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c56:	f7fd fa4f 	bl	80010f8 <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fd fa4b 	bl	80010f8 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e10d      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c74:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8102 	beq.w	8003e8e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c8a:	4b5a      	ldr	r3, [pc, #360]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c92:	2b18      	cmp	r3, #24
 8003c94:	f000 80bd 	beq.w	8003e12 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	f040 8095 	bne.w	8003dcc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca2:	4b54      	ldr	r3, [pc, #336]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a53      	ldr	r2, [pc, #332]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fd fa23 	bl	80010f8 <HAL_GetTick>
 8003cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb6:	f7fd fa1f 	bl	80010f8 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0e3      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cc8:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd4:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd8:	4b48      	ldr	r3, [pc, #288]	; (8003dfc <HAL_RCC_OscConfig+0x7b8>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	4942      	ldr	r1, [pc, #264]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	628b      	str	r3, [r1, #40]	; 0x28
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	025b      	lsls	r3, r3, #9
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	3b01      	subs	r3, #1
 8003d18:	061b      	lsls	r3, r3, #24
 8003d1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d1e:	4935      	ldr	r1, [pc, #212]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d24:	4b33      	ldr	r3, [pc, #204]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a32      	ldr	r2, [pc, #200]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d30:	4b30      	ldr	r3, [pc, #192]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d34:	4b32      	ldr	r3, [pc, #200]	; (8003e00 <HAL_RCC_OscConfig+0x7bc>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d3c:	00d2      	lsls	r2, r2, #3
 8003d3e:	492d      	ldr	r1, [pc, #180]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d44:	4b2b      	ldr	r3, [pc, #172]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	f023 020c 	bic.w	r2, r3, #12
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4928      	ldr	r1, [pc, #160]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d56:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	f023 0202 	bic.w	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	4924      	ldr	r1, [pc, #144]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d68:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d74:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d80:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d8c:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d98:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fd f9a8 	bl	80010f8 <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd f9a4 	bl	80010f8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e068      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x768>
 8003dca:	e060      	b.n	8003e8e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <HAL_RCC_OscConfig+0x7b0>)
 8003dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fd f98e 	bl	80010f8 <HAL_GetTick>
 8003ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dde:	e011      	b.n	8003e04 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd f98a 	bl	80010f8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d90a      	bls.n	8003e04 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e04e      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
 8003df2:	bf00      	nop
 8003df4:	58024400 	.word	0x58024400
 8003df8:	58024800 	.word	0x58024800
 8003dfc:	fffffc0c 	.word	0xfffffc0c
 8003e00:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <HAL_RCC_OscConfig+0x854>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e7      	bne.n	8003de0 <HAL_RCC_OscConfig+0x79c>
 8003e10:	e03d      	b.n	8003e8e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <HAL_RCC_OscConfig+0x854>)
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e18:	4b1f      	ldr	r3, [pc, #124]	; (8003e98 <HAL_RCC_OscConfig+0x854>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d031      	beq.n	8003e8a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d12a      	bne.n	8003e8a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d122      	bne.n	8003e8a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d11a      	bne.n	8003e8a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	0a5b      	lsrs	r3, r3, #9
 8003e58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d111      	bne.n	8003e8a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d108      	bne.n	8003e8a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	0e1b      	lsrs	r3, r3, #24
 8003e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3730      	adds	r7, #48	; 0x30
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	58024400 	.word	0x58024400

08003e9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e19c      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b8a      	ldr	r3, [pc, #552]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d910      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b87      	ldr	r3, [pc, #540]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 020f 	bic.w	r2, r3, #15
 8003ec6:	4985      	ldr	r1, [pc, #532]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b83      	ldr	r3, [pc, #524]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e184      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	4b7b      	ldr	r3, [pc, #492]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d908      	bls.n	8003f0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003efc:	4b78      	ldr	r3, [pc, #480]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	4975      	ldr	r1, [pc, #468]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	4b70      	ldr	r3, [pc, #448]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d908      	bls.n	8003f3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	496a      	ldr	r1, [pc, #424]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	4b64      	ldr	r3, [pc, #400]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d908      	bls.n	8003f6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f58:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	495e      	ldr	r1, [pc, #376]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d908      	bls.n	8003f98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f86:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4953      	ldr	r1, [pc, #332]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	4b4d      	ldr	r3, [pc, #308]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d908      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f023 020f 	bic.w	r2, r3, #15
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4947      	ldr	r1, [pc, #284]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d055      	beq.n	800407e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003fd2:	4b43      	ldr	r3, [pc, #268]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4940      	ldr	r1, [pc, #256]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fec:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d121      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0f6      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d115      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0ea      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800401c:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0de      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0d6      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800403c:	4b28      	ldr	r3, [pc, #160]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f023 0207 	bic.w	r2, r3, #7
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4925      	ldr	r1, [pc, #148]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800404a:	4313      	orrs	r3, r2
 800404c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404e:	f7fd f853 	bl	80010f8 <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004054:	e00a      	b.n	800406c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004056:	f7fd f84f 	bl	80010f8 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0be      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406c:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	429a      	cmp	r2, r3
 800407c:	d1eb      	bne.n	8004056 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d010      	beq.n	80040ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	429a      	cmp	r2, r3
 8004098:	d208      	bcs.n	80040ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f023 020f 	bic.w	r2, r3, #15
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	490e      	ldr	r1, [pc, #56]	; (80040e0 <HAL_RCC_ClockConfig+0x244>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d214      	bcs.n	80040e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 020f 	bic.w	r2, r3, #15
 80040c2:	4906      	ldr	r1, [pc, #24]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b04      	ldr	r3, [pc, #16]	; (80040dc <HAL_RCC_ClockConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e086      	b.n	80041ea <HAL_RCC_ClockConfig+0x34e>
 80040dc:	52002000 	.word	0x52002000
 80040e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d010      	beq.n	8004112 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	4b3f      	ldr	r3, [pc, #252]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d208      	bcs.n	8004112 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004100:	4b3c      	ldr	r3, [pc, #240]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	4939      	ldr	r1, [pc, #228]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800410e:	4313      	orrs	r3, r2
 8004110:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	4b34      	ldr	r3, [pc, #208]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800412a:	429a      	cmp	r2, r3
 800412c:	d208      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	492e      	ldr	r1, [pc, #184]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800413c:	4313      	orrs	r3, r2
 800413e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	4b28      	ldr	r3, [pc, #160]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004158:	429a      	cmp	r2, r3
 800415a:	d208      	bcs.n	800416e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	4922      	ldr	r1, [pc, #136]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800416a:	4313      	orrs	r3, r2
 800416c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004186:	429a      	cmp	r2, r3
 8004188:	d208      	bcs.n	800419c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4917      	ldr	r1, [pc, #92]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 8004198:	4313      	orrs	r3, r2
 800419a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800419c:	f000 f834 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	4912      	ldr	r1, [pc, #72]	; (80041f8 <HAL_RCC_ClockConfig+0x35c>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <HAL_RCC_ClockConfig+0x358>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <HAL_RCC_ClockConfig+0x35c>)
 80041c4:	5cd3      	ldrb	r3, [r2, r3]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_RCC_ClockConfig+0x360>)
 80041d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041d4:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <HAL_RCC_ClockConfig+0x364>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_RCC_ClockConfig+0x368>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fc ff40 	bl	8001064 <HAL_InitTick>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
 80041f8:	0800b7c0 	.word	0x0800b7c0
 80041fc:	24000004 	.word	0x24000004
 8004200:	24000000 	.word	0x24000000
 8004204:	24000008 	.word	0x24000008

08004208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	; 0x24
 800420c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420e:	4bb3      	ldr	r3, [pc, #716]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004216:	2b18      	cmp	r3, #24
 8004218:	f200 8155 	bhi.w	80044c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_RCC_GetSysClockFreq+0x1c>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004289 	.word	0x08004289
 8004228:	080044c7 	.word	0x080044c7
 800422c:	080044c7 	.word	0x080044c7
 8004230:	080044c7 	.word	0x080044c7
 8004234:	080044c7 	.word	0x080044c7
 8004238:	080044c7 	.word	0x080044c7
 800423c:	080044c7 	.word	0x080044c7
 8004240:	080044c7 	.word	0x080044c7
 8004244:	080042af 	.word	0x080042af
 8004248:	080044c7 	.word	0x080044c7
 800424c:	080044c7 	.word	0x080044c7
 8004250:	080044c7 	.word	0x080044c7
 8004254:	080044c7 	.word	0x080044c7
 8004258:	080044c7 	.word	0x080044c7
 800425c:	080044c7 	.word	0x080044c7
 8004260:	080044c7 	.word	0x080044c7
 8004264:	080042b5 	.word	0x080042b5
 8004268:	080044c7 	.word	0x080044c7
 800426c:	080044c7 	.word	0x080044c7
 8004270:	080044c7 	.word	0x080044c7
 8004274:	080044c7 	.word	0x080044c7
 8004278:	080044c7 	.word	0x080044c7
 800427c:	080044c7 	.word	0x080044c7
 8004280:	080044c7 	.word	0x080044c7
 8004284:	080042bb 	.word	0x080042bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004288:	4b94      	ldr	r3, [pc, #592]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004294:	4b91      	ldr	r3, [pc, #580]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	08db      	lsrs	r3, r3, #3
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	4a90      	ldr	r2, [pc, #576]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
 80042a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042a6:	e111      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042a8:	4b8d      	ldr	r3, [pc, #564]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042aa:	61bb      	str	r3, [r7, #24]
    break;
 80042ac:	e10e      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042ae:	4b8d      	ldr	r3, [pc, #564]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042b0:	61bb      	str	r3, [r7, #24]
    break;
 80042b2:	e10b      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80042b4:	4b8c      	ldr	r3, [pc, #560]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042b6:	61bb      	str	r3, [r7, #24]
    break;
 80042b8:	e108      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042ba:	4b88      	ldr	r3, [pc, #544]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80042c4:	4b85      	ldr	r3, [pc, #532]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042d0:	4b82      	ldr	r3, [pc, #520]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80042da:	4b80      	ldr	r3, [pc, #512]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	08db      	lsrs	r3, r3, #3
 80042e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80e1 	beq.w	80044c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b02      	cmp	r3, #2
 8004302:	f000 8083 	beq.w	800440c <HAL_RCC_GetSysClockFreq+0x204>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f200 80a1 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x248>
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x114>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d056      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800431a:	e099      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800431c:	4b6f      	ldr	r3, [pc, #444]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02d      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004328:	4b6c      	ldr	r3, [pc, #432]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	4a6b      	ldr	r2, [pc, #428]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b62      	ldr	r3, [pc, #392]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a02 	vldr	s12, [r7, #8]
 8004366:	eddf 5a61 	vldr	s11, [pc, #388]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004382:	e087      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80044f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b51      	ldr	r3, [pc, #324]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c6:	e065      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80044f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b40      	ldr	r3, [pc, #256]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80043ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800440a:	e043      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eddf 6a38 	vldr	s13, [pc, #224]	; 80044f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b2f      	ldr	r3, [pc, #188]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004432:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800444e:	e021      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80044f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a02 	vldr	s12, [r7, #8]
 8004476:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80044ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004492:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	0a5b      	lsrs	r3, r3, #9
 800449a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800449e:	3301      	adds	r3, #1
 80044a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	ee07 3a90 	vmov	s15, r3
 80044a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80044b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b8:	ee17 3a90 	vmov	r3, s15
 80044bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80044be:	e005      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	61bb      	str	r3, [r7, #24]
    break;
 80044c4:	e002      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044c8:	61bb      	str	r3, [r7, #24]
    break;
 80044ca:	bf00      	nop
  }

  return sysclockfreq;
 80044cc:	69bb      	ldr	r3, [r7, #24]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	; 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	58024400 	.word	0x58024400
 80044e0:	03d09000 	.word	0x03d09000
 80044e4:	003d0900 	.word	0x003d0900
 80044e8:	017d7840 	.word	0x017d7840
 80044ec:	46000000 	.word	0x46000000
 80044f0:	4c742400 	.word	0x4c742400
 80044f4:	4a742400 	.word	0x4a742400
 80044f8:	4bbebc20 	.word	0x4bbebc20

080044fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004508:	2300      	movs	r3, #0
 800450a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d03f      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004520:	d02a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004522:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004526:	d824      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800452c:	d018      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800452e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004532:	d81e      	bhi.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800453c:	d007      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800453e:	e018      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004540:	4bab      	ldr	r3, [pc, #684]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	4aaa      	ldr	r2, [pc, #680]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800454a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800454c:	e015      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2102      	movs	r1, #2
 8004554:	4618      	mov	r0, r3
 8004556:	f000 ff11 	bl	800537c <RCCEx_PLL2_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800455e:	e00c      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3324      	adds	r3, #36	; 0x24
 8004564:	2102      	movs	r1, #2
 8004566:	4618      	mov	r0, r3
 8004568:	f000 ffba 	bl	80054e0 <RCCEx_PLL3_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
      break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800457a:	7dfb      	ldrb	r3, [r7, #23]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004580:	4b9b      	ldr	r3, [pc, #620]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800458c:	4998      	ldr	r1, [pc, #608]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	650b      	str	r3, [r1, #80]	; 0x50
 8004592:	e001      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03d      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d826      	bhi.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045c9 	.word	0x080045c9
 80045b8:	080045d7 	.word	0x080045d7
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	08004601 	.word	0x08004601
 80045c4:	08004601 	.word	0x08004601
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c8:	4b89      	ldr	r3, [pc, #548]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	4a88      	ldr	r2, [pc, #544]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045d4:	e015      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fecd 	bl	800537c <RCCEx_PLL2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045e6:	e00c      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3324      	adds	r3, #36	; 0x24
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 ff76 	bl	80054e0 <RCCEx_PLL3_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045f8:	e003      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
      break;
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004608:	4b79      	ldr	r3, [pc, #484]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800460a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460c:	f023 0207 	bic.w	r2, r3, #7
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	4976      	ldr	r1, [pc, #472]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	650b      	str	r3, [r1, #80]	; 0x50
 800461a:	e001      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004628:	2b00      	cmp	r3, #0
 800462a:	d042      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004634:	d02b      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463a:	d825      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800463c:	2bc0      	cmp	r3, #192	; 0xc0
 800463e:	d028      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004640:	2bc0      	cmp	r3, #192	; 0xc0
 8004642:	d821      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004644:	2b80      	cmp	r3, #128	; 0x80
 8004646:	d016      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d81d      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	d007      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004654:	e018      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004656:	4b66      	ldr	r3, [pc, #408]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	4a65      	ldr	r2, [pc, #404]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800465c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004662:	e017      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fe86 	bl	800537c <RCCEx_PLL2_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004674:	e00e      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3324      	adds	r3, #36	; 0x24
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f000 ff2f 	bl	80054e0 <RCCEx_PLL3_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004686:	e005      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	75fb      	strb	r3, [r7, #23]
      break;
 800468c:	e002      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800468e:	bf00      	nop
 8004690:	e000      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004694:	7dfb      	ldrb	r3, [r7, #23]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800469a:	4b55      	ldr	r3, [pc, #340]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800469c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	4952      	ldr	r1, [pc, #328]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	650b      	str	r3, [r1, #80]	; 0x50
 80046ac:	e001      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d049      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046c8:	d030      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80046ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ce:	d82a      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80046d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046d4:	d02c      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80046d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046da:	d824      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80046dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e0:	d018      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e6:	d81e      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80046ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046f0:	d007      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80046f2:	e018      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f4:	4b3e      	ldr	r3, [pc, #248]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	4a3d      	ldr	r2, [pc, #244]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004700:	e017      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3304      	adds	r3, #4
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fe37 	bl	800537c <RCCEx_PLL2_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004712:	e00e      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3324      	adds	r3, #36	; 0x24
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fee0 	bl	80054e0 <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004724:	e005      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
      break;
 800472a:	e002      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800472c:	bf00      	nop
 800472e:	e000      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004738:	4b2d      	ldr	r3, [pc, #180]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004746:	492a      	ldr	r1, [pc, #168]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004748:	4313      	orrs	r3, r2
 800474a:	658b      	str	r3, [r1, #88]	; 0x58
 800474c:	e001      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475a:	2b00      	cmp	r3, #0
 800475c:	d04c      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004768:	d030      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800476a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800476e:	d82a      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004770:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004774:	d02c      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004776:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800477a:	d824      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800477c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004780:	d018      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004786:	d81e      	bhi.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800478c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004790:	d007      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004792:	e018      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004794:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800479a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047a0:	e017      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fde7 	bl	800537c <RCCEx_PLL2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047b2:	e00e      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3324      	adds	r3, #36	; 0x24
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fe90 	bl	80054e0 <RCCEx_PLL3_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047c4:	e005      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ca:	e002      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80047cc:	bf00      	nop
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80047d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047e6:	4902      	ldr	r1, [pc, #8]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	658b      	str	r3, [r1, #88]	; 0x58
 80047ec:	e004      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80047ee:	bf00      	nop
 80047f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
 80047f6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d032      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004808:	2b30      	cmp	r3, #48	; 0x30
 800480a:	d01c      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800480c:	2b30      	cmp	r3, #48	; 0x30
 800480e:	d817      	bhi.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d00c      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004814:	2b20      	cmp	r3, #32
 8004816:	d813      	bhi.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d016      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800481c:	2b10      	cmp	r3, #16
 800481e:	d10f      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004820:	4baf      	ldr	r3, [pc, #700]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	4aae      	ldr	r2, [pc, #696]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800482c:	e00e      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3304      	adds	r3, #4
 8004832:	2102      	movs	r1, #2
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fda1 	bl	800537c <RCCEx_PLL2_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800483e:	e005      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	75fb      	strb	r3, [r7, #23]
      break;
 8004844:	e002      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800484a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004852:	4ba3      	ldr	r3, [pc, #652]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485e:	49a0      	ldr	r1, [pc, #640]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004864:	e001      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d047      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800487e:	d030      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004884:	d82a      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004886:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800488a:	d02c      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800488c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004890:	d824      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004896:	d018      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489c:	d81e      	bhi.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	d007      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80048a8:	e018      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048aa:	4b8d      	ldr	r3, [pc, #564]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	4a8c      	ldr	r2, [pc, #560]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048b6:	e017      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fd5c 	bl	800537c <RCCEx_PLL2_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048c8:	e00e      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3324      	adds	r3, #36	; 0x24
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fe05 	bl	80054e0 <RCCEx_PLL3_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048da:	e005      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
      break;
 80048e0:	e002      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80048e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80048ee:	4b7c      	ldr	r3, [pc, #496]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fa:	4979      	ldr	r1, [pc, #484]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	650b      	str	r3, [r1, #80]	; 0x50
 8004900:	e001      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d049      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800491a:	d02e      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800491c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004920:	d828      	bhi.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004922:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004926:	d02a      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800492c:	d822      	bhi.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800492e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004932:	d026      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004934:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004938:	d81c      	bhi.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800493a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800493e:	d010      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004944:	d816      	bhi.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01d      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d111      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	2101      	movs	r1, #1
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fd10 	bl	800537c <RCCEx_PLL2_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004960:	e012      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3324      	adds	r3, #36	; 0x24
 8004966:	2101      	movs	r1, #1
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fdb9 	bl	80054e0 <RCCEx_PLL3_Config>
 800496e:	4603      	mov	r3, r0
 8004970:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004972:	e009      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	75fb      	strb	r3, [r7, #23]
      break;
 8004978:	e006      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800497a:	bf00      	nop
 800497c:	e004      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800497e:	bf00      	nop
 8004980:	e002      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004982:	bf00      	nop
 8004984:	e000      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800498e:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004992:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	4951      	ldr	r1, [pc, #324]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800499c:	4313      	orrs	r3, r2
 800499e:	650b      	str	r3, [r1, #80]	; 0x50
 80049a0:	e001      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
 80049a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d04b      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049bc:	d02e      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80049be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049c2:	d828      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c8:	d02a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d822      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049d4:	d026      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80049d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049da:	d81c      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d010      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80049e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e6:	d816      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01d      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80049ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f0:	d111      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3304      	adds	r3, #4
 80049f6:	2101      	movs	r1, #1
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fcbf 	bl	800537c <RCCEx_PLL2_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a02:	e012      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3324      	adds	r3, #36	; 0x24
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fd68 	bl	80054e0 <RCCEx_PLL3_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a14:	e009      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
      break;
 8004a1a:	e006      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004a1c:	bf00      	nop
 8004a1e:	e004      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004a20:	bf00      	nop
 8004a22:	e002      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004a24:	bf00      	nop
 8004a26:	e000      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004a28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a3e:	4928      	ldr	r1, [pc, #160]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	658b      	str	r3, [r1, #88]	; 0x58
 8004a44:	e001      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02f      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5e:	d00e      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a64:	d814      	bhi.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d015      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a6e:	d10f      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a70:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a7c:	e00c      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2101      	movs	r1, #1
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fc79 	bl	800537c <RCCEx_PLL2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004a8e:	e003      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	75fb      	strb	r3, [r7, #23]
      break;
 8004a94:	e000      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aaa:	490d      	ldr	r1, [pc, #52]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	650b      	str	r3, [r1, #80]	; 0x50
 8004ab0:	e001      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
 8004ab4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d033      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d81c      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004b0b 	.word	0x08004b0b
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004af3 	.word	0x08004af3
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae4:	4bb8      	ldr	r3, [pc, #736]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4ab7      	ldr	r2, [pc, #732]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004af0:	e00c      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3304      	adds	r3, #4
 8004af6:	2102      	movs	r1, #2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fc3f 	bl	800537c <RCCEx_PLL2_Config>
 8004afe:	4603      	mov	r3, r0
 8004b00:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b02:	e003      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
      break;
 8004b08:	e000      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b12:	4bad      	ldr	r3, [pc, #692]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	49aa      	ldr	r1, [pc, #680]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b24:	e001      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8086 	beq.w	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b38:	4ba4      	ldr	r3, [pc, #656]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4aa3      	ldr	r2, [pc, #652]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b44:	f7fc fad8 	bl	80010f8 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b4a:	e009      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4c:	f7fc fad4 	bl	80010f8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b64      	cmp	r3, #100	; 0x64
 8004b58:	d902      	bls.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	75fb      	strb	r3, [r7, #23]
        break;
 8004b5e:	e005      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b60:	4b9a      	ldr	r3, [pc, #616]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0ef      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d166      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b72:	4b95      	ldr	r3, [pc, #596]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b7c:	4053      	eors	r3, r2
 8004b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d013      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b86:	4b90      	ldr	r3, [pc, #576]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b90:	4b8d      	ldr	r3, [pc, #564]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a8c      	ldr	r2, [pc, #560]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9c:	4b8a      	ldr	r3, [pc, #552]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4a89      	ldr	r2, [pc, #548]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ba8:	4a87      	ldr	r2, [pc, #540]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb8:	d115      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bba:	f7fc fa9d 	bl	80010f8 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bc0:	e00b      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fc fa99 	bl	80010f8 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d902      	bls.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	75fb      	strb	r3, [r7, #23]
            break;
 8004bd8:	e005      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bda:	4b7b      	ldr	r3, [pc, #492]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0ed      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d126      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfa:	d10d      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004bfc:	4b72      	ldr	r3, [pc, #456]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c0a:	0919      	lsrs	r1, r3, #4
 8004c0c:	4b70      	ldr	r3, [pc, #448]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004c0e:	400b      	ands	r3, r1
 8004c10:	496d      	ldr	r1, [pc, #436]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	610b      	str	r3, [r1, #16]
 8004c16:	e005      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004c18:	4b6b      	ldr	r3, [pc, #428]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	4a6a      	ldr	r2, [pc, #424]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c22:	6113      	str	r3, [r2, #16]
 8004c24:	4b68      	ldr	r3, [pc, #416]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c32:	4965      	ldr	r1, [pc, #404]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	670b      	str	r3, [r1, #112]	; 0x70
 8004c38:	e004      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	75bb      	strb	r3, [r7, #22]
 8004c3e:	e001      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
 8004c42:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d07e      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c54:	2b28      	cmp	r3, #40	; 0x28
 8004c56:	d867      	bhi.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004d2f 	.word	0x08004d2f
 8004c64:	08004d29 	.word	0x08004d29
 8004c68:	08004d29 	.word	0x08004d29
 8004c6c:	08004d29 	.word	0x08004d29
 8004c70:	08004d29 	.word	0x08004d29
 8004c74:	08004d29 	.word	0x08004d29
 8004c78:	08004d29 	.word	0x08004d29
 8004c7c:	08004d29 	.word	0x08004d29
 8004c80:	08004d05 	.word	0x08004d05
 8004c84:	08004d29 	.word	0x08004d29
 8004c88:	08004d29 	.word	0x08004d29
 8004c8c:	08004d29 	.word	0x08004d29
 8004c90:	08004d29 	.word	0x08004d29
 8004c94:	08004d29 	.word	0x08004d29
 8004c98:	08004d29 	.word	0x08004d29
 8004c9c:	08004d29 	.word	0x08004d29
 8004ca0:	08004d17 	.word	0x08004d17
 8004ca4:	08004d29 	.word	0x08004d29
 8004ca8:	08004d29 	.word	0x08004d29
 8004cac:	08004d29 	.word	0x08004d29
 8004cb0:	08004d29 	.word	0x08004d29
 8004cb4:	08004d29 	.word	0x08004d29
 8004cb8:	08004d29 	.word	0x08004d29
 8004cbc:	08004d29 	.word	0x08004d29
 8004cc0:	08004d2f 	.word	0x08004d2f
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004d29 	.word	0x08004d29
 8004ccc:	08004d29 	.word	0x08004d29
 8004cd0:	08004d29 	.word	0x08004d29
 8004cd4:	08004d29 	.word	0x08004d29
 8004cd8:	08004d29 	.word	0x08004d29
 8004cdc:	08004d29 	.word	0x08004d29
 8004ce0:	08004d2f 	.word	0x08004d2f
 8004ce4:	08004d29 	.word	0x08004d29
 8004ce8:	08004d29 	.word	0x08004d29
 8004cec:	08004d29 	.word	0x08004d29
 8004cf0:	08004d29 	.word	0x08004d29
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d29 	.word	0x08004d29
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	08004d2f 	.word	0x08004d2f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	2101      	movs	r1, #1
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fb36 	bl	800537c <RCCEx_PLL2_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d14:	e00c      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3324      	adds	r3, #36	; 0x24
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fbdf 	bl	80054e0 <RCCEx_PLL3_Config>
 8004d22:	4603      	mov	r3, r0
 8004d24:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d26:	e003      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2c:	e000      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8004d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d42:	4921      	ldr	r1, [pc, #132]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	654b      	str	r3, [r1, #84]	; 0x54
 8004d48:	e001      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d03e      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	d820      	bhi.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004dab 	.word	0x08004dab
 8004d6c:	08004d81 	.word	0x08004d81
 8004d70:	08004d93 	.word	0x08004d93
 8004d74:	08004dab 	.word	0x08004dab
 8004d78:	08004dab 	.word	0x08004dab
 8004d7c:	08004dab 	.word	0x08004dab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3304      	adds	r3, #4
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 faf8 	bl	800537c <RCCEx_PLL2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004d90:	e00c      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3324      	adds	r3, #36	; 0x24
 8004d96:	2101      	movs	r1, #1
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fba1 	bl	80054e0 <RCCEx_PLL3_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004da2:	e003      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	75fb      	strb	r3, [r7, #23]
      break;
 8004da8:	e000      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d110      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	f023 0207 	bic.w	r2, r3, #7
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbe:	4902      	ldr	r1, [pc, #8]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	654b      	str	r3, [r1, #84]	; 0x54
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	58024800 	.word	0x58024800
 8004dd0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d039      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d820      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004dee:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e37 	.word	0x08004e37
 8004df8:	08004e0d 	.word	0x08004e0d
 8004dfc:	08004e1f 	.word	0x08004e1f
 8004e00:	08004e37 	.word	0x08004e37
 8004e04:	08004e37 	.word	0x08004e37
 8004e08:	08004e37 	.word	0x08004e37
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fab2 	bl	800537c <RCCEx_PLL2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e1c:	e00c      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3324      	adds	r3, #36	; 0x24
 8004e22:	2101      	movs	r1, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fb5b 	bl	80054e0 <RCCEx_PLL3_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e2e:	e003      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
      break;
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e38:	7dfb      	ldrb	r3, [r7, #23]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10a      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e3e:	4bb7      	ldr	r3, [pc, #732]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e42:	f023 0207 	bic.w	r2, r3, #7
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	49b3      	ldr	r1, [pc, #716]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	658b      	str	r3, [r1, #88]	; 0x58
 8004e52:	e001      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d04b      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e6e:	d02e      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e74:	d828      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d02a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d822      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004e82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e86:	d026      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004e88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e8c:	d81c      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e92:	d010      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e98:	d816      	bhi.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01d      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea2:	d111      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fa66 	bl	800537c <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004eb4:	e012      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3324      	adds	r3, #36	; 0x24
 8004eba:	2102      	movs	r1, #2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fb0f 	bl	80054e0 <RCCEx_PLL3_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ec6:	e009      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
      break;
 8004ecc:	e006      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004ece:	bf00      	nop
 8004ed0:	e004      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e002      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004ed6:	bf00      	nop
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ee2:	4b8e      	ldr	r3, [pc, #568]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef0:	498a      	ldr	r1, [pc, #552]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	654b      	str	r3, [r1, #84]	; 0x54
 8004ef6:	e001      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d04b      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f12:	d02e      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004f14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f18:	d828      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d02a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f24:	d822      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f2a:	d026      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f30:	d81c      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f36:	d010      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3c:	d816      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01d      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f46:	d111      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fa14 	bl	800537c <RCCEx_PLL2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f58:	e012      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3324      	adds	r3, #36	; 0x24
 8004f5e:	2102      	movs	r1, #2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fabd 	bl	80054e0 <RCCEx_PLL3_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f6a:	e009      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f70:	e006      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004f72:	bf00      	nop
 8004f74:	e004      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004f76:	bf00      	nop
 8004f78:	e002      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f86:	4b65      	ldr	r3, [pc, #404]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f94:	4961      	ldr	r1, [pc, #388]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	658b      	str	r3, [r1, #88]	; 0x58
 8004f9a:	e001      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d04b      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004fb6:	d02e      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004fb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004fbc:	d828      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc2:	d02a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc8:	d822      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004fca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004fce:	d026      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004fd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004fd4:	d81c      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fda:	d010      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fe0:	d816      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01d      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fea:	d111      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f9c2 	bl	800537c <RCCEx_PLL2_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004ffc:	e012      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3324      	adds	r3, #36	; 0x24
 8005002:	2102      	movs	r1, #2
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fa6b 	bl	80054e0 <RCCEx_PLL3_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800500e:	e009      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
      break;
 8005014:	e006      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005016:	bf00      	nop
 8005018:	e004      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800502a:	4b3c      	ldr	r3, [pc, #240]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005038:	4938      	ldr	r1, [pc, #224]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800503a:	4313      	orrs	r3, r2
 800503c:	658b      	str	r3, [r1, #88]	; 0x58
 800503e:	e001      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d10a      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3324      	adds	r3, #36	; 0x24
 8005060:	2102      	movs	r1, #2
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fa3c 	bl	80054e0 <RCCEx_PLL3_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005072:	4b2a      	ldr	r3, [pc, #168]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005080:	4926      	ldr	r1, [pc, #152]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005082:	4313      	orrs	r3, r2
 8005084:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509c:	d10a      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3324      	adds	r3, #36	; 0x24
 80050a2:	2102      	movs	r1, #2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fa1b 	bl	80054e0 <RCCEx_PLL3_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050b4:	4b19      	ldr	r3, [pc, #100]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050c2:	4916      	ldr	r1, [pc, #88]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d036      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80050da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050de:	d01f      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80050e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050e4:	d817      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80050ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ee:	d009      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80050f0:	e011      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 f93f 	bl	800537c <RCCEx_PLL2_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005102:	e00e      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3324      	adds	r3, #36	; 0x24
 8005108:	2102      	movs	r1, #2
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f9e8 	bl	80054e0 <RCCEx_PLL3_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005114:	e005      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
      break;
 800511a:	e002      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800511c:	58024400 	.word	0x58024400
      break;
 8005120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005128:	4b93      	ldr	r3, [pc, #588]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005136:	4990      	ldr	r1, [pc, #576]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005138:	4313      	orrs	r3, r2
 800513a:	658b      	str	r3, [r1, #88]	; 0x58
 800513c:	e001      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d033      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005154:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005158:	d01c      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800515a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800515e:	d816      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005164:	d003      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800516a:	d007      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800516c:	e00f      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516e:	4b82      	ldr	r3, [pc, #520]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	4a81      	ldr	r2, [pc, #516]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800517a:	e00c      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3324      	adds	r3, #36	; 0x24
 8005180:	2101      	movs	r1, #1
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f9ac 	bl	80054e0 <RCCEx_PLL3_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800518c:	e003      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
      break;
 8005192:	e000      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800519c:	4b76      	ldr	r3, [pc, #472]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800519e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051aa:	4973      	ldr	r1, [pc, #460]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	654b      	str	r3, [r1, #84]	; 0x54
 80051b0:	e001      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d029      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80051ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ce:	d007      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80051d0:	e00f      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d2:	4b69      	ldr	r3, [pc, #420]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	4a68      	ldr	r2, [pc, #416]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80051d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80051de:	e00b      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	2102      	movs	r1, #2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f8c8 	bl	800537c <RCCEx_PLL2_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80051f0:	e002      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
      break;
 80051f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051fe:	4b5e      	ldr	r3, [pc, #376]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005202:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520a:	495b      	ldr	r1, [pc, #364]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800520c:	4313      	orrs	r3, r2
 800520e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005210:	e001      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3324      	adds	r3, #36	; 0x24
 8005226:	2102      	movs	r1, #2
 8005228:	4618      	mov	r0, r3
 800522a:	f000 f959 	bl	80054e0 <RCCEx_PLL3_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d030      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800524c:	d017      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800524e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005252:	d811      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005258:	d013      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800525a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800525e:	d80b      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d010      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005268:	d106      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800526a:	4b43      	ldr	r3, [pc, #268]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	4a42      	ldr	r2, [pc, #264]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005274:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005276:	e007      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
      break;
 800527c:	e004      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800527e:	bf00      	nop
 8005280:	e002      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800528e:	4b3a      	ldr	r3, [pc, #232]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800529a:	4937      	ldr	r1, [pc, #220]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	654b      	str	r3, [r1, #84]	; 0x54
 80052a0:	e001      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052b2:	4b31      	ldr	r3, [pc, #196]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	492e      	ldr	r1, [pc, #184]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80052d0:	4b29      	ldr	r3, [pc, #164]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80052de:	4926      	ldr	r1, [pc, #152]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052f0:	4b21      	ldr	r3, [pc, #132]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052fc:	491e      	ldr	r1, [pc, #120]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800530e:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4a19      	ldr	r2, [pc, #100]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005318:	6113      	str	r3, [r2, #16]
 800531a:	4b17      	ldr	r3, [pc, #92]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005324:	4914      	ldr	r1, [pc, #80]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005326:	4313      	orrs	r3, r2
 8005328:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	da08      	bge.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533e:	490e      	ldr	r1, [pc, #56]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005354:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535e:	4906      	ldr	r1, [pc, #24]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005360:	4313      	orrs	r3, r2
 8005362:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005364:	7dbb      	ldrb	r3, [r7, #22]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	e000      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	58024400 	.word	0x58024400

0800537c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800538a:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b03      	cmp	r3, #3
 8005394:	d101      	bne.n	800539a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e099      	b.n	80054ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800539a:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a4e      	ldr	r2, [pc, #312]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 80053a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a6:	f7fb fea7 	bl	80010f8 <HAL_GetTick>
 80053aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053ac:	e008      	b.n	80053c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80053ae:	f7fb fea3 	bl	80010f8 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e086      	b.n	80054ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053c0:	4b45      	ldr	r3, [pc, #276]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f0      	bne.n	80053ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80053cc:	4b42      	ldr	r3, [pc, #264]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	031b      	lsls	r3, r3, #12
 80053da:	493f      	ldr	r1, [pc, #252]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	628b      	str	r3, [r1, #40]	; 0x28
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	025b      	lsls	r3, r3, #9
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	041b      	lsls	r3, r3, #16
 80053fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	3b01      	subs	r3, #1
 800540a:	061b      	lsls	r3, r3, #24
 800540c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005410:	4931      	ldr	r1, [pc, #196]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005412:	4313      	orrs	r3, r2
 8005414:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005416:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	492d      	ldr	r1, [pc, #180]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005424:	4313      	orrs	r3, r2
 8005426:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005428:	4b2b      	ldr	r3, [pc, #172]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	f023 0220 	bic.w	r2, r3, #32
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	4928      	ldr	r1, [pc, #160]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800543a:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	4a26      	ldr	r2, [pc, #152]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005440:	f023 0310 	bic.w	r3, r3, #16
 8005444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544a:	4b24      	ldr	r3, [pc, #144]	; (80054dc <RCCEx_PLL2_Config+0x160>)
 800544c:	4013      	ands	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	69d2      	ldr	r2, [r2, #28]
 8005452:	00d2      	lsls	r2, r2, #3
 8005454:	4920      	ldr	r1, [pc, #128]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005456:	4313      	orrs	r3, r2
 8005458:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800545a:	4b1f      	ldr	r3, [pc, #124]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005460:	f043 0310 	orr.w	r3, r3, #16
 8005464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800546c:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	4a19      	ldr	r2, [pc, #100]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005478:	e00f      	b.n	800549a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d106      	bne.n	800548e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005480:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	4a14      	ldr	r2, [pc, #80]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800548a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800548c:	e005      	b.n	800549a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	4a11      	ldr	r2, [pc, #68]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 8005494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005498:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800549a:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a0e      	ldr	r2, [pc, #56]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 80054a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a6:	f7fb fe27 	bl	80010f8 <HAL_GetTick>
 80054aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054ac:	e008      	b.n	80054c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054ae:	f7fb fe23 	bl	80010f8 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e006      	b.n	80054ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <RCCEx_PLL2_Config+0x15c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0f0      	beq.n	80054ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	58024400 	.word	0x58024400
 80054dc:	ffff0007 	.word	0xffff0007

080054e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054ee:	4b53      	ldr	r3, [pc, #332]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d101      	bne.n	80054fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e099      	b.n	8005632 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80054fe:	4b4f      	ldr	r3, [pc, #316]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a4e      	ldr	r2, [pc, #312]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800550a:	f7fb fdf5 	bl	80010f8 <HAL_GetTick>
 800550e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005510:	e008      	b.n	8005524 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005512:	f7fb fdf1 	bl	80010f8 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e086      	b.n	8005632 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005524:	4b45      	ldr	r3, [pc, #276]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005530:	4b42      	ldr	r3, [pc, #264]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	051b      	lsls	r3, r3, #20
 800553e:	493f      	ldr	r1, [pc, #252]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	628b      	str	r3, [r1, #40]	; 0x28
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	3b01      	subs	r3, #1
 800554a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	3b01      	subs	r3, #1
 8005554:	025b      	lsls	r3, r3, #9
 8005556:	b29b      	uxth	r3, r3
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	3b01      	subs	r3, #1
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	3b01      	subs	r3, #1
 800556e:	061b      	lsls	r3, r3, #24
 8005570:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005574:	4931      	ldr	r1, [pc, #196]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005576:	4313      	orrs	r3, r2
 8005578:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800557a:	4b30      	ldr	r3, [pc, #192]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	492d      	ldr	r1, [pc, #180]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005588:	4313      	orrs	r3, r2
 800558a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800558c:	4b2b      	ldr	r3, [pc, #172]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	4928      	ldr	r1, [pc, #160]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 800559a:	4313      	orrs	r3, r2
 800559c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800559e:	4b27      	ldr	r3, [pc, #156]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	4a26      	ldr	r2, [pc, #152]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ae:	4b24      	ldr	r3, [pc, #144]	; (8005640 <RCCEx_PLL3_Config+0x160>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	69d2      	ldr	r2, [r2, #28]
 80055b6:	00d2      	lsls	r2, r2, #3
 80055b8:	4920      	ldr	r1, [pc, #128]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80055be:	4b1f      	ldr	r3, [pc, #124]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	4a1e      	ldr	r2, [pc, #120]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	4a19      	ldr	r2, [pc, #100]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055dc:	e00f      	b.n	80055fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d106      	bne.n	80055f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80055e4:	4b15      	ldr	r3, [pc, #84]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	4a14      	ldr	r2, [pc, #80]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055f0:	e005      	b.n	80055fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80055f2:	4b12      	ldr	r3, [pc, #72]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	4a11      	ldr	r2, [pc, #68]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 80055f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80055fe:	4b0f      	ldr	r3, [pc, #60]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a0e      	ldr	r2, [pc, #56]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800560a:	f7fb fd75 	bl	80010f8 <HAL_GetTick>
 800560e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005610:	e008      	b.n	8005624 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005612:	f7fb fd71 	bl	80010f8 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e006      	b.n	8005632 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <RCCEx_PLL3_Config+0x15c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f0      	beq.n	8005612 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	58024400 	.word	0x58024400
 8005640:	ffff0007 	.word	0xffff0007

08005644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e049      	b.n	80056ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fb fc4c 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f000 faee 	bl	8005c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	d001      	beq.n	800570c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e054      	b.n	80057b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d022      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005736:	d01d      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d018      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a21      	ldr	r2, [pc, #132]	; (80057cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1f      	ldr	r2, [pc, #124]	; (80057d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00e      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1e      	ldr	r2, [pc, #120]	; (80057d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d009      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1c      	ldr	r2, [pc, #112]	; (80057d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x80>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d115      	bne.n	80057a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <HAL_TIM_Base_Start_IT+0xec>)
 800577c:	4013      	ands	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b06      	cmp	r3, #6
 8005784:	d015      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578c:	d011      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	e008      	b.n	80057b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e000      	b.n	80057b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40010400 	.word	0x40010400
 80057d8:	40001800 	.word	0x40001800
 80057dc:	40014000 	.word	0x40014000
 80057e0:	00010007 	.word	0x00010007

080057e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d122      	bne.n	8005840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	d11b      	bne.n	8005840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0202 	mvn.w	r2, #2
 8005810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9fe 	bl	8005c28 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f9f0 	bl	8005c14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fa01 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d122      	bne.n	8005894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b04      	cmp	r3, #4
 800585a:	d11b      	bne.n	8005894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0204 	mvn.w	r2, #4
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9d4 	bl	8005c28 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9c6 	bl	8005c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f9d7 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d122      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d11b      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0208 	mvn.w	r2, #8
 80058b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2204      	movs	r2, #4
 80058be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9aa 	bl	8005c28 <HAL_TIM_IC_CaptureCallback>
 80058d4:	e005      	b.n	80058e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f99c 	bl	8005c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f9ad 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d122      	bne.n	800593c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b10      	cmp	r3, #16
 8005902:	d11b      	bne.n	800593c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0210 	mvn.w	r2, #16
 800590c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2208      	movs	r2, #8
 8005912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f980 	bl	8005c28 <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f972 	bl	8005c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f983 	bl	8005c3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d10e      	bne.n	8005968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0201 	mvn.w	r2, #1
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fca4 	bl	80072b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d10e      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005980:	2b80      	cmp	r3, #128	; 0x80
 8005982:	d107      	bne.n	8005994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800598c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fb38 	bl	8006004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a2:	d10e      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d107      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fb2b 	bl	8006018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d10e      	bne.n	80059ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d107      	bne.n	80059ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f931 	bl	8005c50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d10e      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d107      	bne.n	8005a1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f06f 0220 	mvn.w	r2, #32
 8005a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 faeb 	bl	8005ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIM_ConfigClockSource+0x1c>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e0dc      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x1d6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	4b6a      	ldr	r3, [pc, #424]	; (8005c04 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a64      	ldr	r2, [pc, #400]	; (8005c08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	f000 80a9 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1aa>
 8005a7c:	4a62      	ldr	r2, [pc, #392]	; (8005c08 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	f200 80ae 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a84:	4a61      	ldr	r2, [pc, #388]	; (8005c0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	f000 80a1 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1aa>
 8005a8c:	4a5f      	ldr	r2, [pc, #380]	; (8005c0c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	f200 80a6 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a94:	4a5e      	ldr	r2, [pc, #376]	; (8005c10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	f000 8099 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1aa>
 8005a9c:	4a5c      	ldr	r2, [pc, #368]	; (8005c10 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	f200 809e 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005aa4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005aa8:	f000 8091 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1aa>
 8005aac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ab0:	f200 8096 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab8:	f000 8089 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1aa>
 8005abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac0:	f200 808e 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac8:	d03e      	beq.n	8005b48 <HAL_TIM_ConfigClockSource+0x124>
 8005aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ace:	f200 8087 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad6:	f000 8086 	beq.w	8005be6 <HAL_TIM_ConfigClockSource+0x1c2>
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	d87f      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ae0:	2b70      	cmp	r3, #112	; 0x70
 8005ae2:	d01a      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0xf6>
 8005ae4:	2b70      	cmp	r3, #112	; 0x70
 8005ae6:	d87b      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ae8:	2b60      	cmp	r3, #96	; 0x60
 8005aea:	d050      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x16a>
 8005aec:	2b60      	cmp	r3, #96	; 0x60
 8005aee:	d877      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005af0:	2b50      	cmp	r3, #80	; 0x50
 8005af2:	d03c      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0x14a>
 8005af4:	2b50      	cmp	r3, #80	; 0x50
 8005af6:	d873      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d058      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0x18a>
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d86f      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b00:	2b30      	cmp	r3, #48	; 0x30
 8005b02:	d064      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x1aa>
 8005b04:	2b30      	cmp	r3, #48	; 0x30
 8005b06:	d86b      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d060      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x1aa>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d867      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d05c      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x1aa>
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d05a      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x1aa>
 8005b18:	e062      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6899      	ldr	r1, [r3, #8]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f000 f9b3 	bl	8005e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	609a      	str	r2, [r3, #8]
      break;
 8005b46:	e04f      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6899      	ldr	r1, [r3, #8]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f000 f99c 	bl	8005e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b6a:	609a      	str	r2, [r3, #8]
      break;
 8005b6c:	e03c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6859      	ldr	r1, [r3, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f000 f90c 	bl	8005d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2150      	movs	r1, #80	; 0x50
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f966 	bl	8005e58 <TIM_ITRx_SetConfig>
      break;
 8005b8c:	e02c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6859      	ldr	r1, [r3, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f000 f92b 	bl	8005df6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2160      	movs	r1, #96	; 0x60
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f956 	bl	8005e58 <TIM_ITRx_SetConfig>
      break;
 8005bac:	e01c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 f8ec 	bl	8005d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2140      	movs	r1, #64	; 0x40
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f946 	bl	8005e58 <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e00c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f000 f93d 	bl	8005e58 <TIM_ITRx_SetConfig>
      break;
 8005bde:	e003      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
      break;
 8005be4:	e000      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	ffceff88 	.word	0xffceff88
 8005c08:	00100040 	.word	0x00100040
 8005c0c:	00100030 	.word	0x00100030
 8005c10:	00100020 	.word	0x00100020

08005c14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a40      	ldr	r2, [pc, #256]	; (8005d78 <TIM_Base_SetConfig+0x114>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d013      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c82:	d00f      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a3d      	ldr	r2, [pc, #244]	; (8005d7c <TIM_Base_SetConfig+0x118>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00b      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3c      	ldr	r2, [pc, #240]	; (8005d80 <TIM_Base_SetConfig+0x11c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d007      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a3b      	ldr	r2, [pc, #236]	; (8005d84 <TIM_Base_SetConfig+0x120>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a3a      	ldr	r2, [pc, #232]	; (8005d88 <TIM_Base_SetConfig+0x124>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d108      	bne.n	8005cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2f      	ldr	r2, [pc, #188]	; (8005d78 <TIM_Base_SetConfig+0x114>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01f      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc4:	d01b      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2c      	ldr	r2, [pc, #176]	; (8005d7c <TIM_Base_SetConfig+0x118>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d017      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2b      	ldr	r2, [pc, #172]	; (8005d80 <TIM_Base_SetConfig+0x11c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a2a      	ldr	r2, [pc, #168]	; (8005d84 <TIM_Base_SetConfig+0x120>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00f      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a29      	ldr	r2, [pc, #164]	; (8005d88 <TIM_Base_SetConfig+0x124>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a28      	ldr	r2, [pc, #160]	; (8005d8c <TIM_Base_SetConfig+0x128>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d007      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a27      	ldr	r2, [pc, #156]	; (8005d90 <TIM_Base_SetConfig+0x12c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_Base_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <TIM_Base_SetConfig+0x130>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d108      	bne.n	8005d10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a10      	ldr	r2, [pc, #64]	; (8005d78 <TIM_Base_SetConfig+0x114>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00f      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <TIM_Base_SetConfig+0x124>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00b      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a11      	ldr	r2, [pc, #68]	; (8005d8c <TIM_Base_SetConfig+0x128>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d007      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a10      	ldr	r2, [pc, #64]	; (8005d90 <TIM_Base_SetConfig+0x12c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_Base_SetConfig+0xf8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a0f      	ldr	r2, [pc, #60]	; (8005d94 <TIM_Base_SetConfig+0x130>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d103      	bne.n	8005d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	615a      	str	r2, [r3, #20]
}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40000400 	.word	0x40000400
 8005d80:	40000800 	.word	0x40000800
 8005d84:	40000c00 	.word	0x40000c00
 8005d88:	40010400 	.word	0x40010400
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	40014400 	.word	0x40014400
 8005d94:	40014800 	.word	0x40014800

08005d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0201 	bic.w	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 030a 	bic.w	r3, r3, #10
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f023 0210 	bic.w	r2, r3, #16
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	031b      	lsls	r3, r3, #12
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <TIM_ITRx_SetConfig+0x38>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f043 0307 	orr.w	r3, r3, #7
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	609a      	str	r2, [r3, #8]
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	ffcfff8f 	.word	0xffcfff8f

08005e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	021a      	lsls	r2, r3, #8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e06d      	b.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a30      	ldr	r2, [pc, #192]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a2f      	ldr	r2, [pc, #188]	; (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d108      	bne.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a20      	ldr	r2, [pc, #128]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d022      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d01d      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1d      	ldr	r2, [pc, #116]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d018      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d013      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1a      	ldr	r2, [pc, #104]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00e      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a16      	ldr	r2, [pc, #88]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d004      	beq.n	8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a15      	ldr	r2, [pc, #84]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d10c      	bne.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	40010400 	.word	0x40010400
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40001800 	.word	0x40001800
 8005fec:	40014000 	.word	0x40014000

08005ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <Write_Reg_BM1422AGMV>:
{
    return t_obj->io.ReadReg(t_obj->addr, t_reg, t_data, t_size);
}

static BM1422AGMV Write_Reg_BM1422AGMV(BM1422AGMVObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 800602c:	b590      	push	{r4, r7, lr}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	460b      	mov	r3, r1
 800603a:	817b      	strh	r3, [r7, #10]
    return t_obj->io.WriteReg(t_obj->addr, t_reg, t_data, t_size);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	695c      	ldr	r4, [r3, #20]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8818      	ldrh	r0, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	b29b      	uxth	r3, r3
 8006048:	8979      	ldrh	r1, [r7, #10]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	47a0      	blx	r4
 800604e:	4603      	mov	r3, r0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	bd90      	pop	{r4, r7, pc}

08006058 <Set_Reg_BM1422AGMV>:

static BM1422AGMV Set_Reg_BM1422AGMV(BM1422AGMVObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	460b      	mov	r3, r1
 8006066:	817b      	strh	r3, [r7, #10]
	uint8_t t_res = e_BM1422AGMV_STATUS_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
    t_res = Write_Reg_BM1422AGMV(t_obj, t_reg, t_data, t_size);
 800606c:	8979      	ldrh	r1, [r7, #10]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff ffda 	bl	800602c <Write_Reg_BM1422AGMV>
 8006078:	4603      	mov	r3, r0
 800607a:	75fb      	strb	r3, [r7, #23]
    return t_res;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <Set_Ioctx_BM1422AGMV>:

BM1422AGMV Set_Ioctx_BM1422AGMV(BM1422AGMVObject* t_obj, BM1422AGMVIOctx* t_ioctx)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
    if (!t_obj || !t_ioctx->IsDevReady || !t_ioctx->ReadReg || !t_ioctx->WriteReg ) {
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <Set_Ioctx_BM1422AGMV+0x28>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <Set_Ioctx_BM1422AGMV+0x28>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <Set_Ioctx_BM1422AGMV+0x28>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <Set_Ioctx_BM1422AGMV+0x2c>
        return e_BM1422AGMV_STATUS_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e018      	b.n	80060e4 <Set_Ioctx_BM1422AGMV+0x5e>
    }

    t_obj->io.Init       = t_ioctx->Init;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	605a      	str	r2, [r3, #4]
    t_obj->io.DeInit     = t_ioctx->DeInit;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	609a      	str	r2, [r3, #8]
    t_obj->io.IsDevReady = t_ioctx->IsDevReady;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60da      	str	r2, [r3, #12]
    t_obj->io.ReadReg    = t_ioctx->ReadReg;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	611a      	str	r2, [r3, #16]
    t_obj->io.WriteReg   = t_ioctx->WriteReg;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	615a      	str	r2, [r3, #20]
    t_obj->io.Wait       = t_ioctx->Wait;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	695a      	ldr	r2, [r3, #20]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	619a      	str	r2, [r3, #24]

    return e_BM1422AGMV_STATUS_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <Init_BM1422AGMV>:

BM1422AGMV Init_BM1422AGMV(BM1422AGMVObject* t_obj)			// Setting control register
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
	static uint8_t t_res  = e_BM1422AGMV_STATUS_OK;

    // Check Address
    t_res = e_BM1422AGMV_STATUS_ERROR;
 80060f8:	4b2c      	ldr	r3, [pc, #176]	; (80061ac <Init_BM1422AGMV+0xbc>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]
    t_obj->addr = BM1422AGMV_DEV_ADDR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	221c      	movs	r2, #28
 8006102:	801a      	strh	r2, [r3, #0]
    if (t_obj->io.IsDevReady(t_obj->addr) == 0){
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	8812      	ldrh	r2, [r2, #0]
 800610c:	4610      	mov	r0, r2
 800610e:	4798      	blx	r3
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d102      	bne.n	800611c <Init_BM1422AGMV+0x2c>
    	t_res = e_BM1422AGMV_STATUS_OK;
 8006116:	4b25      	ldr	r3, [pc, #148]	; (80061ac <Init_BM1422AGMV+0xbc>)
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
    }

    // Configure Control
    if (t_res == e_BM1422AGMV_STATUS_OK) {
 800611c:	4b23      	ldr	r3, [pc, #140]	; (80061ac <Init_BM1422AGMV+0xbc>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d13c      	bne.n	800619e <Init_BM1422AGMV+0xae>
    	uint8_t conf_1 = BM1422AGMV_CNTL1_VALUE;
 8006124:	23d8      	movs	r3, #216	; 0xd8
 8006126:	73fb      	strb	r3, [r7, #15]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL1_REG, &conf_1, BM1422AGMV_CONTROL_SIZE);
 8006128:	f107 020f 	add.w	r2, r7, #15
 800612c:	2301      	movs	r3, #1
 800612e:	211b      	movs	r1, #27
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff ff91 	bl	8006058 <Set_Reg_BM1422AGMV>
 8006136:	4603      	mov	r3, r0
 8006138:	461a      	mov	r2, r3
 800613a:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <Init_BM1422AGMV+0xbc>)
 800613c:	701a      	strb	r2, [r3, #0]
        uint8_t conf_2 = BM1422AGMV_CNTL2_VALUE;
 800613e:	2300      	movs	r3, #0
 8006140:	73bb      	strb	r3, [r7, #14]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL2_REG, &conf_2, BM1422AGMV_CONTROL_SIZE);
 8006142:	f107 020e 	add.w	r2, r7, #14
 8006146:	2301      	movs	r3, #1
 8006148:	211c      	movs	r1, #28
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff ff84 	bl	8006058 <Set_Reg_BM1422AGMV>
 8006150:	4603      	mov	r3, r0
 8006152:	461a      	mov	r2, r3
 8006154:	4b15      	ldr	r3, [pc, #84]	; (80061ac <Init_BM1422AGMV+0xbc>)
 8006156:	701a      	strb	r2, [r3, #0]
        uint8_t conf_4 = BM1422AGMV_CNTL4_H_VALUE;
 8006158:	2300      	movs	r3, #0
 800615a:	737b      	strb	r3, [r7, #13]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL4_REG_H, &conf_4, BM1422AGMV_CONTROL_SIZE);
 800615c:	f107 020d 	add.w	r2, r7, #13
 8006160:	2301      	movs	r3, #1
 8006162:	215d      	movs	r1, #93	; 0x5d
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ff77 	bl	8006058 <Set_Reg_BM1422AGMV>
 800616a:	4603      	mov	r3, r0
 800616c:	461a      	mov	r2, r3
 800616e:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <Init_BM1422AGMV+0xbc>)
 8006170:	701a      	strb	r2, [r3, #0]
        uint8_t conf_5 = BM1422AGMV_CNTL4_L_VALUE;
 8006172:	2300      	movs	r3, #0
 8006174:	733b      	strb	r3, [r7, #12]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL4_REG_L, &conf_5, BM1422AGMV_CONTROL_SIZE);
 8006176:	f107 020c 	add.w	r2, r7, #12
 800617a:	2301      	movs	r3, #1
 800617c:	215c      	movs	r1, #92	; 0x5c
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff ff6a 	bl	8006058 <Set_Reg_BM1422AGMV>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	4b08      	ldr	r3, [pc, #32]	; (80061ac <Init_BM1422AGMV+0xbc>)
 800618a:	701a      	strb	r2, [r3, #0]


        // CNTL3 should be set at LAST //
        uint8_t conf_3 = BM1422AGMV_CNTL3_VALUE;
 800618c:	2340      	movs	r3, #64	; 0x40
 800618e:	72fb      	strb	r3, [r7, #11]
        Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL3_REG, &conf_3, BM1422AGMV_CONTROL_SIZE);
 8006190:	f107 020b 	add.w	r2, r7, #11
 8006194:	2301      	movs	r3, #1
 8006196:	211d      	movs	r1, #29
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff ff5d 	bl	8006058 <Set_Reg_BM1422AGMV>
    }

    return t_res;
 800619e:	4b03      	ldr	r3, [pc, #12]	; (80061ac <Init_BM1422AGMV+0xbc>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	24000098 	.word	0x24000098

080061b0 <Get_Value_BM1422AGMV>:

BM1422AGMV Get_Value_BM1422AGMV(BM1422AGMVObject* t_obj)
{
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
    uint8_t t_res = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	75fb      	strb	r3, [r7, #23]
	uint8_t t_buff[6];

    t_res = t_obj->io.ReadReg(t_obj->addr, BM1422AGMV_DATAX_REG, t_buff, 6);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691c      	ldr	r4, [r3, #16]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8818      	ldrh	r0, [r3, #0]
 80061c4:	f107 0208 	add.w	r2, r7, #8
 80061c8:	2306      	movs	r3, #6
 80061ca:	2110      	movs	r1, #16
 80061cc:	47a0      	blx	r4
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]

    int16_t t_magX = (int16_t)(t_buff[0] | t_buff[1] << 8);
 80061d2:	7a3b      	ldrb	r3, [r7, #8]
 80061d4:	b21a      	sxth	r2, r3
 80061d6:	7a7b      	ldrb	r3, [r7, #9]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	b21b      	sxth	r3, r3
 80061dc:	4313      	orrs	r3, r2
 80061de:	82bb      	strh	r3, [r7, #20]
    int16_t t_magY = (int16_t)(t_buff[2] | t_buff[3] << 8);
 80061e0:	7abb      	ldrb	r3, [r7, #10]
 80061e2:	b21a      	sxth	r2, r3
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	b21b      	sxth	r3, r3
 80061ea:	4313      	orrs	r3, r2
 80061ec:	827b      	strh	r3, [r7, #18]
    int16_t t_magZ = (int16_t)(t_buff[4] | t_buff[5] << 8);
 80061ee:	7b3b      	ldrb	r3, [r7, #12]
 80061f0:	b21a      	sxth	r2, r3
 80061f2:	7b7b      	ldrb	r3, [r7, #13]
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	b21b      	sxth	r3, r3
 80061f8:	4313      	orrs	r3, r2
 80061fa:	823b      	strh	r3, [r7, #16]

	/* NEED TO BE SCALED */
    t_obj->value.bm1422_mag_x = (float)t_magX;
 80061fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006200:	ee07 3a90 	vmov	s15, r3
 8006204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	edc3 7a07 	vstr	s15, [r3, #28]
	t_obj->value.bm1422_mag_y = (float)t_magY;
 800620e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	edc3 7a08 	vstr	s15, [r3, #32]
	t_obj->value.bm1422_mag_z = (float)t_magZ;
 8006220:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006224:	ee07 3a90 	vmov	s15, r3
 8006228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return t_res;
 8006232:	7dfb      	ldrb	r3, [r7, #23]
}
 8006234:	4618      	mov	r0, r3
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	bd90      	pop	{r4, r7, pc}

0800623c <Assemble_SDO>:
	default:			return 0;		break;
	}
}

static void Assemble_SDO(SDOinfo* t_do_addr, uint8_t t_data_type)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
	SDOinfo temp = t_data_type;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	73fb      	strb	r3, [r7, #15]
 800624c:	7bfa      	ldrb	r2, [r7, #15]
	memcpy(t_do_addr, &temp, sizeof(SDOinfo));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	701a      	strb	r2, [r3, #0]
}
 8006252:	bf00      	nop
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <Assemble_PDO>:

static void Assemble_PDO(PDOinfo* t_do_addr, uint8_t t_data_type, uint8_t t_num_of_data)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	460b      	mov	r3, r1
 8006268:	70fb      	strb	r3, [r7, #3]
 800626a:	4613      	mov	r3, r2
 800626c:	70bb      	strb	r3, [r7, #2]
	PDOinfo temp = {t_data_type, t_num_of_data};
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	733b      	strb	r3, [r7, #12]
 8006272:	78bb      	ldrb	r3, [r7, #2]
 8006274:	737b      	strb	r3, [r7, #13]
 8006276:	89ba      	ldrh	r2, [r7, #12]
	memcpy(t_do_addr, &temp, sizeof(PDOinfo));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	801a      	strh	r2, [r3, #0]
}
 800627c:	bf00      	nop
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <Create_SDOTable_ObjDictionary>:
   |_/_/ \_\___/____|___|

*/

void Create_SDOTable_ObjDictionary()
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
	//********************************************************************************//
	//						|	  Task_ID	  |			SDO_ID			| DATA_TYPE | //
	//********************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_STATE],  	    			UINT8_T);
 800628c:	2101      	movs	r1, #1
 800628e:	48c2      	ldr	r0, [pc, #776]	; (8006598 <Create_SDOTable_ObjDictionary+0x310>)
 8006290:	f7ff ffd4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_STATE],  	    			UINT8_T);
 8006294:	2101      	movs	r1, #1
 8006296:	48c1      	ldr	r0, [pc, #772]	; (800659c <Create_SDOTable_ObjDictionary+0x314>)
 8006298:	f7ff ffd0 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_ROUTINE],  				UINT8_T);
 800629c:	2101      	movs	r1, #1
 800629e:	48c0      	ldr	r0, [pc, #768]	; (80065a0 <Create_SDOTable_ObjDictionary+0x318>)
 80062a0:	f7ff ffcc 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_ROUTINE],  				UINT8_T);
 80062a4:	2101      	movs	r1, #1
 80062a6:	48bf      	ldr	r0, [pc, #764]	; (80065a4 <Create_SDOTable_ObjDictionary+0x31c>)
 80062a8:	f7ff ffc8 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_NAME],  						STRING10);
 80062ac:	2109      	movs	r1, #9
 80062ae:	48be      	ldr	r0, [pc, #760]	; (80065a8 <Create_SDOTable_ObjDictionary+0x320>)
 80062b0:	f7ff ffc4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_POLE_PAIR],  					UINT8_T);
 80062b4:	2101      	movs	r1, #1
 80062b6:	48bd      	ldr	r0, [pc, #756]	; (80065ac <Create_SDOTable_ObjDictionary+0x324>)
 80062b8:	f7ff ffc0 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ENCODER_RESOLUTION],  			UINT16_T);
 80062bc:	2102      	movs	r1, #2
 80062be:	48bc      	ldr	r0, [pc, #752]	; (80065b0 <Create_SDOTable_ObjDictionary+0x328>)
 80062c0:	f7ff ffbc 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GEAR_RATIO],  					FLOAT32_T);
 80062c4:	2107      	movs	r1, #7
 80062c6:	48bb      	ldr	r0, [pc, #748]	; (80065b4 <Create_SDOTable_ObjDictionary+0x32c>)
 80062c8:	f7ff ffb8 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TORQUE_CONSTANT],  			FLOAT32_T);
 80062cc:	2107      	movs	r1, #7
 80062ce:	48ba      	ldr	r0, [pc, #744]	; (80065b8 <Create_SDOTable_ObjDictionary+0x330>)
 80062d0:	f7ff ffb4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_VELOCITY_CONSTANT],  			FLOAT32_T);
 80062d4:	2107      	movs	r1, #7
 80062d6:	48b9      	ldr	r0, [pc, #740]	; (80065bc <Create_SDOTable_ObjDictionary+0x334>)
 80062d8:	f7ff ffb0 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_PEAK_CURRENT_LIMIT],  			FLOAT32_T);
 80062dc:	2107      	movs	r1, #7
 80062de:	48b8      	ldr	r0, [pc, #736]	; (80065c0 <Create_SDOTable_ObjDictionary+0x338>)
 80062e0:	f7ff ffac 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CONTINUOUS_CURRENT_LIMIT],  	FLOAT32_T);
 80062e4:	2107      	movs	r1, #7
 80062e6:	48b7      	ldr	r0, [pc, #732]	; (80065c4 <Create_SDOTable_ObjDictionary+0x33c>)
 80062e8:	f7ff ffa8 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MAX_VELOCITY],		  			FLOAT32_T);
 80062ec:	2107      	movs	r1, #7
 80062ee:	48b6      	ldr	r0, [pc, #728]	; (80065c8 <Create_SDOTable_ObjDictionary+0x340>)
 80062f0:	f7ff ffa4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_COMMUTATION_DUTY],  			UINT16_T);
 80062f4:	2102      	movs	r1, #2
 80062f6:	48b5      	ldr	r0, [pc, #724]	; (80065cc <Create_SDOTable_ObjDictionary+0x344>)
 80062f8:	f7ff ffa0 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_USER_DIRECTION],  				FLOAT32_T);
 80062fc:	2107      	movs	r1, #7
 80062fe:	48b4      	ldr	r0, [pc, #720]	; (80065d0 <Create_SDOTable_ObjDictionary+0x348>)
 8006300:	f7ff ff9c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ELEC_SYSTEM_ID_MAG],  			FLOAT32_T);
 8006304:	2107      	movs	r1, #7
 8006306:	48b3      	ldr	r0, [pc, #716]	; (80065d4 <Create_SDOTable_ObjDictionary+0x34c>)
 8006308:	f7ff ff98 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_RESISTANCE],  		FLOAT32_T);
 800630c:	2107      	movs	r1, #7
 800630e:	48b2      	ldr	r0, [pc, #712]	; (80065d8 <Create_SDOTable_ObjDictionary+0x350>)
 8006310:	f7ff ff94 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_INDUCTANCE],  		FLOAT32_T);
 8006314:	2107      	movs	r1, #7
 8006316:	48b1      	ldr	r0, [pc, #708]	; (80065dc <Create_SDOTable_ObjDictionary+0x354>)
 8006318:	f7ff ff90 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_VELOCITY],  			FLOAT32_T);
 800631c:	2107      	movs	r1, #7
 800631e:	48b0      	ldr	r0, [pc, #704]	; (80065e0 <Create_SDOTable_ObjDictionary+0x358>)
 8006320:	f7ff ff8c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_GAIN_PCTG],  			UINT8_T);
 8006324:	2101      	movs	r1, #1
 8006326:	48af      	ldr	r0, [pc, #700]	; (80065e4 <Create_SDOTable_ObjDictionary+0x35c>)
 8006328:	f7ff ff88 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CURRENT_CTRL_BW_RAD],  		FLOAT32_T);
 800632c:	2107      	movs	r1, #7
 800632e:	48ae      	ldr	r0, [pc, #696]	; (80065e8 <Create_SDOTable_ObjDictionary+0x360>)
 8006330:	f7ff ff84 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_INERTIA],  					FLOAT32_T);
 8006334:	2107      	movs	r1, #7
 8006336:	48ad      	ldr	r0, [pc, #692]	; (80065ec <Create_SDOTable_ObjDictionary+0x364>)
 8006338:	f7ff ff80 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_DAMPING_COEF],  				FLOAT32_T);
 800633c:	2107      	movs	r1, #7
 800633e:	48ac      	ldr	r0, [pc, #688]	; (80065f0 <Create_SDOTable_ObjDictionary+0x368>)
 8006340:	f7ff ff7c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_A],  				FLOAT32_T);
 8006344:	2107      	movs	r1, #7
 8006346:	48ab      	ldr	r0, [pc, #684]	; (80065f4 <Create_SDOTable_ObjDictionary+0x36c>)
 8006348:	f7ff ff78 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_B],  				FLOAT32_T);
 800634c:	2107      	movs	r1, #7
 800634e:	48aa      	ldr	r0, [pc, #680]	; (80065f8 <Create_SDOTable_ObjDictionary+0x370>)
 8006350:	f7ff ff74 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_ID_INFO],  			FLOAT32_T);
 8006354:	2107      	movs	r1, #7
 8006356:	48a9      	ldr	r0, [pc, #676]	; (80065fc <Create_SDOTable_ObjDictionary+0x374>)
 8006358:	f7ff ff70 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_LUT_INFO],  			FLOAT32_T);
 800635c:	2107      	movs	r1, #7
 800635e:	48a8      	ldr	r0, [pc, #672]	; (8006600 <Create_SDOTable_ObjDictionary+0x378>)
 8006360:	f7ff ff6c 	bl	800623c <Assemble_SDO>




	/*Joint Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_STATE],  					UINT8_T);
 8006364:	2101      	movs	r1, #1
 8006366:	48a7      	ldr	r0, [pc, #668]	; (8006604 <Create_SDOTable_ObjDictionary+0x37c>)
 8006368:	f7ff ff68 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_STATE],  					UINT8_T);
 800636c:	2101      	movs	r1, #1
 800636e:	48a6      	ldr	r0, [pc, #664]	; (8006608 <Create_SDOTable_ObjDictionary+0x380>)
 8006370:	f7ff ff64 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_ROUTINE], 					UINT8_T);
 8006374:	2101      	movs	r1, #1
 8006376:	48a5      	ldr	r0, [pc, #660]	; (800660c <Create_SDOTable_ObjDictionary+0x384>)
 8006378:	f7ff ff60 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_ROUTINE], 					UINT8_T);
 800637c:	2101      	movs	r1, #1
 800637e:	48a4      	ldr	r0, [pc, #656]	; (8006610 <Create_SDOTable_ObjDictionary+0x388>)
 8006380:	f7ff ff5c 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR_LENGTH],	 		UINT8_T);
 8006384:	2101      	movs	r1, #1
 8006386:	48a3      	ldr	r0, [pc, #652]	; (8006614 <Create_SDOTable_ObjDictionary+0x38c>)
 8006388:	f7ff ff58 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR_LENGTH],		UINT8_T);
 800638c:	2101      	movs	r1, #1
 800638e:	48a2      	ldr	r0, [pc, #648]	; (8006618 <Create_SDOTable_ObjDictionary+0x390>)
 8006390:	f7ff ff54 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR],	  			FLOAT32_T);
 8006394:	2107      	movs	r1, #7
 8006396:	48a1      	ldr	r0, [pc, #644]	; (800661c <Create_SDOTable_ObjDictionary+0x394>)
 8006398:	f7ff ff50 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR],	  			FLOAT32_T);
 800639c:	2107      	movs	r1, #7
 800639e:	48a0      	ldr	r0, [pc, #640]	; (8006620 <Create_SDOTable_ObjDictionary+0x398>)
 80063a0:	f7ff ff4c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_SATURATION],	  			FLOAT32_T);
 80063a4:	2107      	movs	r1, #7
 80063a6:	489f      	ldr	r0, [pc, #636]	; (8006624 <Create_SDOTable_ObjDictionary+0x39c>)
 80063a8:	f7ff ff48 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_STIFFNESS],	  	FLOAT32_T);
 80063ac:	2107      	movs	r1, #7
 80063ae:	489e      	ldr	r0, [pc, #632]	; (8006628 <Create_SDOTable_ObjDictionary+0x3a0>)
 80063b0:	f7ff ff44 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_DAMPER],	  		FLOAT32_T);
 80063b4:	2107      	movs	r1, #7
 80063b6:	489d      	ldr	r0, [pc, #628]	; (800662c <Create_SDOTable_ObjDictionary+0x3a4>)
 80063b8:	f7ff ff40 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_PERIODIC_SIG_INFO],	FLOAT32_T);
 80063bc:	2107      	movs	r1, #7
 80063be:	489c      	ldr	r0, [pc, #624]	; (8006630 <Create_SDOTable_ObjDictionary+0x3a8>)
 80063c0:	f7ff ff3c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_PERIODIC_SIG_INFO],	FLOAT32_T);
 80063c4:	2107      	movs	r1, #7
 80063c6:	489b      	ldr	r0, [pc, #620]	; (8006634 <Create_SDOTable_ObjDictionary+0x3ac>)
 80063c8:	f7ff ff38 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_BW],						FLOAT32_T);
 80063cc:	2107      	movs	r1, #7
 80063ce:	489a      	ldr	r0, [pc, #616]	; (8006638 <Create_SDOTable_ObjDictionary+0x3b0>)
 80063d0:	f7ff ff34 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_NUM],					FLOAT32_T);
 80063d4:	2107      	movs	r1, #7
 80063d6:	4899      	ldr	r0, [pc, #612]	; (800663c <Create_SDOTable_ObjDictionary+0x3b4>)
 80063d8:	f7ff ff30 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_DEN],					FLOAT32_T);
 80063dc:	2107      	movs	r1, #7
 80063de:	4898      	ldr	r0, [pc, #608]	; (8006640 <Create_SDOTable_ObjDictionary+0x3b8>)
 80063e0:	f7ff ff2c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_NUM],					FLOAT32_T);
 80063e4:	2107      	movs	r1, #7
 80063e6:	4897      	ldr	r0, [pc, #604]	; (8006644 <Create_SDOTable_ObjDictionary+0x3bc>)
 80063e8:	f7ff ff28 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_DEN],					FLOAT32_T);
 80063ec:	2107      	movs	r1, #7
 80063ee:	4896      	ldr	r0, [pc, #600]	; (8006648 <Create_SDOTable_ObjDictionary+0x3c0>)
 80063f0:	f7ff ff24 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_SATURATION],				FLOAT32_T);
 80063f4:	2107      	movs	r1, #7
 80063f6:	4895      	ldr	r0, [pc, #596]	; (800664c <Create_SDOTable_ObjDictionary+0x3c4>)
 80063f8:	f7ff ff20 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_BW],				FLOAT32_T);
 80063fc:	2107      	movs	r1, #7
 80063fe:	4894      	ldr	r0, [pc, #592]	; (8006650 <Create_SDOTable_ObjDictionary+0x3c8>)
 8006400:	f7ff ff1c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_P_GAIN],			FLOAT32_T);
 8006404:	2107      	movs	r1, #7
 8006406:	4893      	ldr	r0, [pc, #588]	; (8006654 <Create_SDOTable_ObjDictionary+0x3cc>)
 8006408:	f7ff ff18 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_I_GAIN],			FLOAT32_T);
 800640c:	2107      	movs	r1, #7
 800640e:	4892      	ldr	r0, [pc, #584]	; (8006658 <Create_SDOTable_ObjDictionary+0x3d0>)
 8006410:	f7ff ff14 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_INPUT_PENALTY],	FLOAT32_T);
 8006414:	2107      	movs	r1, #7
 8006416:	4891      	ldr	r0, [pc, #580]	; (800665c <Create_SDOTable_ObjDictionary+0x3d4>)
 8006418:	f7ff ff10 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_P_GAIN],			FLOAT32_T);
 800641c:	2107      	movs	r1, #7
 800641e:	4890      	ldr	r0, [pc, #576]	; (8006660 <Create_SDOTable_ObjDictionary+0x3d8>)
 8006420:	f7ff ff0c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_D_GAIN],			FLOAT32_T);
 8006424:	2107      	movs	r1, #7
 8006426:	488f      	ldr	r0, [pc, #572]	; (8006664 <Create_SDOTable_ObjDictionary+0x3dc>)
 8006428:	f7ff ff08 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_MID_CTRL_SATURATION],			FLOAT32_T);
 800642c:	2107      	movs	r1, #7
 800642e:	488e      	ldr	r0, [pc, #568]	; (8006668 <Create_SDOTable_ObjDictionary+0x3e0>)
 8006430:	f7ff ff04 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_INCENCODER_SET_OFFSET],		UINT8_T);
 8006434:	2101      	movs	r1, #1
 8006436:	488d      	ldr	r0, [pc, #564]	; (800666c <Create_SDOTable_ObjDictionary+0x3e4>)
 8006438:	f7ff ff00 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_SET_OFFSET],		UINT8_T);
 800643c:	2101      	movs	r1, #1
 800643e:	488c      	ldr	r0, [pc, #560]	; (8006670 <Create_SDOTable_ObjDictionary+0x3e8>)
 8006440:	f7ff fefc 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_CHANGE_DIRECTION],	UINT8_T);
 8006444:	2101      	movs	r1, #1
 8006446:	488b      	ldr	r0, [pc, #556]	; (8006674 <Create_SDOTable_ObjDictionary+0x3ec>)
 8006448:	f7ff fef8 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFFNESS],				FLOAT32_T);
 800644c:	2107      	movs	r1, #7
 800644e:	488a      	ldr	r0, [pc, #552]	; (8006678 <Create_SDOTable_ObjDictionary+0x3f0>)
 8006450:	f7ff fef4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPER],					FLOAT32_T);
 8006454:	2107      	movs	r1, #7
 8006456:	4889      	ldr	r0, [pc, #548]	; (800667c <Create_SDOTable_ObjDictionary+0x3f4>)
 8006458:	f7ff fef0 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPED_RANGE],				FLOAT32_T);
 800645c:	2107      	movs	r1, #7
 800645e:	4888      	ldr	r0, [pc, #544]	; (8006680 <Create_SDOTable_ObjDictionary+0x3f8>)
 8006460:	f7ff feec 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFF_RANGE],				FLOAT32_T);
 8006464:	2107      	movs	r1, #7
 8006466:	4887      	ldr	r0, [pc, #540]	; (8006684 <Create_SDOTable_ObjDictionary+0x3fc>)
 8006468:	f7ff fee8 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_UPPER_LIMIT],			UINT8_T);
 800646c:	2101      	movs	r1, #1
 800646e:	4886      	ldr	r0, [pc, #536]	; (8006688 <Create_SDOTable_ObjDictionary+0x400>)
 8006470:	f7ff fee4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_LOWER_LIMIT],			UINT8_T);
 8006474:	2101      	movs	r1, #1
 8006476:	4885      	ldr	r0, [pc, #532]	; (800668c <Create_SDOTable_ObjDictionary+0x404>)
 8006478:	f7ff fee0 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_SATURATION],				FLOAT32_T);
 800647c:	2107      	movs	r1, #7
 800647e:	4884      	ldr	r0, [pc, #528]	; (8006690 <Create_SDOTable_ObjDictionary+0x408>)
 8006480:	f7ff fedc 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_NUM],				FLOAT32_T);
 8006484:	2107      	movs	r1, #7
 8006486:	4883      	ldr	r0, [pc, #524]	; (8006694 <Create_SDOTable_ObjDictionary+0x40c>)
 8006488:	f7ff fed8 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_DEN],				FLOAT32_T);
 800648c:	2107      	movs	r1, #7
 800648e:	4882      	ldr	r0, [pc, #520]	; (8006698 <Create_SDOTable_ObjDictionary+0x410>)
 8006490:	f7ff fed4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR],			UINT8_T);
 8006494:	2101      	movs	r1, #1
 8006496:	4881      	ldr	r0, [pc, #516]	; (800669c <Create_SDOTable_ObjDictionary+0x414>)
 8006498:	f7ff fed0 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR_LEAD_LAG],	FLOAT32_T);
 800649c:	2107      	movs	r1, #7
 800649e:	4880      	ldr	r0, [pc, #512]	; (80066a0 <Create_SDOTable_ObjDictionary+0x418>)
 80064a0:	f7ff fecc 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ENCODER_RESOLUTION],			UINT16_T);
 80064a4:	2102      	movs	r1, #2
 80064a6:	487f      	ldr	r0, [pc, #508]	; (80066a4 <Create_SDOTable_ObjDictionary+0x41c>)
 80064a8:	f7ff fec8 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_SBS_INFO],			FLOAT32_T);
 80064ac:	2107      	movs	r1, #7
 80064ae:	487e      	ldr	r0, [pc, #504]	; (80066a8 <Create_SDOTable_ObjDictionary+0x420>)
 80064b0:	f7ff fec4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_VERIFICATION_MAG],	FLOAT32_T);
 80064b4:	2107      	movs	r1, #7
 80064b6:	487d      	ldr	r0, [pc, #500]	; (80066ac <Create_SDOTable_ObjDictionary+0x424>)
 80064b8:	f7ff fec0 	bl	800623c <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_MODE_IDX],	UINT8_T);
 80064bc:	2101      	movs	r1, #1
 80064be:	487c      	ldr	r0, [pc, #496]	; (80066b0 <Create_SDOTable_ObjDictionary+0x428>)
 80064c0:	f7ff febc 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_TMAX],		INT16_T);
 80064c4:	2105      	movs	r1, #5
 80064c6:	487b      	ldr	r0, [pc, #492]	; (80066b4 <Create_SDOTable_ObjDictionary+0x42c>)
 80064c8:	f7ff feb8 	bl	800623c <Assemble_SDO>



	/*MSG Handler Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_STATE],  	    UINT8_T);
 80064cc:	2101      	movs	r1, #1
 80064ce:	487a      	ldr	r0, [pc, #488]	; (80066b8 <Create_SDOTable_ObjDictionary+0x430>)
 80064d0:	f7ff feb4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_STATE],  	    UINT8_T);
 80064d4:	2101      	movs	r1, #1
 80064d6:	4879      	ldr	r0, [pc, #484]	; (80066bc <Create_SDOTable_ObjDictionary+0x434>)
 80064d8:	f7ff feb0 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_ROUTINE],  		UINT8_T);
 80064dc:	2101      	movs	r1, #1
 80064de:	4878      	ldr	r0, [pc, #480]	; (80066c0 <Create_SDOTable_ObjDictionary+0x438>)
 80064e0:	f7ff feac 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_ROUTINE],  		UINT8_T);
 80064e4:	2101      	movs	r1, #1
 80064e6:	4877      	ldr	r0, [pc, #476]	; (80066c4 <Create_SDOTable_ObjDictionary+0x43c>)
 80064e8:	f7ff fea8 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_PDO_LIST], 			UINT16_T);
 80064ec:	2102      	movs	r1, #2
 80064ee:	4876      	ldr	r0, [pc, #472]	; (80066c8 <Create_SDOTable_ObjDictionary+0x440>)
 80064f0:	f7ff fea4 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_MS_ENUM],  			UINT8_T);
 80064f4:	2101      	movs	r1, #1
 80064f6:	4875      	ldr	r0, [pc, #468]	; (80066cc <Create_SDOTable_ObjDictionary+0x444>)
 80064f8:	f7ff fea0 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_ONOFF],  	UINT8_T);
 80064fc:	2101      	movs	r1, #1
 80064fe:	4874      	ldr	r0, [pc, #464]	; (80066d0 <Create_SDOTable_ObjDictionary+0x448>)
 8006500:	f7ff fe9c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_COMMAND],  	UINT8_T);
 8006504:	2101      	movs	r1, #1
 8006506:	4873      	ldr	r0, [pc, #460]	; (80066d4 <Create_SDOTable_ObjDictionary+0x44c>)
 8006508:	f7ff fe98 	bl	800623c <Assemble_SDO>

	/*IMU Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_STATE],  		UINT8_T);
 800650c:	2101      	movs	r1, #1
 800650e:	4872      	ldr	r0, [pc, #456]	; (80066d8 <Create_SDOTable_ObjDictionary+0x450>)
 8006510:	f7ff fe94 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_STATE],  		UINT8_T);
 8006514:	2101      	movs	r1, #1
 8006516:	4871      	ldr	r0, [pc, #452]	; (80066dc <Create_SDOTable_ObjDictionary+0x454>)
 8006518:	f7ff fe90 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_ROUTINE],  	    UINT8_T);
 800651c:	2101      	movs	r1, #1
 800651e:	4870      	ldr	r0, [pc, #448]	; (80066e0 <Create_SDOTable_ObjDictionary+0x458>)
 8006520:	f7ff fe8c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_ROUTINE],  	    UINT8_T);
 8006524:	2101      	movs	r1, #1
 8006526:	486f      	ldr	r0, [pc, #444]	; (80066e4 <Create_SDOTable_ObjDictionary+0x45c>)
 8006528:	f7ff fe88 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_FOR_TEST],  			UINT16_T);
 800652c:	2102      	movs	r1, #2
 800652e:	486e      	ldr	r0, [pc, #440]	; (80066e8 <Create_SDOTable_ObjDictionary+0x460>)
 8006530:	f7ff fe84 	bl	800623c <Assemble_SDO>


	/*SYSMNGT Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_STATE],  	UINT8_T);
 8006534:	2101      	movs	r1, #1
 8006536:	486d      	ldr	r0, [pc, #436]	; (80066ec <Create_SDOTable_ObjDictionary+0x464>)
 8006538:	f7ff fe80 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_STATE],  	UINT8_T);
 800653c:	2101      	movs	r1, #1
 800653e:	486c      	ldr	r0, [pc, #432]	; (80066f0 <Create_SDOTable_ObjDictionary+0x468>)
 8006540:	f7ff fe7c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_ROUTINE],  	UINT8_T);
 8006544:	2101      	movs	r1, #1
 8006546:	486b      	ldr	r0, [pc, #428]	; (80066f4 <Create_SDOTable_ObjDictionary+0x46c>)
 8006548:	f7ff fe78 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_ROUTINE],  	UINT8_T);
 800654c:	2101      	movs	r1, #1
 800654e:	486a      	ldr	r0, [pc, #424]	; (80066f8 <Create_SDOTable_ObjDictionary+0x470>)
 8006550:	f7ff fe74 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_FOR_TEST],  		UINT16_T);
 8006554:	2102      	movs	r1, #2
 8006556:	4869      	ldr	r0, [pc, #420]	; (80066fc <Create_SDOTable_ObjDictionary+0x474>)
 8006558:	f7ff fe70 	bl	800623c <Assemble_SDO>


	/*EXTDEV Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_STATE],  		UINT8_T);
 800655c:	2101      	movs	r1, #1
 800655e:	4868      	ldr	r0, [pc, #416]	; (8006700 <Create_SDOTable_ObjDictionary+0x478>)
 8006560:	f7ff fe6c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_STATE],  		UINT8_T);
 8006564:	2101      	movs	r1, #1
 8006566:	4867      	ldr	r0, [pc, #412]	; (8006704 <Create_SDOTable_ObjDictionary+0x47c>)
 8006568:	f7ff fe68 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_ROUTINE],  	UINT8_T);
 800656c:	2101      	movs	r1, #1
 800656e:	4866      	ldr	r0, [pc, #408]	; (8006708 <Create_SDOTable_ObjDictionary+0x480>)
 8006570:	f7ff fe64 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_ROUTINE],  	UINT8_T);
 8006574:	2101      	movs	r1, #1
 8006576:	4865      	ldr	r0, [pc, #404]	; (800670c <Create_SDOTable_ObjDictionary+0x484>)
 8006578:	f7ff fe60 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_LENGTH],  	FLOAT32_T);
 800657c:	2107      	movs	r1, #7
 800657e:	4864      	ldr	r0, [pc, #400]	; (8006710 <Create_SDOTable_ObjDictionary+0x488>)
 8006580:	f7ff fe5c 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_DIRECT],  	UINT8_T);
 8006584:	2101      	movs	r1, #1
 8006586:	4863      	ldr	r0, [pc, #396]	; (8006714 <Create_SDOTable_ObjDictionary+0x48c>)
 8006588:	f7ff fe58 	bl	800623c <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_FOR_TEST],  		INT16_T);
 800658c:	2105      	movs	r1, #5
 800658e:	4862      	ldr	r0, [pc, #392]	; (8006718 <Create_SDOTable_ObjDictionary+0x490>)
 8006590:	f7ff fe54 	bl	800623c <Assemble_SDO>
}
 8006594:	bf00      	nop
 8006596:	bd80      	pop	{r7, pc}
 8006598:	240001dc 	.word	0x240001dc
 800659c:	240001dd 	.word	0x240001dd
 80065a0:	240001de 	.word	0x240001de
 80065a4:	240001df 	.word	0x240001df
 80065a8:	240001e0 	.word	0x240001e0
 80065ac:	240001e1 	.word	0x240001e1
 80065b0:	240001e2 	.word	0x240001e2
 80065b4:	240001e3 	.word	0x240001e3
 80065b8:	240001e4 	.word	0x240001e4
 80065bc:	240001e5 	.word	0x240001e5
 80065c0:	240001e6 	.word	0x240001e6
 80065c4:	240001e7 	.word	0x240001e7
 80065c8:	240001e8 	.word	0x240001e8
 80065cc:	240001e9 	.word	0x240001e9
 80065d0:	240001ea 	.word	0x240001ea
 80065d4:	240001eb 	.word	0x240001eb
 80065d8:	240001ec 	.word	0x240001ec
 80065dc:	240001ed 	.word	0x240001ed
 80065e0:	240001ee 	.word	0x240001ee
 80065e4:	240001ef 	.word	0x240001ef
 80065e8:	240001f0 	.word	0x240001f0
 80065ec:	240001f1 	.word	0x240001f1
 80065f0:	240001f2 	.word	0x240001f2
 80065f4:	240001f3 	.word	0x240001f3
 80065f8:	240001f4 	.word	0x240001f4
 80065fc:	240001f5 	.word	0x240001f5
 8006600:	240001f6 	.word	0x240001f6
 8006604:	24000218 	.word	0x24000218
 8006608:	24000219 	.word	0x24000219
 800660c:	2400021a 	.word	0x2400021a
 8006610:	2400021b 	.word	0x2400021b
 8006614:	2400021c 	.word	0x2400021c
 8006618:	2400021d 	.word	0x2400021d
 800661c:	2400021e 	.word	0x2400021e
 8006620:	2400021f 	.word	0x2400021f
 8006624:	24000220 	.word	0x24000220
 8006628:	24000221 	.word	0x24000221
 800662c:	24000222 	.word	0x24000222
 8006630:	24000224 	.word	0x24000224
 8006634:	24000225 	.word	0x24000225
 8006638:	24000226 	.word	0x24000226
 800663c:	24000227 	.word	0x24000227
 8006640:	24000228 	.word	0x24000228
 8006644:	24000229 	.word	0x24000229
 8006648:	2400022a 	.word	0x2400022a
 800664c:	2400022b 	.word	0x2400022b
 8006650:	2400022c 	.word	0x2400022c
 8006654:	2400022d 	.word	0x2400022d
 8006658:	2400022e 	.word	0x2400022e
 800665c:	2400022f 	.word	0x2400022f
 8006660:	24000230 	.word	0x24000230
 8006664:	24000231 	.word	0x24000231
 8006668:	24000232 	.word	0x24000232
 800666c:	24000233 	.word	0x24000233
 8006670:	24000234 	.word	0x24000234
 8006674:	24000235 	.word	0x24000235
 8006678:	24000236 	.word	0x24000236
 800667c:	24000237 	.word	0x24000237
 8006680:	24000238 	.word	0x24000238
 8006684:	24000239 	.word	0x24000239
 8006688:	2400023a 	.word	0x2400023a
 800668c:	2400023b 	.word	0x2400023b
 8006690:	2400023c 	.word	0x2400023c
 8006694:	2400023d 	.word	0x2400023d
 8006698:	2400023e 	.word	0x2400023e
 800669c:	2400023f 	.word	0x2400023f
 80066a0:	24000240 	.word	0x24000240
 80066a4:	24000241 	.word	0x24000241
 80066a8:	24000242 	.word	0x24000242
 80066ac:	24000243 	.word	0x24000243
 80066b0:	24000248 	.word	0x24000248
 80066b4:	24000249 	.word	0x24000249
 80066b8:	24000254 	.word	0x24000254
 80066bc:	24000255 	.word	0x24000255
 80066c0:	24000256 	.word	0x24000256
 80066c4:	24000257 	.word	0x24000257
 80066c8:	24000258 	.word	0x24000258
 80066cc:	24000259 	.word	0x24000259
 80066d0:	2400025a 	.word	0x2400025a
 80066d4:	2400025b 	.word	0x2400025b
 80066d8:	24000290 	.word	0x24000290
 80066dc:	24000291 	.word	0x24000291
 80066e0:	24000292 	.word	0x24000292
 80066e4:	24000293 	.word	0x24000293
 80066e8:	24000294 	.word	0x24000294
 80066ec:	240002cc 	.word	0x240002cc
 80066f0:	240002cd 	.word	0x240002cd
 80066f4:	240002ce 	.word	0x240002ce
 80066f8:	240002cf 	.word	0x240002cf
 80066fc:	240002d0 	.word	0x240002d0
 8006700:	24000308 	.word	0x24000308
 8006704:	24000309 	.word	0x24000309
 8006708:	2400030a 	.word	0x2400030a
 800670c:	2400030b 	.word	0x2400030b
 8006710:	2400030c 	.word	0x2400030c
 8006714:	2400030d 	.word	0x2400030d
 8006718:	2400030e 	.word	0x2400030e

0800671c <Create_PDOTable_ObjDictionary>:


void Create_PDOTable_ObjDictionary()
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
	//**************************************************************************************************//
	//							   |	  Task_ID	  |				PDO_ID				| DATA_TYPE | #_of_DATA //
	//**************************************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_CURRENT],  			UINT16_T, 	 	3);
 8006720:	2203      	movs	r2, #3
 8006722:	2102      	movs	r1, #2
 8006724:	48bd      	ldr	r0, [pc, #756]	; (8006a1c <Create_PDOTable_ObjDictionary+0x300>)
 8006726:	f7ff fd9a 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_VOLTAGE],  			UINT16_T,  		3);
 800672a:	2203      	movs	r2, #3
 800672c:	2102      	movs	r1, #2
 800672e:	48bc      	ldr	r0, [pc, #752]	; (8006a20 <Create_PDOTable_ObjDictionary+0x304>)
 8006730:	f7ff fd95 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_POSITION],  					FLOAT32_T,  	1);
 8006734:	2201      	movs	r2, #1
 8006736:	2107      	movs	r1, #7
 8006738:	48ba      	ldr	r0, [pc, #744]	; (8006a24 <Create_PDOTable_ObjDictionary+0x308>)
 800673a:	f7ff fd90 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VELOCITY],  					INT32_T,  		2);
 800673e:	2202      	movs	r2, #2
 8006740:	2106      	movs	r1, #6
 8006742:	48b9      	ldr	r0, [pc, #740]	; (8006a28 <Create_PDOTable_ObjDictionary+0x30c>)
 8006744:	f7ff fd8b 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CLARKE_OUT],  				INT32_T,  		2);
 8006748:	2202      	movs	r2, #2
 800674a:	2106      	movs	r1, #6
 800674c:	48b7      	ldr	r0, [pc, #732]	; (8006a2c <Create_PDOTable_ObjDictionary+0x310>)
 800674e:	f7ff fd86 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PARK_OUT],  					FLOAT32_T,  	3);
 8006752:	2203      	movs	r2, #3
 8006754:	2107      	movs	r1, #7
 8006756:	48b6      	ldr	r0, [pc, #728]	; (8006a30 <Create_PDOTable_ObjDictionary+0x314>)
 8006758:	f7ff fd81 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VOLTAGE_IN],	    			FLOAT32_T,  	3);
 800675c:	2203      	movs	r2, #3
 800675e:	2107      	movs	r1, #7
 8006760:	48b4      	ldr	r0, [pc, #720]	; (8006a34 <Create_PDOTable_ObjDictionary+0x318>)
 8006762:	f7ff fd7c 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ELEC_ANGLE],	    			UINT16_T,  		1);
 8006766:	2201      	movs	r2, #1
 8006768:	2102      	movs	r1, #2
 800676a:	48b3      	ldr	r0, [pc, #716]	; (8006a38 <Create_PDOTable_ObjDictionary+0x31c>)
 800676c:	f7ff fd77 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PRBS_DATA],	    			FLOAT32_T, 		2);
 8006770:	2202      	movs	r2, #2
 8006772:	2107      	movs	r1, #7
 8006774:	48b1      	ldr	r0, [pc, #708]	; (8006a3c <Create_PDOTable_ObjDictionary+0x320>)
 8006776:	f7ff fd72 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_RAW_CURRENT],	    			INT32_T,  		3);
 800677a:	2203      	movs	r2, #3
 800677c:	2106      	movs	r1, #6
 800677e:	48b0      	ldr	r0, [pc, #704]	; (8006a40 <Create_PDOTable_ObjDictionary+0x324>)
 8006780:	f7ff fd6d 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_KF_CURRENT],	    			FLOAT32_T, 		3);
 8006784:	2203      	movs	r2, #3
 8006786:	2107      	movs	r1, #7
 8006788:	48ae      	ldr	r0, [pc, #696]	; (8006a44 <Create_PDOTable_ObjDictionary+0x328>)
 800678a:	f7ff fd68 	bl	800625e <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT],			FLOAT32_T, 		1);
 800678e:	2201      	movs	r2, #1
 8006790:	2107      	movs	r1, #7
 8006792:	48ad      	ldr	r0, [pc, #692]	; (8006a48 <Create_PDOTable_ObjDictionary+0x32c>)
 8006794:	f7ff fd63 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CURRENT_OUTPUT],  			FLOAT32_T,  	1);
 8006798:	2201      	movs	r2, #1
 800679a:	2107      	movs	r1, #7
 800679c:	48ab      	ldr	r0, [pc, #684]	; (8006a4c <Create_PDOTable_ObjDictionary+0x330>)
 800679e:	f7ff fd5e 	bl	800625e <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_AUXILIARY_INPUT],  			FLOAT32_T,  	1);
 80067a2:	2201      	movs	r2, #1
 80067a4:	2107      	movs	r1, #7
 80067a6:	48aa      	ldr	r0, [pc, #680]	; (8006a50 <Create_PDOTable_ObjDictionary+0x334>)
 80067a8:	f7ff fd59 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_LOW_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 80067ac:	2201      	movs	r2, #1
 80067ae:	2107      	movs	r1, #7
 80067b0:	48a8      	ldr	r0, [pc, #672]	; (8006a54 <Create_PDOTable_ObjDictionary+0x338>)
 80067b2:	f7ff fd54 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_FRICTION_COMPENSATOR_INPUT],  FLOAT32_T,  	1);
 80067b6:	2201      	movs	r2, #1
 80067b8:	2107      	movs	r1, #7
 80067ba:	48a7      	ldr	r0, [pc, #668]	; (8006a58 <Create_PDOTable_ObjDictionary+0x33c>)
 80067bc:	f7ff fd4f 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 80067c0:	2201      	movs	r2, #1
 80067c2:	2107      	movs	r1, #7
 80067c4:	48a5      	ldr	r0, [pc, #660]	; (8006a5c <Create_PDOTable_ObjDictionary+0x340>)
 80067c6:	f7ff fd4a 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_IRC_INPUT],					FLOAT32_T, 		1);
 80067ca:	2201      	movs	r2, #1
 80067cc:	2107      	movs	r1, #7
 80067ce:	48a4      	ldr	r0, [pc, #656]	; (8006a60 <Create_PDOTable_ObjDictionary+0x344>)
 80067d0:	f7ff fd45 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_CTRL_INPUT],  			FLOAT32_T,  	1);
 80067d4:	2201      	movs	r2, #1
 80067d6:	2107      	movs	r1, #7
 80067d8:	48a2      	ldr	r0, [pc, #648]	; (8006a64 <Create_PDOTable_ObjDictionary+0x348>)
 80067da:	f7ff fd40 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ANALYZER_INPUT],				FLOAT32_T, 		1);
 80067de:	2201      	movs	r2, #1
 80067e0:	2107      	movs	r1, #7
 80067e2:	48a1      	ldr	r0, [pc, #644]	; (8006a68 <Create_PDOTable_ObjDictionary+0x34c>)
 80067e4:	f7ff fd3b 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_COMMUTATION_STEP],			UINT8_T, 		1);
 80067e8:	2201      	movs	r2, #1
 80067ea:	2101      	movs	r1, #1
 80067ec:	489f      	ldr	r0, [pc, #636]	; (8006a6c <Create_PDOTable_ObjDictionary+0x350>)
 80067ee:	f7ff fd36 	bl	800625e <Assemble_PDO>


	/*Joint Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_LOOP_CNT],			UINT32_T, 		1);
 80067f2:	2201      	movs	r2, #1
 80067f4:	2103      	movs	r1, #3
 80067f6:	489e      	ldr	r0, [pc, #632]	; (8006a70 <Create_PDOTable_ObjDictionary+0x354>)
 80067f8:	f7ff fd31 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_POSITION],  		FLOAT32_T,  	1);
 80067fc:	2201      	movs	r2, #1
 80067fe:	2107      	movs	r1, #7
 8006800:	489c      	ldr	r0, [pc, #624]	; (8006a74 <Create_PDOTable_ObjDictionary+0x358>)
 8006802:	f7ff fd2c 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_VELOCITY],  		FLOAT32_T,  	1);
 8006806:	2201      	movs	r2, #1
 8006808:	2107      	movs	r1, #7
 800680a:	489b      	ldr	r0, [pc, #620]	; (8006a78 <Create_PDOTable_ObjDictionary+0x35c>)
 800680c:	f7ff fd27 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_POSITION], 	FLOAT32_T, 		1);
 8006810:	2201      	movs	r2, #1
 8006812:	2107      	movs	r1, #7
 8006814:	4899      	ldr	r0, [pc, #612]	; (8006a7c <Create_PDOTable_ObjDictionary+0x360>)
 8006816:	f7ff fd22 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_VELOCITY_RAW], FLOAT32_T,  	1);
 800681a:	2201      	movs	r2, #1
 800681c:	2107      	movs	r1, #7
 800681e:	4898      	ldr	r0, [pc, #608]	; (8006a80 <Create_PDOTable_ObjDictionary+0x364>)
 8006820:	f7ff fd1d 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_SYSTEM_ID_SBS_FREQ],	FLOAT32_T, 		1);
 8006824:	2201      	movs	r2, #1
 8006826:	2107      	movs	r1, #7
 8006828:	4896      	ldr	r0, [pc, #600]	; (8006a84 <Create_PDOTable_ObjDictionary+0x368>)
 800682a:	f7ff fd18 	bl	800625e <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_IMP_INPUT], 					FLOAT32_T,  	1);
 800682e:	2201      	movs	r2, #1
 8006830:	2107      	movs	r1, #7
 8006832:	4895      	ldr	r0, [pc, #596]	; (8006a88 <Create_PDOTable_ObjDictionary+0x36c>)
 8006834:	f7ff fd13 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_POS_PID_CTRL_INPUT], 			FLOAT32_T,  	1);
 8006838:	2201      	movs	r2, #1
 800683a:	2107      	movs	r1, #7
 800683c:	4893      	ldr	r0, [pc, #588]	; (8006a8c <Create_PDOTable_ObjDictionary+0x370>)
 800683e:	f7ff fd0e 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VEL_PID_CTRL_INPUT],			FLOAT32_T, 		1);
 8006842:	2201      	movs	r2, #1
 8006844:	2107      	movs	r1, #7
 8006846:	4892      	ldr	r0, [pc, #584]	; (8006a90 <Create_PDOTable_ObjDictionary+0x374>)
 8006848:	f7ff fd09 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VSD_INPUT],					FLOAT32_T, 		1);
 800684c:	2201      	movs	r2, #1
 800684e:	2107      	movs	r1, #7
 8006850:	4890      	ldr	r0, [pc, #576]	; (8006a94 <Create_PDOTable_ObjDictionary+0x378>)
 8006852:	f7ff fd04 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_UNIT_TRAJECTORY_BUFF_COUNT],	FLOAT32_T, 		1);
 8006856:	2201      	movs	r2, #1
 8006858:	2107      	movs	r1, #7
 800685a:	488f      	ldr	r0, [pc, #572]	; (8006a98 <Create_PDOTable_ObjDictionary+0x37c>)
 800685c:	f7ff fcff 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_TORQUE_TRAJECTORY_INPUT],		FLOAT32_T, 		1);
 8006860:	2201      	movs	r2, #1
 8006862:	2107      	movs	r1, #7
 8006864:	488d      	ldr	r0, [pc, #564]	; (8006a9c <Create_PDOTable_ObjDictionary+0x380>)
 8006866:	f7ff fcfa 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ABS_POSITION],				FLOAT32_T, 		1);
 800686a:	2201      	movs	r2, #1
 800686c:	2107      	movs	r1, #7
 800686e:	488c      	ldr	r0, [pc, #560]	; (8006aa0 <Create_PDOTable_ObjDictionary+0x384>)
 8006870:	f7ff fcf5 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_DISTURABNCE],				FLOAT32_T, 		1);
 8006874:	2201      	movs	r2, #1
 8006876:	2107      	movs	r1, #7
 8006878:	488a      	ldr	r0, [pc, #552]	; (8006aa4 <Create_PDOTable_ObjDictionary+0x388>)
 800687a:	f7ff fcf0 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_INPUT],					FLOAT32_T, 		1);
 800687e:	2201      	movs	r2, #1
 8006880:	2107      	movs	r1, #7
 8006882:	4889      	ldr	r0, [pc, #548]	; (8006aa8 <Create_PDOTable_ObjDictionary+0x38c>)
 8006884:	f7ff fceb 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_FF_INPUT],					FLOAT32_T, 		1);
 8006888:	2201      	movs	r2, #1
 800688a:	2107      	movs	r1, #7
 800688c:	4887      	ldr	r0, [pc, #540]	; (8006aac <Create_PDOTable_ObjDictionary+0x390>)
 800688e:	f7ff fce6 	bl	800625e <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VELOCITY_ESTIMATED],			FLOAT32_T, 		1);
 8006892:	2201      	movs	r2, #1
 8006894:	2107      	movs	r1, #7
 8006896:	4886      	ldr	r0, [pc, #536]	; (8006ab0 <Create_PDOTable_ObjDictionary+0x394>)
 8006898:	f7ff fce1 	bl	800625e <Assemble_PDO>



	/*COMM Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST1],  			INT32_T,  	1);
 800689c:	2201      	movs	r2, #1
 800689e:	2106      	movs	r1, #6
 80068a0:	4884      	ldr	r0, [pc, #528]	; (8006ab4 <Create_PDOTable_ObjDictionary+0x398>)
 80068a2:	f7ff fcdc 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST2],  			INT32_T,  	1);
 80068a6:	2201      	movs	r2, #1
 80068a8:	2106      	movs	r1, #6
 80068aa:	4883      	ldr	r0, [pc, #524]	; (8006ab8 <Create_PDOTable_ObjDictionary+0x39c>)
 80068ac:	f7ff fcd7 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST3],  			INT32_T,  	1);
 80068b0:	2201      	movs	r2, #1
 80068b2:	2106      	movs	r1, #6
 80068b4:	4881      	ldr	r0, [pc, #516]	; (8006abc <Create_PDOTable_ObjDictionary+0x3a0>)
 80068b6:	f7ff fcd2 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST4],  			INT32_T,  	1);
 80068ba:	2201      	movs	r2, #1
 80068bc:	2106      	movs	r1, #6
 80068be:	4880      	ldr	r0, [pc, #512]	; (8006ac0 <Create_PDOTable_ObjDictionary+0x3a4>)
 80068c0:	f7ff fccd 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST5],  			INT32_T,  	1);
 80068c4:	2201      	movs	r2, #1
 80068c6:	2106      	movs	r1, #6
 80068c8:	487e      	ldr	r0, [pc, #504]	; (8006ac4 <Create_PDOTable_ObjDictionary+0x3a8>)
 80068ca:	f7ff fcc8 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST6],  			INT32_T,  	1);
 80068ce:	2201      	movs	r2, #1
 80068d0:	2106      	movs	r1, #6
 80068d2:	487d      	ldr	r0, [pc, #500]	; (8006ac8 <Create_PDOTable_ObjDictionary+0x3ac>)
 80068d4:	f7ff fcc3 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST7],  			INT32_T,  	1);
 80068d8:	2201      	movs	r2, #1
 80068da:	2106      	movs	r1, #6
 80068dc:	487b      	ldr	r0, [pc, #492]	; (8006acc <Create_PDOTable_ObjDictionary+0x3b0>)
 80068de:	f7ff fcbe 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST8],  			INT32_T,  	1);
 80068e2:	2201      	movs	r2, #1
 80068e4:	2106      	movs	r1, #6
 80068e6:	487a      	ldr	r0, [pc, #488]	; (8006ad0 <Create_PDOTable_ObjDictionary+0x3b4>)
 80068e8:	f7ff fcb9 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST9],  			INT32_T,  	1);
 80068ec:	2201      	movs	r2, #1
 80068ee:	2106      	movs	r1, #6
 80068f0:	4878      	ldr	r0, [pc, #480]	; (8006ad4 <Create_PDOTable_ObjDictionary+0x3b8>)
 80068f2:	f7ff fcb4 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST10],  			INT32_T,  	1);
 80068f6:	2201      	movs	r2, #1
 80068f8:	2106      	movs	r1, #6
 80068fa:	4877      	ldr	r0, [pc, #476]	; (8006ad8 <Create_PDOTable_ObjDictionary+0x3bc>)
 80068fc:	f7ff fcaf 	bl	800625e <Assemble_PDO>

	/*IMU Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_X],  			FLOAT32_T,  	1);
 8006900:	2201      	movs	r2, #1
 8006902:	2107      	movs	r1, #7
 8006904:	4875      	ldr	r0, [pc, #468]	; (8006adc <Create_PDOTable_ObjDictionary+0x3c0>)
 8006906:	f7ff fcaa 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Y],  			FLOAT32_T,  	1);
 800690a:	2201      	movs	r2, #1
 800690c:	2107      	movs	r1, #7
 800690e:	4874      	ldr	r0, [pc, #464]	; (8006ae0 <Create_PDOTable_ObjDictionary+0x3c4>)
 8006910:	f7ff fca5 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Z],  			FLOAT32_T,  	1);
 8006914:	2201      	movs	r2, #1
 8006916:	2107      	movs	r1, #7
 8006918:	4872      	ldr	r0, [pc, #456]	; (8006ae4 <Create_PDOTable_ObjDictionary+0x3c8>)
 800691a:	f7ff fca0 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_X],  			FLOAT32_T,  	1);
 800691e:	2201      	movs	r2, #1
 8006920:	2107      	movs	r1, #7
 8006922:	4871      	ldr	r0, [pc, #452]	; (8006ae8 <Create_PDOTable_ObjDictionary+0x3cc>)
 8006924:	f7ff fc9b 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Y],  			FLOAT32_T,  	1);
 8006928:	2201      	movs	r2, #1
 800692a:	2107      	movs	r1, #7
 800692c:	486f      	ldr	r0, [pc, #444]	; (8006aec <Create_PDOTable_ObjDictionary+0x3d0>)
 800692e:	f7ff fc96 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Z],  			FLOAT32_T,  	1);
 8006932:	2201      	movs	r2, #1
 8006934:	2107      	movs	r1, #7
 8006936:	486e      	ldr	r0, [pc, #440]	; (8006af0 <Create_PDOTable_ObjDictionary+0x3d4>)
 8006938:	f7ff fc91 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_WALKING_STATE],  	FLOAT32_T,  	1);
 800693c:	2201      	movs	r2, #1
 800693e:	2107      	movs	r1, #7
 8006940:	486c      	ldr	r0, [pc, #432]	; (8006af4 <Create_PDOTable_ObjDictionary+0x3d8>)
 8006942:	f7ff fc8c 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GAIT_PHASE],  		FLOAT32_T,  	1);
 8006946:	2201      	movs	r2, #1
 8006948:	2107      	movs	r1, #7
 800694a:	486b      	ldr	r0, [pc, #428]	; (8006af8 <Create_PDOTable_ObjDictionary+0x3dc>)
 800694c:	f7ff fc87 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_X],  			FLOAT32_T,  	1);
 8006950:	2201      	movs	r2, #1
 8006952:	2107      	movs	r1, #7
 8006954:	4869      	ldr	r0, [pc, #420]	; (8006afc <Create_PDOTable_ObjDictionary+0x3e0>)
 8006956:	f7ff fc82 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Y],  			FLOAT32_T,  	1);
 800695a:	2201      	movs	r2, #1
 800695c:	2107      	movs	r1, #7
 800695e:	4868      	ldr	r0, [pc, #416]	; (8006b00 <Create_PDOTable_ObjDictionary+0x3e4>)
 8006960:	f7ff fc7d 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Z],  			FLOAT32_T,  	1);
 8006964:	2201      	movs	r2, #1
 8006966:	2107      	movs	r1, #7
 8006968:	4866      	ldr	r0, [pc, #408]	; (8006b04 <Create_PDOTable_ObjDictionary+0x3e8>)
 800696a:	f7ff fc78 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_P],  		FLOAT32_T,  	1);
 800696e:	2201      	movs	r2, #1
 8006970:	2107      	movs	r1, #7
 8006972:	4865      	ldr	r0, [pc, #404]	; (8006b08 <Create_PDOTable_ObjDictionary+0x3ec>)
 8006974:	f7ff fc73 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_D],  		FLOAT32_T,  	1);
 8006978:	2201      	movs	r2, #1
 800697a:	2107      	movs	r1, #7
 800697c:	4863      	ldr	r0, [pc, #396]	; (8006b0c <Create_PDOTable_ObjDictionary+0x3f0>)
 800697e:	f7ff fc6e 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC],  		FLOAT32_T,  	1);
 8006982:	2201      	movs	r2, #1
 8006984:	2107      	movs	r1, #7
 8006986:	4862      	ldr	r0, [pc, #392]	; (8006b10 <Create_PDOTable_ObjDictionary+0x3f4>)
 8006988:	f7ff fc69 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR],  		FLOAT32_T,  	1);
 800698c:	2201      	movs	r2, #1
 800698e:	2107      	movs	r1, #7
 8006990:	4860      	ldr	r0, [pc, #384]	; (8006b14 <Create_PDOTable_ObjDictionary+0x3f8>)
 8006992:	f7ff fc64 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC_FILTERED], FLOAT32_T,  	1);
 8006996:	2201      	movs	r2, #1
 8006998:	2107      	movs	r1, #7
 800699a:	485f      	ldr	r0, [pc, #380]	; (8006b18 <Create_PDOTable_ObjDictionary+0x3fc>)
 800699c:	f7ff fc5f 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR_FILTERED], FLOAT32_T,  	1);
 80069a0:	2201      	movs	r2, #1
 80069a2:	2107      	movs	r1, #7
 80069a4:	485d      	ldr	r0, [pc, #372]	; (8006b1c <Create_PDOTable_ObjDictionary+0x400>)
 80069a6:	f7ff fc5a 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_DEG_TVCF],  			FLOAT32_T,  	1);
 80069aa:	2201      	movs	r2, #1
 80069ac:	2107      	movs	r1, #7
 80069ae:	485c      	ldr	r0, [pc, #368]	; (8006b20 <Create_PDOTable_ObjDictionary+0x404>)
 80069b0:	f7ff fc55 	bl	800625e <Assemble_PDO>


	/*SYSMNGT Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_VOLT],  			FLOAT32_T,  	1);
 80069b4:	2201      	movs	r2, #1
 80069b6:	2107      	movs	r1, #7
 80069b8:	485a      	ldr	r0, [pc, #360]	; (8006b24 <Create_PDOTable_ObjDictionary+0x408>)
 80069ba:	f7ff fc50 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_CURR],  			FLOAT32_T,  	1);
 80069be:	2201      	movs	r2, #1
 80069c0:	2107      	movs	r1, #7
 80069c2:	4859      	ldr	r0, [pc, #356]	; (8006b28 <Create_PDOTable_ObjDictionary+0x40c>)
 80069c4:	f7ff fc4b 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_TEMP],  			FLOAT32_T,  	1);
 80069c8:	2201      	movs	r2, #1
 80069ca:	2107      	movs	r1, #7
 80069cc:	4857      	ldr	r0, [pc, #348]	; (8006b2c <Create_PDOTable_ObjDictionary+0x410>)
 80069ce:	f7ff fc46 	bl	800625e <Assemble_PDO>

	/*EXTDEV Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_FSR],  				FLOAT32_T,  	1);
 80069d2:	2201      	movs	r2, #1
 80069d4:	2107      	movs	r1, #7
 80069d6:	4856      	ldr	r0, [pc, #344]	; (8006b30 <Create_PDOTable_ObjDictionary+0x414>)
 80069d8:	f7ff fc41 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_LP],  				FLOAT32_T,  	1);
 80069dc:	2201      	movs	r2, #1
 80069de:	2107      	movs	r1, #7
 80069e0:	4854      	ldr	r0, [pc, #336]	; (8006b34 <Create_PDOTable_ObjDictionary+0x418>)
 80069e2:	f7ff fc3c 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_REF],  	FLOAT32_T,  	1);
 80069e6:	2201      	movs	r2, #1
 80069e8:	2107      	movs	r1, #7
 80069ea:	4853      	ldr	r0, [pc, #332]	; (8006b38 <Create_PDOTable_ObjDictionary+0x41c>)
 80069ec:	f7ff fc37 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_CMD],  	UINT8_T,  		1);
 80069f0:	2201      	movs	r2, #1
 80069f2:	2101      	movs	r1, #1
 80069f4:	4851      	ldr	r0, [pc, #324]	; (8006b3c <Create_PDOTable_ObjDictionary+0x420>)
 80069f6:	f7ff fc32 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_ACT],  	FLOAT32_T,  	1);
 80069fa:	2201      	movs	r2, #1
 80069fc:	2107      	movs	r1, #7
 80069fe:	4850      	ldr	r0, [pc, #320]	; (8006b40 <Create_PDOTable_ObjDictionary+0x424>)
 8006a00:	f7ff fc2d 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_ACT],  	UINT8_T,  		1);
 8006a04:	2201      	movs	r2, #1
 8006a06:	2101      	movs	r1, #1
 8006a08:	484e      	ldr	r0, [pc, #312]	; (8006b44 <Create_PDOTable_ObjDictionary+0x428>)
 8006a0a:	f7ff fc28 	bl	800625e <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_BUTTON_STATE],  	UINT8_T,  		1);
 8006a0e:	2201      	movs	r2, #1
 8006a10:	2101      	movs	r1, #1
 8006a12:	484d      	ldr	r0, [pc, #308]	; (8006b48 <Create_PDOTable_ObjDictionary+0x42c>)
 8006a14:	f7ff fc23 	bl	800625e <Assemble_PDO>
}
 8006a18:	bf00      	nop
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	2400d1e8 	.word	0x2400d1e8
 8006a20:	2400d1ea 	.word	0x2400d1ea
 8006a24:	2400d1ec 	.word	0x2400d1ec
 8006a28:	2400d1ee 	.word	0x2400d1ee
 8006a2c:	2400d1f0 	.word	0x2400d1f0
 8006a30:	2400d1f2 	.word	0x2400d1f2
 8006a34:	2400d1f4 	.word	0x2400d1f4
 8006a38:	2400d1f6 	.word	0x2400d1f6
 8006a3c:	2400d1f8 	.word	0x2400d1f8
 8006a40:	2400d1fa 	.word	0x2400d1fa
 8006a44:	2400d1fc 	.word	0x2400d1fc
 8006a48:	2400d1fe 	.word	0x2400d1fe
 8006a4c:	2400d200 	.word	0x2400d200
 8006a50:	2400d202 	.word	0x2400d202
 8006a54:	2400d204 	.word	0x2400d204
 8006a58:	2400d206 	.word	0x2400d206
 8006a5c:	2400d208 	.word	0x2400d208
 8006a60:	2400d20a 	.word	0x2400d20a
 8006a64:	2400d20c 	.word	0x2400d20c
 8006a68:	2400d20e 	.word	0x2400d20e
 8006a6c:	2400d210 	.word	0x2400d210
 8006a70:	2400d224 	.word	0x2400d224
 8006a74:	2400d226 	.word	0x2400d226
 8006a78:	2400d228 	.word	0x2400d228
 8006a7c:	2400d22a 	.word	0x2400d22a
 8006a80:	2400d22c 	.word	0x2400d22c
 8006a84:	2400d22e 	.word	0x2400d22e
 8006a88:	2400d230 	.word	0x2400d230
 8006a8c:	2400d232 	.word	0x2400d232
 8006a90:	2400d234 	.word	0x2400d234
 8006a94:	2400d236 	.word	0x2400d236
 8006a98:	2400d238 	.word	0x2400d238
 8006a9c:	2400d23a 	.word	0x2400d23a
 8006aa0:	2400d23c 	.word	0x2400d23c
 8006aa4:	2400d23e 	.word	0x2400d23e
 8006aa8:	2400d240 	.word	0x2400d240
 8006aac:	2400d242 	.word	0x2400d242
 8006ab0:	2400d244 	.word	0x2400d244
 8006ab4:	2400d260 	.word	0x2400d260
 8006ab8:	2400d262 	.word	0x2400d262
 8006abc:	2400d264 	.word	0x2400d264
 8006ac0:	2400d266 	.word	0x2400d266
 8006ac4:	2400d268 	.word	0x2400d268
 8006ac8:	2400d26a 	.word	0x2400d26a
 8006acc:	2400d26c 	.word	0x2400d26c
 8006ad0:	2400d26e 	.word	0x2400d26e
 8006ad4:	2400d270 	.word	0x2400d270
 8006ad8:	2400d272 	.word	0x2400d272
 8006adc:	2400d29c 	.word	0x2400d29c
 8006ae0:	2400d29e 	.word	0x2400d29e
 8006ae4:	2400d2a0 	.word	0x2400d2a0
 8006ae8:	2400d2a2 	.word	0x2400d2a2
 8006aec:	2400d2a4 	.word	0x2400d2a4
 8006af0:	2400d2a6 	.word	0x2400d2a6
 8006af4:	2400d2a8 	.word	0x2400d2a8
 8006af8:	2400d2aa 	.word	0x2400d2aa
 8006afc:	2400d2ac 	.word	0x2400d2ac
 8006b00:	2400d2ae 	.word	0x2400d2ae
 8006b04:	2400d2b0 	.word	0x2400d2b0
 8006b08:	2400d2b2 	.word	0x2400d2b2
 8006b0c:	2400d2b4 	.word	0x2400d2b4
 8006b10:	2400d2b6 	.word	0x2400d2b6
 8006b14:	2400d2b8 	.word	0x2400d2b8
 8006b18:	2400d2ba 	.word	0x2400d2ba
 8006b1c:	2400d2bc 	.word	0x2400d2bc
 8006b20:	2400d2be 	.word	0x2400d2be
 8006b24:	2400d2d8 	.word	0x2400d2d8
 8006b28:	2400d2da 	.word	0x2400d2da
 8006b2c:	2400d2dc 	.word	0x2400d2dc
 8006b30:	2400d314 	.word	0x2400d314
 8006b34:	2400d316 	.word	0x2400d316
 8006b38:	2400d318 	.word	0x2400d318
 8006b3c:	2400d31a 	.word	0x2400d31a
 8006b40:	2400d31c 	.word	0x2400d31c
 8006b44:	2400d31e 	.word	0x2400d31e
 8006b48:	2400d320 	.word	0x2400d320

08006b4c <Write_Reg_ICM20608G>:
{
    return t_obj->io.ReadReg(t_obj->addr, t_reg, t_data, t_size);
}

static ICM20608G Write_Reg_ICM20608G(ICM20608GObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 8006b4c:	b590      	push	{r4, r7, lr}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	817b      	strh	r3, [r7, #10]
    return t_obj->io.WriteReg(t_obj->addr, t_reg, t_data, t_size);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	695c      	ldr	r4, [r3, #20]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8818      	ldrh	r0, [r3, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	8979      	ldrh	r1, [r7, #10]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	47a0      	blx	r4
 8006b6e:	4603      	mov	r3, r0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd90      	pop	{r4, r7, pc}

08006b78 <Set_Reg_ICM20608G>:

static ICM20608G Set_Reg_ICM20608G(ICM20608GObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	460b      	mov	r3, r1
 8006b86:	817b      	strh	r3, [r7, #10]
	uint8_t t_res = e_ICM20608G_STATUS_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	75fb      	strb	r3, [r7, #23]
    t_res = Write_Reg_ICM20608G(t_obj, t_reg, t_data, t_size);
 8006b8c:	8979      	ldrh	r1, [r7, #10]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff ffda 	bl	8006b4c <Write_Reg_ICM20608G>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	75fb      	strb	r3, [r7, #23]
    return t_res;
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3718      	adds	r7, #24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <Set_Ioctx_ICM20608G>:

ICM20608G Set_Ioctx_ICM20608G(ICM20608GObject* t_obj, ICM20608GIOctx* t_ioctx)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
    if (!t_obj || !t_ioctx->IsDevReady || !t_ioctx->ReadReg || !t_ioctx->WriteReg){
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00b      	beq.n	8006bce <Set_Ioctx_ICM20608G+0x28>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <Set_Ioctx_ICM20608G+0x28>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <Set_Ioctx_ICM20608G+0x28>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <Set_Ioctx_ICM20608G+0x2c>
        return e_ICM20608G_STATUS_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e018      	b.n	8006c04 <Set_Ioctx_ICM20608G+0x5e>
    }

    t_obj->io.Init       = t_ioctx->Init;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	605a      	str	r2, [r3, #4]
    t_obj->io.DeInit     = t_ioctx->DeInit;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	609a      	str	r2, [r3, #8]
    t_obj->io.IsDevReady = t_ioctx->IsDevReady;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	60da      	str	r2, [r3, #12]
    t_obj->io.ReadReg    = t_ioctx->ReadReg;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	611a      	str	r2, [r3, #16]
    t_obj->io.WriteReg   = t_ioctx->WriteReg;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	615a      	str	r2, [r3, #20]
    t_obj->io.Wait       = t_ioctx->Wait;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	619a      	str	r2, [r3, #24]

    return e_ICM20608G_STATUS_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <Init_ICM20608G>:

ICM20608G Init_ICM20608G(ICM20608GObject* t_obj)			// Setting control register
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	static uint8_t t_res = e_ICM20608G_STATUS_OK;

    // Check Address
    t_res = e_ICM20608G_STATUS_ERROR;
 8006c18:	4b27      	ldr	r3, [pc, #156]	; (8006cb8 <Init_ICM20608G+0xa8>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
    t_obj->addr = ICM20608G_DEV_ADDR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	22d2      	movs	r2, #210	; 0xd2
 8006c22:	801a      	strh	r2, [r3, #0]
    if (t_obj->io.IsDevReady(t_obj->addr) == 0){
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	8812      	ldrh	r2, [r2, #0]
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4798      	blx	r3
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <Init_ICM20608G+0x2c>
        t_res = e_ICM20608G_STATUS_OK;
 8006c36:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <Init_ICM20608G+0xa8>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
    }

    // Configure Control
    if (t_res == e_ICM20608G_STATUS_OK){
 8006c3c:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <Init_ICM20608G+0xa8>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d133      	bne.n	8006cac <Init_ICM20608G+0x9c>
        uint8_t conf_1 = ICM20608G_PWR_MGMT_1_ONE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_PWR_MGMT_1, &conf_1, ICM20608G_CONTROL_SIZE);
 8006c48:	f107 020f 	add.w	r2, r7, #15
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	216b      	movs	r1, #107	; 0x6b
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff ff91 	bl	8006b78 <Set_Reg_ICM20608G>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <Init_ICM20608G+0xa8>)
 8006c5c:	701a      	strb	r2, [r3, #0]
        uint8_t conf_2 = ICM20608G_PWR_MGMT_2_ONE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73bb      	strb	r3, [r7, #14]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_PWR_MGMT_2, &conf_2, ICM20608G_CONTROL_SIZE);
 8006c62:	f107 020e 	add.w	r2, r7, #14
 8006c66:	2301      	movs	r3, #1
 8006c68:	216c      	movs	r1, #108	; 0x6c
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff ff84 	bl	8006b78 <Set_Reg_ICM20608G>
 8006c70:	4603      	mov	r3, r0
 8006c72:	461a      	mov	r2, r3
 8006c74:	4b10      	ldr	r3, [pc, #64]	; (8006cb8 <Init_ICM20608G+0xa8>)
 8006c76:	701a      	strb	r2, [r3, #0]
        uint8_t conf_3 = ICM20608G_GYR_CONFIG_ONE;
 8006c78:	2308      	movs	r3, #8
 8006c7a:	737b      	strb	r3, [r7, #13]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_GYRO_CONFIG, &conf_3, ICM20608G_CONTROL_SIZE);
 8006c7c:	f107 020d 	add.w	r2, r7, #13
 8006c80:	2301      	movs	r3, #1
 8006c82:	211b      	movs	r1, #27
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff ff77 	bl	8006b78 <Set_Reg_ICM20608G>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <Init_ICM20608G+0xa8>)
 8006c90:	701a      	strb	r2, [r3, #0]
        uint8_t conf_4 = ICM20608G_ACC_CONFIG_ONE;
 8006c92:	2308      	movs	r3, #8
 8006c94:	733b      	strb	r3, [r7, #12]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_ACCEL_CONFIG, &conf_4, ICM20608G_CONTROL_SIZE);
 8006c96:	f107 020c 	add.w	r2, r7, #12
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	211c      	movs	r1, #28
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff ff6a 	bl	8006b78 <Set_Reg_ICM20608G>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4b03      	ldr	r3, [pc, #12]	; (8006cb8 <Init_ICM20608G+0xa8>)
 8006caa:	701a      	strb	r2, [r3, #0]
    }

    return t_res;
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <Init_ICM20608G+0xa8>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	24000099 	.word	0x24000099

08006cbc <Get_Value_ICM20608G>:

ICM20608G Get_Value_ICM20608G(ICM20608GObject* t_obj)
{
 8006cbc:	b590      	push	{r4, r7, lr}
 8006cbe:	b08b      	sub	sp, #44	; 0x2c
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t t_buff[14];

	t_res = t_obj->io.ReadReg(t_obj->addr, ICM20608G_ACCEL_XOUT_H, t_buff, 14);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691c      	ldr	r4, [r3, #16]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8818      	ldrh	r0, [r3, #0]
 8006cd2:	f107 020c 	add.w	r2, r7, #12
 8006cd6:	230e      	movs	r3, #14
 8006cd8:	213b      	movs	r1, #59	; 0x3b
 8006cda:	47a0      	blx	r4
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t t_Xacc = (int16_t)(t_buff[0]  << 8 | t_buff[1]);
 8006ce2:	7b3b      	ldrb	r3, [r7, #12]
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	b21a      	sxth	r2, r3
 8006ce8:	7b7b      	ldrb	r3, [r7, #13]
 8006cea:	b21b      	sxth	r3, r3
 8006cec:	4313      	orrs	r3, r2
 8006cee:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t t_Yacc = (int16_t)(t_buff[2]  << 8 | t_buff[3]);
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	b21a      	sxth	r2, r3
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
 8006cf8:	b21b      	sxth	r3, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t t_Zacc = (int16_t)(t_buff[4]  << 8 | t_buff[5]);
 8006cfe:	7c3b      	ldrb	r3, [r7, #16]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	b21a      	sxth	r2, r3
 8006d04:	7c7b      	ldrb	r3, [r7, #17]
 8006d06:	b21b      	sxth	r3, r3
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	843b      	strh	r3, [r7, #32]
	int16_t t_Xgyr = (int16_t)(t_buff[8]  << 8 | t_buff[9]);
 8006d0c:	7d3b      	ldrb	r3, [r7, #20]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	b21a      	sxth	r2, r3
 8006d12:	7d7b      	ldrb	r3, [r7, #21]
 8006d14:	b21b      	sxth	r3, r3
 8006d16:	4313      	orrs	r3, r2
 8006d18:	83fb      	strh	r3, [r7, #30]
	int16_t t_Ygyr = (int16_t)(t_buff[10] << 8 | t_buff[11]);
 8006d1a:	7dbb      	ldrb	r3, [r7, #22]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	b21a      	sxth	r2, r3
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	b21b      	sxth	r3, r3
 8006d24:	4313      	orrs	r3, r2
 8006d26:	83bb      	strh	r3, [r7, #28]
	int16_t t_Zgyr = (int16_t)(t_buff[12] << 8 | t_buff[13]);
 8006d28:	7e3b      	ldrb	r3, [r7, #24]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	b21a      	sxth	r2, r3
 8006d2e:	7e7b      	ldrb	r3, [r7, #25]
 8006d30:	b21b      	sxth	r3, r3
 8006d32:	4313      	orrs	r3, r2
 8006d34:	837b      	strh	r3, [r7, #26]

	/* NEED TO BE SCALED */
	t_obj->value.icm20608_acc_x = (float)(t_Xacc / 8192.0f);
 8006d36:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d42:	eddf 6a27 	vldr	s13, [pc, #156]	; 8006de0 <Get_Value_ICM20608G+0x124>
 8006d46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	edc3 7a07 	vstr	s15, [r3, #28]
	t_obj->value.icm20608_acc_y = (float)(t_Yacc / 8192.0f);
 8006d50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d5c:	eddf 6a20 	vldr	s13, [pc, #128]	; 8006de0 <Get_Value_ICM20608G+0x124>
 8006d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	edc3 7a08 	vstr	s15, [r3, #32]
	t_obj->value.icm20608_acc_z = (float)(t_Zacc / 8192.0f);
 8006d6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d76:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8006de0 <Get_Value_ICM20608G+0x124>
 8006d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	t_obj->value.icm20608_gyr_x = (float)(t_Xgyr / 65.5f); //65.5f
 8006d84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006d88:	ee07 3a90 	vmov	s15, r3
 8006d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d90:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006de4 <Get_Value_ICM20608G+0x128>
 8006d94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	t_obj->value.icm20608_gyr_y = (float)(t_Ygyr / 65.5f);
 8006d9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006daa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006de4 <Get_Value_ICM20608G+0x128>
 8006dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	t_obj->value.icm20608_gyr_z = (float)(t_Zgyr / 65.5f);
 8006db8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dc4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006de4 <Get_Value_ICM20608G+0x128>
 8006dc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	return t_res;
 8006dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	372c      	adds	r7, #44	; 0x2c
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd90      	pop	{r4, r7, pc}
 8006dde:	bf00      	nop
 8006de0:	46000000 	.word	0x46000000
 8006de4:	42830000 	.word	0x42830000

08006de8 <IsDevReady_3Axis_IMU>:
#include "ioif_3axis_imu.h"

static HAL_StatusTypeDef IsDevReady_3Axis_IMU(uint16_t t_dev_addr)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	80fb      	strh	r3, [r7, #6]
	return IsDevReady_I2C3(t_dev_addr);
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f933 	bl	8007060 <IsDevReady_I2C3>
 8006dfa:	4603      	mov	r3, r0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <Read_3Axis_IMU>:

static HAL_StatusTypeDef Read_3Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	60ba      	str	r2, [r7, #8]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4603      	mov	r3, r0
 8006e10:	81fb      	strh	r3, [r7, #14]
 8006e12:	460b      	mov	r3, r1
 8006e14:	81bb      	strh	r3, [r7, #12]
 8006e16:	4613      	mov	r3, r2
 8006e18:	80fb      	strh	r3, [r7, #6]
	return Mem_Read_I2C3(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 8006e1a:	89b9      	ldrh	r1, [r7, #12]
 8006e1c:	89f8      	ldrh	r0, [r7, #14]
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f000 f9c3 	bl	80071b0 <Mem_Read_I2C3>
 8006e2a:	4603      	mov	r3, r0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <Write_3Axis_IMU>:

static HAL_StatusTypeDef Write_3Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60ba      	str	r2, [r7, #8]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4603      	mov	r3, r0
 8006e40:	81fb      	strh	r3, [r7, #14]
 8006e42:	460b      	mov	r3, r1
 8006e44:	81bb      	strh	r3, [r7, #12]
 8006e46:	4613      	mov	r3, r2
 8006e48:	80fb      	strh	r3, [r7, #6]
	return Mem_Write_I2C3(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 8006e4a:	89b9      	ldrh	r1, [r7, #12]
 8006e4c:	89f8      	ldrh	r0, [r7, #14]
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f000 f979 	bl	800714c <Mem_Write_I2C3>
 8006e5a:	4603      	mov	r3, r0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <Init_3Axis_IMU>:

HAL_StatusTypeDef Init_3Axis_IMU(MagData* t_mag_data)
{
 8006e64:	b5b0      	push	{r4, r5, r7, lr}
 8006e66:	b08a      	sub	sp, #40	; 0x28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
	uint8_t t_init_res = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	memset(t_mag_data, 0, sizeof(MagData));
 8006e72:	220c      	movs	r2, #12
 8006e74:	2100      	movs	r1, #0
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f002 feb6 	bl	8009be8 <memset>

	BM1422AGMVIOctx ioctx = {
 8006e7c:	4b13      	ldr	r3, [pc, #76]	; (8006ecc <Init_3Axis_IMU+0x68>)
 8006e7e:	f107 040c 	add.w	r4, r7, #12
 8006e82:	461d      	mov	r5, r3
 8006e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006e8c:	e884 0003 	stmia.w	r4, {r0, r1}
		Read_3Axis_IMU,
		Write_3Axis_IMU,
		NULL, 
	};

	t_init_res = Set_Ioctx_BM1422AGMV(&bm1422agmv_obj, &ioctx);
 8006e90:	f107 030c 	add.w	r3, r7, #12
 8006e94:	4619      	mov	r1, r3
 8006e96:	480e      	ldr	r0, [pc, #56]	; (8006ed0 <Init_3Axis_IMU+0x6c>)
 8006e98:	f7ff f8f5 	bl	8006086 <Set_Ioctx_BM1422AGMV>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Init_BM1422AGMV(&bm1422agmv_obj) != HAL_OK){
 8006ea2:	480b      	ldr	r0, [pc, #44]	; (8006ed0 <Init_3Axis_IMU+0x6c>)
 8006ea4:	f7ff f924 	bl	80060f0 <Init_BM1422AGMV>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d008      	beq.n	8006ec0 <Init_3Axis_IMU+0x5c>
		t_init_res = Init_BM1422AGMV(&bm1422agmv_obj);
 8006eae:	4808      	ldr	r0, [pc, #32]	; (8006ed0 <Init_3Axis_IMU+0x6c>)
 8006eb0:	f7ff f91e 	bl	80060f0 <Init_BM1422AGMV>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return t_init_res;
 8006eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ebe:	e001      	b.n	8006ec4 <Init_3Axis_IMU+0x60>
	}

	return t_init_res;
 8006ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3728      	adds	r7, #40	; 0x28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bdb0      	pop	{r4, r5, r7, pc}
 8006ecc:	0800b73c 	.word	0x0800b73c
 8006ed0:	24003144 	.word	0x24003144

08006ed4 <Get_Value_3Axis_IMU>:

HAL_StatusTypeDef Get_Value_3Axis_IMU(MagData* t_mag_data)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	uint8_t t_get_value_res = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
	t_get_value_res = Get_Value_BM1422AGMV(&bm1422agmv_obj);
 8006ee0:	4809      	ldr	r0, [pc, #36]	; (8006f08 <Get_Value_3Axis_IMU+0x34>)
 8006ee2:	f7ff f965 	bl	80061b0 <Get_Value_BM1422AGMV>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73fb      	strb	r3, [r7, #15]

	if (t_get_value_res == HAL_OK){
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <Get_Value_3Axis_IMU+0x2a>
		memcpy(t_mag_data, &bm1422agmv_obj.value, sizeof(MagData));
 8006ef0:	220c      	movs	r2, #12
 8006ef2:	4906      	ldr	r1, [pc, #24]	; (8006f0c <Get_Value_3Axis_IMU+0x38>)
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f002 fe69 	bl	8009bcc <memcpy>
	} else{
		return t_get_value_res;
	}

	return t_get_value_res;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	e000      	b.n	8006f00 <Get_Value_3Axis_IMU+0x2c>
		return t_get_value_res;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	24003144 	.word	0x24003144
 8006f0c:	24003160 	.word	0x24003160

08006f10 <IsDevReady_6Axis_IMU>:
#include "ioif_6axis_imu.h"

static HAL_StatusTypeDef IsDevReady_6Axis_IMU(uint16_t t_dev_addr)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	80fb      	strh	r3, [r7, #6]
   return IsDevReady_I2C1(t_dev_addr);
 8006f1a:	88fb      	ldrh	r3, [r7, #6]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 f88d 	bl	800703c <IsDevReady_I2C1>
 8006f22:	4603      	mov	r3, r0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <Read_6Axis_IMU>:

static HAL_StatusTypeDef Read_6Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60ba      	str	r2, [r7, #8]
 8006f34:	461a      	mov	r2, r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	81fb      	strh	r3, [r7, #14]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	81bb      	strh	r3, [r7, #12]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]
	return Mem_Read_I2C1(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 8006f42:	89b9      	ldrh	r1, [r7, #12]
 8006f44:	89f8      	ldrh	r0, [r7, #14]
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f000 f8cb 	bl	80070e8 <Mem_Read_I2C1>
 8006f52:	4603      	mov	r3, r0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <Write_6Axis_IMU>:

static HAL_StatusTypeDef Write_6Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60ba      	str	r2, [r7, #8]
 8006f64:	461a      	mov	r2, r3
 8006f66:	4603      	mov	r3, r0
 8006f68:	81fb      	strh	r3, [r7, #14]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	81bb      	strh	r3, [r7, #12]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80fb      	strh	r3, [r7, #6]
	return Mem_Write_I2C1(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 8006f72:	89b9      	ldrh	r1, [r7, #12]
 8006f74:	89f8      	ldrh	r0, [r7, #14]
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f000 f881 	bl	8007084 <Mem_Write_I2C1>
 8006f82:	4603      	mov	r3, r0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <Init_6Axis_IMU>:

HAL_StatusTypeDef Init_6Axis_IMU(AccGyroData* t_acc_gyro_Data)
{
 8006f8c:	b5b0      	push	{r4, r5, r7, lr}
 8006f8e:	b08a      	sub	sp, #40	; 0x28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	uint8_t t_init_res = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	memset(&t_acc_gyro_Data, 0, sizeof(AccGyroData));
 8006f9a:	1d3b      	adds	r3, r7, #4
 8006f9c:	2218      	movs	r2, #24
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f002 fe21 	bl	8009be8 <memset>

	ICM20608GIOctx ioctx = {
 8006fa6:	4b14      	ldr	r3, [pc, #80]	; (8006ff8 <Init_6Axis_IMU+0x6c>)
 8006fa8:	f107 040c 	add.w	r4, r7, #12
 8006fac:	461d      	mov	r5, r3
 8006fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006fb6:	e884 0003 	stmia.w	r4, {r0, r1}
		Read_6Axis_IMU,
		Write_6Axis_IMU,
		NULL
	};

	t_init_res = Set_Ioctx_ICM20608G(&icm20608_obj, &ioctx);
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	480e      	ldr	r0, [pc, #56]	; (8006ffc <Init_6Axis_IMU+0x70>)
 8006fc2:	f7ff fdf0 	bl	8006ba6 <Set_Ioctx_ICM20608G>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Init_ICM20608G(&icm20608_obj) != HAL_OK){
 8006fcc:	480b      	ldr	r0, [pc, #44]	; (8006ffc <Init_6Axis_IMU+0x70>)
 8006fce:	f7ff fe1f 	bl	8006c10 <Init_ICM20608G>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <Init_6Axis_IMU+0x5e>
		t_init_res = Init_ICM20608G(&icm20608_obj);
 8006fd8:	4808      	ldr	r0, [pc, #32]	; (8006ffc <Init_6Axis_IMU+0x70>)
 8006fda:	f7ff fe19 	bl	8006c10 <Init_ICM20608G>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return t_init_res;
 8006fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe8:	e001      	b.n	8006fee <Init_6Axis_IMU+0x62>
	}

	return t_init_res;
 8006fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3728      	adds	r7, #40	; 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	0800b754 	.word	0x0800b754
 8006ffc:	2400d130 	.word	0x2400d130

08007000 <Get_Value_6Axis_IMU>:

HAL_StatusTypeDef Get_Value_6Axis_IMU(AccGyroData* t_acc_gyro_Data)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	uint8_t t_get_value_res = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
	t_get_value_res = Get_Value_ICM20608G(&icm20608_obj);
 800700c:	4809      	ldr	r0, [pc, #36]	; (8007034 <Get_Value_6Axis_IMU+0x34>)
 800700e:	f7ff fe55 	bl	8006cbc <Get_Value_ICM20608G>
 8007012:	4603      	mov	r3, r0
 8007014:	73fb      	strb	r3, [r7, #15]

	if (t_get_value_res == HAL_OK){
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d106      	bne.n	800702a <Get_Value_6Axis_IMU+0x2a>
		memcpy(t_acc_gyro_Data, &icm20608_obj.value, sizeof(AccGyroData));
 800701c:	2218      	movs	r2, #24
 800701e:	4906      	ldr	r1, [pc, #24]	; (8007038 <Get_Value_6Axis_IMU+0x38>)
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f002 fdd3 	bl	8009bcc <memcpy>
	} else{
		return t_get_value_res;
	}

	return t_get_value_res;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	e000      	b.n	800702c <Get_Value_6Axis_IMU+0x2c>
		return t_get_value_res;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2400d130 	.word	0x2400d130
 8007038:	2400d14c 	.word	0x2400d14c

0800703c <IsDevReady_I2C1>:

HAL_StatusTypeDef DeInit_I2C1( ) {return HAL_I2C_DeInit(&hi2c1);}
HAL_StatusTypeDef DeInit_I2C2( ) {return HAL_I2C_DeInit(&hi2c2);}
HAL_StatusTypeDef DeInit_I2C3( ) {return HAL_I2C_DeInit(&hi2c3);}

HAL_StatusTypeDef IsDevReady_I2C1(uint16_t t_dev_addr) {return HAL_I2C_IsDeviceReady(&hi2c1, t_dev_addr, I2C1_TRIALS, I2C1_STRAT_UP_DELAY);}
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	80fb      	strh	r3, [r7, #6]
 8007046:	88f9      	ldrh	r1, [r7, #6]
 8007048:	2332      	movs	r3, #50	; 0x32
 800704a:	220a      	movs	r2, #10
 800704c:	4803      	ldr	r0, [pc, #12]	; (800705c <IsDevReady_I2C1+0x20>)
 800704e:	f7fb fe5f 	bl	8002d10 <HAL_I2C_IsDeviceReady>
 8007052:	4603      	mov	r3, r0
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	24000190 	.word	0x24000190

08007060 <IsDevReady_I2C3>:
HAL_StatusTypeDef IsDevReady_I2C2(uint16_t t_dev_addr) {return HAL_I2C_IsDeviceReady(&hi2c2, t_dev_addr, I2C2_TRIALS, I2C2_STRAT_UP_DELAY);}
HAL_StatusTypeDef IsDevReady_I2C3(uint16_t t_dev_addr) {return HAL_I2C_IsDeviceReady(&hi2c3, t_dev_addr, I2C3_TRIALS, I2C3_STRAT_UP_DELAY);}
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	4603      	mov	r3, r0
 8007068:	80fb      	strh	r3, [r7, #6]
 800706a:	88f9      	ldrh	r1, [r7, #6]
 800706c:	2332      	movs	r3, #50	; 0x32
 800706e:	220a      	movs	r2, #10
 8007070:	4803      	ldr	r0, [pc, #12]	; (8007080 <IsDevReady_I2C3+0x20>)
 8007072:	f7fb fe4d 	bl	8002d10 <HAL_I2C_IsDeviceReady>
 8007076:	4603      	mov	r3, r0
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	24000144 	.word	0x24000144

08007084 <Mem_Write_I2C1>:

/* I2C1 Read/Write */
HAL_StatusTypeDef Mem_Write_I2C1(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	; 0x28
 8007088:	af04      	add	r7, sp, #16
 800708a:	607b      	str	r3, [r7, #4]
 800708c:	4603      	mov	r3, r0
 800708e:	81fb      	strh	r3, [r7, #14]
 8007090:	460b      	mov	r3, r1
 8007092:	81bb      	strh	r3, [r7, #12]
 8007094:	4613      	mov	r3, r2
 8007096:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	75fb      	strb	r3, [r7, #23]

	memcpy(&i2c1_tx_buff, t_data, t_size);
 800709c:	8c3b      	ldrh	r3, [r7, #32]
 800709e:	461a      	mov	r2, r3
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	480f      	ldr	r0, [pc, #60]	; (80070e0 <Mem_Write_I2C1+0x5c>)
 80070a4:	f002 fd92 	bl	8009bcc <memcpy>
	if ( hi2c1.State != HAL_I2C_STATE_BUSY ){
 80070a8:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <Mem_Write_I2C1+0x60>)
 80070aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b24      	cmp	r3, #36	; 0x24
 80070b2:	d010      	beq.n	80070d6 <Mem_Write_I2C1+0x52>
		t_read_status = HAL_I2C_Mem_Write(&hi2c1, t_dev_addr, t_mem_addr, t_mem_size, &i2c1_tx_buff, t_size, I2C1_TIMEOUT);
 80070b4:	8978      	ldrh	r0, [r7, #10]
 80070b6:	89ba      	ldrh	r2, [r7, #12]
 80070b8:	89f9      	ldrh	r1, [r7, #14]
 80070ba:	2305      	movs	r3, #5
 80070bc:	9302      	str	r3, [sp, #8]
 80070be:	8c3b      	ldrh	r3, [r7, #32]
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <Mem_Write_I2C1+0x5c>)
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4603      	mov	r3, r0
 80070c8:	4806      	ldr	r0, [pc, #24]	; (80070e4 <Mem_Write_I2C1+0x60>)
 80070ca:	f7fb fbf3 	bl	80028b4 <HAL_I2C_Mem_Write>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	e000      	b.n	80070d8 <Mem_Write_I2C1+0x54>
		return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	2400d590 	.word	0x2400d590
 80070e4:	24000190 	.word	0x24000190

080070e8 <Mem_Read_I2C1>:

HAL_StatusTypeDef Mem_Read_I2C1(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08a      	sub	sp, #40	; 0x28
 80070ec:	af04      	add	r7, sp, #16
 80070ee:	607b      	str	r3, [r7, #4]
 80070f0:	4603      	mov	r3, r0
 80070f2:	81fb      	strh	r3, [r7, #14]
 80070f4:	460b      	mov	r3, r1
 80070f6:	81bb      	strh	r3, [r7, #12]
 80070f8:	4613      	mov	r3, r2
 80070fa:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	75fb      	strb	r3, [r7, #23]

	if ( hi2c1.State != HAL_I2C_STATE_BUSY ){
 8007100:	4b10      	ldr	r3, [pc, #64]	; (8007144 <Mem_Read_I2C1+0x5c>)
 8007102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b24      	cmp	r3, #36	; 0x24
 800710a:	d016      	beq.n	800713a <Mem_Read_I2C1+0x52>
		t_read_status = HAL_I2C_Mem_Read(&hi2c1, t_dev_addr, t_mem_addr, t_mem_size, i2c1_rx_buff, t_size, I2C1_TIMEOUT);
 800710c:	8978      	ldrh	r0, [r7, #10]
 800710e:	89ba      	ldrh	r2, [r7, #12]
 8007110:	89f9      	ldrh	r1, [r7, #14]
 8007112:	2305      	movs	r3, #5
 8007114:	9302      	str	r3, [sp, #8]
 8007116:	8c3b      	ldrh	r3, [r7, #32]
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <Mem_Read_I2C1+0x60>)
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	4603      	mov	r3, r0
 8007120:	4808      	ldr	r0, [pc, #32]	; (8007144 <Mem_Read_I2C1+0x5c>)
 8007122:	f7fb fcdb 	bl	8002adc <HAL_I2C_Mem_Read>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]
//		t_read_status = HAL_I2C_Mem_Read_DMA(&hi2c1, t_dev_addr, t_mem_addr, t_mem_size, i2c1_rx_buff, t_size);
//		t_read_status = HAL_I2C_Master_Receive_DMA(&hi2c1, t_dev_addr, i2c1_rx_buff, t_size);
//		while (HAL_DMA_GetState(&hdma_i2c1_rx) != HAL_DMA_STATE_READY){
//		}
		memcpy(t_data, i2c1_rx_buff, t_size);
 800712a:	8c3b      	ldrh	r3, [r7, #32]
 800712c:	461a      	mov	r2, r3
 800712e:	4906      	ldr	r1, [pc, #24]	; (8007148 <Mem_Read_I2C1+0x60>)
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f002 fd4b 	bl	8009bcc <memcpy>
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	e000      	b.n	800713c <Mem_Read_I2C1+0x54>
		return HAL_BUSY;
 800713a:	2302      	movs	r3, #2
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	24000190 	.word	0x24000190
 8007148:	2400d594 	.word	0x2400d594

0800714c <Mem_Write_I2C3>:

/* I2C3 Read/Write */
HAL_StatusTypeDef Mem_Write_I2C3(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	; 0x28
 8007150:	af04      	add	r7, sp, #16
 8007152:	607b      	str	r3, [r7, #4]
 8007154:	4603      	mov	r3, r0
 8007156:	81fb      	strh	r3, [r7, #14]
 8007158:	460b      	mov	r3, r1
 800715a:	81bb      	strh	r3, [r7, #12]
 800715c:	4613      	mov	r3, r2
 800715e:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	75fb      	strb	r3, [r7, #23]

	memcpy(&i2c3_tx_buff, t_data, t_size);
 8007164:	8c3b      	ldrh	r3, [r7, #32]
 8007166:	461a      	mov	r2, r3
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	480f      	ldr	r0, [pc, #60]	; (80071a8 <Mem_Write_I2C3+0x5c>)
 800716c:	f002 fd2e 	bl	8009bcc <memcpy>
	if ( hi2c3.State != HAL_I2C_STATE_BUSY ){
 8007170:	4b0e      	ldr	r3, [pc, #56]	; (80071ac <Mem_Write_I2C3+0x60>)
 8007172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b24      	cmp	r3, #36	; 0x24
 800717a:	d010      	beq.n	800719e <Mem_Write_I2C3+0x52>
		t_read_status = HAL_I2C_Mem_Write(&hi2c3, t_dev_addr, t_mem_addr, t_mem_size, &i2c3_tx_buff, t_size, I2C3_TIMEOUT);
 800717c:	8978      	ldrh	r0, [r7, #10]
 800717e:	89ba      	ldrh	r2, [r7, #12]
 8007180:	89f9      	ldrh	r1, [r7, #14]
 8007182:	2305      	movs	r3, #5
 8007184:	9302      	str	r3, [sp, #8]
 8007186:	8c3b      	ldrh	r3, [r7, #32]
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <Mem_Write_I2C3+0x5c>)
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	4603      	mov	r3, r0
 8007190:	4806      	ldr	r0, [pc, #24]	; (80071ac <Mem_Write_I2C3+0x60>)
 8007192:	f7fb fb8f 	bl	80028b4 <HAL_I2C_Mem_Write>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	e000      	b.n	80071a0 <Mem_Write_I2C3+0x54>
		return HAL_BUSY;
 800719e:	2302      	movs	r3, #2
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	2400d591 	.word	0x2400d591
 80071ac:	24000144 	.word	0x24000144

080071b0 <Mem_Read_I2C3>:

HAL_StatusTypeDef Mem_Read_I2C3(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08a      	sub	sp, #40	; 0x28
 80071b4:	af04      	add	r7, sp, #16
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	4603      	mov	r3, r0
 80071ba:	81fb      	strh	r3, [r7, #14]
 80071bc:	460b      	mov	r3, r1
 80071be:	81bb      	strh	r3, [r7, #12]
 80071c0:	4613      	mov	r3, r2
 80071c2:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	75fb      	strb	r3, [r7, #23]

	if ( hi2c3.State != HAL_I2C_STATE_BUSY ){
 80071c8:	4b10      	ldr	r3, [pc, #64]	; (800720c <Mem_Read_I2C3+0x5c>)
 80071ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b24      	cmp	r3, #36	; 0x24
 80071d2:	d016      	beq.n	8007202 <Mem_Read_I2C3+0x52>
//		t_read_status = HAL_I2C_Mem_Read_DMA(&hi2c3, t_dev_addr, t_mem_addr, t_mem_size, i2c3_rx_buff, t_size);
		t_read_status = HAL_I2C_Mem_Read(&hi2c3, t_dev_addr, t_mem_addr, t_mem_size, i2c3_rx_buff, t_size, I2C3_TIMEOUT);
 80071d4:	8978      	ldrh	r0, [r7, #10]
 80071d6:	89ba      	ldrh	r2, [r7, #12]
 80071d8:	89f9      	ldrh	r1, [r7, #14]
 80071da:	2305      	movs	r3, #5
 80071dc:	9302      	str	r3, [sp, #8]
 80071de:	8c3b      	ldrh	r3, [r7, #32]
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <Mem_Read_I2C3+0x60>)
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	4603      	mov	r3, r0
 80071e8:	4808      	ldr	r0, [pc, #32]	; (800720c <Mem_Read_I2C3+0x5c>)
 80071ea:	f7fb fc77 	bl	8002adc <HAL_I2C_Mem_Read>
 80071ee:	4603      	mov	r3, r0
 80071f0:	75fb      	strb	r3, [r7, #23]
		memcpy(t_data, i2c3_rx_buff, t_size);
 80071f2:	8c3b      	ldrh	r3, [r7, #32]
 80071f4:	461a      	mov	r2, r3
 80071f6:	4906      	ldr	r1, [pc, #24]	; (8007210 <Mem_Read_I2C3+0x60>)
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f002 fce7 	bl	8009bcc <memcpy>
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	e000      	b.n	8007204 <Mem_Read_I2C3+0x54>
		return HAL_BUSY;
 8007202:	2302      	movs	r3, #2
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	24000144 	.word	0x24000144
 8007210:	2400d5a8 	.word	0x2400d5a8

08007214 <HAL_FDCAN_RxFifo0Callback>:
	return HAL_FDCAN_AddMessageToTxFifoQ(fdcan1_obj.hfdcan, &fdcan1_obj.TxHeader, t_tx_data);
}


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	/* Recieve Message */
	if (hfdcan->Instance == FDCAN1){
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a19      	ldr	r2, [pc, #100]	; (8007288 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d12b      	bne.n	8007280 <HAL_FDCAN_RxFifo0Callback+0x6c>
		if (HAL_FDCAN_GetRxMessage(fdcan1_obj.hfdcan, FDCAN_RX_FIFO0, &fdcan1_obj.RxHeader, RxData1) != HAL_OK) {
 8007228:	4b18      	ldr	r3, [pc, #96]	; (800728c <HAL_FDCAN_RxFifo0Callback+0x78>)
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	4b18      	ldr	r3, [pc, #96]	; (8007290 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800722e:	4a19      	ldr	r2, [pc, #100]	; (8007294 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8007230:	2140      	movs	r1, #64	; 0x40
 8007232:	f7fa fae7 	bl	8001804 <HAL_FDCAN_GetRxMessage>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <HAL_FDCAN_RxFifo0Callback+0x2c>
			Error_Handler();
 800723c:	f7f9 fc93 	bl	8000b66 <Error_Handler>
		}
		
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 8007240:	4b12      	ldr	r3, [pc, #72]	; (800728c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007242:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	401a      	ands	r2, r3
 800724a:	4b10      	ldr	r3, [pc, #64]	; (800728c <HAL_FDCAN_RxFifo0Callback+0x78>)
 800724c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800724e:	429a      	cmp	r2, r3
 8007250:	d008      	beq.n	8007264 <HAL_FDCAN_RxFifo0Callback+0x50>
			((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter2)){
 8007252:	4b0e      	ldr	r3, [pc, #56]	; (800728c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007256:	4b0d      	ldr	r3, [pc, #52]	; (800728c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	401a      	ands	r2, r3
 800725c:	4b0b      	ldr	r3, [pc, #44]	; (800728c <HAL_FDCAN_RxFifo0Callback+0x78>)
 800725e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 8007260:	429a      	cmp	r2, r3
 8007262:	d10c      	bne.n	800727e <HAL_FDCAN_RxFifo0Callback+0x6a>
			return;
		}

		if (fdcan_rx_callback_ptr != NULL) {
 8007264:	4b0c      	ldr	r3, [pc, #48]	; (8007298 <HAL_FDCAN_RxFifo0Callback+0x84>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d009      	beq.n	8007280 <HAL_FDCAN_RxFifo0Callback+0x6c>
			fdcan_rx_callback_ptr(fdcan1_obj.RxHeader.Identifier, RxData1);
 800726c:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <HAL_FDCAN_RxFifo0Callback+0x84>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a06      	ldr	r2, [pc, #24]	; (800728c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007272:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007274:	b292      	uxth	r2, r2
 8007276:	4906      	ldr	r1, [pc, #24]	; (8007290 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
 800727c:	e000      	b.n	8007280 <HAL_FDCAN_RxFifo0Callback+0x6c>
			return;
 800727e:	bf00      	nop
		}
	}
}
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	4000a000 	.word	0x4000a000
 800728c:	2400d164 	.word	0x2400d164
 8007290:	2400d398 	.word	0x2400d398
 8007294:	2400d1ac 	.word	0x2400d1ac
 8007298:	2400cf88 	.word	0x2400cf88

0800729c <Start_TIM3>:
extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim17;

int Start_TIM1()    {return HAL_TIM_Base_Start_IT(&htim1);}
int Start_TIM2()    {return HAL_TIM_Base_Start_IT(&htim2);}
int Start_TIM3()    {return HAL_TIM_Base_Start_IT(&htim3);}
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
 80072a0:	4802      	ldr	r0, [pc, #8]	; (80072ac <Start_TIM3+0x10>)
 80072a2:	f7fe fa27 	bl	80056f4 <HAL_TIM_Base_Start_IT>
 80072a6:	4603      	mov	r3, r0
 80072a8:	4618      	mov	r0, r3
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2400d4f4 	.word	0x2400d4f4

080072b0 <HAL_TIM_PeriodElapsedCallback>:
{
	t_semaphore->semaphore = 0; // Release the semaphore
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	/* Timer 3(APB1) - Imu Ctrl Task CallBack*/
	if (htim->Instance == htim3.Instance) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d106      	bne.n	80072d2 <HAL_TIM_PeriodElapsedCallback+0x22>
		if (ioif_tim3_callback_ptr != NULL) {
 80072c4:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <HAL_TIM_PeriodElapsedCallback+0x22>
			ioif_tim3_callback_ptr( );
 80072cc:	4b0a      	ldr	r3, [pc, #40]	; (80072f8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4798      	blx	r3
		}
	}

	/* Timer 6(APB1) - Msg hdlr Task CallBack*/
	if (htim->Instance == htim6.Instance) {
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d106      	bne.n	80072ec <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (ioif_tim6_callback_ptr != NULL) {
 80072de:	4b08      	ldr	r3, [pc, #32]	; (8007300 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_TIM_PeriodElapsedCallback+0x3c>
			ioif_tim6_callback_ptr( );
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4798      	blx	r3
		}
	}
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	2400d4f4 	.word	0x2400d4f4
 80072f8:	2400cef4 	.word	0x2400cef4
 80072fc:	2400d540 	.word	0x2400d540
 8007300:	24000350 	.word	0x24000350

08007304 <Reset_Parameters>:

*/

/* Reset Value Zero */
static void Reset_Parameters()
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b0d2      	sub	sp, #328	; 0x148
 8007308:	af00      	add	r7, sp, #0
	sensor_params 		= 	(Sensor_Params){0};
 800730a:	4b21      	ldr	r3, [pc, #132]	; (8007390 <Reset_Parameters+0x8c>)
 800730c:	4618      	mov	r0, r3
 800730e:	2348      	movs	r3, #72	; 0x48
 8007310:	461a      	mov	r2, r3
 8007312:	2100      	movs	r1, #0
 8007314:	f002 fc68 	bl	8009be8 <memset>
	norm_params 		= 	(Normalization_Params){0};
 8007318:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <Reset_Parameters+0x90>)
 800731a:	4618      	mov	r0, r3
 800731c:	2334      	movs	r3, #52	; 0x34
 800731e:	461a      	mov	r2, r3
 8007320:	2100      	movs	r1, #0
 8007322:	f002 fc61 	bl	8009be8 <memset>
	gait_params 		= 	(Gait_Params){0};
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <Reset_Parameters+0x94>)
 8007328:	461a      	mov	r2, r3
 800732a:	2300      	movs	r3, #0
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	6053      	str	r3, [r2, #4]
 8007330:	6093      	str	r3, [r2, #8]
	fuzzy_params 		= 	(Fuzzy_Params){0};
 8007332:	4b1a      	ldr	r3, [pc, #104]	; (800739c <Reset_Parameters+0x98>)
 8007334:	4618      	mov	r0, r3
 8007336:	232c      	movs	r3, #44	; 0x2c
 8007338:	461a      	mov	r2, r3
 800733a:	2100      	movs	r1, #0
 800733c:	f002 fc54 	bl	8009be8 <memset>
	thigh_angle_params 	= 	(Thigh_Angle_Params){0};
 8007340:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <Reset_Parameters+0x9c>)
 8007342:	4618      	mov	r0, r3
 8007344:	2348      	movs	r3, #72	; 0x48
 8007346:	461a      	mov	r2, r3
 8007348:	2100      	movs	r1, #0
 800734a:	f002 fc4d 	bl	8009be8 <memset>
	th_params 			= 	(Threshold_Params){0};
 800734e:	4b15      	ldr	r3, [pc, #84]	; (80073a4 <Reset_Parameters+0xa0>)
 8007350:	461a      	mov	r2, r3
 8007352:	2300      	movs	r3, #0
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	6053      	str	r3, [r2, #4]
 8007358:	6093      	str	r3, [r2, #8]
 800735a:	60d3      	str	r3, [r2, #12]
	assist_params		= 	(Assist_Params){0};
 800735c:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <Reset_Parameters+0xa4>)
 800735e:	4618      	mov	r0, r3
 8007360:	233c      	movs	r3, #60	; 0x3c
 8007362:	461a      	mov	r2, r3
 8007364:	2100      	movs	r1, #0
 8007366:	f002 fc3f 	bl	8009be8 <memset>

	walking 				=	0;
 800736a:	4b10      	ldr	r3, [pc, #64]	; (80073ac <Reset_Parameters+0xa8>)
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
	attach_plane 			=	e_LEFT_SAGITAL;
 8007370:	4b0f      	ldr	r3, [pc, #60]	; (80073b0 <Reset_Parameters+0xac>)
 8007372:	2200      	movs	r2, #0
 8007374:	701a      	strb	r2, [r3, #0]
	wc_test					= 	0.0;
 8007376:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <Reset_Parameters+0xb0>)
 8007378:	f04f 0200 	mov.w	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
	thigh_angle_tvcf_demo   =   0.0;
 800737e:	4b0e      	ldr	r3, [pc, #56]	; (80073b8 <Reset_Parameters+0xb4>)
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
}
 8007386:	bf00      	nop
 8007388:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	2400d0e8 	.word	0x2400d0e8
 8007394:	2400d3f0 	.word	0x2400d3f0
 8007398:	2400d0bc 	.word	0x2400d0bc
 800739c:	2400cf0c 	.word	0x2400cf0c
 80073a0:	2400d00c 	.word	0x2400d00c
 80073a4:	240031c8 	.word	0x240031c8
 80073a8:	2400cf4c 	.word	0x2400cf4c
 80073ac:	240031c4 	.word	0x240031c4
 80073b0:	2400d1e4 	.word	0x2400d1e4
 80073b4:	2400d3e8 	.word	0x2400d3e8
 80073b8:	2400cefc 	.word	0x2400cefc

080073bc <Set_Initial_Angle_Values>:


static void Set_Initial_Angle_Values(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, float t_initial_angle)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	ed87 0a01 	vstr	s0, [r7, #4]
    t_thigh_angle_params->deg_acc_filtered = t_initial_angle;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	60da      	str	r2, [r3, #12]
    t_thigh_angle_params->deg_gyr_filtered = 0;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f04f 0200 	mov.w	r2, #0
 80073d6:	611a      	str	r2, [r3, #16]
    t_thigh_angle_params->deg_LPF_1st[0] = t_initial_angle;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	629a      	str	r2, [r3, #40]	; 0x28
    t_thigh_angle_params->deg_LPF_1st[1] = t_initial_angle;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	62da      	str	r2, [r3, #44]	; 0x2c
    t_thigh_angle_params->deg_LPF_2nd[0] = t_initial_angle;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30
    t_thigh_angle_params->deg_LPF_2nd[1] = t_initial_angle;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	635a      	str	r2, [r3, #52]	; 0x34
    t_norm_params->deg_o = t_initial_angle;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	0000      	movs	r0, r0
 8007404:	0000      	movs	r0, r0
	...

08007408 <Calculate_Initial_Thigh_Angle>:
/* 
 *Function to calculate the initial thigh angle 
*/

static void Calculate_Initial_Thigh_Angle(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, AccGyroData* t_acc_gyro_data, AttachPlane t_attach_plane)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	70fb      	strb	r3, [r7, #3]
	const int t_total_samples = 100;
 8007416:	2364      	movs	r3, #100	; 0x64
 8007418:	613b      	str	r3, [r7, #16]
	float t_accumulated_angle = 0.0;
 800741a:	f04f 0300 	mov.w	r3, #0
 800741e:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 1; i <= t_total_samples; i++){
 8007420:	2301      	movs	r3, #1
 8007422:	76fb      	strb	r3, [r7, #27]
 8007424:	e07d      	b.n	8007522 <Calculate_Initial_Thigh_Angle+0x11a>
        Get_Value_6Axis_IMU(t_acc_gyro_data);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fdea 	bl	8007000 <Get_Value_6Axis_IMU>

		/* Calculate the accelerometer angle (in degrees) */
        float accelerometer_angle = 0.0;
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	617b      	str	r3, [r7, #20]

        if (t_attach_plane == e_LEFT_SAGITAL){
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d11e      	bne.n	8007476 <Calculate_Initial_Thigh_Angle+0x6e>
        	accelerometer_angle = (atan2((t_acc_gyro_data->acc_y)*(-1), (t_acc_gyro_data->acc_x)*(-1))) * (180 / PI);	// arctan(-y/-x) Left Sagital case
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	edd3 7a01 	vldr	s15, [r3, #4]
 800743e:	eef1 7a67 	vneg.f32	s15, s15
 8007442:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	edd3 6a00 	vldr	s13, [r3]
 800744c:	eef1 6a66 	vneg.f32	s13, s13
 8007450:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8007454:	eeb0 1b46 	vmov.f64	d1, d6
 8007458:	eeb0 0b47 	vmov.f64	d0, d7
 800745c:	f003 f8e2 	bl	800a624 <atan2>
 8007460:	eeb0 7b40 	vmov.f64	d7, d0
 8007464:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8007548 <Calculate_Initial_Thigh_Angle+0x140>
 8007468:	ee27 7b06 	vmul.f64	d7, d7, d6
 800746c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007470:	edc7 7a05 	vstr	s15, [r7, #20]
 8007474:	e03e      	b.n	80074f4 <Calculate_Initial_Thigh_Angle+0xec>
        }
        else if (t_attach_plane == e_RIGHT_SAGITAL){
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d11c      	bne.n	80074b6 <Calculate_Initial_Thigh_Angle+0xae>
        	accelerometer_angle = (atan2(t_acc_gyro_data->acc_y, (t_acc_gyro_data->acc_x)*(-1))) * (180 / PI);	// arctan(y/-x) Right Sagital case
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007482:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	edd3 6a00 	vldr	s13, [r3]
 800748c:	eef1 6a66 	vneg.f32	s13, s13
 8007490:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8007494:	eeb0 1b46 	vmov.f64	d1, d6
 8007498:	eeb0 0b47 	vmov.f64	d0, d7
 800749c:	f003 f8c2 	bl	800a624 <atan2>
 80074a0:	eeb0 7b40 	vmov.f64	d7, d0
 80074a4:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8007548 <Calculate_Initial_Thigh_Angle+0x140>
 80074a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80074b0:	edc7 7a05 	vstr	s15, [r7, #20]
 80074b4:	e01e      	b.n	80074f4 <Calculate_Initial_Thigh_Angle+0xec>
        }
        else if (t_attach_plane == e_LEFT_SAGITAL_DEMO){
 80074b6:	78fb      	ldrb	r3, [r7, #3]
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d11b      	bne.n	80074f4 <Calculate_Initial_Thigh_Angle+0xec>
        	accelerometer_angle = (atan2(t_acc_gyro_data->acc_x, (t_acc_gyro_data->acc_y)*(-1))) * (180 / PI);	// arctan(x/-y) Left Sagital - DEMO ver case
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	edd3 7a00 	vldr	s15, [r3]
 80074c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80074cc:	eef1 6a66 	vneg.f32	s13, s13
 80074d0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80074d4:	eeb0 1b46 	vmov.f64	d1, d6
 80074d8:	eeb0 0b47 	vmov.f64	d0, d7
 80074dc:	f003 f8a2 	bl	800a624 <atan2>
 80074e0:	eeb0 7b40 	vmov.f64	d7, d0
 80074e4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8007548 <Calculate_Initial_Thigh_Angle+0x140>
 80074e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80074f0:	edc7 7a05 	vstr	s15, [r7, #20]
        }

		/* Accumulate the accelerometer angle */
        t_accumulated_angle += accelerometer_angle;
 80074f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80074f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80074fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007500:	edc7 7a07 	vstr	s15, [r7, #28]

		/* Calculate and update the initial thigh angle (average) */
        t_thigh_angle_params->angle_init = t_accumulated_angle / ((float)i);
 8007504:	7efb      	ldrb	r3, [r7, #27]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800750e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 1; i <= t_total_samples; i++){
 800751c:	7efb      	ldrb	r3, [r7, #27]
 800751e:	3301      	adds	r3, #1
 8007520:	76fb      	strb	r3, [r7, #27]
 8007522:	7efb      	ldrb	r3, [r7, #27]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	429a      	cmp	r2, r3
 8007528:	f6bf af7d 	bge.w	8007426 <Calculate_Initial_Thigh_Angle+0x1e>
    }

    Set_Initial_Angle_Values(t_thigh_angle_params, t_norm_params, t_thigh_angle_params->angle_init);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	edd3 7a00 	vldr	s15, [r3]
 8007532:	eeb0 0a67 	vmov.f32	s0, s15
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f7ff ff3f 	bl	80073bc <Set_Initial_Angle_Values>
}
 800753e:	bf00      	nop
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	7e61df46 	.word	0x7e61df46
 800754c:	404ca5dc 	.word	0x404ca5dc

08007550 <Run_Complementary_Filter>:

/* 
 *Function to execute the time-varying complementary filter (with Fuzzy Logic - wc) 
*/
static void Run_Complementary_Filter(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Fuzzy_Params* t_fuzzy_params, float t_sampling_Period, AttachPlane t_attach_plane)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6178      	str	r0, [r7, #20]
 8007558:	6139      	str	r1, [r7, #16]
 800755a:	60fa      	str	r2, [r7, #12]
 800755c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007560:	71fb      	strb	r3, [r7, #7]
	/* Apply time-varying complementary filter on the sensor data using fuzzy logic(wc) and update the thigh angle parameters */
//	*t_thigh_angle_params = Run_TVCF(t_sensor_params, t_thigh_angle_params, t_fuzzy_params->wc, t_sampling_Period, t_attach_plane);
	Run_TVCF(t_sensor_params, t_thigh_angle_params, t_fuzzy_params->wc, t_sampling_Period, t_attach_plane);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	edd3 7a04 	vldr	s15, [r3, #16]
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	461a      	mov	r2, r3
 800756c:	edd7 0a02 	vldr	s1, [r7, #8]
 8007570:	eeb0 0a67 	vmov.f32	s0, s15
 8007574:	6939      	ldr	r1, [r7, #16]
 8007576:	6978      	ldr	r0, [r7, #20]
 8007578:	f001 f86a 	bl	8008650 <Run_TVCF>
	/* Update the unfiltered thigh angle to be the same as the filtered thigh angle */
	t_thigh_angle_params->deg_tvcf[0] = t_thigh_angle_params->deg_tvcf_filtered;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	695a      	ldr	r2, [r3, #20]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	621a      	str	r2, [r3, #32]
}
 8007584:	bf00      	nop
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <Run_Normalization_And_Get_Gait_Phase>:

/* 
 *Function to normalize sensor data and calculate the current phase of the gait 
*/
static void Run_Normalization_And_Get_Gait_Phase(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
	/* Prepare for circular normalization by finding the center point of the original ellipse */
	Prepare_for_Circular_Normalization(t_thigh_angle_params, t_norm_params, t_gait_params);
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f001 fa10 	bl	80089c2 <Prepare_for_Circular_Normalization>

	/* Normalize degree and velocity data based on calculated origin and amplitude */
	t_norm_params->deg_norm = (t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o) / t_norm_params->A_deg;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	edd3 7a00 	vldr	s15, [r3]
 80075ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80075b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	t_norm_params->vel_norm = (t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o) / t_norm_params->A_vel;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80075ce:	ee77 6a67 	vsub.f32	s13, s14, s15
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80075d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	/* Calculate and update the current phase of the gait */
	t_gait_params->gait_phase = Get_Current_Gait_Phase(t_norm_params, t_gait_params); // Current phase (0 ~ 100%)
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	68b8      	ldr	r0, [r7, #8]
 80075e6:	f001 fa27 	bl	8008a38 <Get_Current_Gait_Phase>
 80075ea:	eef0 7a40 	vmov.f32	s15, s0
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	0000      	movs	r0, r0
	...

08007600 <Reduce_Noise_In_Sensor_Data>:

/* 
 *Function to reduce noise in sensor data 
*/
static void Reduce_Noise_In_Sensor_Data(Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
	float t_dt = 1000.0;
 800760a:	4b49      	ldr	r3, [pc, #292]	; (8007730 <Reduce_Noise_In_Sensor_Data+0x130>)
 800760c:	617b      	str	r3, [r7, #20]
	float w_target = Get_Max_Float(0.3, t_dt/t_gait_params->gait_period);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800761a:	ed97 7a05 	vldr	s14, [r7, #20]
 800761e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007622:	eef0 0a66 	vmov.f32	s1, s13
 8007626:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8007734 <Reduce_Noise_In_Sensor_Data+0x134>
 800762a:	f001 f8c5 	bl	80087b8 <Get_Max_Float>
 800762e:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_lpf_freq = 2.5 * w_target * 2 * PI;
 8007632:	edd7 7a04 	vldr	s15, [r7, #16]
 8007636:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800763a:	eeb0 6b04 	vmov.f64	d6, #4	; 0x40200000  2.5
 800763e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007642:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007646:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8007728 <Reduce_Noise_In_Sensor_Data+0x128>
 800764a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800764e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007652:	edc7 7a03 	vstr	s15, [r7, #12]

	/* First LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_1st[0] = Perform_LPF_on_Acc(
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	edd3 7a08 	vldr	s15, [r3, #32]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007662:	eddf 1a35 	vldr	s3, [pc, #212]	; 8007738 <Reduce_Noise_In_Sensor_Data+0x138>
 8007666:	ed97 1a03 	vldr	s2, [r7, #12]
 800766a:	eef0 0a47 	vmov.f32	s1, s14
 800766e:	eeb0 0a67 	vmov.f32	s0, s15
 8007672:	f000 ff8c 	bl	800858e <Perform_LPF_on_Acc>
 8007676:	eef0 7a40 	vmov.f32	s15, s0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		t_lpf_freq, 
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_2nd[0] = Perform_LPF_on_Acc(
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800768c:	eddf 1a2a 	vldr	s3, [pc, #168]	; 8007738 <Reduce_Noise_In_Sensor_Data+0x138>
 8007690:	ed97 1a03 	vldr	s2, [r7, #12]
 8007694:	eef0 0a47 	vmov.f32	s1, s14
 8007698:	eeb0 0a67 	vmov.f32	s0, s15
 800769c:	f000 ff77 	bl	800858e <Perform_LPF_on_Acc>
 80076a0:	eef0 7a40 	vmov.f32	s15, s0
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		t_lpf_freq, 
		IMU_CONTROL_PERIOD
	);

	/* Compute raw velocity from angle data */
	t_thigh_angle_params->vel_raw[0] = (t_thigh_angle_params->deg_tvcf[0] - t_thigh_angle_params->deg_tvcf[1]) * t_dt;											// dt = 0.001sec
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80076b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	edc3 7a06 	vstr	s15, [r3, #24]

	/* First LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_1st[0] = Perform_LPF_on_Acc(
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80076d4:	eddf 1a18 	vldr	s3, [pc, #96]	; 8007738 <Reduce_Noise_In_Sensor_Data+0x138>
 80076d8:	ed97 1a03 	vldr	s2, [r7, #12]
 80076dc:	eef0 0a47 	vmov.f32	s1, s14
 80076e0:	eeb0 0a67 	vmov.f32	s0, s15
 80076e4:	f000 ff53 	bl	800858e <Perform_LPF_on_Acc>
 80076e8:	eef0 7a40 	vmov.f32	s15, s0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		t_lpf_freq, 
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_2nd[0] = Perform_LPF_on_Acc(
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80076fe:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8007738 <Reduce_Noise_In_Sensor_Data+0x138>
 8007702:	ed97 1a03 	vldr	s2, [r7, #12]
 8007706:	eef0 0a47 	vmov.f32	s1, s14
 800770a:	eeb0 0a67 	vmov.f32	s0, s15
 800770e:	f000 ff3e 	bl	800858e <Perform_LPF_on_Acc>
 8007712:	eef0 7a40 	vmov.f32	s15, s0
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		t_thigh_angle_params->vel_LPF_1st[0],
		t_thigh_angle_params->vel_LPF_2nd[1],
		t_lpf_freq, 
		IMU_CONTROL_PERIOD
	);
}
 800771c:	bf00      	nop
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	f3af 8000 	nop.w
 8007728:	fc8b007a 	.word	0xfc8b007a
 800772c:	400921fa 	.word	0x400921fa
 8007730:	447a0000 	.word	0x447a0000
 8007734:	3e99999a 	.word	0x3e99999a
 8007738:	3a83126f 	.word	0x3a83126f

0800773c <Compute_Phase_Radius>:

/* 
 *This function calculates and returns the phase radius
*/
static float Compute_Phase_Radius(float t_deg_diff, float t_deg_th, float t_vel_diff, float t_vel_th) 
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	ed87 0a03 	vstr	s0, [r7, #12]
 8007746:	edc7 0a02 	vstr	s1, [r7, #8]
 800774a:	ed87 1a01 	vstr	s2, [r7, #4]
 800774e:	edc7 1a00 	vstr	s3, [r7]
    /* Calculate degree ratio */
    float t_deg_ratio = t_deg_diff / t_deg_th;
 8007752:	edd7 6a03 	vldr	s13, [r7, #12]
 8007756:	ed97 7a02 	vldr	s14, [r7, #8]
 800775a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800775e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Calculate velocity ratio */
    float t_vel_ratio = t_vel_diff / t_vel_th;
 8007762:	edd7 6a01 	vldr	s13, [r7, #4]
 8007766:	ed97 7a00 	vldr	s14, [r7]
 800776a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800776e:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Calculate and return the phase radius */
    return Calculate_Square_Root_Sum(t_deg_ratio, t_vel_ratio);
 8007772:	edd7 0a04 	vldr	s1, [r7, #16]
 8007776:	ed97 0a05 	vldr	s0, [r7, #20]
 800777a:	f000 fda5 	bl	80082c8 <Calculate_Square_Root_Sum>
 800777e:	eef0 7a40 	vmov.f32	s15, s0
}
 8007782:	eeb0 0a67 	vmov.f32	s0, s15
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <Update_Walking_State>:

/* 
 *This function updates the walking state based on the phase radii and sum_i 
*/
static void Update_Walking_State(uint8_t* t_walking, float t_phase_radius_start, float t_phase_radius_stop, int16_t t_sum_i)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	ed87 0a02 	vstr	s0, [r7, #8]
 8007798:	edc7 0a01 	vstr	s1, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	807b      	strh	r3, [r7, #2]
    /* The walking state is updated based on the current walking state, phase radii, and t_sum_i */
    switch (*t_walking)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d01d      	beq.n	80077e4 <Update_Walking_State+0x58>
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	dc23      	bgt.n	80077f4 <Update_Walking_State+0x68>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <Update_Walking_State+0x2a>
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d00e      	beq.n	80077d2 <Update_Walking_State+0x46>
 80077b4:	e01e      	b.n	80077f4 <Update_Walking_State+0x68>
    {
        case e_STOP:	
            /* If the start phase radius is greater than 1, set the walking state to 1 */
            if (t_phase_radius_start > 1){
 80077b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80077ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c6:	dc00      	bgt.n	80077ca <Update_Walking_State+0x3e>
                *t_walking = 1;
            }
            break;
 80077c8:	e025      	b.n	8007816 <Update_Walking_State+0x8a>
                *t_walking = 1;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	701a      	strb	r2, [r3, #0]
            break;
 80077d0:	e021      	b.n	8007816 <Update_Walking_State+0x8a>
        case e_WALKING_START:	
            /* If sum_i is greater than 1000, set the walking state to 2 */
            if (t_sum_i > 1000){
 80077d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077da:	dd19      	ble.n	8007810 <Update_Walking_State+0x84>
                *t_walking = 2;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2202      	movs	r2, #2
 80077e0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80077e2:	e015      	b.n	8007810 <Update_Walking_State+0x84>
        case e_WALKING_HALF:	
            /* If sum_i is 0, set the walking state to 3 */
            if (t_sum_i == 0){
 80077e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d113      	bne.n	8007814 <Update_Walking_State+0x88>
                *t_walking = 3;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2203      	movs	r2, #3
 80077f0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80077f2:	e00f      	b.n	8007814 <Update_Walking_State+0x88>
        default:
            /* If the stop phase radius is less than 1, set the walking state to 0 */
            if (t_phase_radius_stop < 1){
 80077f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80077f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007804:	d400      	bmi.n	8007808 <Update_Walking_State+0x7c>
                *t_walking = 0;
            }
            break;
 8007806:	e006      	b.n	8007816 <Update_Walking_State+0x8a>
                *t_walking = 0;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
            break;
 800780e:	e002      	b.n	8007816 <Update_Walking_State+0x8a>
            break;
 8007810:	bf00      	nop
 8007812:	e000      	b.n	8007816 <Update_Walking_State+0x8a>
            break;
 8007814:	bf00      	nop
    }
}
 8007816:	bf00      	nop
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
	...

08007824 <Check_Walking_State>:

/* 
*This function checks the walking state using the walking parameters and IMU system information 
*/
static void Check_Walking_State(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Threshold_Params* t_th_params, Gait_Params* t_gait_params, uint8_t* t_walking)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
	float t_deg_diff = 0.0;
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]
	float t_vel_diff = 0.0;
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
	float t_phase_radius_start = 0.0;
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	617b      	str	r3, [r7, #20]
	float t_phase_radius_stop = 0.0;
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	613b      	str	r3, [r7, #16]

    /* Get the relevant values from the walking parameters and IMU system */
    t_deg_diff = t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	edd3 7a00 	vldr	s15, [r3]
 8007856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800785a:	edc7 7a07 	vstr	s15, [r7, #28]
    t_vel_diff = t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	edd3 7a01 	vldr	s15, [r3, #4]
 800786a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800786e:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Calculate the start and stop phase radii */
    t_phase_radius_start = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_start, t_vel_diff, t_th_params->vel_th_start);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	edd3 7a00 	vldr	s15, [r3]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	ed93 7a01 	vldr	s14, [r3, #4]
 800787e:	eef0 1a47 	vmov.f32	s3, s14
 8007882:	ed97 1a06 	vldr	s2, [r7, #24]
 8007886:	eef0 0a67 	vmov.f32	s1, s15
 800788a:	ed97 0a07 	vldr	s0, [r7, #28]
 800788e:	f7ff ff55 	bl	800773c <Compute_Phase_Radius>
 8007892:	ed87 0a05 	vstr	s0, [r7, #20]
    t_phase_radius_stop = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_stop, t_vel_diff, t_th_params->vel_th_stop);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	edd3 7a02 	vldr	s15, [r3, #8]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	ed93 7a03 	vldr	s14, [r3, #12]
 80078a2:	eef0 1a47 	vmov.f32	s3, s14
 80078a6:	ed97 1a06 	vldr	s2, [r7, #24]
 80078aa:	eef0 0a67 	vmov.f32	s1, s15
 80078ae:	ed97 0a07 	vldr	s0, [r7, #28]
 80078b2:	f7ff ff43 	bl	800773c <Compute_Phase_Radius>
 80078b6:	ed87 0a04 	vstr	s0, [r7, #16]

    /* Update the walking state based on the phase radii and sum_i */
    Update_Walking_State(t_walking, t_phase_radius_start, t_phase_radius_stop, t_norm_params->sum_i);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	8a1b      	ldrh	r3, [r3, #16]
 80078be:	b21b      	sxth	r3, r3
 80078c0:	4619      	mov	r1, r3
 80078c2:	edd7 0a04 	vldr	s1, [r7, #16]
 80078c6:	ed97 0a05 	vldr	s0, [r7, #20]
 80078ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078cc:	f7ff ff5e 	bl	800778c <Update_Walking_State>

    /* If the walking state is 0 or 1, set the gait phase to -100 */
    if (*t_walking == 0 || *t_walking == 1){
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <Check_Walking_State+0xbc>
 80078d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d102      	bne.n	80078e6 <Check_Walking_State+0xc2>
        t_gait_params->gait_phase = -100;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	4a03      	ldr	r2, [pc, #12]	; (80078f0 <Check_Walking_State+0xcc>)
 80078e4:	605a      	str	r2, [r3, #4]
    }
}
 80078e6:	bf00      	nop
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	c2c80000 	.word	0xc2c80000

080078f4 <Setting_Assist_Force_and_Time>:

/*
*The function Setting_Assist_Force_and_Time updates assistive force and time parameters.
*/
static void Setting_Assist_Force_and_Time(Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
	Set_Assist_Force_Timing_Params(t_assist_params, t_gait_params);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 f955 	bl	8008bb0 <Set_Assist_Force_Timing_Params>
	Update_Assist_Force(t_assist_params, e_PLANTAR);
 8007906:	2100      	movs	r1, #0
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 fae9 	bl	8008ee0 <Update_Assist_Force>
	Update_Assist_Force(t_assist_params, e_DORSI);
 800790e:	2101      	movs	r1, #1
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 fae5 	bl	8008ee0 <Update_Assist_Force>
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <Is_Within_Range>:
 * @param t_range - The size of the range from the start.
 * 
 * @return True if the value is within the range, False otherwise.
 */
static bool Is_Within_Range(float t_value, float t_start, float t_range) 
{
 800791e:	b480      	push	{r7}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	ed87 0a03 	vstr	s0, [r7, #12]
 8007928:	edc7 0a02 	vstr	s1, [r7, #8]
 800792c:	ed87 1a01 	vstr	s2, [r7, #4]
    if (t_range > 0){
 8007930:	edd7 7a01 	vldr	s15, [r7, #4]
 8007934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793c:	dd1c      	ble.n	8007978 <Is_Within_Range+0x5a>
        return (t_value > t_start) && (t_value < t_start + t_range);
 800793e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007942:	edd7 7a02 	vldr	s15, [r7, #8]
 8007946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794e:	dd0e      	ble.n	800796e <Is_Within_Range+0x50>
 8007950:	ed97 7a02 	vldr	s14, [r7, #8]
 8007954:	edd7 7a01 	vldr	s15, [r7, #4]
 8007958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800795c:	ed97 7a03 	vldr	s14, [r7, #12]
 8007960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007968:	d501      	bpl.n	800796e <Is_Within_Range+0x50>
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <Is_Within_Range+0x52>
 800796e:	2300      	movs	r3, #0
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	b2db      	uxtb	r3, r3
 8007976:	e01b      	b.n	80079b0 <Is_Within_Range+0x92>
    } else {
        return (t_value > t_start + t_range) && (t_value < t_start);
 8007978:	ed97 7a02 	vldr	s14, [r7, #8]
 800797c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007984:	ed97 7a03 	vldr	s14, [r7, #12]
 8007988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800798c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007990:	dd0a      	ble.n	80079a8 <Is_Within_Range+0x8a>
 8007992:	ed97 7a03 	vldr	s14, [r7, #12]
 8007996:	edd7 7a02 	vldr	s15, [r7, #8]
 800799a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800799e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a2:	d501      	bpl.n	80079a8 <Is_Within_Range+0x8a>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <Is_Within_Range+0x8c>
 80079a8:	2300      	movs	r3, #0
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	b2db      	uxtb	r3, r3
    }
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <Set_Trigger>:
 * 
 * The triggers are set based on whether the gait phases are within specific ranges. 
 * If a trigger is set, the opposite trigger is set to 0.
 */
static void Set_Trigger(Assist_Params* t_assist_params, Gait_Params* t_gait_params, uint8_t t_walking)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71fb      	strb	r3, [r7, #7]
    if (t_walking != 3) return;
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d160      	bne.n	8007a92 <Set_Trigger+0xd6>

    if (Is_Within_Range(t_gait_params->gait_phase, t_assist_params->t_P_start, 10) &&
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	ee07 3a10 	vmov	s14, r3
 80079de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80079e2:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80079e6:	eef0 0a47 	vmov.f32	s1, s14
 80079ea:	eeb0 0a67 	vmov.f32	s0, s15
 80079ee:	f7ff ff96 	bl	800791e <Is_Within_Range>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01b      	beq.n	8007a30 <Set_Trigger+0x74>
        Is_Within_Range(t_gait_params->gait_phase_pre, t_assist_params->t_P_start, -10)){
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	ee07 3a10 	vmov	s14, r3
 8007a06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007a0a:	eeba 1a04 	vmov.f32	s2, #164	; 0xc1200000 -10.0
 8007a0e:	eef0 0a47 	vmov.f32	s1, s14
 8007a12:	eeb0 0a67 	vmov.f32	s0, s15
 8007a16:	f7ff ff82 	bl	800791e <Is_Within_Range>
 8007a1a:	4603      	mov	r3, r0
    if (Is_Within_Range(t_gait_params->gait_phase, t_assist_params->t_P_start, 10) &&
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <Set_Trigger+0x74>
        t_assist_params->trigger_P = 1;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        t_assist_params->trigger_D = 0;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    }

    if (Is_Within_Range(t_gait_params->gait_phase, t_assist_params->t_D_start, 25) &&
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	885b      	ldrh	r3, [r3, #2]
 8007a3a:	ee07 3a10 	vmov	s14, r3
 8007a3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007a42:	eeb3 1a09 	vmov.f32	s2, #57	; 0x41c80000  25.0
 8007a46:	eef0 0a47 	vmov.f32	s1, s14
 8007a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a4e:	f7ff ff66 	bl	800791e <Is_Within_Range>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01d      	beq.n	8007a94 <Set_Trigger+0xd8>
        Is_Within_Range(t_gait_params->gait_phase_pre, t_assist_params->t_D_start, -25)){
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	ee07 3a10 	vmov	s14, r3
 8007a66:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007a6a:	eebb 1a09 	vmov.f32	s2, #185	; 0xc1c80000 -25.0
 8007a6e:	eef0 0a47 	vmov.f32	s1, s14
 8007a72:	eeb0 0a67 	vmov.f32	s0, s15
 8007a76:	f7ff ff52 	bl	800791e <Is_Within_Range>
 8007a7a:	4603      	mov	r3, r0
    if (Is_Within_Range(t_gait_params->gait_phase, t_assist_params->t_D_start, 25) &&
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <Set_Trigger+0xd8>
        t_assist_params->trigger_P = 0;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		t_assist_params->trigger_D = 1;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8007a90:	e000      	b.n	8007a94 <Set_Trigger+0xd8>
    if (t_walking != 3) return;
 8007a92:	bf00      	nop
    }
}
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <Update_IMU_Raw_Value>:

/* 
*The function Update_IMU_Raw_Value updates the IMU raw values. 
*/
static void Update_IMU_Raw_Value(Sensor_Params* t_sensor_params, AccGyroData* t_acc_gyro_data, MagData* t_mag_data, AttachPlane t_attach_plane)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b085      	sub	sp, #20
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	70fb      	strb	r3, [r7, #3]
	t_sensor_params->accX[0] = t_acc_gyro_data->acc_x;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	601a      	str	r2, [r3, #0]
	t_sensor_params->accY[0] = t_acc_gyro_data->acc_y;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	609a      	str	r2, [r3, #8]
	t_sensor_params->accZ[0] = t_acc_gyro_data->acc_z;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	611a      	str	r2, [r3, #16]

	t_sensor_params->gyrX[0] = t_acc_gyro_data->gyr_x;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	619a      	str	r2, [r3, #24]
	t_sensor_params->gyrY[0] = t_acc_gyro_data->gyr_y;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	621a      	str	r2, [r3, #32]

	if (t_attach_plane == e_LEFT_SAGITAL || t_attach_plane == e_LEFT_SAGITAL_DEMO){
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <Update_IMU_Raw_Value+0x42>
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d108      	bne.n	8007aee <Update_IMU_Raw_Value+0x54>
		t_sensor_params->gyrZ[0] = (-1) * t_acc_gyro_data->gyr_z; 	// For Left Sagital case
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	edd3 7a05 	vldr	s15, [r3, #20]
 8007ae2:	eef1 7a67 	vneg.f32	s15, s15
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 8007aec:	e006      	b.n	8007afc <Update_IMU_Raw_Value+0x62>
	}
	else if (t_attach_plane == e_RIGHT_SAGITAL){
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d103      	bne.n	8007afc <Update_IMU_Raw_Value+0x62>
		t_sensor_params->gyrZ[0] = t_acc_gyro_data->gyr_z; 	// For Right Sagital case
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	695a      	ldr	r2, [r3, #20]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	629a      	str	r2, [r3, #40]	; 0x28
	}

	t_sensor_params->magX[0] = t_mag_data->mag_x;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
	t_sensor_params->magY[0] = t_mag_data->mag_y;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
	t_sensor_params->magZ[0] = t_mag_data->mag_z;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <Run_Total_function>:

 */


static int Run_Total_function()
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af02      	add	r7, sp, #8
	thigh_angle_tvcf_demo = (-1) * thigh_angle_params.deg_tvcf_filtered;
 8007b26:	4b31      	ldr	r3, [pc, #196]	; (8007bec <Run_Total_function+0xcc>)
 8007b28:	edd3 7a05 	vldr	s15, [r3, #20]
 8007b2c:	eef1 7a67 	vneg.f32	s15, s15
 8007b30:	4b2f      	ldr	r3, [pc, #188]	; (8007bf0 <Run_Total_function+0xd0>)
 8007b32:	edc3 7a00 	vstr	s15, [r3]

	Save_Previous_Value(&sensor_params, &thigh_angle_params, &gait_params);
 8007b36:	4a2f      	ldr	r2, [pc, #188]	; (8007bf4 <Run_Total_function+0xd4>)
 8007b38:	492c      	ldr	r1, [pc, #176]	; (8007bec <Run_Total_function+0xcc>)
 8007b3a:	482f      	ldr	r0, [pc, #188]	; (8007bf8 <Run_Total_function+0xd8>)
 8007b3c:	f000 fb90 	bl	8008260 <Save_Previous_Value>

	uint8_t t_3axis_res = Get_Value_3Axis_IMU(&mag_data);
 8007b40:	482e      	ldr	r0, [pc, #184]	; (8007bfc <Run_Total_function+0xdc>)
 8007b42:	f7ff f9c7 	bl	8006ed4 <Get_Value_3Axis_IMU>
 8007b46:	4603      	mov	r3, r0
 8007b48:	71fb      	strb	r3, [r7, #7]
	if (t_3axis_res != NO_ERROR) { Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR; }
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <Run_Total_function+0x38>
 8007b50:	4b2b      	ldr	r3, [pc, #172]	; (8007c00 <Run_Total_function+0xe0>)
 8007b52:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 8007b56:	601a      	str	r2, [r3, #0]
	uint8_t t_6axis_res = Get_Value_6Axis_IMU(&acc_gyro_data);
 8007b58:	482a      	ldr	r0, [pc, #168]	; (8007c04 <Run_Total_function+0xe4>)
 8007b5a:	f7ff fa51 	bl	8007000 <Get_Value_6Axis_IMU>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	71bb      	strb	r3, [r7, #6]
	if (t_6axis_res != NO_ERROR) { Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR; }
 8007b62:	79bb      	ldrb	r3, [r7, #6]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <Run_Total_function+0x50>
 8007b68:	4b25      	ldr	r3, [pc, #148]	; (8007c00 <Run_Total_function+0xe0>)
 8007b6a:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 8007b6e:	601a      	str	r2, [r3, #0]

	Update_IMU_Raw_Value(&sensor_params, &acc_gyro_data, &mag_data, attach_plane);
 8007b70:	4b25      	ldr	r3, [pc, #148]	; (8007c08 <Run_Total_function+0xe8>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	4a21      	ldr	r2, [pc, #132]	; (8007bfc <Run_Total_function+0xdc>)
 8007b76:	4923      	ldr	r1, [pc, #140]	; (8007c04 <Run_Total_function+0xe4>)
 8007b78:	481f      	ldr	r0, [pc, #124]	; (8007bf8 <Run_Total_function+0xd8>)
 8007b7a:	f7ff ff8e 	bl	8007a9a <Update_IMU_Raw_Value>



	Generate_Fuzzy_Input(&sensor_params, &fuzzy_params);
 8007b7e:	4923      	ldr	r1, [pc, #140]	; (8007c0c <Run_Total_function+0xec>)
 8007b80:	481d      	ldr	r0, [pc, #116]	; (8007bf8 <Run_Total_function+0xd8>)
 8007b82:	f000 fc55 	bl	8008430 <Generate_Fuzzy_Input>
	wc_test = Calculate_Fuzzy_Wc(&fuzzy_params);
 8007b86:	4821      	ldr	r0, [pc, #132]	; (8007c0c <Run_Total_function+0xec>)
 8007b88:	f000 fcb6 	bl	80084f8 <Calculate_Fuzzy_Wc>
 8007b8c:	eef0 7a40 	vmov.f32	s15, s0
 8007b90:	4b1f      	ldr	r3, [pc, #124]	; (8007c10 <Run_Total_function+0xf0>)
 8007b92:	edc3 7a00 	vstr	s15, [r3]

	Run_Complementary_Filter(&sensor_params, &thigh_angle_params, &fuzzy_params, IMU_CONTROL_PERIOD, attach_plane);
 8007b96:	4b1c      	ldr	r3, [pc, #112]	; (8007c08 <Run_Total_function+0xe8>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8007c14 <Run_Total_function+0xf4>
 8007b9e:	4a1b      	ldr	r2, [pc, #108]	; (8007c0c <Run_Total_function+0xec>)
 8007ba0:	4912      	ldr	r1, [pc, #72]	; (8007bec <Run_Total_function+0xcc>)
 8007ba2:	4815      	ldr	r0, [pc, #84]	; (8007bf8 <Run_Total_function+0xd8>)
 8007ba4:	f7ff fcd4 	bl	8007550 <Run_Complementary_Filter>

	Reduce_Noise_In_Sensor_Data(&thigh_angle_params, &gait_params);
 8007ba8:	4912      	ldr	r1, [pc, #72]	; (8007bf4 <Run_Total_function+0xd4>)
 8007baa:	4810      	ldr	r0, [pc, #64]	; (8007bec <Run_Total_function+0xcc>)
 8007bac:	f7ff fd28 	bl	8007600 <Reduce_Noise_In_Sensor_Data>

	Run_Normalization_And_Get_Gait_Phase(&thigh_angle_params, &norm_params, &gait_params);
 8007bb0:	4a10      	ldr	r2, [pc, #64]	; (8007bf4 <Run_Total_function+0xd4>)
 8007bb2:	4919      	ldr	r1, [pc, #100]	; (8007c18 <Run_Total_function+0xf8>)
 8007bb4:	480d      	ldr	r0, [pc, #52]	; (8007bec <Run_Total_function+0xcc>)
 8007bb6:	f7ff fce9 	bl	800758c <Run_Normalization_And_Get_Gait_Phase>

	Check_Walking_State(&thigh_angle_params, &norm_params, &th_params, &gait_params, &walking);
 8007bba:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <Run_Total_function+0xfc>)
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <Run_Total_function+0xd4>)
 8007bc0:	4a17      	ldr	r2, [pc, #92]	; (8007c20 <Run_Total_function+0x100>)
 8007bc2:	4915      	ldr	r1, [pc, #84]	; (8007c18 <Run_Total_function+0xf8>)
 8007bc4:	4809      	ldr	r0, [pc, #36]	; (8007bec <Run_Total_function+0xcc>)
 8007bc6:	f7ff fe2d 	bl	8007824 <Check_Walking_State>

	// Msg_Hdlr problem //
//	Setting_Assist_Time(&assist_params, &gait_params);
	Setting_Assist_Force_and_Time(&assist_params, &gait_params);
 8007bca:	490a      	ldr	r1, [pc, #40]	; (8007bf4 <Run_Total_function+0xd4>)
 8007bcc:	4815      	ldr	r0, [pc, #84]	; (8007c24 <Run_Total_function+0x104>)
 8007bce:	f7ff fe91 	bl	80078f4 <Setting_Assist_Force_and_Time>
	Set_Trigger(&assist_params, &gait_params, walking);
 8007bd2:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <Run_Total_function+0xfc>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	4906      	ldr	r1, [pc, #24]	; (8007bf4 <Run_Total_function+0xd4>)
 8007bda:	4812      	ldr	r0, [pc, #72]	; (8007c24 <Run_Total_function+0x104>)
 8007bdc:	f7ff feee 	bl	80079bc <Set_Trigger>

	return 0;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	2400d00c 	.word	0x2400d00c
 8007bf0:	2400cefc 	.word	0x2400cefc
 8007bf4:	2400d0bc 	.word	0x2400d0bc
 8007bf8:	2400d0e8 	.word	0x2400d0e8
 8007bfc:	2400d3d8 	.word	0x2400d3d8
 8007c00:	2400d0c8 	.word	0x2400d0c8
 8007c04:	2400d0cc 	.word	0x2400d0cc
 8007c08:	2400d1e4 	.word	0x2400d1e4
 8007c0c:	2400cf0c 	.word	0x2400cf0c
 8007c10:	2400d3e8 	.word	0x2400d3e8
 8007c14:	3a83126f 	.word	0x3a83126f
 8007c18:	2400d3f0 	.word	0x2400d3f0
 8007c1c:	240031c4 	.word	0x240031c4
 8007c20:	240031c8 	.word	0x240031c8
 8007c24:	2400cf4c 	.word	0x2400cf4c

08007c28 <Get_State_Callback>:
 \__ \ |) | (_) | | (__/ _` | | | '_ \/ _` / _| / /(_-<
 |___/___/ \___/   \___\__,_|_|_|_.__/\__,_\__|_\_\/__/

 */

MSG_COMMON_SDO_CALLBACK(imu_ctrl_task)
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2201      	movs	r2, #1
 8007c36:	711a      	strb	r2, [r3, #4]
 8007c38:	2001      	movs	r0, #1
 8007c3a:	f001 ffbf 	bl	8009bbc <malloc>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	461a      	mov	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a05      	ldr	r2, [pc, #20]	; (8007c60 <Get_State_Callback+0x38>)
 8007c4c:	7b12      	ldrb	r2, [r2, #12]
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2200      	movs	r2, #0
 8007c54:	721a      	strb	r2, [r3, #8]
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	2400d42c 	.word	0x2400d42c

08007c64 <Set_State_Callback>:
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	73fb      	strb	r3, [r7, #15]
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4808      	ldr	r0, [pc, #32]	; (8007c9c <Set_State_Callback+0x38>)
 8007c7c:	f001 feea 	bl	8009a54 <Transition_State>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	711a      	strb	r2, [r3, #4]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	721a      	strb	r2, [r3, #8]
 8007c92:	bf00      	nop
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	2400d438 	.word	0x2400d438

08007ca0 <Get_Routine_Callback>:
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2200      	movs	r2, #0
 8007cae:	721a      	strb	r2, [r3, #8]
 8007cb0:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <Get_Routine_Callback+0x78>)
 8007cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	711a      	strb	r2, [r3, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	791b      	ldrb	r3, [r3, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d025      	beq.n	8007d0e <Get_Routine_Callback+0x6e>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	88db      	ldrh	r3, [r3, #6]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	791b      	ldrb	r3, [r3, #4]
 8007ccc:	fb03 f302 	mul.w	r3, r3, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 ff73 	bl	8009bbc <malloc>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	e00d      	b.n	8007d00 <Get_Routine_Callback+0x60>
 8007ce4:	4a0c      	ldr	r2, [pc, #48]	; (8007d18 <Get_Routine_Callback+0x78>)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3310      	adds	r3, #16
 8007cea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	b2ca      	uxtb	r2, r1
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	791b      	ldrb	r3, [r3, #4]
 8007d04:	461a      	mov	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	dbeb      	blt.n	8007ce4 <Get_Routine_Callback+0x44>
 8007d0c:	e000      	b.n	8007d10 <Get_Routine_Callback+0x70>
 8007d0e:	bf00      	nop
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	2400d42c 	.word	0x2400d42c

08007d1c <Set_Routine_Callback>:
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	711a      	strb	r2, [r3, #4]
 8007d2c:	4828      	ldr	r0, [pc, #160]	; (8007dd0 <Set_Routine_Callback+0xb4>)
 8007d2e:	f001 fd3a 	bl	80097a6 <Clear_Routines>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	791b      	ldrb	r3, [r3, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <Set_Routine_Callback+0x26>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	721a      	strb	r2, [r3, #8]
 8007d40:	e043      	b.n	8007dca <Set_Routine_Callback+0xae>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	88db      	ldrh	r3, [r3, #6]
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	791b      	ldrb	r3, [r3, #4]
 8007d4c:	fb03 f302 	mul.w	r3, r3, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f001 ff33 	bl	8009bbc <malloc>
 8007d56:	4603      	mov	r3, r0
 8007d58:	461a      	mov	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e020      	b.n	8007da6 <Set_Routine_Callback+0x8a>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	72fb      	strb	r3, [r7, #11]
 8007d70:	7afb      	ldrb	r3, [r7, #11]
 8007d72:	4619      	mov	r1, r3
 8007d74:	4816      	ldr	r0, [pc, #88]	; (8007dd0 <Set_Routine_Callback+0xb4>)
 8007d76:	f001 fd32 	bl	80097de <Push_Routine>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10f      	bne.n	8007da0 <Set_Routine_Callback+0x84>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	441a      	add	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	6819      	ldr	r1, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	440b      	add	r3, r1
 8007d90:	7812      	ldrb	r2, [r2, #0]
 8007d92:	701a      	strb	r2, [r3, #0]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	791b      	ldrb	r3, [r3, #4]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	711a      	strb	r2, [r3, #4]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	791b      	ldrb	r3, [r3, #4]
 8007daa:	461a      	mov	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4293      	cmp	r3, r2
 8007db0:	dbd8      	blt.n	8007d64 <Set_Routine_Callback+0x48>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	791a      	ldrb	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	791b      	ldrb	r3, [r3, #4]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d002      	beq.n	8007dc4 <Set_Routine_Callback+0xa8>
 8007dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc2:	e000      	b.n	8007dc6 <Set_Routine_Callback+0xaa>
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	721a      	strb	r2, [r3, #8]
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	2400d46c 	.word	0x2400d46c

08007dd4 <StateOff_Run>:
 \__ \  _/ _` |  _/ -_) | _| || | ' \/ _|  _| / _ \ ' \(_-<
 |___/\__\__,_|\__\___| |_| \_,_|_||_\__|\__|_\___/_||_/__/

 */
static void StateOff_Run( )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
	// TODO: I2C Initialization
	uint8_t i2c_3axis_res = Get_Value_3Axis_IMU(&mag_data);
 8007dda:	480e      	ldr	r0, [pc, #56]	; (8007e14 <StateOff_Run+0x40>)
 8007ddc:	f7ff f87a 	bl	8006ed4 <Get_Value_3Axis_IMU>
 8007de0:	4603      	mov	r3, r0
 8007de2:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_6axis_res = Get_Value_6Axis_IMU(&acc_gyro_data);
 8007de4:	480c      	ldr	r0, [pc, #48]	; (8007e18 <StateOff_Run+0x44>)
 8007de6:	f7ff f90b 	bl	8007000 <Get_Value_6Axis_IMU>
 8007dea:	4603      	mov	r3, r0
 8007dec:	71bb      	strb	r3, [r7, #6]

	if (i2c_3axis_res == NO_ERROR && i2c_6axis_res == NO_ERROR){
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <StateOff_Run+0x36>
 8007df4:	79bb      	ldrb	r3, [r7, #6]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d107      	bne.n	8007e0a <StateOff_Run+0x36>
		Push_Routine(&imu_ctrl_task.routine, ROUTINE_ID_IMU_TOTAL_FUNCTION);
 8007dfa:	2105      	movs	r1, #5
 8007dfc:	4807      	ldr	r0, [pc, #28]	; (8007e1c <StateOff_Run+0x48>)
 8007dfe:	f001 fcee 	bl	80097de <Push_Routine>
		Transition_State(&imu_ctrl_task.state_machine, e_State_Standby);
 8007e02:	2101      	movs	r1, #1
 8007e04:	4806      	ldr	r0, [pc, #24]	; (8007e20 <StateOff_Run+0x4c>)
 8007e06:	f001 fe25 	bl	8009a54 <Transition_State>
	}

}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	2400d3d8 	.word	0x2400d3d8
 8007e18:	2400d0cc 	.word	0x2400d0cc
 8007e1c:	2400d46c 	.word	0x2400d46c
 8007e20:	2400d438 	.word	0x2400d438

08007e24 <StateStandby_Run>:

static void StateStandby_Run( )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
	Transition_State(&imu_ctrl_task.state_machine, e_State_Enable);
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4802      	ldr	r0, [pc, #8]	; (8007e34 <StateStandby_Run+0x10>)
 8007e2c:	f001 fe12 	bl	8009a54 <Transition_State>
}
 8007e30:	bf00      	nop
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	2400d438 	.word	0x2400d438

08007e38 <StateEnable_Ent>:

static void StateEnable_Ent()
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0

}
 8007e3c:	bf00      	nop
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <StateEnable_Run>:

static void StateEnable_Run( )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
	Run_Routines(&imu_ctrl_task.routine);
 8007e4c:	4802      	ldr	r0, [pc, #8]	; (8007e58 <StateEnable_Run+0x10>)
 8007e4e:	f001 fc74 	bl	800973a <Run_Routines>
}
 8007e52:	bf00      	nop
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	2400d46c 	.word	0x2400d46c

08007e5c <StateEnable_Ext>:

static void StateEnable_Ext()
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0

}
 8007e60:	bf00      	nop
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <StateError_Run>:

static void StateError_Run()
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	af00      	add	r7, sp, #0

}
 8007e6e:	bf00      	nop
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <Init_Imu_Ctrl>:
 |_|  |_\__,_|_|_||_|

 */

void Init_Imu_Ctrl(void)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b092      	sub	sp, #72	; 0x48
 8007e7c:	af02      	add	r7, sp, #8
    Init_Task(&imu_ctrl_task);
 8007e7e:	4887      	ldr	r0, [pc, #540]	; (800809c <Init_Imu_Ctrl+0x224>)
 8007e80:	f001 fe0a 	bl	8009a98 <Init_Task>

	/* State Definition */
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Off,      NULL,   			StateOff_Run,       NULL,         		 true);
 8007e84:	1d38      	adds	r0, r7, #4
 8007e86:	2300      	movs	r3, #0
 8007e88:	4a85      	ldr	r2, [pc, #532]	; (80080a0 <Init_Imu_Ctrl+0x228>)
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	f001 fd24 	bl	80098d8 <Create_State_Entity>
 8007e90:	2301      	movs	r3, #1
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	1d3b      	adds	r3, r7, #4
 8007e9a:	cb0c      	ldmia	r3, {r2, r3}
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	487f      	ldr	r0, [pc, #508]	; (800809c <Init_Imu_Ctrl+0x224>)
 8007ea0:	f001 fe19 	bl	8009ad6 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Standby,  NULL,   			StateStandby_Run,	NULL,         		 false);
 8007ea4:	f107 0010 	add.w	r0, r7, #16
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4a7e      	ldr	r2, [pc, #504]	; (80080a4 <Init_Imu_Ctrl+0x22c>)
 8007eac:	2100      	movs	r1, #0
 8007eae:	f001 fd13 	bl	80098d8 <Create_State_Entity>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	f107 0310 	add.w	r3, r7, #16
 8007ebe:	cb0c      	ldmia	r3, {r2, r3}
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	4876      	ldr	r0, [pc, #472]	; (800809c <Init_Imu_Ctrl+0x224>)
 8007ec4:	f001 fe07 	bl	8009ad6 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Enable,   StateEnable_Ent,  	StateEnable_Run, 	StateEnable_Ext,	 false);
 8007ec8:	f107 001c 	add.w	r0, r7, #28
 8007ecc:	4b76      	ldr	r3, [pc, #472]	; (80080a8 <Init_Imu_Ctrl+0x230>)
 8007ece:	4a77      	ldr	r2, [pc, #476]	; (80080ac <Init_Imu_Ctrl+0x234>)
 8007ed0:	4977      	ldr	r1, [pc, #476]	; (80080b0 <Init_Imu_Ctrl+0x238>)
 8007ed2:	f001 fd01 	bl	80098d8 <Create_State_Entity>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	f107 031c 	add.w	r3, r7, #28
 8007ee2:	cb0c      	ldmia	r3, {r2, r3}
 8007ee4:	2102      	movs	r1, #2
 8007ee6:	486d      	ldr	r0, [pc, #436]	; (800809c <Init_Imu_Ctrl+0x224>)
 8007ee8:	f001 fdf5 	bl	8009ad6 <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Error,    NULL,			  	StateError_Run,    	NULL,				 false);
 8007eec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	4a70      	ldr	r2, [pc, #448]	; (80080b4 <Init_Imu_Ctrl+0x23c>)
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	f001 fcef 	bl	80098d8 <Create_State_Entity>
 8007efa:	2300      	movs	r3, #0
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f06:	cb0c      	ldmia	r3, {r2, r3}
 8007f08:	2103      	movs	r1, #3
 8007f0a:	4864      	ldr	r0, [pc, #400]	; (800809c <Init_Imu_Ctrl+0x224>)
 8007f0c:	f001 fde3 	bl	8009ad6 <Set_Task_State_Entity>

	/* Routine Definition */
	TASK_CREATE_ROUTINE(&imu_ctrl_task, ROUTINE_ID_IMU_TOTAL_FUNCTION, 		NULL, Run_Total_function, 		NULL);
 8007f10:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8007f14:	2300      	movs	r3, #0
 8007f16:	4a68      	ldr	r2, [pc, #416]	; (80080b8 <Init_Imu_Ctrl+0x240>)
 8007f18:	2100      	movs	r1, #0
 8007f1a:	f001 fbbb 	bl	8009694 <Create_Routine_Entity>
 8007f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f26:	cb0c      	ldmia	r3, {r2, r3}
 8007f28:	2105      	movs	r1, #5
 8007f2a:	485c      	ldr	r0, [pc, #368]	; (800809c <Init_Imu_Ctrl+0x224>)
 8007f2c:	f001 fdfc 	bl	8009b28 <Set_Task_Routine_Entity>

	/* DOD Definition */
	// DOD
	Create_DOD(TASK_ID_IMU);
 8007f30:	2003      	movs	r0, #3
 8007f32:	f001 fa4d 	bl	80093d0 <Create_DOD>

	// PDO
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_X, e_Float32, 1, &acc_gyro_data.acc_x);
 8007f36:	4b61      	ldr	r3, [pc, #388]	; (80080bc <Init_Imu_Ctrl+0x244>)
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	2207      	movs	r2, #7
 8007f3e:	2100      	movs	r1, #0
 8007f40:	2003      	movs	r0, #3
 8007f42:	f001 fa5d 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Y, e_Float32, 1, &acc_gyro_data.acc_y);
 8007f46:	4b5e      	ldr	r3, [pc, #376]	; (80080c0 <Init_Imu_Ctrl+0x248>)
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	2207      	movs	r2, #7
 8007f4e:	2101      	movs	r1, #1
 8007f50:	2003      	movs	r0, #3
 8007f52:	f001 fa55 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Z, e_Float32, 1, &acc_gyro_data.acc_z);
 8007f56:	4b5b      	ldr	r3, [pc, #364]	; (80080c4 <Init_Imu_Ctrl+0x24c>)
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	2102      	movs	r1, #2
 8007f60:	2003      	movs	r0, #3
 8007f62:	f001 fa4d 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_X, e_Float32, 1, &acc_gyro_data.gyr_x);
 8007f66:	4b58      	ldr	r3, [pc, #352]	; (80080c8 <Init_Imu_Ctrl+0x250>)
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	2207      	movs	r2, #7
 8007f6e:	2103      	movs	r1, #3
 8007f70:	2003      	movs	r0, #3
 8007f72:	f001 fa45 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Y, e_Float32, 1, &acc_gyro_data.gyr_y);
 8007f76:	4b55      	ldr	r3, [pc, #340]	; (80080cc <Init_Imu_Ctrl+0x254>)
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	2207      	movs	r2, #7
 8007f7e:	2104      	movs	r1, #4
 8007f80:	2003      	movs	r0, #3
 8007f82:	f001 fa3d 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Z, e_Float32, 1, &acc_gyro_data.gyr_z);
 8007f86:	4b52      	ldr	r3, [pc, #328]	; (80080d0 <Init_Imu_Ctrl+0x258>)
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	2207      	movs	r2, #7
 8007f8e:	2105      	movs	r1, #5
 8007f90:	2003      	movs	r0, #3
 8007f92:	f001 fa35 	bl	8009400 <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC,          e_Float32, 1, &thigh_angle_params.deg_acc);
 8007f96:	4b4f      	ldr	r3, [pc, #316]	; (80080d4 <Init_Imu_Ctrl+0x25c>)
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	2207      	movs	r2, #7
 8007f9e:	210d      	movs	r1, #13
 8007fa0:	2003      	movs	r0, #3
 8007fa2:	f001 fa2d 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR,          e_Float32, 1, &thigh_angle_params.deg_gyr);
 8007fa6:	4b4c      	ldr	r3, [pc, #304]	; (80080d8 <Init_Imu_Ctrl+0x260>)
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	2301      	movs	r3, #1
 8007fac:	2207      	movs	r2, #7
 8007fae:	210e      	movs	r1, #14
 8007fb0:	2003      	movs	r0, #3
 8007fb2:	f001 fa25 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC_FILTERED, e_Float32, 1, &thigh_angle_params.deg_acc_filtered);
 8007fb6:	4b49      	ldr	r3, [pc, #292]	; (80080dc <Init_Imu_Ctrl+0x264>)
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	2301      	movs	r3, #1
 8007fbc:	2207      	movs	r2, #7
 8007fbe:	210f      	movs	r1, #15
 8007fc0:	2003      	movs	r0, #3
 8007fc2:	f001 fa1d 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR_FILTERED, e_Float32, 1, &thigh_angle_params.deg_gyr_filtered);
 8007fc6:	4b46      	ldr	r3, [pc, #280]	; (80080e0 <Init_Imu_Ctrl+0x268>)
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	2301      	movs	r3, #1
 8007fcc:	2207      	movs	r2, #7
 8007fce:	2110      	movs	r1, #16
 8007fd0:	2003      	movs	r0, #3
 8007fd2:	f001 fa15 	bl	8009400 <Create_PDO>
//	Create_PDO(TASK_ID_IMU, PDO_ID_DEG_TVCF,             e_Float32, 1, &thigh_angle_params.deg_tvcf_filtered);			// Real application
	Create_PDO(TASK_ID_IMU, PDO_ID_DEG_TVCF,             e_Float32, 1, &thigh_angle_tvcf_demo);							// Only for DEMO
 8007fd6:	4b43      	ldr	r3, [pc, #268]	; (80080e4 <Init_Imu_Ctrl+0x26c>)
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	2301      	movs	r3, #1
 8007fdc:	2207      	movs	r2, #7
 8007fde:	2111      	movs	r1, #17
 8007fe0:	2003      	movs	r0, #3
 8007fe2:	f001 fa0d 	bl	8009400 <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_WALKING_STATE, 	e_UInt8, 	1, &walking);
 8007fe6:	4b40      	ldr	r3, [pc, #256]	; (80080e8 <Init_Imu_Ctrl+0x270>)
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	2301      	movs	r3, #1
 8007fec:	2201      	movs	r2, #1
 8007fee:	2106      	movs	r1, #6
 8007ff0:	2003      	movs	r0, #3
 8007ff2:	f001 fa05 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GAIT_PHASE, 		e_Float32,  1, &gait_params.gait_phase);
 8007ff6:	4b3d      	ldr	r3, [pc, #244]	; (80080ec <Init_Imu_Ctrl+0x274>)
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	2207      	movs	r2, #7
 8007ffe:	2107      	movs	r1, #7
 8008000:	2003      	movs	r0, #3
 8008002:	f001 f9fd 	bl	8009400 <Create_PDO>

	// Assist mode //
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_P, e_Float32, 1, &assist_params.Plantar_ref);
 8008006:	4b3a      	ldr	r3, [pc, #232]	; (80080f0 <Init_Imu_Ctrl+0x278>)
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	2301      	movs	r3, #1
 800800c:	2207      	movs	r2, #7
 800800e:	210b      	movs	r1, #11
 8008010:	2003      	movs	r0, #3
 8008012:	f001 f9f5 	bl	8009400 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_D, e_Float32, 1, &assist_params.Dorsi_ref);
 8008016:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <Init_Imu_Ctrl+0x27c>)
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	2301      	movs	r3, #1
 800801c:	2207      	movs	r2, #7
 800801e:	210c      	movs	r1, #12
 8008020:	2003      	movs	r0, #3
 8008022:	f001 f9ed 	bl	8009400 <Create_PDO>

	// SDO
	MSG_COMMON_SDO_CREATE(TASK_ID_IMU)
 8008026:	4b34      	ldr	r3, [pc, #208]	; (80080f8 <Init_Imu_Ctrl+0x280>)
 8008028:	2201      	movs	r2, #1
 800802a:	2100      	movs	r1, #0
 800802c:	2003      	movs	r0, #3
 800802e:	f001 faa1 	bl	8009574 <Create_SDO>
 8008032:	4b32      	ldr	r3, [pc, #200]	; (80080fc <Init_Imu_Ctrl+0x284>)
 8008034:	2201      	movs	r2, #1
 8008036:	2101      	movs	r1, #1
 8008038:	2003      	movs	r0, #3
 800803a:	f001 fa9b 	bl	8009574 <Create_SDO>
 800803e:	4b30      	ldr	r3, [pc, #192]	; (8008100 <Init_Imu_Ctrl+0x288>)
 8008040:	2201      	movs	r2, #1
 8008042:	2102      	movs	r1, #2
 8008044:	2003      	movs	r0, #3
 8008046:	f001 fa95 	bl	8009574 <Create_SDO>
 800804a:	4b2e      	ldr	r3, [pc, #184]	; (8008104 <Init_Imu_Ctrl+0x28c>)
 800804c:	2201      	movs	r2, #1
 800804e:	2103      	movs	r1, #3
 8008050:	2003      	movs	r0, #3
 8008052:	f001 fa8f 	bl	8009574 <Create_SDO>

	Init_6Axis_IMU(&acc_gyro_data);
 8008056:	4819      	ldr	r0, [pc, #100]	; (80080bc <Init_Imu_Ctrl+0x244>)
 8008058:	f7fe ff98 	bl	8006f8c <Init_6Axis_IMU>
	Init_3Axis_IMU(&mag_data);
 800805c:	482a      	ldr	r0, [pc, #168]	; (8008108 <Init_Imu_Ctrl+0x290>)
 800805e:	f7fe ff01 	bl	8006e64 <Init_3Axis_IMU>

	Reset_Parameters();
 8008062:	f7ff f94f 	bl	8007304 <Reset_Parameters>
	attach_plane = e_LEFT_SAGITAL_DEMO;		// WIDM Attached Plane Selection
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <Init_Imu_Ctrl+0x294>)
 8008068:	2202      	movs	r2, #2
 800806a:	701a      	strb	r2, [r3, #0]
	Set_Init_Parameters(&norm_params, &gait_params, &fuzzy_params, &th_params, &assist_params);
 800806c:	4b28      	ldr	r3, [pc, #160]	; (8008110 <Init_Imu_Ctrl+0x298>)
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <Init_Imu_Ctrl+0x29c>)
 8008072:	4a29      	ldr	r2, [pc, #164]	; (8008118 <Init_Imu_Ctrl+0x2a0>)
 8008074:	4929      	ldr	r1, [pc, #164]	; (800811c <Init_Imu_Ctrl+0x2a4>)
 8008076:	482a      	ldr	r0, [pc, #168]	; (8008120 <Init_Imu_Ctrl+0x2a8>)
 8008078:	f000 f864 	bl	8008144 <Set_Init_Parameters>
	Calculate_Initial_Thigh_Angle(&thigh_angle_params, &norm_params, &acc_gyro_data, attach_plane);
 800807c:	4b23      	ldr	r3, [pc, #140]	; (800810c <Init_Imu_Ctrl+0x294>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	4a0e      	ldr	r2, [pc, #56]	; (80080bc <Init_Imu_Ctrl+0x244>)
 8008082:	4927      	ldr	r1, [pc, #156]	; (8008120 <Init_Imu_Ctrl+0x2a8>)
 8008084:	4827      	ldr	r0, [pc, #156]	; (8008124 <Init_Imu_Ctrl+0x2ac>)
 8008086:	f7ff f9bf 	bl	8007408 <Calculate_Initial_Thigh_Angle>

	/* Callback Allocation */
    if (Start_TIM3() > 0) {
 800808a:	f7ff f907 	bl	800729c <Start_TIM3>
        //TODO: ERROR PROCESS
    }
    ioif_tim3_callback_ptr = Run_Imu_Ctrl;
 800808e:	4b26      	ldr	r3, [pc, #152]	; (8008128 <Init_Imu_Ctrl+0x2b0>)
 8008090:	4a26      	ldr	r2, [pc, #152]	; (800812c <Init_Imu_Ctrl+0x2b4>)
 8008092:	601a      	str	r2, [r3, #0]
}
 8008094:	bf00      	nop
 8008096:	3740      	adds	r7, #64	; 0x40
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	2400d42c 	.word	0x2400d42c
 80080a0:	08007dd5 	.word	0x08007dd5
 80080a4:	08007e25 	.word	0x08007e25
 80080a8:	08007e5d 	.word	0x08007e5d
 80080ac:	08007e49 	.word	0x08007e49
 80080b0:	08007e39 	.word	0x08007e39
 80080b4:	08007e6b 	.word	0x08007e6b
 80080b8:	08007b21 	.word	0x08007b21
 80080bc:	2400d0cc 	.word	0x2400d0cc
 80080c0:	2400d0d0 	.word	0x2400d0d0
 80080c4:	2400d0d4 	.word	0x2400d0d4
 80080c8:	2400d0d8 	.word	0x2400d0d8
 80080cc:	2400d0dc 	.word	0x2400d0dc
 80080d0:	2400d0e0 	.word	0x2400d0e0
 80080d4:	2400d010 	.word	0x2400d010
 80080d8:	2400d014 	.word	0x2400d014
 80080dc:	2400d018 	.word	0x2400d018
 80080e0:	2400d01c 	.word	0x2400d01c
 80080e4:	2400cefc 	.word	0x2400cefc
 80080e8:	240031c4 	.word	0x240031c4
 80080ec:	2400d0c0 	.word	0x2400d0c0
 80080f0:	2400cf78 	.word	0x2400cf78
 80080f4:	2400cf7c 	.word	0x2400cf7c
 80080f8:	08007c29 	.word	0x08007c29
 80080fc:	08007c65 	.word	0x08007c65
 8008100:	08007ca1 	.word	0x08007ca1
 8008104:	08007d1d 	.word	0x08007d1d
 8008108:	2400d3d8 	.word	0x2400d3d8
 800810c:	2400d1e4 	.word	0x2400d1e4
 8008110:	2400cf4c 	.word	0x2400cf4c
 8008114:	240031c8 	.word	0x240031c8
 8008118:	2400cf0c 	.word	0x2400cf0c
 800811c:	2400d0bc 	.word	0x2400d0bc
 8008120:	2400d3f0 	.word	0x2400d3f0
 8008124:	2400d00c 	.word	0x2400d00c
 8008128:	2400cef4 	.word	0x2400cef4
 800812c:	08008131 	.word	0x08008131

08008130 <Run_Imu_Ctrl>:

void Run_Imu_Ctrl(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
//	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

//	uint32_t imu_ctrl_loop_time_cnt_1 = DWT->CYCCNT;

	/*Run Device */
	Run_Task(&imu_ctrl_task);
 8008134:	4802      	ldr	r0, [pc, #8]	; (8008140 <Run_Imu_Ctrl+0x10>)
 8008136:	f001 fcc1 	bl	8009abc <Run_Task>


//	if (imu_ctrl_task_us < 1000) {
//		Set_GPIO_D_State(LED_BOOT_RED_Pin, SET);
//	}
}
 800813a:	bf00      	nop
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	2400d42c 	.word	0x2400d42c

08008144 <Set_Init_Parameters>:
 
*/

/* Set Specific Value */
void Set_Init_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params, Fuzzy_Params* t_fuzzy_params, Threshold_Params* t_th_params, Assist_Params* t_assist_params)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
	t_norm_params->A_deg = 30.0; //30
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4a38      	ldr	r2, [pc, #224]	; (8008238 <Set_Init_Parameters+0xf4>)
 8008156:	62da      	str	r2, [r3, #44]	; 0x2c
	t_norm_params->A_vel = 400.0; //400
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4a38      	ldr	r2, [pc, #224]	; (800823c <Set_Init_Parameters+0xf8>)
 800815c:	631a      	str	r2, [r3, #48]	; 0x30

	t_gait_params->gait_period 	  = 1000;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008164:	801a      	strh	r2, [r3, #0]
	t_gait_params->gait_phase 	  = -100.0;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	4a35      	ldr	r2, [pc, #212]	; (8008240 <Set_Init_Parameters+0xfc>)
 800816a:	605a      	str	r2, [r3, #4]
	t_gait_params->gait_phase_pre = -100.0;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4a34      	ldr	r2, [pc, #208]	; (8008240 <Set_Init_Parameters+0xfc>)
 8008170:	609a      	str	r2, [r3, #8]

	t_fuzzy_params->wl 		= 0.5;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008178:	615a      	str	r2, [r3, #20]
	t_fuzzy_params->wh 		= 10.0;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a31      	ldr	r2, [pc, #196]	; (8008244 <Set_Init_Parameters+0x100>)
 800817e:	619a      	str	r2, [r3, #24]
	t_fuzzy_params->var[0] 	= 8.0;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8008186:	61da      	str	r2, [r3, #28]
	t_fuzzy_params->var[1] 	= 30.0;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a2b      	ldr	r2, [pc, #172]	; (8008238 <Set_Init_Parameters+0xf4>)
 800818c:	621a      	str	r2, [r3, #32]
	t_fuzzy_params->var[2] 	= 5.8;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a2d      	ldr	r2, [pc, #180]	; (8008248 <Set_Init_Parameters+0x104>)
 8008192:	625a      	str	r2, [r3, #36]	; 0x24
	t_fuzzy_params->var[3] 	= 320.0;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a2d      	ldr	r2, [pc, #180]	; (800824c <Set_Init_Parameters+0x108>)
 8008198:	629a      	str	r2, [r3, #40]	; 0x28

	t_th_params->deg_th_start	= 5.0;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	4a2c      	ldr	r2, [pc, #176]	; (8008250 <Set_Init_Parameters+0x10c>)
 800819e:	601a      	str	r2, [r3, #0]
	t_th_params->vel_th_start	= 20.0;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	4a2c      	ldr	r2, [pc, #176]	; (8008254 <Set_Init_Parameters+0x110>)
 80081a4:	605a      	str	r2, [r3, #4]
	t_th_params->deg_th_stop 	= 5.0;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	4a29      	ldr	r2, [pc, #164]	; (8008250 <Set_Init_Parameters+0x10c>)
 80081aa:	609a      	str	r2, [r3, #8]
	t_th_params->vel_th_stop 	= 3.0;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	4a2a      	ldr	r2, [pc, #168]	; (8008258 <Set_Init_Parameters+0x114>)
 80081b0:	60da      	str	r2, [r3, #12]

	t_assist_params->t_P_start	 	 = 35;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2223      	movs	r2, #35	; 0x23
 80081b6:	801a      	strh	r2, [r3, #0]
	t_assist_params->t_D_start 	 = 50;
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	2232      	movs	r2, #50	; 0x32
 80081bc:	805a      	strh	r2, [r3, #2]
	t_assist_params->t_r_P_end 	 = 35;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	2223      	movs	r2, #35	; 0x23
 80081c2:	809a      	strh	r2, [r3, #4]
	t_assist_params->t_c_P_end 	 = 55;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	2237      	movs	r2, #55	; 0x37
 80081c8:	80da      	strh	r2, [r3, #6]
	t_assist_params->t_f_P_end 	 = 60;
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	223c      	movs	r2, #60	; 0x3c
 80081ce:	811a      	strh	r2, [r3, #8]
	t_assist_params->t_r_D_end 	 = 53;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2235      	movs	r2, #53	; 0x35
 80081d4:	815a      	strh	r2, [r3, #10]
	t_assist_params->t_c_D_end 	 = 70;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	2246      	movs	r2, #70	; 0x46
 80081da:	819a      	strh	r2, [r3, #12]
	t_assist_params->t_f_D_end 	 = 80;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	2250      	movs	r2, #80	; 0x50
 80081e0:	81da      	strh	r2, [r3, #14]
	t_assist_params->t_r_P 		 = 100;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2264      	movs	r2, #100	; 0x64
 80081e6:	821a      	strh	r2, [r3, #16]
	t_assist_params->t_c_P 		 = 400;
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80081ee:	825a      	strh	r2, [r3, #18]
	t_assist_params->t_f_P 		 = 100;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	2264      	movs	r2, #100	; 0x64
 80081f4:	829a      	strh	r2, [r3, #20]
	t_assist_params->t_r_D 		 = 100;
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	2264      	movs	r2, #100	; 0x64
 80081fa:	82da      	strh	r2, [r3, #22]
	t_assist_params->t_c_D 		 = 400;
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008202:	831a      	strh	r2, [r3, #24]
	t_assist_params->t_f_D 		 = 100;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	2264      	movs	r2, #100	; 0x64
 8008208:	835a      	strh	r2, [r3, #26]
	t_assist_params->t_r_limit 	 = 20;
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2214      	movs	r2, #20
 800820e:	839a      	strh	r2, [r3, #28]
	t_assist_params->t_f_limit 	 = 20;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	2214      	movs	r2, #20
 8008214:	83da      	strh	r2, [r3, #30]
	t_assist_params->ref_shape 	 = TRAPEZOIDAL;
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2020 	strb.w	r2, [r3, #32]
	t_assist_params->Amplitude_P = 60.0;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	4a0e      	ldr	r2, [pc, #56]	; (800825c <Set_Init_Parameters+0x118>)
 8008222:	635a      	str	r2, [r3, #52]	; 0x34
	t_assist_params->Amplitude_D = 60.0;
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	4a0d      	ldr	r2, [pc, #52]	; (800825c <Set_Init_Parameters+0x118>)
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	41f00000 	.word	0x41f00000
 800823c:	43c80000 	.word	0x43c80000
 8008240:	c2c80000 	.word	0xc2c80000
 8008244:	41200000 	.word	0x41200000
 8008248:	40b9999a 	.word	0x40b9999a
 800824c:	43a00000 	.word	0x43a00000
 8008250:	40a00000 	.word	0x40a00000
 8008254:	41a00000 	.word	0x41a00000
 8008258:	40400000 	.word	0x40400000
 800825c:	42700000 	.word	0x42700000

08008260 <Save_Previous_Value>:
                                                                                             
 
*/

void Save_Previous_Value(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
	t_sensor_params->accX[1] = t_sensor_params->accX[0];
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	605a      	str	r2, [r3, #4]
	t_sensor_params->accY[1] = t_sensor_params->accY[0];
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	60da      	str	r2, [r3, #12]
	t_sensor_params->gyrZ[1] = t_sensor_params->gyrZ[0];
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	62da      	str	r2, [r3, #44]	; 0x2c

	t_thigh_angle_params->vel_raw[1] = t_thigh_angle_params->vel_raw[0];
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	699a      	ldr	r2, [r3, #24]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	61da      	str	r2, [r3, #28]

	t_thigh_angle_params->deg_tvcf[1] = t_thigh_angle_params->deg_tvcf[0];
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	6a1a      	ldr	r2, [r3, #32]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	625a      	str	r2, [r3, #36]	; 0x24

	t_thigh_angle_params->deg_LPF_1st[1] = t_thigh_angle_params->deg_LPF_1st[0];
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	62da      	str	r2, [r3, #44]	; 0x2c
	t_thigh_angle_params->deg_LPF_2nd[1] = t_thigh_angle_params->deg_LPF_2nd[0];
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	635a      	str	r2, [r3, #52]	; 0x34
	t_thigh_angle_params->vel_LPF_1st[1] = t_thigh_angle_params->vel_LPF_1st[0];
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	63da      	str	r2, [r3, #60]	; 0x3c
	t_thigh_angle_params->vel_LPF_2nd[1] = t_thigh_angle_params->vel_LPF_2nd[0];
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	645a      	str	r2, [r3, #68]	; 0x44

	t_gait_params->gait_phase_pre = t_gait_params->gait_phase;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	609a      	str	r2, [r3, #8]
}
 80082bc:	bf00      	nop
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <Calculate_Square_Root_Sum>:
                      |___/              |___/        
 
*/

float Calculate_Square_Root_Sum(float t_x, float t_y)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	ed2d 8b02 	vpush	{d8}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80082d6:	edc7 0a00 	vstr	s1, [r7]
	return sqrt(pow(t_x, 2) + pow(t_y, 2));
 80082da:	edd7 7a01 	vldr	s15, [r7, #4]
 80082de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80082e2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80082e6:	eeb0 0b47 	vmov.f64	d0, d7
 80082ea:	f001 fd35 	bl	8009d58 <pow>
 80082ee:	eeb0 8b40 	vmov.f64	d8, d0
 80082f2:	edd7 7a00 	vldr	s15, [r7]
 80082f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80082fa:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80082fe:	eeb0 0b47 	vmov.f64	d0, d7
 8008302:	f001 fd29 	bl	8009d58 <pow>
 8008306:	eeb0 7b40 	vmov.f64	d7, d0
 800830a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800830e:	eeb0 0b47 	vmov.f64	d0, d7
 8008312:	f002 f989 	bl	800a628 <sqrt>
 8008316:	eeb0 7b40 	vmov.f64	d7, d0
 800831a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800831e:	eeb0 0a67 	vmov.f32	s0, s15
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	ecbd 8b02 	vpop	{d8}
 800832a:	bd80      	pop	{r7, pc}

0800832c <Calculate_Absolute_Value_Float>:

float Calculate_Absolute_Value_Float(float t_value)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	ed87 0a01 	vstr	s0, [r7, #4]
	return fabs(t_value);
 8008336:	edd7 7a01 	vldr	s15, [r7, #4]
 800833a:	eef0 7ae7 	vabs.f32	s15, s15
}
 800833e:	eeb0 0a67 	vmov.f32	s0, s15
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	0000      	movs	r0, r0
	...

08008350 <Calculate_Delta>:
float Calculate_Delta(float t_current, float t_previous)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	ed87 0a01 	vstr	s0, [r7, #4]
 800835a:	edc7 0a00 	vstr	s1, [r7]
	return (t_current - t_previous) / IMU_CONTROL_PERIOD;
 800835e:	ed97 7a01 	vldr	s14, [r7, #4]
 8008362:	edd7 7a00 	vldr	s15, [r7]
 8008366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800836a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800836e:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8008388 <Calculate_Delta+0x38>
 8008372:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008376:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800837a:	eeb0 0a67 	vmov.f32	s0, s15
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	d2f1a9fc 	.word	0xd2f1a9fc
 800838c:	3f50624d 	.word	0x3f50624d

08008390 <Calculate_xbar_Update_mu>:

void Calculate_xbar_Update_mu(float t_var_i, float t_fuzzy_input, float* t_mu)
{	
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	ed87 0a03 	vstr	s0, [r7, #12]
 800839a:	edc7 0a02 	vstr	s1, [r7, #8]
 800839e:	6078      	str	r0, [r7, #4]
	/* t_var_i is measurement value (initially set value in Set_Init_Parameters) */
	float t_xoi = 3 * t_var_i;											// Threshold Value (maybe middle value)
 80083a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80083a4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80083a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083ac:	edc7 7a07 	vstr	s15, [r7, #28]
	float t_si = log(3) / t_var_i;										// Sensor Sensitivity (natural logarithm)
 80083b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80083b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80083b8:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8008428 <Calculate_xbar_Update_mu+0x98>
 80083bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80083c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80083c4:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_xbar = 0.5 * (1 + tanh(t_si * (t_fuzzy_input - t_xoi)));	// Fuzzy Logic Relational Expressions
 80083c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80083cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80083d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80083d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80083e0:	eeb0 0b47 	vmov.f64	d0, d7
 80083e4:	f002 f8c8 	bl	800a578 <tanh>
 80083e8:	eeb0 7b40 	vmov.f64	d7, d0
 80083ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80083f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80083f4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80083f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008400:	edc7 7a05 	vstr	s15, [r7, #20]
	*t_mu *= (1 - t_xbar);	// Update mu for TVCF cutoff frequency(wc)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	ed93 7a00 	vldr	s14, [r3]
 800840a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800840e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008412:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	edc3 7a00 	vstr	s15, [r3]
}
 8008420:	bf00      	nop
 8008422:	3720      	adds	r7, #32
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	7aad030b 	.word	0x7aad030b
 800842c:	3ff193ea 	.word	0x3ff193ea

08008430 <Generate_Fuzzy_Input>:

/* 
*Generate Fuzzy Logic Input (Acc, Jerk, Angular Velocity, Angular Accerleration) 
*/
void Generate_Fuzzy_Input(Sensor_Params* t_sensor_params, Fuzzy_Params* t_fuzzy_params)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
	float t_jerk_x = Calculate_Delta(t_sensor_params->accX[0], t_sensor_params->accX[1]);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	edd3 7a00 	vldr	s15, [r3]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	ed93 7a01 	vldr	s14, [r3, #4]
 8008446:	eef0 0a47 	vmov.f32	s1, s14
 800844a:	eeb0 0a67 	vmov.f32	s0, s15
 800844e:	f7ff ff7f 	bl	8008350 <Calculate_Delta>
 8008452:	ed87 0a05 	vstr	s0, [r7, #20]
	float t_jerk_y = Calculate_Delta(t_sensor_params->accY[0], t_sensor_params->accY[1]);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	edd3 7a02 	vldr	s15, [r3, #8]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	ed93 7a03 	vldr	s14, [r3, #12]
 8008462:	eef0 0a47 	vmov.f32	s1, s14
 8008466:	eeb0 0a67 	vmov.f32	s0, s15
 800846a:	f7ff ff71 	bl	8008350 <Calculate_Delta>
 800846e:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_wdot_z = Calculate_Delta(t_sensor_params->gyrZ[0], t_sensor_params->gyrZ[1]);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800847e:	eef0 0a47 	vmov.f32	s1, s14
 8008482:	eeb0 0a67 	vmov.f32	s0, s15
 8008486:	f7ff ff63 	bl	8008350 <Calculate_Delta>
 800848a:	ed87 0a03 	vstr	s0, [r7, #12]

	// absolute ACC
	t_fuzzy_params->Fuzzy_input[0] = Calculate_Square_Root_Sum(t_sensor_params->accX[0], t_sensor_params->accY[0]);	
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	edd3 7a00 	vldr	s15, [r3]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	ed93 7a02 	vldr	s14, [r3, #8]
 800849a:	eef0 0a47 	vmov.f32	s1, s14
 800849e:	eeb0 0a67 	vmov.f32	s0, s15
 80084a2:	f7ff ff11 	bl	80082c8 <Calculate_Square_Root_Sum>
 80084a6:	eef0 7a40 	vmov.f32	s15, s0
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	edc3 7a00 	vstr	s15, [r3]
	// absolute Jerk
	t_fuzzy_params->Fuzzy_input[1] = Calculate_Square_Root_Sum(t_jerk_x, t_jerk_y);
 80084b0:	edd7 0a04 	vldr	s1, [r7, #16]
 80084b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80084b8:	f7ff ff06 	bl	80082c8 <Calculate_Square_Root_Sum>
 80084bc:	eef0 7a40 	vmov.f32	s15, s0
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	edc3 7a01 	vstr	s15, [r3, #4]
	// absolute Gyr(Angular Velocity)
	t_fuzzy_params->Fuzzy_input[2] = Calculate_Absolute_Value_Float(t_sensor_params->gyrZ[0]);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80084cc:	eeb0 0a67 	vmov.f32	s0, s15
 80084d0:	f7ff ff2c 	bl	800832c <Calculate_Absolute_Value_Float>
 80084d4:	eef0 7a40 	vmov.f32	s15, s0
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	edc3 7a02 	vstr	s15, [r3, #8]
	// absolute Wdot(Angular Acceleration)							
	t_fuzzy_params->Fuzzy_input[3] = Calculate_Absolute_Value_Float(t_wdot_z);											
 80084de:	ed97 0a03 	vldr	s0, [r7, #12]
 80084e2:	f7ff ff23 	bl	800832c <Calculate_Absolute_Value_Float>
 80084e6:	eef0 7a40 	vmov.f32	s15, s0
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80084f0:	bf00      	nop
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <Calculate_Fuzzy_Wc>:

/* 
*Calculate Wc(CutOff Frequency) 
*/
float Calculate_Fuzzy_Wc(Fuzzy_Params* t_fuzzy_params)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	t_fuzzy_params->wc = 0;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f04f 0200 	mov.w	r2, #0
 8008506:	611a      	str	r2, [r3, #16]
	float t_mu = 1;
 8008508:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800850c:	60bb      	str	r3, [r7, #8]

	/* Perform calculations for each fuzzy input (Acc, Jerk, Angular Velocity, Angular Accerleration) */
	for (int i = 0; i < 4; i++) {
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	e019      	b.n	8008548 <Calculate_Fuzzy_Wc+0x50>
		Calculate_xbar_Update_mu(t_fuzzy_params->var[i], t_fuzzy_params->Fuzzy_input[i], &t_mu);
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3306      	adds	r3, #6
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	3304      	adds	r3, #4
 8008520:	edd3 7a00 	vldr	s15, [r3]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	ed93 7a00 	vldr	s14, [r3]
 8008530:	f107 0308 	add.w	r3, r7, #8
 8008534:	4618      	mov	r0, r3
 8008536:	eef0 0a47 	vmov.f32	s1, s14
 800853a:	eeb0 0a67 	vmov.f32	s0, s15
 800853e:	f7ff ff27 	bl	8008390 <Calculate_xbar_Update_mu>
	for (int i = 0; i < 4; i++) {
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3301      	adds	r3, #1
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b03      	cmp	r3, #3
 800854c:	dde2      	ble.n	8008514 <Calculate_Fuzzy_Wc+0x1c>
	}

	t_fuzzy_params->wc = t_mu * (t_fuzzy_params->wh) + (1 - t_mu) * (t_fuzzy_params->wl);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	ed93 7a06 	vldr	s14, [r3, #24]
 8008554:	edd7 7a02 	vldr	s15, [r7, #8]
 8008558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800855c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008564:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	edd3 7a05 	vldr	s15, [r3, #20]
 800856e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	edc3 7a04 	vstr	s15, [r3, #16]

	return t_fuzzy_params->wc;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	ee07 3a90 	vmov	s15, r3
}
 8008584:	eeb0 0a67 	vmov.f32	s0, s15
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <Perform_LPF_on_Acc>:

/* 
*Low pass filtering for deg_acc 
*/
float Perform_LPF_on_Acc(float t_curr_acc, float t_prev_filtered_acc, float t_cutoff_frequency, float t_sampling_Period)
{
 800858e:	b480      	push	{r7}
 8008590:	b087      	sub	sp, #28
 8008592:	af00      	add	r7, sp, #0
 8008594:	ed87 0a03 	vstr	s0, [r7, #12]
 8008598:	edc7 0a02 	vstr	s1, [r7, #8]
 800859c:	ed87 1a01 	vstr	s2, [r7, #4]
 80085a0:	edc7 1a00 	vstr	s3, [r7]
	float filtered_acc = (t_cutoff_frequency * t_sampling_Period * t_curr_acc + t_prev_filtered_acc) / (t_cutoff_frequency * t_sampling_Period + 1);
 80085a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80085a8:	edd7 7a00 	vldr	s15, [r7]
 80085ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80085b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80085bc:	ee77 6a27 	vadd.f32	s13, s14, s15
 80085c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80085c4:	edd7 7a00 	vldr	s15, [r7]
 80085c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085d8:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_acc;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	ee07 3a90 	vmov	s15, r3
}
 80085e2:	eeb0 0a67 	vmov.f32	s0, s15
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <Perform_HPF_on_Gyro>:

/* 
*High pass filtering + Integral for gyr 
*/
float Perform_HPF_on_Gyro(float t_curr_gyro, float t_prev_filtered_gyro, float t_cutoff_frequency, float t_sampling_Period)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80085fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80085fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8008602:	edc7 1a00 	vstr	s3, [r7]
	float filtered_gyro = (t_curr_gyro*t_sampling_Period + t_prev_filtered_gyro) / (t_cutoff_frequency * t_sampling_Period + 1);
 8008606:	ed97 7a03 	vldr	s14, [r7, #12]
 800860a:	edd7 7a00 	vldr	s15, [r7]
 800860e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008612:	edd7 7a02 	vldr	s15, [r7, #8]
 8008616:	ee77 6a27 	vadd.f32	s13, s14, s15
 800861a:	ed97 7a01 	vldr	s14, [r7, #4]
 800861e:	edd7 7a00 	vldr	s15, [r7]
 8008622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800862a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800862e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008632:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_gyro;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	ee07 3a90 	vmov	s15, r3
}
 800863c:	eeb0 0a67 	vmov.f32	s0, s15
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	0000      	movs	r0, r0
 800864c:	0000      	movs	r0, r0
	...

08008650 <Run_TVCF>:

/* 
*Function to apply a Time Variant Complementary Filter (TVCF) to an angle 
*/
void Run_TVCF(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, float t_cutoff_frequency, float t_sampling_Period, AttachPlane t_attach_plane)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08a      	sub	sp, #40	; 0x28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6178      	str	r0, [r7, #20]
 8008658:	6139      	str	r1, [r7, #16]
 800865a:	ed87 0a03 	vstr	s0, [r7, #12]
 800865e:	edc7 0a02 	vstr	s1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	71fb      	strb	r3, [r7, #7]
	/* Calculate the angle using accelerometer measurements and convert it to degrees */
    /* Thigh Angle Degree */
	float t_deg_acc = 0.0;
 8008666:	f04f 0300 	mov.w	r3, #0
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
	float t_deg_acc_filtered_update = 0.0;
 800866c:	f04f 0300 	mov.w	r3, #0
 8008670:	623b      	str	r3, [r7, #32]
	float t_deg_gyr_filtered_update = 0.0;
 8008672:	f04f 0300 	mov.w	r3, #0
 8008676:	61fb      	str	r3, [r7, #28]
	float t_deg_tvcf = 0.0;
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	61bb      	str	r3, [r7, #24]

	if (t_attach_plane == e_LEFT_SAGITAL){
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11e      	bne.n	80086c2 <Run_TVCF+0x72>
		t_deg_acc = atan2((t_sensor_params->accY[0])*(-1), (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(-y/-x) : Left Sagital case
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	edd3 7a02 	vldr	s15, [r3, #8]
 800868a:	eef1 7a67 	vneg.f32	s15, s15
 800868e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	edd3 6a00 	vldr	s13, [r3]
 8008698:	eef1 6a66 	vneg.f32	s13, s13
 800869c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80086a0:	eeb0 1b46 	vmov.f64	d1, d6
 80086a4:	eeb0 0b47 	vmov.f64	d0, d7
 80086a8:	f001 ffbc 	bl	800a624 <atan2>
 80086ac:	eeb0 7b40 	vmov.f64	d7, d0
 80086b0:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80087b0 <Run_TVCF+0x160>
 80086b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80086bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80086c0:	e03e      	b.n	8008740 <Run_TVCF+0xf0>
	}
    /* Right Thigh Angle Degree */
	else if (t_attach_plane == e_RIGHT_SAGITAL){
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d11c      	bne.n	8008702 <Run_TVCF+0xb2>
		t_deg_acc = atan2(t_sensor_params->accY[0], (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(y/-x) : Right Sagital case
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80086ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	edd3 6a00 	vldr	s13, [r3]
 80086d8:	eef1 6a66 	vneg.f32	s13, s13
 80086dc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80086e0:	eeb0 1b46 	vmov.f64	d1, d6
 80086e4:	eeb0 0b47 	vmov.f64	d0, d7
 80086e8:	f001 ff9c 	bl	800a624 <atan2>
 80086ec:	eeb0 7b40 	vmov.f64	d7, d0
 80086f0:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80087b0 <Run_TVCF+0x160>
 80086f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80086fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8008700:	e01e      	b.n	8008740 <Run_TVCF+0xf0>
	}
    /* Left Thigh Angle Degree - DEMO ver */
	else if (t_attach_plane == e_LEFT_SAGITAL_DEMO){
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	2b02      	cmp	r3, #2
 8008706:	d11b      	bne.n	8008740 <Run_TVCF+0xf0>
		t_deg_acc = atan2(t_sensor_params->accX[0], (t_sensor_params->accY[0])*(-1)) * (180 / PI);	// arctan(x/-y) : Left Sagital DEMO ver case
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	edd3 7a00 	vldr	s15, [r3]
 800870e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	edd3 6a02 	vldr	s13, [r3, #8]
 8008718:	eef1 6a66 	vneg.f32	s13, s13
 800871c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8008720:	eeb0 1b46 	vmov.f64	d1, d6
 8008724:	eeb0 0b47 	vmov.f64	d0, d7
 8008728:	f001 ff7c 	bl	800a624 <atan2>
 800872c:	eeb0 7b40 	vmov.f64	d7, d0
 8008730:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80087b0 <Run_TVCF+0x160>
 8008734:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008738:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800873c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}


	/* Apply Low Pass Filter (LPF) on accelerometer angle */
	t_deg_acc_filtered_update = Perform_LPF_on_Acc(t_deg_acc, t_thigh_angle_params->deg_acc_filtered, t_cutoff_frequency, t_sampling_Period);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	edd3 7a03 	vldr	s15, [r3, #12]
 8008746:	edd7 1a02 	vldr	s3, [r7, #8]
 800874a:	ed97 1a03 	vldr	s2, [r7, #12]
 800874e:	eef0 0a67 	vmov.f32	s1, s15
 8008752:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8008756:	f7ff ff1a 	bl	800858e <Perform_LPF_on_Acc>
 800875a:	ed87 0a08 	vstr	s0, [r7, #32]

	/* Apply High Pass Filter (HPF) on gyroscope measurements */
	t_deg_gyr_filtered_update = Perform_HPF_on_Gyro(t_sensor_params->gyrZ[0], t_thigh_angle_params->deg_gyr_filtered, t_cutoff_frequency, t_sampling_Period);
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	ed93 7a04 	vldr	s14, [r3, #16]
 800876a:	edd7 1a02 	vldr	s3, [r7, #8]
 800876e:	ed97 1a03 	vldr	s2, [r7, #12]
 8008772:	eef0 0a47 	vmov.f32	s1, s14
 8008776:	eeb0 0a67 	vmov.f32	s0, s15
 800877a:	f7ff ff39 	bl	80085f0 <Perform_HPF_on_Gyro>
 800877e:	ed87 0a07 	vstr	s0, [r7, #28]

	/* Combine filtered accelerometer and gyroscope measurements */
	t_deg_tvcf = t_deg_acc_filtered_update + t_deg_gyr_filtered_update;
 8008782:	ed97 7a08 	vldr	s14, [r7, #32]
 8008786:	edd7 7a07 	vldr	s15, [r7, #28]
 800878a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800878e:	edc7 7a06 	vstr	s15, [r7, #24]

	t_thigh_angle_params->deg_acc_filtered = t_deg_acc_filtered_update;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	6a3a      	ldr	r2, [r7, #32]
 8008796:	60da      	str	r2, [r3, #12]
	t_thigh_angle_params->deg_gyr_filtered = t_deg_gyr_filtered_update;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	69fa      	ldr	r2, [r7, #28]
 800879c:	611a      	str	r2, [r3, #16]
	t_thigh_angle_params->deg_tvcf_filtered = t_deg_tvcf;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	615a      	str	r2, [r3, #20]

}
 80087a4:	bf00      	nop
 80087a6:	3728      	adds	r7, #40	; 0x28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	f3af 8000 	nop.w
 80087b0:	7e61df46 	.word	0x7e61df46
 80087b4:	404ca5dc 	.word	0x404ca5dc

080087b8 <Get_Max_Float>:

/* 
*Get Max or Min Value between two variables for Normalization 
*/
float Get_Max_Float(float t_x, float t_y)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	ed87 0a01 	vstr	s0, [r7, #4]
 80087c2:	edc7 0a00 	vstr	s1, [r7]
	return (t_x > t_y) ? t_x: t_y;
 80087c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80087ca:	edd7 7a00 	vldr	s15, [r7]
 80087ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d6:	dd01      	ble.n	80087dc <Get_Max_Float+0x24>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	e000      	b.n	80087de <Get_Max_Float+0x26>
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	ee07 3a90 	vmov	s15, r3
}
 80087e2:	eeb0 0a67 	vmov.f32	s0, s15
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <Get_Min_Float>:

float Get_Min_Float(float t_x, float t_y)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80087fa:	edc7 0a00 	vstr	s1, [r7]
	return (t_x < t_y) ? t_x : t_y;
 80087fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8008802:	edd7 7a00 	vldr	s15, [r7]
 8008806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800880a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880e:	d501      	bpl.n	8008814 <Get_Min_Float+0x24>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	e000      	b.n	8008816 <Get_Min_Float+0x26>
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	ee07 3a90 	vmov	s15, r3
}
 800881a:	eeb0 0a67 	vmov.f32	s0, s15
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <Set_First_Half_Gait_Phase_Parameters>:

void Set_First_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
	t_norm_params->deg_o = t_norm_params->sum_deg / t_norm_params->sum_i;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	edd3 6a02 	vldr	s13, [r3, #8]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	8a1b      	ldrh	r3, [r3, #16]
 800883c:	ee07 3a90 	vmov	s15, r3
 8008840:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	edc3 7a00 	vstr	s15, [r3]
	t_norm_params->vel_o = t_norm_params->sum_vel / t_norm_params->sum_i;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	edd3 6a03 	vldr	s13, [r3, #12]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	8a1b      	ldrh	r3, [r3, #16]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	edc3 7a01 	vstr	s15, [r3, #4]

	t_gait_params->gait_period = t_norm_params->sum_i;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	8a1a      	ldrh	r2, [r3, #16]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	801a      	strh	r2, [r3, #0]

	t_norm_params->A_deg = (t_norm_params->deg_max - t_norm_params->deg_min) / 2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	ed93 7a05 	vldr	s14, [r3, #20]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	edd3 7a06 	vldr	s15, [r3, #24]
 800887e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008882:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	t_norm_params->A_vel = (t_norm_params->vel_max - t_norm_params->vel_min) / 2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	ed93 7a07 	vldr	s14, [r3, #28]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	edd3 7a08 	vldr	s15, [r3, #32]
 800889c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80088a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80088a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	t_norm_params->sum_i = 0;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg = 0;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f04f 0200 	mov.w	r2, #0
 80088ba:	609a      	str	r2, [r3, #8]
	t_norm_params->sum_vel = 0;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f04f 0200 	mov.w	r2, #0
 80088c2:	60da      	str	r2, [r3, #12]
	t_norm_params->deg_max = 0;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f04f 0200 	mov.w	r2, #0
 80088ca:	615a      	str	r2, [r3, #20]
	t_norm_params->vel_max = 0;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f04f 0200 	mov.w	r2, #0
 80088d2:	61da      	str	r2, [r3, #28]
	t_norm_params->deg_min = 0;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f04f 0200 	mov.w	r2, #0
 80088da:	619a      	str	r2, [r3, #24]
	t_norm_params->vel_min = 0;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f04f 0200 	mov.w	r2, #0
 80088e2:	621a      	str	r2, [r3, #32]
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <Set_Second_Half_Gait_Phase_Parameters>:

void Set_Second_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Thigh_Angle_Params* t_thigh_angle_params)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
	t_norm_params->sum_i++;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	8a1b      	ldrh	r3, [r3, #16]
 80088fe:	3301      	adds	r3, #1
 8008900:	b29a      	uxth	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg += t_thigh_angle_params->deg_LPF_2nd[0];
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	ed93 7a02 	vldr	s14, [r3, #8]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	edc3 7a02 	vstr	s15, [r3, #8]
	t_norm_params->sum_vel += t_thigh_angle_params->vel_LPF_2nd[0];
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	ed93 7a03 	vldr	s14, [r3, #12]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8008928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	edc3 7a03 	vstr	s15, [r3, #12]
	t_norm_params->deg_max = Get_Max_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_max);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	ed93 7a05 	vldr	s14, [r3, #20]
 800893e:	eef0 0a47 	vmov.f32	s1, s14
 8008942:	eeb0 0a67 	vmov.f32	s0, s15
 8008946:	f7ff ff37 	bl	80087b8 <Get_Max_Float>
 800894a:	eef0 7a40 	vmov.f32	s15, s0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	edc3 7a05 	vstr	s15, [r3, #20]
	t_norm_params->deg_min = Get_Min_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_min);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008960:	eef0 0a47 	vmov.f32	s1, s14
 8008964:	eeb0 0a67 	vmov.f32	s0, s15
 8008968:	f7ff ff42 	bl	80087f0 <Get_Min_Float>
 800896c:	eef0 7a40 	vmov.f32	s15, s0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	edc3 7a06 	vstr	s15, [r3, #24]
	t_norm_params->vel_max = Get_Max_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_max);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	ed93 7a07 	vldr	s14, [r3, #28]
 8008982:	eef0 0a47 	vmov.f32	s1, s14
 8008986:	eeb0 0a67 	vmov.f32	s0, s15
 800898a:	f7ff ff15 	bl	80087b8 <Get_Max_Float>
 800898e:	eef0 7a40 	vmov.f32	s15, s0
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	edc3 7a07 	vstr	s15, [r3, #28]
	t_norm_params->vel_min = Get_Min_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_min);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	ed93 7a08 	vldr	s14, [r3, #32]
 80089a4:	eef0 0a47 	vmov.f32	s1, s14
 80089a8:	eeb0 0a67 	vmov.f32	s0, s15
 80089ac:	f7ff ff20 	bl	80087f0 <Get_Min_Float>
 80089b0:	eef0 7a40 	vmov.f32	s15, s0
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80089ba:	bf00      	nop
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <Prepare_for_Circular_Normalization>:

/* 
*Function to Prepare for Circular Normalization 
*/
void Prepare_for_Circular_Normalization(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	607a      	str	r2, [r7, #4]
	if (t_thigh_angle_params->vel_LPF_2nd[0] < 0 && t_thigh_angle_params->vel_LPF_2nd[1] > 0 
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80089d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089dc:	d521      	bpl.n	8008a22 <Prepare_for_Circular_Normalization+0x60>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80089e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ec:	dd19      	ble.n	8008a22 <Prepare_for_Circular_Normalization+0x60>
		&& t_norm_params->sum_i > (t_gait_params->gait_period)*0.5) {
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	8a1b      	ldrh	r3, [r3, #16]
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008a06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008a0a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008a0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a16:	dd04      	ble.n	8008a22 <Prepare_for_Circular_Normalization+0x60>
		Set_First_Half_Gait_Phase_Parameters(t_norm_params, t_gait_params);
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	68b8      	ldr	r0, [r7, #8]
 8008a1c:	f7ff ff04 	bl	8008828 <Set_First_Half_Gait_Phase_Parameters>
 8008a20:	e004      	b.n	8008a2c <Prepare_for_Circular_Normalization+0x6a>
	}
	else{
		Set_Second_Half_Gait_Phase_Parameters(t_norm_params, t_thigh_angle_params);
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	68b8      	ldr	r0, [r7, #8]
 8008a26:	f7ff ff63 	bl	80088f0 <Set_Second_Half_Gait_Phase_Parameters>
	}
}
 8008a2a:	bf00      	nop
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	0000      	movs	r0, r0
	...

08008a38 <Get_Current_Gait_Phase>:

/* 
*Function to calculate the current phase of the gait (0~100%) 
*/
float Get_Current_Gait_Phase(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
	/* Calculate initial phase using atan function */
	float t_gait_phase = atan((-1) * (t_norm_params->vel_norm) / (t_norm_params->deg_norm));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008a48:	eef1 6a67 	vneg.f32	s13, s15
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8008a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008a5a:	eeb0 0b47 	vmov.f64	d0, d7
 8008a5e:	f001 fc3f 	bl	800a2e0 <atan>
 8008a62:	eeb0 7b40 	vmov.f64	d7, d0
 8008a66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008a6a:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Adjust phase based on the value of normalized degree */
    if (t_norm_params->deg_norm < 0){
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008a74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7c:	d50c      	bpl.n	8008a98 <Get_Current_Gait_Phase+0x60>
        t_gait_phase += PI;
 8008a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008a86:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8008b88 <Get_Current_Gait_Phase+0x150>
 8008a8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008a8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008a92:	edc7 7a03 	vstr	s15, [r7, #12]
 8008a96:	e01b      	b.n	8008ad0 <Get_Current_Gait_Phase+0x98>
    } else if (t_norm_params->deg_norm > 0 && t_norm_params->vel_norm > 0){
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008a9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa6:	dd13      	ble.n	8008ad0 <Get_Current_Gait_Phase+0x98>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab6:	dd0b      	ble.n	8008ad0 <Get_Current_Gait_Phase+0x98>
        t_gait_phase += 2 * PI;
 8008ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008abc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008ac0:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8008b90 <Get_Current_Gait_Phase+0x158>
 8008ac4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008ac8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008acc:	edc7 7a03 	vstr	s15, [r7, #12]
    }

	/* Convert phase from radians to custom scale */
    t_gait_phase = t_gait_phase * 50.0f / PI;
 8008ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8008ad4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008ba0 <Get_Current_Gait_Phase+0x168>
 8008ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008adc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008ae0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8008b88 <Get_Current_Gait_Phase+0x150>
 8008ae4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008ae8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008aec:	edc7 7a03 	vstr	s15, [r7, #12]
    t_gait_phase -= 12.11;
 8008af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8008af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008af8:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8008b98 <Get_Current_Gait_Phase+0x160>
 8008afc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008b00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008b04:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Adjust phase if it falls outside the range 0-100 */
    if (t_gait_phase < 0 && t_gait_phase != -100){
 8008b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b14:	d510      	bpl.n	8008b38 <Get_Current_Gait_Phase+0x100>
 8008b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b1a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8008ba4 <Get_Current_Gait_Phase+0x16c>
 8008b1e:	eef4 7a47 	vcmp.f32	s15, s14
 8008b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b26:	d007      	beq.n	8008b38 <Get_Current_Gait_Phase+0x100>
        t_gait_phase += 100;
 8008b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b2c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008ba8 <Get_Current_Gait_Phase+0x170>
 8008b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b34:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    
    /* Compare phase with the stored gait phase in gaitInfo */
    if (t_gait_phase > 5 && t_gait_phase < 95){
 8008b38:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b3c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8008b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b48:	dd13      	ble.n	8008b72 <Get_Current_Gait_Phase+0x13a>
 8008b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8008b4e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008bac <Get_Current_Gait_Phase+0x174>
 8008b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5a:	d50a      	bpl.n	8008b72 <Get_Current_Gait_Phase+0x13a>
        t_gait_phase = Get_Max_Float(t_gait_phase, t_gait_params->gait_phase);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008b62:	eef0 0a67 	vmov.f32	s1, s15
 8008b66:	ed97 0a03 	vldr	s0, [r7, #12]
 8008b6a:	f7ff fe25 	bl	80087b8 <Get_Max_Float>
 8008b6e:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	return t_gait_phase;	// 0 ~ 100%
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	ee07 3a90 	vmov	s15, r3
}
 8008b78:	eeb0 0a67 	vmov.f32	s0, s15
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	f3af 8000 	nop.w
 8008b88:	fc8b007a 	.word	0xfc8b007a
 8008b8c:	400921fa 	.word	0x400921fa
 8008b90:	fc8b007a 	.word	0xfc8b007a
 8008b94:	401921fa 	.word	0x401921fa
 8008b98:	eb851eb8 	.word	0xeb851eb8
 8008b9c:	40283851 	.word	0x40283851
 8008ba0:	42480000 	.word	0x42480000
 8008ba4:	c2c80000 	.word	0xc2c80000
 8008ba8:	42c80000 	.word	0x42c80000
 8008bac:	42be0000 	.word	0x42be0000

08008bb0 <Set_Assist_Force_Timing_Params>:

/*
*Function to Set timing parameters for Plantar&Dorsi assistance force(rising, continuous, falling time)
*/
void Set_Assist_Force_Timing_Params(Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
	if (t_gait_params->gait_period > 2000){
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008bc2:	d903      	bls.n	8008bcc <Set_Assist_Force_Timing_Params+0x1c>
		t_gait_params->gait_period = 2000;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008bca:	801a      	strh	r2, [r3, #0]
	}
	uint8_t t_r_P = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
	uint8_t t_c_P = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73bb      	strb	r3, [r7, #14]
	uint8_t t_f_P = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	737b      	strb	r3, [r7, #13]
	uint8_t t_r_D = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	733b      	strb	r3, [r7, #12]
	uint8_t t_c_D = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	72fb      	strb	r3, [r7, #11]
	uint8_t t_f_D = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	72bb      	strb	r3, [r7, #10]


	t_r_P = (t_assist_params->t_r_P_end - t_assist_params->t_P_start) * (t_gait_params->gait_period) / 100;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	889b      	ldrh	r3, [r3, #4]
 8008be8:	461a      	mov	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	8812      	ldrh	r2, [r2, #0]
 8008bf4:	fb02 f303 	mul.w	r3, r2, r3
 8008bf8:	4a60      	ldr	r2, [pc, #384]	; (8008d7c <Set_Assist_Force_Timing_Params+0x1cc>)
 8008bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8008bfe:	1152      	asrs	r2, r2, #5
 8008c00:	17db      	asrs	r3, r3, #31
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	73fb      	strb	r3, [r7, #15]
	t_c_P = (t_assist_params->t_c_P_end - t_assist_params->t_r_P_end) * (t_gait_params->gait_period) / 100;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	88db      	ldrh	r3, [r3, #6]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	889b      	ldrh	r3, [r3, #4]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	8812      	ldrh	r2, [r2, #0]
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	4a58      	ldr	r2, [pc, #352]	; (8008d7c <Set_Assist_Force_Timing_Params+0x1cc>)
 8008c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8008c20:	1152      	asrs	r2, r2, #5
 8008c22:	17db      	asrs	r3, r3, #31
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	73bb      	strb	r3, [r7, #14]
	t_f_P = (t_assist_params->t_f_P_end - t_assist_params->t_c_P_end) * (t_gait_params->gait_period) / 100;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	891b      	ldrh	r3, [r3, #8]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	88db      	ldrh	r3, [r3, #6]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	8812      	ldrh	r2, [r2, #0]
 8008c38:	fb02 f303 	mul.w	r3, r2, r3
 8008c3c:	4a4f      	ldr	r2, [pc, #316]	; (8008d7c <Set_Assist_Force_Timing_Params+0x1cc>)
 8008c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8008c42:	1152      	asrs	r2, r2, #5
 8008c44:	17db      	asrs	r3, r3, #31
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	737b      	strb	r3, [r7, #13]

	if (t_r_P < t_assist_params->t_r_limit){
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	8b9b      	ldrh	r3, [r3, #28]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d20b      	bcs.n	8008c6e <Set_Assist_Force_Timing_Params+0xbe>
		t_c_P = t_c_P - t_assist_params->t_r_limit + t_r_P;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	8b9b      	ldrh	r3, [r3, #28]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	7bba      	ldrb	r2, [r7, #14]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	4413      	add	r3, r2
 8008c66:	73bb      	strb	r3, [r7, #14]
		t_r_P = t_assist_params->t_r_limit;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	8b9b      	ldrh	r3, [r3, #28]
 8008c6c:	73fb      	strb	r3, [r7, #15]
	}

	if (t_f_P < t_assist_params->t_f_limit){
 8008c6e:	7b7b      	ldrb	r3, [r7, #13]
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	8bdb      	ldrh	r3, [r3, #30]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d20b      	bcs.n	8008c92 <Set_Assist_Force_Timing_Params+0xe2>
		t_c_P = t_c_P - t_assist_params->t_f_limit + t_f_P;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	8bdb      	ldrh	r3, [r3, #30]
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	7bba      	ldrb	r2, [r7, #14]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	7b7b      	ldrb	r3, [r7, #13]
 8008c88:	4413      	add	r3, r2
 8008c8a:	73bb      	strb	r3, [r7, #14]
		t_f_P = t_assist_params->t_f_limit;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	8bdb      	ldrh	r3, [r3, #30]
 8008c90:	737b      	strb	r3, [r7, #13]
	}


	t_r_D = (t_assist_params->t_r_D_end - t_assist_params->t_D_start) * (t_gait_params->gait_period) / 100;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	895b      	ldrh	r3, [r3, #10]
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	885b      	ldrh	r3, [r3, #2]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	8812      	ldrh	r2, [r2, #0]
 8008ca2:	fb02 f303 	mul.w	r3, r2, r3
 8008ca6:	4a35      	ldr	r2, [pc, #212]	; (8008d7c <Set_Assist_Force_Timing_Params+0x1cc>)
 8008ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8008cac:	1152      	asrs	r2, r2, #5
 8008cae:	17db      	asrs	r3, r3, #31
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	733b      	strb	r3, [r7, #12]
	t_c_D = (t_assist_params->t_c_D_end - t_assist_params->t_r_D_end) * (t_gait_params->gait_period) / 100;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	899b      	ldrh	r3, [r3, #12]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	895b      	ldrh	r3, [r3, #10]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	8812      	ldrh	r2, [r2, #0]
 8008cc4:	fb02 f303 	mul.w	r3, r2, r3
 8008cc8:	4a2c      	ldr	r2, [pc, #176]	; (8008d7c <Set_Assist_Force_Timing_Params+0x1cc>)
 8008cca:	fb82 1203 	smull	r1, r2, r2, r3
 8008cce:	1152      	asrs	r2, r2, #5
 8008cd0:	17db      	asrs	r3, r3, #31
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	72fb      	strb	r3, [r7, #11]
	t_f_D = (t_assist_params->t_f_D_end - t_assist_params->t_c_D_end) * (t_gait_params->gait_period) / 100;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	89db      	ldrh	r3, [r3, #14]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	899b      	ldrh	r3, [r3, #12]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	8812      	ldrh	r2, [r2, #0]
 8008ce6:	fb02 f303 	mul.w	r3, r2, r3
 8008cea:	4a24      	ldr	r2, [pc, #144]	; (8008d7c <Set_Assist_Force_Timing_Params+0x1cc>)
 8008cec:	fb82 1203 	smull	r1, r2, r2, r3
 8008cf0:	1152      	asrs	r2, r2, #5
 8008cf2:	17db      	asrs	r3, r3, #31
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	72bb      	strb	r3, [r7, #10]

	if (t_r_D < t_assist_params->t_r_limit){
 8008cf8:	7b3b      	ldrb	r3, [r7, #12]
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	8b9b      	ldrh	r3, [r3, #28]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d20b      	bcs.n	8008d1c <Set_Assist_Force_Timing_Params+0x16c>
		t_c_D = t_c_D - t_assist_params->t_r_limit + t_r_D;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	8b9b      	ldrh	r3, [r3, #28]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	7afa      	ldrb	r2, [r7, #11]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	7b3b      	ldrb	r3, [r7, #12]
 8008d12:	4413      	add	r3, r2
 8008d14:	72fb      	strb	r3, [r7, #11]
		t_r_D = t_assist_params->t_r_limit;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	8b9b      	ldrh	r3, [r3, #28]
 8008d1a:	733b      	strb	r3, [r7, #12]
	}

	if (t_f_D < t_assist_params->t_f_limit){
 8008d1c:	7abb      	ldrb	r3, [r7, #10]
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	8bdb      	ldrh	r3, [r3, #30]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d20b      	bcs.n	8008d40 <Set_Assist_Force_Timing_Params+0x190>
		t_c_D = t_c_D - t_assist_params->t_f_limit + t_f_D;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	8bdb      	ldrh	r3, [r3, #30]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	7afa      	ldrb	r2, [r7, #11]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	7abb      	ldrb	r3, [r7, #10]
 8008d36:	4413      	add	r3, r2
 8008d38:	72fb      	strb	r3, [r7, #11]
		t_f_D = t_assist_params->t_f_limit;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	8bdb      	ldrh	r3, [r3, #30]
 8008d3e:	72bb      	strb	r3, [r7, #10]
	}
	if (t_c_D < 0){
		t_c_D = 0;
	}

	t_assist_params->t_r_P = t_r_P;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	821a      	strh	r2, [r3, #16]
	t_assist_params->t_c_P = t_c_P;
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	825a      	strh	r2, [r3, #18]
	t_assist_params->t_f_P = t_f_P;
 8008d50:	7b7b      	ldrb	r3, [r7, #13]
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	829a      	strh	r2, [r3, #20]

	t_assist_params->t_r_D = t_r_D;
 8008d58:	7b3b      	ldrb	r3, [r7, #12]
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	82da      	strh	r2, [r3, #22]
	t_assist_params->t_c_D = t_c_D;
 8008d60:	7afb      	ldrb	r3, [r7, #11]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	831a      	strh	r2, [r3, #24]
	t_assist_params->t_f_D = t_f_D;
 8008d68:	7abb      	ldrb	r3, [r7, #10]
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	835a      	strh	r2, [r3, #26]
}
 8008d70:	bf00      	nop
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	51eb851f 	.word	0x51eb851f

08008d80 <Update_Assist_Params>:

/* */
void Update_Assist_Params(Assist_Params* t_assist_params, float t_new_tension_ref, AssistType t_assist_type)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	ed87 0a02 	vstr	s0, [r7, #8]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	71fb      	strb	r3, [r7, #7]
	if (t_assist_type == e_PLANTAR){
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d109      	bne.n	8008daa <Update_Assist_Params+0x2a>
        (t_assist_params->phase_loop_time_P) += 1;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	84da      	strh	r2, [r3, #38]	; 0x26
        t_assist_params->Plantar_ref = t_new_tension_ref;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	62da      	str	r2, [r3, #44]	; 0x2c
    } else if (t_assist_type == e_DORSI){
        (t_assist_params->phase_loop_time_D) += 1;
        t_assist_params->Dorsi_ref = t_new_tension_ref;
    }
}
 8008da8:	e00b      	b.n	8008dc2 <Update_Assist_Params+0x42>
    } else if (t_assist_type == e_DORSI){
 8008daa:	79fb      	ldrb	r3, [r7, #7]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d108      	bne.n	8008dc2 <Update_Assist_Params+0x42>
        (t_assist_params->phase_loop_time_D) += 1;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008db4:	3301      	adds	r3, #1
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	851a      	strh	r2, [r3, #40]	; 0x28
        t_assist_params->Dorsi_ref = t_new_tension_ref;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <Transfer_Phase_State>:

void Transfer_Phase_State(Assist_Params* t_assist_params, AssistType t_pd_sel)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
	if (t_pd_sel == e_PLANTAR){
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d132      	bne.n	8008e46 <Transfer_Phase_State+0x78>
		switch (t_assist_params->phase_state_P)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d022      	beq.n	8008e30 <Transfer_Phase_State+0x62>
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	dc61      	bgt.n	8008eb2 <Transfer_Phase_State+0xe4>
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d002      	beq.n	8008df8 <Transfer_Phase_State+0x2a>
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d00e      	beq.n	8008e14 <Transfer_Phase_State+0x46>
				if (t_assist_params->phase_loop_time_P == t_assist_params->t_f_P){
					t_assist_params->phase_state_P = e_END;
				}
				break;
			default:
				break;
 8008df6:	e05c      	b.n	8008eb2 <Transfer_Phase_State+0xe4>
				if (t_assist_params->phase_loop_time_P == t_assist_params->t_r_P){
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	8a1b      	ldrh	r3, [r3, #16]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d158      	bne.n	8008eb6 <Transfer_Phase_State+0xe8>
					t_assist_params->phase_state_P = e_CONTINUOUS;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					t_assist_params->phase_loop_time_P = 0;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	84da      	strh	r2, [r3, #38]	; 0x26
				break;
 8008e12:	e050      	b.n	8008eb6 <Transfer_Phase_State+0xe8>
				if (t_assist_params->phase_loop_time_P == t_assist_params->t_c_P){
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	8a5b      	ldrh	r3, [r3, #18]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d14c      	bne.n	8008eba <Transfer_Phase_State+0xec>
					t_assist_params->phase_state_P = e_FALLING;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2203      	movs	r2, #3
 8008e24:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					t_assist_params->phase_loop_time_P = 0;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	84da      	strh	r2, [r3, #38]	; 0x26
				break;
 8008e2e:	e044      	b.n	8008eba <Transfer_Phase_State+0xec>
				if (t_assist_params->phase_loop_time_P == t_assist_params->t_f_P){
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	8a9b      	ldrh	r3, [r3, #20]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d140      	bne.n	8008ebe <Transfer_Phase_State+0xf0>
					t_assist_params->phase_state_P = e_END;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2204      	movs	r2, #4
 8008e40:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				break;
 8008e44:	e03b      	b.n	8008ebe <Transfer_Phase_State+0xf0>
		}
	}

	else if (t_pd_sel == e_DORSI){
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d13a      	bne.n	8008ec2 <Transfer_Phase_State+0xf4>
		switch (t_assist_params->phase_state_D)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d022      	beq.n	8008e9c <Transfer_Phase_State+0xce>
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	dc35      	bgt.n	8008ec6 <Transfer_Phase_State+0xf8>
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d002      	beq.n	8008e64 <Transfer_Phase_State+0x96>
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d00e      	beq.n	8008e80 <Transfer_Phase_State+0xb2>
				if (t_assist_params->phase_loop_time_D == t_assist_params->t_f_D){
					t_assist_params->phase_state_D = e_END;
				}
				break;
			default:
				break;
 8008e62:	e030      	b.n	8008ec6 <Transfer_Phase_State+0xf8>
				if (t_assist_params->phase_loop_time_D == t_assist_params->t_r_D){
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	8adb      	ldrh	r3, [r3, #22]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d12c      	bne.n	8008eca <Transfer_Phase_State+0xfc>
					t_assist_params->phase_state_D = e_CONTINUOUS;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					t_assist_params->phase_loop_time_D = 0;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	851a      	strh	r2, [r3, #40]	; 0x28
				break;
 8008e7e:	e024      	b.n	8008eca <Transfer_Phase_State+0xfc>
				if (t_assist_params->phase_loop_time_D == t_assist_params->t_c_D){
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8b1b      	ldrh	r3, [r3, #24]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d120      	bne.n	8008ece <Transfer_Phase_State+0x100>
					t_assist_params->phase_state_D = e_FALLING;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2203      	movs	r2, #3
 8008e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					t_assist_params->phase_loop_time_D = 0;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	851a      	strh	r2, [r3, #40]	; 0x28
				break;
 8008e9a:	e018      	b.n	8008ece <Transfer_Phase_State+0x100>
				if (t_assist_params->phase_loop_time_D == t_assist_params->t_f_D){
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	8b5b      	ldrh	r3, [r3, #26]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d114      	bne.n	8008ed2 <Transfer_Phase_State+0x104>
					t_assist_params->phase_state_D = e_END;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2204      	movs	r2, #4
 8008eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				break;
 8008eb0:	e00f      	b.n	8008ed2 <Transfer_Phase_State+0x104>
				break;
 8008eb2:	bf00      	nop
 8008eb4:	e00e      	b.n	8008ed4 <Transfer_Phase_State+0x106>
				break;
 8008eb6:	bf00      	nop
 8008eb8:	e00c      	b.n	8008ed4 <Transfer_Phase_State+0x106>
				break;
 8008eba:	bf00      	nop
 8008ebc:	e00a      	b.n	8008ed4 <Transfer_Phase_State+0x106>
				break;
 8008ebe:	bf00      	nop
 8008ec0:	e008      	b.n	8008ed4 <Transfer_Phase_State+0x106>
		}
	}
 8008ec2:	bf00      	nop
 8008ec4:	e006      	b.n	8008ed4 <Transfer_Phase_State+0x106>
				break;
 8008ec6:	bf00      	nop
 8008ec8:	e004      	b.n	8008ed4 <Transfer_Phase_State+0x106>
				break;
 8008eca:	bf00      	nop
 8008ecc:	e002      	b.n	8008ed4 <Transfer_Phase_State+0x106>
				break;
 8008ece:	bf00      	nop
 8008ed0:	e000      	b.n	8008ed4 <Transfer_Phase_State+0x106>
				break;
 8008ed2:	bf00      	nop
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <Update_Assist_Force>:



void Update_Assist_Force(Assist_Params* t_assist_params, AssistType t_pd_sel)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	ed2d 8b02 	vpush	{d8}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]

	if (t_pd_sel == e_PLANTAR){
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f040 80f0 	bne.w	80090d8 <Update_Assist_Force+0x1f8>

		float new_tension_P_ref = 0.0;
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	60bb      	str	r3, [r7, #8]

	    if (t_assist_params->trigger_P == ASSIST_OFF){
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d102      	bne.n	8008f0e <Update_Assist_Force+0x2e>
	        t_assist_params->Plantar_ref = PLANTAR_REF_OFFSET;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4abf      	ldr	r2, [pc, #764]	; (8009208 <Update_Assist_Force+0x328>)
 8008f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	    }

	    if (t_assist_params->ref_shape == TRAPEZOIDAL){
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f040 81d7 	bne.w	80092c8 <Update_Assist_Force+0x3e8>
	        if (t_assist_params->manual_time_set_P == 1){
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d109      	bne.n	8008f38 <Update_Assist_Force+0x58>
	            t_assist_params->t_r_P = 50;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2232      	movs	r2, #50	; 0x32
 8008f28:	821a      	strh	r2, [r3, #16]
	            t_assist_params->t_c_P = 1000;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f30:	825a      	strh	r2, [r3, #18]
	            t_assist_params->t_f_P = 50;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2232      	movs	r2, #50	; 0x32
 8008f36:	829a      	strh	r2, [r3, #20]
	        }

	        if (t_assist_params->phase_state_P == e_STANDBY && t_assist_params->trigger_P == ASSIST_ON){
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10b      	bne.n	8008f5a <Update_Assist_Force+0x7a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d106      	bne.n	8008f5a <Update_Assist_Force+0x7a>
	            t_assist_params->phase_state_P = e_RISING;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	            t_assist_params->phase_loop_time_P = 0;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	84da      	strh	r2, [r3, #38]	; 0x26
	        }

	        if (t_assist_params->phase_state_P == e_RISING && t_assist_params->phase_loop_time_P < t_assist_params->t_r_P){
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d13f      	bne.n	8008fe4 <Update_Assist_Force+0x104>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	8a1b      	ldrh	r3, [r3, #16]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d239      	bcs.n	8008fe4 <Update_Assist_Force+0x104>
				new_tension_P_ref = PLANTAR_REF_OFFSET + (t_assist_params->Amplitude_P/2)*(1 + sin((((t_assist_params->phase_loop_time_P*1.0)/(t_assist_params->t_r_P*1.0)) - 0.5)*PI));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8008f76:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008f7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f7e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f86:	ee07 3a90 	vmov	s15, r3
 8008f8a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	8a1b      	ldrh	r3, [r3, #16]
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008f9a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008f9e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008fa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008fa6:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8009200 <Update_Assist_Force+0x320>
 8008faa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fae:	eeb0 0b47 	vmov.f64	d0, d7
 8008fb2:	f001 fa99 	bl	800a4e8 <sin>
 8008fb6:	eeb0 7b40 	vmov.f64	d7, d0
 8008fba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008fbe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008fc2:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008fc6:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8008fca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008fce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008fd2:	edc7 7a02 	vstr	s15, [r7, #8]
	            Update_Assist_Params(t_assist_params, new_tension_P_ref, e_PLANTAR);
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	ed97 0a02 	vldr	s0, [r7, #8]
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff fecf 	bl	8008d80 <Update_Assist_Params>
 8008fe2:	e073      	b.n	80090cc <Update_Assist_Force+0x1ec>
	        }
	        else if (t_assist_params->phase_state_P == e_CONTINUOUS && t_assist_params->phase_loop_time_P < t_assist_params->t_c_P){
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d115      	bne.n	800901a <Update_Assist_Force+0x13a>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	8a5b      	ldrh	r3, [r3, #18]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d20f      	bcs.n	800901a <Update_Assist_Force+0x13a>
				new_tension_P_ref = PLANTAR_REF_OFFSET + t_assist_params->Amplitude_P;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009000:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8009004:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009008:	edc7 7a02 	vstr	s15, [r7, #8]
	            Update_Assist_Params(t_assist_params, new_tension_P_ref, e_PLANTAR);
 800900c:	2100      	movs	r1, #0
 800900e:	ed97 0a02 	vldr	s0, [r7, #8]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7ff feb4 	bl	8008d80 <Update_Assist_Params>
 8009018:	e058      	b.n	80090cc <Update_Assist_Force+0x1ec>
	        }
	        else if (t_assist_params->phase_state_P == e_FALLING && t_assist_params->phase_loop_time_P < t_assist_params->t_f_P){
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009020:	2b03      	cmp	r3, #3
 8009022:	d13f      	bne.n	80090a4 <Update_Assist_Force+0x1c4>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	8a9b      	ldrh	r3, [r3, #20]
 800902c:	429a      	cmp	r2, r3
 800902e:	d239      	bcs.n	80090a4 <Update_Assist_Force+0x1c4>
				new_tension_P_ref = PLANTAR_REF_OFFSET + (t_assist_params->Amplitude_P/2)*(1 - sin((((t_assist_params->phase_loop_time_P*1.0)/(t_assist_params->t_f_P*1.0)) - 0.5)*PI));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8009036:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800903a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800903e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	8a9b      	ldrh	r3, [r3, #20]
 8009052:	ee07 3a90 	vmov	s15, r3
 8009056:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800905a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800905e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009062:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009066:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009200 <Update_Assist_Force+0x320>
 800906a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800906e:	eeb0 0b47 	vmov.f64	d0, d7
 8009072:	f001 fa39 	bl	800a4e8 <sin>
 8009076:	eeb0 7b40 	vmov.f64	d7, d0
 800907a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800907e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009082:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009086:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800908a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800908e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009092:	edc7 7a02 	vstr	s15, [r7, #8]
	            Update_Assist_Params(t_assist_params, new_tension_P_ref, e_PLANTAR);
 8009096:	2100      	movs	r1, #0
 8009098:	ed97 0a02 	vldr	s0, [r7, #8]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff fe6f 	bl	8008d80 <Update_Assist_Params>
 80090a2:	e013      	b.n	80090cc <Update_Assist_Force+0x1ec>
	        }
	        else if (t_assist_params->phase_state_P == e_END){
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d10e      	bne.n	80090cc <Update_Assist_Force+0x1ec>
	            t_assist_params->Plantar_ref = PLANTAR_REF_OFFSET;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a55      	ldr	r2, [pc, #340]	; (8009208 <Update_Assist_Force+0x328>)
 80090b2:	62da      	str	r2, [r3, #44]	; 0x2c
	            t_assist_params->phase_state_P = e_STANDBY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	            t_assist_params->trigger_P = ASSIST_OFF;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	            t_assist_params->manual_time_set_P = 0;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	        }

	        Transfer_Phase_State(t_assist_params, t_pd_sel);
 80090cc:	78fb      	ldrb	r3, [r7, #3]
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fe7c 	bl	8008dce <Transfer_Phase_State>
	        }

	        Transfer_Phase_State(t_assist_params, t_pd_sel);
	    }
	}
}
 80090d6:	e0f7      	b.n	80092c8 <Update_Assist_Force+0x3e8>
	else if (t_pd_sel == e_DORSI){
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	f040 80f4 	bne.w	80092c8 <Update_Assist_Force+0x3e8>
	    if (t_assist_params->trigger_D == ASSIST_OFF){
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <Update_Assist_Force+0x210>
	        t_assist_params->Dorsi_ref = DORSI_REF_OFFSET;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a46      	ldr	r2, [pc, #280]	; (8009208 <Update_Assist_Force+0x328>)
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30
	    if (t_assist_params->ref_shape == TRAPEZOIDAL){
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f040 80e6 	bne.w	80092c8 <Update_Assist_Force+0x3e8>
	        if (t_assist_params->manual_time_set_D == 1){
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009102:	2b01      	cmp	r3, #1
 8009104:	d109      	bne.n	800911a <Update_Assist_Force+0x23a>
	            t_assist_params->t_r_D = 50;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2232      	movs	r2, #50	; 0x32
 800910a:	82da      	strh	r2, [r3, #22]
	            t_assist_params->t_c_D = 1000;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009112:	831a      	strh	r2, [r3, #24]
	            t_assist_params->t_f_D = 50;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2232      	movs	r2, #50	; 0x32
 8009118:	835a      	strh	r2, [r3, #26]
	        if (t_assist_params->phase_state_D == e_STANDBY && t_assist_params->trigger_D == ASSIST_ON){
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10b      	bne.n	800913c <Update_Assist_Force+0x25c>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800912a:	2b01      	cmp	r3, #1
 800912c:	d106      	bne.n	800913c <Update_Assist_Force+0x25c>
	            t_assist_params->phase_state_D = e_RISING;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	            t_assist_params->phase_loop_time_D = 0;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	851a      	strh	r2, [r3, #40]	; 0x28
	        if (t_assist_params->phase_state_D == e_RISING && t_assist_params->phase_loop_time_D < t_assist_params->t_r_D){
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009142:	2b01      	cmp	r3, #1
 8009144:	d13f      	bne.n	80091c6 <Update_Assist_Force+0x2e6>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	8adb      	ldrh	r3, [r3, #22]
 800914e:	429a      	cmp	r2, r3
 8009150:	d239      	bcs.n	80091c6 <Update_Assist_Force+0x2e6>
				new_tension_D_ref = DORSI_REF_OFFSET + (t_assist_params->Amplitude_D/2)*(1 + sin((((t_assist_params->phase_loop_time_D*1.0)/(t_assist_params->t_r_D*1.0)) - 0.5)*PI));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009158:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800915c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009160:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009168:	ee07 3a90 	vmov	s15, r3
 800916c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	8adb      	ldrh	r3, [r3, #22]
 8009174:	ee07 3a90 	vmov	s15, r3
 8009178:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800917c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009180:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009184:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009188:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8009200 <Update_Assist_Force+0x320>
 800918c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009190:	eeb0 0b47 	vmov.f64	d0, d7
 8009194:	f001 f9a8 	bl	800a4e8 <sin>
 8009198:	eeb0 7b40 	vmov.f64	d7, d0
 800919c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80091a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80091a4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80091a8:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 80091ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80091b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80091b4:	edc7 7a03 	vstr	s15, [r7, #12]
	            Update_Assist_Params(t_assist_params, new_tension_D_ref, e_DORSI);
 80091b8:	2101      	movs	r1, #1
 80091ba:	ed97 0a03 	vldr	s0, [r7, #12]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7ff fdde 	bl	8008d80 <Update_Assist_Params>
 80091c4:	e07b      	b.n	80092be <Update_Assist_Force+0x3de>
	        else if (t_assist_params->phase_state_D == e_CONTINUOUS && t_assist_params->phase_loop_time_D < t_assist_params->t_c_D){
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d11d      	bne.n	800920c <Update_Assist_Force+0x32c>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8b1b      	ldrh	r3, [r3, #24]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d217      	bcs.n	800920c <Update_Assist_Force+0x32c>
				new_tension_D_ref = DORSI_REF_OFFSET + t_assist_params->Amplitude_D;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80091e2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80091e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091ea:	edc7 7a03 	vstr	s15, [r7, #12]
	            Update_Assist_Params(t_assist_params, new_tension_D_ref, e_DORSI);
 80091ee:	2101      	movs	r1, #1
 80091f0:	ed97 0a03 	vldr	s0, [r7, #12]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff fdc3 	bl	8008d80 <Update_Assist_Params>
 80091fa:	e060      	b.n	80092be <Update_Assist_Force+0x3de>
 80091fc:	f3af 8000 	nop.w
 8009200:	fc8b007a 	.word	0xfc8b007a
 8009204:	400921fa 	.word	0x400921fa
 8009208:	40a00000 	.word	0x40a00000
	        else if (t_assist_params->phase_state_D == e_FALLING && t_assist_params->phase_loop_time_D < t_assist_params->t_f_D){
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009212:	2b03      	cmp	r3, #3
 8009214:	d13f      	bne.n	8009296 <Update_Assist_Force+0x3b6>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	8b5b      	ldrh	r3, [r3, #26]
 800921e:	429a      	cmp	r2, r3
 8009220:	d239      	bcs.n	8009296 <Update_Assist_Force+0x3b6>
				new_tension_D_ref = DORSI_REF_OFFSET + (t_assist_params->Amplitude_D/2)*(1 - sin((((t_assist_params->phase_loop_time_D*1.0)/(t_assist_params->t_f_D*1.0)) - 0.5)*PI));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009228:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800922c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009230:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	8b5b      	ldrh	r3, [r3, #26]
 8009244:	ee07 3a90 	vmov	s15, r3
 8009248:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800924c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009250:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009254:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009258:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80092d8 <Update_Assist_Force+0x3f8>
 800925c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009260:	eeb0 0b47 	vmov.f64	d0, d7
 8009264:	f001 f940 	bl	800a4e8 <sin>
 8009268:	eeb0 7b40 	vmov.f64	d7, d0
 800926c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009270:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009274:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009278:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800927c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009280:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009284:	edc7 7a03 	vstr	s15, [r7, #12]
	            Update_Assist_Params(t_assist_params, new_tension_D_ref, e_DORSI);
 8009288:	2101      	movs	r1, #1
 800928a:	ed97 0a03 	vldr	s0, [r7, #12]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7ff fd76 	bl	8008d80 <Update_Assist_Params>
 8009294:	e013      	b.n	80092be <Update_Assist_Force+0x3de>
	        else if (t_assist_params->phase_state_D == e_END){
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800929c:	2b04      	cmp	r3, #4
 800929e:	d10e      	bne.n	80092be <Update_Assist_Force+0x3de>
	            t_assist_params->Dorsi_ref = DORSI_REF_OFFSET;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a0f      	ldr	r2, [pc, #60]	; (80092e0 <Update_Assist_Force+0x400>)
 80092a4:	631a      	str	r2, [r3, #48]	; 0x30
	            t_assist_params->phase_state_D = e_STANDBY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	            t_assist_params->trigger_D = ASSIST_OFF;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	            t_assist_params->manual_time_set_D = 0;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	        Transfer_Phase_State(t_assist_params, t_pd_sel);
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7ff fd83 	bl	8008dce <Transfer_Phase_State>
}
 80092c8:	bf00      	nop
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	ecbd 8b02 	vpop	{d8}
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	f3af 8000 	nop.w
 80092d8:	fc8b007a 	.word	0xfc8b007a
 80092dc:	400921fa 	.word	0x400921fa
 80092e0:	40a00000 	.word	0x40a00000

080092e4 <Get_Msg_Data_Type_Info>:
 */

#include "msg_data_object.h"

MsgDataTypeInfoStruct Get_Msg_Data_Type_Info(MsgDataTypeEnum t_type)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
	MsgDataTypeInfoStruct t_res;

    switch (t_type) {
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	2b09      	cmp	r3, #9
 80092f4:	d848      	bhi.n	8009388 <Get_Msg_Data_Type_Info+0xa4>
 80092f6:	a201      	add	r2, pc, #4	; (adr r2, 80092fc <Get_Msg_Data_Type_Info+0x18>)
 80092f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fc:	08009325 	.word	0x08009325
 8009300:	0800932f 	.word	0x0800932f
 8009304:	08009339 	.word	0x08009339
 8009308:	08009343 	.word	0x08009343
 800930c:	0800934d 	.word	0x0800934d
 8009310:	08009357 	.word	0x08009357
 8009314:	08009361 	.word	0x08009361
 8009318:	0800936b 	.word	0x0800936b
 800931c:	08009375 	.word	0x08009375
 8009320:	0800937f 	.word	0x0800937f
    case e_Char   : t_res.name = "char"   ; t_res.size = sizeof(char);     break;
 8009324:	4b20      	ldr	r3, [pc, #128]	; (80093a8 <Get_Msg_Data_Type_Info+0xc4>)
 8009326:	60bb      	str	r3, [r7, #8]
 8009328:	2301      	movs	r3, #1
 800932a:	733b      	strb	r3, [r7, #12]
 800932c:	e02d      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt8  : t_res.name = "uint8"  ; t_res.size = sizeof(uint8_t);  break;
 800932e:	4b1f      	ldr	r3, [pc, #124]	; (80093ac <Get_Msg_Data_Type_Info+0xc8>)
 8009330:	60bb      	str	r3, [r7, #8]
 8009332:	2301      	movs	r3, #1
 8009334:	733b      	strb	r3, [r7, #12]
 8009336:	e028      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt16 : t_res.name = "uint16" ; t_res.size = sizeof(uint16_t); break;
 8009338:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <Get_Msg_Data_Type_Info+0xcc>)
 800933a:	60bb      	str	r3, [r7, #8]
 800933c:	2302      	movs	r3, #2
 800933e:	733b      	strb	r3, [r7, #12]
 8009340:	e023      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt32 : t_res.name = "uint32" ; t_res.size = sizeof(uint32_t); break;
 8009342:	4b1c      	ldr	r3, [pc, #112]	; (80093b4 <Get_Msg_Data_Type_Info+0xd0>)
 8009344:	60bb      	str	r3, [r7, #8]
 8009346:	2304      	movs	r3, #4
 8009348:	733b      	strb	r3, [r7, #12]
 800934a:	e01e      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    case e_Int8   : t_res.name = "int8"   ; t_res.size = sizeof(int8_t);   break;
 800934c:	4b1a      	ldr	r3, [pc, #104]	; (80093b8 <Get_Msg_Data_Type_Info+0xd4>)
 800934e:	60bb      	str	r3, [r7, #8]
 8009350:	2301      	movs	r3, #1
 8009352:	733b      	strb	r3, [r7, #12]
 8009354:	e019      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    case e_Int16  : t_res.name = "int16"  ; t_res.size = sizeof(int16_t);  break;
 8009356:	4b19      	ldr	r3, [pc, #100]	; (80093bc <Get_Msg_Data_Type_Info+0xd8>)
 8009358:	60bb      	str	r3, [r7, #8]
 800935a:	2302      	movs	r3, #2
 800935c:	733b      	strb	r3, [r7, #12]
 800935e:	e014      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    case e_Int32  : t_res.name = "int32"  ; t_res.size = sizeof(int32_t);  break;
 8009360:	4b17      	ldr	r3, [pc, #92]	; (80093c0 <Get_Msg_Data_Type_Info+0xdc>)
 8009362:	60bb      	str	r3, [r7, #8]
 8009364:	2304      	movs	r3, #4
 8009366:	733b      	strb	r3, [r7, #12]
 8009368:	e00f      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    case e_Float32: t_res.name = "float32"; t_res.size = sizeof(float);    break;
 800936a:	4b16      	ldr	r3, [pc, #88]	; (80093c4 <Get_Msg_Data_Type_Info+0xe0>)
 800936c:	60bb      	str	r3, [r7, #8]
 800936e:	2304      	movs	r3, #4
 8009370:	733b      	strb	r3, [r7, #12]
 8009372:	e00a      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    case e_Float64: t_res.name = "float64"; t_res.size = sizeof(double);   break;
 8009374:	4b14      	ldr	r3, [pc, #80]	; (80093c8 <Get_Msg_Data_Type_Info+0xe4>)
 8009376:	60bb      	str	r3, [r7, #8]
 8009378:	2308      	movs	r3, #8
 800937a:	733b      	strb	r3, [r7, #12]
 800937c:	e005      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    case e_String10: t_res.name = "string10"; t_res.size = 32*sizeof(char);   break;
 800937e:	4b13      	ldr	r3, [pc, #76]	; (80093cc <Get_Msg_Data_Type_Info+0xe8>)
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	2320      	movs	r3, #32
 8009384:	733b      	strb	r3, [r7, #12]
 8009386:	e000      	b.n	800938a <Get_Msg_Data_Type_Info+0xa6>
    default: break;
 8009388:	bf00      	nop
    }
    return t_res;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	461a      	mov	r2, r3
 800938e:	f107 0308 	add.w	r3, r7, #8
 8009392:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009396:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	0800b76c 	.word	0x0800b76c
 80093ac:	0800b774 	.word	0x0800b774
 80093b0:	0800b77c 	.word	0x0800b77c
 80093b4:	0800b784 	.word	0x0800b784
 80093b8:	0800b78c 	.word	0x0800b78c
 80093bc:	0800b794 	.word	0x0800b794
 80093c0:	0800b79c 	.word	0x0800b79c
 80093c4:	0800b7a4 	.word	0x0800b7a4
 80093c8:	0800b7ac 	.word	0x0800b7ac
 80093cc:	0800b7b4 	.word	0x0800b7b4

080093d0 <Create_DOD>:
                                |__/                                                |__/ 
*/

// Create Data Object & Dictionary
void Create_DOD(uint8_t t_dod_id)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	4603      	mov	r3, r0
 80093d8:	71fb      	strb	r3, [r7, #7]
	msg_dods[t_dod_id].id = t_dod_id;
 80093da:	79fb      	ldrb	r3, [r7, #7]
 80093dc:	4a07      	ldr	r2, [pc, #28]	; (80093fc <Create_DOD+0x2c>)
 80093de:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 80093e2:	fb01 f303 	mul.w	r3, r1, r3
 80093e6:	4413      	add	r3, r2
 80093e8:	3304      	adds	r3, #4
 80093ea:	79fa      	ldrb	r2, [r7, #7]
 80093ec:	701a      	strb	r2, [r3, #0]
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	240003b4 	.word	0x240003b4

08009400 <Create_PDO>:

void Create_PDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, uint8_t t_size, void* t_addr)
{
 8009400:	b5b0      	push	{r4, r5, r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	461a      	mov	r2, r3
 800940e:	4623      	mov	r3, r4
 8009410:	71fb      	strb	r3, [r7, #7]
 8009412:	4603      	mov	r3, r0
 8009414:	71bb      	strb	r3, [r7, #6]
 8009416:	460b      	mov	r3, r1
 8009418:	717b      	strb	r3, [r7, #5]
 800941a:	4613      	mov	r3, r2
 800941c:	713b      	strb	r3, [r7, #4]
    msg_dods[t_dod_id].pdos[t_obj_id].id   = t_obj_id;
 800941e:	79f9      	ldrb	r1, [r7, #7]
 8009420:	79ba      	ldrb	r2, [r7, #6]
 8009422:	4853      	ldr	r0, [pc, #332]	; (8009570 <Create_PDO+0x170>)
 8009424:	4613      	mov	r3, r2
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	4413      	add	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009430:	fb02 f201 	mul.w	r2, r2, r1
 8009434:	4413      	add	r3, r2
 8009436:	4403      	add	r3, r0
 8009438:	3308      	adds	r3, #8
 800943a:	79ba      	ldrb	r2, [r7, #6]
 800943c:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].type = t_type;
 800943e:	79f9      	ldrb	r1, [r7, #7]
 8009440:	79ba      	ldrb	r2, [r7, #6]
 8009442:	484b      	ldr	r0, [pc, #300]	; (8009570 <Create_PDO+0x170>)
 8009444:	4613      	mov	r3, r2
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	4413      	add	r3, r2
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009450:	fb02 f201 	mul.w	r2, r2, r1
 8009454:	4413      	add	r3, r2
 8009456:	4403      	add	r3, r0
 8009458:	3310      	adds	r3, #16
 800945a:	797a      	ldrb	r2, [r7, #5]
 800945c:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].size  = t_size;
 800945e:	79f9      	ldrb	r1, [r7, #7]
 8009460:	79ba      	ldrb	r2, [r7, #6]
 8009462:	4843      	ldr	r0, [pc, #268]	; (8009570 <Create_PDO+0x170>)
 8009464:	4613      	mov	r3, r2
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	4413      	add	r3, r2
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009470:	fb02 f201 	mul.w	r2, r2, r1
 8009474:	4413      	add	r3, r2
 8009476:	4403      	add	r3, r0
 8009478:	3311      	adds	r3, #17
 800947a:	793a      	ldrb	r2, [r7, #4]
 800947c:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].addr = t_addr;
 800947e:	79f9      	ldrb	r1, [r7, #7]
 8009480:	79ba      	ldrb	r2, [r7, #6]
 8009482:	483b      	ldr	r0, [pc, #236]	; (8009570 <Create_PDO+0x170>)
 8009484:	4613      	mov	r3, r2
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	4413      	add	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009490:	fb02 f201 	mul.w	r2, r2, r1
 8009494:	4413      	add	r3, r2
 8009496:	4403      	add	r3, r0
 8009498:	3314      	adds	r3, #20
 800949a:	6a3a      	ldr	r2, [r7, #32]
 800949c:	601a      	str	r2, [r3, #0]

    msg_dods[t_dod_id].pdos[t_obj_id].data_size  = Get_Msg_Data_Type_Info(t_type).size * t_size;
 800949e:	f107 0308 	add.w	r3, r7, #8
 80094a2:	797a      	ldrb	r2, [r7, #5]
 80094a4:	4611      	mov	r1, r2
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7ff ff1c 	bl	80092e4 <Get_Msg_Data_Type_Info>
 80094ac:	7b3a      	ldrb	r2, [r7, #12]
 80094ae:	79f9      	ldrb	r1, [r7, #7]
 80094b0:	79bb      	ldrb	r3, [r7, #6]
 80094b2:	7938      	ldrb	r0, [r7, #4]
 80094b4:	fb10 f202 	smulbb	r2, r0, r2
 80094b8:	b2d4      	uxtb	r4, r2
 80094ba:	482d      	ldr	r0, [pc, #180]	; (8009570 <Create_PDO+0x170>)
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	4613      	mov	r3, r2
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	4413      	add	r3, r2
 80094c4:	00db      	lsls	r3, r3, #3
 80094c6:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80094ca:	fb02 f201 	mul.w	r2, r2, r1
 80094ce:	4413      	add	r3, r2
 80094d0:	4403      	add	r3, r0
 80094d2:	3304      	adds	r3, #4
 80094d4:	4622      	mov	r2, r4
 80094d6:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].last_pub = malloc(msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 80094d8:	79f9      	ldrb	r1, [r7, #7]
 80094da:	79bb      	ldrb	r3, [r7, #6]
 80094dc:	4824      	ldr	r0, [pc, #144]	; (8009570 <Create_PDO+0x170>)
 80094de:	1c5a      	adds	r2, r3, #1
 80094e0:	4613      	mov	r3, r2
 80094e2:	005b      	lsls	r3, r3, #1
 80094e4:	4413      	add	r3, r2
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80094ec:	fb02 f201 	mul.w	r2, r2, r1
 80094f0:	4413      	add	r3, r2
 80094f2:	4403      	add	r3, r0
 80094f4:	3304      	adds	r3, #4
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	79fc      	ldrb	r4, [r7, #7]
 80094fa:	79bd      	ldrb	r5, [r7, #6]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 fb5d 	bl	8009bbc <malloc>
 8009502:	4603      	mov	r3, r0
 8009504:	4618      	mov	r0, r3
 8009506:	491a      	ldr	r1, [pc, #104]	; (8009570 <Create_PDO+0x170>)
 8009508:	1c6a      	adds	r2, r5, #1
 800950a:	4613      	mov	r3, r2
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	4413      	add	r3, r2
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009516:	fb02 f204 	mul.w	r2, r2, r4
 800951a:	4413      	add	r3, r2
 800951c:	440b      	add	r3, r1
 800951e:	6018      	str	r0, [r3, #0]

    memset(msg_dods[t_dod_id].pdos[t_obj_id].last_pub, 0xFF, msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 8009520:	79f9      	ldrb	r1, [r7, #7]
 8009522:	79bb      	ldrb	r3, [r7, #6]
 8009524:	4812      	ldr	r0, [pc, #72]	; (8009570 <Create_PDO+0x170>)
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	4613      	mov	r3, r2
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	4413      	add	r3, r2
 800952e:	00db      	lsls	r3, r3, #3
 8009530:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009534:	fb02 f201 	mul.w	r2, r2, r1
 8009538:	4413      	add	r3, r2
 800953a:	4403      	add	r3, r0
 800953c:	6818      	ldr	r0, [r3, #0]
 800953e:	79f9      	ldrb	r1, [r7, #7]
 8009540:	79bb      	ldrb	r3, [r7, #6]
 8009542:	4c0b      	ldr	r4, [pc, #44]	; (8009570 <Create_PDO+0x170>)
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	4613      	mov	r3, r2
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	4413      	add	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009552:	fb02 f201 	mul.w	r2, r2, r1
 8009556:	4413      	add	r3, r2
 8009558:	4423      	add	r3, r4
 800955a:	3304      	adds	r3, #4
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	21ff      	movs	r1, #255	; 0xff
 8009562:	f000 fb41 	bl	8009be8 <memset>
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bdb0      	pop	{r4, r5, r7, pc}
 800956e:	bf00      	nop
 8009570:	240003b4 	.word	0x240003b4

08009574 <Create_SDO>:

void Create_SDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, MsgSDOCallback t_callback)
{
 8009574:	b590      	push	{r4, r7, lr}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	603b      	str	r3, [r7, #0]
 800957c:	4603      	mov	r3, r0
 800957e:	71fb      	strb	r3, [r7, #7]
 8009580:	460b      	mov	r3, r1
 8009582:	71bb      	strb	r3, [r7, #6]
 8009584:	4613      	mov	r3, r2
 8009586:	717b      	strb	r3, [r7, #5]
	msg_dods[t_dod_id].sdos[t_obj_id].id        = t_obj_id;
 8009588:	79f9      	ldrb	r1, [r7, #7]
 800958a:	79ba      	ldrb	r2, [r7, #6]
 800958c:	4840      	ldr	r0, [pc, #256]	; (8009690 <Create_SDO+0x11c>)
 800958e:	4613      	mov	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800959a:	fb02 f201 	mul.w	r2, r2, r1
 800959e:	4413      	add	r3, r2
 80095a0:	4403      	add	r3, r0
 80095a2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80095a6:	79ba      	ldrb	r2, [r7, #6]
 80095a8:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].type      = t_type;
 80095aa:	79f9      	ldrb	r1, [r7, #7]
 80095ac:	79ba      	ldrb	r2, [r7, #6]
 80095ae:	4838      	ldr	r0, [pc, #224]	; (8009690 <Create_SDO+0x11c>)
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80095bc:	fb02 f201 	mul.w	r2, r2, r1
 80095c0:	4413      	add	r3, r2
 80095c2:	4403      	add	r3, r0
 80095c4:	f203 23d9 	addw	r3, r3, #729	; 0x2d9
 80095c8:	797a      	ldrb	r2, [r7, #5]
 80095ca:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].callback  = t_callback;
 80095cc:	79f9      	ldrb	r1, [r7, #7]
 80095ce:	79ba      	ldrb	r2, [r7, #6]
 80095d0:	482f      	ldr	r0, [pc, #188]	; (8009690 <Create_SDO+0x11c>)
 80095d2:	4613      	mov	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80095de:	fb02 f201 	mul.w	r2, r2, r1
 80095e2:	4413      	add	r3, r2
 80095e4:	4403      	add	r3, r0
 80095e6:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	601a      	str	r2, [r3, #0]

	msg_dods[t_dod_id].sdos[t_obj_id].args.status = DATA_OBJECT_SDO_IDLE;
 80095ee:	79f9      	ldrb	r1, [r7, #7]
 80095f0:	79ba      	ldrb	r2, [r7, #6]
 80095f2:	4827      	ldr	r0, [pc, #156]	; (8009690 <Create_SDO+0x11c>)
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009600:	fb02 f201 	mul.w	r2, r2, r1
 8009604:	4413      	add	r3, r2
 8009606:	4403      	add	r3, r0
 8009608:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800960c:	2202      	movs	r2, #2
 800960e:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.size   = 0;
 8009610:	79f9      	ldrb	r1, [r7, #7]
 8009612:	79ba      	ldrb	r2, [r7, #6]
 8009614:	481e      	ldr	r0, [pc, #120]	; (8009690 <Create_SDO+0x11c>)
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009622:	fb02 f201 	mul.w	r2, r2, r1
 8009626:	4413      	add	r3, r2
 8009628:	4403      	add	r3, r0
 800962a:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800962e:	2200      	movs	r2, #0
 8009630:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data   = NULL;
 8009632:	79f9      	ldrb	r1, [r7, #7]
 8009634:	79ba      	ldrb	r2, [r7, #6]
 8009636:	4816      	ldr	r0, [pc, #88]	; (8009690 <Create_SDO+0x11c>)
 8009638:	4613      	mov	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009644:	fb02 f201 	mul.w	r2, r2, r1
 8009648:	4413      	add	r3, r2
 800964a:	4403      	add	r3, r0
 800964c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8009650:	2200      	movs	r2, #0
 8009652:	601a      	str	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data_size = Get_Msg_Data_Type_Info(t_type).size;
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	797a      	ldrb	r2, [r7, #5]
 800965a:	4611      	mov	r1, r2
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff fe41 	bl	80092e4 <Get_Msg_Data_Type_Info>
 8009662:	7b3b      	ldrb	r3, [r7, #12]
 8009664:	79f9      	ldrb	r1, [r7, #7]
 8009666:	79ba      	ldrb	r2, [r7, #6]
 8009668:	b29c      	uxth	r4, r3
 800966a:	4809      	ldr	r0, [pc, #36]	; (8009690 <Create_SDO+0x11c>)
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009678:	fb02 f201 	mul.w	r2, r2, r1
 800967c:	4413      	add	r3, r2
 800967e:	4403      	add	r3, r0
 8009680:	f203 23e6 	addw	r3, r3, #742	; 0x2e6
 8009684:	4622      	mov	r2, r4
 8009686:	801a      	strh	r2, [r3, #0]
}
 8009688:	bf00      	nop
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	bd90      	pop	{r4, r7, pc}
 8009690:	240003b4 	.word	0x240003b4

08009694 <Create_Routine_Entity>:
#include <routine.h>

// Routine Entity
RoutineEntityStruct Create_Routine_Entity(RoutineFncPtr t_ent, RoutineFncPtr t_run, RoutineFncPtr t_ext)
{
 8009694:	b490      	push	{r4, r7}
 8009696:	b088      	sub	sp, #32
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
    RoutineEntityStruct t_res;
    t_res.on_enter = t_ent;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	617b      	str	r3, [r7, #20]
    t_res.on_run = t_run;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	61bb      	str	r3, [r7, #24]
    t_res.on_exit = t_ext;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	61fb      	str	r3, [r7, #28]
    return t_res;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	461c      	mov	r4, r3
 80096b2:	f107 0314 	add.w	r3, r7, #20
 80096b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	3720      	adds	r7, #32
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bc90      	pop	{r4, r7}
 80096c6:	4770      	bx	lr

080096c8 <Init_Routine>:


// DriveRoutine Interface
void Init_Routine(RoutineStruct* t_routine)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 80096d0:	2300      	movs	r3, #0
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	e025      	b.n	8009722 <Init_Routine+0x5a>
    	t_routine->id[i] = 0;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	2100      	movs	r1, #0
 80096dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	t_routine->entities[i].on_enter = NULL;
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	4613      	mov	r3, r2
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	3324      	adds	r3, #36	; 0x24
 80096f0:	2200      	movs	r2, #0
 80096f2:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_run = NULL;
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	4613      	mov	r3, r2
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	3328      	adds	r3, #40	; 0x28
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_exit = NULL;
 8009708:	6879      	ldr	r1, [r7, #4]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4613      	mov	r3, r2
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	4413      	add	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	440b      	add	r3, r1
 8009716:	332c      	adds	r3, #44	; 0x2c
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	3301      	adds	r3, #1
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b07      	cmp	r3, #7
 8009726:	ddd6      	ble.n	80096d6 <Init_Routine+0xe>
    }
    t_routine->n_id = 0;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	621a      	str	r2, [r3, #32]
}
 800972e:	bf00      	nop
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <Run_Routines>:
    }
    return 0;
}

int Run_Routines(RoutineStruct* t_routine)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b086      	sub	sp, #24
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
	int t_res = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	617b      	str	r3, [r7, #20]
	int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 8009746:	2300      	movs	r3, #0
 8009748:	613b      	str	r3, [r7, #16]
 800974a:	e022      	b.n	8009792 <Run_Routines+0x58>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009754:	60fb      	str	r3, [r7, #12]
		if (t_routine->entities[t_id].on_run) {
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4613      	mov	r3, r2
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4413      	add	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	440b      	add	r3, r1
 8009764:	3328      	adds	r3, #40	; 0x28
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <Run_Routines+0x48>
			t_res = t_routine->entities[t_id].on_run();
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	4613      	mov	r3, r2
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	440b      	add	r3, r1
 800977a:	3328      	adds	r3, #40	; 0x28
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4798      	blx	r3
 8009780:	6178      	str	r0, [r7, #20]
		}
        if (t_res < 0) {
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b00      	cmp	r3, #0
 8009786:	da01      	bge.n	800978c <Run_Routines+0x52>
            return t_res;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	e008      	b.n	800979e <Run_Routines+0x64>
    for (int i = 0; i < t_routine->n_id; i++){
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	3301      	adds	r3, #1
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1a      	ldr	r2, [r3, #32]
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	429a      	cmp	r2, r3
 800979a:	d8d7      	bhi.n	800974c <Run_Routines+0x12>
        }
    }
    return 0;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3718      	adds	r7, #24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <Clear_Routines>:
    }
    return 0;
}

void Clear_Routines(RoutineStruct* t_routine)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b085      	sub	sp, #20
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
 80097b2:	e008      	b.n	80097c6 <Clear_Routines+0x20>
    	t_routine->id[i] = ROUTINE_DEFAULT_ID;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	f04f 31ff 	mov.w	r1, #4294967295
 80097bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b07      	cmp	r3, #7
 80097ca:	ddf3      	ble.n	80097b4 <Clear_Routines+0xe>
    }
    t_routine->n_id = 0;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <Push_Routine>:

int Push_Routine(RoutineStruct* t_routine, uint8_t t_id)
{
 80097de:	b480      	push	{r7}
 80097e0:	b085      	sub	sp, #20
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	460b      	mov	r3, r1
 80097e8:	70fb      	strb	r3, [r7, #3]
    if (t_routine->n_id >= ROUTINE_MAX_ENTITIES) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	2b07      	cmp	r3, #7
 80097f0:	d902      	bls.n	80097f8 <Push_Routine+0x1a>
        return -1;
 80097f2:	f04f 33ff 	mov.w	r3, #4294967295
 80097f6:	e01d      	b.n	8009834 <Push_Routine+0x56>
    }

    for(int i = 0; i < t_routine->n_id; i++){
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	e00b      	b.n	8009816 <Push_Routine+0x38>
    	if(t_routine->id[i] == t_id){return 0;}
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009806:	78fb      	ldrb	r3, [r7, #3]
 8009808:	429a      	cmp	r2, r3
 800980a:	d101      	bne.n	8009810 <Push_Routine+0x32>
 800980c:	2300      	movs	r3, #0
 800980e:	e011      	b.n	8009834 <Push_Routine+0x56>
    for(int i = 0; i < t_routine->n_id; i++){
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3301      	adds	r3, #1
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1a      	ldr	r2, [r3, #32]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	429a      	cmp	r2, r3
 800981e:	d8ee      	bhi.n	80097fe <Push_Routine+0x20>
    }
    
    t_routine->id[t_routine->n_id++] = t_id;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	1c59      	adds	r1, r3, #1
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	6211      	str	r1, [r2, #32]
 800982a:	78f9      	ldrb	r1, [r7, #3]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 0;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <Transition_Map>:

#include "state_machine.h"

// State & Transition Map
static StateEnum Transition_Map(StateEnum t_curr, StateEnum t_cmd)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	4603      	mov	r3, r0
 8009848:	460a      	mov	r2, r1
 800984a:	71fb      	strb	r3, [r7, #7]
 800984c:	4613      	mov	r3, r2
 800984e:	71bb      	strb	r3, [r7, #6]
    if (t_curr == t_cmd) {
 8009850:	79fa      	ldrb	r2, [r7, #7]
 8009852:	79bb      	ldrb	r3, [r7, #6]
 8009854:	429a      	cmp	r2, r3
 8009856:	d101      	bne.n	800985c <Transition_Map+0x1c>
        return t_curr;
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	e037      	b.n	80098cc <Transition_Map+0x8c>
    }

    switch (t_curr) {
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	2b03      	cmp	r3, #3
 8009860:	d82a      	bhi.n	80098b8 <Transition_Map+0x78>
 8009862:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <Transition_Map+0x28>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	08009879 	.word	0x08009879
 800986c:	08009883 	.word	0x08009883
 8009870:	08009893 	.word	0x08009893
 8009874:	080098a9 	.word	0x080098a9
    /*  |- From State -|  |---------------------------------- To State ----------------------------------| |- If valid -| |else| */
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 8009878:	79bb      	ldrb	r3, [r7, #6]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d11e      	bne.n	80098bc <Transition_Map+0x7c>
 800987e:	79bb      	ldrb	r3, [r7, #6]
 8009880:	e024      	b.n	80098cc <Transition_Map+0x8c>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 8009882:	79bb      	ldrb	r3, [r7, #6]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <Transition_Map+0x4e>
 8009888:	79bb      	ldrb	r3, [r7, #6]
 800988a:	2b02      	cmp	r3, #2
 800988c:	d118      	bne.n	80098c0 <Transition_Map+0x80>
 800988e:	79bb      	ldrb	r3, [r7, #6]
 8009890:	e01c      	b.n	80098cc <Transition_Map+0x8c>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 8009892:	79bb      	ldrb	r3, [r7, #6]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d005      	beq.n	80098a4 <Transition_Map+0x64>
 8009898:	79bb      	ldrb	r3, [r7, #6]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d002      	beq.n	80098a4 <Transition_Map+0x64>
 800989e:	79bb      	ldrb	r3, [r7, #6]
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d10f      	bne.n	80098c4 <Transition_Map+0x84>
 80098a4:	79bb      	ldrb	r3, [r7, #6]
 80098a6:	e011      	b.n	80098cc <Transition_Map+0x8c>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 80098a8:	79bb      	ldrb	r3, [r7, #6]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <Transition_Map+0x74>
 80098ae:	79bb      	ldrb	r3, [r7, #6]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d109      	bne.n	80098c8 <Transition_Map+0x88>
 80098b4:	79bb      	ldrb	r3, [r7, #6]
 80098b6:	e009      	b.n	80098cc <Transition_Map+0x8c>
    default: break;
 80098b8:	bf00      	nop
 80098ba:	e006      	b.n	80098ca <Transition_Map+0x8a>
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 80098bc:	bf00      	nop
 80098be:	e004      	b.n	80098ca <Transition_Map+0x8a>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 80098c0:	bf00      	nop
 80098c2:	e002      	b.n	80098ca <Transition_Map+0x8a>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 80098c4:	bf00      	nop
 80098c6:	e000      	b.n	80098ca <Transition_Map+0x8a>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 80098c8:	bf00      	nop
    }

    return t_curr;
 80098ca:	79fb      	ldrb	r3, [r7, #7]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <Create_State_Entity>:


// State Functions
StateEntityStruct Create_State_Entity(StateFuncPtr t_ent, StateFuncPtr t_run, StateFuncPtr t_ext)
{
 80098d8:	b490      	push	{r4, r7}
 80098da:	b088      	sub	sp, #32
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
    StateEntityStruct t_res;
    t_res.on_enter = t_ent;
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	617b      	str	r3, [r7, #20]
    t_res.on_run =   t_run;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	61bb      	str	r3, [r7, #24]
    t_res.on_exit =  t_ext;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	61fb      	str	r3, [r7, #28]
    return t_res;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	461c      	mov	r4, r3
 80098f6:	f107 0314 	add.w	r3, r7, #20
 80098fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	3720      	adds	r7, #32
 8009906:	46bd      	mov	sp, r7
 8009908:	bc90      	pop	{r4, r7}
 800990a:	4770      	bx	lr

0800990c <Init_State_Machine>:


// State Machine Interfaces
void Init_State_Machine(StateMachineStruct* t_sm)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 8009914:	2300      	movs	r3, #0
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	e020      	b.n	800995c <Init_State_Machine+0x50>
    	t_sm->entity[i].on_enter = NULL;
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	4613      	mov	r3, r2
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	3304      	adds	r3, #4
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_run   = NULL;
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	4613      	mov	r3, r2
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	440b      	add	r3, r1
 800993c:	3308      	adds	r3, #8
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_exit  = NULL;
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	4613      	mov	r3, r2
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	330c      	adds	r3, #12
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3301      	adds	r3, #1
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2b03      	cmp	r3, #3
 8009960:	dddb      	ble.n	800991a <Init_State_Machine+0xe>
    }
    t_sm->entity_life_cycle = e_StateEntity_Ent;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	709a      	strb	r2, [r3, #2]
}
 8009968:	bf00      	nop
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <Run_State_Machine>:

void Run_State_Machine(StateMachineStruct* t_sm)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
    switch (t_sm->entity_life_cycle) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	789b      	ldrb	r3, [r3, #2]
 8009980:	2b02      	cmp	r3, #2
 8009982:	d041      	beq.n	8009a08 <Run_State_Machine+0x94>
 8009984:	2b02      	cmp	r3, #2
 8009986:	dc5c      	bgt.n	8009a42 <Run_State_Machine+0xce>
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <Run_State_Machine+0x1e>
 800998c:	2b01      	cmp	r3, #1
 800998e:	d021      	beq.n	80099d4 <Run_State_Machine+0x60>
        }
        t_sm->entity_life_cycle = e_StateEntity_Ent;
        break;

    default: // Invalid Lifecycle
        break;
 8009990:	e057      	b.n	8009a42 <Run_State_Machine+0xce>
        if (t_sm->entity[t_sm->curr_state].on_enter) {
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	4619      	mov	r1, r3
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	460b      	mov	r3, r1
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	440b      	add	r3, r1
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	3304      	adds	r3, #4
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00b      	beq.n	80099c4 <Run_State_Machine+0x50>
        	t_sm->entity[t_sm->curr_state].on_enter();
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	4619      	mov	r1, r3
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	440b      	add	r3, r1
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	3304      	adds	r3, #4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4798      	blx	r3
        if (t_sm->entity_life_cycle == e_StateEntity_Ent){
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	789b      	ldrb	r3, [r3, #2]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d13c      	bne.n	8009a46 <Run_State_Machine+0xd2>
        	t_sm->entity_life_cycle = e_StateEntity_Run;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	709a      	strb	r2, [r3, #2]
        break;
 80099d2:	e038      	b.n	8009a46 <Run_State_Machine+0xd2>
        if (t_sm->entity[t_sm->curr_state].on_run) {
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	4619      	mov	r1, r3
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	440b      	add	r3, r1
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	3308      	adds	r3, #8
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d02d      	beq.n	8009a4a <Run_State_Machine+0xd6>
        	t_sm->entity[t_sm->curr_state].on_run();
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	4619      	mov	r1, r3
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	440b      	add	r3, r1
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	3308      	adds	r3, #8
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4798      	blx	r3
        break;
 8009a06:	e020      	b.n	8009a4a <Run_State_Machine+0xd6>
        if (t_sm->entity[t_sm->prev_state].on_exit) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	785b      	ldrb	r3, [r3, #1]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	440b      	add	r3, r1
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	330c      	adds	r3, #12
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00b      	beq.n	8009a3a <Run_State_Machine+0xc6>
        	t_sm->entity[t_sm->prev_state].on_exit();
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	785b      	ldrb	r3, [r3, #1]
 8009a26:	4619      	mov	r1, r3
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	440b      	add	r3, r1
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	330c      	adds	r3, #12
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4798      	blx	r3
        t_sm->entity_life_cycle = e_StateEntity_Ent;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	709a      	strb	r2, [r3, #2]
        break;
 8009a40:	e004      	b.n	8009a4c <Run_State_Machine+0xd8>
        break;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <Run_State_Machine+0xd8>
        break;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <Run_State_Machine+0xd8>
        break;
 8009a4a:	bf00      	nop
    }
}
 8009a4c:	bf00      	nop
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <Transition_State>:

void Transition_State(StateMachineStruct* t_sm, StateEnum t_state_cmd)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
    StateEnum new_state = Transition_Map(t_sm->curr_state, t_state_cmd);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	4611      	mov	r1, r2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7ff fee9 	bl	8009840 <Transition_Map>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73fb      	strb	r3, [r7, #15]
    if (t_sm->curr_state != new_state) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	7bfa      	ldrb	r2, [r7, #15]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d009      	beq.n	8009a90 <Transition_State+0x3c>
    	t_sm->prev_state = t_sm->curr_state;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	705a      	strb	r2, [r3, #1]
    	t_sm->curr_state = new_state;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	7bfa      	ldrb	r2, [r7, #15]
 8009a88:	701a      	strb	r2, [r3, #0]
    	t_sm->entity_life_cycle = e_StateEntity_Ext;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	709a      	strb	r2, [r3, #2]
    }
}
 8009a90:	bf00      	nop
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <Init_Task>:

#include <task.h>

// Device Interface
void Init_Task(TaskStruct* t_task)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
    Init_State_Machine(&t_task->state_machine);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	330c      	adds	r3, #12
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7ff ff31 	bl	800990c <Init_State_Machine>
    Init_Routine(&t_task->routine);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3340      	adds	r3, #64	; 0x40
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7ff fe0a 	bl	80096c8 <Init_Routine>
}
 8009ab4:	bf00      	nop
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <Run_Task>:

void Run_Task(TaskStruct* t_task)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
    Run_State_Machine(&t_task->state_machine);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	330c      	adds	r3, #12
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff ff53 	bl	8009974 <Run_State_Machine>
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <Set_Task_State_Entity>:

void Set_Task_State_Entity(TaskStruct* t_task, StateEnum t_state, StateEntityStruct t_entity, bool t_is_default)
{
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	f107 0010 	add.w	r0, r7, #16
 8009ae4:	e880 000c 	stmia.w	r0, {r2, r3}
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
	t_task->state_machine.entity[t_state] = t_entity;
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	005b      	lsls	r3, r3, #1
 8009af4:	4413      	add	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	440b      	add	r3, r1
 8009afa:	3308      	adds	r3, #8
 8009afc:	3308      	adds	r3, #8
 8009afe:	f107 0210 	add.w	r2, r7, #16
 8009b02:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b04:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (t_is_default) {
 8009b08:	7f3b      	ldrb	r3, [r7, #28]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d005      	beq.n	8009b1a <Set_Task_State_Entity+0x44>
    	t_task->state_machine.curr_state = t_state;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	78fa      	ldrb	r2, [r7, #3]
 8009b12:	731a      	strb	r2, [r3, #12]
    	t_task->state_machine.prev_state = t_state;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	78fa      	ldrb	r2, [r7, #3]
 8009b18:	735a      	strb	r2, [r3, #13]
    }
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	b002      	add	sp, #8
 8009b26:	4770      	bx	lr

08009b28 <Set_Task_Routine_Entity>:

//TODO: id, order range/duplication check
void Set_Task_Routine_Entity(TaskStruct* t_task, int t_id, RoutineEntityStruct t_entity)
{
 8009b28:	b082      	sub	sp, #8
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	6039      	str	r1, [r7, #0]
 8009b34:	f107 0110 	add.w	r1, r7, #16
 8009b38:	e881 000c 	stmia.w	r1, {r2, r3}
	t_task->routine.entities[t_id] = t_entity;
 8009b3c:	6879      	ldr	r1, [r7, #4]
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	4613      	mov	r3, r2
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	440b      	add	r3, r1
 8009b4a:	3360      	adds	r3, #96	; 0x60
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	f107 0210 	add.w	r2, r7, #16
 8009b52:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	b002      	add	sp, #8
 8009b64:	4770      	bx	lr
	...

08009b68 <__errno>:
 8009b68:	4b01      	ldr	r3, [pc, #4]	; (8009b70 <__errno+0x8>)
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	24000010 	.word	0x24000010

08009b74 <__libc_init_array>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4d0d      	ldr	r5, [pc, #52]	; (8009bac <__libc_init_array+0x38>)
 8009b78:	4c0d      	ldr	r4, [pc, #52]	; (8009bb0 <__libc_init_array+0x3c>)
 8009b7a:	1b64      	subs	r4, r4, r5
 8009b7c:	10a4      	asrs	r4, r4, #2
 8009b7e:	2600      	movs	r6, #0
 8009b80:	42a6      	cmp	r6, r4
 8009b82:	d109      	bne.n	8009b98 <__libc_init_array+0x24>
 8009b84:	4d0b      	ldr	r5, [pc, #44]	; (8009bb4 <__libc_init_array+0x40>)
 8009b86:	4c0c      	ldr	r4, [pc, #48]	; (8009bb8 <__libc_init_array+0x44>)
 8009b88:	f001 fda4 	bl	800b6d4 <_init>
 8009b8c:	1b64      	subs	r4, r4, r5
 8009b8e:	10a4      	asrs	r4, r4, #2
 8009b90:	2600      	movs	r6, #0
 8009b92:	42a6      	cmp	r6, r4
 8009b94:	d105      	bne.n	8009ba2 <__libc_init_array+0x2e>
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b9c:	4798      	blx	r3
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	e7ee      	b.n	8009b80 <__libc_init_array+0xc>
 8009ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba6:	4798      	blx	r3
 8009ba8:	3601      	adds	r6, #1
 8009baa:	e7f2      	b.n	8009b92 <__libc_init_array+0x1e>
 8009bac:	0800d340 	.word	0x0800d340
 8009bb0:	0800d340 	.word	0x0800d340
 8009bb4:	0800d340 	.word	0x0800d340
 8009bb8:	0800d344 	.word	0x0800d344

08009bbc <malloc>:
 8009bbc:	4b02      	ldr	r3, [pc, #8]	; (8009bc8 <malloc+0xc>)
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	f000 b819 	b.w	8009bf8 <_malloc_r>
 8009bc6:	bf00      	nop
 8009bc8:	24000010 	.word	0x24000010

08009bcc <memcpy>:
 8009bcc:	440a      	add	r2, r1
 8009bce:	4291      	cmp	r1, r2
 8009bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bd4:	d100      	bne.n	8009bd8 <memcpy+0xc>
 8009bd6:	4770      	bx	lr
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009be2:	4291      	cmp	r1, r2
 8009be4:	d1f9      	bne.n	8009bda <memcpy+0xe>
 8009be6:	bd10      	pop	{r4, pc}

08009be8 <memset>:
 8009be8:	4402      	add	r2, r0
 8009bea:	4603      	mov	r3, r0
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d100      	bne.n	8009bf2 <memset+0xa>
 8009bf0:	4770      	bx	lr
 8009bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf6:	e7f9      	b.n	8009bec <memset+0x4>

08009bf8 <_malloc_r>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	1ccd      	adds	r5, r1, #3
 8009bfc:	f025 0503 	bic.w	r5, r5, #3
 8009c00:	3508      	adds	r5, #8
 8009c02:	2d0c      	cmp	r5, #12
 8009c04:	bf38      	it	cc
 8009c06:	250c      	movcc	r5, #12
 8009c08:	2d00      	cmp	r5, #0
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	db01      	blt.n	8009c12 <_malloc_r+0x1a>
 8009c0e:	42a9      	cmp	r1, r5
 8009c10:	d903      	bls.n	8009c1a <_malloc_r+0x22>
 8009c12:	230c      	movs	r3, #12
 8009c14:	6033      	str	r3, [r6, #0]
 8009c16:	2000      	movs	r0, #0
 8009c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1a:	f000 f859 	bl	8009cd0 <__malloc_lock>
 8009c1e:	4921      	ldr	r1, [pc, #132]	; (8009ca4 <_malloc_r+0xac>)
 8009c20:	680a      	ldr	r2, [r1, #0]
 8009c22:	4614      	mov	r4, r2
 8009c24:	b99c      	cbnz	r4, 8009c4e <_malloc_r+0x56>
 8009c26:	4f20      	ldr	r7, [pc, #128]	; (8009ca8 <_malloc_r+0xb0>)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	b923      	cbnz	r3, 8009c36 <_malloc_r+0x3e>
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f000 f83c 	bl	8009cac <_sbrk_r>
 8009c34:	6038      	str	r0, [r7, #0]
 8009c36:	4629      	mov	r1, r5
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f000 f837 	bl	8009cac <_sbrk_r>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	d123      	bne.n	8009c8a <_malloc_r+0x92>
 8009c42:	230c      	movs	r3, #12
 8009c44:	6033      	str	r3, [r6, #0]
 8009c46:	4630      	mov	r0, r6
 8009c48:	f000 f848 	bl	8009cdc <__malloc_unlock>
 8009c4c:	e7e3      	b.n	8009c16 <_malloc_r+0x1e>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	1b5b      	subs	r3, r3, r5
 8009c52:	d417      	bmi.n	8009c84 <_malloc_r+0x8c>
 8009c54:	2b0b      	cmp	r3, #11
 8009c56:	d903      	bls.n	8009c60 <_malloc_r+0x68>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	441c      	add	r4, r3
 8009c5c:	6025      	str	r5, [r4, #0]
 8009c5e:	e004      	b.n	8009c6a <_malloc_r+0x72>
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	42a2      	cmp	r2, r4
 8009c64:	bf0c      	ite	eq
 8009c66:	600b      	streq	r3, [r1, #0]
 8009c68:	6053      	strne	r3, [r2, #4]
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f000 f836 	bl	8009cdc <__malloc_unlock>
 8009c70:	f104 000b 	add.w	r0, r4, #11
 8009c74:	1d23      	adds	r3, r4, #4
 8009c76:	f020 0007 	bic.w	r0, r0, #7
 8009c7a:	1ac2      	subs	r2, r0, r3
 8009c7c:	d0cc      	beq.n	8009c18 <_malloc_r+0x20>
 8009c7e:	1a1b      	subs	r3, r3, r0
 8009c80:	50a3      	str	r3, [r4, r2]
 8009c82:	e7c9      	b.n	8009c18 <_malloc_r+0x20>
 8009c84:	4622      	mov	r2, r4
 8009c86:	6864      	ldr	r4, [r4, #4]
 8009c88:	e7cc      	b.n	8009c24 <_malloc_r+0x2c>
 8009c8a:	1cc4      	adds	r4, r0, #3
 8009c8c:	f024 0403 	bic.w	r4, r4, #3
 8009c90:	42a0      	cmp	r0, r4
 8009c92:	d0e3      	beq.n	8009c5c <_malloc_r+0x64>
 8009c94:	1a21      	subs	r1, r4, r0
 8009c96:	4630      	mov	r0, r6
 8009c98:	f000 f808 	bl	8009cac <_sbrk_r>
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d1dd      	bne.n	8009c5c <_malloc_r+0x64>
 8009ca0:	e7cf      	b.n	8009c42 <_malloc_r+0x4a>
 8009ca2:	bf00      	nop
 8009ca4:	2400009c 	.word	0x2400009c
 8009ca8:	240000a0 	.word	0x240000a0

08009cac <_sbrk_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d06      	ldr	r5, [pc, #24]	; (8009cc8 <_sbrk_r+0x1c>)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	602b      	str	r3, [r5, #0]
 8009cb8:	f7f6 ffe4 	bl	8000c84 <_sbrk>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_sbrk_r+0x1a>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_sbrk_r+0x1a>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	2400d5c8 	.word	0x2400d5c8

08009ccc <__retarget_lock_acquire_recursive>:
 8009ccc:	4770      	bx	lr

08009cce <__retarget_lock_release_recursive>:
 8009cce:	4770      	bx	lr

08009cd0 <__malloc_lock>:
 8009cd0:	4801      	ldr	r0, [pc, #4]	; (8009cd8 <__malloc_lock+0x8>)
 8009cd2:	f7ff bffb 	b.w	8009ccc <__retarget_lock_acquire_recursive>
 8009cd6:	bf00      	nop
 8009cd8:	2400d5c0 	.word	0x2400d5c0

08009cdc <__malloc_unlock>:
 8009cdc:	4801      	ldr	r0, [pc, #4]	; (8009ce4 <__malloc_unlock+0x8>)
 8009cde:	f7ff bff6 	b.w	8009cce <__retarget_lock_release_recursive>
 8009ce2:	bf00      	nop
 8009ce4:	2400d5c0 	.word	0x2400d5c0

08009ce8 <checkint>:
 8009ce8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009cec:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cf4:	dd2b      	ble.n	8009d4e <checkint+0x66>
 8009cf6:	f240 4333 	movw	r3, #1075	; 0x433
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	dc25      	bgt.n	8009d4a <checkint+0x62>
 8009cfe:	1a9b      	subs	r3, r3, r2
 8009d00:	f1a3 0620 	sub.w	r6, r3, #32
 8009d04:	f04f 32ff 	mov.w	r2, #4294967295
 8009d08:	fa02 f606 	lsl.w	r6, r2, r6
 8009d0c:	fa02 f403 	lsl.w	r4, r2, r3
 8009d10:	f1c3 0520 	rsb	r5, r3, #32
 8009d14:	4334      	orrs	r4, r6
 8009d16:	fa22 f505 	lsr.w	r5, r2, r5
 8009d1a:	432c      	orrs	r4, r5
 8009d1c:	409a      	lsls	r2, r3
 8009d1e:	ea20 0602 	bic.w	r6, r0, r2
 8009d22:	ea21 0704 	bic.w	r7, r1, r4
 8009d26:	ea56 0207 	orrs.w	r2, r6, r7
 8009d2a:	f1a3 0420 	sub.w	r4, r3, #32
 8009d2e:	f1c3 0220 	rsb	r2, r3, #32
 8009d32:	d10c      	bne.n	8009d4e <checkint+0x66>
 8009d34:	40d8      	lsrs	r0, r3
 8009d36:	fa01 f302 	lsl.w	r3, r1, r2
 8009d3a:	4318      	orrs	r0, r3
 8009d3c:	40e1      	lsrs	r1, r4
 8009d3e:	4308      	orrs	r0, r1
 8009d40:	f000 0301 	and.w	r3, r0, #1
 8009d44:	f1c3 0002 	rsb	r0, r3, #2
 8009d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d4a:	2002      	movs	r0, #2
 8009d4c:	e7fc      	b.n	8009d48 <checkint+0x60>
 8009d4e:	2000      	movs	r0, #0
 8009d50:	e7fa      	b.n	8009d48 <checkint+0x60>
 8009d52:	0000      	movs	r0, r0
 8009d54:	0000      	movs	r0, r0
	...

08009d58 <pow>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	ed2d 8b0a 	vpush	{d8-d12}
 8009d60:	b09b      	sub	sp, #108	; 0x6c
 8009d62:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d66:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d6a:	ed8d 1b00 	vstr	d1, [sp]
 8009d6e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8009d72:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009d76:	f109 30ff 	add.w	r0, r9, #4294967295
 8009d7a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8009d7e:	4288      	cmp	r0, r1
 8009d80:	46cc      	mov	ip, r9
 8009d82:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8009d86:	d806      	bhi.n	8009d96 <pow+0x3e>
 8009d88:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8009d8c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8009d90:	297f      	cmp	r1, #127	; 0x7f
 8009d92:	f240 81ab 	bls.w	800a0ec <pow+0x394>
 8009d96:	19b1      	adds	r1, r6, r6
 8009d98:	9104      	str	r1, [sp, #16]
 8009d9a:	eb47 0107 	adc.w	r1, r7, r7
 8009d9e:	9105      	str	r1, [sp, #20]
 8009da0:	9904      	ldr	r1, [sp, #16]
 8009da2:	f111 31ff 	adds.w	r1, r1, #4294967295
 8009da6:	460a      	mov	r2, r1
 8009da8:	9905      	ldr	r1, [sp, #20]
 8009daa:	f141 31ff 	adc.w	r1, r1, #4294967295
 8009dae:	460b      	mov	r3, r1
 8009db0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8009db4:	f06f 0001 	mvn.w	r0, #1
 8009db8:	4299      	cmp	r1, r3
 8009dba:	bf08      	it	eq
 8009dbc:	4290      	cmpeq	r0, r2
 8009dbe:	d260      	bcs.n	8009e82 <pow+0x12a>
 8009dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	d11a      	bne.n	8009dfe <pow+0xa6>
 8009dc8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8009dcc:	1923      	adds	r3, r4, r4
 8009dce:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd0:	eb42 0302 	adc.w	r3, r2, r2
 8009dd4:	930d      	str	r3, [sp, #52]	; 0x34
 8009dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dda:	4bcf      	ldr	r3, [pc, #828]	; (800a118 <pow+0x3c0>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	428b      	cmp	r3, r1
 8009de0:	bf08      	it	eq
 8009de2:	4282      	cmpeq	r2, r0
 8009de4:	f080 8265 	bcs.w	800a2b2 <pow+0x55a>
 8009de8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dec:	ed9d 6b00 	vldr	d6, [sp]
 8009df0:	ee37 0b06 	vadd.f64	d0, d7, d6
 8009df4:	b01b      	add	sp, #108	; 0x6c
 8009df6:	ecbd 8b0a 	vpop	{d8-d12}
 8009dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfe:	49c7      	ldr	r1, [pc, #796]	; (800a11c <pow+0x3c4>)
 8009e00:	2000      	movs	r0, #0
 8009e02:	428d      	cmp	r5, r1
 8009e04:	bf08      	it	eq
 8009e06:	4284      	cmpeq	r4, r0
 8009e08:	d10b      	bne.n	8009e22 <pow+0xca>
 8009e0a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009e0e:	19b3      	adds	r3, r6, r6
 8009e10:	930e      	str	r3, [sp, #56]	; 0x38
 8009e12:	eb42 0302 	adc.w	r3, r2, r2
 8009e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009e1c:	4bbe      	ldr	r3, [pc, #760]	; (800a118 <pow+0x3c0>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	e7dd      	b.n	8009dde <pow+0x86>
 8009e22:	1921      	adds	r1, r4, r4
 8009e24:	9106      	str	r1, [sp, #24]
 8009e26:	eb45 0105 	adc.w	r1, r5, r5
 8009e2a:	9107      	str	r1, [sp, #28]
 8009e2c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009e30:	49bb      	ldr	r1, [pc, #748]	; (800a120 <pow+0x3c8>)
 8009e32:	2000      	movs	r0, #0
 8009e34:	42a1      	cmp	r1, r4
 8009e36:	bf08      	it	eq
 8009e38:	4298      	cmpeq	r0, r3
 8009e3a:	d3d5      	bcc.n	8009de8 <pow+0x90>
 8009e3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009e40:	428c      	cmp	r4, r1
 8009e42:	bf08      	it	eq
 8009e44:	4283      	cmpeq	r3, r0
 8009e46:	d1cf      	bne.n	8009de8 <pow+0x90>
 8009e48:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009e4c:	49b5      	ldr	r1, [pc, #724]	; (800a124 <pow+0x3cc>)
 8009e4e:	2000      	movs	r0, #0
 8009e50:	428c      	cmp	r4, r1
 8009e52:	bf08      	it	eq
 8009e54:	4283      	cmpeq	r3, r0
 8009e56:	f000 822c 	beq.w	800a2b2 <pow+0x55a>
 8009e5a:	49b3      	ldr	r1, [pc, #716]	; (800a128 <pow+0x3d0>)
 8009e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e60:	42a1      	cmp	r1, r4
 8009e62:	bf08      	it	eq
 8009e64:	4298      	cmpeq	r0, r3
 8009e66:	ea6f 0307 	mvn.w	r3, r7
 8009e6a:	bf34      	ite	cc
 8009e6c:	2201      	movcc	r2, #1
 8009e6e:	2200      	movcs	r2, #0
 8009e70:	0fdb      	lsrs	r3, r3, #31
 8009e72:	429a      	cmp	r2, r3
 8009e74:	f040 821a 	bne.w	800a2ac <pow+0x554>
 8009e78:	ed9d 7b00 	vldr	d7, [sp]
 8009e7c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8009e80:	e7b8      	b.n	8009df4 <pow+0x9c>
 8009e82:	1923      	adds	r3, r4, r4
 8009e84:	9308      	str	r3, [sp, #32]
 8009e86:	eb45 0305 	adc.w	r3, r5, r5
 8009e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8c:	9b08      	ldr	r3, [sp, #32]
 8009e8e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8009e92:	9310      	str	r3, [sp, #64]	; 0x40
 8009e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e96:	f143 33ff 	adc.w	r3, r3, #4294967295
 8009e9a:	9311      	str	r3, [sp, #68]	; 0x44
 8009e9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ea0:	4299      	cmp	r1, r3
 8009ea2:	bf08      	it	eq
 8009ea4:	4290      	cmpeq	r0, r2
 8009ea6:	d22d      	bcs.n	8009f04 <pow+0x1ac>
 8009ea8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009eac:	2c00      	cmp	r4, #0
 8009eae:	f175 0300 	sbcs.w	r3, r5, #0
 8009eb2:	ee27 0b07 	vmul.f64	d0, d7, d7
 8009eb6:	da16      	bge.n	8009ee6 <pow+0x18e>
 8009eb8:	4630      	mov	r0, r6
 8009eba:	4639      	mov	r1, r7
 8009ebc:	f7ff ff14 	bl	8009ce8 <checkint>
 8009ec0:	2801      	cmp	r0, #1
 8009ec2:	d110      	bne.n	8009ee6 <pow+0x18e>
 8009ec4:	eeb1 0b40 	vneg.f64	d0, d0
 8009ec8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8009ecc:	4323      	orrs	r3, r4
 8009ece:	d10c      	bne.n	8009eea <pow+0x192>
 8009ed0:	2e00      	cmp	r6, #0
 8009ed2:	f177 0300 	sbcs.w	r3, r7, #0
 8009ed6:	da8d      	bge.n	8009df4 <pow+0x9c>
 8009ed8:	b01b      	add	sp, #108	; 0x6c
 8009eda:	ecbd 8b0a 	vpop	{d8-d12}
 8009ede:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee2:	f001 b951 	b.w	800b188 <__math_divzero>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	e7ee      	b.n	8009ec8 <pow+0x170>
 8009eea:	2e00      	cmp	r6, #0
 8009eec:	f177 0300 	sbcs.w	r3, r7, #0
 8009ef0:	da80      	bge.n	8009df4 <pow+0x9c>
 8009ef2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009ef6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8009efa:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8009efe:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8009f02:	e777      	b.n	8009df4 <pow+0x9c>
 8009f04:	2c00      	cmp	r4, #0
 8009f06:	f175 0300 	sbcs.w	r3, r5, #0
 8009f0a:	da35      	bge.n	8009f78 <pow+0x220>
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	4639      	mov	r1, r7
 8009f10:	f7ff feea 	bl	8009ce8 <checkint>
 8009f14:	b940      	cbnz	r0, 8009f28 <pow+0x1d0>
 8009f16:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009f1a:	b01b      	add	sp, #108	; 0x6c
 8009f1c:	ecbd 8b0a 	vpop	{d8-d12}
 8009f20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	f001 b948 	b.w	800b1b8 <__math_invalid>
 8009f28:	2801      	cmp	r0, #1
 8009f2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009f2e:	bf14      	ite	ne
 8009f30:	2000      	movne	r0, #0
 8009f32:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8009f36:	461d      	mov	r5, r3
 8009f38:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8009f3c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8009f40:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8009f44:	2a7f      	cmp	r2, #127	; 0x7f
 8009f46:	d933      	bls.n	8009fb0 <pow+0x258>
 8009f48:	4974      	ldr	r1, [pc, #464]	; (800a11c <pow+0x3c4>)
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	428d      	cmp	r5, r1
 8009f4e:	bf08      	it	eq
 8009f50:	4284      	cmpeq	r4, r0
 8009f52:	f000 81ae 	beq.w	800a2b2 <pow+0x55a>
 8009f56:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d80e      	bhi.n	8009f7c <pow+0x224>
 8009f5e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009f62:	ed9d 7b00 	vldr	d7, [sp]
 8009f66:	42a9      	cmp	r1, r5
 8009f68:	bf08      	it	eq
 8009f6a:	42a0      	cmpeq	r0, r4
 8009f6c:	bf34      	ite	cc
 8009f6e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8009f72:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8009f76:	e73d      	b.n	8009df4 <pow+0x9c>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	e7df      	b.n	8009f3c <pow+0x1e4>
 8009f7c:	42a9      	cmp	r1, r5
 8009f7e:	bf08      	it	eq
 8009f80:	42a0      	cmpeq	r0, r4
 8009f82:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009f86:	bf2c      	ite	cs
 8009f88:	2301      	movcs	r3, #1
 8009f8a:	2300      	movcc	r3, #0
 8009f8c:	4590      	cmp	r8, r2
 8009f8e:	bf8c      	ite	hi
 8009f90:	f04f 0800 	movhi.w	r8, #0
 8009f94:	f04f 0801 	movls.w	r8, #1
 8009f98:	4543      	cmp	r3, r8
 8009f9a:	f04f 0000 	mov.w	r0, #0
 8009f9e:	f000 80af 	beq.w	800a100 <pow+0x3a8>
 8009fa2:	b01b      	add	sp, #108	; 0x6c
 8009fa4:	ecbd 8b0a 	vpop	{d8-d12}
 8009fa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	f001 b8e4 	b.w	800b178 <__math_oflow>
 8009fb0:	f1bc 0f00 	cmp.w	ip, #0
 8009fb4:	d10e      	bne.n	8009fd4 <pow+0x27c>
 8009fb6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800a110 <pow+0x3b8>
 8009fba:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009fbe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009fc2:	ec57 6b17 	vmov	r6, r7, d7
 8009fc6:	4b59      	ldr	r3, [pc, #356]	; (800a12c <pow+0x3d4>)
 8009fc8:	2100      	movs	r1, #0
 8009fca:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009fce:	1874      	adds	r4, r6, r1
 8009fd0:	eb42 0503 	adc.w	r5, r2, r3
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	18e3      	adds	r3, r4, r3
 8009fd8:	4b55      	ldr	r3, [pc, #340]	; (800a130 <pow+0x3d8>)
 8009fda:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009fde:	eb45 0303 	adc.w	r3, r5, r3
 8009fe2:	1519      	asrs	r1, r3, #20
 8009fe4:	ee03 1a10 	vmov	s6, r1
 8009fe8:	0d1e      	lsrs	r6, r3, #20
 8009fea:	2100      	movs	r1, #0
 8009fec:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8009ff0:	0536      	lsls	r6, r6, #20
 8009ff2:	1a63      	subs	r3, r4, r1
 8009ff4:	9312      	str	r3, [sp, #72]	; 0x48
 8009ff6:	eb65 0306 	sbc.w	r3, r5, r6
 8009ffa:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ffc:	4b4d      	ldr	r3, [pc, #308]	; (800a134 <pow+0x3dc>)
 8009ffe:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800a002:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a006:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800a00a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a00e:	ed93 7b00 	vldr	d7, [r3]
 800a012:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800a016:	ed93 4b02 	vldr	d4, [r3, #8]
 800a01a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800a01e:	eea3 5b07 	vfma.f64	d5, d3, d7
 800a022:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800a026:	ee36 9b05 	vadd.f64	d9, d6, d5
 800a02a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800a02e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800a032:	ed93 4b04 	vldr	d4, [r3, #16]
 800a036:	ee35 5b06 	vadd.f64	d5, d5, d6
 800a03a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a03e:	ee26 4b04 	vmul.f64	d4, d6, d4
 800a042:	ed93 3b08 	vldr	d3, [r3, #32]
 800a046:	ee26 0b04 	vmul.f64	d0, d6, d4
 800a04a:	eeb0 8b40 	vmov.f64	d8, d0
 800a04e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800a052:	ed93 4b06 	vldr	d4, [r3, #24]
 800a056:	ee26 ab00 	vmul.f64	d10, d6, d0
 800a05a:	ee39 1b00 	vadd.f64	d1, d9, d0
 800a05e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800a062:	eea6 4b03 	vfma.f64	d4, d6, d3
 800a066:	ee39 9b41 	vsub.f64	d9, d9, d1
 800a06a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800a06e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800a072:	ee39 9b00 	vadd.f64	d9, d9, d0
 800a076:	eea6 3b02 	vfma.f64	d3, d6, d2
 800a07a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800a07e:	ee38 9b09 	vadd.f64	d9, d8, d9
 800a082:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800a086:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800a08a:	ed9d 6b00 	vldr	d6, [sp]
 800a08e:	eea0 3b02 	vfma.f64	d3, d0, d2
 800a092:	eea0 4b03 	vfma.f64	d4, d0, d3
 800a096:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800a09a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800a09e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a0a2:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a0a6:	eeb0 3b46 	vmov.f64	d3, d6
 800a0aa:	ee31 1b47 	vsub.f64	d1, d1, d7
 800a0ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0b2:	ee31 9b09 	vadd.f64	d9, d1, d9
 800a0b6:	ed9d 6b00 	vldr	d6, [sp]
 800a0ba:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800a0be:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800a0c2:	193c      	adds	r4, r7, r4
 800a0c4:	2c3e      	cmp	r4, #62	; 0x3e
 800a0c6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800a0ca:	eea6 3b09 	vfma.f64	d3, d6, d9
 800a0ce:	d934      	bls.n	800a13a <pow+0x3e2>
 800a0d0:	428c      	cmp	r4, r1
 800a0d2:	da0d      	bge.n	800a0f0 <pow+0x398>
 800a0d4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a0d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0dc:	ee37 0b00 	vadd.f64	d0, d7, d0
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	f43f ae87 	beq.w	8009df4 <pow+0x9c>
 800a0e6:	eeb1 0b40 	vneg.f64	d0, d0
 800a0ea:	e683      	b.n	8009df4 <pow+0x9c>
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e771      	b.n	8009fd4 <pow+0x27c>
 800a0f0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800a0f4:	d920      	bls.n	800a138 <pow+0x3e0>
 800a0f6:	2a00      	cmp	r2, #0
 800a0f8:	f173 0300 	sbcs.w	r3, r3, #0
 800a0fc:	f6bf af51 	bge.w	8009fa2 <pow+0x24a>
 800a100:	b01b      	add	sp, #108	; 0x6c
 800a102:	ecbd 8b0a 	vpop	{d8-d12}
 800a106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10a:	f001 b82d 	b.w	800b168 <__math_uflow>
 800a10e:	bf00      	nop
 800a110:	00000000 	.word	0x00000000
 800a114:	43300000 	.word	0x43300000
 800a118:	fff00000 	.word	0xfff00000
 800a11c:	3ff00000 	.word	0x3ff00000
 800a120:	ffe00000 	.word	0xffe00000
 800a124:	7fe00000 	.word	0x7fe00000
 800a128:	7fdfffff 	.word	0x7fdfffff
 800a12c:	fcc00000 	.word	0xfcc00000
 800a130:	c0196aab 	.word	0xc0196aab
 800a134:	0800b840 	.word	0x0800b840
 800a138:	460f      	mov	r7, r1
 800a13a:	4e65      	ldr	r6, [pc, #404]	; (800a2d0 <pow+0x578>)
 800a13c:	ed9d 4b02 	vldr	d4, [sp, #8]
 800a140:	ed96 6b02 	vldr	d6, [r6, #8]
 800a144:	ed96 7b00 	vldr	d7, [r6]
 800a148:	eeb0 5b46 	vmov.f64	d5, d6
 800a14c:	eea4 5b07 	vfma.f64	d5, d4, d7
 800a150:	ed8d 5b00 	vstr	d5, [sp]
 800a154:	ee35 6b46 	vsub.f64	d6, d5, d6
 800a158:	eeb0 5b44 	vmov.f64	d5, d4
 800a15c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a160:	ed96 7b04 	vldr	d7, [r6, #16]
 800a164:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800a168:	eea6 5b07 	vfma.f64	d5, d6, d7
 800a16c:	eeb0 7b45 	vmov.f64	d7, d5
 800a170:	ed96 5b06 	vldr	d5, [r6, #24]
 800a174:	1849      	adds	r1, r1, r1
 800a176:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800a17a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800a17e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800a182:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800a186:	ee33 3b07 	vadd.f64	d3, d3, d7
 800a18a:	ee23 6b03 	vmul.f64	d6, d3, d3
 800a18e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800a192:	ed96 5b08 	vldr	d5, [r6, #32]
 800a196:	ee33 7b07 	vadd.f64	d7, d3, d7
 800a19a:	1814      	adds	r4, r2, r0
 800a19c:	0365      	lsls	r5, r4, #13
 800a19e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800a1a2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800a1a6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800a1aa:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800a1ae:	ee26 6b06 	vmul.f64	d6, d6, d6
 800a1b2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	eb10 0a04 	adds.w	sl, r0, r4
 800a1bc:	eea3 5b04 	vfma.f64	d5, d3, d4
 800a1c0:	eb45 0b0c 	adc.w	fp, r5, ip
 800a1c4:	eea6 7b05 	vfma.f64	d7, d6, d5
 800a1c8:	2f00      	cmp	r7, #0
 800a1ca:	d16a      	bne.n	800a2a2 <pow+0x54a>
 800a1cc:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	ea50 0301 	orrs.w	r3, r0, r1
 800a1d6:	f04f 0300 	mov.w	r3, #0
 800a1da:	d115      	bne.n	800a208 <pow+0x4b0>
 800a1dc:	eb1a 0303 	adds.w	r3, sl, r3
 800a1e0:	ee0b 3a10 	vmov	s22, r3
 800a1e4:	4b3b      	ldr	r3, [pc, #236]	; (800a2d4 <pow+0x57c>)
 800a1e6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800a2b8 <pow+0x560>
 800a1ea:	eb4b 0303 	adc.w	r3, fp, r3
 800a1ee:	ee0b 3a90 	vmov	s23, r3
 800a1f2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800a1f6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800a1fa:	b01b      	add	sp, #108	; 0x6c
 800a1fc:	ecbd 8b0a 	vpop	{d8-d12}
 800a200:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	f000 bff0 	b.w	800b1e8 <__math_check_oflow>
 800a208:	eb1a 0303 	adds.w	r3, sl, r3
 800a20c:	930a      	str	r3, [sp, #40]	; 0x28
 800a20e:	4b32      	ldr	r3, [pc, #200]	; (800a2d8 <pow+0x580>)
 800a210:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800a214:	eb4b 0303 	adc.w	r3, fp, r3
 800a218:	930b      	str	r3, [sp, #44]	; 0x2c
 800a21a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a21e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800a222:	ee35 7b06 	vadd.f64	d7, d5, d6
 800a226:	eeb0 3bc7 	vabs.f64	d3, d7
 800a22a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800a22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a232:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800a2c0 <pow+0x568>
 800a236:	d52b      	bpl.n	800a290 <pow+0x538>
 800a238:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a23c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a244:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800a248:	ee35 6b06 	vadd.f64	d6, d5, d6
 800a24c:	bf48      	it	mi
 800a24e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800a252:	ee37 3b04 	vadd.f64	d3, d7, d4
 800a256:	ee34 5b43 	vsub.f64	d5, d4, d3
 800a25a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a25e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a262:	ee37 7b03 	vadd.f64	d7, d7, d3
 800a266:	ee37 7b44 	vsub.f64	d7, d7, d4
 800a26a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a272:	d105      	bne.n	800a280 <pow+0x528>
 800a274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a276:	463a      	mov	r2, r7
 800a278:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a27c:	ec43 2b17 	vmov	d7, r2, r3
 800a280:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800a284:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800a288:	ee26 6b00 	vmul.f64	d6, d6, d0
 800a28c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800a290:	ee27 0b00 	vmul.f64	d0, d7, d0
 800a294:	b01b      	add	sp, #108	; 0x6c
 800a296:	ecbd 8b0a 	vpop	{d8-d12}
 800a29a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29e:	f000 bf9a 	b.w	800b1d6 <__math_check_uflow>
 800a2a2:	ec4b ab10 	vmov	d0, sl, fp
 800a2a6:	eea7 0b00 	vfma.f64	d0, d7, d0
 800a2aa:	e5a3      	b.n	8009df4 <pow+0x9c>
 800a2ac:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800a2c8 <pow+0x570>
 800a2b0:	e5a0      	b.n	8009df4 <pow+0x9c>
 800a2b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a2b6:	e59d      	b.n	8009df4 <pow+0x9c>
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	7f000000 	.word	0x7f000000
 800a2c0:	00000000 	.word	0x00000000
 800a2c4:	00100000 	.word	0x00100000
	...
 800a2d0:	0800ca80 	.word	0x0800ca80
 800a2d4:	c0f00000 	.word	0xc0f00000
 800a2d8:	3fe00000 	.word	0x3fe00000
 800a2dc:	00000000 	.word	0x00000000

0800a2e0 <atan>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	eeb0 7b40 	vmov.f64	d7, d0
 800a2e6:	ee17 5a90 	vmov	r5, s15
 800a2ea:	4b73      	ldr	r3, [pc, #460]	; (800a4b8 <atan+0x1d8>)
 800a2ec:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	dd13      	ble.n	800a31c <atan+0x3c>
 800a2f4:	4b71      	ldr	r3, [pc, #452]	; (800a4bc <atan+0x1dc>)
 800a2f6:	429c      	cmp	r4, r3
 800a2f8:	dc03      	bgt.n	800a302 <atan+0x22>
 800a2fa:	d107      	bne.n	800a30c <atan+0x2c>
 800a2fc:	ee10 3a10 	vmov	r3, s0
 800a300:	b123      	cbz	r3, 800a30c <atan+0x2c>
 800a302:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a306:	eeb0 0b47 	vmov.f64	d0, d7
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800a448 <atan+0x168>
 800a310:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800a450 <atan+0x170>
 800a314:	2d00      	cmp	r5, #0
 800a316:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800a31a:	e7f4      	b.n	800a306 <atan+0x26>
 800a31c:	4b68      	ldr	r3, [pc, #416]	; (800a4c0 <atan+0x1e0>)
 800a31e:	429c      	cmp	r4, r3
 800a320:	dc11      	bgt.n	800a346 <atan+0x66>
 800a322:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a326:	429c      	cmp	r4, r3
 800a328:	dc0a      	bgt.n	800a340 <atan+0x60>
 800a32a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800a32e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800a458 <atan+0x178>
 800a332:	ee30 6b06 	vadd.f64	d6, d0, d6
 800a336:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a33e:	dce2      	bgt.n	800a306 <atan+0x26>
 800a340:	f04f 33ff 	mov.w	r3, #4294967295
 800a344:	e013      	b.n	800a36e <atan+0x8e>
 800a346:	f000 f8c5 	bl	800a4d4 <fabs>
 800a34a:	4b5e      	ldr	r3, [pc, #376]	; (800a4c4 <atan+0x1e4>)
 800a34c:	429c      	cmp	r4, r3
 800a34e:	dc4f      	bgt.n	800a3f0 <atan+0x110>
 800a350:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a354:	429c      	cmp	r4, r3
 800a356:	dc41      	bgt.n	800a3dc <atan+0xfc>
 800a358:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a35c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a360:	2300      	movs	r3, #0
 800a362:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a366:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a36a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a36e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a460 <atan+0x180>
 800a372:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a376:	ee24 5b04 	vmul.f64	d5, d4, d4
 800a37a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800a468 <atan+0x188>
 800a37e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800a382:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800a470 <atan+0x190>
 800a386:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a38a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800a478 <atan+0x198>
 800a38e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a392:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800a480 <atan+0x1a0>
 800a396:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a39a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800a488 <atan+0x1a8>
 800a39e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800a490 <atan+0x1b0>
 800a3a2:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a3a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a498 <atan+0x1b8>
 800a3aa:	eea5 2b06 	vfma.f64	d2, d5, d6
 800a3ae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a4a0 <atan+0x1c0>
 800a3b2:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a3b6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800a4a8 <atan+0x1c8>
 800a3ba:	eea6 2b05 	vfma.f64	d2, d6, d5
 800a3be:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800a4b0 <atan+0x1d0>
 800a3c2:	1c5a      	adds	r2, r3, #1
 800a3c4:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a3c8:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a3cc:	eea3 6b04 	vfma.f64	d6, d3, d4
 800a3d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a3d4:	d121      	bne.n	800a41a <atan+0x13a>
 800a3d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a3da:	e794      	b.n	800a306 <atan+0x26>
 800a3dc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a3e6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a3ea:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a3ee:	e7be      	b.n	800a36e <atan+0x8e>
 800a3f0:	4b35      	ldr	r3, [pc, #212]	; (800a4c8 <atan+0x1e8>)
 800a3f2:	429c      	cmp	r4, r3
 800a3f4:	da0b      	bge.n	800a40e <atan+0x12e>
 800a3f6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a3fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a3fe:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a402:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a406:	2302      	movs	r3, #2
 800a408:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a40c:	e7af      	b.n	800a36e <atan+0x8e>
 800a40e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a412:	2303      	movs	r3, #3
 800a414:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a418:	e7a9      	b.n	800a36e <atan+0x8e>
 800a41a:	4a2c      	ldr	r2, [pc, #176]	; (800a4cc <atan+0x1ec>)
 800a41c:	492c      	ldr	r1, [pc, #176]	; (800a4d0 <atan+0x1f0>)
 800a41e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a422:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800a426:	ed93 5b00 	vldr	d5, [r3]
 800a42a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a42e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a432:	ed92 6b00 	vldr	d6, [r2]
 800a436:	2d00      	cmp	r5, #0
 800a438:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a43c:	bfb8      	it	lt
 800a43e:	eeb1 7b47 	vneglt.f64	d7, d7
 800a442:	e760      	b.n	800a306 <atan+0x26>
 800a444:	f3af 8000 	nop.w
 800a448:	54442d18 	.word	0x54442d18
 800a44c:	3ff921fb 	.word	0x3ff921fb
 800a450:	54442d18 	.word	0x54442d18
 800a454:	bff921fb 	.word	0xbff921fb
 800a458:	8800759c 	.word	0x8800759c
 800a45c:	7e37e43c 	.word	0x7e37e43c
 800a460:	e322da11 	.word	0xe322da11
 800a464:	3f90ad3a 	.word	0x3f90ad3a
 800a468:	24760deb 	.word	0x24760deb
 800a46c:	3fa97b4b 	.word	0x3fa97b4b
 800a470:	a0d03d51 	.word	0xa0d03d51
 800a474:	3fb10d66 	.word	0x3fb10d66
 800a478:	c54c206e 	.word	0xc54c206e
 800a47c:	3fb745cd 	.word	0x3fb745cd
 800a480:	920083ff 	.word	0x920083ff
 800a484:	3fc24924 	.word	0x3fc24924
 800a488:	5555550d 	.word	0x5555550d
 800a48c:	3fd55555 	.word	0x3fd55555
 800a490:	52defd9a 	.word	0x52defd9a
 800a494:	bfadde2d 	.word	0xbfadde2d
 800a498:	2c6a6c2f 	.word	0x2c6a6c2f
 800a49c:	bfa2b444 	.word	0xbfa2b444
 800a4a0:	af749a6d 	.word	0xaf749a6d
 800a4a4:	bfb3b0f2 	.word	0xbfb3b0f2
 800a4a8:	fe231671 	.word	0xfe231671
 800a4ac:	bfbc71c6 	.word	0xbfbc71c6
 800a4b0:	9998ebc4 	.word	0x9998ebc4
 800a4b4:	bfc99999 	.word	0xbfc99999
 800a4b8:	440fffff 	.word	0x440fffff
 800a4bc:	7ff00000 	.word	0x7ff00000
 800a4c0:	3fdbffff 	.word	0x3fdbffff
 800a4c4:	3ff2ffff 	.word	0x3ff2ffff
 800a4c8:	40038000 	.word	0x40038000
 800a4cc:	0800c888 	.word	0x0800c888
 800a4d0:	0800c8a8 	.word	0x0800c8a8

0800a4d4 <fabs>:
 800a4d4:	ec51 0b10 	vmov	r0, r1, d0
 800a4d8:	ee10 2a10 	vmov	r2, s0
 800a4dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a4e0:	ec43 2b10 	vmov	d0, r2, r3
 800a4e4:	4770      	bx	lr
	...

0800a4e8 <sin>:
 800a4e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4ea:	eeb0 7b40 	vmov.f64	d7, d0
 800a4ee:	ee17 3a90 	vmov	r3, s15
 800a4f2:	4a1f      	ldr	r2, [pc, #124]	; (800a570 <sin+0x88>)
 800a4f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	dc05      	bgt.n	800a508 <sin+0x20>
 800a4fc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800a568 <sin+0x80>
 800a500:	2000      	movs	r0, #0
 800a502:	f000 fdbd 	bl	800b080 <__kernel_sin>
 800a506:	e004      	b.n	800a512 <sin+0x2a>
 800a508:	4a1a      	ldr	r2, [pc, #104]	; (800a574 <sin+0x8c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	dd04      	ble.n	800a518 <sin+0x30>
 800a50e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a512:	b005      	add	sp, #20
 800a514:	f85d fb04 	ldr.w	pc, [sp], #4
 800a518:	4668      	mov	r0, sp
 800a51a:	f000 f981 	bl	800a820 <__ieee754_rem_pio2>
 800a51e:	f000 0003 	and.w	r0, r0, #3
 800a522:	2801      	cmp	r0, #1
 800a524:	d008      	beq.n	800a538 <sin+0x50>
 800a526:	2802      	cmp	r0, #2
 800a528:	d00d      	beq.n	800a546 <sin+0x5e>
 800a52a:	b9b0      	cbnz	r0, 800a55a <sin+0x72>
 800a52c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a530:	ed9d 0b00 	vldr	d0, [sp]
 800a534:	2001      	movs	r0, #1
 800a536:	e7e4      	b.n	800a502 <sin+0x1a>
 800a538:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a53c:	ed9d 0b00 	vldr	d0, [sp]
 800a540:	f000 fab2 	bl	800aaa8 <__kernel_cos>
 800a544:	e7e5      	b.n	800a512 <sin+0x2a>
 800a546:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a54a:	ed9d 0b00 	vldr	d0, [sp]
 800a54e:	2001      	movs	r0, #1
 800a550:	f000 fd96 	bl	800b080 <__kernel_sin>
 800a554:	eeb1 0b40 	vneg.f64	d0, d0
 800a558:	e7db      	b.n	800a512 <sin+0x2a>
 800a55a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a55e:	ed9d 0b00 	vldr	d0, [sp]
 800a562:	f000 faa1 	bl	800aaa8 <__kernel_cos>
 800a566:	e7f5      	b.n	800a554 <sin+0x6c>
	...
 800a570:	3fe921fb 	.word	0x3fe921fb
 800a574:	7fefffff 	.word	0x7fefffff

0800a578 <tanh>:
 800a578:	b510      	push	{r4, lr}
 800a57a:	eeb0 6b40 	vmov.f64	d6, d0
 800a57e:	ee16 4a90 	vmov	r4, s13
 800a582:	4a25      	ldr	r2, [pc, #148]	; (800a618 <tanh+0xa0>)
 800a584:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a588:	4293      	cmp	r3, r2
 800a58a:	ed2d 8b02 	vpush	{d8}
 800a58e:	dd0c      	ble.n	800a5aa <tanh+0x32>
 800a590:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a594:	ee80 7b06 	vdiv.f64	d7, d0, d6
 800a598:	2c00      	cmp	r4, #0
 800a59a:	bfac      	ite	ge
 800a59c:	ee37 0b00 	vaddge.f64	d0, d7, d0
 800a5a0:	ee37 0b40 	vsublt.f64	d0, d7, d0
 800a5a4:	ecbd 8b02 	vpop	{d8}
 800a5a8:	bd10      	pop	{r4, pc}
 800a5aa:	4a1c      	ldr	r2, [pc, #112]	; (800a61c <tanh+0xa4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	dc30      	bgt.n	800a612 <tanh+0x9a>
 800a5b0:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 800a5b4:	da06      	bge.n	800a5c4 <tanh+0x4c>
 800a5b6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a5ba:	ee30 7b07 	vadd.f64	d7, d0, d7
 800a5be:	ee27 0b00 	vmul.f64	d0, d7, d0
 800a5c2:	e7ef      	b.n	800a5a4 <tanh+0x2c>
 800a5c4:	4a16      	ldr	r2, [pc, #88]	; (800a620 <tanh+0xa8>)
 800a5c6:	eeb0 8b00 	vmov.f64	d8, #0	; 0x40000000  2.0
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	dd12      	ble.n	800a5f4 <tanh+0x7c>
 800a5ce:	f7ff ff81 	bl	800a4d4 <fabs>
 800a5d2:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a5d6:	f000 fe1b 	bl	800b210 <expm1>
 800a5da:	ee30 0b08 	vadd.f64	d0, d0, d8
 800a5de:	ee88 7b00 	vdiv.f64	d7, d8, d0
 800a5e2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a5e6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a5ea:	2c00      	cmp	r4, #0
 800a5ec:	bfb8      	it	lt
 800a5ee:	eeb1 0b40 	vneglt.f64	d0, d0
 800a5f2:	e7d7      	b.n	800a5a4 <tanh+0x2c>
 800a5f4:	f7ff ff6e 	bl	800a4d4 <fabs>
 800a5f8:	eeb8 7b00 	vmov.f64	d7, #128	; 0xc0000000 -2.0
 800a5fc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a600:	f000 fe06 	bl	800b210 <expm1>
 800a604:	eeb1 6b40 	vneg.f64	d6, d0
 800a608:	ee30 8b08 	vadd.f64	d8, d0, d8
 800a60c:	ee86 0b08 	vdiv.f64	d0, d6, d8
 800a610:	e7eb      	b.n	800a5ea <tanh+0x72>
 800a612:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a616:	e7e8      	b.n	800a5ea <tanh+0x72>
 800a618:	7fefffff 	.word	0x7fefffff
 800a61c:	4035ffff 	.word	0x4035ffff
 800a620:	3fefffff 	.word	0x3fefffff

0800a624 <atan2>:
 800a624:	f000 b82c 	b.w	800a680 <__ieee754_atan2>

0800a628 <sqrt>:
 800a628:	b508      	push	{r3, lr}
 800a62a:	ed2d 8b04 	vpush	{d8-d9}
 800a62e:	eeb0 8b40 	vmov.f64	d8, d0
 800a632:	f000 fa35 	bl	800aaa0 <__ieee754_sqrt>
 800a636:	4b10      	ldr	r3, [pc, #64]	; (800a678 <sqrt+0x50>)
 800a638:	f993 3000 	ldrsb.w	r3, [r3]
 800a63c:	3301      	adds	r3, #1
 800a63e:	d011      	beq.n	800a664 <sqrt+0x3c>
 800a640:	eeb4 8b48 	vcmp.f64	d8, d8
 800a644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a648:	d60c      	bvs.n	800a664 <sqrt+0x3c>
 800a64a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 800a670 <sqrt+0x48>
 800a64e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a656:	d505      	bpl.n	800a664 <sqrt+0x3c>
 800a658:	f7ff fa86 	bl	8009b68 <__errno>
 800a65c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800a660:	2321      	movs	r3, #33	; 0x21
 800a662:	6003      	str	r3, [r0, #0]
 800a664:	ecbd 8b04 	vpop	{d8-d9}
 800a668:	bd08      	pop	{r3, pc}
 800a66a:	bf00      	nop
 800a66c:	f3af 8000 	nop.w
	...
 800a678:	24000074 	.word	0x24000074
 800a67c:	00000000 	.word	0x00000000

0800a680 <__ieee754_atan2>:
 800a680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a682:	ee11 6a10 	vmov	r6, s2
 800a686:	ee11 0a90 	vmov	r0, s3
 800a68a:	4273      	negs	r3, r6
 800a68c:	4f60      	ldr	r7, [pc, #384]	; (800a810 <__ieee754_atan2+0x190>)
 800a68e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a692:	4333      	orrs	r3, r6
 800a694:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a698:	42bb      	cmp	r3, r7
 800a69a:	ed8d 0b00 	vstr	d0, [sp]
 800a69e:	d80b      	bhi.n	800a6b8 <__ieee754_atan2+0x38>
 800a6a0:	e9dd c500 	ldrd	ip, r5, [sp]
 800a6a4:	f1cc 0100 	rsb	r1, ip, #0
 800a6a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a6ac:	ea41 010c 	orr.w	r1, r1, ip
 800a6b0:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800a6b4:	42b9      	cmp	r1, r7
 800a6b6:	d906      	bls.n	800a6c6 <__ieee754_atan2+0x46>
 800a6b8:	ed9d 7b00 	vldr	d7, [sp]
 800a6bc:	ee37 7b01 	vadd.f64	d7, d7, d1
 800a6c0:	ed8d 7b00 	vstr	d7, [sp]
 800a6c4:	e054      	b.n	800a770 <__ieee754_atan2+0xf0>
 800a6c6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800a6ca:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800a6ce:	4331      	orrs	r1, r6
 800a6d0:	d104      	bne.n	800a6dc <__ieee754_atan2+0x5c>
 800a6d2:	b003      	add	sp, #12
 800a6d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a6d8:	f7ff be02 	b.w	800a2e0 <atan>
 800a6dc:	1784      	asrs	r4, r0, #30
 800a6de:	f004 0402 	and.w	r4, r4, #2
 800a6e2:	ea53 010c 	orrs.w	r1, r3, ip
 800a6e6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800a6ea:	d109      	bne.n	800a700 <__ieee754_atan2+0x80>
 800a6ec:	2c02      	cmp	r4, #2
 800a6ee:	d069      	beq.n	800a7c4 <__ieee754_atan2+0x144>
 800a6f0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800a7d8 <__ieee754_atan2+0x158>
 800a6f4:	ed9d 6b00 	vldr	d6, [sp]
 800a6f8:	2c03      	cmp	r4, #3
 800a6fa:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800a6fe:	e7df      	b.n	800a6c0 <__ieee754_atan2+0x40>
 800a700:	ea52 0106 	orrs.w	r1, r2, r6
 800a704:	d107      	bne.n	800a716 <__ieee754_atan2+0x96>
 800a706:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800a7e0 <__ieee754_atan2+0x160>
 800a70a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800a7e8 <__ieee754_atan2+0x168>
 800a70e:	2d00      	cmp	r5, #0
 800a710:	fe26 7b07 	vselge.f64	d7, d6, d7
 800a714:	e7d4      	b.n	800a6c0 <__ieee754_atan2+0x40>
 800a716:	42ba      	cmp	r2, r7
 800a718:	d10f      	bne.n	800a73a <__ieee754_atan2+0xba>
 800a71a:	4293      	cmp	r3, r2
 800a71c:	f104 34ff 	add.w	r4, r4, #4294967295
 800a720:	d107      	bne.n	800a732 <__ieee754_atan2+0xb2>
 800a722:	2c02      	cmp	r4, #2
 800a724:	d851      	bhi.n	800a7ca <__ieee754_atan2+0x14a>
 800a726:	4b3b      	ldr	r3, [pc, #236]	; (800a814 <__ieee754_atan2+0x194>)
 800a728:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a72c:	ed94 7b00 	vldr	d7, [r4]
 800a730:	e7c6      	b.n	800a6c0 <__ieee754_atan2+0x40>
 800a732:	2c02      	cmp	r4, #2
 800a734:	d84c      	bhi.n	800a7d0 <__ieee754_atan2+0x150>
 800a736:	4b38      	ldr	r3, [pc, #224]	; (800a818 <__ieee754_atan2+0x198>)
 800a738:	e7f6      	b.n	800a728 <__ieee754_atan2+0xa8>
 800a73a:	42bb      	cmp	r3, r7
 800a73c:	d0e3      	beq.n	800a706 <__ieee754_atan2+0x86>
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a744:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a748:	da16      	bge.n	800a778 <__ieee754_atan2+0xf8>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	da01      	bge.n	800a752 <__ieee754_atan2+0xd2>
 800a74e:	323c      	adds	r2, #60	; 0x3c
 800a750:	db17      	blt.n	800a782 <__ieee754_atan2+0x102>
 800a752:	ed9d 7b00 	vldr	d7, [sp]
 800a756:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800a75a:	f7ff febb 	bl	800a4d4 <fabs>
 800a75e:	f7ff fdbf 	bl	800a2e0 <atan>
 800a762:	ed8d 0b00 	vstr	d0, [sp]
 800a766:	2c01      	cmp	r4, #1
 800a768:	d00e      	beq.n	800a788 <__ieee754_atan2+0x108>
 800a76a:	2c02      	cmp	r4, #2
 800a76c:	d014      	beq.n	800a798 <__ieee754_atan2+0x118>
 800a76e:	b9f4      	cbnz	r4, 800a7ae <__ieee754_atan2+0x12e>
 800a770:	ed9d 0b00 	vldr	d0, [sp]
 800a774:	b003      	add	sp, #12
 800a776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a778:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800a7e0 <__ieee754_atan2+0x160>
 800a77c:	ed8d 7b00 	vstr	d7, [sp]
 800a780:	e7f1      	b.n	800a766 <__ieee754_atan2+0xe6>
 800a782:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 800a7f0 <__ieee754_atan2+0x170>
 800a786:	e7f9      	b.n	800a77c <__ieee754_atan2+0xfc>
 800a788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a78c:	9901      	ldr	r1, [sp, #4]
 800a78e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a792:	e9cd 2300 	strd	r2, r3, [sp]
 800a796:	e7eb      	b.n	800a770 <__ieee754_atan2+0xf0>
 800a798:	ed9d 6b00 	vldr	d6, [sp]
 800a79c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a7f8 <__ieee754_atan2+0x178>
 800a7a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a7a4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 800a800 <__ieee754_atan2+0x180>
 800a7a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a7ac:	e788      	b.n	800a6c0 <__ieee754_atan2+0x40>
 800a7ae:	ed9d 6b00 	vldr	d6, [sp]
 800a7b2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800a7f8 <__ieee754_atan2+0x178>
 800a7b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a7ba:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800a800 <__ieee754_atan2+0x180>
 800a7be:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a7c2:	e77d      	b.n	800a6c0 <__ieee754_atan2+0x40>
 800a7c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800a800 <__ieee754_atan2+0x180>
 800a7c8:	e77a      	b.n	800a6c0 <__ieee754_atan2+0x40>
 800a7ca:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800a808 <__ieee754_atan2+0x188>
 800a7ce:	e777      	b.n	800a6c0 <__ieee754_atan2+0x40>
 800a7d0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a7f0 <__ieee754_atan2+0x170>
 800a7d4:	e774      	b.n	800a6c0 <__ieee754_atan2+0x40>
 800a7d6:	bf00      	nop
 800a7d8:	54442d18 	.word	0x54442d18
 800a7dc:	c00921fb 	.word	0xc00921fb
 800a7e0:	54442d18 	.word	0x54442d18
 800a7e4:	3ff921fb 	.word	0x3ff921fb
 800a7e8:	54442d18 	.word	0x54442d18
 800a7ec:	bff921fb 	.word	0xbff921fb
	...
 800a7f8:	33145c07 	.word	0x33145c07
 800a7fc:	3ca1a626 	.word	0x3ca1a626
 800a800:	54442d18 	.word	0x54442d18
 800a804:	400921fb 	.word	0x400921fb
 800a808:	54442d18 	.word	0x54442d18
 800a80c:	3fe921fb 	.word	0x3fe921fb
 800a810:	7ff00000 	.word	0x7ff00000
 800a814:	0800c8c8 	.word	0x0800c8c8
 800a818:	0800c8e0 	.word	0x0800c8e0
 800a81c:	00000000 	.word	0x00000000

0800a820 <__ieee754_rem_pio2>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	eeb0 7b40 	vmov.f64	d7, d0
 800a826:	ee17 5a90 	vmov	r5, s15
 800a82a:	4b97      	ldr	r3, [pc, #604]	; (800aa88 <__ieee754_rem_pio2+0x268>)
 800a82c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a830:	429e      	cmp	r6, r3
 800a832:	b088      	sub	sp, #32
 800a834:	4604      	mov	r4, r0
 800a836:	dc07      	bgt.n	800a848 <__ieee754_rem_pio2+0x28>
 800a838:	2200      	movs	r2, #0
 800a83a:	2300      	movs	r3, #0
 800a83c:	ed84 0b00 	vstr	d0, [r4]
 800a840:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a844:	2000      	movs	r0, #0
 800a846:	e01b      	b.n	800a880 <__ieee754_rem_pio2+0x60>
 800a848:	4b90      	ldr	r3, [pc, #576]	; (800aa8c <__ieee754_rem_pio2+0x26c>)
 800a84a:	429e      	cmp	r6, r3
 800a84c:	dc3b      	bgt.n	800a8c6 <__ieee754_rem_pio2+0xa6>
 800a84e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800a852:	2d00      	cmp	r5, #0
 800a854:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800aa48 <__ieee754_rem_pio2+0x228>
 800a858:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800a85c:	dd19      	ble.n	800a892 <__ieee754_rem_pio2+0x72>
 800a85e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a862:	429e      	cmp	r6, r3
 800a864:	d00e      	beq.n	800a884 <__ieee754_rem_pio2+0x64>
 800a866:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800aa50 <__ieee754_rem_pio2+0x230>
 800a86a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800a86e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a872:	ed84 5b00 	vstr	d5, [r4]
 800a876:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a87a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a87e:	2001      	movs	r0, #1
 800a880:	b008      	add	sp, #32
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800aa58 <__ieee754_rem_pio2+0x238>
 800a888:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a88c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800aa60 <__ieee754_rem_pio2+0x240>
 800a890:	e7eb      	b.n	800a86a <__ieee754_rem_pio2+0x4a>
 800a892:	429e      	cmp	r6, r3
 800a894:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a898:	d00e      	beq.n	800a8b8 <__ieee754_rem_pio2+0x98>
 800a89a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800aa50 <__ieee754_rem_pio2+0x230>
 800a89e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a8a2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a8a6:	ed84 5b00 	vstr	d5, [r4]
 800a8aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b2:	ed84 7b02 	vstr	d7, [r4, #8]
 800a8b6:	e7e3      	b.n	800a880 <__ieee754_rem_pio2+0x60>
 800a8b8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800aa58 <__ieee754_rem_pio2+0x238>
 800a8bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a8c0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800aa60 <__ieee754_rem_pio2+0x240>
 800a8c4:	e7eb      	b.n	800a89e <__ieee754_rem_pio2+0x7e>
 800a8c6:	4b72      	ldr	r3, [pc, #456]	; (800aa90 <__ieee754_rem_pio2+0x270>)
 800a8c8:	429e      	cmp	r6, r3
 800a8ca:	dc6e      	bgt.n	800a9aa <__ieee754_rem_pio2+0x18a>
 800a8cc:	f7ff fe02 	bl	800a4d4 <fabs>
 800a8d0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a8d4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800aa68 <__ieee754_rem_pio2+0x248>
 800a8d8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a8dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a8e0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a8e4:	ee17 0a90 	vmov	r0, s15
 800a8e8:	eeb1 4b45 	vneg.f64	d4, d5
 800a8ec:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800aa48 <__ieee754_rem_pio2+0x228>
 800a8f0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a8f4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800aa50 <__ieee754_rem_pio2+0x230>
 800a8f8:	281f      	cmp	r0, #31
 800a8fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a8fe:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a902:	dc08      	bgt.n	800a916 <__ieee754_rem_pio2+0xf6>
 800a904:	4b63      	ldr	r3, [pc, #396]	; (800aa94 <__ieee754_rem_pio2+0x274>)
 800a906:	1e42      	subs	r2, r0, #1
 800a908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90c:	42b3      	cmp	r3, r6
 800a90e:	d002      	beq.n	800a916 <__ieee754_rem_pio2+0xf6>
 800a910:	ed84 6b00 	vstr	d6, [r4]
 800a914:	e024      	b.n	800a960 <__ieee754_rem_pio2+0x140>
 800a916:	ee16 3a90 	vmov	r3, s13
 800a91a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a91e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a922:	2b10      	cmp	r3, #16
 800a924:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a928:	ddf2      	ble.n	800a910 <__ieee754_rem_pio2+0xf0>
 800a92a:	eeb0 6b40 	vmov.f64	d6, d0
 800a92e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800aa58 <__ieee754_rem_pio2+0x238>
 800a932:	eea4 6b03 	vfma.f64	d6, d4, d3
 800a936:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a93a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a93e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800aa60 <__ieee754_rem_pio2+0x240>
 800a942:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a946:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a94a:	ee13 3a90 	vmov	r3, s7
 800a94e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	2b31      	cmp	r3, #49	; 0x31
 800a956:	dc17      	bgt.n	800a988 <__ieee754_rem_pio2+0x168>
 800a958:	eeb0 0b46 	vmov.f64	d0, d6
 800a95c:	ed84 3b00 	vstr	d3, [r4]
 800a960:	ed94 6b00 	vldr	d6, [r4]
 800a964:	2d00      	cmp	r5, #0
 800a966:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a96a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800a96e:	ed84 7b02 	vstr	d7, [r4, #8]
 800a972:	da85      	bge.n	800a880 <__ieee754_rem_pio2+0x60>
 800a974:	eeb1 6b46 	vneg.f64	d6, d6
 800a978:	ed84 6b00 	vstr	d6, [r4]
 800a97c:	eeb1 7b47 	vneg.f64	d7, d7
 800a980:	4240      	negs	r0, r0
 800a982:	ed84 7b02 	vstr	d7, [r4, #8]
 800a986:	e77b      	b.n	800a880 <__ieee754_rem_pio2+0x60>
 800a988:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800aa70 <__ieee754_rem_pio2+0x250>
 800a98c:	eeb0 0b46 	vmov.f64	d0, d6
 800a990:	eea4 0b03 	vfma.f64	d0, d4, d3
 800a994:	ee36 7b40 	vsub.f64	d7, d6, d0
 800a998:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800aa78 <__ieee754_rem_pio2+0x258>
 800a99c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a9a0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800a9a4:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a9a8:	e7b2      	b.n	800a910 <__ieee754_rem_pio2+0xf0>
 800a9aa:	4b3b      	ldr	r3, [pc, #236]	; (800aa98 <__ieee754_rem_pio2+0x278>)
 800a9ac:	429e      	cmp	r6, r3
 800a9ae:	dd06      	ble.n	800a9be <__ieee754_rem_pio2+0x19e>
 800a9b0:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a9b4:	ed80 7b02 	vstr	d7, [r0, #8]
 800a9b8:	ed80 7b00 	vstr	d7, [r0]
 800a9bc:	e742      	b.n	800a844 <__ieee754_rem_pio2+0x24>
 800a9be:	1532      	asrs	r2, r6, #20
 800a9c0:	ee10 0a10 	vmov	r0, s0
 800a9c4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800a9c8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800a9cc:	ec41 0b17 	vmov	d7, r0, r1
 800a9d0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a9d4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800aa80 <__ieee754_rem_pio2+0x260>
 800a9d8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a9dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a9e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a9e8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a9ec:	a902      	add	r1, sp, #8
 800a9ee:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a9f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9f6:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a9fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a9fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aa02:	2603      	movs	r6, #3
 800aa04:	4608      	mov	r0, r1
 800aa06:	ed91 7b04 	vldr	d7, [r1, #16]
 800aa0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa12:	4633      	mov	r3, r6
 800aa14:	f1a1 0108 	sub.w	r1, r1, #8
 800aa18:	f106 36ff 	add.w	r6, r6, #4294967295
 800aa1c:	d0f3      	beq.n	800aa06 <__ieee754_rem_pio2+0x1e6>
 800aa1e:	491f      	ldr	r1, [pc, #124]	; (800aa9c <__ieee754_rem_pio2+0x27c>)
 800aa20:	9101      	str	r1, [sp, #4]
 800aa22:	2102      	movs	r1, #2
 800aa24:	9100      	str	r1, [sp, #0]
 800aa26:	4621      	mov	r1, r4
 800aa28:	f000 f8aa 	bl	800ab80 <__kernel_rem_pio2>
 800aa2c:	2d00      	cmp	r5, #0
 800aa2e:	f6bf af27 	bge.w	800a880 <__ieee754_rem_pio2+0x60>
 800aa32:	ed94 7b00 	vldr	d7, [r4]
 800aa36:	eeb1 7b47 	vneg.f64	d7, d7
 800aa3a:	ed84 7b00 	vstr	d7, [r4]
 800aa3e:	ed94 7b02 	vldr	d7, [r4, #8]
 800aa42:	e79b      	b.n	800a97c <__ieee754_rem_pio2+0x15c>
 800aa44:	f3af 8000 	nop.w
 800aa48:	54400000 	.word	0x54400000
 800aa4c:	3ff921fb 	.word	0x3ff921fb
 800aa50:	1a626331 	.word	0x1a626331
 800aa54:	3dd0b461 	.word	0x3dd0b461
 800aa58:	1a600000 	.word	0x1a600000
 800aa5c:	3dd0b461 	.word	0x3dd0b461
 800aa60:	2e037073 	.word	0x2e037073
 800aa64:	3ba3198a 	.word	0x3ba3198a
 800aa68:	6dc9c883 	.word	0x6dc9c883
 800aa6c:	3fe45f30 	.word	0x3fe45f30
 800aa70:	2e000000 	.word	0x2e000000
 800aa74:	3ba3198a 	.word	0x3ba3198a
 800aa78:	252049c1 	.word	0x252049c1
 800aa7c:	397b839a 	.word	0x397b839a
 800aa80:	00000000 	.word	0x00000000
 800aa84:	41700000 	.word	0x41700000
 800aa88:	3fe921fb 	.word	0x3fe921fb
 800aa8c:	4002d97b 	.word	0x4002d97b
 800aa90:	413921fb 	.word	0x413921fb
 800aa94:	0800c8f8 	.word	0x0800c8f8
 800aa98:	7fefffff 	.word	0x7fefffff
 800aa9c:	0800c978 	.word	0x0800c978

0800aaa0 <__ieee754_sqrt>:
 800aaa0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800aaa4:	4770      	bx	lr
	...

0800aaa8 <__kernel_cos>:
 800aaa8:	ee10 1a90 	vmov	r1, s1
 800aaac:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800aab0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800aab4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800aab8:	da05      	bge.n	800aac6 <__kernel_cos+0x1e>
 800aaba:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800aabe:	ee17 3a90 	vmov	r3, s15
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d03d      	beq.n	800ab42 <__kernel_cos+0x9a>
 800aac6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800aaca:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ab48 <__kernel_cos+0xa0>
 800aace:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ab50 <__kernel_cos+0xa8>
 800aad2:	eea3 6b07 	vfma.f64	d6, d3, d7
 800aad6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ab58 <__kernel_cos+0xb0>
 800aada:	eea6 7b03 	vfma.f64	d7, d6, d3
 800aade:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ab60 <__kernel_cos+0xb8>
 800aae2:	eea7 6b03 	vfma.f64	d6, d7, d3
 800aae6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ab68 <__kernel_cos+0xc0>
 800aaea:	4b23      	ldr	r3, [pc, #140]	; (800ab78 <__kernel_cos+0xd0>)
 800aaec:	eea6 7b03 	vfma.f64	d7, d6, d3
 800aaf0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ab70 <__kernel_cos+0xc8>
 800aaf4:	4299      	cmp	r1, r3
 800aaf6:	eea7 6b03 	vfma.f64	d6, d7, d3
 800aafa:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800aafe:	ee26 5b03 	vmul.f64	d5, d6, d3
 800ab02:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ab06:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800ab0a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ab0e:	dc04      	bgt.n	800ab1a <__kernel_cos+0x72>
 800ab10:	ee37 6b46 	vsub.f64	d6, d7, d6
 800ab14:	ee34 0b46 	vsub.f64	d0, d4, d6
 800ab18:	4770      	bx	lr
 800ab1a:	4b18      	ldr	r3, [pc, #96]	; (800ab7c <__kernel_cos+0xd4>)
 800ab1c:	4299      	cmp	r1, r3
 800ab1e:	dc0d      	bgt.n	800ab3c <__kernel_cos+0x94>
 800ab20:	2200      	movs	r2, #0
 800ab22:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800ab26:	ec43 2b15 	vmov	d5, r2, r3
 800ab2a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800ab2e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ab32:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ab36:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ab3a:	4770      	bx	lr
 800ab3c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ab40:	e7f3      	b.n	800ab2a <__kernel_cos+0x82>
 800ab42:	eeb0 0b44 	vmov.f64	d0, d4
 800ab46:	4770      	bx	lr
 800ab48:	be8838d4 	.word	0xbe8838d4
 800ab4c:	bda8fae9 	.word	0xbda8fae9
 800ab50:	bdb4b1c4 	.word	0xbdb4b1c4
 800ab54:	3e21ee9e 	.word	0x3e21ee9e
 800ab58:	809c52ad 	.word	0x809c52ad
 800ab5c:	be927e4f 	.word	0xbe927e4f
 800ab60:	19cb1590 	.word	0x19cb1590
 800ab64:	3efa01a0 	.word	0x3efa01a0
 800ab68:	16c15177 	.word	0x16c15177
 800ab6c:	bf56c16c 	.word	0xbf56c16c
 800ab70:	5555554c 	.word	0x5555554c
 800ab74:	3fa55555 	.word	0x3fa55555
 800ab78:	3fd33332 	.word	0x3fd33332
 800ab7c:	3fe90000 	.word	0x3fe90000

0800ab80 <__kernel_rem_pio2>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	ed2d 8b06 	vpush	{d8-d10}
 800ab88:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800ab8c:	469b      	mov	fp, r3
 800ab8e:	460f      	mov	r7, r1
 800ab90:	4bcf      	ldr	r3, [pc, #828]	; (800aed0 <__kernel_rem_pio2+0x350>)
 800ab92:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800ab94:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800ab98:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800ab9c:	9000      	str	r0, [sp, #0]
 800ab9e:	f112 0f14 	cmn.w	r2, #20
 800aba2:	bfa8      	it	ge
 800aba4:	2318      	movge	r3, #24
 800aba6:	f10b 31ff 	add.w	r1, fp, #4294967295
 800abaa:	bfb8      	it	lt
 800abac:	2300      	movlt	r3, #0
 800abae:	f06f 0417 	mvn.w	r4, #23
 800abb2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800aeb8 <__kernel_rem_pio2+0x338>
 800abb6:	bfa4      	itt	ge
 800abb8:	f1a2 0a03 	subge.w	sl, r2, #3
 800abbc:	fb9a f3f3 	sdivge	r3, sl, r3
 800abc0:	fb03 4404 	mla	r4, r3, r4, r4
 800abc4:	1a5d      	subs	r5, r3, r1
 800abc6:	4414      	add	r4, r2
 800abc8:	eb09 0601 	add.w	r6, r9, r1
 800abcc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800abd0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800abd4:	2200      	movs	r2, #0
 800abd6:	42b2      	cmp	r2, r6
 800abd8:	dd12      	ble.n	800ac00 <__kernel_rem_pio2+0x80>
 800abda:	aa18      	add	r2, sp, #96	; 0x60
 800abdc:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800abe0:	460e      	mov	r6, r1
 800abe2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800abe6:	f1cb 0a01 	rsb	sl, fp, #1
 800abea:	eb0a 0006 	add.w	r0, sl, r6
 800abee:	4581      	cmp	r9, r0
 800abf0:	db25      	blt.n	800ac3e <__kernel_rem_pio2+0xbe>
 800abf2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800aeb8 <__kernel_rem_pio2+0x338>
 800abf6:	f8dd e000 	ldr.w	lr, [sp]
 800abfa:	4615      	mov	r5, r2
 800abfc:	2000      	movs	r0, #0
 800abfe:	e015      	b.n	800ac2c <__kernel_rem_pio2+0xac>
 800ac00:	42d5      	cmn	r5, r2
 800ac02:	d409      	bmi.n	800ac18 <__kernel_rem_pio2+0x98>
 800ac04:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800ac08:	ee07 0a90 	vmov	s15, r0
 800ac0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac10:	eca8 7b02 	vstmia	r8!, {d7}
 800ac14:	3201      	adds	r2, #1
 800ac16:	e7de      	b.n	800abd6 <__kernel_rem_pio2+0x56>
 800ac18:	eeb0 7b46 	vmov.f64	d7, d6
 800ac1c:	e7f8      	b.n	800ac10 <__kernel_rem_pio2+0x90>
 800ac1e:	ecbe 5b02 	vldmia	lr!, {d5}
 800ac22:	ed95 6b00 	vldr	d6, [r5]
 800ac26:	3001      	adds	r0, #1
 800ac28:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ac2c:	4288      	cmp	r0, r1
 800ac2e:	f1a5 0508 	sub.w	r5, r5, #8
 800ac32:	ddf4      	ble.n	800ac1e <__kernel_rem_pio2+0x9e>
 800ac34:	eca8 7b02 	vstmia	r8!, {d7}
 800ac38:	3208      	adds	r2, #8
 800ac3a:	3601      	adds	r6, #1
 800ac3c:	e7d5      	b.n	800abea <__kernel_rem_pio2+0x6a>
 800ac3e:	aa04      	add	r2, sp, #16
 800ac40:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800aec0 <__kernel_rem_pio2+0x340>
 800ac44:	ed9f aba0 	vldr	d10, [pc, #640]	; 800aec8 <__kernel_rem_pio2+0x348>
 800ac48:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ac4c:	9201      	str	r2, [sp, #4]
 800ac4e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800ac52:	464e      	mov	r6, r9
 800ac54:	ab90      	add	r3, sp, #576	; 0x240
 800ac56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac5a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800ac5e:	ab04      	add	r3, sp, #16
 800ac60:	4618      	mov	r0, r3
 800ac62:	4632      	mov	r2, r6
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	dc4e      	bgt.n	800ad06 <__kernel_rem_pio2+0x186>
 800ac68:	4620      	mov	r0, r4
 800ac6a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800ac6e:	f000 fc9f 	bl	800b5b0 <scalbn>
 800ac72:	eeb0 8b40 	vmov.f64	d8, d0
 800ac76:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ac7a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ac7e:	f000 fc23 	bl	800b4c8 <floor>
 800ac82:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ac86:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ac8a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ac8e:	2c00      	cmp	r4, #0
 800ac90:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800ac94:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800ac98:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ac9c:	ee17 8a90 	vmov	r8, s15
 800aca0:	dd46      	ble.n	800ad30 <__kernel_rem_pio2+0x1b0>
 800aca2:	1e70      	subs	r0, r6, #1
 800aca4:	aa04      	add	r2, sp, #16
 800aca6:	f1c4 0c18 	rsb	ip, r4, #24
 800acaa:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800acae:	fa45 f20c 	asr.w	r2, r5, ip
 800acb2:	4490      	add	r8, r2
 800acb4:	fa02 f20c 	lsl.w	r2, r2, ip
 800acb8:	1aad      	subs	r5, r5, r2
 800acba:	aa04      	add	r2, sp, #16
 800acbc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800acc0:	f1c4 0217 	rsb	r2, r4, #23
 800acc4:	4115      	asrs	r5, r2
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	dd41      	ble.n	800ad4e <__kernel_rem_pio2+0x1ce>
 800acca:	f04f 0c00 	mov.w	ip, #0
 800acce:	f108 0801 	add.w	r8, r8, #1
 800acd2:	4660      	mov	r0, ip
 800acd4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800acd8:	4566      	cmp	r6, ip
 800acda:	dc69      	bgt.n	800adb0 <__kernel_rem_pio2+0x230>
 800acdc:	2c00      	cmp	r4, #0
 800acde:	dd03      	ble.n	800ace8 <__kernel_rem_pio2+0x168>
 800ace0:	2c01      	cmp	r4, #1
 800ace2:	d076      	beq.n	800add2 <__kernel_rem_pio2+0x252>
 800ace4:	2c02      	cmp	r4, #2
 800ace6:	d07f      	beq.n	800ade8 <__kernel_rem_pio2+0x268>
 800ace8:	2d02      	cmp	r5, #2
 800acea:	d130      	bne.n	800ad4e <__kernel_rem_pio2+0x1ce>
 800acec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800acf0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800acf4:	b358      	cbz	r0, 800ad4e <__kernel_rem_pio2+0x1ce>
 800acf6:	4620      	mov	r0, r4
 800acf8:	9102      	str	r1, [sp, #8]
 800acfa:	f000 fc59 	bl	800b5b0 <scalbn>
 800acfe:	9902      	ldr	r1, [sp, #8]
 800ad00:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ad04:	e023      	b.n	800ad4e <__kernel_rem_pio2+0x1ce>
 800ad06:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ad0a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ad0e:	3a01      	subs	r2, #1
 800ad10:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ad14:	ad68      	add	r5, sp, #416	; 0x1a0
 800ad16:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ad1a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ad1e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800ad22:	eca0 0a01 	vstmia	r0!, {s0}
 800ad26:	ed95 0b00 	vldr	d0, [r5]
 800ad2a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ad2e:	e799      	b.n	800ac64 <__kernel_rem_pio2+0xe4>
 800ad30:	d105      	bne.n	800ad3e <__kernel_rem_pio2+0x1be>
 800ad32:	1e72      	subs	r2, r6, #1
 800ad34:	a804      	add	r0, sp, #16
 800ad36:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800ad3a:	15ed      	asrs	r5, r5, #23
 800ad3c:	e7c3      	b.n	800acc6 <__kernel_rem_pio2+0x146>
 800ad3e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ad42:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ad46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad4a:	da2f      	bge.n	800adac <__kernel_rem_pio2+0x22c>
 800ad4c:	2500      	movs	r5, #0
 800ad4e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad56:	f040 8087 	bne.w	800ae68 <__kernel_rem_pio2+0x2e8>
 800ad5a:	1e73      	subs	r3, r6, #1
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f04f 0c00 	mov.w	ip, #0
 800ad62:	4548      	cmp	r0, r9
 800ad64:	da47      	bge.n	800adf6 <__kernel_rem_pio2+0x276>
 800ad66:	f1bc 0f00 	cmp.w	ip, #0
 800ad6a:	d070      	beq.n	800ae4e <__kernel_rem_pio2+0x2ce>
 800ad6c:	aa04      	add	r2, sp, #16
 800ad6e:	3c18      	subs	r4, #24
 800ad70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ad74:	2a00      	cmp	r2, #0
 800ad76:	d075      	beq.n	800ae64 <__kernel_rem_pio2+0x2e4>
 800ad78:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	f000 fc16 	bl	800b5b0 <scalbn>
 800ad84:	9b00      	ldr	r3, [sp, #0]
 800ad86:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800aec0 <__kernel_rem_pio2+0x340>
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	2a00      	cmp	r2, #0
 800ad8e:	f280 80ac 	bge.w	800aeea <__kernel_rem_pio2+0x36a>
 800ad92:	4619      	mov	r1, r3
 800ad94:	2000      	movs	r0, #0
 800ad96:	2900      	cmp	r1, #0
 800ad98:	f2c0 80cd 	blt.w	800af36 <__kernel_rem_pio2+0x3b6>
 800ad9c:	aa68      	add	r2, sp, #416	; 0x1a0
 800ad9e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800ada2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800aeb8 <__kernel_rem_pio2+0x338>
 800ada6:	4e4b      	ldr	r6, [pc, #300]	; (800aed4 <__kernel_rem_pio2+0x354>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	e0b8      	b.n	800af1e <__kernel_rem_pio2+0x39e>
 800adac:	2502      	movs	r5, #2
 800adae:	e78c      	b.n	800acca <__kernel_rem_pio2+0x14a>
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	b948      	cbnz	r0, 800adc8 <__kernel_rem_pio2+0x248>
 800adb4:	b11a      	cbz	r2, 800adbe <__kernel_rem_pio2+0x23e>
 800adb6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f10c 0c01 	add.w	ip, ip, #1
 800adc2:	3304      	adds	r3, #4
 800adc4:	4610      	mov	r0, r2
 800adc6:	e787      	b.n	800acd8 <__kernel_rem_pio2+0x158>
 800adc8:	ebae 0202 	sub.w	r2, lr, r2
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	4602      	mov	r2, r0
 800add0:	e7f5      	b.n	800adbe <__kernel_rem_pio2+0x23e>
 800add2:	1e72      	subs	r2, r6, #1
 800add4:	ab04      	add	r3, sp, #16
 800add6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adda:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800adde:	f10d 0c10 	add.w	ip, sp, #16
 800ade2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800ade6:	e77f      	b.n	800ace8 <__kernel_rem_pio2+0x168>
 800ade8:	1e72      	subs	r2, r6, #1
 800adea:	ab04      	add	r3, sp, #16
 800adec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800adf4:	e7f3      	b.n	800adde <__kernel_rem_pio2+0x25e>
 800adf6:	aa04      	add	r2, sp, #16
 800adf8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800adfc:	3801      	subs	r0, #1
 800adfe:	ea4c 0c02 	orr.w	ip, ip, r2
 800ae02:	e7ae      	b.n	800ad62 <__kernel_rem_pio2+0x1e2>
 800ae04:	3001      	adds	r0, #1
 800ae06:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae0a:	2a00      	cmp	r2, #0
 800ae0c:	d0fa      	beq.n	800ae04 <__kernel_rem_pio2+0x284>
 800ae0e:	eb06 020b 	add.w	r2, r6, fp
 800ae12:	ad18      	add	r5, sp, #96	; 0x60
 800ae14:	1c73      	adds	r3, r6, #1
 800ae16:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ae1a:	4406      	add	r6, r0
 800ae1c:	429e      	cmp	r6, r3
 800ae1e:	f6ff af19 	blt.w	800ac54 <__kernel_rem_pio2+0xd4>
 800ae22:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ae26:	9d00      	ldr	r5, [sp, #0]
 800ae28:	ee07 0a90 	vmov	s15, r0
 800ae2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ae30:	2000      	movs	r0, #0
 800ae32:	eca2 7b02 	vstmia	r2!, {d7}
 800ae36:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800aeb8 <__kernel_rem_pio2+0x338>
 800ae3a:	4694      	mov	ip, r2
 800ae3c:	4288      	cmp	r0, r1
 800ae3e:	dd09      	ble.n	800ae54 <__kernel_rem_pio2+0x2d4>
 800ae40:	a868      	add	r0, sp, #416	; 0x1a0
 800ae42:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800ae46:	ed80 7b00 	vstr	d7, [r0]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	e7e6      	b.n	800ae1c <__kernel_rem_pio2+0x29c>
 800ae4e:	9b01      	ldr	r3, [sp, #4]
 800ae50:	2001      	movs	r0, #1
 800ae52:	e7d8      	b.n	800ae06 <__kernel_rem_pio2+0x286>
 800ae54:	ecb5 5b02 	vldmia	r5!, {d5}
 800ae58:	ed3c 6b02 	vldmdb	ip!, {d6}
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ae62:	e7eb      	b.n	800ae3c <__kernel_rem_pio2+0x2bc>
 800ae64:	3b01      	subs	r3, #1
 800ae66:	e781      	b.n	800ad6c <__kernel_rem_pio2+0x1ec>
 800ae68:	4260      	negs	r0, r4
 800ae6a:	eeb0 0b48 	vmov.f64	d0, d8
 800ae6e:	f000 fb9f 	bl	800b5b0 <scalbn>
 800ae72:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800aec8 <__kernel_rem_pio2+0x348>
 800ae76:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ae7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7e:	db2b      	blt.n	800aed8 <__kernel_rem_pio2+0x358>
 800ae80:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800aec0 <__kernel_rem_pio2+0x340>
 800ae84:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ae88:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ae8c:	aa04      	add	r2, sp, #16
 800ae8e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ae92:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ae96:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ae9a:	a904      	add	r1, sp, #16
 800ae9c:	ee10 3a10 	vmov	r3, s0
 800aea0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aea4:	ee17 2a10 	vmov	r2, s14
 800aea8:	1c73      	adds	r3, r6, #1
 800aeaa:	3418      	adds	r4, #24
 800aeac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aeb0:	e762      	b.n	800ad78 <__kernel_rem_pio2+0x1f8>
 800aeb2:	bf00      	nop
 800aeb4:	f3af 8000 	nop.w
	...
 800aec4:	3e700000 	.word	0x3e700000
 800aec8:	00000000 	.word	0x00000000
 800aecc:	41700000 	.word	0x41700000
 800aed0:	0800d330 	.word	0x0800d330
 800aed4:	0800d2f0 	.word	0x0800d2f0
 800aed8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800aedc:	aa04      	add	r2, sp, #16
 800aede:	ee10 3a10 	vmov	r3, s0
 800aee2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aee6:	4633      	mov	r3, r6
 800aee8:	e746      	b.n	800ad78 <__kernel_rem_pio2+0x1f8>
 800aeea:	a804      	add	r0, sp, #16
 800aeec:	a968      	add	r1, sp, #416	; 0x1a0
 800aeee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800aef2:	9000      	str	r0, [sp, #0]
 800aef4:	ee07 0a90 	vmov	s15, r0
 800aef8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800aefc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800af00:	3a01      	subs	r2, #1
 800af02:	ee27 7b00 	vmul.f64	d7, d7, d0
 800af06:	ee20 0b06 	vmul.f64	d0, d0, d6
 800af0a:	ed81 7b00 	vstr	d7, [r1]
 800af0e:	e73d      	b.n	800ad8c <__kernel_rem_pio2+0x20c>
 800af10:	ecb6 5b02 	vldmia	r6!, {d5}
 800af14:	ecb4 6b02 	vldmia	r4!, {d6}
 800af18:	3201      	adds	r2, #1
 800af1a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800af1e:	454a      	cmp	r2, r9
 800af20:	dc01      	bgt.n	800af26 <__kernel_rem_pio2+0x3a6>
 800af22:	4290      	cmp	r0, r2
 800af24:	daf4      	bge.n	800af10 <__kernel_rem_pio2+0x390>
 800af26:	aa40      	add	r2, sp, #256	; 0x100
 800af28:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800af2c:	ed82 7b00 	vstr	d7, [r2]
 800af30:	3901      	subs	r1, #1
 800af32:	3001      	adds	r0, #1
 800af34:	e72f      	b.n	800ad96 <__kernel_rem_pio2+0x216>
 800af36:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800af38:	2a02      	cmp	r2, #2
 800af3a:	dc0a      	bgt.n	800af52 <__kernel_rem_pio2+0x3d2>
 800af3c:	2a00      	cmp	r2, #0
 800af3e:	dc5a      	bgt.n	800aff6 <__kernel_rem_pio2+0x476>
 800af40:	d039      	beq.n	800afb6 <__kernel_rem_pio2+0x436>
 800af42:	f008 0007 	and.w	r0, r8, #7
 800af46:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800af4a:	ecbd 8b06 	vpop	{d8-d10}
 800af4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af52:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800af54:	2a03      	cmp	r2, #3
 800af56:	d1f4      	bne.n	800af42 <__kernel_rem_pio2+0x3c2>
 800af58:	aa40      	add	r2, sp, #256	; 0x100
 800af5a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800af5e:	4611      	mov	r1, r2
 800af60:	4618      	mov	r0, r3
 800af62:	2800      	cmp	r0, #0
 800af64:	f1a1 0108 	sub.w	r1, r1, #8
 800af68:	dc52      	bgt.n	800b010 <__kernel_rem_pio2+0x490>
 800af6a:	4619      	mov	r1, r3
 800af6c:	2901      	cmp	r1, #1
 800af6e:	f1a2 0208 	sub.w	r2, r2, #8
 800af72:	dc5d      	bgt.n	800b030 <__kernel_rem_pio2+0x4b0>
 800af74:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800b078 <__kernel_rem_pio2+0x4f8>
 800af78:	2b01      	cmp	r3, #1
 800af7a:	dc69      	bgt.n	800b050 <__kernel_rem_pio2+0x4d0>
 800af7c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800af80:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800af84:	2d00      	cmp	r5, #0
 800af86:	d16c      	bne.n	800b062 <__kernel_rem_pio2+0x4e2>
 800af88:	ed87 5b00 	vstr	d5, [r7]
 800af8c:	ed87 6b02 	vstr	d6, [r7, #8]
 800af90:	ed87 7b04 	vstr	d7, [r7, #16]
 800af94:	e7d5      	b.n	800af42 <__kernel_rem_pio2+0x3c2>
 800af96:	aa40      	add	r2, sp, #256	; 0x100
 800af98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800af9c:	ed92 6b00 	vldr	d6, [r2]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	daf5      	bge.n	800af96 <__kernel_rem_pio2+0x416>
 800afaa:	b10d      	cbz	r5, 800afb0 <__kernel_rem_pio2+0x430>
 800afac:	eeb1 7b47 	vneg.f64	d7, d7
 800afb0:	ed87 7b00 	vstr	d7, [r7]
 800afb4:	e7c5      	b.n	800af42 <__kernel_rem_pio2+0x3c2>
 800afb6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800b078 <__kernel_rem_pio2+0x4f8>
 800afba:	e7f4      	b.n	800afa6 <__kernel_rem_pio2+0x426>
 800afbc:	a940      	add	r1, sp, #256	; 0x100
 800afbe:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800afc2:	ed91 7b00 	vldr	d7, [r1]
 800afc6:	3a01      	subs	r2, #1
 800afc8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800afcc:	2a00      	cmp	r2, #0
 800afce:	daf5      	bge.n	800afbc <__kernel_rem_pio2+0x43c>
 800afd0:	b1ad      	cbz	r5, 800affe <__kernel_rem_pio2+0x47e>
 800afd2:	eeb1 7b46 	vneg.f64	d7, d6
 800afd6:	ed87 7b00 	vstr	d7, [r7]
 800afda:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800afde:	a942      	add	r1, sp, #264	; 0x108
 800afe0:	2201      	movs	r2, #1
 800afe2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800afe6:	4293      	cmp	r3, r2
 800afe8:	da0c      	bge.n	800b004 <__kernel_rem_pio2+0x484>
 800afea:	b10d      	cbz	r5, 800aff0 <__kernel_rem_pio2+0x470>
 800afec:	eeb1 7b47 	vneg.f64	d7, d7
 800aff0:	ed87 7b02 	vstr	d7, [r7, #8]
 800aff4:	e7a5      	b.n	800af42 <__kernel_rem_pio2+0x3c2>
 800aff6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800b078 <__kernel_rem_pio2+0x4f8>
 800affa:	461a      	mov	r2, r3
 800affc:	e7e6      	b.n	800afcc <__kernel_rem_pio2+0x44c>
 800affe:	eeb0 7b46 	vmov.f64	d7, d6
 800b002:	e7e8      	b.n	800afd6 <__kernel_rem_pio2+0x456>
 800b004:	ecb1 6b02 	vldmia	r1!, {d6}
 800b008:	3201      	adds	r2, #1
 800b00a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b00e:	e7ea      	b.n	800afe6 <__kernel_rem_pio2+0x466>
 800b010:	ed91 7b00 	vldr	d7, [r1]
 800b014:	ed91 5b02 	vldr	d5, [r1, #8]
 800b018:	3801      	subs	r0, #1
 800b01a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b01e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b022:	ed81 6b00 	vstr	d6, [r1]
 800b026:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b02a:	ed81 7b02 	vstr	d7, [r1, #8]
 800b02e:	e798      	b.n	800af62 <__kernel_rem_pio2+0x3e2>
 800b030:	ed92 7b00 	vldr	d7, [r2]
 800b034:	ed92 5b02 	vldr	d5, [r2, #8]
 800b038:	3901      	subs	r1, #1
 800b03a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b03e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b042:	ed82 6b00 	vstr	d6, [r2]
 800b046:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b04a:	ed82 7b02 	vstr	d7, [r2, #8]
 800b04e:	e78d      	b.n	800af6c <__kernel_rem_pio2+0x3ec>
 800b050:	aa40      	add	r2, sp, #256	; 0x100
 800b052:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b056:	ed92 6b00 	vldr	d6, [r2]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b060:	e78a      	b.n	800af78 <__kernel_rem_pio2+0x3f8>
 800b062:	eeb1 5b45 	vneg.f64	d5, d5
 800b066:	eeb1 6b46 	vneg.f64	d6, d6
 800b06a:	ed87 5b00 	vstr	d5, [r7]
 800b06e:	eeb1 7b47 	vneg.f64	d7, d7
 800b072:	ed87 6b02 	vstr	d6, [r7, #8]
 800b076:	e78b      	b.n	800af90 <__kernel_rem_pio2+0x410>
	...

0800b080 <__kernel_sin>:
 800b080:	ee10 3a90 	vmov	r3, s1
 800b084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b088:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b08c:	da04      	bge.n	800b098 <__kernel_sin+0x18>
 800b08e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b092:	ee17 3a90 	vmov	r3, s15
 800b096:	b35b      	cbz	r3, 800b0f0 <__kernel_sin+0x70>
 800b098:	ee20 6b00 	vmul.f64	d6, d0, d0
 800b09c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800b0a0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800b0f8 <__kernel_sin+0x78>
 800b0a4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b100 <__kernel_sin+0x80>
 800b0a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b0ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b108 <__kernel_sin+0x88>
 800b0b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b0b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b110 <__kernel_sin+0x90>
 800b0b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b0bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b118 <__kernel_sin+0x98>
 800b0c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b0c4:	b930      	cbnz	r0, 800b0d4 <__kernel_sin+0x54>
 800b0c6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b120 <__kernel_sin+0xa0>
 800b0ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b0ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 800b0d2:	4770      	bx	lr
 800b0d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800b0d8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b0dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800b0e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800b0e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b128 <__kernel_sin+0xa8>
 800b0e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800b0ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	f3af 8000 	nop.w
 800b0f8:	5acfd57c 	.word	0x5acfd57c
 800b0fc:	3de5d93a 	.word	0x3de5d93a
 800b100:	8a2b9ceb 	.word	0x8a2b9ceb
 800b104:	be5ae5e6 	.word	0xbe5ae5e6
 800b108:	57b1fe7d 	.word	0x57b1fe7d
 800b10c:	3ec71de3 	.word	0x3ec71de3
 800b110:	19c161d5 	.word	0x19c161d5
 800b114:	bf2a01a0 	.word	0xbf2a01a0
 800b118:	1110f8a6 	.word	0x1110f8a6
 800b11c:	3f811111 	.word	0x3f811111
 800b120:	55555549 	.word	0x55555549
 800b124:	bfc55555 	.word	0xbfc55555
 800b128:	55555549 	.word	0x55555549
 800b12c:	3fc55555 	.word	0x3fc55555

0800b130 <with_errno>:
 800b130:	b513      	push	{r0, r1, r4, lr}
 800b132:	4604      	mov	r4, r0
 800b134:	ed8d 0b00 	vstr	d0, [sp]
 800b138:	f7fe fd16 	bl	8009b68 <__errno>
 800b13c:	ed9d 0b00 	vldr	d0, [sp]
 800b140:	6004      	str	r4, [r0, #0]
 800b142:	b002      	add	sp, #8
 800b144:	bd10      	pop	{r4, pc}

0800b146 <xflow>:
 800b146:	b082      	sub	sp, #8
 800b148:	b158      	cbz	r0, 800b162 <xflow+0x1c>
 800b14a:	eeb1 7b40 	vneg.f64	d7, d0
 800b14e:	ed8d 7b00 	vstr	d7, [sp]
 800b152:	ed9d 7b00 	vldr	d7, [sp]
 800b156:	2022      	movs	r0, #34	; 0x22
 800b158:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b15c:	b002      	add	sp, #8
 800b15e:	f7ff bfe7 	b.w	800b130 <with_errno>
 800b162:	eeb0 7b40 	vmov.f64	d7, d0
 800b166:	e7f2      	b.n	800b14e <xflow+0x8>

0800b168 <__math_uflow>:
 800b168:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b170 <__math_uflow+0x8>
 800b16c:	f7ff bfeb 	b.w	800b146 <xflow>
 800b170:	00000000 	.word	0x00000000
 800b174:	10000000 	.word	0x10000000

0800b178 <__math_oflow>:
 800b178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b180 <__math_oflow+0x8>
 800b17c:	f7ff bfe3 	b.w	800b146 <xflow>
 800b180:	00000000 	.word	0x00000000
 800b184:	70000000 	.word	0x70000000

0800b188 <__math_divzero>:
 800b188:	b082      	sub	sp, #8
 800b18a:	2800      	cmp	r0, #0
 800b18c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b190:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800b194:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800b198:	ed8d 7b00 	vstr	d7, [sp]
 800b19c:	ed9d 0b00 	vldr	d0, [sp]
 800b1a0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800b1b0 <__math_divzero+0x28>
 800b1a4:	2022      	movs	r0, #34	; 0x22
 800b1a6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800b1aa:	b002      	add	sp, #8
 800b1ac:	f7ff bfc0 	b.w	800b130 <with_errno>
	...

0800b1b8 <__math_invalid>:
 800b1b8:	eeb0 7b40 	vmov.f64	d7, d0
 800b1bc:	eeb4 7b47 	vcmp.f64	d7, d7
 800b1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800b1c8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800b1cc:	d602      	bvs.n	800b1d4 <__math_invalid+0x1c>
 800b1ce:	2021      	movs	r0, #33	; 0x21
 800b1d0:	f7ff bfae 	b.w	800b130 <with_errno>
 800b1d4:	4770      	bx	lr

0800b1d6 <__math_check_uflow>:
 800b1d6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1de:	d102      	bne.n	800b1e6 <__math_check_uflow+0x10>
 800b1e0:	2022      	movs	r0, #34	; 0x22
 800b1e2:	f7ff bfa5 	b.w	800b130 <with_errno>
 800b1e6:	4770      	bx	lr

0800b1e8 <__math_check_oflow>:
 800b1e8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800b208 <__math_check_oflow+0x20>
 800b1ec:	eeb0 7bc0 	vabs.f64	d7, d0
 800b1f0:	eeb4 7b46 	vcmp.f64	d7, d6
 800b1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f8:	dd02      	ble.n	800b200 <__math_check_oflow+0x18>
 800b1fa:	2022      	movs	r0, #34	; 0x22
 800b1fc:	f7ff bf98 	b.w	800b130 <with_errno>
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	f3af 8000 	nop.w
 800b208:	ffffffff 	.word	0xffffffff
 800b20c:	7fefffff 	.word	0x7fefffff

0800b210 <expm1>:
 800b210:	b417      	push	{r0, r1, r2, r4}
 800b212:	ee10 2a90 	vmov	r2, s1
 800b216:	49a6      	ldr	r1, [pc, #664]	; (800b4b0 <expm1+0x2a0>)
 800b218:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b21c:	428b      	cmp	r3, r1
 800b21e:	d932      	bls.n	800b286 <expm1+0x76>
 800b220:	49a4      	ldr	r1, [pc, #656]	; (800b4b4 <expm1+0x2a4>)
 800b222:	428b      	cmp	r3, r1
 800b224:	d921      	bls.n	800b26a <expm1+0x5a>
 800b226:	49a4      	ldr	r1, [pc, #656]	; (800b4b8 <expm1+0x2a8>)
 800b228:	428b      	cmp	r3, r1
 800b22a:	d911      	bls.n	800b250 <expm1+0x40>
 800b22c:	ee10 1a10 	vmov	r1, s0
 800b230:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800b234:	430b      	orrs	r3, r1
 800b236:	d005      	beq.n	800b244 <expm1+0x34>
 800b238:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b23c:	b003      	add	sp, #12
 800b23e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	2a00      	cmp	r2, #0
 800b246:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800b24a:	fe20 0b07 	vselge.f64	d0, d0, d7
 800b24e:	e7f5      	b.n	800b23c <expm1+0x2c>
 800b250:	ed9f 7b7f 	vldr	d7, [pc, #508]	; 800b450 <expm1+0x240>
 800b254:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25c:	dd05      	ble.n	800b26a <expm1+0x5a>
 800b25e:	2000      	movs	r0, #0
 800b260:	b003      	add	sp, #12
 800b262:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b266:	f7ff bf87 	b.w	800b178 <__math_oflow>
 800b26a:	2a00      	cmp	r2, #0
 800b26c:	da5d      	bge.n	800b32a <expm1+0x11a>
 800b26e:	ed9f 7b7a 	vldr	d7, [pc, #488]	; 800b458 <expm1+0x248>
 800b272:	ee30 7b07 	vadd.f64	d7, d0, d7
 800b276:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27e:	d554      	bpl.n	800b32a <expm1+0x11a>
 800b280:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800b284:	e7da      	b.n	800b23c <expm1+0x2c>
 800b286:	498d      	ldr	r1, [pc, #564]	; (800b4bc <expm1+0x2ac>)
 800b288:	428b      	cmp	r3, r1
 800b28a:	d96a      	bls.n	800b362 <expm1+0x152>
 800b28c:	498c      	ldr	r1, [pc, #560]	; (800b4c0 <expm1+0x2b0>)
 800b28e:	428b      	cmp	r3, r1
 800b290:	d84b      	bhi.n	800b32a <expm1+0x11a>
 800b292:	2a00      	cmp	r2, #0
 800b294:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800b460 <expm1+0x250>
 800b298:	db40      	blt.n	800b31c <expm1+0x10c>
 800b29a:	ee30 6b46 	vsub.f64	d6, d0, d6
 800b29e:	ed9f 5b72 	vldr	d5, [pc, #456]	; 800b468 <expm1+0x258>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	ee36 0b45 	vsub.f64	d0, d6, d5
 800b2a8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800b2ac:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b2b0:	ed9f 4b6f 	vldr	d4, [pc, #444]	; 800b470 <expm1+0x260>
 800b2b4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b2b8:	ee20 2b03 	vmul.f64	d2, d0, d3
 800b2bc:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800b478 <expm1+0x268>
 800b2c0:	ee20 6b02 	vmul.f64	d6, d0, d2
 800b2c4:	eea6 5b04 	vfma.f64	d5, d6, d4
 800b2c8:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800b480 <expm1+0x270>
 800b2cc:	eea5 4b06 	vfma.f64	d4, d5, d6
 800b2d0:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 800b488 <expm1+0x278>
 800b2d4:	eea4 5b06 	vfma.f64	d5, d4, d6
 800b2d8:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800b490 <expm1+0x280>
 800b2dc:	eea5 4b06 	vfma.f64	d4, d5, d6
 800b2e0:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800b2e4:	eeb0 1b45 	vmov.f64	d1, d5
 800b2e8:	eea4 1b06 	vfma.f64	d1, d4, d6
 800b2ec:	eeb0 4b41 	vmov.f64	d4, d1
 800b2f0:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800b2f4:	eea2 1b44 	vfms.f64	d1, d2, d4
 800b2f8:	ee34 2b41 	vsub.f64	d2, d4, d1
 800b2fc:	eeb1 4b08 	vmov.f64	d4, #24	; 0x40c00000  6.0
 800b300:	eea0 4b41 	vfms.f64	d4, d0, d1
 800b304:	eeb0 1b44 	vmov.f64	d1, d4
 800b308:	ee82 4b01 	vdiv.f64	d4, d2, d1
 800b30c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800b310:	bbab      	cbnz	r3, 800b37e <expm1+0x16e>
 800b312:	ee90 6b04 	vfnms.f64	d6, d0, d4
 800b316:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b31a:	e78f      	b.n	800b23c <expm1+0x2c>
 800b31c:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 800b498 <expm1+0x288>
 800b320:	ee30 6b06 	vadd.f64	d6, d0, d6
 800b324:	f04f 33ff 	mov.w	r3, #4294967295
 800b328:	e7bc      	b.n	800b2a4 <expm1+0x94>
 800b32a:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 800b32e:	2a00      	cmp	r2, #0
 800b330:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b334:	fe27 7b06 	vselge.f64	d7, d7, d6
 800b338:	ed9f 6b59 	vldr	d6, [pc, #356]	; 800b4a0 <expm1+0x290>
 800b33c:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 800b468 <expm1+0x258>
 800b340:	ee00 7b06 	vmla.f64	d7, d0, d6
 800b344:	ed9f 6b46 	vldr	d6, [pc, #280]	; 800b460 <expm1+0x250>
 800b348:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b34c:	ee17 3a90 	vmov	r3, s15
 800b350:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b354:	eea7 0b46 	vfms.f64	d0, d7, d6
 800b358:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b35c:	eeb0 6b40 	vmov.f64	d6, d0
 800b360:	e7a0      	b.n	800b2a4 <expm1+0x94>
 800b362:	4a58      	ldr	r2, [pc, #352]	; (800b4c4 <expm1+0x2b4>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d808      	bhi.n	800b37a <expm1+0x16a>
 800b368:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800b4a8 <expm1+0x298>
 800b36c:	ee30 7b07 	vadd.f64	d7, d0, d7
 800b370:	ee37 7b47 	vsub.f64	d7, d7, d7
 800b374:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b378:	e760      	b.n	800b23c <expm1+0x2c>
 800b37a:	2300      	movs	r3, #0
 800b37c:	e798      	b.n	800b2b0 <expm1+0xa0>
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	ee34 4b47 	vsub.f64	d4, d4, d7
 800b384:	ee94 7b00 	vfnms.f64	d7, d4, d0
 800b388:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b38c:	d106      	bne.n	800b39c <expm1+0x18c>
 800b38e:	ee30 7b47 	vsub.f64	d7, d0, d7
 800b392:	eebe 0b00 	vmov.f64	d0, #224	; 0xbf000000 -0.5
 800b396:	eea7 0b03 	vfma.f64	d0, d7, d3
 800b39a:	e74f      	b.n	800b23c <expm1+0x2c>
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d118      	bne.n	800b3d2 <expm1+0x1c2>
 800b3a0:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 800b3a4:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800b3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ac:	d508      	bpl.n	800b3c0 <expm1+0x1b0>
 800b3ae:	ee30 0b03 	vadd.f64	d0, d0, d3
 800b3b2:	ee37 0b40 	vsub.f64	d0, d7, d0
 800b3b6:	eeb8 7b00 	vmov.f64	d7, #128	; 0xc0000000 -2.0
 800b3ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b3be:	e73d      	b.n	800b23c <expm1+0x2c>
 800b3c0:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b3c4:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b3c8:	eea0 5b07 	vfma.f64	d5, d0, d7
 800b3cc:	eeb0 0b45 	vmov.f64	d0, d5
 800b3d0:	e734      	b.n	800b23c <expm1+0x2c>
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	2a39      	cmp	r2, #57	; 0x39
 800b3d6:	ea4f 5403 	mov.w	r4, r3, lsl #20
 800b3da:	d90e      	bls.n	800b3fa <expm1+0x1ea>
 800b3dc:	ee37 0b40 	vsub.f64	d0, d7, d0
 800b3e0:	ee35 7b40 	vsub.f64	d7, d5, d0
 800b3e4:	ed8d 7b00 	vstr	d7, [sp]
 800b3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ec:	9901      	ldr	r1, [sp, #4]
 800b3ee:	1863      	adds	r3, r4, r1
 800b3f0:	ec43 2b10 	vmov	d0, r2, r3
 800b3f4:	ee30 0b45 	vsub.f64	d0, d0, d5
 800b3f8:	e720      	b.n	800b23c <expm1+0x2c>
 800b3fa:	2b13      	cmp	r3, #19
 800b3fc:	f04f 0000 	mov.w	r0, #0
 800b400:	dc16      	bgt.n	800b430 <expm1+0x220>
 800b402:	ee37 0b40 	vsub.f64	d0, d7, d0
 800b406:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b40a:	fa42 f303 	asr.w	r3, r2, r3
 800b40e:	f1c3 517f 	rsb	r1, r3, #1069547520	; 0x3fc00000
 800b412:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800b416:	ec41 0b16 	vmov	d6, r0, r1
 800b41a:	ee36 7b40 	vsub.f64	d7, d6, d0
 800b41e:	ed8d 7b00 	vstr	d7, [sp]
 800b422:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b426:	9901      	ldr	r1, [sp, #4]
 800b428:	1863      	adds	r3, r4, r1
 800b42a:	ec43 2b10 	vmov	d0, r2, r3
 800b42e:	e705      	b.n	800b23c <expm1+0x2c>
 800b430:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800b434:	3303      	adds	r3, #3
 800b436:	0519      	lsls	r1, r3, #20
 800b438:	ec41 0b16 	vmov	d6, r0, r1
 800b43c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b440:	ee30 7b47 	vsub.f64	d7, d0, d7
 800b444:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b448:	e7e9      	b.n	800b41e <expm1+0x20e>
 800b44a:	bf00      	nop
 800b44c:	f3af 8000 	nop.w
 800b450:	fefa39ef 	.word	0xfefa39ef
 800b454:	40862e42 	.word	0x40862e42
 800b458:	c2f8f359 	.word	0xc2f8f359
 800b45c:	01a56e1f 	.word	0x01a56e1f
 800b460:	fee00000 	.word	0xfee00000
 800b464:	3fe62e42 	.word	0x3fe62e42
 800b468:	35793c76 	.word	0x35793c76
 800b46c:	3dea39ef 	.word	0x3dea39ef
 800b470:	6e09c32d 	.word	0x6e09c32d
 800b474:	be8afdb7 	.word	0xbe8afdb7
 800b478:	86e65239 	.word	0x86e65239
 800b47c:	3ed0cfca 	.word	0x3ed0cfca
 800b480:	9eaadbb7 	.word	0x9eaadbb7
 800b484:	bf14ce19 	.word	0xbf14ce19
 800b488:	19fe5585 	.word	0x19fe5585
 800b48c:	3f5a01a0 	.word	0x3f5a01a0
 800b490:	111110f4 	.word	0x111110f4
 800b494:	bfa11111 	.word	0xbfa11111
 800b498:	35793c76 	.word	0x35793c76
 800b49c:	bdea39ef 	.word	0xbdea39ef
 800b4a0:	652b82fe 	.word	0x652b82fe
 800b4a4:	3ff71547 	.word	0x3ff71547
 800b4a8:	8800759c 	.word	0x8800759c
 800b4ac:	7e37e43c 	.word	0x7e37e43c
 800b4b0:	40436879 	.word	0x40436879
 800b4b4:	40862e41 	.word	0x40862e41
 800b4b8:	7fefffff 	.word	0x7fefffff
 800b4bc:	3fd62e42 	.word	0x3fd62e42
 800b4c0:	3ff0a2b1 	.word	0x3ff0a2b1
 800b4c4:	3c8fffff 	.word	0x3c8fffff

0800b4c8 <floor>:
 800b4c8:	ee10 1a90 	vmov	r1, s1
 800b4cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b4d0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b4d4:	2b13      	cmp	r3, #19
 800b4d6:	b530      	push	{r4, r5, lr}
 800b4d8:	ee10 0a10 	vmov	r0, s0
 800b4dc:	ee10 5a10 	vmov	r5, s0
 800b4e0:	dc31      	bgt.n	800b546 <floor+0x7e>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	da15      	bge.n	800b512 <floor+0x4a>
 800b4e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b5a0 <floor+0xd8>
 800b4ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b4ee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f6:	dd07      	ble.n	800b508 <floor+0x40>
 800b4f8:	2900      	cmp	r1, #0
 800b4fa:	da4e      	bge.n	800b59a <floor+0xd2>
 800b4fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b500:	4318      	orrs	r0, r3
 800b502:	d001      	beq.n	800b508 <floor+0x40>
 800b504:	4928      	ldr	r1, [pc, #160]	; (800b5a8 <floor+0xe0>)
 800b506:	2000      	movs	r0, #0
 800b508:	460b      	mov	r3, r1
 800b50a:	4602      	mov	r2, r0
 800b50c:	ec43 2b10 	vmov	d0, r2, r3
 800b510:	e020      	b.n	800b554 <floor+0x8c>
 800b512:	4a26      	ldr	r2, [pc, #152]	; (800b5ac <floor+0xe4>)
 800b514:	411a      	asrs	r2, r3
 800b516:	ea01 0402 	and.w	r4, r1, r2
 800b51a:	4304      	orrs	r4, r0
 800b51c:	d01a      	beq.n	800b554 <floor+0x8c>
 800b51e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b5a0 <floor+0xd8>
 800b522:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b526:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b52e:	ddeb      	ble.n	800b508 <floor+0x40>
 800b530:	2900      	cmp	r1, #0
 800b532:	bfbe      	ittt	lt
 800b534:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800b538:	fa40 f303 	asrlt.w	r3, r0, r3
 800b53c:	18c9      	addlt	r1, r1, r3
 800b53e:	ea21 0102 	bic.w	r1, r1, r2
 800b542:	2000      	movs	r0, #0
 800b544:	e7e0      	b.n	800b508 <floor+0x40>
 800b546:	2b33      	cmp	r3, #51	; 0x33
 800b548:	dd05      	ble.n	800b556 <floor+0x8e>
 800b54a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b54e:	d101      	bne.n	800b554 <floor+0x8c>
 800b550:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b554:	bd30      	pop	{r4, r5, pc}
 800b556:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800b55a:	f04f 32ff 	mov.w	r2, #4294967295
 800b55e:	40e2      	lsrs	r2, r4
 800b560:	4202      	tst	r2, r0
 800b562:	d0f7      	beq.n	800b554 <floor+0x8c>
 800b564:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b5a0 <floor+0xd8>
 800b568:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b56c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b574:	ddc8      	ble.n	800b508 <floor+0x40>
 800b576:	2900      	cmp	r1, #0
 800b578:	da02      	bge.n	800b580 <floor+0xb8>
 800b57a:	2b14      	cmp	r3, #20
 800b57c:	d103      	bne.n	800b586 <floor+0xbe>
 800b57e:	3101      	adds	r1, #1
 800b580:	ea20 0002 	bic.w	r0, r0, r2
 800b584:	e7c0      	b.n	800b508 <floor+0x40>
 800b586:	2401      	movs	r4, #1
 800b588:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b58c:	fa04 f303 	lsl.w	r3, r4, r3
 800b590:	4418      	add	r0, r3
 800b592:	42a8      	cmp	r0, r5
 800b594:	bf38      	it	cc
 800b596:	1909      	addcc	r1, r1, r4
 800b598:	e7f2      	b.n	800b580 <floor+0xb8>
 800b59a:	2000      	movs	r0, #0
 800b59c:	4601      	mov	r1, r0
 800b59e:	e7b3      	b.n	800b508 <floor+0x40>
 800b5a0:	8800759c 	.word	0x8800759c
 800b5a4:	7e37e43c 	.word	0x7e37e43c
 800b5a8:	bff00000 	.word	0xbff00000
 800b5ac:	000fffff 	.word	0x000fffff

0800b5b0 <scalbn>:
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	ed8d 0b00 	vstr	d0, [sp]
 800b5b6:	9b01      	ldr	r3, [sp, #4]
 800b5b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b5bc:	b9a2      	cbnz	r2, 800b5e8 <scalbn+0x38>
 800b5be:	9a00      	ldr	r2, [sp, #0]
 800b5c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	d03a      	beq.n	800b63e <scalbn+0x8e>
 800b5c8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800b6a0 <scalbn+0xf0>
 800b5cc:	4b40      	ldr	r3, [pc, #256]	; (800b6d0 <scalbn+0x120>)
 800b5ce:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b5d2:	4298      	cmp	r0, r3
 800b5d4:	ed8d 7b00 	vstr	d7, [sp]
 800b5d8:	da11      	bge.n	800b5fe <scalbn+0x4e>
 800b5da:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800b6a8 <scalbn+0xf8>
 800b5de:	ed9d 6b00 	vldr	d6, [sp]
 800b5e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5e6:	e007      	b.n	800b5f8 <scalbn+0x48>
 800b5e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b5ec:	428a      	cmp	r2, r1
 800b5ee:	d10a      	bne.n	800b606 <scalbn+0x56>
 800b5f0:	ed9d 7b00 	vldr	d7, [sp]
 800b5f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b5f8:	ed8d 7b00 	vstr	d7, [sp]
 800b5fc:	e01f      	b.n	800b63e <scalbn+0x8e>
 800b5fe:	9b01      	ldr	r3, [sp, #4]
 800b600:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b604:	3a36      	subs	r2, #54	; 0x36
 800b606:	4402      	add	r2, r0
 800b608:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b60c:	428a      	cmp	r2, r1
 800b60e:	dd0a      	ble.n	800b626 <scalbn+0x76>
 800b610:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800b6b0 <scalbn+0x100>
 800b614:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800b6b8 <scalbn+0x108>
 800b618:	eeb0 6b47 	vmov.f64	d6, d7
 800b61c:	9b01      	ldr	r3, [sp, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	fe27 7b05 	vselge.f64	d7, d7, d5
 800b624:	e7dd      	b.n	800b5e2 <scalbn+0x32>
 800b626:	2a00      	cmp	r2, #0
 800b628:	dd0d      	ble.n	800b646 <scalbn+0x96>
 800b62a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b62e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b632:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b636:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b63a:	e9cd 0100 	strd	r0, r1, [sp]
 800b63e:	ed9d 0b00 	vldr	d0, [sp]
 800b642:	b002      	add	sp, #8
 800b644:	4770      	bx	lr
 800b646:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b64a:	da18      	bge.n	800b67e <scalbn+0xce>
 800b64c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b650:	4298      	cmp	r0, r3
 800b652:	9b01      	ldr	r3, [sp, #4]
 800b654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b658:	dd09      	ble.n	800b66e <scalbn+0xbe>
 800b65a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800b6b0 <scalbn+0x100>
 800b65e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800b6b8 <scalbn+0x108>
 800b662:	eeb0 6b47 	vmov.f64	d6, d7
 800b666:	2b00      	cmp	r3, #0
 800b668:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800b66c:	e7b9      	b.n	800b5e2 <scalbn+0x32>
 800b66e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800b6a8 <scalbn+0xf8>
 800b672:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800b6c0 <scalbn+0x110>
 800b676:	eeb0 6b47 	vmov.f64	d6, d7
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	e7f4      	b.n	800b668 <scalbn+0xb8>
 800b67e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b682:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b686:	3236      	adds	r2, #54	; 0x36
 800b688:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b68c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b690:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800b6c8 <scalbn+0x118>
 800b694:	ec41 0b17 	vmov	d7, r0, r1
 800b698:	e7a3      	b.n	800b5e2 <scalbn+0x32>
 800b69a:	bf00      	nop
 800b69c:	f3af 8000 	nop.w
 800b6a0:	00000000 	.word	0x00000000
 800b6a4:	43500000 	.word	0x43500000
 800b6a8:	c2f8f359 	.word	0xc2f8f359
 800b6ac:	01a56e1f 	.word	0x01a56e1f
 800b6b0:	8800759c 	.word	0x8800759c
 800b6b4:	7e37e43c 	.word	0x7e37e43c
 800b6b8:	8800759c 	.word	0x8800759c
 800b6bc:	fe37e43c 	.word	0xfe37e43c
 800b6c0:	c2f8f359 	.word	0xc2f8f359
 800b6c4:	81a56e1f 	.word	0x81a56e1f
 800b6c8:	00000000 	.word	0x00000000
 800b6cc:	3c900000 	.word	0x3c900000
 800b6d0:	ffff3cb0 	.word	0xffff3cb0

0800b6d4 <_init>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	bf00      	nop
 800b6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6da:	bc08      	pop	{r3}
 800b6dc:	469e      	mov	lr, r3
 800b6de:	4770      	bx	lr

0800b6e0 <_fini>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	bf00      	nop
 800b6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e6:	bc08      	pop	{r3}
 800b6e8:	469e      	mov	lr, r3
 800b6ea:	4770      	bx	lr
