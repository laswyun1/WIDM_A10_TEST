
WIDM_A10_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d088  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b58  0800d328  0800d328  0001d328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ee80  0800ee80  0001ee80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ee84  0800ee84  0001ee84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  0800ee88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000d5a4  24000078  0800ef00  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400d61c  0800ef00  0002d61c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003f018  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000613c  00000000  00000000  0005f0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001bb0  00000000  00000000  00065200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001980  00000000  00000000  00066db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d57b  00000000  00000000  00068730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00022bf2  00000000  00000000  000a5cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017306d  00000000  00000000  000c889d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0023b90a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007f34  00000000  00000000  0023b960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d310 	.word	0x0800d310

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800d310 	.word	0x0800d310

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000384:	4b2f      	ldr	r3, [pc, #188]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000386:	4a30      	ldr	r2, [pc, #192]	; (8000448 <MX_FDCAN1_Init+0xc8>)
 8000388:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800038a:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800038c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000390:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000392:	4b2c      	ldr	r3, [pc, #176]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000398:	4b2a      	ldr	r3, [pc, #168]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800039a:	2201      	movs	r2, #1
 800039c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 800039e:	4b29      	ldr	r3, [pc, #164]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003aa:	4b26      	ldr	r3, [pc, #152]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 32;
 80003b0:	4b24      	ldr	r3, [pc, #144]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003b2:	2220      	movs	r2, #32
 80003b4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 127;
 80003b6:	4b23      	ldr	r3, [pc, #140]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003b8:	227f      	movs	r2, #127	; 0x7f
 80003ba:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 32;
 80003bc:	4b21      	ldr	r3, [pc, #132]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003be:	2220      	movs	r2, #32
 80003c0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003ca:	2204      	movs	r2, #4
 80003cc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 80003ce:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003d0:	220b      	movs	r2, #11
 80003d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80003d4:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003d6:	2204      	movs	r2, #4
 80003d8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003ee:	2204      	movs	r2, #4
 80003f0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003f4:	2212      	movs	r2, #18
 80003f6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 80003fa:	2204      	movs	r2, #4
 80003fc:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_64;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000400:	2212      	movs	r2, #18
 8000402:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000406:	2204      	movs	r2, #4
 8000408:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_64;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800040c:	2212      	movs	r2, #18
 800040e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000412:	2204      	movs	r2, #4
 8000414:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 4;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000418:	2204      	movs	r2, #4
 800041a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 16;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800041e:	2210      	movs	r2, #16
 8000420:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_QUEUE_OPERATION;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000428:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 800042c:	2212      	movs	r2, #18
 800042e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000430:	4804      	ldr	r0, [pc, #16]	; (8000444 <MX_FDCAN1_Init+0xc4>)
 8000432:	f001 f90b 	bl	800164c <HAL_FDCAN_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 800043c:	f000 fc09 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	240000bc 	.word	0x240000bc
 8000448:	4000a000 	.word	0x4000a000

0800044c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b0b8      	sub	sp, #224	; 0xe0
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	22bc      	movs	r2, #188	; 0xbc
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f00b f865 	bl	800b53c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a31      	ldr	r2, [pc, #196]	; (800053c <HAL_FDCAN_MspInit+0xf0>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d15a      	bne.n	8000532 <HAL_FDCAN_MspInit+0xe6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800047c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000480:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000482:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000486:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4618      	mov	r0, r3
 800048e:	f004 fba3 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000498:	f000 fbdb 	bl	8000c52 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800049c:	4b28      	ldr	r3, [pc, #160]	; (8000540 <HAL_FDCAN_MspInit+0xf4>)
 800049e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80004a2:	4a27      	ldr	r2, [pc, #156]	; (8000540 <HAL_FDCAN_MspInit+0xf4>)
 80004a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80004ac:	4b24      	ldr	r3, [pc, #144]	; (8000540 <HAL_FDCAN_MspInit+0xf4>)
 80004ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80004b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ba:	4b21      	ldr	r3, [pc, #132]	; (8000540 <HAL_FDCAN_MspInit+0xf4>)
 80004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c0:	4a1f      	ldr	r2, [pc, #124]	; (8000540 <HAL_FDCAN_MspInit+0xf4>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ca:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <HAL_FDCAN_MspInit+0xf4>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d0:	f003 0308 	and.w	r3, r3, #8
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = WIDM_FDCAN1_RX_Pin|WIDM_FDCAN1_TX_Pin;
 80004d8:	2303      	movs	r3, #3
 80004da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004de:	2302      	movs	r3, #2
 80004e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2300      	movs	r3, #0
 80004ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80004f0:	2309      	movs	r3, #9
 80004f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80004fa:	4619      	mov	r1, r3
 80004fc:	4811      	ldr	r0, [pc, #68]	; (8000544 <HAL_FDCAN_MspInit+0xf8>)
 80004fe:	f002 faed 	bl	8002adc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2013      	movs	r0, #19
 8000508:	f000 ffef 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800050c:	2013      	movs	r0, #19
 800050e:	f001 f806 	bl	800151e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2015      	movs	r0, #21
 8000518:	f000 ffe7 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800051c:	2015      	movs	r0, #21
 800051e:	f000 fffe 	bl	800151e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN_CAL_IRQn, 14, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	210e      	movs	r1, #14
 8000526:	203f      	movs	r0, #63	; 0x3f
 8000528:	f000 ffdf 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN_CAL_IRQn);
 800052c:	203f      	movs	r0, #63	; 0x3f
 800052e:	f000 fff6 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000532:	bf00      	nop
 8000534:	37e0      	adds	r7, #224	; 0xe0
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	4000a000 	.word	0x4000a000
 8000540:	58024400 	.word	0x58024400
 8000544:	58020c00 	.word	0x58020c00

08000548 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08c      	sub	sp, #48	; 0x30
 800054c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800055e:	4b5c      	ldr	r3, [pc, #368]	; (80006d0 <MX_GPIO_Init+0x188>)
 8000560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000564:	4a5a      	ldr	r2, [pc, #360]	; (80006d0 <MX_GPIO_Init+0x188>)
 8000566:	f043 0310 	orr.w	r3, r3, #16
 800056a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800056e:	4b58      	ldr	r3, [pc, #352]	; (80006d0 <MX_GPIO_Init+0x188>)
 8000570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000574:	f003 0310 	and.w	r3, r3, #16
 8000578:	61bb      	str	r3, [r7, #24]
 800057a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	4b54      	ldr	r3, [pc, #336]	; (80006d0 <MX_GPIO_Init+0x188>)
 800057e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000582:	4a53      	ldr	r2, [pc, #332]	; (80006d0 <MX_GPIO_Init+0x188>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800058c:	4b50      	ldr	r3, [pc, #320]	; (80006d0 <MX_GPIO_Init+0x188>)
 800058e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	4b4d      	ldr	r3, [pc, #308]	; (80006d0 <MX_GPIO_Init+0x188>)
 800059c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a0:	4a4b      	ldr	r2, [pc, #300]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005aa:	4b49      	ldr	r3, [pc, #292]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b45      	ldr	r3, [pc, #276]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005be:	4a44      	ldr	r2, [pc, #272]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c8:	4b41      	ldr	r3, [pc, #260]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d6:	4b3e      	ldr	r3, [pc, #248]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005dc:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005e6:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005fa:	4a35      	ldr	r2, [pc, #212]	; (80006d0 <MX_GPIO_Init+0x188>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000604:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <MX_GPIO_Init+0x188>)
 8000606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TP11_Pin|TP12_Pin|TP9_Pin|TP10_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	210f      	movs	r1, #15
 8000616:	482f      	ldr	r0, [pc, #188]	; (80006d4 <MX_GPIO_Init+0x18c>)
 8000618:	f002 fc10 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TP7_Pin|TP8_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	210c      	movs	r1, #12
 8000620:	482d      	ldr	r0, [pc, #180]	; (80006d8 <MX_GPIO_Init+0x190>)
 8000622:	f002 fc0b 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP3_Pin|TP1_Pin|TP2_Pin|TP4_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	210f      	movs	r1, #15
 800062a:	482c      	ldr	r0, [pc, #176]	; (80006dc <MX_GPIO_Init+0x194>)
 800062c:	f002 fc06 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOOT_RED_GPIO_Port, LED_BOOT_RED_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000636:	482a      	ldr	r0, [pc, #168]	; (80006e0 <MX_GPIO_Init+0x198>)
 8000638:	f002 fc00 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = TP11_Pin|TP12_Pin|TP9_Pin|TP10_Pin;
 800063c:	230f      	movs	r3, #15
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	4820      	ldr	r0, [pc, #128]	; (80006d4 <MX_GPIO_Init+0x18c>)
 8000654:	f002 fa42 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin;
 8000658:	230c      	movs	r3, #12
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_GPIO_Init+0x190>)
 8000670:	f002 fa34 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP3_Pin|TP1_Pin|TP2_Pin|TP4_Pin;
 8000674:	230f      	movs	r3, #15
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_GPIO_Init+0x194>)
 800068c:	f002 fa26 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BOOT_RED_Pin;
 8000690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_BOOT_RED_GPIO_Port, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_GPIO_Init+0x198>)
 80006aa:	f002 fa17 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAG_IMU_RDY_Pin;
 80006ae:	2308      	movs	r3, #8
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MAG_IMU_RDY_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <MX_GPIO_Init+0x198>)
 80006c2:	f002 fa0b 	bl	8002adc <HAL_GPIO_Init>

}
 80006c6:	bf00      	nop
 80006c8:	3730      	adds	r7, #48	; 0x30
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	58024400 	.word	0x58024400
 80006d4:	58021000 	.word	0x58021000
 80006d8:	58020800 	.word	0x58020800
 80006dc:	58020000 	.word	0x58020000
 80006e0:	58020c00 	.word	0x58020c00

080006e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_I2C1_Init+0x74>)
 80006ea:	4a1c      	ldr	r2, [pc, #112]	; (800075c <MX_I2C1_Init+0x78>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_I2C1_Init+0x74>)
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <MX_I2C1_Init+0x7c>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_I2C1_Init+0x74>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_I2C1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2C1_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_I2C1_Init+0x74>)
 8000720:	f002 fba6 	bl	8002e70 <HAL_I2C_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800072a:	f000 fa92 	bl	8000c52 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072e:	2100      	movs	r1, #0
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <MX_I2C1_Init+0x74>)
 8000732:	f003 fa23 	bl	8003b7c <HAL_I2CEx_ConfigAnalogFilter>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800073c:	f000 fa89 	bl	8000c52 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_I2C1_Init+0x74>)
 8000744:	f003 fa65 	bl	8003c12 <HAL_I2CEx_ConfigDigitalFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800074e:	f000 fa80 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	240001a8 	.word	0x240001a8
 800075c:	40005400 	.word	0x40005400
 8000760:	00b03fdb 	.word	0x00b03fdb

08000764 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_I2C3_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_I2C3_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <MX_I2C3_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_I2C3_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_I2C3_Init+0x74>)
 80007a0:	f002 fb66 	bl	8002e70 <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 fa52 	bl	8000c52 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_I2C3_Init+0x74>)
 80007b2:	f003 f9e3 	bl	8003b7c <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fa49 	bl	8000c52 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_I2C3_Init+0x74>)
 80007c4:	f003 fa25 	bl	8003c12 <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 fa40 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2400015c 	.word	0x2400015c
 80007dc:	40005c00 	.word	0x40005c00
 80007e0:	00b03fdb 	.word	0x00b03fdb

080007e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0bc      	sub	sp, #240	; 0xf0
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	22bc      	movs	r2, #188	; 0xbc
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f00a fe99 	bl	800b53c <memset>
  if(i2cHandle->Instance==I2C1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a63      	ldr	r2, [pc, #396]	; (800099c <HAL_I2C_MspInit+0x1b8>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d14a      	bne.n	80008aa <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000814:	2308      	movs	r3, #8
 8000816:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000818:	2300      	movs	r3, #0
 800081a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	4618      	mov	r0, r3
 8000824:	f004 f9d8 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800082e:	f000 fa10 	bl	8000c52 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b5b      	ldr	r3, [pc, #364]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	4a59      	ldr	r2, [pc, #356]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 800083a:	f043 0302 	orr.w	r3, r3, #2
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000842:	4b57      	ldr	r3, [pc, #348]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	f003 0302 	and.w	r3, r3, #2
 800084c:	61fb      	str	r3, [r7, #28]
 800084e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ACC_GYRO_IMU_I2C1_SCL_Pin|ACC_GYTO_IMU_I2C1_SDA_Pin;
 8000850:	23c0      	movs	r3, #192	; 0xc0
 8000852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000856:	2312      	movs	r3, #18
 8000858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000868:	2304      	movs	r3, #4
 800086a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000872:	4619      	mov	r1, r3
 8000874:	484b      	ldr	r0, [pc, #300]	; (80009a4 <HAL_I2C_MspInit+0x1c0>)
 8000876:	f002 f931 	bl	8002adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 800087c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000880:	4a47      	ldr	r2, [pc, #284]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 8000882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000886:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800088a:	4b45      	ldr	r3, [pc, #276]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 800088c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	69bb      	ldr	r3, [r7, #24]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	201f      	movs	r0, #31
 800089e:	f000 fe24 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008a2:	201f      	movs	r0, #31
 80008a4:	f000 fe3b 	bl	800151e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008a8:	e074      	b.n	8000994 <HAL_I2C_MspInit+0x1b0>
  else if(i2cHandle->Instance==I2C3)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a3e      	ldr	r2, [pc, #248]	; (80009a8 <HAL_I2C_MspInit+0x1c4>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d16f      	bne.n	8000994 <HAL_I2C_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80008b4:	2308      	movs	r3, #8
 80008b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 f988 	bl	8004bd8 <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 80008ce:	f000 f9c0 	bl	8000c52 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e2:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a2a      	ldr	r2, [pc, #168]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MAG_IMU_I2C3_SDA_Pin;
 800090e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000916:	2312      	movs	r3, #18
 8000918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000928:	2304      	movs	r3, #4
 800092a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MAG_IMU_I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000932:	4619      	mov	r1, r3
 8000934:	481d      	ldr	r0, [pc, #116]	; (80009ac <HAL_I2C_MspInit+0x1c8>)
 8000936:	f002 f8d1 	bl	8002adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_IMU_I2C3_SCL_Pin;
 800093a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000942:	2312      	movs	r3, #18
 8000944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000954:	2304      	movs	r3, #4
 8000956:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(MAG_IMU_I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800095e:	4619      	mov	r1, r3
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <HAL_I2C_MspInit+0x1cc>)
 8000962:	f002 f8bb 	bl	8002adc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 8000968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 800096e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000972:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_I2C_MspInit+0x1bc>)
 8000978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800097c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2102      	movs	r1, #2
 8000988:	2048      	movs	r0, #72	; 0x48
 800098a:	f000 fdae 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800098e:	2048      	movs	r0, #72	; 0x48
 8000990:	f000 fdc5 	bl	800151e <HAL_NVIC_EnableIRQ>
}
 8000994:	bf00      	nop
 8000996:	37f0      	adds	r7, #240	; 0xf0
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40005400 	.word	0x40005400
 80009a0:	58024400 	.word	0x58024400
 80009a4:	58020400 	.word	0x58020400
 80009a8:	40005c00 	.word	0x40005c00
 80009ac:	58020800 	.word	0x58020800
 80009b0:	58020000 	.word	0x58020000

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009ba:	f000 f91d 	bl	8000bf8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009be:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <main+0x140>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d11b      	bne.n	8000a02 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
}
 80009ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009d0:	f3bf 8f6f 	isb	sy
}
 80009d4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009d6:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <main+0x140>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
}
 80009e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e4:	f3bf 8f6f 	isb	sy
}
 80009e8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009ea:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <main+0x140>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a41      	ldr	r2, [pc, #260]	; (8000af4 <main+0x140>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f6:	f3bf 8f4f 	dsb	sy
}
 80009fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009fc:	f3bf 8f6f 	isb	sy
}
 8000a00:	e000      	b.n	8000a04 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a02:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <main+0x140>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d138      	bne.n	8000a82 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a10:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <main+0x140>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a18:	f3bf 8f4f 	dsb	sy
}
 8000a1c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a1e:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <main+0x140>)
 8000a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a24:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	0b5b      	lsrs	r3, r3, #13
 8000a2a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a2e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	08db      	lsrs	r3, r3, #3
 8000a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a38:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	015a      	lsls	r2, r3, #5
 8000a3e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a42:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a48:	492a      	ldr	r1, [pc, #168]	; (8000af4 <main+0x140>)
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1ef      	bne.n	8000a3a <main+0x86>
    } while(sets-- != 0U);
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1e5a      	subs	r2, r3, #1
 8000a5e:	60ba      	str	r2, [r7, #8]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1e5      	bne.n	8000a30 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a64:	f3bf 8f4f 	dsb	sy
}
 8000a68:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <main+0x140>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <main+0x140>)
 8000a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a74:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a76:	f3bf 8f4f 	dsb	sy
}
 8000a7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a7c:	f3bf 8f6f 	isb	sy
}
 8000a80:	e000      	b.n	8000a84 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a82:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a84:	f000 fbb8 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a88:	f000 f83c 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f7ff fd5c 	bl	8000548 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000a90:	f7ff fc76 	bl	8000380 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000a94:	f7ff fe26 	bl	80006e4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000a98:	f000 fab8 	bl	800100c <MX_TIM3_Init>
  MX_TIM6_Init();
 8000a9c:	f000 fb04 	bl	80010a8 <MX_TIM6_Init>
  MX_I2C3_Init();
 8000aa0:	f7ff fe60 	bl	8000764 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  // [For Debug, HCLK = 240MHz, SysClk= 480MHz(USED) //
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <main+0x144>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <main+0x144>)
 8000aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <main+0x144>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <main+0x144>)
 8000ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aba:	60d3      	str	r3, [r2, #12]
  //DWT->LAR = 0xC5ACCE55;
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <main+0x148>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <main+0x148>)
 8000ac2:	f023 0301 	bic.w	r3, r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <main+0x148>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <main+0x148>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <main+0x148>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]

  Create_PDOTable_ObjDictionary();
 8000ada:	f006 f98d 	bl	8006df8 <Create_PDOTable_ObjDictionary>
  Create_SDOTable_ObjDictionary();
 8000ade:	f005 ff41 	bl	8006964 <Create_SDOTable_ObjDictionary>

  MS_enum = IDLE;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <main+0x14c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]

  Init_Imu_Ctrl();
 8000ae8:	f007 fd46 	bl	8008578 <Init_Imu_Ctrl>
  Init_Msg_Hdlr();
 8000aec:	f00a f854 	bl	800ab98 <Init_Msg_Hdlr>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <main+0x13c>
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00
 8000af8:	e000edf0 	.word	0xe000edf0
 8000afc:	e0001000 	.word	0xe0001000
 8000b00:	2400cf64 	.word	0x2400cf64

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b09c      	sub	sp, #112	; 0x70
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	224c      	movs	r2, #76	; 0x4c
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00a fd12 	bl	800b53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f00a fd0c 	bl	800b53c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b24:	2002      	movs	r0, #2
 8000b26:	f003 f8c1 	bl	8003cac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <SystemClock_Config+0xec>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a2f      	ldr	r2, [pc, #188]	; (8000bf0 <SystemClock_Config+0xec>)
 8000b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <SystemClock_Config+0xec>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <SystemClock_Config+0xf0>)
 8000b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b48:	4a2a      	ldr	r2, [pc, #168]	; (8000bf4 <SystemClock_Config+0xf0>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <SystemClock_Config+0xf0>)
 8000b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b5c:	bf00      	nop
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <SystemClock_Config+0xec>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b6a:	d1f8      	bne.n	8000b5e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b76:	2302      	movs	r3, #2
 8000b78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b82:	23c0      	movs	r3, #192	; 0xc0
 8000b84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b92:	2308      	movs	r3, #8
 8000b94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 f8bc 	bl	8003d20 <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bae:	f000 f850 	bl	8000c52 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	233f      	movs	r3, #63	; 0x3f
 8000bb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bc2:	2340      	movs	r3, #64	; 0x40
 8000bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bd0:	2340      	movs	r3, #64	; 0x40
 8000bd2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fccd 	bl	8004578 <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000be4:	f000 f835 	bl	8000c52 <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	3770      	adds	r7, #112	; 0x70
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	58024800 	.word	0x58024800
 8000bf4:	58000400 	.word	0x58000400

08000bf8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c0a:	f000 fca3 	bl	8001554 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000c16:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000c1a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000c1c:	230e      	movs	r3, #14
 8000c1e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c30:	2301      	movs	r3, #1
 8000c32:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fcc0 	bl	80015c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c44:	2004      	movs	r0, #4
 8000c46:	f000 fc9d 	bl	8001584 <HAL_MPU_Enable>

}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c56:	b672      	cpsid	i
}
 8000c58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <Error_Handler+0x8>

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_MspInit+0x30>)
 8000c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c68:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x30>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x30>)
 8000c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	58024400 	.word	0x58024400

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 fafe 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <FDCAN1_IT0_IRQHandler+0x10>)
 8000cea:	f001 f9e9 	bl	80020c0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	240000bc 	.word	0x240000bc

08000cf8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <FDCAN1_IT1_IRQHandler+0x10>)
 8000cfe:	f001 f9df 	bl	80020c0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	240000bc 	.word	0x240000bc

08000d0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <TIM3_IRQHandler+0x10>)
 8000d12:	f005 f8d5 	bl	8005ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2400d51c 	.word	0x2400d51c

08000d20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <I2C1_EV_IRQHandler+0x10>)
 8000d26:	f002 fc69 	bl	80035fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	240001a8 	.word	0x240001a8

08000d34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <TIM6_DAC_IRQHandler+0x10>)
 8000d3a:	f005 f8c1 	bl	8005ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2400d568 	.word	0x2400d568

08000d48 <FDCAN_CAL_IRQHandler>:

/**
  * @brief This function handles FDCAN calibration unit interrupt.
  */
void FDCAN_CAL_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN_CAL_IRQn 0 */

  /* USER CODE END FDCAN_CAL_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <FDCAN_CAL_IRQHandler+0x10>)
 8000d4e:	f001 f9b7 	bl	80020c0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN_CAL_IRQn 1 */

  /* USER CODE END FDCAN_CAL_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	240000bc 	.word	0x240000bc

08000d5c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <I2C3_EV_IRQHandler+0x10>)
 8000d62:	f002 fc4b 	bl	80035fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2400015c 	.word	0x2400015c

08000d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	return 1;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_kill>:

int _kill(int pid, int sig)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d8a:	f00a fb7d 	bl	800b488 <__errno>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2216      	movs	r2, #22
 8000d92:	601a      	str	r2, [r3, #0]
	return -1;
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_exit>:

void _exit (int status)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ffe7 	bl	8000d80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000db2:	e7fe      	b.n	8000db2 <_exit+0x12>

08000db4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
	}

return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
	}
	return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_isatty>:

int _isatty(int file)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f00a fae2 	bl	800b488 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	24080000 	.word	0x24080000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	24000094 	.word	0x24000094
 8000ef8:	2400d620 	.word	0x2400d620

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f00:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <SystemInit+0xe4>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a36      	ldr	r2, [pc, #216]	; (8000fe0 <SystemInit+0xe4>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f10:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <SystemInit+0xe8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 030f 	and.w	r3, r3, #15
 8000f18:	2b06      	cmp	r3, #6
 8000f1a:	d807      	bhi.n	8000f2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f1c:	4b31      	ldr	r3, [pc, #196]	; (8000fe4 <SystemInit+0xe8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 030f 	bic.w	r3, r3, #15
 8000f24:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <SystemInit+0xe8>)
 8000f26:	f043 0307 	orr.w	r3, r3, #7
 8000f2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f2c:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <SystemInit+0xec>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <SystemInit+0xec>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f38:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <SystemInit+0xec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <SystemInit+0xec>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4929      	ldr	r1, [pc, #164]	; (8000fe8 <SystemInit+0xec>)
 8000f44:	4b29      	ldr	r3, [pc, #164]	; (8000fec <SystemInit+0xf0>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f4a:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <SystemInit+0xe8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f56:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <SystemInit+0xe8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f023 030f 	bic.w	r3, r3, #15
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <SystemInit+0xe8>)
 8000f60:	f043 0307 	orr.w	r3, r3, #7
 8000f64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f66:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <SystemInit+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <SystemInit+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <SystemInit+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <SystemInit+0xec>)
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <SystemInit+0xf4>)
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <SystemInit+0xec>)
 8000f80:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <SystemInit+0xf8>)
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <SystemInit+0xec>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <SystemInit+0xfc>)
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <SystemInit+0xec>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <SystemInit+0xec>)
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <SystemInit+0xfc>)
 8000f94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <SystemInit+0xec>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <SystemInit+0xec>)
 8000f9e:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <SystemInit+0xfc>)
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <SystemInit+0xec>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <SystemInit+0xec>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <SystemInit+0xec>)
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <SystemInit+0xec>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <SystemInit+0x100>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <SystemInit+0x104>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fc6:	d202      	bcs.n	8000fce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <SystemInit+0x108>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <SystemInit+0x10c>)
 8000fd0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fd4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	52002000 	.word	0x52002000
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ff0:	02020200 	.word	0x02020200
 8000ff4:	01ff0000 	.word	0x01ff0000
 8000ff8:	01010280 	.word	0x01010280
 8000ffc:	5c001000 	.word	0x5c001000
 8001000:	ffff0000 	.word	0xffff0000
 8001004:	51008108 	.word	0x51008108
 8001008:	52004000 	.word	0x52004000

0800100c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_TIM3_Init+0x94>)
 800102c:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <MX_TIM3_Init+0x98>)
 800102e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_TIM3_Init+0x94>)
 8001032:	22ef      	movs	r2, #239	; 0xef
 8001034:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_TIM3_Init+0x94>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_TIM3_Init+0x94>)
 800103e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001042:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_TIM3_Init+0x94>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_TIM3_Init+0x94>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001050:	4813      	ldr	r0, [pc, #76]	; (80010a0 <MX_TIM3_Init+0x94>)
 8001052:	f004 fe65 	bl	8005d20 <HAL_TIM_Base_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800105c:	f7ff fdf9 	bl	8000c52 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <MX_TIM3_Init+0x94>)
 800106e:	f005 f847 	bl	8006100 <HAL_TIM_ConfigClockSource>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001078:	f7ff fdeb 	bl	8000c52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_TIM3_Init+0x94>)
 800108a:	f005 fa91 	bl	80065b0 <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001094:	f7ff fddd 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2400d51c 	.word	0x2400d51c
 80010a4:	40000400 	.word	0x40000400

080010a8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_TIM6_Init+0x64>)
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <MX_TIM6_Init+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <MX_TIM6_Init+0x64>)
 80010c0:	22ef      	movs	r2, #239	; 0xef
 80010c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_TIM6_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_TIM6_Init+0x64>)
 80010cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_TIM6_Init+0x64>)
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <MX_TIM6_Init+0x64>)
 80010da:	f004 fe21 	bl	8005d20 <HAL_TIM_Base_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80010e4:	f7ff fdb5 	bl	8000c52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_TIM6_Init+0x64>)
 80010f6:	f005 fa5b 	bl	80065b0 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001100:	f7ff fda7 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2400d568 	.word	0x2400d568
 8001110:	40001000 	.word	0x40001000

08001114 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <HAL_TIM_Base_MspInit+0x84>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d117      	bne.n	8001156 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_TIM_Base_MspInit+0x88>)
 8001128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_TIM_Base_MspInit+0x88>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_TIM_Base_MspInit+0x88>)
 8001138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2103      	movs	r1, #3
 8001148:	201d      	movs	r0, #29
 800114a:	f000 f9ce 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800114e:	201d      	movs	r0, #29
 8001150:	f000 f9e5 	bl	800151e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001154:	e01b      	b.n	800118e <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM6)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <HAL_TIM_Base_MspInit+0x8c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d116      	bne.n	800118e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_TIM_Base_MspInit+0x88>)
 8001162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001166:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_TIM_Base_MspInit+0x88>)
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_TIM_Base_MspInit+0x88>)
 8001172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2102      	movs	r1, #2
 8001182:	2036      	movs	r0, #54	; 0x36
 8001184:	f000 f9b1 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001188:	2036      	movs	r0, #54	; 0x36
 800118a:	f000 f9c8 	bl	800151e <HAL_NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40000400 	.word	0x40000400
 800119c:	58024400 	.word	0x58024400
 80011a0:	40001000 	.word	0x40001000

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011a8:	f7ff fea8 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	; (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f00a f971 	bl	800b4b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff fbed 	bl	80009b4 <main>
  bx  lr
 80011da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011e4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80011e8:	0800ee88 	.word	0x0800ee88
  ldr r2, =_sbss
 80011ec:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80011f0:	2400d61c 	.word	0x2400d61c

080011f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC3_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fe:	2003      	movs	r0, #3
 8001200:	f000 f968 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001204:	f003 fb6e 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 8001208:	4602      	mov	r2, r0
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_Init+0x68>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	f003 030f 	and.w	r3, r3, #15
 8001214:	4913      	ldr	r1, [pc, #76]	; (8001264 <HAL_Init+0x6c>)
 8001216:	5ccb      	ldrb	r3, [r1, r3]
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_Init+0x68>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_Init+0x6c>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_Init+0x70>)
 800123a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_Init+0x74>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001242:	200f      	movs	r0, #15
 8001244:	f000 f814 	bl	8001270 <HAL_InitTick>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e002      	b.n	8001258 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001252:	f7ff fd03 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	58024400 	.word	0x58024400
 8001264:	0800d444 	.word	0x0800d444
 8001268:	24000004 	.word	0x24000004
 800126c:	24000000 	.word	0x24000000

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_InitTick+0x60>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e021      	b.n	80012c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_InitTick+0x64>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_InitTick+0x60>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f94d 	bl	800153a <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f917 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x68>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2400000c 	.word	0x2400000c
 80012d4:	24000000 	.word	0x24000000
 80012d8:	24000008 	.word	0x24000008

080012dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2400000c 	.word	0x2400000c
 8001300:	2400d5b4 	.word	0x2400d5b4

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2400d5b4 	.word	0x2400d5b4

0800131c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <HAL_GetREVID+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0c1b      	lsrs	r3, r3, #16
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	5c001000 	.word	0x5c001000

08001334 <__NVIC_SetPriorityGrouping>:
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <__NVIC_SetPriorityGrouping+0x40>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001350:	4013      	ands	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	4313      	orrs	r3, r2
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x40>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00
 8001378:	05fa0000 	.word	0x05fa0000

0800137c <__NVIC_GetPriorityGrouping>:
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <__NVIC_GetPriorityGrouping+0x18>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	f003 0307 	and.w	r3, r3, #7
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_EnableIRQ>:
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db0b      	blt.n	80013c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f003 021f 	and.w	r2, r3, #31
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <__NVIC_EnableIRQ+0x38>)
 80013b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b6:	095b      	lsrs	r3, r3, #5
 80013b8:	2001      	movs	r0, #1
 80013ba:	fa00 f202 	lsl.w	r2, r0, r2
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff8e 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff29 	bl	8001334 <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff40 	bl	800137c <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff90 	bl	8001428 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5f 	bl	80013d4 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff33 	bl	8001398 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa4 	bl	8001490 <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001558:	f3bf 8f5f 	dmb	sy
}
 800155c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_MPU_Disable+0x28>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <HAL_MPU_Disable+0x28>)
 8001564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001568:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_MPU_Disable+0x2c>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00
 8001580:	e000ed90 	.word	0xe000ed90

08001584 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800158c:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_MPU_Enable+0x38>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_MPU_Enable+0x3c>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_MPU_Enable+0x3c>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015a2:	f3bf 8f4f 	dsb	sy
}
 80015a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015a8:	f3bf 8f6f 	isb	sy
}
 80015ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed90 	.word	0xe000ed90
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	785a      	ldrb	r2, [r3, #1]
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_MPU_ConfigRegion+0x84>)
 80015d2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d029      	beq.n	8001630 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80015dc:	4a1a      	ldr	r2, [pc, #104]	; (8001648 <HAL_MPU_ConfigRegion+0x84>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7b1b      	ldrb	r3, [r3, #12]
 80015e8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7adb      	ldrb	r3, [r3, #11]
 80015ee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7a9b      	ldrb	r3, [r3, #10]
 80015f6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	7b5b      	ldrb	r3, [r3, #13]
 80015fe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001600:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7b9b      	ldrb	r3, [r3, #14]
 8001606:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001608:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7bdb      	ldrb	r3, [r3, #15]
 800160e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001610:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7a5b      	ldrb	r3, [r3, #9]
 8001616:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001618:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7a1b      	ldrb	r3, [r3, #8]
 800161e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001620:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800162a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800162c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800162e:	e005      	b.n	800163c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_MPU_ConfigRegion+0x84>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <HAL_MPU_ConfigRegion+0x84>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed90 	.word	0xe000ed90

0800164c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b098      	sub	sp, #96	; 0x60
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001654:	4a84      	ldr	r2, [pc, #528]	; (8001868 <HAL_FDCAN_Init+0x21c>)
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4611      	mov	r1, r2
 800165c:	224c      	movs	r2, #76	; 0x4c
 800165e:	4618      	mov	r0, r3
 8001660:	f009 ff5e 	bl	800b520 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e1ca      	b.n	8001a04 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7e      	ldr	r2, [pc, #504]	; (800186c <HAL_FDCAN_Init+0x220>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d106      	bne.n	8001686 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001680:	461a      	mov	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe fed6 	bl	800044c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0210 	bic.w	r2, r2, #16
 80016ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b0:	f7ff fe28 	bl	8001304 <HAL_GetTick>
 80016b4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016b6:	e014      	b.n	80016e2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016b8:	f7ff fe24 	bl	8001304 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b0a      	cmp	r3, #10
 80016c4:	d90d      	bls.n	80016e2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016cc:	f043 0201 	orr.w	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2203      	movs	r2, #3
 80016da:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e190      	b.n	8001a04 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d0e3      	beq.n	80016b8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001700:	f7ff fe00 	bl	8001304 <HAL_GetTick>
 8001704:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001706:	e014      	b.n	8001732 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001708:	f7ff fdfc 	bl	8001304 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b0a      	cmp	r3, #10
 8001714:	d90d      	bls.n	8001732 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2203      	movs	r2, #3
 800172a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e168      	b.n	8001a04 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0e3      	beq.n	8001708 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699a      	ldr	r2, [r3, #24]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0202 	orr.w	r2, r2, #2
 800174e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7c1b      	ldrb	r3, [r3, #16]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001766:	619a      	str	r2, [r3, #24]
 8001768:	e007      	b.n	800177a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699a      	ldr	r2, [r3, #24]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001778:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7c5b      	ldrb	r3, [r3, #17]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	699a      	ldr	r2, [r3, #24]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001790:	619a      	str	r2, [r3, #24]
 8001792:	e007      	b.n	80017a4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7c9b      	ldrb	r3, [r3, #18]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d108      	bne.n	80017be <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699a      	ldr	r2, [r3, #24]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017ba:	619a      	str	r2, [r3, #24]
 80017bc:	e007      	b.n	80017ce <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017cc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699a      	ldr	r2, [r3, #24]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80017f2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0210 	bic.w	r2, r2, #16
 8001802:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d108      	bne.n	800181e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0204 	orr.w	r2, r2, #4
 800181a:	619a      	str	r2, [r3, #24]
 800181c:	e030      	b.n	8001880 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d02c      	beq.n	8001880 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d020      	beq.n	8001870 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699a      	ldr	r2, [r3, #24]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800183c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0210 	orr.w	r2, r2, #16
 800184c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d114      	bne.n	8001880 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699a      	ldr	r2, [r3, #24]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0220 	orr.w	r2, r2, #32
 8001864:	619a      	str	r2, [r3, #24]
 8001866:	e00b      	b.n	8001880 <HAL_FDCAN_Init+0x234>
 8001868:	0800d328 	.word	0x0800d328
 800186c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0220 	orr.w	r2, r2, #32
 800187e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	3b01      	subs	r3, #1
 8001886:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	3b01      	subs	r3, #1
 800188e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001890:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001898:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018a8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018aa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018b4:	d115      	bne.n	80018e2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	3b01      	subs	r3, #1
 80018c2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018c4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	3b01      	subs	r3, #1
 80018cc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80018ce:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	3b01      	subs	r3, #1
 80018d8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80018de:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018e0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001908:	4413      	add	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d012      	beq.n	8001934 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001916:	f023 0107 	bic.w	r1, r3, #7
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001924:	4413      	add	r3, r2
 8001926:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d012      	beq.n	8001962 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001944:	f023 0107 	bic.w	r1, r3, #7
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001952:	4413      	add	r3, r2
 8001954:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001966:	2b00      	cmp	r3, #0
 8001968:	d013      	beq.n	8001992 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001972:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001980:	4413      	add	r3, r2
 8001982:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001986:	011a      	lsls	r2, r3, #4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001996:	2b00      	cmp	r3, #0
 8001998:	d013      	beq.n	80019c2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80019a2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019b0:	4413      	add	r3, r2
 80019b2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80019b6:	021a      	lsls	r2, r3, #8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a11      	ldr	r2, [pc, #68]	; (8001a0c <HAL_FDCAN_Init+0x3c0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d107      	bne.n	80019dc <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f022 0203 	bic.w	r2, r2, #3
 80019da:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fe6d 	bl	80026d4 <FDCAN_CalcultateRamBlockAddresses>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001a00:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3760      	adds	r7, #96	; 0x60
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	4000a000 	.word	0x4000a000

08001a10 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a20:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d002      	beq.n	8001a2e <HAL_FDCAN_ConfigFilter+0x1e>
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d157      	bne.n	8001ade <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d12b      	bne.n	8001a8e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b07      	cmp	r3, #7
 8001a3c:	d10d      	bne.n	8001a5a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001a4a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001a50:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001a52:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e00e      	b.n	8001a78 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a66:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001a6e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e025      	b.n	8001ada <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	075a      	lsls	r2, r3, #29
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d103      	bne.n	8001aac <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	e006      	b.n	8001aba <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	079a      	lsls	r2, r3, #30
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e008      	b.n	8001af0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ae4:	f043 0202 	orr.w	r2, r3, #2
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
  }
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d110      	bne.n	8001b38 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001b1e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001b24:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e008      	b.n	8001b4a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b3e:	f043 0204 	orr.w	r2, r3, #4
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_FDCAN_ConfigTxDelayCompensation>:
  * @param  TdcFilter Transmitter Delay Compensation Filter Window Length.
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset, uint32_t TdcFilter)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d108      	bne.n	8001b80 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	0219      	lsls	r1, r3, #8
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e008      	b.n	8001b92 <HAL_FDCAN_ConfigTxDelayCompensation+0x3c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b86:	f043 0204 	orr.w	r2, r3, #4
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d109      	bne.n	8001bc6 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bc0:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e008      	b.n	8001bd8 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bcc:	f043 0204 	orr.w	r2, r3, #4
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
  }
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d111      	bne.n	8001c1c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e008      	b.n	8001c2e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c22:	f043 0204 	orr.w	r2, r3, #4
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b086      	sub	sp, #24
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d141      	bne.n	8001cd6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c5a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e038      	b.n	8001ce8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e026      	b.n	8001ce8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ca2:	0c1b      	lsrs	r3, r3, #16
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fe95 	bl	80029e0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e008      	b.n	8001ce8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cdc:	f043 0208 	orr.w	r2, r3, #8
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d08:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001d0a:	7efb      	ldrb	r3, [r7, #27]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	f040 814b 	bne.w	8001fa8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	d14d      	bne.n	8001db4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d20:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d2e:	f043 0220 	orr.w	r2, r3, #32
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e13e      	b.n	8001fba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e12c      	b.n	8001fba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d68:	0e1b      	lsrs	r3, r3, #24
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10b      	bne.n	8001d8a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d7a:	0fdb      	lsrs	r3, r3, #31
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d84:	d101      	bne.n	8001d8a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	69f9      	ldr	r1, [r7, #28]
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
 8001db2:	e069      	b.n	8001e88 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b41      	cmp	r3, #65	; 0x41
 8001db8:	d14d      	bne.n	8001e56 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dd0:	f043 0220 	orr.w	r2, r3, #32
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0ed      	b.n	8001fba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001df4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0db      	b.n	8001fba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e0a:	0e1b      	lsrs	r3, r3, #24
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10b      	bne.n	8001e2c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e1c:	0fdb      	lsrs	r3, r3, #31
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e26:	d101      	bne.n	8001e2c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e48:	69f9      	ldr	r1, [r7, #28]
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
 8001e54:	e018      	b.n	8001e88 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d309      	bcc.n	8001e74 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e66:	f043 0220 	orr.w	r2, r3, #32
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0a2      	b.n	8001fba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e005      	b.n	8001eb8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0e1b      	lsrs	r3, r3, #24
 8001f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0fda      	lsrs	r2, r3, #31
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	3304      	adds	r3, #4
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
 8001f2a:	e00a      	b.n	8001f42 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	441a      	add	r2, r3
 8001f32:	6839      	ldr	r1, [r7, #0]
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	440b      	add	r3, r1
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	623b      	str	r3, [r7, #32]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	0c1b      	lsrs	r3, r3, #16
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d3eb      	bcc.n	8001f2c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d105      	bne.n	8001f66 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001f64:	e01e      	b.n	8001fa4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b41      	cmp	r3, #65	; 0x41
 8001f6a:	d105      	bne.n	8001f78 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001f76:	e015      	b.n	8001fa4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b1f      	cmp	r3, #31
 8001f7c:	d808      	bhi.n	8001f90 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001f8e:	e009      	b.n	8001fa4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 021f 	and.w	r2, r3, #31
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e008      	b.n	8001fba <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fae:	f043 0208 	orr.w	r2, r3, #8
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	372c      	adds	r7, #44	; 0x2c
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	0800d454 	.word	0x0800d454

08001fcc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001fde:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d002      	beq.n	8001fec <HAL_FDCAN_ActivateNotification+0x20>
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d155      	bne.n	8002098 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d108      	bne.n	800200c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	65da      	str	r2, [r3, #92]	; 0x5c
 800200a:	e014      	b.n	8002036 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	4013      	ands	r3, r2
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	429a      	cmp	r2, r3
 800201a:	d108      	bne.n	800202e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0202 	orr.w	r2, r2, #2
 800202a:	65da      	str	r2, [r3, #92]	; 0x5c
 800202c:	e003      	b.n	8002036 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2203      	movs	r2, #3
 8002034:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	430a      	orrs	r2, r1
 8002050:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	430a      	orrs	r2, r1
 800206e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_FDCAN_ActivateNotification+0xec>)
 800207c:	4013      	ands	r3, r2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	430b      	orrs	r3, r1
 8002084:	6553      	str	r3, [r2, #84]	; 0x54
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_FDCAN_ActivateNotification+0xf0>)
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	0f9b      	lsrs	r3, r3, #30
 800208e:	490b      	ldr	r1, [pc, #44]	; (80020bc <HAL_FDCAN_ActivateNotification+0xf0>)
 8002090:	4313      	orrs	r3, r2
 8002092:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e008      	b.n	80020aa <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800209e:	f043 0202 	orr.w	r2, r3, #2
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	3fcfffff 	.word	0x3fcfffff
 80020bc:	4000a800 	.word	0x4000a800

080020c0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b092      	sub	sp, #72	; 0x48
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80020c8:	4b90      	ldr	r3, [pc, #576]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	079b      	lsls	r3, r3, #30
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80020d0:	4b8e      	ldr	r3, [pc, #568]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	079b      	lsls	r3, r3, #30
 80020d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020d8:	4013      	ands	r3, r2
 80020da:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80020e6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020f0:	4013      	ands	r3, r2
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002108:	4013      	ands	r3, r2
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002120:	4013      	ands	r3, r2
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002138:	4013      	ands	r3, r2
 800213a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002142:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002150:	4013      	ands	r3, r2
 8002152:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d011      	beq.n	8002186 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002178:	651a      	str	r2, [r3, #80]	; 0x50
 800217a:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fa5a 	bl	800263a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01e      	beq.n	80021d2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d017      	beq.n	80021d2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80021b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b6:	4013      	ands	r3, r2
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c2:	651a      	str	r2, [r3, #80]	; 0x50
 80021c4:	4b51      	ldr	r3, [pc, #324]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80021ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fa0b 	bl	80025e8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80021d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021de:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_FDCAN_IRQHandler+0x250>)
 80021e0:	400b      	ands	r3, r1
 80021e2:	6513      	str	r3, [r2, #80]	; 0x50
 80021e4:	4a49      	ldr	r2, [pc, #292]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 80021e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e8:	0f9b      	lsrs	r3, r3, #30
 80021ea:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80021ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f9c4 	bl	800257c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80021f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002200:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_FDCAN_IRQHandler+0x250>)
 8002202:	400b      	ands	r3, r1
 8002204:	6513      	str	r3, [r2, #80]	; 0x50
 8002206:	4a41      	ldr	r2, [pc, #260]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 8002208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800220a:	0f9b      	lsrs	r3, r3, #30
 800220c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800220e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f9be 	bl	8002592 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002222:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_FDCAN_IRQHandler+0x250>)
 8002224:	400b      	ands	r3, r1
 8002226:	6513      	str	r3, [r2, #80]	; 0x50
 8002228:	4a38      	ldr	r2, [pc, #224]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 800222a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800222c:	0f9b      	lsrs	r3, r3, #30
 800222e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002230:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f005 fc0c 	bl	8007a50 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00d      	beq.n	800225a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002244:	4b32      	ldr	r3, [pc, #200]	; (8002310 <HAL_FDCAN_IRQHandler+0x250>)
 8002246:	400b      	ands	r3, r1
 8002248:	6513      	str	r3, [r2, #80]	; 0x50
 800224a:	4a30      	ldr	r2, [pc, #192]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	0f9b      	lsrs	r3, r3, #30
 8002250:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f9a7 	bl	80025a8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d011      	beq.n	800228c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227e:	651a      	str	r2, [r3, #80]	; 0x50
 8002280:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f999 	bl	80025be <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01e      	beq.n	80022d8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022bc:	4013      	ands	r3, r2
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80022d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f97d 	bl	80025d2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00f      	beq.n	8002314 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022fc:	651a      	str	r2, [r3, #80]	; 0x50
 80022fe:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_FDCAN_IRQHandler+0x24c>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f97a 	bl	80025fe <HAL_FDCAN_RxBufferNewMessageCallback>
 800230a:	e003      	b.n	8002314 <HAL_FDCAN_IRQHandler+0x254>
 800230c:	4000a800 	.word	0x4000a800
 8002310:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d011      	beq.n	8002346 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002338:	651a      	str	r2, [r3, #80]	; 0x50
 800233a:	4b8d      	ldr	r3, [pc, #564]	; (8002570 <HAL_FDCAN_IRQHandler+0x4b0>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f966 	bl	8002612 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d011      	beq.n	8002378 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800236a:	651a      	str	r2, [r3, #80]	; 0x50
 800236c:	4b80      	ldr	r3, [pc, #512]	; (8002570 <HAL_FDCAN_IRQHandler+0x4b0>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f957 	bl	8002626 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00f      	beq.n	80023b4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800239c:	651a      	str	r2, [r3, #80]	; 0x50
 800239e:	4b74      	ldr	r3, [pc, #464]	; (8002570 <HAL_FDCAN_IRQHandler+0x4b0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00d      	beq.n	80023d6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023c0:	4b6c      	ldr	r3, [pc, #432]	; (8002574 <HAL_FDCAN_IRQHandler+0x4b4>)
 80023c2:	400b      	ands	r3, r1
 80023c4:	6513      	str	r3, [r2, #80]	; 0x50
 80023c6:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <HAL_FDCAN_IRQHandler+0x4b0>)
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	0f9b      	lsrs	r3, r3, #30
 80023cc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80023ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f946 	bl	8002662 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80023d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d011      	beq.n	8002400 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023e2:	4b64      	ldr	r3, [pc, #400]	; (8002574 <HAL_FDCAN_IRQHandler+0x4b4>)
 80023e4:	400b      	ands	r3, r1
 80023e6:	6513      	str	r3, [r2, #80]	; 0x50
 80023e8:	4a61      	ldr	r2, [pc, #388]	; (8002570 <HAL_FDCAN_IRQHandler+0x4b0>)
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ec:	0f9b      	lsrs	r3, r3, #30
 80023ee:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a5c      	ldr	r2, [pc, #368]	; (8002578 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	f040 80a6 	bne.w	8002558 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 809e 	beq.w	8002558 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002430:	4013      	ands	r3, r2
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800243e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	6a3a      	ldr	r2, [r7, #32]
 8002448:	4013      	ands	r3, r2
 800244a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002456:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	4013      	ands	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800246e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002486:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80024a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f8e7 	bl	8002678 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80024b8:	6a39      	ldr	r1, [r7, #32]
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8e7 	bl	800268e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01b      	beq.n	8002506 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d014      	beq.n	8002506 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2240      	movs	r2, #64	; 0x40
 80024fa:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	6939      	ldr	r1, [r7, #16]
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8cf 	bl	80026a4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002514:	69f9      	ldr	r1, [r7, #28]
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8d0 	bl	80026bc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f873 	bl	800264e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002568:	bf00      	nop
 800256a:	3748      	adds	r7, #72	; 0x48
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	4000a800 	.word	0x4000a800
 8002574:	3fcfffff 	.word	0x3fcfffff
 8002578:	4000a000 	.word	0x4000a000

0800257c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80026ea:	4ba7      	ldr	r3, [pc, #668]	; (8002988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	0091      	lsls	r1, r2, #2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	430b      	orrs	r3, r1
 80026f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002704:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	041a      	lsls	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	4413      	add	r3, r2
 8002720:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800272a:	4b97      	ldr	r3, [pc, #604]	; (8002988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800272c:	4013      	ands	r3, r2
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	0091      	lsls	r1, r2, #2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	430b      	orrs	r3, r1
 8002738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4413      	add	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800276c:	4b86      	ldr	r3, [pc, #536]	; (8002988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800276e:	4013      	ands	r3, r2
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	0091      	lsls	r1, r2, #2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002786:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	041a      	lsls	r2, r3, #16
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027a2:	fb02 f303 	mul.w	r3, r2, r3
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	4413      	add	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027b4:	4b74      	ldr	r3, [pc, #464]	; (8002988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	0091      	lsls	r1, r2, #2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027ce:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d6:	041a      	lsls	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	4413      	add	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80027fc:	4b62      	ldr	r3, [pc, #392]	; (8002988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80027fe:	4013      	ands	r3, r2
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	0091      	lsls	r1, r2, #2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	4413      	add	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002828:	4b57      	ldr	r3, [pc, #348]	; (8002988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800282a:	4013      	ands	r3, r2
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	0091      	lsls	r1, r2, #2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	430b      	orrs	r3, r1
 8002836:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002842:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	041a      	lsls	r2, r3, #16
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4413      	add	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800286a:	4b47      	ldr	r3, [pc, #284]	; (8002988 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800286c:	4013      	ands	r3, r2
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	0091      	lsls	r1, r2, #2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	430b      	orrs	r3, r1
 8002878:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002884:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	041a      	lsls	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028a0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a8:	061a      	lsls	r2, r3, #24
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80028ba:	4413      	add	r3, r2
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	441a      	add	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	441a      	add	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	441a      	add	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	441a      	add	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	441a      	add	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d915      	bls.n	80029b0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002984:	e006      	b.n	8002994 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002986:	bf00      	nop
 8002988:	ffff0003 	.word	0xffff0003
 800298c:	10002b00 	.word	0x10002b00
 8002990:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2203      	movs	r2, #3
 80029a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e010      	b.n	80029d2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e005      	b.n	80029c4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3304      	adds	r3, #4
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d3f3      	bcc.n	80029b8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop

080029e0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b089      	sub	sp, #36	; 0x24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80029fe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e00a      	b.n	8002a22 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002a14:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002a1a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a20:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002a2c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002a32:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002a38:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3304      	adds	r3, #4
 8002a62:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e020      	b.n	8002ab8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3303      	adds	r3, #3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3302      	adds	r3, #2
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	440b      	add	r3, r1
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002a8e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3301      	adds	r3, #1
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	440b      	add	r3, r1
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002a9c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	440a      	add	r2, r1
 8002aa4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002aa6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <FDCAN_CopyMessageToRAM+0xf8>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d3d5      	bcc.n	8002a76 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002aca:	bf00      	nop
 8002acc:	bf00      	nop
 8002ace:	3724      	adds	r7, #36	; 0x24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	0800d454 	.word	0x0800d454

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_GPIO_Init+0x234>)
 8002aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002aee:	e194      	b.n	8002e1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8186 	beq.w	8002e14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d005      	beq.n	8002b20 <HAL_GPIO_Init+0x44>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d130      	bne.n	8002b82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b56:	2201      	movs	r2, #1
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 0201 	and.w	r2, r3, #1
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d017      	beq.n	8002bbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d123      	bne.n	8002c12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	08da      	lsrs	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3208      	adds	r2, #8
 8002bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	220f      	movs	r2, #15
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	69b9      	ldr	r1, [r7, #24]
 8002c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80e0 	beq.w	8002e14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c54:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <HAL_GPIO_Init+0x238>)
 8002c56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <HAL_GPIO_Init+0x238>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <HAL_GPIO_Init+0x238>)
 8002c66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c72:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <HAL_GPIO_Init+0x23c>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a20      	ldr	r2, [pc, #128]	; (8002d1c <HAL_GPIO_Init+0x240>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d052      	beq.n	8002d44 <HAL_GPIO_Init+0x268>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <HAL_GPIO_Init+0x244>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d031      	beq.n	8002d0a <HAL_GPIO_Init+0x22e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_GPIO_Init+0x248>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d02b      	beq.n	8002d06 <HAL_GPIO_Init+0x22a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <HAL_GPIO_Init+0x24c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d025      	beq.n	8002d02 <HAL_GPIO_Init+0x226>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_GPIO_Init+0x250>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d01f      	beq.n	8002cfe <HAL_GPIO_Init+0x222>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <HAL_GPIO_Init+0x254>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d019      	beq.n	8002cfa <HAL_GPIO_Init+0x21e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <HAL_GPIO_Init+0x258>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_GPIO_Init+0x21a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_GPIO_Init+0x25c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00d      	beq.n	8002cf2 <HAL_GPIO_Init+0x216>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	; (8002d3c <HAL_GPIO_Init+0x260>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d007      	beq.n	8002cee <HAL_GPIO_Init+0x212>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_GPIO_Init+0x264>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_GPIO_Init+0x20e>
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	e02d      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cea:	230a      	movs	r3, #10
 8002cec:	e02b      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cee:	2308      	movs	r3, #8
 8002cf0:	e029      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e027      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	e025      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e023      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	e021      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e01f      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e01d      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e01b      	b.n	8002d46 <HAL_GPIO_Init+0x26a>
 8002d0e:	bf00      	nop
 8002d10:	58000080 	.word	0x58000080
 8002d14:	58024400 	.word	0x58024400
 8002d18:	58000400 	.word	0x58000400
 8002d1c:	58020000 	.word	0x58020000
 8002d20:	58020400 	.word	0x58020400
 8002d24:	58020800 	.word	0x58020800
 8002d28:	58020c00 	.word	0x58020c00
 8002d2c:	58021000 	.word	0x58021000
 8002d30:	58021400 	.word	0x58021400
 8002d34:	58021800 	.word	0x58021800
 8002d38:	58021c00 	.word	0x58021c00
 8002d3c:	58022000 	.word	0x58022000
 8002d40:	58022400 	.word	0x58022400
 8002d44:	2300      	movs	r3, #0
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	f002 0203 	and.w	r2, r2, #3
 8002d4c:	0092      	lsls	r2, r2, #2
 8002d4e:	4093      	lsls	r3, r2
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d56:	4938      	ldr	r1, [pc, #224]	; (8002e38 <HAL_GPIO_Init+0x35c>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	3301      	adds	r3, #1
 8002e18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f ae63 	bne.w	8002af0 <HAL_GPIO_Init+0x14>
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	3724      	adds	r7, #36	; 0x24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	58000400 	.word	0x58000400

08002e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e4c:	787b      	ldrb	r3, [r7, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e58:	e003      	b.n	8002e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07f      	b.n	8002f82 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fca4 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	; 0x24
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e006      	b.n	8002ef8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ef6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d104      	bne.n	8002f0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_I2C_Init+0x11c>)
 8002f16:	430b      	orrs	r3, r1
 8002f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69d9      	ldr	r1, [r3, #28]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	02008000 	.word	0x02008000

08002f90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	4608      	mov	r0, r1
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	817b      	strh	r3, [r7, #10]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	813b      	strh	r3, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	f040 80f9 	bne.w	80031aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_I2C_Mem_Write+0x34>
 8002fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0ed      	b.n	80031ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_Mem_Write+0x4e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0e6      	b.n	80031ac <HAL_I2C_Mem_Write+0x21c>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fe6:	f7fe f98d 	bl	8001304 <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2319      	movs	r3, #25
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fbe5 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0d1      	b.n	80031ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2221      	movs	r2, #33	; 0x21
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2240      	movs	r2, #64	; 0x40
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003030:	88f8      	ldrh	r0, [r7, #6]
 8003032:	893a      	ldrh	r2, [r7, #8]
 8003034:	8979      	ldrh	r1, [r7, #10]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4603      	mov	r3, r0
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 faf5 	bl	8003630 <I2C_RequestMemoryWrite>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0a9      	b.n	80031ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2bff      	cmp	r3, #255	; 0xff
 8003060:	d90e      	bls.n	8003080 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	22ff      	movs	r2, #255	; 0xff
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	b2da      	uxtb	r2, r3
 800306e:	8979      	ldrh	r1, [r7, #10]
 8003070:	2300      	movs	r3, #0
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fd4d 	bl	8003b18 <I2C_TransferConfig>
 800307e:	e00f      	b.n	80030a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	b2da      	uxtb	r2, r3
 8003090:	8979      	ldrh	r1, [r7, #10]
 8003092:	2300      	movs	r3, #0
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fd3c 	bl	8003b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fbcf 	bl	8003848 <I2C_WaitOnTXISFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e07b      	b.n	80031ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d034      	beq.n	8003158 <HAL_I2C_Mem_Write+0x1c8>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d130      	bne.n	8003158 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	2200      	movs	r2, #0
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fb61 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e04d      	b.n	80031ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2bff      	cmp	r3, #255	; 0xff
 8003118:	d90e      	bls.n	8003138 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	22ff      	movs	r2, #255	; 0xff
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	b2da      	uxtb	r2, r3
 8003126:	8979      	ldrh	r1, [r7, #10]
 8003128:	2300      	movs	r3, #0
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fcf1 	bl	8003b18 <I2C_TransferConfig>
 8003136:	e00f      	b.n	8003158 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	b2da      	uxtb	r2, r3
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	2300      	movs	r3, #0
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fce0 	bl	8003b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d19e      	bne.n	80030a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fbae 	bl	80038c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e01a      	b.n	80031ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2220      	movs	r2, #32
 800317c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_I2C_Mem_Write+0x224>)
 800318a:	400b      	ands	r3, r1
 800318c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	fe00e800 	.word	0xfe00e800

080031b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b20      	cmp	r3, #32
 80031dc:	f040 80fd 	bne.w	80033da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_I2C_Mem_Read+0x34>
 80031e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0f1      	b.n	80033dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_I2C_Mem_Read+0x4e>
 8003202:	2302      	movs	r3, #2
 8003204:	e0ea      	b.n	80033dc <HAL_I2C_Mem_Read+0x224>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800320e:	f7fe f879 	bl	8001304 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2319      	movs	r3, #25
 800321a:	2201      	movs	r2, #1
 800321c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fad1 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0d5      	b.n	80033dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2222      	movs	r2, #34	; 0x22
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003258:	88f8      	ldrh	r0, [r7, #6]
 800325a:	893a      	ldrh	r2, [r7, #8]
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4603      	mov	r3, r0
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fa35 	bl	80036d8 <I2C_RequestMemoryRead>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0ad      	b.n	80033dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2bff      	cmp	r3, #255	; 0xff
 8003288:	d90e      	bls.n	80032a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	22ff      	movs	r2, #255	; 0xff
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	b2da      	uxtb	r2, r3
 8003296:	8979      	ldrh	r1, [r7, #10]
 8003298:	4b52      	ldr	r3, [pc, #328]	; (80033e4 <HAL_I2C_Mem_Read+0x22c>)
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fc39 	bl	8003b18 <I2C_TransferConfig>
 80032a6:	e00f      	b.n	80032c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	4b4a      	ldr	r3, [pc, #296]	; (80033e4 <HAL_I2C_Mem_Read+0x22c>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fc28 	bl	8003b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	2200      	movs	r2, #0
 80032d0:	2104      	movs	r1, #4
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fa78 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e07c      	b.n	80033dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d034      	beq.n	8003388 <HAL_I2C_Mem_Read+0x1d0>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	d130      	bne.n	8003388 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	2200      	movs	r2, #0
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fa49 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e04d      	b.n	80033dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2bff      	cmp	r3, #255	; 0xff
 8003348:	d90e      	bls.n	8003368 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	; 0xff
 800334e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	b2da      	uxtb	r2, r3
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	2300      	movs	r3, #0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fbd9 	bl	8003b18 <I2C_TransferConfig>
 8003366:	e00f      	b.n	8003388 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	b2da      	uxtb	r2, r3
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fbc8 	bl	8003b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d19a      	bne.n	80032c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fa96 	bl	80038c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01a      	b.n	80033dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2220      	movs	r2, #32
 80033ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_I2C_Mem_Read+0x230>)
 80033ba:	400b      	ands	r3, r1
 80033bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	80002400 	.word	0x80002400
 80033e8:	fe00e800 	.word	0xfe00e800

080033ec <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	f040 80ef 	bne.w	80035ec <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341c:	d101      	bne.n	8003422 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
 8003420:	e0e5      	b.n	80035ee <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_I2C_IsDeviceReady+0x44>
 800342c:	2302      	movs	r3, #2
 800342e:	e0de      	b.n	80035ee <HAL_I2C_IsDeviceReady+0x202>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <HAL_I2C_IsDeviceReady+0x6e>
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003454:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <HAL_I2C_IsDeviceReady+0x20c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	e004      	b.n	8003464 <HAL_I2C_IsDeviceReady+0x78>
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003460:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800346a:	f7fd ff4b 	bl	8001304 <HAL_GetTick>
 800346e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b20      	cmp	r3, #32
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b10      	cmp	r3, #16
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800349c:	e034      	b.n	8003508 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d01a      	beq.n	80034dc <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fd ff2d 	bl	8001304 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <HAL_I2C_IsDeviceReady+0xd0>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10f      	bne.n	80034dc <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e088      	b.n	80035ee <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003508:	7ffb      	ldrb	r3, [r7, #31]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <HAL_I2C_IsDeviceReady+0x128>
 800350e:	7fbb      	ldrb	r3, [r7, #30]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0c4      	beq.n	800349e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b10      	cmp	r3, #16
 8003520:	d01a      	beq.n	8003558 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2200      	movs	r2, #0
 800352a:	2120      	movs	r1, #32
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f94b 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e058      	b.n	80035ee <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2220      	movs	r2, #32
 8003542:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e04a      	b.n	80035ee <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	2120      	movs	r1, #32
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f930 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e03d      	b.n	80035ee <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2210      	movs	r2, #16
 8003578:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2220      	movs	r2, #32
 8003580:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	d118      	bne.n	80035bc <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003598:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2120      	movs	r1, #32
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f90f 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e01c      	b.n	80035ee <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2220      	movs	r2, #32
 80035ba:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3301      	adds	r3, #1
 80035c0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	f63f af3d 	bhi.w	8003446 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80035ec:	2302      	movs	r3, #2
  }
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	02002000 	.word	0x02002000

080035fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
  }
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	4608      	mov	r0, r1
 800363a:	4611      	mov	r1, r2
 800363c:	461a      	mov	r2, r3
 800363e:	4603      	mov	r3, r0
 8003640:	817b      	strh	r3, [r7, #10]
 8003642:	460b      	mov	r3, r1
 8003644:	813b      	strh	r3, [r7, #8]
 8003646:	4613      	mov	r3, r2
 8003648:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	8979      	ldrh	r1, [r7, #10]
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <I2C_RequestMemoryWrite+0xa4>)
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fa5d 	bl	8003b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	69b9      	ldr	r1, [r7, #24]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f8f0 	bl	8003848 <I2C_WaitOnTXISFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e02c      	b.n	80036cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003678:	893b      	ldrh	r3, [r7, #8]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
 8003682:	e015      	b.n	80036b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	b29b      	uxth	r3, r3
 800368a:	b2da      	uxtb	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f8d6 	bl	8003848 <I2C_WaitOnTXISFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e012      	b.n	80036cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036a6:	893b      	ldrh	r3, [r7, #8]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f884 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	80002000 	.word	0x80002000

080036d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	460b      	mov	r3, r1
 80036ec:	813b      	strh	r3, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	8979      	ldrh	r1, [r7, #10]
 80036f8:	4b20      	ldr	r3, [pc, #128]	; (800377c <I2C_RequestMemoryRead+0xa4>)
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2300      	movs	r3, #0
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fa0a 	bl	8003b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	69b9      	ldr	r1, [r7, #24]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f89d 	bl	8003848 <I2C_WaitOnTXISFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e02c      	b.n	8003772 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371e:	893b      	ldrh	r3, [r7, #8]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
 8003728:	e015      	b.n	8003756 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800372a:	893b      	ldrh	r3, [r7, #8]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	b29b      	uxth	r3, r3
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f883 	bl	8003848 <I2C_WaitOnTXISFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e012      	b.n	8003772 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800374c:	893b      	ldrh	r3, [r7, #8]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2200      	movs	r2, #0
 800375e:	2140      	movs	r1, #64	; 0x40
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f831 	bl	80037c8 <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	80002000 	.word	0x80002000

08003780 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d103      	bne.n	800379e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2200      	movs	r2, #0
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d007      	beq.n	80037bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	619a      	str	r2, [r3, #24]
  }
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d8:	e022      	b.n	8003820 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d01e      	beq.n	8003820 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7fd fd8f 	bl	8001304 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d113      	bne.n	8003820 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e00f      	b.n	8003840 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4013      	ands	r3, r2
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	429a      	cmp	r2, r3
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	429a      	cmp	r2, r3
 800383c:	d0cd      	beq.n	80037da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003854:	e02c      	b.n	80038b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f870 	bl	8003940 <I2C_IsErrorOccurred>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e02a      	b.n	80038c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d01e      	beq.n	80038b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7fd fd47 	bl	8001304 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d113      	bne.n	80038b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e007      	b.n	80038c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d1cb      	bne.n	8003856 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d4:	e028      	b.n	8003928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f830 	bl	8003940 <I2C_IsErrorOccurred>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e026      	b.n	8003938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7fd fd0b 	bl	8001304 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d113      	bne.n	8003928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e007      	b.n	8003938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b20      	cmp	r3, #32
 8003934:	d1cf      	bne.n	80038d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	d075      	beq.n	8003a58 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2210      	movs	r2, #16
 8003972:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003974:	e056      	b.n	8003a24 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d052      	beq.n	8003a24 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fd fcc1 	bl	8001304 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <I2C_IsErrorOccurred+0x54>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d147      	bne.n	8003a24 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b6:	d12e      	bne.n	8003a16 <I2C_IsErrorOccurred+0xd6>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039be:	d02a      	beq.n	8003a16 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80039c0:	7cfb      	ldrb	r3, [r7, #19]
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d027      	beq.n	8003a16 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039d6:	f7fd fc95 	bl	8001304 <HAL_GetTick>
 80039da:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039dc:	e01b      	b.n	8003a16 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039de:	f7fd fc91 	bl	8001304 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b19      	cmp	r3, #25
 80039ea:	d914      	bls.n	8003a16 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	f043 0220 	orr.w	r2, r3, #32
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d1dc      	bne.n	80039de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d003      	beq.n	8003a3a <I2C_IsErrorOccurred+0xfa>
 8003a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d09d      	beq.n	8003976 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2220      	movs	r2, #32
 8003a48:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f043 0304 	orr.w	r3, r3, #4
 8003a50:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003abe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01c      	beq.n	8003b08 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f7ff fe56 	bl	8003780 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6859      	ldr	r1, [r3, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <I2C_IsErrorOccurred+0x1d4>)
 8003ae0:	400b      	ands	r3, r1
 8003ae2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3728      	adds	r7, #40	; 0x28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	fe00e800 	.word	0xfe00e800

08003b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	817b      	strh	r3, [r7, #10]
 8003b26:	4613      	mov	r3, r2
 8003b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b30:	7a7b      	ldrb	r3, [r7, #9]
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b38:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b46:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	0d5b      	lsrs	r3, r3, #21
 8003b52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <I2C_TransferConfig+0x60>)
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	ea02 0103 	and.w	r1, r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	03ff63ff 	.word	0x03ff63ff

08003b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d138      	bne.n	8003c04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e032      	b.n	8003c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e000      	b.n	8003c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d139      	bne.n	8003c9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e033      	b.n	8003c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2224      	movs	r2, #36	; 0x24
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_PWREx_ConfigSupply+0x70>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <HAL_PWREx_ConfigSupply+0x70>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d001      	beq.n	8003cd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e01f      	b.n	8003d12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e01d      	b.n	8003d12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_PWREx_ConfigSupply+0x70>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f023 0207 	bic.w	r2, r3, #7
 8003cde:	490f      	ldr	r1, [pc, #60]	; (8003d1c <HAL_PWREx_ConfigSupply+0x70>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003ce6:	f7fd fb0d 	bl	8001304 <HAL_GetTick>
 8003cea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cec:	e009      	b.n	8003d02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cee:	f7fd fb09 	bl	8001304 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cfc:	d901      	bls.n	8003d02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e007      	b.n	8003d12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_PWREx_ConfigSupply+0x70>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0e:	d1ee      	bne.n	8003cee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	58024800 	.word	0x58024800

08003d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	; 0x30
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f000 bc1c 	b.w	800456c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8087 	beq.w	8003e50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d42:	4b9e      	ldr	r3, [pc, #632]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d4c:	4b9b      	ldr	r3, [pc, #620]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d007      	beq.n	8003d68 <HAL_RCC_OscConfig+0x48>
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	2b18      	cmp	r3, #24
 8003d5c:	d110      	bne.n	8003d80 <HAL_RCC_OscConfig+0x60>
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	4b94      	ldr	r3, [pc, #592]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d06c      	beq.n	8003e4e <HAL_RCC_OscConfig+0x12e>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d168      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e3f5      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d106      	bne.n	8003d98 <HAL_RCC_OscConfig+0x78>
 8003d8a:	4b8c      	ldr	r3, [pc, #560]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a8b      	ldr	r2, [pc, #556]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e02e      	b.n	8003df6 <HAL_RCC_OscConfig+0xd6>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10c      	bne.n	8003dba <HAL_RCC_OscConfig+0x9a>
 8003da0:	4b86      	ldr	r3, [pc, #536]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a85      	ldr	r2, [pc, #532]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b83      	ldr	r3, [pc, #524]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a82      	ldr	r2, [pc, #520]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e01d      	b.n	8003df6 <HAL_RCC_OscConfig+0xd6>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc2:	d10c      	bne.n	8003dde <HAL_RCC_OscConfig+0xbe>
 8003dc4:	4b7d      	ldr	r3, [pc, #500]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a7c      	ldr	r2, [pc, #496]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b7a      	ldr	r3, [pc, #488]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a79      	ldr	r2, [pc, #484]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e00b      	b.n	8003df6 <HAL_RCC_OscConfig+0xd6>
 8003dde:	4b77      	ldr	r3, [pc, #476]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a76      	ldr	r2, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b74      	ldr	r3, [pc, #464]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a73      	ldr	r2, [pc, #460]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d013      	beq.n	8003e26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7fd fa81 	bl	8001304 <HAL_GetTick>
 8003e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e06:	f7fd fa7d 	bl	8001304 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b64      	cmp	r3, #100	; 0x64
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e3a9      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e18:	4b68      	ldr	r3, [pc, #416]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0xe6>
 8003e24:	e014      	b.n	8003e50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fd fa6d 	bl	8001304 <HAL_GetTick>
 8003e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2e:	f7fd fa69 	bl	8001304 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b64      	cmp	r3, #100	; 0x64
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e395      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e40:	4b5e      	ldr	r3, [pc, #376]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x10e>
 8003e4c:	e000      	b.n	8003e50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80ca 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5e:	4b57      	ldr	r3, [pc, #348]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e68:	4b54      	ldr	r3, [pc, #336]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <HAL_RCC_OscConfig+0x164>
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2b18      	cmp	r3, #24
 8003e78:	d156      	bne.n	8003f28 <HAL_RCC_OscConfig+0x208>
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d151      	bne.n	8003f28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e84:	4b4d      	ldr	r3, [pc, #308]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x17c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e367      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e9c:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 0219 	bic.w	r2, r3, #25
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4944      	ldr	r1, [pc, #272]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eae:	f7fd fa29 	bl	8001304 <HAL_GetTick>
 8003eb2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fd fa25 	bl	8001304 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e351      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ec8:	4b3c      	ldr	r3, [pc, #240]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	f7fd fa22 	bl	800131c <HAL_GetREVID>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d817      	bhi.n	8003f12 <HAL_RCC_OscConfig+0x1f2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d108      	bne.n	8003efc <HAL_RCC_OscConfig+0x1dc>
 8003eea:	4b34      	ldr	r3, [pc, #208]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ef2:	4a32      	ldr	r2, [pc, #200]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003efa:	e07a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efc:	4b2f      	ldr	r3, [pc, #188]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	031b      	lsls	r3, r3, #12
 8003f0a:	492c      	ldr	r1, [pc, #176]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f10:	e06f      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	4926      	ldr	r1, [pc, #152]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f26:	e064      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d047      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f30:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 0219 	bic.w	r2, r3, #25
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	491f      	ldr	r1, [pc, #124]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fd f9df 	bl	8001304 <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4a:	f7fd f9db 	bl	8001304 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e307      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f68:	f7fd f9d8 	bl	800131c <HAL_GetREVID>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d817      	bhi.n	8003fa6 <HAL_RCC_OscConfig+0x286>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d108      	bne.n	8003f90 <HAL_RCC_OscConfig+0x270>
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f86:	4a0d      	ldr	r2, [pc, #52]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f8c:	6053      	str	r3, [r2, #4]
 8003f8e:	e030      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2d2>
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	031b      	lsls	r3, r3, #12
 8003f9e:	4907      	ldr	r1, [pc, #28]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
 8003fa4:	e025      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2d2>
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	061b      	lsls	r3, r3, #24
 8003fb4:	4901      	ldr	r1, [pc, #4]	; (8003fbc <HAL_RCC_OscConfig+0x29c>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
 8003fba:	e01a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2d2>
 8003fbc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc0:	4b9e      	ldr	r3, [pc, #632]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a9d      	ldr	r2, [pc, #628]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fd f99a 	bl	8001304 <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd4:	f7fd f996 	bl	8001304 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e2c2      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fe6:	4b95      	ldr	r3, [pc, #596]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80a9 	beq.w	8004152 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004000:	4b8e      	ldr	r3, [pc, #568]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004008:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800400a:	4b8c      	ldr	r3, [pc, #560]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d007      	beq.n	8004026 <HAL_RCC_OscConfig+0x306>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b18      	cmp	r3, #24
 800401a:	d13a      	bne.n	8004092 <HAL_RCC_OscConfig+0x372>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d135      	bne.n	8004092 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004026:	4b85      	ldr	r3, [pc, #532]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x31e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	2b80      	cmp	r3, #128	; 0x80
 8004038:	d001      	beq.n	800403e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e296      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800403e:	f7fd f96d 	bl	800131c <HAL_GetREVID>
 8004042:	4603      	mov	r3, r0
 8004044:	f241 0203 	movw	r2, #4099	; 0x1003
 8004048:	4293      	cmp	r3, r2
 800404a:	d817      	bhi.n	800407c <HAL_RCC_OscConfig+0x35c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	2b20      	cmp	r3, #32
 8004052:	d108      	bne.n	8004066 <HAL_RCC_OscConfig+0x346>
 8004054:	4b79      	ldr	r3, [pc, #484]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800405c:	4a77      	ldr	r2, [pc, #476]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800405e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004062:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004064:	e075      	b.n	8004152 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004066:	4b75      	ldr	r3, [pc, #468]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	069b      	lsls	r3, r3, #26
 8004074:	4971      	ldr	r1, [pc, #452]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800407a:	e06a      	b.n	8004152 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800407c:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	061b      	lsls	r3, r3, #24
 800408a:	496c      	ldr	r1, [pc, #432]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800408c:	4313      	orrs	r3, r2
 800408e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004090:	e05f      	b.n	8004152 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d042      	beq.n	8004120 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800409a:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a67      	ldr	r2, [pc, #412]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 80040a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd f92d 	bl	8001304 <HAL_GetTick>
 80040aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040ae:	f7fd f929 	bl	8001304 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e255      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040c0:	4b5e      	ldr	r3, [pc, #376]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040cc:	f7fd f926 	bl	800131c <HAL_GetREVID>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d817      	bhi.n	800410a <HAL_RCC_OscConfig+0x3ea>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d108      	bne.n	80040f4 <HAL_RCC_OscConfig+0x3d4>
 80040e2:	4b56      	ldr	r3, [pc, #344]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80040ea:	4a54      	ldr	r2, [pc, #336]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 80040ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040f0:	6053      	str	r3, [r2, #4]
 80040f2:	e02e      	b.n	8004152 <HAL_RCC_OscConfig+0x432>
 80040f4:	4b51      	ldr	r3, [pc, #324]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	069b      	lsls	r3, r3, #26
 8004102:	494e      	ldr	r1, [pc, #312]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
 8004108:	e023      	b.n	8004152 <HAL_RCC_OscConfig+0x432>
 800410a:	4b4c      	ldr	r3, [pc, #304]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	061b      	lsls	r3, r3, #24
 8004118:	4948      	ldr	r1, [pc, #288]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800411a:	4313      	orrs	r3, r2
 800411c:	60cb      	str	r3, [r1, #12]
 800411e:	e018      	b.n	8004152 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004120:	4b46      	ldr	r3, [pc, #280]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a45      	ldr	r2, [pc, #276]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fd f8ea 	bl	8001304 <HAL_GetTick>
 8004130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004134:	f7fd f8e6 	bl	8001304 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e212      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004146:	4b3d      	ldr	r3, [pc, #244]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d036      	beq.n	80041cc <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d019      	beq.n	800419a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004166:	4b35      	ldr	r3, [pc, #212]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	4a34      	ldr	r2, [pc, #208]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fd f8c7 	bl	8001304 <HAL_GetTick>
 8004176:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417a:	f7fd f8c3 	bl	8001304 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1ef      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800418c:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800418e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x45a>
 8004198:	e018      	b.n	80041cc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419a:	4b28      	ldr	r3, [pc, #160]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800419c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419e:	4a27      	ldr	r2, [pc, #156]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fd f8ad 	bl	8001304 <HAL_GetTick>
 80041aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fd f8a9 	bl	8001304 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e1d5      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 80041c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d039      	beq.n	800424c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d019      	beq.n	8004214 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041e0:	4b16      	ldr	r3, [pc, #88]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a15      	ldr	r2, [pc, #84]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 80041e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041ec:	f7fd f88a 	bl	8001304 <HAL_GetTick>
 80041f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041f4:	f7fd f886 	bl	8001304 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e1b2      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4d4>
 8004212:	e01b      	b.n	800424c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <HAL_RCC_OscConfig+0x51c>)
 800421a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800421e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004220:	f7fd f870 	bl	8001304 <HAL_GetTick>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004228:	f7fd f86c 	bl	8001304 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d904      	bls.n	8004240 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e198      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
 800423a:	bf00      	nop
 800423c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004240:	4ba3      	ldr	r3, [pc, #652]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ed      	bne.n	8004228 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8081 	beq.w	800435c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800425a:	4b9e      	ldr	r3, [pc, #632]	; (80044d4 <HAL_RCC_OscConfig+0x7b4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a9d      	ldr	r2, [pc, #628]	; (80044d4 <HAL_RCC_OscConfig+0x7b4>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004266:	f7fd f84d 	bl	8001304 <HAL_GetTick>
 800426a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fd f849 	bl	8001304 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b64      	cmp	r3, #100	; 0x64
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e175      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004280:	4b94      	ldr	r3, [pc, #592]	; (80044d4 <HAL_RCC_OscConfig+0x7b4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x582>
 8004294:	4b8e      	ldr	r3, [pc, #568]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a8d      	ldr	r2, [pc, #564]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e02d      	b.n	80042fe <HAL_RCC_OscConfig+0x5de>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x5a4>
 80042aa:	4b89      	ldr	r3, [pc, #548]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a88      	ldr	r2, [pc, #544]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
 80042b6:	4b86      	ldr	r3, [pc, #536]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a85      	ldr	r2, [pc, #532]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	e01c      	b.n	80042fe <HAL_RCC_OscConfig+0x5de>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x5c6>
 80042cc:	4b80      	ldr	r3, [pc, #512]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a7f      	ldr	r2, [pc, #508]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	4b7d      	ldr	r3, [pc, #500]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a7c      	ldr	r2, [pc, #496]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
 80042e4:	e00b      	b.n	80042fe <HAL_RCC_OscConfig+0x5de>
 80042e6:	4b7a      	ldr	r3, [pc, #488]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ea:	4a79      	ldr	r2, [pc, #484]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6713      	str	r3, [r2, #112]	; 0x70
 80042f2:	4b77      	ldr	r3, [pc, #476]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a76      	ldr	r2, [pc, #472]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004306:	f7fc fffd 	bl	8001304 <HAL_GetTick>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fc fff9 	bl	8001304 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e123      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004324:	4b6a      	ldr	r3, [pc, #424]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RCC_OscConfig+0x5ee>
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004332:	f7fc ffe7 	bl	8001304 <HAL_GetTick>
 8004336:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fc ffe3 	bl	8001304 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e10d      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004350:	4b5f      	ldr	r3, [pc, #380]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ee      	bne.n	800433a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8102 	beq.w	800456a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004366:	4b5a      	ldr	r3, [pc, #360]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800436e:	2b18      	cmp	r3, #24
 8004370:	f000 80bd 	beq.w	80044ee <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	2b02      	cmp	r3, #2
 800437a:	f040 8095 	bne.w	80044a8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	4b54      	ldr	r3, [pc, #336]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a53      	ldr	r2, [pc, #332]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438a:	f7fc ffbb 	bl	8001304 <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004392:	f7fc ffb7 	bl	8001304 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e0e3      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043a4:	4b4a      	ldr	r3, [pc, #296]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f0      	bne.n	8004392 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b0:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80043b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043b4:	4b48      	ldr	r3, [pc, #288]	; (80044d8 <HAL_RCC_OscConfig+0x7b8>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043c0:	0112      	lsls	r2, r2, #4
 80043c2:	430a      	orrs	r2, r1
 80043c4:	4942      	ldr	r1, [pc, #264]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	628b      	str	r3, [r1, #40]	; 0x28
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	3b01      	subs	r3, #1
 80043d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	3b01      	subs	r3, #1
 80043da:	025b      	lsls	r3, r3, #9
 80043dc:	b29b      	uxth	r3, r3
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	3b01      	subs	r3, #1
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	3b01      	subs	r3, #1
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043fa:	4935      	ldr	r1, [pc, #212]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004400:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	4a32      	ldr	r2, [pc, #200]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800440c:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800440e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004410:	4b32      	ldr	r3, [pc, #200]	; (80044dc <HAL_RCC_OscConfig+0x7bc>)
 8004412:	4013      	ands	r3, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004418:	00d2      	lsls	r2, r2, #3
 800441a:	492d      	ldr	r1, [pc, #180]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004420:	4b2b      	ldr	r3, [pc, #172]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	f023 020c 	bic.w	r2, r3, #12
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	4928      	ldr	r1, [pc, #160]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004432:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	f023 0202 	bic.w	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	4924      	ldr	r1, [pc, #144]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004440:	4313      	orrs	r3, r2
 8004442:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004444:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800444a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004450:	4b1f      	ldr	r3, [pc, #124]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800445c:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	4a1b      	ldr	r2, [pc, #108]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4a18      	ldr	r2, [pc, #96]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fc ff40 	bl	8001304 <HAL_GetTick>
 8004484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fc ff3c 	bl	8001304 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e068      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x768>
 80044a6:	e060      	b.n	800456a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <HAL_RCC_OscConfig+0x7b0>)
 80044ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fc ff26 	bl	8001304 <HAL_GetTick>
 80044b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ba:	e011      	b.n	80044e0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fc ff22 	bl	8001304 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d90a      	bls.n	80044e0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e04e      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
 80044ce:	bf00      	nop
 80044d0:	58024400 	.word	0x58024400
 80044d4:	58024800 	.word	0x58024800
 80044d8:	fffffc0c 	.word	0xfffffc0c
 80044dc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044e0:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_RCC_OscConfig+0x854>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e7      	bne.n	80044bc <HAL_RCC_OscConfig+0x79c>
 80044ec:	e03d      	b.n	800456a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80044ee:	4b21      	ldr	r3, [pc, #132]	; (8004574 <HAL_RCC_OscConfig+0x854>)
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044f4:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <HAL_RCC_OscConfig+0x854>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d031      	beq.n	8004566 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0203 	and.w	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d12a      	bne.n	8004566 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d122      	bne.n	8004566 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d11a      	bne.n	8004566 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	0a5b      	lsrs	r3, r3, #9
 8004534:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d111      	bne.n	8004566 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d108      	bne.n	8004566 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	0e1b      	lsrs	r3, r3, #24
 8004558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3730      	adds	r7, #48	; 0x30
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	58024400 	.word	0x58024400

08004578 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e19c      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800458c:	4b8a      	ldr	r3, [pc, #552]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d910      	bls.n	80045bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b87      	ldr	r3, [pc, #540]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 020f 	bic.w	r2, r3, #15
 80045a2:	4985      	ldr	r1, [pc, #532]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b83      	ldr	r3, [pc, #524]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e184      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	4b7b      	ldr	r3, [pc, #492]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d908      	bls.n	80045ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045d8:	4b78      	ldr	r3, [pc, #480]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	4975      	ldr	r1, [pc, #468]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	4b70      	ldr	r3, [pc, #448]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004602:	429a      	cmp	r2, r3
 8004604:	d908      	bls.n	8004618 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004606:	4b6d      	ldr	r3, [pc, #436]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	496a      	ldr	r1, [pc, #424]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004614:	4313      	orrs	r3, r2
 8004616:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d010      	beq.n	8004646 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	4b64      	ldr	r3, [pc, #400]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004630:	429a      	cmp	r2, r3
 8004632:	d908      	bls.n	8004646 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004634:	4b61      	ldr	r3, [pc, #388]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	495e      	ldr	r1, [pc, #376]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004642:	4313      	orrs	r3, r2
 8004644:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	4b59      	ldr	r3, [pc, #356]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800465e:	429a      	cmp	r2, r3
 8004660:	d908      	bls.n	8004674 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004662:	4b56      	ldr	r3, [pc, #344]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	4953      	ldr	r1, [pc, #332]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004670:	4313      	orrs	r3, r2
 8004672:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	4b4d      	ldr	r3, [pc, #308]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	429a      	cmp	r2, r3
 800468e:	d908      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b4a      	ldr	r3, [pc, #296]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f023 020f 	bic.w	r2, r3, #15
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4947      	ldr	r1, [pc, #284]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d055      	beq.n	800475a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046ae:	4b43      	ldr	r3, [pc, #268]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	4940      	ldr	r1, [pc, #256]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046c8:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d121      	bne.n	8004718 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0f6      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046e0:	4b36      	ldr	r3, [pc, #216]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d115      	bne.n	8004718 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0ea      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046f8:	4b30      	ldr	r3, [pc, #192]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0de      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004708:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0d6      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004718:	4b28      	ldr	r3, [pc, #160]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f023 0207 	bic.w	r2, r3, #7
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4925      	ldr	r1, [pc, #148]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004726:	4313      	orrs	r3, r2
 8004728:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472a:	f7fc fdeb 	bl	8001304 <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004730:	e00a      	b.n	8004748 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004732:	f7fc fde7 	bl	8001304 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004740:	4293      	cmp	r3, r2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0be      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004748:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	429a      	cmp	r2, r3
 8004758:	d1eb      	bne.n	8004732 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	4b14      	ldr	r3, [pc, #80]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	429a      	cmp	r2, r3
 8004774:	d208      	bcs.n	8004788 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f023 020f 	bic.w	r2, r3, #15
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	490e      	ldr	r1, [pc, #56]	; (80047bc <HAL_RCC_ClockConfig+0x244>)
 8004784:	4313      	orrs	r3, r2
 8004786:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d214      	bcs.n	80047c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 020f 	bic.w	r2, r3, #15
 800479e:	4906      	ldr	r1, [pc, #24]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <HAL_RCC_ClockConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e086      	b.n	80048c6 <HAL_RCC_ClockConfig+0x34e>
 80047b8:	52002000 	.word	0x52002000
 80047bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	4b3f      	ldr	r3, [pc, #252]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047d8:	429a      	cmp	r2, r3
 80047da:	d208      	bcs.n	80047ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047dc:	4b3c      	ldr	r3, [pc, #240]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	4939      	ldr	r1, [pc, #228]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d010      	beq.n	800481c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	4b34      	ldr	r3, [pc, #208]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004806:	429a      	cmp	r2, r3
 8004808:	d208      	bcs.n	800481c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800480a:	4b31      	ldr	r3, [pc, #196]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	492e      	ldr	r1, [pc, #184]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004818:	4313      	orrs	r3, r2
 800481a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b00      	cmp	r3, #0
 8004826:	d010      	beq.n	800484a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004834:	429a      	cmp	r2, r3
 8004836:	d208      	bcs.n	800484a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	4922      	ldr	r1, [pc, #136]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004846:	4313      	orrs	r3, r2
 8004848:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d010      	beq.n	8004878 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004862:	429a      	cmp	r2, r3
 8004864:	d208      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004866:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	4917      	ldr	r1, [pc, #92]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004874:	4313      	orrs	r3, r2
 8004876:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004878:	f000 f834 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	4912      	ldr	r1, [pc, #72]	; (80048d4 <HAL_RCC_ClockConfig+0x35c>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
 8004894:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004896:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <HAL_RCC_ClockConfig+0x358>)
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	4a0d      	ldr	r2, [pc, #52]	; (80048d4 <HAL_RCC_ClockConfig+0x35c>)
 80048a0:	5cd3      	ldrb	r3, [r2, r3]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <HAL_RCC_ClockConfig+0x360>)
 80048ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048b0:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <HAL_RCC_ClockConfig+0x364>)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x368>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fc fcd8 	bl	8001270 <HAL_InitTick>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	58024400 	.word	0x58024400
 80048d4:	0800d444 	.word	0x0800d444
 80048d8:	24000004 	.word	0x24000004
 80048dc:	24000000 	.word	0x24000000
 80048e0:	24000008 	.word	0x24000008

080048e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ea:	4bb3      	ldr	r3, [pc, #716]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048f2:	2b18      	cmp	r3, #24
 80048f4:	f200 8155 	bhi.w	8004ba2 <HAL_RCC_GetSysClockFreq+0x2be>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <HAL_RCC_GetSysClockFreq+0x1c>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004965 	.word	0x08004965
 8004904:	08004ba3 	.word	0x08004ba3
 8004908:	08004ba3 	.word	0x08004ba3
 800490c:	08004ba3 	.word	0x08004ba3
 8004910:	08004ba3 	.word	0x08004ba3
 8004914:	08004ba3 	.word	0x08004ba3
 8004918:	08004ba3 	.word	0x08004ba3
 800491c:	08004ba3 	.word	0x08004ba3
 8004920:	0800498b 	.word	0x0800498b
 8004924:	08004ba3 	.word	0x08004ba3
 8004928:	08004ba3 	.word	0x08004ba3
 800492c:	08004ba3 	.word	0x08004ba3
 8004930:	08004ba3 	.word	0x08004ba3
 8004934:	08004ba3 	.word	0x08004ba3
 8004938:	08004ba3 	.word	0x08004ba3
 800493c:	08004ba3 	.word	0x08004ba3
 8004940:	08004991 	.word	0x08004991
 8004944:	08004ba3 	.word	0x08004ba3
 8004948:	08004ba3 	.word	0x08004ba3
 800494c:	08004ba3 	.word	0x08004ba3
 8004950:	08004ba3 	.word	0x08004ba3
 8004954:	08004ba3 	.word	0x08004ba3
 8004958:	08004ba3 	.word	0x08004ba3
 800495c:	08004ba3 	.word	0x08004ba3
 8004960:	08004997 	.word	0x08004997
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004964:	4b94      	ldr	r3, [pc, #592]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d009      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004970:	4b91      	ldr	r3, [pc, #580]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	08db      	lsrs	r3, r3, #3
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	4a90      	ldr	r2, [pc, #576]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004982:	e111      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004984:	4b8d      	ldr	r3, [pc, #564]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004986:	61bb      	str	r3, [r7, #24]
    break;
 8004988:	e10e      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800498a:	4b8d      	ldr	r3, [pc, #564]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800498c:	61bb      	str	r3, [r7, #24]
    break;
 800498e:	e10b      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004990:	4b8c      	ldr	r3, [pc, #560]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004992:	61bb      	str	r3, [r7, #24]
    break;
 8004994:	e108      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004996:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049a0:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049ac:	4b82      	ldr	r3, [pc, #520]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049b6:	4b80      	ldr	r3, [pc, #512]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ba:	08db      	lsrs	r3, r3, #3
 80049bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80e1 	beq.w	8004b9c <HAL_RCC_GetSysClockFreq+0x2b8>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	f000 8083 	beq.w	8004ae8 <HAL_RCC_GetSysClockFreq+0x204>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	f200 80a1 	bhi.w	8004b2c <HAL_RCC_GetSysClockFreq+0x248>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x114>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d056      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80049f6:	e099      	b.n	8004b2c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049f8:	4b6f      	ldr	r3, [pc, #444]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d02d      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a04:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	08db      	lsrs	r3, r3, #3
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	4a6b      	ldr	r2, [pc, #428]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
 8004a14:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	ee07 3a90 	vmov	s15, r3
 8004a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a2e:	4b62      	ldr	r3, [pc, #392]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a5e:	e087      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004bcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a72:	4b51      	ldr	r3, [pc, #324]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aa2:	e065      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004bd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab6:	4b40      	ldr	r3, [pc, #256]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae6:	e043      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004bd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afa:	4b2f      	ldr	r3, [pc, #188]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2a:	e021      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004bd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004bc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	0a5b      	lsrs	r3, r3, #9
 8004b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	ee07 3a90 	vmov	s15, r3
 8004b84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b94:	ee17 3a90 	vmov	r3, s15
 8004b98:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    break;
 8004ba0:	e002      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ba4:	61bb      	str	r3, [r7, #24]
    break;
 8004ba6:	bf00      	nop
  }

  return sysclockfreq;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	58024400 	.word	0x58024400
 8004bbc:	03d09000 	.word	0x03d09000
 8004bc0:	003d0900 	.word	0x003d0900
 8004bc4:	017d7840 	.word	0x017d7840
 8004bc8:	46000000 	.word	0x46000000
 8004bcc:	4c742400 	.word	0x4c742400
 8004bd0:	4a742400 	.word	0x4a742400
 8004bd4:	4bbebc20 	.word	0x4bbebc20

08004bd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004be0:	2300      	movs	r3, #0
 8004be2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004be4:	2300      	movs	r3, #0
 8004be6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d03f      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bfc:	d02a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c02:	d824      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c08:	d018      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c0e:	d81e      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c18:	d007      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c1a:	e018      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c1c:	4bab      	ldr	r3, [pc, #684]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4aaa      	ldr	r2, [pc, #680]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c28:	e015      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	2102      	movs	r1, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 ff11 	bl	8005a58 <RCCEx_PLL2_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c3a:	e00c      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3324      	adds	r3, #36	; 0x24
 8004c40:	2102      	movs	r1, #2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 ffba 	bl	8005bbc <RCCEx_PLL3_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c4c:	e003      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
      break;
 8004c52:	e000      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d109      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c5c:	4b9b      	ldr	r3, [pc, #620]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c68:	4998      	ldr	r1, [pc, #608]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c6e:	e001      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d03d      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d826      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c88:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004ca5 	.word	0x08004ca5
 8004c94:	08004cb3 	.word	0x08004cb3
 8004c98:	08004cc5 	.word	0x08004cc5
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	08004cdd 	.word	0x08004cdd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca4:	4b89      	ldr	r3, [pc, #548]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	4a88      	ldr	r2, [pc, #544]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cb0:	e015      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fecd 	bl	8005a58 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cc2:	e00c      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3324      	adds	r3, #36	; 0x24
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 ff76 	bl	8005bbc <RCCEx_PLL3_Config>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cd4:	e003      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cda:	e000      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cde:	7dfb      	ldrb	r3, [r7, #23]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ce4:	4b79      	ldr	r3, [pc, #484]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce8:	f023 0207 	bic.w	r2, r3, #7
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	4976      	ldr	r1, [pc, #472]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	650b      	str	r3, [r1, #80]	; 0x50
 8004cf6:	e001      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d042      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d10:	d02b      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d16:	d825      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d18:	2bc0      	cmp	r3, #192	; 0xc0
 8004d1a:	d028      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d1c:	2bc0      	cmp	r3, #192	; 0xc0
 8004d1e:	d821      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d20:	2b80      	cmp	r3, #128	; 0x80
 8004d22:	d016      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004d24:	2b80      	cmp	r3, #128	; 0x80
 8004d26:	d81d      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d007      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d30:	e018      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d32:	4b66      	ldr	r3, [pc, #408]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	4a65      	ldr	r2, [pc, #404]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d3e:	e017      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fe86 	bl	8005a58 <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d50:	e00e      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3324      	adds	r3, #36	; 0x24
 8004d56:	2100      	movs	r1, #0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 ff2f 	bl	8005bbc <RCCEx_PLL3_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d62:	e005      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	75fb      	strb	r3, [r7, #23]
      break;
 8004d68:	e002      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004d6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d109      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d76:	4b55      	ldr	r3, [pc, #340]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	4952      	ldr	r1, [pc, #328]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	650b      	str	r3, [r1, #80]	; 0x50
 8004d88:	e001      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
 8004d8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d049      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004da4:	d030      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004daa:	d82a      	bhi.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004dac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004db0:	d02c      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004db2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004db6:	d824      	bhi.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dbc:	d018      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc2:	d81e      	bhi.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dcc:	d007      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004dce:	e018      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd0:	4b3e      	ldr	r3, [pc, #248]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4a3d      	ldr	r2, [pc, #244]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ddc:	e017      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fe37 	bl	8005a58 <RCCEx_PLL2_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004dee:	e00e      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fee0 	bl	8005bbc <RCCEx_PLL3_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e00:	e005      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
      break;
 8004e06:	e002      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e14:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e22:	492a      	ldr	r1, [pc, #168]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	658b      	str	r3, [r1, #88]	; 0x58
 8004e28:	e001      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
 8004e2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d04c      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e44:	d030      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004e46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e4a:	d82a      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e50:	d02c      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004e52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e56:	d824      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e5c:	d018      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e62:	d81e      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e6c:	d007      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004e6e:	e018      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e70:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e7c:	e017      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3304      	adds	r3, #4
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fde7 	bl	8005a58 <RCCEx_PLL2_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e8e:	e00e      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	2100      	movs	r1, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fe90 	bl	8005bbc <RCCEx_PLL3_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ea0:	e005      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea6:	e002      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004ea8:	bf00      	nop
 8004eaa:	e000      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10d      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ec2:	4902      	ldr	r1, [pc, #8]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	658b      	str	r3, [r1, #88]	; 0x58
 8004ec8:	e004      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004eca:	bf00      	nop
 8004ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d032      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee4:	2b30      	cmp	r3, #48	; 0x30
 8004ee6:	d01c      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ee8:	2b30      	cmp	r3, #48	; 0x30
 8004eea:	d817      	bhi.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d00c      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d813      	bhi.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d016      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d10f      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efc:	4baf      	ldr	r3, [pc, #700]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	4aae      	ldr	r2, [pc, #696]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f08:	e00e      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	2102      	movs	r1, #2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fda1 	bl	8005a58 <RCCEx_PLL2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f1a:	e005      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f20:	e002      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f2e:	4ba3      	ldr	r3, [pc, #652]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3a:	49a0      	ldr	r1, [pc, #640]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f40:	e001      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d047      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f5a:	d030      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	d82a      	bhi.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f66:	d02c      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004f68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f6c:	d824      	bhi.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f72:	d018      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f78:	d81e      	bhi.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f82:	d007      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004f84:	e018      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f86:	4b8d      	ldr	r3, [pc, #564]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	4a8c      	ldr	r2, [pc, #560]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f92:	e017      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fd5c 	bl	8005a58 <RCCEx_PLL2_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fa4:	e00e      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3324      	adds	r3, #36	; 0x24
 8004faa:	2100      	movs	r1, #0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fe05 	bl	8005bbc <RCCEx_PLL3_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fb6:	e005      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	75fb      	strb	r3, [r7, #23]
      break;
 8004fbc:	e002      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fca:	4b7c      	ldr	r3, [pc, #496]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd6:	4979      	ldr	r1, [pc, #484]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	650b      	str	r3, [r1, #80]	; 0x50
 8004fdc:	e001      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d049      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff6:	d02e      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ffc:	d828      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ffe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005002:	d02a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005004:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005008:	d822      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800500a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800500e:	d026      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005010:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005014:	d81c      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800501a:	d010      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800501c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005020:	d816      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01d      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502a:	d111      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
 8005030:	2101      	movs	r1, #1
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fd10 	bl	8005a58 <RCCEx_PLL2_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800503c:	e012      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3324      	adds	r3, #36	; 0x24
 8005042:	2101      	movs	r1, #1
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fdb9 	bl	8005bbc <RCCEx_PLL3_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800504e:	e009      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	75fb      	strb	r3, [r7, #23]
      break;
 8005054:	e006      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005056:	bf00      	nop
 8005058:	e004      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800505a:	bf00      	nop
 800505c:	e002      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800505e:	bf00      	nop
 8005060:	e000      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800506a:	4b54      	ldr	r3, [pc, #336]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800506c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005076:	4951      	ldr	r1, [pc, #324]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005078:	4313      	orrs	r3, r2
 800507a:	650b      	str	r3, [r1, #80]	; 0x50
 800507c:	e001      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d04b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005098:	d02e      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800509a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800509e:	d828      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a4:	d02a      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050aa:	d822      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050b0:	d026      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80050b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050b6:	d81c      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050bc:	d010      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80050be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c2:	d816      	bhi.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01d      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80050c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050cc:	d111      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fcbf 	bl	8005a58 <RCCEx_PLL2_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050de:	e012      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3324      	adds	r3, #36	; 0x24
 80050e4:	2101      	movs	r1, #1
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fd68 	bl	8005bbc <RCCEx_PLL3_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050f0:	e009      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
      break;
 80050f6:	e006      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80050f8:	bf00      	nop
 80050fa:	e004      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80050fc:	bf00      	nop
 80050fe:	e002      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005106:	7dfb      	ldrb	r3, [r7, #23]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800511a:	4928      	ldr	r1, [pc, #160]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800511c:	4313      	orrs	r3, r2
 800511e:	658b      	str	r3, [r1, #88]	; 0x58
 8005120:	e001      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d02f      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800513a:	d00e      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800513c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005140:	d814      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d015      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800514a:	d10f      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514c:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4a1a      	ldr	r2, [pc, #104]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005158:	e00c      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3304      	adds	r3, #4
 800515e:	2101      	movs	r1, #1
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fc79 	bl	8005a58 <RCCEx_PLL2_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800516a:	e003      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
      break;
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800517c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005186:	490d      	ldr	r1, [pc, #52]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005188:	4313      	orrs	r3, r2
 800518a:	650b      	str	r3, [r1, #80]	; 0x50
 800518c:	e001      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d033      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d81c      	bhi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80051a6:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80051a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ac:	080051e7 	.word	0x080051e7
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	080051cf 	.word	0x080051cf
 80051b8:	080051e7 	.word	0x080051e7
 80051bc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c0:	4bb8      	ldr	r3, [pc, #736]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	4ab7      	ldr	r2, [pc, #732]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051cc:	e00c      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2102      	movs	r1, #2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fc3f 	bl	8005a58 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051de:	e003      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	75fb      	strb	r3, [r7, #23]
      break;
 80051e4:	e000      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80051e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051ee:	4bad      	ldr	r3, [pc, #692]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f2:	f023 0203 	bic.w	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	49aa      	ldr	r1, [pc, #680]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005200:	e001      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005202:	7dfb      	ldrb	r3, [r7, #23]
 8005204:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 8086 	beq.w	8005320 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005214:	4ba4      	ldr	r3, [pc, #656]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4aa3      	ldr	r2, [pc, #652]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800521a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005220:	f7fc f870 	bl	8001304 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005226:	e009      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005228:	f7fc f86c 	bl	8001304 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b64      	cmp	r3, #100	; 0x64
 8005234:	d902      	bls.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	75fb      	strb	r3, [r7, #23]
        break;
 800523a:	e005      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800523c:	4b9a      	ldr	r3, [pc, #616]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0ef      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d166      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800524e:	4b95      	ldr	r3, [pc, #596]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005250:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005258:	4053      	eors	r3, r2
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	2b00      	cmp	r3, #0
 8005260:	d013      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005262:	4b90      	ldr	r3, [pc, #576]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800526c:	4b8d      	ldr	r3, [pc, #564]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	4a8c      	ldr	r2, [pc, #560]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005276:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005278:	4b8a      	ldr	r3, [pc, #552]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	4a89      	ldr	r2, [pc, #548]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800527e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005282:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005284:	4a87      	ldr	r2, [pc, #540]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005294:	d115      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005296:	f7fc f835 	bl	8001304 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800529c:	e00b      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fc f831 	bl	8001304 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d902      	bls.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	75fb      	strb	r3, [r7, #23]
            break;
 80052b4:	e005      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052b6:	4b7b      	ldr	r3, [pc, #492]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0ed      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d126      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d6:	d10d      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80052d8:	4b72      	ldr	r3, [pc, #456]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052e6:	0919      	lsrs	r1, r3, #4
 80052e8:	4b70      	ldr	r3, [pc, #448]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80052ea:	400b      	ands	r3, r1
 80052ec:	496d      	ldr	r1, [pc, #436]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]
 80052f2:	e005      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80052f4:	4b6b      	ldr	r3, [pc, #428]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	4a6a      	ldr	r2, [pc, #424]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80052fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052fe:	6113      	str	r3, [r2, #16]
 8005300:	4b68      	ldr	r3, [pc, #416]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800530a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800530e:	4965      	ldr	r1, [pc, #404]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005310:	4313      	orrs	r3, r2
 8005312:	670b      	str	r3, [r1, #112]	; 0x70
 8005314:	e004      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	75bb      	strb	r3, [r7, #22]
 800531a:	e001      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d07e      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005330:	2b28      	cmp	r3, #40	; 0x28
 8005332:	d867      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005334:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	0800540b 	.word	0x0800540b
 8005340:	08005405 	.word	0x08005405
 8005344:	08005405 	.word	0x08005405
 8005348:	08005405 	.word	0x08005405
 800534c:	08005405 	.word	0x08005405
 8005350:	08005405 	.word	0x08005405
 8005354:	08005405 	.word	0x08005405
 8005358:	08005405 	.word	0x08005405
 800535c:	080053e1 	.word	0x080053e1
 8005360:	08005405 	.word	0x08005405
 8005364:	08005405 	.word	0x08005405
 8005368:	08005405 	.word	0x08005405
 800536c:	08005405 	.word	0x08005405
 8005370:	08005405 	.word	0x08005405
 8005374:	08005405 	.word	0x08005405
 8005378:	08005405 	.word	0x08005405
 800537c:	080053f3 	.word	0x080053f3
 8005380:	08005405 	.word	0x08005405
 8005384:	08005405 	.word	0x08005405
 8005388:	08005405 	.word	0x08005405
 800538c:	08005405 	.word	0x08005405
 8005390:	08005405 	.word	0x08005405
 8005394:	08005405 	.word	0x08005405
 8005398:	08005405 	.word	0x08005405
 800539c:	0800540b 	.word	0x0800540b
 80053a0:	08005405 	.word	0x08005405
 80053a4:	08005405 	.word	0x08005405
 80053a8:	08005405 	.word	0x08005405
 80053ac:	08005405 	.word	0x08005405
 80053b0:	08005405 	.word	0x08005405
 80053b4:	08005405 	.word	0x08005405
 80053b8:	08005405 	.word	0x08005405
 80053bc:	0800540b 	.word	0x0800540b
 80053c0:	08005405 	.word	0x08005405
 80053c4:	08005405 	.word	0x08005405
 80053c8:	08005405 	.word	0x08005405
 80053cc:	08005405 	.word	0x08005405
 80053d0:	08005405 	.word	0x08005405
 80053d4:	08005405 	.word	0x08005405
 80053d8:	08005405 	.word	0x08005405
 80053dc:	0800540b 	.word	0x0800540b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	2101      	movs	r1, #1
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fb36 	bl	8005a58 <RCCEx_PLL2_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053f0:	e00c      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3324      	adds	r3, #36	; 0x24
 80053f6:	2101      	movs	r1, #1
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fbdf 	bl	8005bbc <RCCEx_PLL3_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005402:	e003      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]
      break;
 8005408:	e000      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800540a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540c:	7dfb      	ldrb	r3, [r7, #23]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005412:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800541e:	4921      	ldr	r1, [pc, #132]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	654b      	str	r3, [r1, #84]	; 0x54
 8005424:	e001      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005426:	7dfb      	ldrb	r3, [r7, #23]
 8005428:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d03e      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543a:	2b05      	cmp	r3, #5
 800543c:	d820      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005487 	.word	0x08005487
 8005448:	0800545d 	.word	0x0800545d
 800544c:	0800546f 	.word	0x0800546f
 8005450:	08005487 	.word	0x08005487
 8005454:	08005487 	.word	0x08005487
 8005458:	08005487 	.word	0x08005487
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f000 faf8 	bl	8005a58 <RCCEx_PLL2_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800546c:	e00c      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3324      	adds	r3, #36	; 0x24
 8005472:	2101      	movs	r1, #1
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fba1 	bl	8005bbc <RCCEx_PLL3_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800547e:	e003      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
      break;
 8005484:	e000      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005488:	7dfb      	ldrb	r3, [r7, #23]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d110      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	f023 0207 	bic.w	r2, r3, #7
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549a:	4902      	ldr	r1, [pc, #8]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800549c:	4313      	orrs	r3, r2
 800549e:	654b      	str	r3, [r1, #84]	; 0x54
 80054a0:	e008      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80054a2:	bf00      	nop
 80054a4:	58024400 	.word	0x58024400
 80054a8:	58024800 	.word	0x58024800
 80054ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d039      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d820      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	08005513 	.word	0x08005513
 80054d4:	080054e9 	.word	0x080054e9
 80054d8:	080054fb 	.word	0x080054fb
 80054dc:	08005513 	.word	0x08005513
 80054e0:	08005513 	.word	0x08005513
 80054e4:	08005513 	.word	0x08005513
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	2101      	movs	r1, #1
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fab2 	bl	8005a58 <RCCEx_PLL2_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054f8:	e00c      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3324      	adds	r3, #36	; 0x24
 80054fe:	2101      	movs	r1, #1
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb5b 	bl	8005bbc <RCCEx_PLL3_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800550a:	e003      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
      break;
 8005510:	e000      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800551a:	4bb7      	ldr	r3, [pc, #732]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	f023 0207 	bic.w	r2, r3, #7
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	49b3      	ldr	r1, [pc, #716]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800552a:	4313      	orrs	r3, r2
 800552c:	658b      	str	r3, [r1, #88]	; 0x58
 800552e:	e001      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d04b      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800554a:	d02e      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800554c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005550:	d828      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005556:	d02a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555c:	d822      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800555e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005562:	d026      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005564:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005568:	d81c      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800556a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800556e:	d010      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005574:	d816      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01d      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800557a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800557e:	d111      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	2100      	movs	r1, #0
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fa66 	bl	8005a58 <RCCEx_PLL2_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005590:	e012      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3324      	adds	r3, #36	; 0x24
 8005596:	2102      	movs	r1, #2
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fb0f 	bl	8005bbc <RCCEx_PLL3_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055a2:	e009      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	75fb      	strb	r3, [r7, #23]
      break;
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055aa:	bf00      	nop
 80055ac:	e004      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80055b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055be:	4b8e      	ldr	r3, [pc, #568]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055cc:	498a      	ldr	r1, [pc, #552]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	654b      	str	r3, [r1, #84]	; 0x54
 80055d2:	e001      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d04b      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055ee:	d02e      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80055f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055f4:	d828      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80055f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fa:	d02a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80055fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005600:	d822      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005606:	d026      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800560c:	d81c      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800560e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005612:	d010      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005618:	d816      	bhi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01d      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005622:	d111      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fa14 	bl	8005a58 <RCCEx_PLL2_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005634:	e012      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3324      	adds	r3, #36	; 0x24
 800563a:	2102      	movs	r1, #2
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fabd 	bl	8005bbc <RCCEx_PLL3_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005646:	e009      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	75fb      	strb	r3, [r7, #23]
      break;
 800564c:	e006      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800564e:	bf00      	nop
 8005650:	e004      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005652:	bf00      	nop
 8005654:	e002      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800565a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005662:	4b65      	ldr	r3, [pc, #404]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005666:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005670:	4961      	ldr	r1, [pc, #388]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005672:	4313      	orrs	r3, r2
 8005674:	658b      	str	r3, [r1, #88]	; 0x58
 8005676:	e001      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005684:	2b00      	cmp	r3, #0
 8005686:	d04b      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800568e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005692:	d02e      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005694:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005698:	d828      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800569a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569e:	d02a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80056a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a4:	d822      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056aa:	d026      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80056ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056b0:	d81c      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b6:	d010      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80056b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056bc:	d816      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01d      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80056c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c6:	d111      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	2100      	movs	r1, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f9c2 	bl	8005a58 <RCCEx_PLL2_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056d8:	e012      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3324      	adds	r3, #36	; 0x24
 80056de:	2102      	movs	r1, #2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fa6b 	bl	8005bbc <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056ea:	e009      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	75fb      	strb	r3, [r7, #23]
      break;
 80056f0:	e006      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80056f2:	bf00      	nop
 80056f4:	e004      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80056f6:	bf00      	nop
 80056f8:	e002      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80056fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005706:	4b3c      	ldr	r3, [pc, #240]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005714:	4938      	ldr	r1, [pc, #224]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005716:	4313      	orrs	r3, r2
 8005718:	658b      	str	r3, [r1, #88]	; 0x58
 800571a:	e001      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005736:	d10a      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3324      	adds	r3, #36	; 0x24
 800573c:	2102      	movs	r1, #2
 800573e:	4618      	mov	r0, r3
 8005740:	f000 fa3c 	bl	8005bbc <RCCEx_PLL3_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800574e:	4b2a      	ldr	r3, [pc, #168]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800575c:	4926      	ldr	r1, [pc, #152]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800575e:	4313      	orrs	r3, r2
 8005760:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005778:	d10a      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3324      	adds	r3, #36	; 0x24
 800577e:	2102      	movs	r1, #2
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fa1b 	bl	8005bbc <RCCEx_PLL3_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005790:	4b19      	ldr	r3, [pc, #100]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800579e:	4916      	ldr	r1, [pc, #88]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d036      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ba:	d01f      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80057bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057c0:	d817      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80057c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ca:	d009      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80057cc:	e011      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3304      	adds	r3, #4
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f93f 	bl	8005a58 <RCCEx_PLL2_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057de:	e00e      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3324      	adds	r3, #36	; 0x24
 80057e4:	2102      	movs	r1, #2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f9e8 	bl	8005bbc <RCCEx_PLL3_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057f0:	e005      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	75fb      	strb	r3, [r7, #23]
      break;
 80057f6:	e002      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80057f8:	58024400 	.word	0x58024400
      break;
 80057fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005804:	4b93      	ldr	r3, [pc, #588]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005812:	4990      	ldr	r1, [pc, #576]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005814:	4313      	orrs	r3, r2
 8005816:	658b      	str	r3, [r1, #88]	; 0x58
 8005818:	e001      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d033      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005834:	d01c      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005836:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800583a:	d816      	bhi.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800583c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005840:	d003      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005842:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005846:	d007      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005848:	e00f      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800584a:	4b82      	ldr	r3, [pc, #520]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	4a81      	ldr	r2, [pc, #516]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005854:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005856:	e00c      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3324      	adds	r3, #36	; 0x24
 800585c:	2101      	movs	r1, #1
 800585e:	4618      	mov	r0, r3
 8005860:	f000 f9ac 	bl	8005bbc <RCCEx_PLL3_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005868:	e003      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
      break;
 800586e:	e000      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005872:	7dfb      	ldrb	r3, [r7, #23]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005878:	4b76      	ldr	r3, [pc, #472]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005886:	4973      	ldr	r1, [pc, #460]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005888:	4313      	orrs	r3, r2
 800588a:	654b      	str	r3, [r1, #84]	; 0x54
 800588c:	e001      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d029      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80058a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058aa:	d007      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80058ac:	e00f      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ae:	4b69      	ldr	r3, [pc, #420]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	4a68      	ldr	r2, [pc, #416]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058ba:	e00b      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	2102      	movs	r1, #2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f8c8 	bl	8005a58 <RCCEx_PLL2_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058cc:	e002      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
      break;
 80058d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058da:	4b5e      	ldr	r3, [pc, #376]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e6:	495b      	ldr	r1, [pc, #364]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058ec:	e001      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
 80058f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3324      	adds	r3, #36	; 0x24
 8005902:	2102      	movs	r1, #2
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f959 	bl	8005bbc <RCCEx_PLL3_Config>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d030      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005928:	d017      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800592a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800592e:	d811      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005934:	d013      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800593a:	d80b      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d010      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005944:	d106      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005946:	4b43      	ldr	r3, [pc, #268]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	4a42      	ldr	r2, [pc, #264]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800594c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005950:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005952:	e007      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	75fb      	strb	r3, [r7, #23]
      break;
 8005958:	e004      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800595a:	bf00      	nop
 800595c:	e002      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800596a:	4b3a      	ldr	r3, [pc, #232]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005976:	4937      	ldr	r1, [pc, #220]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005978:	4313      	orrs	r3, r2
 800597a:	654b      	str	r3, [r1, #84]	; 0x54
 800597c:	e001      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597e:	7dfb      	ldrb	r3, [r7, #23]
 8005980:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d008      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800598e:	4b31      	ldr	r3, [pc, #196]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005992:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	492e      	ldr	r1, [pc, #184]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800599c:	4313      	orrs	r3, r2
 800599e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d009      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059ac:	4b29      	ldr	r3, [pc, #164]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059ba:	4926      	ldr	r1, [pc, #152]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059d8:	491e      	ldr	r1, [pc, #120]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00d      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059ea:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059f4:	6113      	str	r3, [r2, #16]
 80059f6:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a00:	4914      	ldr	r1, [pc, #80]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	da08      	bge.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1a:	490e      	ldr	r1, [pc, #56]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d009      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a2c:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	4906      	ldr	r1, [pc, #24]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005a40:	7dbb      	ldrb	r3, [r7, #22]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e000      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	58024400 	.word	0x58024400

08005a58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a66:	4b53      	ldr	r3, [pc, #332]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d101      	bne.n	8005a76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e099      	b.n	8005baa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a76:	4b4f      	ldr	r3, [pc, #316]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a4e      	ldr	r2, [pc, #312]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005a7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a82:	f7fb fc3f 	bl	8001304 <HAL_GetTick>
 8005a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a88:	e008      	b.n	8005a9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a8a:	f7fb fc3b 	bl	8001304 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e086      	b.n	8005baa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a9c:	4b45      	ldr	r3, [pc, #276]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f0      	bne.n	8005a8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005aa8:	4b42      	ldr	r3, [pc, #264]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	031b      	lsls	r3, r3, #12
 8005ab6:	493f      	ldr	r1, [pc, #252]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	628b      	str	r3, [r1, #40]	; 0x28
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	025b      	lsls	r3, r3, #9
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	041b      	lsls	r3, r3, #16
 8005ada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	061b      	lsls	r3, r3, #24
 8005ae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005aec:	4931      	ldr	r1, [pc, #196]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005af2:	4b30      	ldr	r3, [pc, #192]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	492d      	ldr	r1, [pc, #180]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b04:	4b2b      	ldr	r3, [pc, #172]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	f023 0220 	bic.w	r2, r3, #32
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	4928      	ldr	r1, [pc, #160]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b16:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	4a26      	ldr	r2, [pc, #152]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b1c:	f023 0310 	bic.w	r3, r3, #16
 8005b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b26:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <RCCEx_PLL2_Config+0x160>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	69d2      	ldr	r2, [r2, #28]
 8005b2e:	00d2      	lsls	r2, r2, #3
 8005b30:	4920      	ldr	r1, [pc, #128]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b36:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b3c:	f043 0310 	orr.w	r3, r3, #16
 8005b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d106      	bne.n	8005b56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b54:	e00f      	b.n	8005b76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d106      	bne.n	8005b6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b5c:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b68:	e005      	b.n	8005b76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b6a:	4b12      	ldr	r3, [pc, #72]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a0e      	ldr	r2, [pc, #56]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b82:	f7fb fbbf 	bl	8001304 <HAL_GetTick>
 8005b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b88:	e008      	b.n	8005b9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b8a:	f7fb fbbb 	bl	8001304 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e006      	b.n	8005baa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b9c:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <RCCEx_PLL2_Config+0x15c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f0      	beq.n	8005b8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	ffff0007 	.word	0xffff0007

08005bbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bca:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d101      	bne.n	8005bda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e099      	b.n	8005d0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bda:	4b4f      	ldr	r3, [pc, #316]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a4e      	ldr	r2, [pc, #312]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be6:	f7fb fb8d 	bl	8001304 <HAL_GetTick>
 8005bea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bec:	e008      	b.n	8005c00 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005bee:	f7fb fb89 	bl	8001304 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e086      	b.n	8005d0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c00:	4b45      	ldr	r3, [pc, #276]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c0c:	4b42      	ldr	r3, [pc, #264]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	051b      	lsls	r3, r3, #20
 8005c1a:	493f      	ldr	r1, [pc, #252]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	025b      	lsls	r3, r3, #9
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	041b      	lsls	r3, r3, #16
 8005c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	061b      	lsls	r3, r3, #24
 8005c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c50:	4931      	ldr	r1, [pc, #196]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c56:	4b30      	ldr	r3, [pc, #192]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	492d      	ldr	r1, [pc, #180]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c68:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	4928      	ldr	r1, [pc, #160]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c7a:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8a:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <RCCEx_PLL3_Config+0x160>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	69d2      	ldr	r2, [r2, #28]
 8005c92:	00d2      	lsls	r2, r2, #3
 8005c94:	4920      	ldr	r1, [pc, #128]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c9a:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005cac:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cb8:	e00f      	b.n	8005cda <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d106      	bne.n	8005cce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005cc0:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ccc:	e005      	b.n	8005cda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	4a11      	ldr	r2, [pc, #68]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cda:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a0e      	ldr	r2, [pc, #56]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce6:	f7fb fb0d 	bl	8001304 <HAL_GetTick>
 8005cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cec:	e008      	b.n	8005d00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005cee:	f7fb fb09 	bl	8001304 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e006      	b.n	8005d0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <RCCEx_PLL3_Config+0x15c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	58024400 	.word	0x58024400
 8005d1c:	ffff0007 	.word	0xffff0007

08005d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e049      	b.n	8005dc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fb f9e4 	bl	8001114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f000 faee 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e054      	b.n	8005e92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a26      	ldr	r2, [pc, #152]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d022      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x80>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e12:	d01d      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x80>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a22      	ldr	r2, [pc, #136]	; (8005ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d018      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x80>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d013      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x80>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <HAL_TIM_Base_Start_IT+0xdc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00e      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x80>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d009      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x80>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_TIM_Base_Start_IT+0x80>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1b      	ldr	r2, [pc, #108]	; (8005eb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d115      	bne.n	8005e7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	4b19      	ldr	r3, [pc, #100]	; (8005ebc <HAL_TIM_Base_Start_IT+0xec>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b06      	cmp	r3, #6
 8005e60:	d015      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0xbe>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e68:	d011      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	e008      	b.n	8005e8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e000      	b.n	8005e90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40010400 	.word	0x40010400
 8005eb4:	40001800 	.word	0x40001800
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	00010007 	.word	0x00010007

08005ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d122      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d11b      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0202 	mvn.w	r2, #2
 8005eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f9fe 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f9f0 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa01 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d122      	bne.n	8005f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d11b      	bne.n	8005f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0204 	mvn.w	r2, #4
 8005f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f9d4 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f9c6 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f9d7 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d122      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0208 	mvn.w	r2, #8
 8005f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2204      	movs	r2, #4
 8005f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f9aa 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8005fb0:	e005      	b.n	8005fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f99c 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f9ad 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0310 	and.w	r3, r3, #16
 8005fce:	2b10      	cmp	r3, #16
 8005fd0:	d122      	bne.n	8006018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d11b      	bne.n	8006018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0210 	mvn.w	r2, #16
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2208      	movs	r2, #8
 8005fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f980 	bl	8006304 <HAL_TIM_IC_CaptureCallback>
 8006004:	e005      	b.n	8006012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f972 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f983 	bl	8006318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b01      	cmp	r3, #1
 8006024:	d10e      	bne.n	8006044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d107      	bne.n	8006044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0201 	mvn.w	r2, #1
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 fd5e 	bl	8007b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604e:	2b80      	cmp	r3, #128	; 0x80
 8006050:	d10e      	bne.n	8006070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605c:	2b80      	cmp	r3, #128	; 0x80
 800605e:	d107      	bne.n	8006070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fb38 	bl	80066e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607e:	d10e      	bne.n	800609e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b80      	cmp	r3, #128	; 0x80
 800608c:	d107      	bne.n	800609e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fb2b 	bl	80066f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d10e      	bne.n	80060ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	d107      	bne.n	80060ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f931 	bl	800632c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d10e      	bne.n	80060f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d107      	bne.n	80060f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f06f 0220 	mvn.w	r2, #32
 80060ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 faeb 	bl	80066cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_TIM_ConfigClockSource+0x1c>
 8006118:	2302      	movs	r3, #2
 800611a:	e0dc      	b.n	80062d6 <HAL_TIM_ConfigClockSource+0x1d6>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4b6a      	ldr	r3, [pc, #424]	; (80062e0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006138:	4013      	ands	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a64      	ldr	r2, [pc, #400]	; (80062e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	f000 80a9 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006158:	4a62      	ldr	r2, [pc, #392]	; (80062e4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	f200 80ae 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 8006160:	4a61      	ldr	r2, [pc, #388]	; (80062e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	f000 80a1 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006168:	4a5f      	ldr	r2, [pc, #380]	; (80062e8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	f200 80a6 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 8006170:	4a5e      	ldr	r2, [pc, #376]	; (80062ec <HAL_TIM_ConfigClockSource+0x1ec>)
 8006172:	4293      	cmp	r3, r2
 8006174:	f000 8099 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006178:	4a5c      	ldr	r2, [pc, #368]	; (80062ec <HAL_TIM_ConfigClockSource+0x1ec>)
 800617a:	4293      	cmp	r3, r2
 800617c:	f200 809e 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 8006180:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006184:	f000 8091 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006188:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800618c:	f200 8096 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 8006190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006194:	f000 8089 	beq.w	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 8006198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800619c:	f200 808e 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a4:	d03e      	beq.n	8006224 <HAL_TIM_ConfigClockSource+0x124>
 80061a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061aa:	f200 8087 	bhi.w	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	f000 8086 	beq.w	80062c2 <HAL_TIM_ConfigClockSource+0x1c2>
 80061b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ba:	d87f      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061bc:	2b70      	cmp	r3, #112	; 0x70
 80061be:	d01a      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0xf6>
 80061c0:	2b70      	cmp	r3, #112	; 0x70
 80061c2:	d87b      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061c4:	2b60      	cmp	r3, #96	; 0x60
 80061c6:	d050      	beq.n	800626a <HAL_TIM_ConfigClockSource+0x16a>
 80061c8:	2b60      	cmp	r3, #96	; 0x60
 80061ca:	d877      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061cc:	2b50      	cmp	r3, #80	; 0x50
 80061ce:	d03c      	beq.n	800624a <HAL_TIM_ConfigClockSource+0x14a>
 80061d0:	2b50      	cmp	r3, #80	; 0x50
 80061d2:	d873      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d058      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x18a>
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d86f      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061dc:	2b30      	cmp	r3, #48	; 0x30
 80061de:	d064      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 80061e0:	2b30      	cmp	r3, #48	; 0x30
 80061e2:	d86b      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d060      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	d867      	bhi.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d05c      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d05a      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x1aa>
 80061f4:	e062      	b.n	80062bc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6899      	ldr	r1, [r3, #8]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f000 f9b3 	bl	8006570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	609a      	str	r2, [r3, #8]
      break;
 8006222:	e04f      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	6899      	ldr	r1, [r3, #8]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f000 f99c 	bl	8006570 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689a      	ldr	r2, [r3, #8]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006246:	609a      	str	r2, [r3, #8]
      break;
 8006248:	e03c      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	461a      	mov	r2, r3
 8006258:	f000 f90c 	bl	8006474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2150      	movs	r1, #80	; 0x50
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f966 	bl	8006534 <TIM_ITRx_SetConfig>
      break;
 8006268:	e02c      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	6859      	ldr	r1, [r3, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	461a      	mov	r2, r3
 8006278:	f000 f92b 	bl	80064d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2160      	movs	r1, #96	; 0x60
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f956 	bl	8006534 <TIM_ITRx_SetConfig>
      break;
 8006288:	e01c      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	461a      	mov	r2, r3
 8006298:	f000 f8ec 	bl	8006474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2140      	movs	r1, #64	; 0x40
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f946 	bl	8006534 <TIM_ITRx_SetConfig>
      break;
 80062a8:	e00c      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f000 f93d 	bl	8006534 <TIM_ITRx_SetConfig>
      break;
 80062ba:	e003      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
      break;
 80062c0:	e000      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80062c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	ffceff88 	.word	0xffceff88
 80062e4:	00100040 	.word	0x00100040
 80062e8:	00100030 	.word	0x00100030
 80062ec:	00100020 	.word	0x00100020

080062f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a40      	ldr	r2, [pc, #256]	; (8006454 <TIM_Base_SetConfig+0x114>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635e:	d00f      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a3d      	ldr	r2, [pc, #244]	; (8006458 <TIM_Base_SetConfig+0x118>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a3c      	ldr	r2, [pc, #240]	; (800645c <TIM_Base_SetConfig+0x11c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a3b      	ldr	r2, [pc, #236]	; (8006460 <TIM_Base_SetConfig+0x120>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a3a      	ldr	r2, [pc, #232]	; (8006464 <TIM_Base_SetConfig+0x124>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d108      	bne.n	8006392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2f      	ldr	r2, [pc, #188]	; (8006454 <TIM_Base_SetConfig+0x114>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01f      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a0:	d01b      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a2c      	ldr	r2, [pc, #176]	; (8006458 <TIM_Base_SetConfig+0x118>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d017      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a2b      	ldr	r2, [pc, #172]	; (800645c <TIM_Base_SetConfig+0x11c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <TIM_Base_SetConfig+0x120>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a29      	ldr	r2, [pc, #164]	; (8006464 <TIM_Base_SetConfig+0x124>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a28      	ldr	r2, [pc, #160]	; (8006468 <TIM_Base_SetConfig+0x128>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a27      	ldr	r2, [pc, #156]	; (800646c <TIM_Base_SetConfig+0x12c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a26      	ldr	r2, [pc, #152]	; (8006470 <TIM_Base_SetConfig+0x130>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a10      	ldr	r2, [pc, #64]	; (8006454 <TIM_Base_SetConfig+0x114>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00f      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a12      	ldr	r2, [pc, #72]	; (8006464 <TIM_Base_SetConfig+0x124>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00b      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a11      	ldr	r2, [pc, #68]	; (8006468 <TIM_Base_SetConfig+0x128>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d007      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a10      	ldr	r2, [pc, #64]	; (800646c <TIM_Base_SetConfig+0x12c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a0f      	ldr	r2, [pc, #60]	; (8006470 <TIM_Base_SetConfig+0x130>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d103      	bne.n	8006440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	615a      	str	r2, [r3, #20]
}
 8006446:	bf00      	nop
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	40010000 	.word	0x40010000
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800
 8006460:	40000c00 	.word	0x40000c00
 8006464:	40010400 	.word	0x40010400
 8006468:	40014000 	.word	0x40014000
 800646c:	40014400 	.word	0x40014400
 8006470:	40014800 	.word	0x40014800

08006474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f023 0201 	bic.w	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800649e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 030a 	bic.w	r3, r3, #10
 80064b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	621a      	str	r2, [r3, #32]
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b087      	sub	sp, #28
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	f023 0210 	bic.w	r2, r3, #16
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	031b      	lsls	r3, r3, #12
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800650e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4b09      	ldr	r3, [pc, #36]	; (800656c <TIM_ITRx_SetConfig+0x38>)
 8006548:	4013      	ands	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	f043 0307 	orr.w	r3, r3, #7
 8006556:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	609a      	str	r2, [r3, #8]
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	ffcfff8f 	.word	0xffcfff8f

08006570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800658a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	021a      	lsls	r2, r3, #8
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	431a      	orrs	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4313      	orrs	r3, r2
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	609a      	str	r2, [r3, #8]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e06d      	b.n	80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a30      	ldr	r2, [pc, #192]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a2f      	ldr	r2, [pc, #188]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d108      	bne.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006602:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006614:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a20      	ldr	r2, [pc, #128]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d022      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663a:	d01d      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1d      	ldr	r2, [pc, #116]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d018      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1a      	ldr	r2, [pc, #104]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00e      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d009      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a16      	ldr	r2, [pc, #88]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d10c      	bne.n	8006692 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800667e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	40010000 	.word	0x40010000
 80066b4:	40010400 	.word	0x40010400
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40001800 	.word	0x40001800
 80066c8:	40014000 	.word	0x40014000

080066cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <Write_Reg_BM1422AGMV>:
{
    return t_obj->io.ReadReg(t_obj->addr, t_reg, t_data, t_size);
}

static BM1422AGMV Write_Reg_BM1422AGMV(BM1422AGMVObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 8006708:	b590      	push	{r4, r7, lr}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	607a      	str	r2, [r7, #4]
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	460b      	mov	r3, r1
 8006716:	817b      	strh	r3, [r7, #10]
    return t_obj->io.WriteReg(t_obj->addr, t_reg, t_data, t_size);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	695c      	ldr	r4, [r3, #20]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8818      	ldrh	r0, [r3, #0]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	8979      	ldrh	r1, [r7, #10]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	47a0      	blx	r4
 800672a:	4603      	mov	r3, r0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	bd90      	pop	{r4, r7, pc}

08006734 <Set_Reg_BM1422AGMV>:

static BM1422AGMV Set_Reg_BM1422AGMV(BM1422AGMVObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	460b      	mov	r3, r1
 8006742:	817b      	strh	r3, [r7, #10]
	uint8_t t_res = e_BM1422AGMV_STATUS_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	75fb      	strb	r3, [r7, #23]
    t_res = Write_Reg_BM1422AGMV(t_obj, t_reg, t_data, t_size);
 8006748:	8979      	ldrh	r1, [r7, #10]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7ff ffda 	bl	8006708 <Write_Reg_BM1422AGMV>
 8006754:	4603      	mov	r3, r0
 8006756:	75fb      	strb	r3, [r7, #23]
    return t_res;
 8006758:	7dfb      	ldrb	r3, [r7, #23]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <Set_Ioctx_BM1422AGMV>:

BM1422AGMV Set_Ioctx_BM1422AGMV(BM1422AGMVObject* t_obj, BM1422AGMVIOctx* t_ioctx)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
    if (!t_obj || !t_ioctx->IsDevReady || !t_ioctx->ReadReg || !t_ioctx->WriteReg ) {
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <Set_Ioctx_BM1422AGMV+0x28>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <Set_Ioctx_BM1422AGMV+0x28>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <Set_Ioctx_BM1422AGMV+0x28>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <Set_Ioctx_BM1422AGMV+0x2c>
        return e_BM1422AGMV_STATUS_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e018      	b.n	80067c0 <Set_Ioctx_BM1422AGMV+0x5e>
    }

    t_obj->io.Init       = t_ioctx->Init;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	605a      	str	r2, [r3, #4]
    t_obj->io.DeInit     = t_ioctx->DeInit;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	609a      	str	r2, [r3, #8]
    t_obj->io.IsDevReady = t_ioctx->IsDevReady;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60da      	str	r2, [r3, #12]
    t_obj->io.ReadReg    = t_ioctx->ReadReg;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	611a      	str	r2, [r3, #16]
    t_obj->io.WriteReg   = t_ioctx->WriteReg;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	615a      	str	r2, [r3, #20]
    t_obj->io.Wait       = t_ioctx->Wait;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	619a      	str	r2, [r3, #24]

    return e_BM1422AGMV_STATUS_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <Init_BM1422AGMV>:

BM1422AGMV Init_BM1422AGMV(BM1422AGMVObject* t_obj)			// Setting control register
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
	static uint8_t t_res  = e_BM1422AGMV_STATUS_OK;

    // Check Address
    t_res = e_BM1422AGMV_STATUS_ERROR;
 80067d4:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <Init_BM1422AGMV+0xbc>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
    t_obj->addr = BM1422AGMV_DEV_ADDR;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	221c      	movs	r2, #28
 80067de:	801a      	strh	r2, [r3, #0]
    if (t_obj->io.IsDevReady(t_obj->addr) == 0){
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	8812      	ldrh	r2, [r2, #0]
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <Init_BM1422AGMV+0x2c>
    	t_res = e_BM1422AGMV_STATUS_OK;
 80067f2:	4b25      	ldr	r3, [pc, #148]	; (8006888 <Init_BM1422AGMV+0xbc>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
    }

    // Configure Control
    if (t_res == e_BM1422AGMV_STATUS_OK) {
 80067f8:	4b23      	ldr	r3, [pc, #140]	; (8006888 <Init_BM1422AGMV+0xbc>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d13c      	bne.n	800687a <Init_BM1422AGMV+0xae>
    	uint8_t conf_1 = BM1422AGMV_CNTL1_VALUE;
 8006800:	23d8      	movs	r3, #216	; 0xd8
 8006802:	73fb      	strb	r3, [r7, #15]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL1_REG, &conf_1, BM1422AGMV_CONTROL_SIZE);
 8006804:	f107 020f 	add.w	r2, r7, #15
 8006808:	2301      	movs	r3, #1
 800680a:	211b      	movs	r1, #27
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff ff91 	bl	8006734 <Set_Reg_BM1422AGMV>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	4b1c      	ldr	r3, [pc, #112]	; (8006888 <Init_BM1422AGMV+0xbc>)
 8006818:	701a      	strb	r2, [r3, #0]
        uint8_t conf_2 = BM1422AGMV_CNTL2_VALUE;
 800681a:	2300      	movs	r3, #0
 800681c:	73bb      	strb	r3, [r7, #14]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL2_REG, &conf_2, BM1422AGMV_CONTROL_SIZE);
 800681e:	f107 020e 	add.w	r2, r7, #14
 8006822:	2301      	movs	r3, #1
 8006824:	211c      	movs	r1, #28
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff84 	bl	8006734 <Set_Reg_BM1422AGMV>
 800682c:	4603      	mov	r3, r0
 800682e:	461a      	mov	r2, r3
 8006830:	4b15      	ldr	r3, [pc, #84]	; (8006888 <Init_BM1422AGMV+0xbc>)
 8006832:	701a      	strb	r2, [r3, #0]
        uint8_t conf_4 = BM1422AGMV_CNTL4_H_VALUE;
 8006834:	2300      	movs	r3, #0
 8006836:	737b      	strb	r3, [r7, #13]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL4_REG_H, &conf_4, BM1422AGMV_CONTROL_SIZE);
 8006838:	f107 020d 	add.w	r2, r7, #13
 800683c:	2301      	movs	r3, #1
 800683e:	215d      	movs	r1, #93	; 0x5d
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff ff77 	bl	8006734 <Set_Reg_BM1422AGMV>
 8006846:	4603      	mov	r3, r0
 8006848:	461a      	mov	r2, r3
 800684a:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <Init_BM1422AGMV+0xbc>)
 800684c:	701a      	strb	r2, [r3, #0]
        uint8_t conf_5 = BM1422AGMV_CNTL4_L_VALUE;
 800684e:	2300      	movs	r3, #0
 8006850:	733b      	strb	r3, [r7, #12]
        t_res = Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL4_REG_L, &conf_5, BM1422AGMV_CONTROL_SIZE);
 8006852:	f107 020c 	add.w	r2, r7, #12
 8006856:	2301      	movs	r3, #1
 8006858:	215c      	movs	r1, #92	; 0x5c
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff ff6a 	bl	8006734 <Set_Reg_BM1422AGMV>
 8006860:	4603      	mov	r3, r0
 8006862:	461a      	mov	r2, r3
 8006864:	4b08      	ldr	r3, [pc, #32]	; (8006888 <Init_BM1422AGMV+0xbc>)
 8006866:	701a      	strb	r2, [r3, #0]


        // CNTL3 should be set at LAST //
        uint8_t conf_3 = BM1422AGMV_CNTL3_VALUE;
 8006868:	2340      	movs	r3, #64	; 0x40
 800686a:	72fb      	strb	r3, [r7, #11]
        Set_Reg_BM1422AGMV(t_obj, BM1422AGMV_CNTL3_REG, &conf_3, BM1422AGMV_CONTROL_SIZE);
 800686c:	f107 020b 	add.w	r2, r7, #11
 8006870:	2301      	movs	r3, #1
 8006872:	211d      	movs	r1, #29
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff ff5d 	bl	8006734 <Set_Reg_BM1422AGMV>
    }

    return t_res;
 800687a:	4b03      	ldr	r3, [pc, #12]	; (8006888 <Init_BM1422AGMV+0xbc>)
 800687c:	781b      	ldrb	r3, [r3, #0]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	24000098 	.word	0x24000098

0800688c <Get_Value_BM1422AGMV>:

BM1422AGMV Get_Value_BM1422AGMV(BM1422AGMVObject* t_obj)
{
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
    uint8_t t_res = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	75fb      	strb	r3, [r7, #23]
	uint8_t t_buff[6];

    t_res = t_obj->io.ReadReg(t_obj->addr, BM1422AGMV_DATAX_REG, t_buff, 6);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691c      	ldr	r4, [r3, #16]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8818      	ldrh	r0, [r3, #0]
 80068a0:	f107 0208 	add.w	r2, r7, #8
 80068a4:	2306      	movs	r3, #6
 80068a6:	2110      	movs	r1, #16
 80068a8:	47a0      	blx	r4
 80068aa:	4603      	mov	r3, r0
 80068ac:	75fb      	strb	r3, [r7, #23]

    int16_t t_magX = (int16_t)(t_buff[0] | t_buff[1] << 8);
 80068ae:	7a3b      	ldrb	r3, [r7, #8]
 80068b0:	b21a      	sxth	r2, r3
 80068b2:	7a7b      	ldrb	r3, [r7, #9]
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	b21b      	sxth	r3, r3
 80068b8:	4313      	orrs	r3, r2
 80068ba:	82bb      	strh	r3, [r7, #20]
    int16_t t_magY = (int16_t)(t_buff[2] | t_buff[3] << 8);
 80068bc:	7abb      	ldrb	r3, [r7, #10]
 80068be:	b21a      	sxth	r2, r3
 80068c0:	7afb      	ldrb	r3, [r7, #11]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	b21b      	sxth	r3, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	827b      	strh	r3, [r7, #18]
    int16_t t_magZ = (int16_t)(t_buff[4] | t_buff[5] << 8);
 80068ca:	7b3b      	ldrb	r3, [r7, #12]
 80068cc:	b21a      	sxth	r2, r3
 80068ce:	7b7b      	ldrb	r3, [r7, #13]
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	b21b      	sxth	r3, r3
 80068d4:	4313      	orrs	r3, r2
 80068d6:	823b      	strh	r3, [r7, #16]

	/* NEED TO BE SCALED */
    t_obj->value.bm1422_mag_x = (float)t_magX;
 80068d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80068dc:	ee07 3a90 	vmov	s15, r3
 80068e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	edc3 7a07 	vstr	s15, [r3, #28]
	t_obj->value.bm1422_mag_y = (float)t_magY;
 80068ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	edc3 7a08 	vstr	s15, [r3, #32]
	t_obj->value.bm1422_mag_z = (float)t_magZ;
 80068fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return t_res;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006910:	4618      	mov	r0, r3
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	bd90      	pop	{r4, r7, pc}

08006918 <Assemble_SDO>:
	default:			return 0;		break;
	}
}

static void Assemble_SDO(SDOinfo* t_do_addr, uint8_t t_data_type)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
	SDOinfo temp = t_data_type;
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	73fb      	strb	r3, [r7, #15]
 8006928:	7bfa      	ldrb	r2, [r7, #15]
	memcpy(t_do_addr, &temp, sizeof(SDOinfo));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	701a      	strb	r2, [r3, #0]
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <Assemble_PDO>:

static void Assemble_PDO(PDOinfo* t_do_addr, uint8_t t_data_type, uint8_t t_num_of_data)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
 8006946:	4613      	mov	r3, r2
 8006948:	70bb      	strb	r3, [r7, #2]
	PDOinfo temp = {t_data_type, t_num_of_data};
 800694a:	78fb      	ldrb	r3, [r7, #3]
 800694c:	733b      	strb	r3, [r7, #12]
 800694e:	78bb      	ldrb	r3, [r7, #2]
 8006950:	737b      	strb	r3, [r7, #13]
 8006952:	89ba      	ldrh	r2, [r7, #12]
	memcpy(t_do_addr, &temp, sizeof(PDOinfo));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	801a      	strh	r2, [r3, #0]
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <Create_SDOTable_ObjDictionary>:
   |_/_/ \_\___/____|___|

*/

void Create_SDOTable_ObjDictionary()
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
	//********************************************************************************//
	//						|	  Task_ID	  |			SDO_ID			| DATA_TYPE | //
	//********************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_STATE],  	    			UINT8_T);
 8006968:	2101      	movs	r1, #1
 800696a:	48c2      	ldr	r0, [pc, #776]	; (8006c74 <Create_SDOTable_ObjDictionary+0x310>)
 800696c:	f7ff ffd4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_STATE],  	    			UINT8_T);
 8006970:	2101      	movs	r1, #1
 8006972:	48c1      	ldr	r0, [pc, #772]	; (8006c78 <Create_SDOTable_ObjDictionary+0x314>)
 8006974:	f7ff ffd0 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GET_ROUTINE],  				UINT8_T);
 8006978:	2101      	movs	r1, #1
 800697a:	48c0      	ldr	r0, [pc, #768]	; (8006c7c <Create_SDOTable_ObjDictionary+0x318>)
 800697c:	f7ff ffcc 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_SET_ROUTINE],  				UINT8_T);
 8006980:	2101      	movs	r1, #1
 8006982:	48bf      	ldr	r0, [pc, #764]	; (8006c80 <Create_SDOTable_ObjDictionary+0x31c>)
 8006984:	f7ff ffc8 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_NAME],  						STRING10);
 8006988:	2109      	movs	r1, #9
 800698a:	48be      	ldr	r0, [pc, #760]	; (8006c84 <Create_SDOTable_ObjDictionary+0x320>)
 800698c:	f7ff ffc4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_POLE_PAIR],  					UINT8_T);
 8006990:	2101      	movs	r1, #1
 8006992:	48bd      	ldr	r0, [pc, #756]	; (8006c88 <Create_SDOTable_ObjDictionary+0x324>)
 8006994:	f7ff ffc0 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ENCODER_RESOLUTION],  			UINT16_T);
 8006998:	2102      	movs	r1, #2
 800699a:	48bc      	ldr	r0, [pc, #752]	; (8006c8c <Create_SDOTable_ObjDictionary+0x328>)
 800699c:	f7ff ffbc 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_GEAR_RATIO],  					FLOAT32_T);
 80069a0:	2107      	movs	r1, #7
 80069a2:	48bb      	ldr	r0, [pc, #748]	; (8006c90 <Create_SDOTable_ObjDictionary+0x32c>)
 80069a4:	f7ff ffb8 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TORQUE_CONSTANT],  			FLOAT32_T);
 80069a8:	2107      	movs	r1, #7
 80069aa:	48ba      	ldr	r0, [pc, #744]	; (8006c94 <Create_SDOTable_ObjDictionary+0x330>)
 80069ac:	f7ff ffb4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_VELOCITY_CONSTANT],  			FLOAT32_T);
 80069b0:	2107      	movs	r1, #7
 80069b2:	48b9      	ldr	r0, [pc, #740]	; (8006c98 <Create_SDOTable_ObjDictionary+0x334>)
 80069b4:	f7ff ffb0 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_PEAK_CURRENT_LIMIT],  			FLOAT32_T);
 80069b8:	2107      	movs	r1, #7
 80069ba:	48b8      	ldr	r0, [pc, #736]	; (8006c9c <Create_SDOTable_ObjDictionary+0x338>)
 80069bc:	f7ff ffac 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CONTINUOUS_CURRENT_LIMIT],  	FLOAT32_T);
 80069c0:	2107      	movs	r1, #7
 80069c2:	48b7      	ldr	r0, [pc, #732]	; (8006ca0 <Create_SDOTable_ObjDictionary+0x33c>)
 80069c4:	f7ff ffa8 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MAX_VELOCITY],		  			FLOAT32_T);
 80069c8:	2107      	movs	r1, #7
 80069ca:	48b6      	ldr	r0, [pc, #728]	; (8006ca4 <Create_SDOTable_ObjDictionary+0x340>)
 80069cc:	f7ff ffa4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_COMMUTATION_DUTY],  			UINT16_T);
 80069d0:	2102      	movs	r1, #2
 80069d2:	48b5      	ldr	r0, [pc, #724]	; (8006ca8 <Create_SDOTable_ObjDictionary+0x344>)
 80069d4:	f7ff ffa0 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_USER_DIRECTION],  				FLOAT32_T);
 80069d8:	2107      	movs	r1, #7
 80069da:	48b4      	ldr	r0, [pc, #720]	; (8006cac <Create_SDOTable_ObjDictionary+0x348>)
 80069dc:	f7ff ff9c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_ELEC_SYSTEM_ID_MAG],  			FLOAT32_T);
 80069e0:	2107      	movs	r1, #7
 80069e2:	48b3      	ldr	r0, [pc, #716]	; (8006cb0 <Create_SDOTable_ObjDictionary+0x34c>)
 80069e4:	f7ff ff98 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_RESISTANCE],  		FLOAT32_T);
 80069e8:	2107      	movs	r1, #7
 80069ea:	48b2      	ldr	r0, [pc, #712]	; (8006cb4 <Create_SDOTable_ObjDictionary+0x350>)
 80069ec:	f7ff ff94 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_TERMINAL_INDUCTANCE],  		FLOAT32_T);
 80069f0:	2107      	movs	r1, #7
 80069f2:	48b1      	ldr	r0, [pc, #708]	; (8006cb8 <Create_SDOTable_ObjDictionary+0x354>)
 80069f4:	f7ff ff90 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_VELOCITY],  			FLOAT32_T);
 80069f8:	2107      	movs	r1, #7
 80069fa:	48b0      	ldr	r0, [pc, #704]	; (8006cbc <Create_SDOTable_ObjDictionary+0x358>)
 80069fc:	f7ff ff8c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_BEMF_ID_GAIN_PCTG],  			UINT8_T);
 8006a00:	2101      	movs	r1, #1
 8006a02:	48af      	ldr	r0, [pc, #700]	; (8006cc0 <Create_SDOTable_ObjDictionary+0x35c>)
 8006a04:	f7ff ff88 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_CURRENT_CTRL_BW_RAD],  		FLOAT32_T);
 8006a08:	2107      	movs	r1, #7
 8006a0a:	48ae      	ldr	r0, [pc, #696]	; (8006cc4 <Create_SDOTable_ObjDictionary+0x360>)
 8006a0c:	f7ff ff84 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_INERTIA],  					FLOAT32_T);
 8006a10:	2107      	movs	r1, #7
 8006a12:	48ad      	ldr	r0, [pc, #692]	; (8006cc8 <Create_SDOTable_ObjDictionary+0x364>)
 8006a14:	f7ff ff80 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_DAMPING_COEF],  				FLOAT32_T);
 8006a18:	2107      	movs	r1, #7
 8006a1a:	48ac      	ldr	r0, [pc, #688]	; (8006ccc <Create_SDOTable_ObjDictionary+0x368>)
 8006a1c:	f7ff ff7c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_A],  				FLOAT32_T);
 8006a20:	2107      	movs	r1, #7
 8006a22:	48ab      	ldr	r0, [pc, #684]	; (8006cd0 <Create_SDOTable_ObjDictionary+0x36c>)
 8006a24:	f7ff ff78 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_MECH_MODEL_B],  				FLOAT32_T);
 8006a28:	2107      	movs	r1, #7
 8006a2a:	48aa      	ldr	r0, [pc, #680]	; (8006cd4 <Create_SDOTable_ObjDictionary+0x370>)
 8006a2c:	f7ff ff74 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_ID_INFO],  			FLOAT32_T);
 8006a30:	2107      	movs	r1, #7
 8006a32:	48a9      	ldr	r0, [pc, #676]	; (8006cd8 <Create_SDOTable_ObjDictionary+0x374>)
 8006a34:	f7ff ff70 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_LOWLEVEL] [SDO_ID_LOWLEVEL_FRICTION_LUT_INFO],  			FLOAT32_T);
 8006a38:	2107      	movs	r1, #7
 8006a3a:	48a8      	ldr	r0, [pc, #672]	; (8006cdc <Create_SDOTable_ObjDictionary+0x378>)
 8006a3c:	f7ff ff6c 	bl	8006918 <Assemble_SDO>




	/*Joint Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_STATE],  					UINT8_T);
 8006a40:	2101      	movs	r1, #1
 8006a42:	48a7      	ldr	r0, [pc, #668]	; (8006ce0 <Create_SDOTable_ObjDictionary+0x37c>)
 8006a44:	f7ff ff68 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_STATE],  					UINT8_T);
 8006a48:	2101      	movs	r1, #1
 8006a4a:	48a6      	ldr	r0, [pc, #664]	; (8006ce4 <Create_SDOTable_ObjDictionary+0x380>)
 8006a4c:	f7ff ff64 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_GET_ROUTINE], 					UINT8_T);
 8006a50:	2101      	movs	r1, #1
 8006a52:	48a5      	ldr	r0, [pc, #660]	; (8006ce8 <Create_SDOTable_ObjDictionary+0x384>)
 8006a54:	f7ff ff60 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_ROUTINE], 					UINT8_T);
 8006a58:	2101      	movs	r1, #1
 8006a5a:	48a4      	ldr	r0, [pc, #656]	; (8006cec <Create_SDOTable_ObjDictionary+0x388>)
 8006a5c:	f7ff ff5c 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR_LENGTH],	 		UINT8_T);
 8006a60:	2101      	movs	r1, #1
 8006a62:	48a3      	ldr	r0, [pc, #652]	; (8006cf0 <Create_SDOTable_ObjDictionary+0x38c>)
 8006a64:	f7ff ff58 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR_LENGTH],		UINT8_T);
 8006a68:	2101      	movs	r1, #1
 8006a6a:	48a2      	ldr	r0, [pc, #648]	; (8006cf4 <Create_SDOTable_ObjDictionary+0x390>)
 8006a6c:	f7ff ff54 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_NUMERATOR],	  			FLOAT32_T);
 8006a70:	2107      	movs	r1, #7
 8006a72:	48a1      	ldr	r0, [pc, #644]	; (8006cf8 <Create_SDOTable_ObjDictionary+0x394>)
 8006a74:	f7ff ff50 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_DENOMINATOR],	  			FLOAT32_T);
 8006a78:	2107      	movs	r1, #7
 8006a7a:	48a0      	ldr	r0, [pc, #640]	; (8006cfc <Create_SDOTable_ObjDictionary+0x398>)
 8006a7c:	f7ff ff4c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IRC_SATURATION],	  			FLOAT32_T);
 8006a80:	2107      	movs	r1, #7
 8006a82:	489f      	ldr	r0, [pc, #636]	; (8006d00 <Create_SDOTable_ObjDictionary+0x39c>)
 8006a84:	f7ff ff48 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_STIFFNESS],	  	FLOAT32_T);
 8006a88:	2107      	movs	r1, #7
 8006a8a:	489e      	ldr	r0, [pc, #632]	; (8006d04 <Create_SDOTable_ObjDictionary+0x3a0>)
 8006a8c:	f7ff ff44 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_IMP_VIRTUAL_DAMPER],	  		FLOAT32_T);
 8006a90:	2107      	movs	r1, #7
 8006a92:	489d      	ldr	r0, [pc, #628]	; (8006d08 <Create_SDOTable_ObjDictionary+0x3a4>)
 8006a94:	f7ff ff40 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_PERIODIC_SIG_INFO],	FLOAT32_T);
 8006a98:	2107      	movs	r1, #7
 8006a9a:	489c      	ldr	r0, [pc, #624]	; (8006d0c <Create_SDOTable_ObjDictionary+0x3a8>)
 8006a9c:	f7ff ff3c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_PERIODIC_SIG_INFO],	FLOAT32_T);
 8006aa0:	2107      	movs	r1, #7
 8006aa2:	489b      	ldr	r0, [pc, #620]	; (8006d10 <Create_SDOTable_ObjDictionary+0x3ac>)
 8006aa4:	f7ff ff38 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_BW],						FLOAT32_T);
 8006aa8:	2107      	movs	r1, #7
 8006aaa:	489a      	ldr	r0, [pc, #616]	; (8006d14 <Create_SDOTable_ObjDictionary+0x3b0>)
 8006aac:	f7ff ff34 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_NUM],					FLOAT32_T);
 8006ab0:	2107      	movs	r1, #7
 8006ab2:	4899      	ldr	r0, [pc, #612]	; (8006d18 <Create_SDOTable_ObjDictionary+0x3b4>)
 8006ab4:	f7ff ff30 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_GQ_DEN],					FLOAT32_T);
 8006ab8:	2107      	movs	r1, #7
 8006aba:	4898      	ldr	r0, [pc, #608]	; (8006d1c <Create_SDOTable_ObjDictionary+0x3b8>)
 8006abc:	f7ff ff2c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_NUM],					FLOAT32_T);
 8006ac0:	2107      	movs	r1, #7
 8006ac2:	4897      	ldr	r0, [pc, #604]	; (8006d20 <Create_SDOTable_ObjDictionary+0x3bc>)
 8006ac4:	f7ff ff28 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_Q_DEN],					FLOAT32_T);
 8006ac8:	2107      	movs	r1, #7
 8006aca:	4896      	ldr	r0, [pc, #600]	; (8006d24 <Create_SDOTable_ObjDictionary+0x3c0>)
 8006acc:	f7ff ff24 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_DOB_SATURATION],				FLOAT32_T);
 8006ad0:	2107      	movs	r1, #7
 8006ad2:	4895      	ldr	r0, [pc, #596]	; (8006d28 <Create_SDOTable_ObjDictionary+0x3c4>)
 8006ad4:	f7ff ff20 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_BW],				FLOAT32_T);
 8006ad8:	2107      	movs	r1, #7
 8006ada:	4894      	ldr	r0, [pc, #592]	; (8006d2c <Create_SDOTable_ObjDictionary+0x3c8>)
 8006adc:	f7ff ff1c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_P_GAIN],			FLOAT32_T);
 8006ae0:	2107      	movs	r1, #7
 8006ae2:	4893      	ldr	r0, [pc, #588]	; (8006d30 <Create_SDOTable_ObjDictionary+0x3cc>)
 8006ae4:	f7ff ff18 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_CTRL_I_GAIN],			FLOAT32_T);
 8006ae8:	2107      	movs	r1, #7
 8006aea:	4892      	ldr	r0, [pc, #584]	; (8006d34 <Create_SDOTable_ObjDictionary+0x3d0>)
 8006aec:	f7ff ff14 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_INPUT_PENALTY],	FLOAT32_T);
 8006af0:	2107      	movs	r1, #7
 8006af2:	4891      	ldr	r0, [pc, #580]	; (8006d38 <Create_SDOTable_ObjDictionary+0x3d4>)
 8006af4:	f7ff ff10 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_P_GAIN],			FLOAT32_T);
 8006af8:	2107      	movs	r1, #7
 8006afa:	4890      	ldr	r0, [pc, #576]	; (8006d3c <Create_SDOTable_ObjDictionary+0x3d8>)
 8006afc:	f7ff ff0c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_POSITION_CTRL_D_GAIN],			FLOAT32_T);
 8006b00:	2107      	movs	r1, #7
 8006b02:	488f      	ldr	r0, [pc, #572]	; (8006d40 <Create_SDOTable_ObjDictionary+0x3dc>)
 8006b04:	f7ff ff08 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_MID_CTRL_SATURATION],			FLOAT32_T);
 8006b08:	2107      	movs	r1, #7
 8006b0a:	488e      	ldr	r0, [pc, #568]	; (8006d44 <Create_SDOTable_ObjDictionary+0x3e0>)
 8006b0c:	f7ff ff04 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_INCENCODER_SET_OFFSET],		UINT8_T);
 8006b10:	2101      	movs	r1, #1
 8006b12:	488d      	ldr	r0, [pc, #564]	; (8006d48 <Create_SDOTable_ObjDictionary+0x3e4>)
 8006b14:	f7ff ff00 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_SET_OFFSET],		UINT8_T);
 8006b18:	2101      	movs	r1, #1
 8006b1a:	488c      	ldr	r0, [pc, #560]	; (8006d4c <Create_SDOTable_ObjDictionary+0x3e8>)
 8006b1c:	f7ff fefc 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ABSENCODER_CHANGE_DIRECTION],	UINT8_T);
 8006b20:	2101      	movs	r1, #1
 8006b22:	488b      	ldr	r0, [pc, #556]	; (8006d50 <Create_SDOTable_ObjDictionary+0x3ec>)
 8006b24:	f7ff fef8 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFFNESS],				FLOAT32_T);
 8006b28:	2107      	movs	r1, #7
 8006b2a:	488a      	ldr	r0, [pc, #552]	; (8006d54 <Create_SDOTable_ObjDictionary+0x3f0>)
 8006b2c:	f7ff fef4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPER],					FLOAT32_T);
 8006b30:	2107      	movs	r1, #7
 8006b32:	4889      	ldr	r0, [pc, #548]	; (8006d58 <Create_SDOTable_ObjDictionary+0x3f4>)
 8006b34:	f7ff fef0 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_DAMPED_RANGE],				FLOAT32_T);
 8006b38:	2107      	movs	r1, #7
 8006b3a:	4888      	ldr	r0, [pc, #544]	; (8006d5c <Create_SDOTable_ObjDictionary+0x3f8>)
 8006b3c:	f7ff feec 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_STIFF_RANGE],				FLOAT32_T);
 8006b40:	2107      	movs	r1, #7
 8006b42:	4887      	ldr	r0, [pc, #540]	; (8006d60 <Create_SDOTable_ObjDictionary+0x3fc>)
 8006b44:	f7ff fee8 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_UPPER_LIMIT],			UINT8_T);
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4886      	ldr	r0, [pc, #536]	; (8006d64 <Create_SDOTable_ObjDictionary+0x400>)
 8006b4c:	f7ff fee4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SET_VSD_LOWER_LIMIT],			UINT8_T);
 8006b50:	2101      	movs	r1, #1
 8006b52:	4885      	ldr	r0, [pc, #532]	; (8006d68 <Create_SDOTable_ObjDictionary+0x404>)
 8006b54:	f7ff fee0 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VSD_SATURATION],				FLOAT32_T);
 8006b58:	2107      	movs	r1, #7
 8006b5a:	4884      	ldr	r0, [pc, #528]	; (8006d6c <Create_SDOTable_ObjDictionary+0x408>)
 8006b5c:	f7ff fedc 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_NUM],				FLOAT32_T);
 8006b60:	2107      	movs	r1, #7
 8006b62:	4883      	ldr	r0, [pc, #524]	; (8006d70 <Create_SDOTable_ObjDictionary+0x40c>)
 8006b64:	f7ff fed8 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_FEEDFORWARD_DEN],				FLOAT32_T);
 8006b68:	2107      	movs	r1, #7
 8006b6a:	4882      	ldr	r0, [pc, #520]	; (8006d74 <Create_SDOTable_ObjDictionary+0x410>)
 8006b6c:	f7ff fed4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR],			UINT8_T);
 8006b70:	2101      	movs	r1, #1
 8006b72:	4881      	ldr	r0, [pc, #516]	; (8006d78 <Create_SDOTable_ObjDictionary+0x414>)
 8006b74:	f7ff fed0 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_VELOCITY_ESTIMATOR_LEAD_LAG],	FLOAT32_T);
 8006b78:	2107      	movs	r1, #7
 8006b7a:	4880      	ldr	r0, [pc, #512]	; (8006d7c <Create_SDOTable_ObjDictionary+0x418>)
 8006b7c:	f7ff fecc 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_ENCODER_RESOLUTION],			UINT16_T);
 8006b80:	2102      	movs	r1, #2
 8006b82:	487f      	ldr	r0, [pc, #508]	; (8006d80 <Create_SDOTable_ObjDictionary+0x41c>)
 8006b84:	f7ff fec8 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_SBS_INFO],			FLOAT32_T);
 8006b88:	2107      	movs	r1, #7
 8006b8a:	487e      	ldr	r0, [pc, #504]	; (8006d84 <Create_SDOTable_ObjDictionary+0x420>)
 8006b8c:	f7ff fec4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_SYSTEM_ID_VERIFICATION_MAG],	FLOAT32_T);
 8006b90:	2107      	movs	r1, #7
 8006b92:	487d      	ldr	r0, [pc, #500]	; (8006d88 <Create_SDOTable_ObjDictionary+0x424>)
 8006b94:	f7ff fec0 	bl	8006918 <Assemble_SDO>

	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_MODE_IDX],	UINT8_T);
 8006b98:	2101      	movs	r1, #1
 8006b9a:	487c      	ldr	r0, [pc, #496]	; (8006d8c <Create_SDOTable_ObjDictionary+0x428>)
 8006b9c:	f7ff febc 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MIDLEVEL] [SDO_ID_MIDLEVEL_TORQUE_GENERATOR_TMAX],		INT16_T);
 8006ba0:	2105      	movs	r1, #5
 8006ba2:	487b      	ldr	r0, [pc, #492]	; (8006d90 <Create_SDOTable_ObjDictionary+0x42c>)
 8006ba4:	f7ff feb8 	bl	8006918 <Assemble_SDO>



	/*MSG Handler Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_STATE],  	    UINT8_T);
 8006ba8:	2101      	movs	r1, #1
 8006baa:	487a      	ldr	r0, [pc, #488]	; (8006d94 <Create_SDOTable_ObjDictionary+0x430>)
 8006bac:	f7ff feb4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_STATE],  	    UINT8_T);
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4879      	ldr	r0, [pc, #484]	; (8006d98 <Create_SDOTable_ObjDictionary+0x434>)
 8006bb4:	f7ff feb0 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GET_ROUTINE],  		UINT8_T);
 8006bb8:	2101      	movs	r1, #1
 8006bba:	4878      	ldr	r0, [pc, #480]	; (8006d9c <Create_SDOTable_ObjDictionary+0x438>)
 8006bbc:	f7ff feac 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_SET_ROUTINE],  		UINT8_T);
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	4877      	ldr	r0, [pc, #476]	; (8006da0 <Create_SDOTable_ObjDictionary+0x43c>)
 8006bc4:	f7ff fea8 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_PDO_LIST], 			UINT16_T);
 8006bc8:	2102      	movs	r1, #2
 8006bca:	4876      	ldr	r0, [pc, #472]	; (8006da4 <Create_SDOTable_ObjDictionary+0x440>)
 8006bcc:	f7ff fea4 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_MS_ENUM],  			UINT8_T);
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4875      	ldr	r0, [pc, #468]	; (8006da8 <Create_SDOTable_ObjDictionary+0x444>)
 8006bd4:	f7ff fea0 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_ONOFF],  	UINT8_T);
 8006bd8:	2101      	movs	r1, #1
 8006bda:	4874      	ldr	r0, [pc, #464]	; (8006dac <Create_SDOTable_ObjDictionary+0x448>)
 8006bdc:	f7ff fe9c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_MSG] [SDO_ID_MSG_GUI_COMM_COMMAND],  	UINT8_T);
 8006be0:	2101      	movs	r1, #1
 8006be2:	4873      	ldr	r0, [pc, #460]	; (8006db0 <Create_SDOTable_ObjDictionary+0x44c>)
 8006be4:	f7ff fe98 	bl	8006918 <Assemble_SDO>

	/*IMU Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_STATE],  		UINT8_T);
 8006be8:	2101      	movs	r1, #1
 8006bea:	4872      	ldr	r0, [pc, #456]	; (8006db4 <Create_SDOTable_ObjDictionary+0x450>)
 8006bec:	f7ff fe94 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_STATE],  		UINT8_T);
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4871      	ldr	r0, [pc, #452]	; (8006db8 <Create_SDOTable_ObjDictionary+0x454>)
 8006bf4:	f7ff fe90 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_GET_ROUTINE],  	    UINT8_T);
 8006bf8:	2101      	movs	r1, #1
 8006bfa:	4870      	ldr	r0, [pc, #448]	; (8006dbc <Create_SDOTable_ObjDictionary+0x458>)
 8006bfc:	f7ff fe8c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_SET_ROUTINE],  	    UINT8_T);
 8006c00:	2101      	movs	r1, #1
 8006c02:	486f      	ldr	r0, [pc, #444]	; (8006dc0 <Create_SDOTable_ObjDictionary+0x45c>)
 8006c04:	f7ff fe88 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_IMU] [SDO_ID_IMU_FOR_TEST],  			UINT16_T);
 8006c08:	2102      	movs	r1, #2
 8006c0a:	486e      	ldr	r0, [pc, #440]	; (8006dc4 <Create_SDOTable_ObjDictionary+0x460>)
 8006c0c:	f7ff fe84 	bl	8006918 <Assemble_SDO>


	/*SYSMNGT Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_STATE],  	UINT8_T);
 8006c10:	2101      	movs	r1, #1
 8006c12:	486d      	ldr	r0, [pc, #436]	; (8006dc8 <Create_SDOTable_ObjDictionary+0x464>)
 8006c14:	f7ff fe80 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_STATE],  	UINT8_T);
 8006c18:	2101      	movs	r1, #1
 8006c1a:	486c      	ldr	r0, [pc, #432]	; (8006dcc <Create_SDOTable_ObjDictionary+0x468>)
 8006c1c:	f7ff fe7c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_GET_ROUTINE],  	UINT8_T);
 8006c20:	2101      	movs	r1, #1
 8006c22:	486b      	ldr	r0, [pc, #428]	; (8006dd0 <Create_SDOTable_ObjDictionary+0x46c>)
 8006c24:	f7ff fe78 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_SET_ROUTINE],  	UINT8_T);
 8006c28:	2101      	movs	r1, #1
 8006c2a:	486a      	ldr	r0, [pc, #424]	; (8006dd4 <Create_SDOTable_ObjDictionary+0x470>)
 8006c2c:	f7ff fe74 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_SYSMNGT] [SDO_ID_SYSMNGT_FOR_TEST],  		UINT16_T);
 8006c30:	2102      	movs	r1, #2
 8006c32:	4869      	ldr	r0, [pc, #420]	; (8006dd8 <Create_SDOTable_ObjDictionary+0x474>)
 8006c34:	f7ff fe70 	bl	8006918 <Assemble_SDO>


	/*EXTDEV Task*/
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_STATE],  		UINT8_T);
 8006c38:	2101      	movs	r1, #1
 8006c3a:	4868      	ldr	r0, [pc, #416]	; (8006ddc <Create_SDOTable_ObjDictionary+0x478>)
 8006c3c:	f7ff fe6c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_STATE],  		UINT8_T);
 8006c40:	2101      	movs	r1, #1
 8006c42:	4867      	ldr	r0, [pc, #412]	; (8006de0 <Create_SDOTable_ObjDictionary+0x47c>)
 8006c44:	f7ff fe68 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_GET_ROUTINE],  	UINT8_T);
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4866      	ldr	r0, [pc, #408]	; (8006de4 <Create_SDOTable_ObjDictionary+0x480>)
 8006c4c:	f7ff fe64 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_SET_ROUTINE],  	UINT8_T);
 8006c50:	2101      	movs	r1, #1
 8006c52:	4865      	ldr	r0, [pc, #404]	; (8006de8 <Create_SDOTable_ObjDictionary+0x484>)
 8006c54:	f7ff fe60 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_LENGTH],  	FLOAT32_T);
 8006c58:	2107      	movs	r1, #7
 8006c5a:	4864      	ldr	r0, [pc, #400]	; (8006dec <Create_SDOTable_ObjDictionary+0x488>)
 8006c5c:	f7ff fe5c 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_DC_SET_DIRECT],  	UINT8_T);
 8006c60:	2101      	movs	r1, #1
 8006c62:	4863      	ldr	r0, [pc, #396]	; (8006df0 <Create_SDOTable_ObjDictionary+0x48c>)
 8006c64:	f7ff fe58 	bl	8006918 <Assemble_SDO>
	Assemble_SDO( &SDO_Table [TASK_ID_EXTDEV] [SDO_ID_EXTDEV_FOR_TEST],  		INT16_T);
 8006c68:	2105      	movs	r1, #5
 8006c6a:	4862      	ldr	r0, [pc, #392]	; (8006df4 <Create_SDOTable_ObjDictionary+0x490>)
 8006c6c:	f7ff fe54 	bl	8006918 <Assemble_SDO>
}
 8006c70:	bf00      	nop
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	240001f8 	.word	0x240001f8
 8006c78:	240001f9 	.word	0x240001f9
 8006c7c:	240001fa 	.word	0x240001fa
 8006c80:	240001fb 	.word	0x240001fb
 8006c84:	240001fc 	.word	0x240001fc
 8006c88:	240001fd 	.word	0x240001fd
 8006c8c:	240001fe 	.word	0x240001fe
 8006c90:	240001ff 	.word	0x240001ff
 8006c94:	24000200 	.word	0x24000200
 8006c98:	24000201 	.word	0x24000201
 8006c9c:	24000202 	.word	0x24000202
 8006ca0:	24000203 	.word	0x24000203
 8006ca4:	24000204 	.word	0x24000204
 8006ca8:	24000205 	.word	0x24000205
 8006cac:	24000206 	.word	0x24000206
 8006cb0:	24000207 	.word	0x24000207
 8006cb4:	24000208 	.word	0x24000208
 8006cb8:	24000209 	.word	0x24000209
 8006cbc:	2400020a 	.word	0x2400020a
 8006cc0:	2400020b 	.word	0x2400020b
 8006cc4:	2400020c 	.word	0x2400020c
 8006cc8:	2400020d 	.word	0x2400020d
 8006ccc:	2400020e 	.word	0x2400020e
 8006cd0:	2400020f 	.word	0x2400020f
 8006cd4:	24000210 	.word	0x24000210
 8006cd8:	24000211 	.word	0x24000211
 8006cdc:	24000212 	.word	0x24000212
 8006ce0:	24000234 	.word	0x24000234
 8006ce4:	24000235 	.word	0x24000235
 8006ce8:	24000236 	.word	0x24000236
 8006cec:	24000237 	.word	0x24000237
 8006cf0:	24000238 	.word	0x24000238
 8006cf4:	24000239 	.word	0x24000239
 8006cf8:	2400023a 	.word	0x2400023a
 8006cfc:	2400023b 	.word	0x2400023b
 8006d00:	2400023c 	.word	0x2400023c
 8006d04:	2400023d 	.word	0x2400023d
 8006d08:	2400023e 	.word	0x2400023e
 8006d0c:	24000240 	.word	0x24000240
 8006d10:	24000241 	.word	0x24000241
 8006d14:	24000242 	.word	0x24000242
 8006d18:	24000243 	.word	0x24000243
 8006d1c:	24000244 	.word	0x24000244
 8006d20:	24000245 	.word	0x24000245
 8006d24:	24000246 	.word	0x24000246
 8006d28:	24000247 	.word	0x24000247
 8006d2c:	24000248 	.word	0x24000248
 8006d30:	24000249 	.word	0x24000249
 8006d34:	2400024a 	.word	0x2400024a
 8006d38:	2400024b 	.word	0x2400024b
 8006d3c:	2400024c 	.word	0x2400024c
 8006d40:	2400024d 	.word	0x2400024d
 8006d44:	2400024e 	.word	0x2400024e
 8006d48:	2400024f 	.word	0x2400024f
 8006d4c:	24000250 	.word	0x24000250
 8006d50:	24000251 	.word	0x24000251
 8006d54:	24000252 	.word	0x24000252
 8006d58:	24000253 	.word	0x24000253
 8006d5c:	24000254 	.word	0x24000254
 8006d60:	24000255 	.word	0x24000255
 8006d64:	24000256 	.word	0x24000256
 8006d68:	24000257 	.word	0x24000257
 8006d6c:	24000258 	.word	0x24000258
 8006d70:	24000259 	.word	0x24000259
 8006d74:	2400025a 	.word	0x2400025a
 8006d78:	2400025b 	.word	0x2400025b
 8006d7c:	2400025c 	.word	0x2400025c
 8006d80:	2400025d 	.word	0x2400025d
 8006d84:	2400025e 	.word	0x2400025e
 8006d88:	2400025f 	.word	0x2400025f
 8006d8c:	24000264 	.word	0x24000264
 8006d90:	24000265 	.word	0x24000265
 8006d94:	24000270 	.word	0x24000270
 8006d98:	24000271 	.word	0x24000271
 8006d9c:	24000272 	.word	0x24000272
 8006da0:	24000273 	.word	0x24000273
 8006da4:	24000274 	.word	0x24000274
 8006da8:	24000275 	.word	0x24000275
 8006dac:	24000276 	.word	0x24000276
 8006db0:	24000277 	.word	0x24000277
 8006db4:	240002ac 	.word	0x240002ac
 8006db8:	240002ad 	.word	0x240002ad
 8006dbc:	240002ae 	.word	0x240002ae
 8006dc0:	240002af 	.word	0x240002af
 8006dc4:	240002b0 	.word	0x240002b0
 8006dc8:	240002e8 	.word	0x240002e8
 8006dcc:	240002e9 	.word	0x240002e9
 8006dd0:	240002ea 	.word	0x240002ea
 8006dd4:	240002eb 	.word	0x240002eb
 8006dd8:	240002ec 	.word	0x240002ec
 8006ddc:	24000324 	.word	0x24000324
 8006de0:	24000325 	.word	0x24000325
 8006de4:	24000326 	.word	0x24000326
 8006de8:	24000327 	.word	0x24000327
 8006dec:	24000328 	.word	0x24000328
 8006df0:	24000329 	.word	0x24000329
 8006df4:	2400032a 	.word	0x2400032a

08006df8 <Create_PDOTable_ObjDictionary>:


void Create_PDOTable_ObjDictionary()
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
	//**************************************************************************************************//
	//							   |	  Task_ID	  |				PDO_ID				| DATA_TYPE | #_of_DATA //
	//**************************************************************************************************//
	/*LOWLEVEL Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_CURRENT],  			UINT16_T, 	 	3);
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	2102      	movs	r1, #2
 8006e00:	48bd      	ldr	r0, [pc, #756]	; (80070f8 <Create_PDOTable_ObjDictionary+0x300>)
 8006e02:	f7ff fd9a 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PHASES_VOLTAGE],  			UINT16_T,  		3);
 8006e06:	2203      	movs	r2, #3
 8006e08:	2102      	movs	r1, #2
 8006e0a:	48bc      	ldr	r0, [pc, #752]	; (80070fc <Create_PDOTable_ObjDictionary+0x304>)
 8006e0c:	f7ff fd95 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_POSITION],  					FLOAT32_T,  	1);
 8006e10:	2201      	movs	r2, #1
 8006e12:	2107      	movs	r1, #7
 8006e14:	48ba      	ldr	r0, [pc, #744]	; (8007100 <Create_PDOTable_ObjDictionary+0x308>)
 8006e16:	f7ff fd90 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VELOCITY],  					INT32_T,  		2);
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	2106      	movs	r1, #6
 8006e1e:	48b9      	ldr	r0, [pc, #740]	; (8007104 <Create_PDOTable_ObjDictionary+0x30c>)
 8006e20:	f7ff fd8b 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CLARKE_OUT],  				INT32_T,  		2);
 8006e24:	2202      	movs	r2, #2
 8006e26:	2106      	movs	r1, #6
 8006e28:	48b7      	ldr	r0, [pc, #732]	; (8007108 <Create_PDOTable_ObjDictionary+0x310>)
 8006e2a:	f7ff fd86 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PARK_OUT],  					FLOAT32_T,  	3);
 8006e2e:	2203      	movs	r2, #3
 8006e30:	2107      	movs	r1, #7
 8006e32:	48b6      	ldr	r0, [pc, #728]	; (800710c <Create_PDOTable_ObjDictionary+0x314>)
 8006e34:	f7ff fd81 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_VOLTAGE_IN],	    			FLOAT32_T,  	3);
 8006e38:	2203      	movs	r2, #3
 8006e3a:	2107      	movs	r1, #7
 8006e3c:	48b4      	ldr	r0, [pc, #720]	; (8007110 <Create_PDOTable_ObjDictionary+0x318>)
 8006e3e:	f7ff fd7c 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ELEC_ANGLE],	    			UINT16_T,  		1);
 8006e42:	2201      	movs	r2, #1
 8006e44:	2102      	movs	r1, #2
 8006e46:	48b3      	ldr	r0, [pc, #716]	; (8007114 <Create_PDOTable_ObjDictionary+0x31c>)
 8006e48:	f7ff fd77 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_PRBS_DATA],	    			FLOAT32_T, 		2);
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	2107      	movs	r1, #7
 8006e50:	48b1      	ldr	r0, [pc, #708]	; (8007118 <Create_PDOTable_ObjDictionary+0x320>)
 8006e52:	f7ff fd72 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_RAW_CURRENT],	    			INT32_T,  		3);
 8006e56:	2203      	movs	r2, #3
 8006e58:	2106      	movs	r1, #6
 8006e5a:	48b0      	ldr	r0, [pc, #704]	; (800711c <Create_PDOTable_ObjDictionary+0x324>)
 8006e5c:	f7ff fd6d 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_KF_CURRENT],	    			FLOAT32_T, 		3);
 8006e60:	2203      	movs	r2, #3
 8006e62:	2107      	movs	r1, #7
 8006e64:	48ae      	ldr	r0, [pc, #696]	; (8007120 <Create_PDOTable_ObjDictionary+0x328>)
 8006e66:	f7ff fd68 	bl	800693a <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_TOTAL_CURRENT_INPUT],			FLOAT32_T, 		1);
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	2107      	movs	r1, #7
 8006e6e:	48ad      	ldr	r0, [pc, #692]	; (8007124 <Create_PDOTable_ObjDictionary+0x32c>)
 8006e70:	f7ff fd63 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_CURRENT_OUTPUT],  			FLOAT32_T,  	1);
 8006e74:	2201      	movs	r2, #1
 8006e76:	2107      	movs	r1, #7
 8006e78:	48ab      	ldr	r0, [pc, #684]	; (8007128 <Create_PDOTable_ObjDictionary+0x330>)
 8006e7a:	f7ff fd5e 	bl	800693a <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_AUXILIARY_INPUT],  			FLOAT32_T,  	1);
 8006e7e:	2201      	movs	r2, #1
 8006e80:	2107      	movs	r1, #7
 8006e82:	48aa      	ldr	r0, [pc, #680]	; (800712c <Create_PDOTable_ObjDictionary+0x334>)
 8006e84:	f7ff fd59 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_LOW_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 8006e88:	2201      	movs	r2, #1
 8006e8a:	2107      	movs	r1, #7
 8006e8c:	48a8      	ldr	r0, [pc, #672]	; (8007130 <Create_PDOTable_ObjDictionary+0x338>)
 8006e8e:	f7ff fd54 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_FRICTION_COMPENSATOR_INPUT],  FLOAT32_T,  	1);
 8006e92:	2201      	movs	r2, #1
 8006e94:	2107      	movs	r1, #7
 8006e96:	48a7      	ldr	r0, [pc, #668]	; (8007134 <Create_PDOTable_ObjDictionary+0x33c>)
 8006e98:	f7ff fd4f 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_ID_PROCESS_INPUT],		FLOAT32_T, 		1);
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	2107      	movs	r1, #7
 8006ea0:	48a5      	ldr	r0, [pc, #660]	; (8007138 <Create_PDOTable_ObjDictionary+0x340>)
 8006ea2:	f7ff fd4a 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_IRC_INPUT],					FLOAT32_T, 		1);
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	2107      	movs	r1, #7
 8006eaa:	48a4      	ldr	r0, [pc, #656]	; (800713c <Create_PDOTable_ObjDictionary+0x344>)
 8006eac:	f7ff fd45 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_MID_CTRL_INPUT],  			FLOAT32_T,  	1);
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	2107      	movs	r1, #7
 8006eb4:	48a2      	ldr	r0, [pc, #648]	; (8007140 <Create_PDOTable_ObjDictionary+0x348>)
 8006eb6:	f7ff fd40 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_ANALYZER_INPUT],				FLOAT32_T, 		1);
 8006eba:	2201      	movs	r2, #1
 8006ebc:	2107      	movs	r1, #7
 8006ebe:	48a1      	ldr	r0, [pc, #644]	; (8007144 <Create_PDOTable_ObjDictionary+0x34c>)
 8006ec0:	f7ff fd3b 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_LOWLEVEL] [PDO_ID_LOWLEVEL_COMMUTATION_STEP],			UINT8_T, 		1);
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	489f      	ldr	r0, [pc, #636]	; (8007148 <Create_PDOTable_ObjDictionary+0x350>)
 8006eca:	f7ff fd36 	bl	800693a <Assemble_PDO>


	/*Joint Task*/
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_LOOP_CNT],			UINT32_T, 		1);
 8006ece:	2201      	movs	r2, #1
 8006ed0:	2103      	movs	r1, #3
 8006ed2:	489e      	ldr	r0, [pc, #632]	; (800714c <Create_PDOTable_ObjDictionary+0x354>)
 8006ed4:	f7ff fd31 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_POSITION],  		FLOAT32_T,  	1);
 8006ed8:	2201      	movs	r2, #1
 8006eda:	2107      	movs	r1, #7
 8006edc:	489c      	ldr	r0, [pc, #624]	; (8007150 <Create_PDOTable_ObjDictionary+0x358>)
 8006ede:	f7ff fd2c 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_REF_VELOCITY],  		FLOAT32_T,  	1);
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	2107      	movs	r1, #7
 8006ee6:	489b      	ldr	r0, [pc, #620]	; (8007154 <Create_PDOTable_ObjDictionary+0x35c>)
 8006ee8:	f7ff fd27 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_POSITION], 	FLOAT32_T, 		1);
 8006eec:	2201      	movs	r2, #1
 8006eee:	2107      	movs	r1, #7
 8006ef0:	4899      	ldr	r0, [pc, #612]	; (8007158 <Create_PDOTable_ObjDictionary+0x360>)
 8006ef2:	f7ff fd22 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ACTUAL_VELOCITY_RAW], FLOAT32_T,  	1);
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	2107      	movs	r1, #7
 8006efa:	4898      	ldr	r0, [pc, #608]	; (800715c <Create_PDOTable_ObjDictionary+0x364>)
 8006efc:	f7ff fd1d 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_SYSTEM_ID_SBS_FREQ],	FLOAT32_T, 		1);
 8006f00:	2201      	movs	r2, #1
 8006f02:	2107      	movs	r1, #7
 8006f04:	4896      	ldr	r0, [pc, #600]	; (8007160 <Create_PDOTable_ObjDictionary+0x368>)
 8006f06:	f7ff fd18 	bl	800693a <Assemble_PDO>

	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_IMP_INPUT], 					FLOAT32_T,  	1);
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	2107      	movs	r1, #7
 8006f0e:	4895      	ldr	r0, [pc, #596]	; (8007164 <Create_PDOTable_ObjDictionary+0x36c>)
 8006f10:	f7ff fd13 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_POS_PID_CTRL_INPUT], 			FLOAT32_T,  	1);
 8006f14:	2201      	movs	r2, #1
 8006f16:	2107      	movs	r1, #7
 8006f18:	4893      	ldr	r0, [pc, #588]	; (8007168 <Create_PDOTable_ObjDictionary+0x370>)
 8006f1a:	f7ff fd0e 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VEL_PID_CTRL_INPUT],			FLOAT32_T, 		1);
 8006f1e:	2201      	movs	r2, #1
 8006f20:	2107      	movs	r1, #7
 8006f22:	4892      	ldr	r0, [pc, #584]	; (800716c <Create_PDOTable_ObjDictionary+0x374>)
 8006f24:	f7ff fd09 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VSD_INPUT],					FLOAT32_T, 		1);
 8006f28:	2201      	movs	r2, #1
 8006f2a:	2107      	movs	r1, #7
 8006f2c:	4890      	ldr	r0, [pc, #576]	; (8007170 <Create_PDOTable_ObjDictionary+0x378>)
 8006f2e:	f7ff fd04 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_UNIT_TRAJECTORY_BUFF_COUNT],	FLOAT32_T, 		1);
 8006f32:	2201      	movs	r2, #1
 8006f34:	2107      	movs	r1, #7
 8006f36:	488f      	ldr	r0, [pc, #572]	; (8007174 <Create_PDOTable_ObjDictionary+0x37c>)
 8006f38:	f7ff fcff 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_TORQUE_TRAJECTORY_INPUT],		FLOAT32_T, 		1);
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	2107      	movs	r1, #7
 8006f40:	488d      	ldr	r0, [pc, #564]	; (8007178 <Create_PDOTable_ObjDictionary+0x380>)
 8006f42:	f7ff fcfa 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_ABS_POSITION],				FLOAT32_T, 		1);
 8006f46:	2201      	movs	r2, #1
 8006f48:	2107      	movs	r1, #7
 8006f4a:	488c      	ldr	r0, [pc, #560]	; (800717c <Create_PDOTable_ObjDictionary+0x384>)
 8006f4c:	f7ff fcf5 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_DISTURABNCE],				FLOAT32_T, 		1);
 8006f50:	2201      	movs	r2, #1
 8006f52:	2107      	movs	r1, #7
 8006f54:	488a      	ldr	r0, [pc, #552]	; (8007180 <Create_PDOTable_ObjDictionary+0x388>)
 8006f56:	f7ff fcf0 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_DOB_INPUT],					FLOAT32_T, 		1);
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	2107      	movs	r1, #7
 8006f5e:	4889      	ldr	r0, [pc, #548]	; (8007184 <Create_PDOTable_ObjDictionary+0x38c>)
 8006f60:	f7ff fceb 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_FF_INPUT],					FLOAT32_T, 		1);
 8006f64:	2201      	movs	r2, #1
 8006f66:	2107      	movs	r1, #7
 8006f68:	4887      	ldr	r0, [pc, #540]	; (8007188 <Create_PDOTable_ObjDictionary+0x390>)
 8006f6a:	f7ff fce6 	bl	800693a <Assemble_PDO>
	Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MIDLEVEL] [PDO_ID_MIDLEVEL_VELOCITY_ESTIMATED],			FLOAT32_T, 		1);
 8006f6e:	2201      	movs	r2, #1
 8006f70:	2107      	movs	r1, #7
 8006f72:	4886      	ldr	r0, [pc, #536]	; (800718c <Create_PDOTable_ObjDictionary+0x394>)
 8006f74:	f7ff fce1 	bl	800693a <Assemble_PDO>



	/*COMM Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST1],  			INT32_T,  	1);
 8006f78:	2201      	movs	r2, #1
 8006f7a:	2106      	movs	r1, #6
 8006f7c:	4884      	ldr	r0, [pc, #528]	; (8007190 <Create_PDOTable_ObjDictionary+0x398>)
 8006f7e:	f7ff fcdc 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST2],  			INT32_T,  	1);
 8006f82:	2201      	movs	r2, #1
 8006f84:	2106      	movs	r1, #6
 8006f86:	4883      	ldr	r0, [pc, #524]	; (8007194 <Create_PDOTable_ObjDictionary+0x39c>)
 8006f88:	f7ff fcd7 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST3],  			INT32_T,  	1);
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2106      	movs	r1, #6
 8006f90:	4881      	ldr	r0, [pc, #516]	; (8007198 <Create_PDOTable_ObjDictionary+0x3a0>)
 8006f92:	f7ff fcd2 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST4],  			INT32_T,  	1);
 8006f96:	2201      	movs	r2, #1
 8006f98:	2106      	movs	r1, #6
 8006f9a:	4880      	ldr	r0, [pc, #512]	; (800719c <Create_PDOTable_ObjDictionary+0x3a4>)
 8006f9c:	f7ff fccd 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST5],  			INT32_T,  	1);
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	2106      	movs	r1, #6
 8006fa4:	487e      	ldr	r0, [pc, #504]	; (80071a0 <Create_PDOTable_ObjDictionary+0x3a8>)
 8006fa6:	f7ff fcc8 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST6],  			INT32_T,  	1);
 8006faa:	2201      	movs	r2, #1
 8006fac:	2106      	movs	r1, #6
 8006fae:	487d      	ldr	r0, [pc, #500]	; (80071a4 <Create_PDOTable_ObjDictionary+0x3ac>)
 8006fb0:	f7ff fcc3 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST7],  			INT32_T,  	1);
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	2106      	movs	r1, #6
 8006fb8:	487b      	ldr	r0, [pc, #492]	; (80071a8 <Create_PDOTable_ObjDictionary+0x3b0>)
 8006fba:	f7ff fcbe 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST8],  			INT32_T,  	1);
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	2106      	movs	r1, #6
 8006fc2:	487a      	ldr	r0, [pc, #488]	; (80071ac <Create_PDOTable_ObjDictionary+0x3b4>)
 8006fc4:	f7ff fcb9 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST9],  			INT32_T,  	1);
 8006fc8:	2201      	movs	r2, #1
 8006fca:	2106      	movs	r1, #6
 8006fcc:	4878      	ldr	r0, [pc, #480]	; (80071b0 <Create_PDOTable_ObjDictionary+0x3b8>)
 8006fce:	f7ff fcb4 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_MSG] [PDO_ID_MSG_TEST10],  			INT32_T,  	1);
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	2106      	movs	r1, #6
 8006fd6:	4877      	ldr	r0, [pc, #476]	; (80071b4 <Create_PDOTable_ObjDictionary+0x3bc>)
 8006fd8:	f7ff fcaf 	bl	800693a <Assemble_PDO>

	/*IMU Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_X],  			FLOAT32_T,  	1);
 8006fdc:	2201      	movs	r2, #1
 8006fde:	2107      	movs	r1, #7
 8006fe0:	4875      	ldr	r0, [pc, #468]	; (80071b8 <Create_PDOTable_ObjDictionary+0x3c0>)
 8006fe2:	f7ff fcaa 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Y],  			FLOAT32_T,  	1);
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	2107      	movs	r1, #7
 8006fea:	4874      	ldr	r0, [pc, #464]	; (80071bc <Create_PDOTable_ObjDictionary+0x3c4>)
 8006fec:	f7ff fca5 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_ACC_Z],  			FLOAT32_T,  	1);
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	2107      	movs	r1, #7
 8006ff4:	4872      	ldr	r0, [pc, #456]	; (80071c0 <Create_PDOTable_ObjDictionary+0x3c8>)
 8006ff6:	f7ff fca0 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_X],  			FLOAT32_T,  	1);
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	2107      	movs	r1, #7
 8006ffe:	4871      	ldr	r0, [pc, #452]	; (80071c4 <Create_PDOTable_ObjDictionary+0x3cc>)
 8007000:	f7ff fc9b 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Y],  			FLOAT32_T,  	1);
 8007004:	2201      	movs	r2, #1
 8007006:	2107      	movs	r1, #7
 8007008:	486f      	ldr	r0, [pc, #444]	; (80071c8 <Create_PDOTable_ObjDictionary+0x3d0>)
 800700a:	f7ff fc96 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GYR_Z],  			FLOAT32_T,  	1);
 800700e:	2201      	movs	r2, #1
 8007010:	2107      	movs	r1, #7
 8007012:	486e      	ldr	r0, [pc, #440]	; (80071cc <Create_PDOTable_ObjDictionary+0x3d4>)
 8007014:	f7ff fc91 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_WALKING_STATE],  	FLOAT32_T,  	1);
 8007018:	2201      	movs	r2, #1
 800701a:	2107      	movs	r1, #7
 800701c:	486c      	ldr	r0, [pc, #432]	; (80071d0 <Create_PDOTable_ObjDictionary+0x3d8>)
 800701e:	f7ff fc8c 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_GAIT_PHASE],  		FLOAT32_T,  	1);
 8007022:	2201      	movs	r2, #1
 8007024:	2107      	movs	r1, #7
 8007026:	486b      	ldr	r0, [pc, #428]	; (80071d4 <Create_PDOTable_ObjDictionary+0x3dc>)
 8007028:	f7ff fc87 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_X],  			FLOAT32_T,  	1);
 800702c:	2201      	movs	r2, #1
 800702e:	2107      	movs	r1, #7
 8007030:	4869      	ldr	r0, [pc, #420]	; (80071d8 <Create_PDOTable_ObjDictionary+0x3e0>)
 8007032:	f7ff fc82 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Y],  			FLOAT32_T,  	1);
 8007036:	2201      	movs	r2, #1
 8007038:	2107      	movs	r1, #7
 800703a:	4868      	ldr	r0, [pc, #416]	; (80071dc <Create_PDOTable_ObjDictionary+0x3e4>)
 800703c:	f7ff fc7d 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_MAG_Z],  			FLOAT32_T,  	1);
 8007040:	2201      	movs	r2, #1
 8007042:	2107      	movs	r1, #7
 8007044:	4866      	ldr	r0, [pc, #408]	; (80071e0 <Create_PDOTable_ObjDictionary+0x3e8>)
 8007046:	f7ff fc78 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_P],  		FLOAT32_T,  	1);
 800704a:	2201      	movs	r2, #1
 800704c:	2107      	movs	r1, #7
 800704e:	4865      	ldr	r0, [pc, #404]	; (80071e4 <Create_PDOTable_ObjDictionary+0x3ec>)
 8007050:	f7ff fc73 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_TENSION_D],  		FLOAT32_T,  	1);
 8007054:	2201      	movs	r2, #1
 8007056:	2107      	movs	r1, #7
 8007058:	4863      	ldr	r0, [pc, #396]	; (80071e8 <Create_PDOTable_ObjDictionary+0x3f0>)
 800705a:	f7ff fc6e 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC],  		FLOAT32_T,  	1);
 800705e:	2201      	movs	r2, #1
 8007060:	2107      	movs	r1, #7
 8007062:	4862      	ldr	r0, [pc, #392]	; (80071ec <Create_PDOTable_ObjDictionary+0x3f4>)
 8007064:	f7ff fc69 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR],  		FLOAT32_T,  	1);
 8007068:	2201      	movs	r2, #1
 800706a:	2107      	movs	r1, #7
 800706c:	4860      	ldr	r0, [pc, #384]	; (80071f0 <Create_PDOTable_ObjDictionary+0x3f8>)
 800706e:	f7ff fc64 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_ACC_FILTERED], FLOAT32_T,  	1);
 8007072:	2201      	movs	r2, #1
 8007074:	2107      	movs	r1, #7
 8007076:	485f      	ldr	r0, [pc, #380]	; (80071f4 <Create_PDOTable_ObjDictionary+0x3fc>)
 8007078:	f7ff fc5f 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_IMU_DEG_GYR_FILTERED], FLOAT32_T,  	1);
 800707c:	2201      	movs	r2, #1
 800707e:	2107      	movs	r1, #7
 8007080:	485d      	ldr	r0, [pc, #372]	; (80071f8 <Create_PDOTable_ObjDictionary+0x400>)
 8007082:	f7ff fc5a 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_IMU] [PDO_ID_DEG_TVCF],  			FLOAT32_T,  	1);
 8007086:	2201      	movs	r2, #1
 8007088:	2107      	movs	r1, #7
 800708a:	485c      	ldr	r0, [pc, #368]	; (80071fc <Create_PDOTable_ObjDictionary+0x404>)
 800708c:	f7ff fc55 	bl	800693a <Assemble_PDO>


	/*SYSMNGT Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_VOLT],  			FLOAT32_T,  	1);
 8007090:	2201      	movs	r2, #1
 8007092:	2107      	movs	r1, #7
 8007094:	485a      	ldr	r0, [pc, #360]	; (8007200 <Create_PDOTable_ObjDictionary+0x408>)
 8007096:	f7ff fc50 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_CURR],  			FLOAT32_T,  	1);
 800709a:	2201      	movs	r2, #1
 800709c:	2107      	movs	r1, #7
 800709e:	4859      	ldr	r0, [pc, #356]	; (8007204 <Create_PDOTable_ObjDictionary+0x40c>)
 80070a0:	f7ff fc4b 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_SYSMNGT] [PDO_ID_SYSTEM_TEMP],  			FLOAT32_T,  	1);
 80070a4:	2201      	movs	r2, #1
 80070a6:	2107      	movs	r1, #7
 80070a8:	4857      	ldr	r0, [pc, #348]	; (8007208 <Create_PDOTable_ObjDictionary+0x410>)
 80070aa:	f7ff fc46 	bl	800693a <Assemble_PDO>

	/*EXTDEV Task*/
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_FSR],  				FLOAT32_T,  	1);
 80070ae:	2201      	movs	r2, #1
 80070b0:	2107      	movs	r1, #7
 80070b2:	4856      	ldr	r0, [pc, #344]	; (800720c <Create_PDOTable_ObjDictionary+0x414>)
 80070b4:	f7ff fc41 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_LP],  				FLOAT32_T,  	1);
 80070b8:	2201      	movs	r2, #1
 80070ba:	2107      	movs	r1, #7
 80070bc:	4854      	ldr	r0, [pc, #336]	; (8007210 <Create_PDOTable_ObjDictionary+0x418>)
 80070be:	f7ff fc3c 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_REF],  	FLOAT32_T,  	1);
 80070c2:	2201      	movs	r2, #1
 80070c4:	2107      	movs	r1, #7
 80070c6:	4853      	ldr	r0, [pc, #332]	; (8007214 <Create_PDOTable_ObjDictionary+0x41c>)
 80070c8:	f7ff fc37 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_CMD],  	UINT8_T,  		1);
 80070cc:	2201      	movs	r2, #1
 80070ce:	2101      	movs	r1, #1
 80070d0:	4851      	ldr	r0, [pc, #324]	; (8007218 <Create_PDOTable_ObjDictionary+0x420>)
 80070d2:	f7ff fc32 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_LENGTH_ACT],  	FLOAT32_T,  	1);
 80070d6:	2201      	movs	r2, #1
 80070d8:	2107      	movs	r1, #7
 80070da:	4850      	ldr	r0, [pc, #320]	; (800721c <Create_PDOTable_ObjDictionary+0x424>)
 80070dc:	f7ff fc2d 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_DIRECTION_ACT],  	UINT8_T,  		1);
 80070e0:	2201      	movs	r2, #1
 80070e2:	2101      	movs	r1, #1
 80070e4:	484e      	ldr	r0, [pc, #312]	; (8007220 <Create_PDOTable_ObjDictionary+0x428>)
 80070e6:	f7ff fc28 	bl	800693a <Assemble_PDO>
	 Assemble_PDO( (PDOinfo*)PDO_Table [TASK_ID_EXTDEV] [PDO_ID_EXTDEV_DC_BUTTON_STATE],  	UINT8_T,  		1);
 80070ea:	2201      	movs	r2, #1
 80070ec:	2101      	movs	r1, #1
 80070ee:	484d      	ldr	r0, [pc, #308]	; (8007224 <Create_PDOTable_ObjDictionary+0x42c>)
 80070f0:	f7ff fc23 	bl	800693a <Assemble_PDO>
}
 80070f4:	bf00      	nop
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	2400d210 	.word	0x2400d210
 80070fc:	2400d212 	.word	0x2400d212
 8007100:	2400d214 	.word	0x2400d214
 8007104:	2400d216 	.word	0x2400d216
 8007108:	2400d218 	.word	0x2400d218
 800710c:	2400d21a 	.word	0x2400d21a
 8007110:	2400d21c 	.word	0x2400d21c
 8007114:	2400d21e 	.word	0x2400d21e
 8007118:	2400d220 	.word	0x2400d220
 800711c:	2400d222 	.word	0x2400d222
 8007120:	2400d224 	.word	0x2400d224
 8007124:	2400d226 	.word	0x2400d226
 8007128:	2400d228 	.word	0x2400d228
 800712c:	2400d22a 	.word	0x2400d22a
 8007130:	2400d22c 	.word	0x2400d22c
 8007134:	2400d22e 	.word	0x2400d22e
 8007138:	2400d230 	.word	0x2400d230
 800713c:	2400d232 	.word	0x2400d232
 8007140:	2400d234 	.word	0x2400d234
 8007144:	2400d236 	.word	0x2400d236
 8007148:	2400d238 	.word	0x2400d238
 800714c:	2400d24c 	.word	0x2400d24c
 8007150:	2400d24e 	.word	0x2400d24e
 8007154:	2400d250 	.word	0x2400d250
 8007158:	2400d252 	.word	0x2400d252
 800715c:	2400d254 	.word	0x2400d254
 8007160:	2400d256 	.word	0x2400d256
 8007164:	2400d258 	.word	0x2400d258
 8007168:	2400d25a 	.word	0x2400d25a
 800716c:	2400d25c 	.word	0x2400d25c
 8007170:	2400d25e 	.word	0x2400d25e
 8007174:	2400d260 	.word	0x2400d260
 8007178:	2400d262 	.word	0x2400d262
 800717c:	2400d264 	.word	0x2400d264
 8007180:	2400d266 	.word	0x2400d266
 8007184:	2400d268 	.word	0x2400d268
 8007188:	2400d26a 	.word	0x2400d26a
 800718c:	2400d26c 	.word	0x2400d26c
 8007190:	2400d288 	.word	0x2400d288
 8007194:	2400d28a 	.word	0x2400d28a
 8007198:	2400d28c 	.word	0x2400d28c
 800719c:	2400d28e 	.word	0x2400d28e
 80071a0:	2400d290 	.word	0x2400d290
 80071a4:	2400d292 	.word	0x2400d292
 80071a8:	2400d294 	.word	0x2400d294
 80071ac:	2400d296 	.word	0x2400d296
 80071b0:	2400d298 	.word	0x2400d298
 80071b4:	2400d29a 	.word	0x2400d29a
 80071b8:	2400d2c4 	.word	0x2400d2c4
 80071bc:	2400d2c6 	.word	0x2400d2c6
 80071c0:	2400d2c8 	.word	0x2400d2c8
 80071c4:	2400d2ca 	.word	0x2400d2ca
 80071c8:	2400d2cc 	.word	0x2400d2cc
 80071cc:	2400d2ce 	.word	0x2400d2ce
 80071d0:	2400d2d0 	.word	0x2400d2d0
 80071d4:	2400d2d2 	.word	0x2400d2d2
 80071d8:	2400d2d4 	.word	0x2400d2d4
 80071dc:	2400d2d6 	.word	0x2400d2d6
 80071e0:	2400d2d8 	.word	0x2400d2d8
 80071e4:	2400d2da 	.word	0x2400d2da
 80071e8:	2400d2dc 	.word	0x2400d2dc
 80071ec:	2400d2de 	.word	0x2400d2de
 80071f0:	2400d2e0 	.word	0x2400d2e0
 80071f4:	2400d2e2 	.word	0x2400d2e2
 80071f8:	2400d2e4 	.word	0x2400d2e4
 80071fc:	2400d2e6 	.word	0x2400d2e6
 8007200:	2400d300 	.word	0x2400d300
 8007204:	2400d302 	.word	0x2400d302
 8007208:	2400d304 	.word	0x2400d304
 800720c:	2400d33c 	.word	0x2400d33c
 8007210:	2400d33e 	.word	0x2400d33e
 8007214:	2400d340 	.word	0x2400d340
 8007218:	2400d342 	.word	0x2400d342
 800721c:	2400d344 	.word	0x2400d344
 8007220:	2400d346 	.word	0x2400d346
 8007224:	2400d348 	.word	0x2400d348

08007228 <Write_Reg_ICM20608G>:
{
    return t_obj->io.ReadReg(t_obj->addr, t_reg, t_data, t_size);
}

static ICM20608G Write_Reg_ICM20608G(ICM20608GObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 8007228:	b590      	push	{r4, r7, lr}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	607a      	str	r2, [r7, #4]
 8007232:	603b      	str	r3, [r7, #0]
 8007234:	460b      	mov	r3, r1
 8007236:	817b      	strh	r3, [r7, #10]
    return t_obj->io.WriteReg(t_obj->addr, t_reg, t_data, t_size);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	695c      	ldr	r4, [r3, #20]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8818      	ldrh	r0, [r3, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	8979      	ldrh	r1, [r7, #10]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	47a0      	blx	r4
 800724a:	4603      	mov	r3, r0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	bd90      	pop	{r4, r7, pc}

08007254 <Set_Reg_ICM20608G>:

static ICM20608G Set_Reg_ICM20608G(ICM20608GObject* t_obj, uint16_t t_reg, uint8_t* t_data, uint32_t t_size)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	607a      	str	r2, [r7, #4]
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	460b      	mov	r3, r1
 8007262:	817b      	strh	r3, [r7, #10]
	uint8_t t_res = e_ICM20608G_STATUS_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	75fb      	strb	r3, [r7, #23]
    t_res = Write_Reg_ICM20608G(t_obj, t_reg, t_data, t_size);
 8007268:	8979      	ldrh	r1, [r7, #10]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff ffda 	bl	8007228 <Write_Reg_ICM20608G>
 8007274:	4603      	mov	r3, r0
 8007276:	75fb      	strb	r3, [r7, #23]
    return t_res;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <Set_Ioctx_ICM20608G>:

ICM20608G Set_Ioctx_ICM20608G(ICM20608GObject* t_obj, ICM20608GIOctx* t_ioctx)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
    if (!t_obj || !t_ioctx->IsDevReady || !t_ioctx->ReadReg || !t_ioctx->WriteReg){
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00b      	beq.n	80072aa <Set_Ioctx_ICM20608G+0x28>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <Set_Ioctx_ICM20608G+0x28>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <Set_Ioctx_ICM20608G+0x28>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <Set_Ioctx_ICM20608G+0x2c>
        return e_ICM20608G_STATUS_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e018      	b.n	80072e0 <Set_Ioctx_ICM20608G+0x5e>
    }

    t_obj->io.Init       = t_ioctx->Init;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	605a      	str	r2, [r3, #4]
    t_obj->io.DeInit     = t_ioctx->DeInit;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	609a      	str	r2, [r3, #8]
    t_obj->io.IsDevReady = t_ioctx->IsDevReady;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60da      	str	r2, [r3, #12]
    t_obj->io.ReadReg    = t_ioctx->ReadReg;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	611a      	str	r2, [r3, #16]
    t_obj->io.WriteReg   = t_ioctx->WriteReg;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	615a      	str	r2, [r3, #20]
    t_obj->io.Wait       = t_ioctx->Wait;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	619a      	str	r2, [r3, #24]

    return e_ICM20608G_STATUS_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <Init_ICM20608G>:

ICM20608G Init_ICM20608G(ICM20608GObject* t_obj)			// Setting control register
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	static uint8_t t_res = e_ICM20608G_STATUS_OK;

    // Check Address
    t_res = e_ICM20608G_STATUS_ERROR;
 80072f4:	4b27      	ldr	r3, [pc, #156]	; (8007394 <Init_ICM20608G+0xa8>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	701a      	strb	r2, [r3, #0]
    t_obj->addr = ICM20608G_DEV_ADDR;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	22d2      	movs	r2, #210	; 0xd2
 80072fe:	801a      	strh	r2, [r3, #0]
    if (t_obj->io.IsDevReady(t_obj->addr) == 0){
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	8812      	ldrh	r2, [r2, #0]
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d102      	bne.n	8007318 <Init_ICM20608G+0x2c>
        t_res = e_ICM20608G_STATUS_OK;
 8007312:	4b20      	ldr	r3, [pc, #128]	; (8007394 <Init_ICM20608G+0xa8>)
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]
    }

    // Configure Control
    if (t_res == e_ICM20608G_STATUS_OK){
 8007318:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <Init_ICM20608G+0xa8>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d133      	bne.n	8007388 <Init_ICM20608G+0x9c>
        uint8_t conf_1 = ICM20608G_PWR_MGMT_1_ONE;
 8007320:	2300      	movs	r3, #0
 8007322:	73fb      	strb	r3, [r7, #15]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_PWR_MGMT_1, &conf_1, ICM20608G_CONTROL_SIZE);
 8007324:	f107 020f 	add.w	r2, r7, #15
 8007328:	2301      	movs	r3, #1
 800732a:	216b      	movs	r1, #107	; 0x6b
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff ff91 	bl	8007254 <Set_Reg_ICM20608G>
 8007332:	4603      	mov	r3, r0
 8007334:	461a      	mov	r2, r3
 8007336:	4b17      	ldr	r3, [pc, #92]	; (8007394 <Init_ICM20608G+0xa8>)
 8007338:	701a      	strb	r2, [r3, #0]
        uint8_t conf_2 = ICM20608G_PWR_MGMT_2_ONE;
 800733a:	2300      	movs	r3, #0
 800733c:	73bb      	strb	r3, [r7, #14]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_PWR_MGMT_2, &conf_2, ICM20608G_CONTROL_SIZE);
 800733e:	f107 020e 	add.w	r2, r7, #14
 8007342:	2301      	movs	r3, #1
 8007344:	216c      	movs	r1, #108	; 0x6c
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ff84 	bl	8007254 <Set_Reg_ICM20608G>
 800734c:	4603      	mov	r3, r0
 800734e:	461a      	mov	r2, r3
 8007350:	4b10      	ldr	r3, [pc, #64]	; (8007394 <Init_ICM20608G+0xa8>)
 8007352:	701a      	strb	r2, [r3, #0]
        uint8_t conf_3 = ICM20608G_GYR_CONFIG_ONE;
 8007354:	2308      	movs	r3, #8
 8007356:	737b      	strb	r3, [r7, #13]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_GYRO_CONFIG, &conf_3, ICM20608G_CONTROL_SIZE);
 8007358:	f107 020d 	add.w	r2, r7, #13
 800735c:	2301      	movs	r3, #1
 800735e:	211b      	movs	r1, #27
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff ff77 	bl	8007254 <Set_Reg_ICM20608G>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <Init_ICM20608G+0xa8>)
 800736c:	701a      	strb	r2, [r3, #0]
        uint8_t conf_4 = ICM20608G_ACC_CONFIG_ONE;
 800736e:	2308      	movs	r3, #8
 8007370:	733b      	strb	r3, [r7, #12]
        t_res = Set_Reg_ICM20608G(t_obj, ICM20608G_ACCEL_CONFIG, &conf_4, ICM20608G_CONTROL_SIZE);
 8007372:	f107 020c 	add.w	r2, r7, #12
 8007376:	2301      	movs	r3, #1
 8007378:	211c      	movs	r1, #28
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff ff6a 	bl	8007254 <Set_Reg_ICM20608G>
 8007380:	4603      	mov	r3, r0
 8007382:	461a      	mov	r2, r3
 8007384:	4b03      	ldr	r3, [pc, #12]	; (8007394 <Init_ICM20608G+0xa8>)
 8007386:	701a      	strb	r2, [r3, #0]
    }

    return t_res;
 8007388:	4b02      	ldr	r3, [pc, #8]	; (8007394 <Init_ICM20608G+0xa8>)
 800738a:	781b      	ldrb	r3, [r3, #0]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	24000099 	.word	0x24000099

08007398 <Get_Value_ICM20608G>:

ICM20608G Get_Value_ICM20608G(ICM20608GObject* t_obj)
{
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b08b      	sub	sp, #44	; 0x2c
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	uint8_t t_res = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t t_buff[14];

	t_res = t_obj->io.ReadReg(t_obj->addr, ICM20608G_ACCEL_XOUT_H, t_buff, 14);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691c      	ldr	r4, [r3, #16]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	8818      	ldrh	r0, [r3, #0]
 80073ae:	f107 020c 	add.w	r2, r7, #12
 80073b2:	230e      	movs	r3, #14
 80073b4:	213b      	movs	r1, #59	; 0x3b
 80073b6:	47a0      	blx	r4
 80073b8:	4603      	mov	r3, r0
 80073ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t t_Xacc = (int16_t)(t_buff[0]  << 8 | t_buff[1]);
 80073be:	7b3b      	ldrb	r3, [r7, #12]
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	b21a      	sxth	r2, r3
 80073c4:	7b7b      	ldrb	r3, [r7, #13]
 80073c6:	b21b      	sxth	r3, r3
 80073c8:	4313      	orrs	r3, r2
 80073ca:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t t_Yacc = (int16_t)(t_buff[2]  << 8 | t_buff[3]);
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	021b      	lsls	r3, r3, #8
 80073d0:	b21a      	sxth	r2, r3
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	b21b      	sxth	r3, r3
 80073d6:	4313      	orrs	r3, r2
 80073d8:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t t_Zacc = (int16_t)(t_buff[4]  << 8 | t_buff[5]);
 80073da:	7c3b      	ldrb	r3, [r7, #16]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	b21a      	sxth	r2, r3
 80073e0:	7c7b      	ldrb	r3, [r7, #17]
 80073e2:	b21b      	sxth	r3, r3
 80073e4:	4313      	orrs	r3, r2
 80073e6:	843b      	strh	r3, [r7, #32]
	int16_t t_Xgyr = (int16_t)(t_buff[8]  << 8 | t_buff[9]);
 80073e8:	7d3b      	ldrb	r3, [r7, #20]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	b21a      	sxth	r2, r3
 80073ee:	7d7b      	ldrb	r3, [r7, #21]
 80073f0:	b21b      	sxth	r3, r3
 80073f2:	4313      	orrs	r3, r2
 80073f4:	83fb      	strh	r3, [r7, #30]
	int16_t t_Ygyr = (int16_t)(t_buff[10] << 8 | t_buff[11]);
 80073f6:	7dbb      	ldrb	r3, [r7, #22]
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	b21a      	sxth	r2, r3
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	b21b      	sxth	r3, r3
 8007400:	4313      	orrs	r3, r2
 8007402:	83bb      	strh	r3, [r7, #28]
	int16_t t_Zgyr = (int16_t)(t_buff[12] << 8 | t_buff[13]);
 8007404:	7e3b      	ldrb	r3, [r7, #24]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	b21a      	sxth	r2, r3
 800740a:	7e7b      	ldrb	r3, [r7, #25]
 800740c:	b21b      	sxth	r3, r3
 800740e:	4313      	orrs	r3, r2
 8007410:	837b      	strh	r3, [r7, #26]

	/* NEED TO BE SCALED */
	t_obj->value.icm20608_acc_x = (float)(t_Xacc / 8192.0f);
 8007412:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800741e:	eddf 6a27 	vldr	s13, [pc, #156]	; 80074bc <Get_Value_ICM20608G+0x124>
 8007422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	edc3 7a07 	vstr	s15, [r3, #28]
	t_obj->value.icm20608_acc_y = (float)(t_Yacc / 8192.0f);
 800742c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007438:	eddf 6a20 	vldr	s13, [pc, #128]	; 80074bc <Get_Value_ICM20608G+0x124>
 800743c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	edc3 7a08 	vstr	s15, [r3, #32]
	t_obj->value.icm20608_acc_z = (float)(t_Zacc / 8192.0f);
 8007446:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007452:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80074bc <Get_Value_ICM20608G+0x124>
 8007456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	t_obj->value.icm20608_gyr_x = (float)(t_Xgyr / 65.5f); //65.5f
 8007460:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800746c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80074c0 <Get_Value_ICM20608G+0x128>
 8007470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	t_obj->value.icm20608_gyr_y = (float)(t_Ygyr / 65.5f);
 800747a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007486:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80074c0 <Get_Value_ICM20608G+0x128>
 800748a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	t_obj->value.icm20608_gyr_z = (float)(t_Zgyr / 65.5f);
 8007494:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074a0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80074c0 <Get_Value_ICM20608G+0x128>
 80074a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	return t_res;
 80074ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	372c      	adds	r7, #44	; 0x2c
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd90      	pop	{r4, r7, pc}
 80074ba:	bf00      	nop
 80074bc:	46000000 	.word	0x46000000
 80074c0:	42830000 	.word	0x42830000

080074c4 <IsDevReady_3Axis_IMU>:
#include "ioif_3axis_imu.h"

static HAL_StatusTypeDef IsDevReady_3Axis_IMU(uint16_t t_dev_addr)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	80fb      	strh	r3, [r7, #6]
	return IsDevReady_I2C3(t_dev_addr);
 80074ce:	88fb      	ldrh	r3, [r7, #6]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 f933 	bl	800773c <IsDevReady_I2C3>
 80074d6:	4603      	mov	r3, r0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <Read_3Axis_IMU>:

static HAL_StatusTypeDef Read_3Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60ba      	str	r2, [r7, #8]
 80074e8:	461a      	mov	r2, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	81fb      	strh	r3, [r7, #14]
 80074ee:	460b      	mov	r3, r1
 80074f0:	81bb      	strh	r3, [r7, #12]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]
	return Mem_Read_I2C3(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 80074f6:	89b9      	ldrh	r1, [r7, #12]
 80074f8:	89f8      	ldrh	r0, [r7, #14]
 80074fa:	88fb      	ldrh	r3, [r7, #6]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2201      	movs	r2, #1
 8007502:	f000 f9c3 	bl	800788c <Mem_Read_I2C3>
 8007506:	4603      	mov	r3, r0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <Write_3Axis_IMU>:

static HAL_StatusTypeDef Write_3Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af02      	add	r7, sp, #8
 8007516:	60ba      	str	r2, [r7, #8]
 8007518:	461a      	mov	r2, r3
 800751a:	4603      	mov	r3, r0
 800751c:	81fb      	strh	r3, [r7, #14]
 800751e:	460b      	mov	r3, r1
 8007520:	81bb      	strh	r3, [r7, #12]
 8007522:	4613      	mov	r3, r2
 8007524:	80fb      	strh	r3, [r7, #6]
	return Mem_Write_I2C3(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 8007526:	89b9      	ldrh	r1, [r7, #12]
 8007528:	89f8      	ldrh	r0, [r7, #14]
 800752a:	88fb      	ldrh	r3, [r7, #6]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2201      	movs	r2, #1
 8007532:	f000 f979 	bl	8007828 <Mem_Write_I2C3>
 8007536:	4603      	mov	r3, r0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <Init_3Axis_IMU>:

HAL_StatusTypeDef Init_3Axis_IMU(MagData* t_mag_data)
{
 8007540:	b5b0      	push	{r4, r5, r7, lr}
 8007542:	b08a      	sub	sp, #40	; 0x28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	uint8_t t_init_res = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	memset(t_mag_data, 0, sizeof(MagData));
 800754e:	220c      	movs	r2, #12
 8007550:	2100      	movs	r1, #0
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f003 fff2 	bl	800b53c <memset>

	BM1422AGMVIOctx ioctx = {
 8007558:	4b13      	ldr	r3, [pc, #76]	; (80075a8 <Init_3Axis_IMU+0x68>)
 800755a:	f107 040c 	add.w	r4, r7, #12
 800755e:	461d      	mov	r5, r3
 8007560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007564:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007568:	e884 0003 	stmia.w	r4, {r0, r1}
		Read_3Axis_IMU,
		Write_3Axis_IMU,
		NULL, 
	};

	t_init_res = Set_Ioctx_BM1422AGMV(&bm1422agmv_obj, &ioctx);
 800756c:	f107 030c 	add.w	r3, r7, #12
 8007570:	4619      	mov	r1, r3
 8007572:	480e      	ldr	r0, [pc, #56]	; (80075ac <Init_3Axis_IMU+0x6c>)
 8007574:	f7ff f8f5 	bl	8006762 <Set_Ioctx_BM1422AGMV>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Init_BM1422AGMV(&bm1422agmv_obj) != HAL_OK){
 800757e:	480b      	ldr	r0, [pc, #44]	; (80075ac <Init_3Axis_IMU+0x6c>)
 8007580:	f7ff f924 	bl	80067cc <Init_BM1422AGMV>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d008      	beq.n	800759c <Init_3Axis_IMU+0x5c>
		t_init_res = Init_BM1422AGMV(&bm1422agmv_obj);
 800758a:	4808      	ldr	r0, [pc, #32]	; (80075ac <Init_3Axis_IMU+0x6c>)
 800758c:	f7ff f91e 	bl	80067cc <Init_BM1422AGMV>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return t_init_res;
 8007596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800759a:	e001      	b.n	80075a0 <Init_3Axis_IMU+0x60>
	}

	return t_init_res;
 800759c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3728      	adds	r7, #40	; 0x28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bdb0      	pop	{r4, r5, r7, pc}
 80075a8:	0800d374 	.word	0x0800d374
 80075ac:	24003160 	.word	0x24003160

080075b0 <Get_Value_3Axis_IMU>:

HAL_StatusTypeDef Get_Value_3Axis_IMU(MagData* t_mag_data)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	uint8_t t_get_value_res = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	73fb      	strb	r3, [r7, #15]
	t_get_value_res = Get_Value_BM1422AGMV(&bm1422agmv_obj);
 80075bc:	4809      	ldr	r0, [pc, #36]	; (80075e4 <Get_Value_3Axis_IMU+0x34>)
 80075be:	f7ff f965 	bl	800688c <Get_Value_BM1422AGMV>
 80075c2:	4603      	mov	r3, r0
 80075c4:	73fb      	strb	r3, [r7, #15]

	if (t_get_value_res == HAL_OK){
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d106      	bne.n	80075da <Get_Value_3Axis_IMU+0x2a>
		memcpy(t_mag_data, &bm1422agmv_obj.value, sizeof(MagData));
 80075cc:	220c      	movs	r2, #12
 80075ce:	4906      	ldr	r1, [pc, #24]	; (80075e8 <Get_Value_3Axis_IMU+0x38>)
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f003 ffa5 	bl	800b520 <memcpy>
	} else{
		return t_get_value_res;
	}

	return t_get_value_res;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	e000      	b.n	80075dc <Get_Value_3Axis_IMU+0x2c>
		return t_get_value_res;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	24003160 	.word	0x24003160
 80075e8:	2400317c 	.word	0x2400317c

080075ec <IsDevReady_6Axis_IMU>:
#include "ioif_6axis_imu.h"

static HAL_StatusTypeDef IsDevReady_6Axis_IMU(uint16_t t_dev_addr)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	80fb      	strh	r3, [r7, #6]
   return IsDevReady_I2C1(t_dev_addr);
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 f88d 	bl	8007718 <IsDevReady_I2C1>
 80075fe:	4603      	mov	r3, r0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <Read_6Axis_IMU>:

static HAL_StatusTypeDef Read_6Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af02      	add	r7, sp, #8
 800760e:	60ba      	str	r2, [r7, #8]
 8007610:	461a      	mov	r2, r3
 8007612:	4603      	mov	r3, r0
 8007614:	81fb      	strh	r3, [r7, #14]
 8007616:	460b      	mov	r3, r1
 8007618:	81bb      	strh	r3, [r7, #12]
 800761a:	4613      	mov	r3, r2
 800761c:	80fb      	strh	r3, [r7, #6]
	return Mem_Read_I2C1(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 800761e:	89b9      	ldrh	r1, [r7, #12]
 8007620:	89f8      	ldrh	r0, [r7, #14]
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2201      	movs	r2, #1
 800762a:	f000 f8cb 	bl	80077c4 <Mem_Read_I2C1>
 800762e:	4603      	mov	r3, r0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <Write_6Axis_IMU>:

static HAL_StatusTypeDef Write_6Axis_IMU(uint16_t t_dev_addr, uint16_t t_reg_addr, uint8_t *t_data, uint16_t t_data_size)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af02      	add	r7, sp, #8
 800763e:	60ba      	str	r2, [r7, #8]
 8007640:	461a      	mov	r2, r3
 8007642:	4603      	mov	r3, r0
 8007644:	81fb      	strh	r3, [r7, #14]
 8007646:	460b      	mov	r3, r1
 8007648:	81bb      	strh	r3, [r7, #12]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
	return Mem_Write_I2C1(t_dev_addr, t_reg_addr, I2C_MEMADD_SIZE_8BIT, t_data, t_data_size);
 800764e:	89b9      	ldrh	r1, [r7, #12]
 8007650:	89f8      	ldrh	r0, [r7, #14]
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2201      	movs	r2, #1
 800765a:	f000 f881 	bl	8007760 <Mem_Write_I2C1>
 800765e:	4603      	mov	r3, r0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <Init_6Axis_IMU>:

HAL_StatusTypeDef Init_6Axis_IMU(AccGyroData* t_acc_gyro_Data)
{
 8007668:	b5b0      	push	{r4, r5, r7, lr}
 800766a:	b08a      	sub	sp, #40	; 0x28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	uint8_t t_init_res = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	memset(&t_acc_gyro_Data, 0, sizeof(AccGyroData));
 8007676:	1d3b      	adds	r3, r7, #4
 8007678:	2218      	movs	r2, #24
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f003 ff5d 	bl	800b53c <memset>

	ICM20608GIOctx ioctx = {
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <Init_6Axis_IMU+0x6c>)
 8007684:	f107 040c 	add.w	r4, r7, #12
 8007688:	461d      	mov	r5, r3
 800768a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800768c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800768e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007692:	e884 0003 	stmia.w	r4, {r0, r1}
		Read_6Axis_IMU,
		Write_6Axis_IMU,
		NULL
	};

	t_init_res = Set_Ioctx_ICM20608G(&icm20608_obj, &ioctx);
 8007696:	f107 030c 	add.w	r3, r7, #12
 800769a:	4619      	mov	r1, r3
 800769c:	480e      	ldr	r0, [pc, #56]	; (80076d8 <Init_6Axis_IMU+0x70>)
 800769e:	f7ff fdf0 	bl	8007282 <Set_Ioctx_ICM20608G>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Init_ICM20608G(&icm20608_obj) != HAL_OK){
 80076a8:	480b      	ldr	r0, [pc, #44]	; (80076d8 <Init_6Axis_IMU+0x70>)
 80076aa:	f7ff fe1f 	bl	80072ec <Init_ICM20608G>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d008      	beq.n	80076c6 <Init_6Axis_IMU+0x5e>
		t_init_res = Init_ICM20608G(&icm20608_obj);
 80076b4:	4808      	ldr	r0, [pc, #32]	; (80076d8 <Init_6Axis_IMU+0x70>)
 80076b6:	f7ff fe19 	bl	80072ec <Init_ICM20608G>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		return t_init_res;
 80076c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076c4:	e001      	b.n	80076ca <Init_6Axis_IMU+0x62>
	}

	return t_init_res;
 80076c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3728      	adds	r7, #40	; 0x28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bdb0      	pop	{r4, r5, r7, pc}
 80076d2:	bf00      	nop
 80076d4:	0800d38c 	.word	0x0800d38c
 80076d8:	2400d158 	.word	0x2400d158

080076dc <Get_Value_6Axis_IMU>:

HAL_StatusTypeDef Get_Value_6Axis_IMU(AccGyroData* t_acc_gyro_Data)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
	uint8_t t_get_value_res = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]
	t_get_value_res = Get_Value_ICM20608G(&icm20608_obj);
 80076e8:	4809      	ldr	r0, [pc, #36]	; (8007710 <Get_Value_6Axis_IMU+0x34>)
 80076ea:	f7ff fe55 	bl	8007398 <Get_Value_ICM20608G>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]

	if (t_get_value_res == HAL_OK){
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <Get_Value_6Axis_IMU+0x2a>
		memcpy(t_acc_gyro_Data, &icm20608_obj.value, sizeof(AccGyroData));
 80076f8:	2218      	movs	r2, #24
 80076fa:	4906      	ldr	r1, [pc, #24]	; (8007714 <Get_Value_6Axis_IMU+0x38>)
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f003 ff0f 	bl	800b520 <memcpy>
	} else{
		return t_get_value_res;
	}

	return t_get_value_res;
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	e000      	b.n	8007708 <Get_Value_6Axis_IMU+0x2c>
		return t_get_value_res;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	2400d158 	.word	0x2400d158
 8007714:	2400d174 	.word	0x2400d174

08007718 <IsDevReady_I2C1>:

HAL_StatusTypeDef DeInit_I2C1( ) {return HAL_I2C_DeInit(&hi2c1);}
HAL_StatusTypeDef DeInit_I2C2( ) {return HAL_I2C_DeInit(&hi2c2);}
HAL_StatusTypeDef DeInit_I2C3( ) {return HAL_I2C_DeInit(&hi2c3);}

HAL_StatusTypeDef IsDevReady_I2C1(uint16_t t_dev_addr) {return HAL_I2C_IsDeviceReady(&hi2c1, t_dev_addr, I2C1_TRIALS, I2C1_STRAT_UP_DELAY);}
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	80fb      	strh	r3, [r7, #6]
 8007722:	88f9      	ldrh	r1, [r7, #6]
 8007724:	2332      	movs	r3, #50	; 0x32
 8007726:	220a      	movs	r2, #10
 8007728:	4803      	ldr	r0, [pc, #12]	; (8007738 <IsDevReady_I2C1+0x20>)
 800772a:	f7fb fe5f 	bl	80033ec <HAL_I2C_IsDeviceReady>
 800772e:	4603      	mov	r3, r0
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	240001a8 	.word	0x240001a8

0800773c <IsDevReady_I2C3>:
HAL_StatusTypeDef IsDevReady_I2C2(uint16_t t_dev_addr) {return HAL_I2C_IsDeviceReady(&hi2c2, t_dev_addr, I2C2_TRIALS, I2C2_STRAT_UP_DELAY);}
HAL_StatusTypeDef IsDevReady_I2C3(uint16_t t_dev_addr) {return HAL_I2C_IsDeviceReady(&hi2c3, t_dev_addr, I2C3_TRIALS, I2C3_STRAT_UP_DELAY);}
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	4603      	mov	r3, r0
 8007744:	80fb      	strh	r3, [r7, #6]
 8007746:	88f9      	ldrh	r1, [r7, #6]
 8007748:	2332      	movs	r3, #50	; 0x32
 800774a:	220a      	movs	r2, #10
 800774c:	4803      	ldr	r0, [pc, #12]	; (800775c <IsDevReady_I2C3+0x20>)
 800774e:	f7fb fe4d 	bl	80033ec <HAL_I2C_IsDeviceReady>
 8007752:	4603      	mov	r3, r0
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	2400015c 	.word	0x2400015c

08007760 <Mem_Write_I2C1>:

/* I2C1 Read/Write */
HAL_StatusTypeDef Mem_Write_I2C1(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08a      	sub	sp, #40	; 0x28
 8007764:	af04      	add	r7, sp, #16
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	4603      	mov	r3, r0
 800776a:	81fb      	strh	r3, [r7, #14]
 800776c:	460b      	mov	r3, r1
 800776e:	81bb      	strh	r3, [r7, #12]
 8007770:	4613      	mov	r3, r2
 8007772:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	75fb      	strb	r3, [r7, #23]

	memcpy(&i2c1_tx_buff, t_data, t_size);
 8007778:	8c3b      	ldrh	r3, [r7, #32]
 800777a:	461a      	mov	r2, r3
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	480f      	ldr	r0, [pc, #60]	; (80077bc <Mem_Write_I2C1+0x5c>)
 8007780:	f003 fece 	bl	800b520 <memcpy>
	if ( hi2c1.State != HAL_I2C_STATE_BUSY ){
 8007784:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <Mem_Write_I2C1+0x60>)
 8007786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b24      	cmp	r3, #36	; 0x24
 800778e:	d010      	beq.n	80077b2 <Mem_Write_I2C1+0x52>
		t_read_status = HAL_I2C_Mem_Write(&hi2c1, t_dev_addr, t_mem_addr, t_mem_size, &i2c1_tx_buff, t_size, I2C1_TIMEOUT);
 8007790:	8978      	ldrh	r0, [r7, #10]
 8007792:	89ba      	ldrh	r2, [r7, #12]
 8007794:	89f9      	ldrh	r1, [r7, #14]
 8007796:	2305      	movs	r3, #5
 8007798:	9302      	str	r3, [sp, #8]
 800779a:	8c3b      	ldrh	r3, [r7, #32]
 800779c:	9301      	str	r3, [sp, #4]
 800779e:	4b07      	ldr	r3, [pc, #28]	; (80077bc <Mem_Write_I2C1+0x5c>)
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	4603      	mov	r3, r0
 80077a4:	4806      	ldr	r0, [pc, #24]	; (80077c0 <Mem_Write_I2C1+0x60>)
 80077a6:	f7fb fbf3 	bl	8002f90 <HAL_I2C_Mem_Write>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	e000      	b.n	80077b4 <Mem_Write_I2C1+0x54>
		return HAL_BUSY;
 80077b2:	2302      	movs	r3, #2
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	2400d5b8 	.word	0x2400d5b8
 80077c0:	240001a8 	.word	0x240001a8

080077c4 <Mem_Read_I2C1>:

HAL_StatusTypeDef Mem_Read_I2C1(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af04      	add	r7, sp, #16
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	4603      	mov	r3, r0
 80077ce:	81fb      	strh	r3, [r7, #14]
 80077d0:	460b      	mov	r3, r1
 80077d2:	81bb      	strh	r3, [r7, #12]
 80077d4:	4613      	mov	r3, r2
 80077d6:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	75fb      	strb	r3, [r7, #23]

	if ( hi2c1.State != HAL_I2C_STATE_BUSY ){
 80077dc:	4b10      	ldr	r3, [pc, #64]	; (8007820 <Mem_Read_I2C1+0x5c>)
 80077de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b24      	cmp	r3, #36	; 0x24
 80077e6:	d016      	beq.n	8007816 <Mem_Read_I2C1+0x52>
		t_read_status = HAL_I2C_Mem_Read(&hi2c1, t_dev_addr, t_mem_addr, t_mem_size, i2c1_rx_buff, t_size, I2C1_TIMEOUT);
 80077e8:	8978      	ldrh	r0, [r7, #10]
 80077ea:	89ba      	ldrh	r2, [r7, #12]
 80077ec:	89f9      	ldrh	r1, [r7, #14]
 80077ee:	2305      	movs	r3, #5
 80077f0:	9302      	str	r3, [sp, #8]
 80077f2:	8c3b      	ldrh	r3, [r7, #32]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <Mem_Read_I2C1+0x60>)
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4603      	mov	r3, r0
 80077fc:	4808      	ldr	r0, [pc, #32]	; (8007820 <Mem_Read_I2C1+0x5c>)
 80077fe:	f7fb fcdb 	bl	80031b8 <HAL_I2C_Mem_Read>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]
//		t_read_status = HAL_I2C_Mem_Read_DMA(&hi2c1, t_dev_addr, t_mem_addr, t_mem_size, i2c1_rx_buff, t_size);
//		t_read_status = HAL_I2C_Master_Receive_DMA(&hi2c1, t_dev_addr, i2c1_rx_buff, t_size);
//		while (HAL_DMA_GetState(&hdma_i2c1_rx) != HAL_DMA_STATE_READY){
//		}
		memcpy(t_data, i2c1_rx_buff, t_size);
 8007806:	8c3b      	ldrh	r3, [r7, #32]
 8007808:	461a      	mov	r2, r3
 800780a:	4906      	ldr	r1, [pc, #24]	; (8007824 <Mem_Read_I2C1+0x60>)
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f003 fe87 	bl	800b520 <memcpy>
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
 8007814:	e000      	b.n	8007818 <Mem_Read_I2C1+0x54>
		return HAL_BUSY;
 8007816:	2302      	movs	r3, #2
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	240001a8 	.word	0x240001a8
 8007824:	2400d5bc 	.word	0x2400d5bc

08007828 <Mem_Write_I2C3>:

/* I2C3 Read/Write */
HAL_StatusTypeDef Mem_Write_I2C3(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08a      	sub	sp, #40	; 0x28
 800782c:	af04      	add	r7, sp, #16
 800782e:	607b      	str	r3, [r7, #4]
 8007830:	4603      	mov	r3, r0
 8007832:	81fb      	strh	r3, [r7, #14]
 8007834:	460b      	mov	r3, r1
 8007836:	81bb      	strh	r3, [r7, #12]
 8007838:	4613      	mov	r3, r2
 800783a:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	75fb      	strb	r3, [r7, #23]

	memcpy(&i2c3_tx_buff, t_data, t_size);
 8007840:	8c3b      	ldrh	r3, [r7, #32]
 8007842:	461a      	mov	r2, r3
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	480f      	ldr	r0, [pc, #60]	; (8007884 <Mem_Write_I2C3+0x5c>)
 8007848:	f003 fe6a 	bl	800b520 <memcpy>
	if ( hi2c3.State != HAL_I2C_STATE_BUSY ){
 800784c:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <Mem_Write_I2C3+0x60>)
 800784e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b24      	cmp	r3, #36	; 0x24
 8007856:	d010      	beq.n	800787a <Mem_Write_I2C3+0x52>
		t_read_status = HAL_I2C_Mem_Write(&hi2c3, t_dev_addr, t_mem_addr, t_mem_size, &i2c3_tx_buff, t_size, I2C3_TIMEOUT);
 8007858:	8978      	ldrh	r0, [r7, #10]
 800785a:	89ba      	ldrh	r2, [r7, #12]
 800785c:	89f9      	ldrh	r1, [r7, #14]
 800785e:	2305      	movs	r3, #5
 8007860:	9302      	str	r3, [sp, #8]
 8007862:	8c3b      	ldrh	r3, [r7, #32]
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	4b07      	ldr	r3, [pc, #28]	; (8007884 <Mem_Write_I2C3+0x5c>)
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	4603      	mov	r3, r0
 800786c:	4806      	ldr	r0, [pc, #24]	; (8007888 <Mem_Write_I2C3+0x60>)
 800786e:	f7fb fb8f 	bl	8002f90 <HAL_I2C_Mem_Write>
 8007872:	4603      	mov	r3, r0
 8007874:	75fb      	strb	r3, [r7, #23]
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 8007876:	7dfb      	ldrb	r3, [r7, #23]
 8007878:	e000      	b.n	800787c <Mem_Write_I2C3+0x54>
		return HAL_BUSY;
 800787a:	2302      	movs	r3, #2
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	2400d5b9 	.word	0x2400d5b9
 8007888:	2400015c 	.word	0x2400015c

0800788c <Mem_Read_I2C3>:

HAL_StatusTypeDef Mem_Read_I2C3(uint16_t t_dev_addr, uint16_t t_mem_addr, uint16_t t_mem_size, uint8_t *t_data, uint16_t t_size)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	; 0x28
 8007890:	af04      	add	r7, sp, #16
 8007892:	607b      	str	r3, [r7, #4]
 8007894:	4603      	mov	r3, r0
 8007896:	81fb      	strh	r3, [r7, #14]
 8007898:	460b      	mov	r3, r1
 800789a:	81bb      	strh	r3, [r7, #12]
 800789c:	4613      	mov	r3, r2
 800789e:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef t_read_status = HAL_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	75fb      	strb	r3, [r7, #23]

	if ( hi2c3.State != HAL_I2C_STATE_BUSY ){
 80078a4:	4b10      	ldr	r3, [pc, #64]	; (80078e8 <Mem_Read_I2C3+0x5c>)
 80078a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b24      	cmp	r3, #36	; 0x24
 80078ae:	d016      	beq.n	80078de <Mem_Read_I2C3+0x52>
//		t_read_status = HAL_I2C_Mem_Read_DMA(&hi2c3, t_dev_addr, t_mem_addr, t_mem_size, i2c3_rx_buff, t_size);
		t_read_status = HAL_I2C_Mem_Read(&hi2c3, t_dev_addr, t_mem_addr, t_mem_size, i2c3_rx_buff, t_size, I2C3_TIMEOUT);
 80078b0:	8978      	ldrh	r0, [r7, #10]
 80078b2:	89ba      	ldrh	r2, [r7, #12]
 80078b4:	89f9      	ldrh	r1, [r7, #14]
 80078b6:	2305      	movs	r3, #5
 80078b8:	9302      	str	r3, [sp, #8]
 80078ba:	8c3b      	ldrh	r3, [r7, #32]
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <Mem_Read_I2C3+0x60>)
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	4603      	mov	r3, r0
 80078c4:	4808      	ldr	r0, [pc, #32]	; (80078e8 <Mem_Read_I2C3+0x5c>)
 80078c6:	f7fb fc77 	bl	80031b8 <HAL_I2C_Mem_Read>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
		memcpy(t_data, i2c3_rx_buff, t_size);
 80078ce:	8c3b      	ldrh	r3, [r7, #32]
 80078d0:	461a      	mov	r2, r3
 80078d2:	4906      	ldr	r1, [pc, #24]	; (80078ec <Mem_Read_I2C3+0x60>)
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f003 fe23 	bl	800b520 <memcpy>
	} else {
		return HAL_BUSY;
	}

	return t_read_status;
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	e000      	b.n	80078e0 <Mem_Read_I2C3+0x54>
		return HAL_BUSY;
 80078de:	2302      	movs	r3, #2
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	2400015c 	.word	0x2400015c
 80078ec:	2400d5d0 	.word	0x2400d5d0

080078f0 <Init_IOIF_Fdcan>:

#include "ioif_fdcan.h"


void Init_IOIF_Fdcan(uint32_t t_Mask, uint32_t t_FilterID1, uint32_t t_FilterID2)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
	fdcan1_obj.hfdcan = &hfdcan1;
 80078fc:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 80078fe:	4a43      	ldr	r2, [pc, #268]	; (8007a0c <Init_IOIF_Fdcan+0x11c>)
 8007900:	601a      	str	r2, [r3, #0]
	fdcan1_obj.mask_window = t_Mask;
 8007902:	4a41      	ldr	r2, [pc, #260]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6713      	str	r3, [r2, #112]	; 0x70
	fdcan1_obj.filter1 = t_FilterID1;
 8007908:	4a3f      	ldr	r2, [pc, #252]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6753      	str	r3, [r2, #116]	; 0x74
	fdcan1_obj.filter2 = t_FilterID2;
 800790e:	4a3e      	ldr	r2, [pc, #248]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6793      	str	r3, [r2, #120]	; 0x78

	fdcan1_obj.sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8007914:	4b3c      	ldr	r3, [pc, #240]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007916:	2200      	movs	r2, #0
 8007918:	605a      	str	r2, [r3, #4]
	fdcan1_obj.sFilterConfig.FilterIndex = 0;
 800791a:	4b3b      	ldr	r3, [pc, #236]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 800791c:	2200      	movs	r2, #0
 800791e:	609a      	str	r2, [r3, #8]
	fdcan1_obj.sFilterConfig.FilterType = FDCAN_FILTER_RANGE; //FDCAN_FILTER_RANGE;
 8007920:	4b39      	ldr	r3, [pc, #228]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007922:	2200      	movs	r2, #0
 8007924:	60da      	str	r2, [r3, #12]
	fdcan1_obj.sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007926:	4b38      	ldr	r3, [pc, #224]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007928:	2201      	movs	r2, #1
 800792a:	611a      	str	r2, [r3, #16]
	fdcan1_obj.sFilterConfig.FilterID1 = 0x000;	// Filter ID1
 800792c:	4b36      	ldr	r3, [pc, #216]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 800792e:	2200      	movs	r2, #0
 8007930:	615a      	str	r2, [r3, #20]
	fdcan1_obj.sFilterConfig.FilterID2 = 0x7FF;	// Filter ID2
 8007932:	4b35      	ldr	r3, [pc, #212]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007934:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007938:	619a      	str	r2, [r3, #24]

	fdcan1_obj.TxHeader.IdType = FDCAN_STANDARD_ID;
 800793a:	4b33      	ldr	r3, [pc, #204]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 800793c:	2200      	movs	r2, #0
 800793e:	629a      	str	r2, [r3, #40]	; 0x28
	fdcan1_obj.TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8007940:	4b31      	ldr	r3, [pc, #196]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007942:	2200      	movs	r2, #0
 8007944:	62da      	str	r2, [r3, #44]	; 0x2c
	fdcan1_obj.TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007946:	4b30      	ldr	r3, [pc, #192]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007948:	2200      	movs	r2, #0
 800794a:	635a      	str	r2, [r3, #52]	; 0x34
	fdcan1_obj.TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 800794c:	4b2e      	ldr	r3, [pc, #184]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 800794e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007952:	639a      	str	r2, [r3, #56]	; 0x38
	fdcan1_obj.TxHeader.FDFormat = FDCAN_FD_CAN;
 8007954:	4b2c      	ldr	r3, [pc, #176]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007956:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800795a:	63da      	str	r2, [r3, #60]	; 0x3c
	fdcan1_obj.TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800795c:	4b2a      	ldr	r3, [pc, #168]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 800795e:	2200      	movs	r2, #0
 8007960:	641a      	str	r2, [r3, #64]	; 0x40
	fdcan1_obj.TxHeader.MessageMarker = 0;
 8007962:	4b29      	ldr	r3, [pc, #164]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007964:	2200      	movs	r2, #0
 8007966:	645a      	str	r2, [r3, #68]	; 0x44
 
	/* Fault Check */
	if ( HAL_FDCAN_ConfigGlobalFilter ( fdcan1_obj.hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE ) != HAL_OK ){
 8007968:	4b27      	ldr	r3, [pc, #156]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	2300      	movs	r3, #0
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	2300      	movs	r3, #0
 8007972:	2202      	movs	r2, #2
 8007974:	2102      	movs	r1, #2
 8007976:	f7fa f8c1 	bl	8001afc <HAL_FDCAN_ConfigGlobalFilter>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <Init_IOIF_Fdcan+0x94>
		Error_Handler ( );  // Configure Filter
 8007980:	f7f9 f967 	bl	8000c52 <Error_Handler>
	}

	if ( HAL_FDCAN_ConfigFilter ( fdcan1_obj.hfdcan, &fdcan1_obj.sFilterConfig ) != HAL_OK ){
 8007984:	4b20      	ldr	r3, [pc, #128]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4921      	ldr	r1, [pc, #132]	; (8007a10 <Init_IOIF_Fdcan+0x120>)
 800798a:	4618      	mov	r0, r3
 800798c:	f7fa f840 	bl	8001a10 <HAL_FDCAN_ConfigFilter>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <Init_IOIF_Fdcan+0xaa>
		Error_Handler ( );  // Configure Filter
 8007996:	f7f9 f95c 	bl	8000c52 <Error_Handler>
	}

	if ( HAL_FDCAN_ActivateNotification ( fdcan1_obj.hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0 ) != HAL_OK ) {
 800799a:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2200      	movs	r2, #0
 80079a0:	2101      	movs	r1, #1
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fa fb12 	bl	8001fcc <HAL_FDCAN_ActivateNotification>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <Init_IOIF_Fdcan+0xc2>
		Error_Handler ( );
 80079ae:	f7f9 f950 	bl	8000c52 <Error_Handler>
	}

	if ( HAL_FDCAN_ConfigTxDelayCompensation ( fdcan1_obj.hfdcan, fdcan1_obj.hfdcan->Init.DataPrescaler * fdcan1_obj.hfdcan->Init.DataTimeSeg1, 0 ) != HAL_OK ) {
 80079b2:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	4a12      	ldr	r2, [pc, #72]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80079c2:	fb02 f303 	mul.w	r3, r2, r3
 80079c6:	2200      	movs	r2, #0
 80079c8:	4619      	mov	r1, r3
 80079ca:	f7fa f8c4 	bl	8001b56 <HAL_FDCAN_ConfigTxDelayCompensation>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <Init_IOIF_Fdcan+0xe8>
		Error_Handler ( );
 80079d4:	f7f9 f93d 	bl	8000c52 <Error_Handler>
	}

	if ( HAL_FDCAN_EnableTxDelayCompensation ( fdcan1_obj.hfdcan ) != HAL_OK ) {
 80079d8:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fa f8de 	bl	8001b9e <HAL_FDCAN_EnableTxDelayCompensation>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <Init_IOIF_Fdcan+0xfc>
		Error_Handler ( );
 80079e8:	f7f9 f933 	bl	8000c52 <Error_Handler>
	}

	if ( HAL_FDCAN_Start ( fdcan1_obj.hfdcan ) != HAL_OK ) {
 80079ec:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <Init_IOIF_Fdcan+0x118>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fa f8f7 	bl	8001be4 <HAL_FDCAN_Start>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <Init_IOIF_Fdcan+0x110>
		Error_Handler ( );
 80079fc:	f7f9 f929 	bl	8000c52 <Error_Handler>
	}
}
 8007a00:	bf00      	nop
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	2400d18c 	.word	0x2400d18c
 8007a0c:	240000bc 	.word	0x240000bc
 8007a10:	2400d190 	.word	0x2400d190

08007a14 <Transmit_IOIF_Fdcan>:

int Transmit_IOIF_Fdcan(uint16_t t_COB_ID, uint32_t t_len, uint8_t* t_tx_data)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	81fb      	strh	r3, [r7, #14]
	fdcan1_obj.TxHeader.Identifier = t_COB_ID;
 8007a22:	89fb      	ldrh	r3, [r7, #14]
 8007a24:	4a08      	ldr	r2, [pc, #32]	; (8007a48 <Transmit_IOIF_Fdcan+0x34>)
 8007a26:	6253      	str	r3, [r2, #36]	; 0x24
	fdcan1_obj.TxHeader.DataLength = t_len; //FDCAN_DLC_BYTES_64 //FDCAN_DLC_BYTES_32 //FDCAN_DLC_BYTES_20
 8007a28:	4a07      	ldr	r2, [pc, #28]	; (8007a48 <Transmit_IOIF_Fdcan+0x34>)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6313      	str	r3, [r2, #48]	; 0x30

	return HAL_FDCAN_AddMessageToTxFifoQ(fdcan1_obj.hfdcan, &fdcan1_obj.TxHeader, t_tx_data);
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <Transmit_IOIF_Fdcan+0x34>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	4905      	ldr	r1, [pc, #20]	; (8007a4c <Transmit_IOIF_Fdcan+0x38>)
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fa f8ff 	bl	8001c3a <HAL_FDCAN_AddMessageToTxFifoQ>
 8007a3c:	4603      	mov	r3, r0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	2400d18c 	.word	0x2400d18c
 8007a4c:	2400d1b0 	.word	0x2400d1b0

08007a50 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
	/* Recieve Message */
	if (hfdcan->Instance == FDCAN1){
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a19      	ldr	r2, [pc, #100]	; (8007ac4 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d12b      	bne.n	8007abc <HAL_FDCAN_RxFifo0Callback+0x6c>
		if (HAL_FDCAN_GetRxMessage(fdcan1_obj.hfdcan, FDCAN_RX_FIFO0, &fdcan1_obj.RxHeader, RxData1) != HAL_OK) {
 8007a64:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	4b18      	ldr	r3, [pc, #96]	; (8007acc <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8007a6a:	4a19      	ldr	r2, [pc, #100]	; (8007ad0 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8007a6c:	2140      	movs	r1, #64	; 0x40
 8007a6e:	f7fa f93f 	bl	8001cf0 <HAL_FDCAN_GetRxMessage>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <HAL_FDCAN_RxFifo0Callback+0x2c>
			Error_Handler();
 8007a78:	f7f9 f8eb 	bl	8000c52 <Error_Handler>
		}
		
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 8007a7c:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007a7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a80:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a84:	401a      	ands	r2, r3
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d008      	beq.n	8007aa0 <HAL_FDCAN_RxFifo0Callback+0x50>
			((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter2)){
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a92:	4b0d      	ldr	r3, [pc, #52]	; (8007ac8 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	401a      	ands	r2, r3
 8007a98:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		if (((fdcan1_obj.RxHeader.Identifier & fdcan1_obj.mask_window) != fdcan1_obj.filter1) && \
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d10c      	bne.n	8007aba <HAL_FDCAN_RxFifo0Callback+0x6a>
			return;
		}

		if (fdcan_rx_callback_ptr != NULL) {
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <HAL_FDCAN_RxFifo0Callback+0x84>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d009      	beq.n	8007abc <HAL_FDCAN_RxFifo0Callback+0x6c>
			fdcan_rx_callback_ptr(fdcan1_obj.RxHeader.Identifier, RxData1);
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <HAL_FDCAN_RxFifo0Callback+0x84>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a06      	ldr	r2, [pc, #24]	; (8007ac8 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8007aae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ab0:	b292      	uxth	r2, r2
 8007ab2:	4906      	ldr	r1, [pc, #24]	; (8007acc <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	e000      	b.n	8007abc <HAL_FDCAN_RxFifo0Callback+0x6c>
			return;
 8007aba:	bf00      	nop
		}
	}
}
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	4000a000 	.word	0x4000a000
 8007ac8:	2400d18c 	.word	0x2400d18c
 8007acc:	2400d3c0 	.word	0x2400d3c0
 8007ad0:	2400d1d4 	.word	0x2400d1d4
 8007ad4:	2400cf78 	.word	0x2400cf78

08007ad8 <Start_TIM3>:
extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim17;

int Start_TIM1()    {return HAL_TIM_Base_Start_IT(&htim1);}
int Start_TIM2()    {return HAL_TIM_Base_Start_IT(&htim2);}
int Start_TIM3()    {return HAL_TIM_Base_Start_IT(&htim3);}
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	4802      	ldr	r0, [pc, #8]	; (8007ae8 <Start_TIM3+0x10>)
 8007ade:	f7fe f977 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	2400d51c 	.word	0x2400d51c

08007aec <Start_TIM6>:
int Start_TIM4()    {return HAL_TIM_Base_Start_IT(&htim4);}
int Start_TIM5()    {return HAL_TIM_Base_Start_IT(&htim5);}
int Start_TIM6()    {return HAL_TIM_Base_Start_IT(&htim6);}
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	4802      	ldr	r0, [pc, #8]	; (8007afc <Start_TIM6+0x10>)
 8007af2:	f7fe f96d 	bl	8005dd0 <HAL_TIM_Base_Start_IT>
 8007af6:	4603      	mov	r3, r0
 8007af8:	4618      	mov	r0, r3
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	2400d568 	.word	0x2400d568

08007b00 <HAL_TIM_PeriodElapsedCallback>:
{
	t_semaphore->semaphore = 0; // Release the semaphore
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	/* Timer 3(APB1) - Imu Ctrl Task CallBack*/
	if (htim->Instance == htim3.Instance) {
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	4b0d      	ldr	r3, [pc, #52]	; (8007b44 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d106      	bne.n	8007b22 <HAL_TIM_PeriodElapsedCallback+0x22>
		if (ioif_tim3_callback_ptr != NULL) {
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <HAL_TIM_PeriodElapsedCallback+0x22>
			ioif_tim3_callback_ptr( );
 8007b1c:	4b0a      	ldr	r3, [pc, #40]	; (8007b48 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4798      	blx	r3
		}
	}

	/* Timer 6(APB1) - Msg hdlr Task CallBack*/
	if (htim->Instance == htim6.Instance) {
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d106      	bne.n	8007b3c <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (ioif_tim6_callback_ptr != NULL) {
 8007b2e:	4b08      	ldr	r3, [pc, #32]	; (8007b50 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <HAL_TIM_PeriodElapsedCallback+0x3c>
			ioif_tim6_callback_ptr( );
 8007b36:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4798      	blx	r3
		}
	}
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	2400d51c 	.word	0x2400d51c
 8007b48:	2400cf18 	.word	0x2400cf18
 8007b4c:	2400d568 	.word	0x2400d568
 8007b50:	2400036c 	.word	0x2400036c

08007b54 <Reset_Parameters>:

*/

/* Reset Value Zero */
static void Reset_Parameters( )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b0d4      	sub	sp, #336	; 0x150
 8007b58:	af00      	add	r7, sp, #0
	sensor_params 		= 	(Sensor_Params){0};
 8007b5a:	4b2a      	ldr	r3, [pc, #168]	; (8007c04 <Reset_Parameters+0xb0>)
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	2348      	movs	r3, #72	; 0x48
 8007b60:	461a      	mov	r2, r3
 8007b62:	2100      	movs	r1, #0
 8007b64:	f003 fcea 	bl	800b53c <memset>
	norm_params 		= 	(Normalization_Params){0};
 8007b68:	4b27      	ldr	r3, [pc, #156]	; (8007c08 <Reset_Parameters+0xb4>)
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	2334      	movs	r3, #52	; 0x34
 8007b6e:	461a      	mov	r2, r3
 8007b70:	2100      	movs	r1, #0
 8007b72:	f003 fce3 	bl	800b53c <memset>
	gait_params 		= 	(Gait_Params){0};
 8007b76:	4b25      	ldr	r3, [pc, #148]	; (8007c0c <Reset_Parameters+0xb8>)
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	6053      	str	r3, [r2, #4]
 8007b80:	6093      	str	r3, [r2, #8]
	fuzzy_params 		= 	(Fuzzy_Params){0};
 8007b82:	4b23      	ldr	r3, [pc, #140]	; (8007c10 <Reset_Parameters+0xbc>)
 8007b84:	4618      	mov	r0, r3
 8007b86:	232c      	movs	r3, #44	; 0x2c
 8007b88:	461a      	mov	r2, r3
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	f003 fcd6 	bl	800b53c <memset>
	thigh_angle_params 	= 	(Thigh_Angle_Params){0};
 8007b90:	4b20      	ldr	r3, [pc, #128]	; (8007c14 <Reset_Parameters+0xc0>)
 8007b92:	4618      	mov	r0, r3
 8007b94:	2348      	movs	r3, #72	; 0x48
 8007b96:	461a      	mov	r2, r3
 8007b98:	2100      	movs	r1, #0
 8007b9a:	f003 fccf 	bl	800b53c <memset>
	th_params 			= 	(Threshold_Params){0};
 8007b9e:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <Reset_Parameters+0xc4>)
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	6053      	str	r3, [r2, #4]
 8007ba8:	6093      	str	r3, [r2, #8]
 8007baa:	60d3      	str	r3, [r2, #12]
	plantar_params      = 	(Plantar_Params){0};
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <Reset_Parameters+0xc8>)
 8007bae:	461a      	mov	r2, r3
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	6053      	str	r3, [r2, #4]
 8007bb6:	6093      	str	r3, [r2, #8]
 8007bb8:	60d3      	str	r3, [r2, #12]
 8007bba:	6113      	str	r3, [r2, #16]
 8007bbc:	6153      	str	r3, [r2, #20]
 8007bbe:	6193      	str	r3, [r2, #24]
	dorsi_params		= 	(Dorsi_Params){0};
 8007bc0:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <Reset_Parameters+0xcc>)
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	6053      	str	r3, [r2, #4]
 8007bca:	6093      	str	r3, [r2, #8]
 8007bcc:	60d3      	str	r3, [r2, #12]
 8007bce:	6113      	str	r3, [r2, #16]
 8007bd0:	6153      	str	r3, [r2, #20]
 8007bd2:	6193      	str	r3, [r2, #24]
	assist_params		= 	(Assist_Params){0};
 8007bd4:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <Reset_Parameters+0xd0>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	809a      	strh	r2, [r3, #4]

	walking 				=	0;
 8007bdc:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <Reset_Parameters+0xd4>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
	attach_plane 			=	e_LEFT_SAGITAL;
 8007be2:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <Reset_Parameters+0xd8>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
	wc_test					= 	0.0;
 8007be8:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <Reset_Parameters+0xdc>)
 8007bea:	f04f 0200 	mov.w	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
	thigh_angle_tvcf_demo   =   0.0;
 8007bf0:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <Reset_Parameters+0xe0>)
 8007bf2:	f04f 0200 	mov.w	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	2400d110 	.word	0x2400d110
 8007c08:	2400d418 	.word	0x2400d418
 8007c0c:	2400d0e4 	.word	0x2400d0e4
 8007c10:	2400cf30 	.word	0x2400cf30
 8007c14:	2400cffc 	.word	0x2400cffc
 8007c18:	240031e8 	.word	0x240031e8
 8007c1c:	2400d0a8 	.word	0x2400d0a8
 8007c20:	2400d08c 	.word	0x2400d08c
 8007c24:	2400cf70 	.word	0x2400cf70
 8007c28:	240031e4 	.word	0x240031e4
 8007c2c:	2400d20c 	.word	0x2400d20c
 8007c30:	2400d410 	.word	0x2400d410
 8007c34:	2400cf20 	.word	0x2400cf20

08007c38 <Set_Initial_Angle_Values>:


static void Set_Initial_Angle_Values(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, float t_initial_angle)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	ed87 0a01 	vstr	s0, [r7, #4]
    t_thigh_angle_params->deg_acc_filtered = t_initial_angle;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	60da      	str	r2, [r3, #12]
    t_thigh_angle_params->deg_gyr_filtered = 0;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	611a      	str	r2, [r3, #16]
    t_thigh_angle_params->deg_LPF_1st[0] = t_initial_angle;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	629a      	str	r2, [r3, #40]	; 0x28
    t_thigh_angle_params->deg_LPF_1st[1] = t_initial_angle;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    t_thigh_angle_params->deg_LPF_2nd[0] = t_initial_angle;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	631a      	str	r2, [r3, #48]	; 0x30
    t_thigh_angle_params->deg_LPF_2nd[1] = t_initial_angle;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	635a      	str	r2, [r3, #52]	; 0x34
    t_norm_params->deg_o = t_initial_angle;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	601a      	str	r2, [r3, #0]
}
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
	...

08007c80 <Calculate_Initial_Thigh_Angle>:

/*
 *Function to calculate the initial thigh angle
*/
static void Calculate_Initial_Thigh_Angle(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, AccGyroData* t_acc_gyro_data, AttachPlane t_attach_plane)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08a      	sub	sp, #40	; 0x28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	70fb      	strb	r3, [r7, #3]
	uint8_t t_total_samples = 100;
 8007c8e:	2364      	movs	r3, #100	; 0x64
 8007c90:	75fb      	strb	r3, [r7, #23]
	float t_accumulated_angle = 0.0;
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data_check = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	75bb      	strb	r3, [r7, #22]
	float t_init_thigh_angle = 0.0;
 8007c9c:	f04f 0300 	mov.w	r3, #0
 8007ca0:	623b      	str	r3, [r7, #32]

	for (uint8_t i = 1; i <= t_total_samples; i++){
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	77fb      	strb	r3, [r7, #31]
 8007ca6:	e08b      	b.n	8007dc0 <Calculate_Initial_Thigh_Angle+0x140>
        data_check = Get_Value_6Axis_IMU(t_acc_gyro_data);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff fd17 	bl	80076dc <Get_Value_6Axis_IMU>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75bb      	strb	r3, [r7, #22]
        if (data_check == 0){
 8007cb2:	7dbb      	ldrb	r3, [r7, #22]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d177      	bne.n	8007da8 <Calculate_Initial_Thigh_Angle+0x128>
    		/* Calculate the accelerometer angle (in degrees) */
            float accelerometer_angle = 0.0;
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	61bb      	str	r3, [r7, #24]

            if (t_attach_plane == e_LEFT_SAGITAL){
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d11e      	bne.n	8007d02 <Calculate_Initial_Thigh_Angle+0x82>
            	accelerometer_angle = (atan2((t_acc_gyro_data->acc_y)*(-1), (t_acc_gyro_data->acc_x)*(-1))) * (180 / PI);	// arctan(-y/-x) Left Sagital case
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8007cca:	eef1 7a67 	vneg.f32	s15, s15
 8007cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	edd3 6a00 	vldr	s13, [r3]
 8007cd8:	eef1 6a66 	vneg.f32	s13, s13
 8007cdc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8007ce0:	eeb0 1b46 	vmov.f64	d1, d6
 8007ce4:	eeb0 0b47 	vmov.f64	d0, d7
 8007ce8:	f005 f844 	bl	800cd74 <atan2>
 8007cec:	eeb0 7b40 	vmov.f64	d7, d0
 8007cf0:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8007de8 <Calculate_Initial_Thigh_Angle+0x168>
 8007cf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007cfc:	edc7 7a06 	vstr	s15, [r7, #24]
 8007d00:	e03e      	b.n	8007d80 <Calculate_Initial_Thigh_Angle+0x100>
            }
            else if (t_attach_plane == e_RIGHT_SAGITAL){
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d11c      	bne.n	8007d42 <Calculate_Initial_Thigh_Angle+0xc2>
            	accelerometer_angle = (atan2(t_acc_gyro_data->acc_y, (t_acc_gyro_data->acc_x)*(-1))) * (180 / PI);	// arctan(y/-x) Right Sagital case
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	edd3 6a00 	vldr	s13, [r3]
 8007d18:	eef1 6a66 	vneg.f32	s13, s13
 8007d1c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8007d20:	eeb0 1b46 	vmov.f64	d1, d6
 8007d24:	eeb0 0b47 	vmov.f64	d0, d7
 8007d28:	f005 f824 	bl	800cd74 <atan2>
 8007d2c:	eeb0 7b40 	vmov.f64	d7, d0
 8007d30:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8007de8 <Calculate_Initial_Thigh_Angle+0x168>
 8007d34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007d3c:	edc7 7a06 	vstr	s15, [r7, #24]
 8007d40:	e01e      	b.n	8007d80 <Calculate_Initial_Thigh_Angle+0x100>
            }
            else if (t_attach_plane == e_LEFT_SAGITAL_DEMO){
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d11b      	bne.n	8007d80 <Calculate_Initial_Thigh_Angle+0x100>
            	accelerometer_angle = (atan2(t_acc_gyro_data->acc_x, (t_acc_gyro_data->acc_y)*(-1))) * (180 / PI);	// arctan(x/-y) Left Sagital - DEMO ver case
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	edd3 7a00 	vldr	s15, [r3]
 8007d4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	edd3 6a01 	vldr	s13, [r3, #4]
 8007d58:	eef1 6a66 	vneg.f32	s13, s13
 8007d5c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8007d60:	eeb0 1b46 	vmov.f64	d1, d6
 8007d64:	eeb0 0b47 	vmov.f64	d0, d7
 8007d68:	f005 f804 	bl	800cd74 <atan2>
 8007d6c:	eeb0 7b40 	vmov.f64	d7, d0
 8007d70:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8007de8 <Calculate_Initial_Thigh_Angle+0x168>
 8007d74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007d7c:	edc7 7a06 	vstr	s15, [r7, #24]
            }

    		/* Accumulate the accelerometer angle */
            t_accumulated_angle += accelerometer_angle;
 8007d80:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8007d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    		/* Calculate and update the initial thigh angle (average) */
            t_init_thigh_angle = t_accumulated_angle / ((float)i);
 8007d90:	7ffb      	ldrb	r3, [r7, #31]
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d9a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da2:	edc7 7a08 	vstr	s15, [r7, #32]
 8007da6:	e008      	b.n	8007dba <Calculate_Initial_Thigh_Angle+0x13a>
        }
        else{
        	i--;
 8007da8:	7ffb      	ldrb	r3, [r7, #31]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	77fb      	strb	r3, [r7, #31]
        	err_chk++;
 8007dae:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <Calculate_Initial_Thigh_Angle+0x170>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	4b0e      	ldr	r3, [pc, #56]	; (8007df0 <Calculate_Initial_Thigh_Angle+0x170>)
 8007db8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i <= t_total_samples; i++){
 8007dba:	7ffb      	ldrb	r3, [r7, #31]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	77fb      	strb	r3, [r7, #31]
 8007dc0:	7ffa      	ldrb	r2, [r7, #31]
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	f67f af6f 	bls.w	8007ca8 <Calculate_Initial_Thigh_Angle+0x28>
        }
    }

	t_thigh_angle_params->angle_init = t_init_thigh_angle;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a3a      	ldr	r2, [r7, #32]
 8007dce:	601a      	str	r2, [r3, #0]
    Set_Initial_Angle_Values(t_thigh_angle_params, t_norm_params, t_init_thigh_angle);
 8007dd0:	ed97 0a08 	vldr	s0, [r7, #32]
 8007dd4:	68b9      	ldr	r1, [r7, #8]
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff ff2e 	bl	8007c38 <Set_Initial_Angle_Values>
}
 8007ddc:	bf00      	nop
 8007dde:	3728      	adds	r7, #40	; 0x28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	f3af 8000 	nop.w
 8007de8:	7e61df46 	.word	0x7e61df46
 8007dec:	404ca5dc 	.word	0x404ca5dc
 8007df0:	2400d378 	.word	0x2400d378

08007df4 <Run_Complementary_Filter>:

/*
 *Function to execute the time-varying complementary filter (with Fuzzy Logic - wc)
*/
static void Run_Complementary_Filter(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Fuzzy_Params* t_fuzzy_params, float t_sampling_Period, AttachPlane t_attach_plane)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6178      	str	r0, [r7, #20]
 8007dfc:	6139      	str	r1, [r7, #16]
 8007dfe:	60fa      	str	r2, [r7, #12]
 8007e00:	ed87 0a02 	vstr	s0, [r7, #8]
 8007e04:	71fb      	strb	r3, [r7, #7]
	/* Apply time-varying complementary filter on the sensor data using fuzzy logic(wc) and update the thigh angle parameters */
	Run_TVCF(t_sensor_params, t_thigh_angle_params, t_fuzzy_params->wc, t_sampling_Period, t_attach_plane);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	edd3 7a04 	vldr	s15, [r3, #16]
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	edd7 0a02 	vldr	s1, [r7, #8]
 8007e14:	eeb0 0a67 	vmov.f32	s0, s15
 8007e18:	6939      	ldr	r1, [r7, #16]
 8007e1a:	6978      	ldr	r0, [r7, #20]
 8007e1c:	f000 ffb4 	bl	8008d88 <Run_TVCF>
	/* Update the unfiltered thigh angle to be the same as the filtered thigh angle */
	t_thigh_angle_params->deg_tvcf[0] = t_thigh_angle_params->deg_tvcf_filtered;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	695a      	ldr	r2, [r3, #20]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <Run_Normalization_And_Get_Gait_Phase>:

/*
 *Function to normalize sensor data and calculate the current phase of the gait
*/
static void Run_Normalization_And_Get_Gait_Phase(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
	/* Prepare for circular normalization by finding the center point of the original ellipse */
	Prepare_for_Circular_Normalization(t_thigh_angle_params, t_norm_params, t_gait_params);
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f001 f95a 	bl	80090fa <Prepare_for_Circular_Normalization>

	/* Normalize degree and velocity data based on calculated origin and amplitude */
	t_norm_params->deg_norm = (t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o) / t_norm_params->A_deg;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	edd3 7a00 	vldr	s15, [r3]
 8007e52:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	t_norm_params->vel_norm = (t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o) / t_norm_params->A_vel;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007e72:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	/* Calculate and update the current phase of the gait */
	t_gait_params->gait_phase = Get_Current_Gait_Phase(t_norm_params, t_gait_params); // Current phase (0 ~ 100%)
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	68b8      	ldr	r0, [r7, #8]
 8007e8a:	f001 f971 	bl	8009170 <Get_Current_Gait_Phase>
 8007e8e:	eef0 7a40 	vmov.f32	s15, s0
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <Reduce_Noise_In_Sensor_Data>:

/*
 *Function to reduce noise in sensor data
*/
static void Reduce_Noise_In_Sensor_Data(Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	float t_dt = 1000.0;
 8007eaa:	4b49      	ldr	r3, [pc, #292]	; (8007fd0 <Reduce_Noise_In_Sensor_Data+0x130>)
 8007eac:	617b      	str	r3, [r7, #20]
	float w_target = Get_Max_Float(0.3, t_dt/t_gait_params->gait_period);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eba:	ed97 7a05 	vldr	s14, [r7, #20]
 8007ebe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007ec2:	eef0 0a66 	vmov.f32	s1, s13
 8007ec6:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8007fd4 <Reduce_Noise_In_Sensor_Data+0x134>
 8007eca:	f001 f811 	bl	8008ef0 <Get_Max_Float>
 8007ece:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_lpf_freq = 2.5 * w_target * 2 * PI;
 8007ed2:	edd7 7a04 	vldr	s15, [r7, #16]
 8007ed6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007eda:	eeb0 6b04 	vmov.f64	d6, #4	; 0x40200000  2.5
 8007ede:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ee2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007ee6:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8007fc8 <Reduce_Noise_In_Sensor_Data+0x128>
 8007eea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007eee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007ef2:	edc7 7a03 	vstr	s15, [r7, #12]

	/* First LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_1st[0] = Perform_LPF_on_Acc(
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	edd3 7a08 	vldr	s15, [r3, #32]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007f02:	eddf 1a35 	vldr	s3, [pc, #212]	; 8007fd8 <Reduce_Noise_In_Sensor_Data+0x138>
 8007f06:	ed97 1a03 	vldr	s2, [r7, #12]
 8007f0a:	eef0 0a47 	vmov.f32	s1, s14
 8007f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f12:	f000 fed8 	bl	8008cc6 <Perform_LPF_on_Acc>
 8007f16:	eef0 7a40 	vmov.f32	s15, s0
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on angle data */
	t_thigh_angle_params->deg_LPF_2nd[0] = Perform_LPF_on_Acc(
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8007f2c:	eddf 1a2a 	vldr	s3, [pc, #168]	; 8007fd8 <Reduce_Noise_In_Sensor_Data+0x138>
 8007f30:	ed97 1a03 	vldr	s2, [r7, #12]
 8007f34:	eef0 0a47 	vmov.f32	s1, s14
 8007f38:	eeb0 0a67 	vmov.f32	s0, s15
 8007f3c:	f000 fec3 	bl	8008cc6 <Perform_LPF_on_Acc>
 8007f40:	eef0 7a40 	vmov.f32	s15, s0
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Compute raw velocity from angle data */
	t_thigh_angle_params->vel_raw[0] = (t_thigh_angle_params->deg_tvcf[0] - t_thigh_angle_params->deg_tvcf[1]) * t_dt;											// dt = 0.001sec
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	ed93 7a08 	vldr	s14, [r3, #32]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	edc3 7a06 	vstr	s15, [r3, #24]

	/* First LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_1st[0] = Perform_LPF_on_Acc(
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8007f74:	eddf 1a18 	vldr	s3, [pc, #96]	; 8007fd8 <Reduce_Noise_In_Sensor_Data+0x138>
 8007f78:	ed97 1a03 	vldr	s2, [r7, #12]
 8007f7c:	eef0 0a47 	vmov.f32	s1, s14
 8007f80:	eeb0 0a67 	vmov.f32	s0, s15
 8007f84:	f000 fe9f 	bl	8008cc6 <Perform_LPF_on_Acc>
 8007f88:	eef0 7a40 	vmov.f32	s15, s0
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);

	/* Second LPF filter on velocity data */
	t_thigh_angle_params->vel_LPF_2nd[0] = Perform_LPF_on_Acc(
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8007f9e:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8007fd8 <Reduce_Noise_In_Sensor_Data+0x138>
 8007fa2:	ed97 1a03 	vldr	s2, [r7, #12]
 8007fa6:	eef0 0a47 	vmov.f32	s1, s14
 8007faa:	eeb0 0a67 	vmov.f32	s0, s15
 8007fae:	f000 fe8a 	bl	8008cc6 <Perform_LPF_on_Acc>
 8007fb2:	eef0 7a40 	vmov.f32	s15, s0
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		t_thigh_angle_params->vel_LPF_1st[0],
		t_thigh_angle_params->vel_LPF_2nd[1],
		t_lpf_freq,
		IMU_CONTROL_PERIOD
	);
}
 8007fbc:	bf00      	nop
 8007fbe:	3718      	adds	r7, #24
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	fc8b007a 	.word	0xfc8b007a
 8007fcc:	400921fa 	.word	0x400921fa
 8007fd0:	447a0000 	.word	0x447a0000
 8007fd4:	3e99999a 	.word	0x3e99999a
 8007fd8:	3a83126f 	.word	0x3a83126f

08007fdc <Compute_Phase_Radius>:

/*
 *This function calculates and returns the phase radius
*/
static float Compute_Phase_Radius(float t_deg_diff, float t_deg_th, float t_vel_diff, float t_vel_th)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	ed87 0a03 	vstr	s0, [r7, #12]
 8007fe6:	edc7 0a02 	vstr	s1, [r7, #8]
 8007fea:	ed87 1a01 	vstr	s2, [r7, #4]
 8007fee:	edc7 1a00 	vstr	s3, [r7]
    /* Calculate degree ratio */
    float t_deg_ratio = t_deg_diff / t_deg_th;
 8007ff2:	edd7 6a03 	vldr	s13, [r7, #12]
 8007ff6:	ed97 7a02 	vldr	s14, [r7, #8]
 8007ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffe:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Calculate velocity ratio */
    float t_vel_ratio = t_vel_diff / t_vel_th;
 8008002:	edd7 6a01 	vldr	s13, [r7, #4]
 8008006:	ed97 7a00 	vldr	s14, [r7]
 800800a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800800e:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Calculate and return the phase radius */
    return Calculate_Square_Root_Sum(t_deg_ratio, t_vel_ratio);
 8008012:	edd7 0a04 	vldr	s1, [r7, #16]
 8008016:	ed97 0a05 	vldr	s0, [r7, #20]
 800801a:	f000 fcf3 	bl	8008a04 <Calculate_Square_Root_Sum>
 800801e:	eef0 7a40 	vmov.f32	s15, s0
}
 8008022:	eeb0 0a67 	vmov.f32	s0, s15
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <Update_Walking_State>:

/*
 *This function updates the walking state based on the phase radii and sum_i
*/
static void Update_Walking_State(uint8_t* t_walking, float t_phase_radius_start, float t_phase_radius_stop, int16_t t_sum_i)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	ed87 0a02 	vstr	s0, [r7, #8]
 8008038:	edc7 0a01 	vstr	s1, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	807b      	strh	r3, [r7, #2]
    /* The walking state is updated based on the current walking state, phase radii, and t_sum_i */
    switch (*t_walking)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d01d      	beq.n	8008084 <Update_Walking_State+0x58>
 8008048:	2b02      	cmp	r3, #2
 800804a:	dc23      	bgt.n	8008094 <Update_Walking_State+0x68>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <Update_Walking_State+0x2a>
 8008050:	2b01      	cmp	r3, #1
 8008052:	d00e      	beq.n	8008072 <Update_Walking_State+0x46>
 8008054:	e01e      	b.n	8008094 <Update_Walking_State+0x68>
    {
        case e_STOP:
            /* If the start phase radius is greater than 1, set the walking state to 1 */
            if (t_phase_radius_start > 1){
 8008056:	edd7 7a02 	vldr	s15, [r7, #8]
 800805a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800805e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008066:	dc00      	bgt.n	800806a <Update_Walking_State+0x3e>
                *t_walking = 1;
            }
            break;
 8008068:	e025      	b.n	80080b6 <Update_Walking_State+0x8a>
                *t_walking = 1;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2201      	movs	r2, #1
 800806e:	701a      	strb	r2, [r3, #0]
            break;
 8008070:	e021      	b.n	80080b6 <Update_Walking_State+0x8a>
        case e_WALKING_START:
            /* If sum_i is greater than 1000, set the walking state to 2 */
            if (t_sum_i > 1000){
 8008072:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800807a:	dd19      	ble.n	80080b0 <Update_Walking_State+0x84>
                *t_walking = 2;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]
            }
            break;
 8008082:	e015      	b.n	80080b0 <Update_Walking_State+0x84>
        case e_WALKING_HALF:
            /* If sum_i is 0, set the walking state to 3 */
            if (t_sum_i == 0){
 8008084:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d113      	bne.n	80080b4 <Update_Walking_State+0x88>
                *t_walking = 3;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2203      	movs	r2, #3
 8008090:	701a      	strb	r2, [r3, #0]
            }
            break;
 8008092:	e00f      	b.n	80080b4 <Update_Walking_State+0x88>
        default:
            /* If the stop phase radius is less than 1, set the walking state to 0 */
            if (t_phase_radius_stop < 1){
 8008094:	edd7 7a01 	vldr	s15, [r7, #4]
 8008098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800809c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a4:	d400      	bmi.n	80080a8 <Update_Walking_State+0x7c>
                *t_walking = 0;
            }
            break;
 80080a6:	e006      	b.n	80080b6 <Update_Walking_State+0x8a>
                *t_walking = 0;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	701a      	strb	r2, [r3, #0]
            break;
 80080ae:	e002      	b.n	80080b6 <Update_Walking_State+0x8a>
            break;
 80080b0:	bf00      	nop
 80080b2:	e000      	b.n	80080b6 <Update_Walking_State+0x8a>
            break;
 80080b4:	bf00      	nop
    }
}
 80080b6:	bf00      	nop
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
	...

080080c4 <Check_Walking_State>:

/*
*This function checks the walking state using the walking parameters and IMU system information
*/
static void Check_Walking_State(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Threshold_Params* t_th_params, Gait_Params* t_gait_params, uint8_t* t_walking)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
	float t_deg_diff = 0.0;
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	61fb      	str	r3, [r7, #28]
	float t_vel_diff = 0.0;
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	61bb      	str	r3, [r7, #24]
	float t_phase_radius_start = 0.0;
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	617b      	str	r3, [r7, #20]
	float t_phase_radius_stop = 0.0;
 80080e4:	f04f 0300 	mov.w	r3, #0
 80080e8:	613b      	str	r3, [r7, #16]

    /* Get the relevant values from the walking parameters and IMU system */
    t_deg_diff = t_thigh_angle_params->deg_LPF_2nd[0] - t_norm_params->deg_o;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	edd3 7a00 	vldr	s15, [r3]
 80080f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080fa:	edc7 7a07 	vstr	s15, [r7, #28]
    t_vel_diff = t_thigh_angle_params->vel_LPF_2nd[0] - t_norm_params->vel_o;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	edd3 7a01 	vldr	s15, [r3, #4]
 800810a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800810e:	edc7 7a06 	vstr	s15, [r7, #24]

    /* Calculate the start and stop phase radii */
    t_phase_radius_start = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_start, t_vel_diff, t_th_params->vel_th_start);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	edd3 7a00 	vldr	s15, [r3]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	ed93 7a01 	vldr	s14, [r3, #4]
 800811e:	eef0 1a47 	vmov.f32	s3, s14
 8008122:	ed97 1a06 	vldr	s2, [r7, #24]
 8008126:	eef0 0a67 	vmov.f32	s1, s15
 800812a:	ed97 0a07 	vldr	s0, [r7, #28]
 800812e:	f7ff ff55 	bl	8007fdc <Compute_Phase_Radius>
 8008132:	ed87 0a05 	vstr	s0, [r7, #20]
    t_phase_radius_stop = Compute_Phase_Radius(t_deg_diff, t_th_params->deg_th_stop, t_vel_diff, t_th_params->vel_th_stop);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	edd3 7a02 	vldr	s15, [r3, #8]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	ed93 7a03 	vldr	s14, [r3, #12]
 8008142:	eef0 1a47 	vmov.f32	s3, s14
 8008146:	ed97 1a06 	vldr	s2, [r7, #24]
 800814a:	eef0 0a67 	vmov.f32	s1, s15
 800814e:	ed97 0a07 	vldr	s0, [r7, #28]
 8008152:	f7ff ff43 	bl	8007fdc <Compute_Phase_Radius>
 8008156:	ed87 0a04 	vstr	s0, [r7, #16]

    /* Update the walking state based on the phase radii and sum_i */
    Update_Walking_State(t_walking, t_phase_radius_start, t_phase_radius_stop, t_norm_params->sum_i);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	8a1b      	ldrh	r3, [r3, #16]
 800815e:	b21b      	sxth	r3, r3
 8008160:	4619      	mov	r1, r3
 8008162:	edd7 0a04 	vldr	s1, [r7, #16]
 8008166:	ed97 0a05 	vldr	s0, [r7, #20]
 800816a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800816c:	f7ff ff5e 	bl	800802c <Update_Walking_State>

    /* If the walking state is 0 or 1, set the gait phase to -100 */
    if (*t_walking == 0 || *t_walking == 1){
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <Check_Walking_State+0xbc>
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d102      	bne.n	8008186 <Check_Walking_State+0xc2>
        t_gait_params->gait_phase = -100;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	4a03      	ldr	r2, [pc, #12]	; (8008190 <Check_Walking_State+0xcc>)
 8008184:	605a      	str	r2, [r3, #4]
    }
}
 8008186:	bf00      	nop
 8008188:	3720      	adds	r7, #32
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	c2c80000 	.word	0xc2c80000

08008194 <Setting_Assist_Time>:


static void Setting_Assist_Time(Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
	Set_Assist_Force_Timing_Params(t_plantar_params, t_dorsi_params, t_assist_params, t_gait_params);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f001 f8ff 	bl	80093ac <Set_Assist_Force_Timing_Params>
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <Update_IMU_Raw_Value>:

/*
*The function Update_IMU_Raw_Value updates the IMU raw values.
*/
static void Update_IMU_Raw_Value(Sensor_Params* t_sensor_params, AccGyroData* t_acc_gyro_data, MagData* t_mag_data, AttachPlane t_attach_plane)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
 80081c2:	70fb      	strb	r3, [r7, #3]
	t_sensor_params->accX[0] = t_acc_gyro_data->acc_x;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	601a      	str	r2, [r3, #0]
	t_sensor_params->accY[0] = t_acc_gyro_data->acc_y;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	609a      	str	r2, [r3, #8]
	t_sensor_params->accZ[0] = t_acc_gyro_data->acc_z;
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	611a      	str	r2, [r3, #16]

	t_sensor_params->gyrX[0] = t_acc_gyro_data->gyr_x;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	619a      	str	r2, [r3, #24]
	t_sensor_params->gyrY[0] = t_acc_gyro_data->gyr_y;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	621a      	str	r2, [r3, #32]

	if (t_attach_plane == e_LEFT_SAGITAL || t_attach_plane == e_LEFT_SAGITAL_DEMO){
 80081ec:	78fb      	ldrb	r3, [r7, #3]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <Update_IMU_Raw_Value+0x42>
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d108      	bne.n	800820a <Update_IMU_Raw_Value+0x54>
		t_sensor_params->gyrZ[0] = (-1) * (t_acc_gyro_data->gyr_z); 	// For Left Sagital case
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80081fe:	eef1 7a67 	vneg.f32	s15, s15
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		t_sensor_params->gyrZ[0] = t_acc_gyro_data->gyr_z; 	// For Right Sagital case
	}
//	t_sensor_params->magX[0] = t_mag_data->mag_x;
//	t_sensor_params->magY[0] = t_mag_data->mag_y;
//	t_sensor_params->magZ[0] = t_mag_data->mag_z;
}
 8008208:	e006      	b.n	8008218 <Update_IMU_Raw_Value+0x62>
	else if (t_attach_plane == e_RIGHT_SAGITAL){
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d103      	bne.n	8008218 <Update_IMU_Raw_Value+0x62>
		t_sensor_params->gyrZ[0] = t_acc_gyro_data->gyr_z; 	// For Right Sagital case
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	695a      	ldr	r2, [r3, #20]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008218:	bf00      	nop
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <Run_Total_function>:

 */


static int Run_Total_function()
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af02      	add	r7, sp, #8
	thigh_angle_tvcf_demo = (-1) * thigh_angle_params.deg_tvcf_filtered;
 800822a:	4b2e      	ldr	r3, [pc, #184]	; (80082e4 <Run_Total_function+0xc0>)
 800822c:	edd3 7a05 	vldr	s15, [r3, #20]
 8008230:	eef1 7a67 	vneg.f32	s15, s15
 8008234:	4b2c      	ldr	r3, [pc, #176]	; (80082e8 <Run_Total_function+0xc4>)
 8008236:	edc3 7a00 	vstr	s15, [r3]

	Save_Previous_Value(&sensor_params, &thigh_angle_params, &gait_params);
 800823a:	4a2c      	ldr	r2, [pc, #176]	; (80082ec <Run_Total_function+0xc8>)
 800823c:	4929      	ldr	r1, [pc, #164]	; (80082e4 <Run_Total_function+0xc0>)
 800823e:	482c      	ldr	r0, [pc, #176]	; (80082f0 <Run_Total_function+0xcc>)
 8008240:	f000 fbac 	bl	800899c <Save_Previous_Value>

	uint8_t t_3axis_res = Get_Value_3Axis_IMU(&mag_data);
 8008244:	482b      	ldr	r0, [pc, #172]	; (80082f4 <Run_Total_function+0xd0>)
 8008246:	f7ff f9b3 	bl	80075b0 <Get_Value_3Axis_IMU>
 800824a:	4603      	mov	r3, r0
 800824c:	71fb      	strb	r3, [r7, #7]
	if (t_3axis_res != NO_ERROR) { Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR; }
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <Run_Total_function+0x38>
 8008254:	4b28      	ldr	r3, [pc, #160]	; (80082f8 <Run_Total_function+0xd4>)
 8008256:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 800825a:	601a      	str	r2, [r3, #0]
	uint8_t t_6axis_res = Get_Value_6Axis_IMU(&acc_gyro_data);
 800825c:	4827      	ldr	r0, [pc, #156]	; (80082fc <Run_Total_function+0xd8>)
 800825e:	f7ff fa3d 	bl	80076dc <Get_Value_6Axis_IMU>
 8008262:	4603      	mov	r3, r0
 8008264:	71bb      	strb	r3, [r7, #6]
	if (t_6axis_res != NO_ERROR) { Imu_Ctrl_Error_Type = IMU_HDLR_HAL_FUNC_ERROR; }
 8008266:	79bb      	ldrb	r3, [r7, #6]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <Run_Total_function+0x50>
 800826c:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <Run_Total_function+0xd4>)
 800826e:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 8008272:	601a      	str	r2, [r3, #0]

	Update_IMU_Raw_Value(&sensor_params, &acc_gyro_data, &mag_data, attach_plane);
 8008274:	4b22      	ldr	r3, [pc, #136]	; (8008300 <Run_Total_function+0xdc>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	4a1e      	ldr	r2, [pc, #120]	; (80082f4 <Run_Total_function+0xd0>)
 800827a:	4920      	ldr	r1, [pc, #128]	; (80082fc <Run_Total_function+0xd8>)
 800827c:	481c      	ldr	r0, [pc, #112]	; (80082f0 <Run_Total_function+0xcc>)
 800827e:	f7ff ff9a 	bl	80081b6 <Update_IMU_Raw_Value>

	Generate_Fuzzy_Input(&sensor_params, &fuzzy_params);
 8008282:	4920      	ldr	r1, [pc, #128]	; (8008304 <Run_Total_function+0xe0>)
 8008284:	481a      	ldr	r0, [pc, #104]	; (80082f0 <Run_Total_function+0xcc>)
 8008286:	f000 fc6f 	bl	8008b68 <Generate_Fuzzy_Input>
	wc_test = Calculate_Fuzzy_Wc(&fuzzy_params);
 800828a:	481e      	ldr	r0, [pc, #120]	; (8008304 <Run_Total_function+0xe0>)
 800828c:	f000 fcd0 	bl	8008c30 <Calculate_Fuzzy_Wc>
 8008290:	eef0 7a40 	vmov.f32	s15, s0
 8008294:	4b1c      	ldr	r3, [pc, #112]	; (8008308 <Run_Total_function+0xe4>)
 8008296:	edc3 7a00 	vstr	s15, [r3]

	Run_Complementary_Filter(&sensor_params, &thigh_angle_params, &fuzzy_params, IMU_CONTROL_PERIOD, attach_plane);
 800829a:	4b19      	ldr	r3, [pc, #100]	; (8008300 <Run_Total_function+0xdc>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800830c <Run_Total_function+0xe8>
 80082a2:	4a18      	ldr	r2, [pc, #96]	; (8008304 <Run_Total_function+0xe0>)
 80082a4:	490f      	ldr	r1, [pc, #60]	; (80082e4 <Run_Total_function+0xc0>)
 80082a6:	4812      	ldr	r0, [pc, #72]	; (80082f0 <Run_Total_function+0xcc>)
 80082a8:	f7ff fda4 	bl	8007df4 <Run_Complementary_Filter>

	Reduce_Noise_In_Sensor_Data(&thigh_angle_params, &gait_params);
 80082ac:	490f      	ldr	r1, [pc, #60]	; (80082ec <Run_Total_function+0xc8>)
 80082ae:	480d      	ldr	r0, [pc, #52]	; (80082e4 <Run_Total_function+0xc0>)
 80082b0:	f7ff fdf6 	bl	8007ea0 <Reduce_Noise_In_Sensor_Data>

	Run_Normalization_And_Get_Gait_Phase(&thigh_angle_params, &norm_params, &gait_params);
 80082b4:	4a0d      	ldr	r2, [pc, #52]	; (80082ec <Run_Total_function+0xc8>)
 80082b6:	4916      	ldr	r1, [pc, #88]	; (8008310 <Run_Total_function+0xec>)
 80082b8:	480a      	ldr	r0, [pc, #40]	; (80082e4 <Run_Total_function+0xc0>)
 80082ba:	f7ff fdb9 	bl	8007e30 <Run_Normalization_And_Get_Gait_Phase>

	Check_Walking_State(&thigh_angle_params, &norm_params, &th_params, &gait_params, &walking);
 80082be:	4b15      	ldr	r3, [pc, #84]	; (8008314 <Run_Total_function+0xf0>)
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <Run_Total_function+0xc8>)
 80082c4:	4a14      	ldr	r2, [pc, #80]	; (8008318 <Run_Total_function+0xf4>)
 80082c6:	4912      	ldr	r1, [pc, #72]	; (8008310 <Run_Total_function+0xec>)
 80082c8:	4806      	ldr	r0, [pc, #24]	; (80082e4 <Run_Total_function+0xc0>)
 80082ca:	f7ff fefb 	bl	80080c4 <Check_Walking_State>

	Setting_Assist_Time(&plantar_params, &dorsi_params, &assist_params, &gait_params);
 80082ce:	4b07      	ldr	r3, [pc, #28]	; (80082ec <Run_Total_function+0xc8>)
 80082d0:	4a12      	ldr	r2, [pc, #72]	; (800831c <Run_Total_function+0xf8>)
 80082d2:	4913      	ldr	r1, [pc, #76]	; (8008320 <Run_Total_function+0xfc>)
 80082d4:	4813      	ldr	r0, [pc, #76]	; (8008324 <Run_Total_function+0x100>)
 80082d6:	f7ff ff5d 	bl	8008194 <Setting_Assist_Time>

//	// Msg_Hdlr problem //
//	Setting_Assist_Force_and_Time(&assist_params, &gait_params);
//	Set_Trigger(&assist_params, &gait_params, walking);

	return 0;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	2400cffc 	.word	0x2400cffc
 80082e8:	2400cf20 	.word	0x2400cf20
 80082ec:	2400d0e4 	.word	0x2400d0e4
 80082f0:	2400d110 	.word	0x2400d110
 80082f4:	2400d400 	.word	0x2400d400
 80082f8:	2400d0f0 	.word	0x2400d0f0
 80082fc:	2400d0f4 	.word	0x2400d0f4
 8008300:	2400d20c 	.word	0x2400d20c
 8008304:	2400cf30 	.word	0x2400cf30
 8008308:	2400d410 	.word	0x2400d410
 800830c:	3a83126f 	.word	0x3a83126f
 8008310:	2400d418 	.word	0x2400d418
 8008314:	240031e4 	.word	0x240031e4
 8008318:	240031e8 	.word	0x240031e8
 800831c:	2400cf70 	.word	0x2400cf70
 8008320:	2400d08c 	.word	0x2400d08c
 8008324:	2400d0a8 	.word	0x2400d0a8

08008328 <Get_State_Callback>:
 \__ \ |) | (_) | | (__/ _` | | | '_ \/ _` / _| / /(_-<
 |___/___/ \___/   \___\__,_|_|_|_.__/\__,_\__|_\_\/__/

 */

MSG_COMMON_SDO_CALLBACK(imu_ctrl_task)
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2201      	movs	r2, #1
 8008336:	711a      	strb	r2, [r3, #4]
 8008338:	2001      	movs	r0, #1
 800833a:	f003 f8e1 	bl	800b500 <malloc>
 800833e:	4603      	mov	r3, r0
 8008340:	461a      	mov	r2, r3
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a05      	ldr	r2, [pc, #20]	; (8008360 <Get_State_Callback+0x38>)
 800834c:	7b12      	ldrb	r2, [r2, #12]
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2200      	movs	r2, #0
 8008354:	721a      	strb	r2, [r3, #8]
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	2400d454 	.word	0x2400d454

08008364 <Set_State_Callback>:
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	73fb      	strb	r3, [r7, #15]
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	4619      	mov	r1, r3
 800837a:	4808      	ldr	r0, [pc, #32]	; (800839c <Set_State_Callback+0x38>)
 800837c:	f002 ffdc 	bl	800b338 <Transition_State>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2200      	movs	r2, #0
 800838a:	711a      	strb	r2, [r3, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	2200      	movs	r2, #0
 8008390:	721a      	strb	r2, [r3, #8]
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	2400d460 	.word	0x2400d460

080083a0 <Get_Routine_Callback>:
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2200      	movs	r2, #0
 80083ae:	721a      	strb	r2, [r3, #8]
 80083b0:	4b19      	ldr	r3, [pc, #100]	; (8008418 <Get_Routine_Callback+0x78>)
 80083b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	711a      	strb	r2, [r3, #4]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	791b      	ldrb	r3, [r3, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d025      	beq.n	800840e <Get_Routine_Callback+0x6e>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	88db      	ldrh	r3, [r3, #6]
 80083c6:	461a      	mov	r2, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	791b      	ldrb	r3, [r3, #4]
 80083cc:	fb03 f302 	mul.w	r3, r3, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f003 f895 	bl	800b500 <malloc>
 80083d6:	4603      	mov	r3, r0
 80083d8:	461a      	mov	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	e00d      	b.n	8008400 <Get_Routine_Callback+0x60>
 80083e4:	4a0c      	ldr	r2, [pc, #48]	; (8008418 <Get_Routine_Callback+0x78>)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3310      	adds	r3, #16
 80083ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4413      	add	r3, r2
 80083f6:	b2ca      	uxtb	r2, r1
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3301      	adds	r3, #1
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	791b      	ldrb	r3, [r3, #4]
 8008404:	461a      	mov	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4293      	cmp	r3, r2
 800840a:	dbeb      	blt.n	80083e4 <Get_Routine_Callback+0x44>
 800840c:	e000      	b.n	8008410 <Get_Routine_Callback+0x70>
 800840e:	bf00      	nop
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	2400d454 	.word	0x2400d454

0800841c <Set_Routine_Callback>:
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2200      	movs	r2, #0
 800842a:	711a      	strb	r2, [r3, #4]
 800842c:	4828      	ldr	r0, [pc, #160]	; (80084d0 <Set_Routine_Callback+0xb4>)
 800842e:	f002 fe2b 	bl	800b088 <Clear_Routines>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	791b      	ldrb	r3, [r3, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d103      	bne.n	8008442 <Set_Routine_Callback+0x26>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2200      	movs	r2, #0
 800843e:	721a      	strb	r2, [r3, #8]
 8008440:	e043      	b.n	80084ca <Set_Routine_Callback+0xae>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	88db      	ldrh	r3, [r3, #6]
 8008446:	461a      	mov	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	791b      	ldrb	r3, [r3, #4]
 800844c:	fb03 f302 	mul.w	r3, r3, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f003 f855 	bl	800b500 <malloc>
 8008456:	4603      	mov	r3, r0
 8008458:	461a      	mov	r2, r3
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	e020      	b.n	80084a6 <Set_Routine_Callback+0x8a>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4413      	add	r3, r2
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	72fb      	strb	r3, [r7, #11]
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	4619      	mov	r1, r3
 8008474:	4816      	ldr	r0, [pc, #88]	; (80084d0 <Set_Routine_Callback+0xb4>)
 8008476:	f002 fe23 	bl	800b0c0 <Push_Routine>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10f      	bne.n	80084a0 <Set_Routine_Callback+0x84>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	441a      	add	r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	6819      	ldr	r1, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	440b      	add	r3, r1
 8008490:	7812      	ldrb	r2, [r2, #0]
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	791b      	ldrb	r3, [r3, #4]
 8008498:	3301      	adds	r3, #1
 800849a:	b2da      	uxtb	r2, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	711a      	strb	r2, [r3, #4]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	791b      	ldrb	r3, [r3, #4]
 80084aa:	461a      	mov	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4293      	cmp	r3, r2
 80084b0:	dbd8      	blt.n	8008464 <Set_Routine_Callback+0x48>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	791a      	ldrb	r2, [r3, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	791b      	ldrb	r3, [r3, #4]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d002      	beq.n	80084c4 <Set_Routine_Callback+0xa8>
 80084be:	f04f 32ff 	mov.w	r2, #4294967295
 80084c2:	e000      	b.n	80084c6 <Set_Routine_Callback+0xaa>
 80084c4:	2200      	movs	r2, #0
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	721a      	strb	r2, [r3, #8]
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	2400d494 	.word	0x2400d494

080084d4 <StateOff_Run>:
 \__ \  _/ _` |  _/ -_) | _| || | ' \/ _|  _| / _ \ ' \(_-<
 |___/\__\__,_|\__\___| |_| \_,_|_||_\__|\__|_\___/_||_/__/

 */
static void StateOff_Run( )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
	// TODO: I2C Initialization
	uint8_t i2c_3axis_res = Get_Value_3Axis_IMU(&mag_data);
 80084da:	480e      	ldr	r0, [pc, #56]	; (8008514 <StateOff_Run+0x40>)
 80084dc:	f7ff f868 	bl	80075b0 <Get_Value_3Axis_IMU>
 80084e0:	4603      	mov	r3, r0
 80084e2:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_6axis_res = Get_Value_6Axis_IMU(&acc_gyro_data);
 80084e4:	480c      	ldr	r0, [pc, #48]	; (8008518 <StateOff_Run+0x44>)
 80084e6:	f7ff f8f9 	bl	80076dc <Get_Value_6Axis_IMU>
 80084ea:	4603      	mov	r3, r0
 80084ec:	71bb      	strb	r3, [r7, #6]

	if (i2c_3axis_res == NO_ERROR && i2c_6axis_res == NO_ERROR){
 80084ee:	79fb      	ldrb	r3, [r7, #7]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <StateOff_Run+0x36>
 80084f4:	79bb      	ldrb	r3, [r7, #6]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d107      	bne.n	800850a <StateOff_Run+0x36>
		Push_Routine(&imu_ctrl_task.routine, ROUTINE_ID_IMU_TOTAL_FUNCTION);
 80084fa:	2105      	movs	r1, #5
 80084fc:	4807      	ldr	r0, [pc, #28]	; (800851c <StateOff_Run+0x48>)
 80084fe:	f002 fddf 	bl	800b0c0 <Push_Routine>
		Transition_State(&imu_ctrl_task.state_machine, e_State_Standby);
 8008502:	2101      	movs	r1, #1
 8008504:	4806      	ldr	r0, [pc, #24]	; (8008520 <StateOff_Run+0x4c>)
 8008506:	f002 ff17 	bl	800b338 <Transition_State>
	}

}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	2400d400 	.word	0x2400d400
 8008518:	2400d0f4 	.word	0x2400d0f4
 800851c:	2400d494 	.word	0x2400d494
 8008520:	2400d460 	.word	0x2400d460

08008524 <StateStandby_Run>:

static void StateStandby_Run( )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
	Transition_State(&imu_ctrl_task.state_machine, e_State_Enable);
 8008528:	2102      	movs	r1, #2
 800852a:	4802      	ldr	r0, [pc, #8]	; (8008534 <StateStandby_Run+0x10>)
 800852c:	f002 ff04 	bl	800b338 <Transition_State>
}
 8008530:	bf00      	nop
 8008532:	bd80      	pop	{r7, pc}
 8008534:	2400d460 	.word	0x2400d460

08008538 <StateEnable_Ent>:

static void StateEnable_Ent()
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0

}
 800853c:	bf00      	nop
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <StateEnable_Run>:

static void StateEnable_Run( )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0
	Run_Routines(&imu_ctrl_task.routine);
 800854c:	4802      	ldr	r0, [pc, #8]	; (8008558 <StateEnable_Run+0x10>)
 800854e:	f002 fd25 	bl	800af9c <Run_Routines>
}
 8008552:	bf00      	nop
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	2400d494 	.word	0x2400d494

0800855c <StateEnable_Ext>:

static void StateEnable_Ext()
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0

}
 8008560:	bf00      	nop
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <StateError_Run>:

static void StateError_Run()
{
 800856a:	b480      	push	{r7}
 800856c:	af00      	add	r7, sp, #0

}
 800856e:	bf00      	nop
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <Init_Imu_Ctrl>:
 |_|  |_\__,_|_|_||_|

 */

void Init_Imu_Ctrl(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b094      	sub	sp, #80	; 0x50
 800857c:	af04      	add	r7, sp, #16
    Init_Task(&imu_ctrl_task);
 800857e:	4889      	ldr	r0, [pc, #548]	; (80087a4 <Init_Imu_Ctrl+0x22c>)
 8008580:	f002 fefc 	bl	800b37c <Init_Task>

	/* State Definition */
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Off,      NULL,   			StateOff_Run,       NULL,         		 true);
 8008584:	1d38      	adds	r0, r7, #4
 8008586:	2300      	movs	r3, #0
 8008588:	4a87      	ldr	r2, [pc, #540]	; (80087a8 <Init_Imu_Ctrl+0x230>)
 800858a:	2100      	movs	r1, #0
 800858c:	f002 fe16 	bl	800b1bc <Create_State_Entity>
 8008590:	2301      	movs	r3, #1
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	1d3b      	adds	r3, r7, #4
 800859a:	cb0c      	ldmia	r3, {r2, r3}
 800859c:	2100      	movs	r1, #0
 800859e:	4881      	ldr	r0, [pc, #516]	; (80087a4 <Init_Imu_Ctrl+0x22c>)
 80085a0:	f002 ff0b 	bl	800b3ba <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Standby,  NULL,   			StateStandby_Run,	NULL,         		 false);
 80085a4:	f107 0010 	add.w	r0, r7, #16
 80085a8:	2300      	movs	r3, #0
 80085aa:	4a80      	ldr	r2, [pc, #512]	; (80087ac <Init_Imu_Ctrl+0x234>)
 80085ac:	2100      	movs	r1, #0
 80085ae:	f002 fe05 	bl	800b1bc <Create_State_Entity>
 80085b2:	2300      	movs	r3, #0
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	f107 0310 	add.w	r3, r7, #16
 80085be:	cb0c      	ldmia	r3, {r2, r3}
 80085c0:	2101      	movs	r1, #1
 80085c2:	4878      	ldr	r0, [pc, #480]	; (80087a4 <Init_Imu_Ctrl+0x22c>)
 80085c4:	f002 fef9 	bl	800b3ba <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Enable,   StateEnable_Ent,  	StateEnable_Run, 	StateEnable_Ext,	 false);
 80085c8:	f107 001c 	add.w	r0, r7, #28
 80085cc:	4b78      	ldr	r3, [pc, #480]	; (80087b0 <Init_Imu_Ctrl+0x238>)
 80085ce:	4a79      	ldr	r2, [pc, #484]	; (80087b4 <Init_Imu_Ctrl+0x23c>)
 80085d0:	4979      	ldr	r1, [pc, #484]	; (80087b8 <Init_Imu_Ctrl+0x240>)
 80085d2:	f002 fdf3 	bl	800b1bc <Create_State_Entity>
 80085d6:	2300      	movs	r3, #0
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	f107 031c 	add.w	r3, r7, #28
 80085e2:	cb0c      	ldmia	r3, {r2, r3}
 80085e4:	2102      	movs	r1, #2
 80085e6:	486f      	ldr	r0, [pc, #444]	; (80087a4 <Init_Imu_Ctrl+0x22c>)
 80085e8:	f002 fee7 	bl	800b3ba <Set_Task_State_Entity>
	TASK_CREATE_STATE(&imu_ctrl_task, e_State_Error,    NULL,			  	StateError_Run,    	NULL,				 false);
 80085ec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80085f0:	2300      	movs	r3, #0
 80085f2:	4a72      	ldr	r2, [pc, #456]	; (80087bc <Init_Imu_Ctrl+0x244>)
 80085f4:	2100      	movs	r1, #0
 80085f6:	f002 fde1 	bl	800b1bc <Create_State_Entity>
 80085fa:	2300      	movs	r3, #0
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008606:	cb0c      	ldmia	r3, {r2, r3}
 8008608:	2103      	movs	r1, #3
 800860a:	4866      	ldr	r0, [pc, #408]	; (80087a4 <Init_Imu_Ctrl+0x22c>)
 800860c:	f002 fed5 	bl	800b3ba <Set_Task_State_Entity>

	/* Routine Definition */
	TASK_CREATE_ROUTINE(&imu_ctrl_task, ROUTINE_ID_IMU_TOTAL_FUNCTION, 		NULL, Run_Total_function, 		NULL);
 8008610:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8008614:	2300      	movs	r3, #0
 8008616:	4a6a      	ldr	r2, [pc, #424]	; (80087c0 <Init_Imu_Ctrl+0x248>)
 8008618:	2100      	movs	r1, #0
 800861a:	f002 fc2b 	bl	800ae74 <Create_Routine_Entity>
 800861e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008626:	cb0c      	ldmia	r3, {r2, r3}
 8008628:	2105      	movs	r1, #5
 800862a:	485e      	ldr	r0, [pc, #376]	; (80087a4 <Init_Imu_Ctrl+0x22c>)
 800862c:	f002 feee 	bl	800b40c <Set_Task_Routine_Entity>

	/* DOD Definition */
	// DOD
	Create_DOD(TASK_ID_IMU);
 8008630:	2003      	movs	r0, #3
 8008632:	f000 ff8f 	bl	8009554 <Create_DOD>

	// PDO
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_X, e_Float32, 1, &acc_gyro_data.acc_x);
 8008636:	4b63      	ldr	r3, [pc, #396]	; (80087c4 <Init_Imu_Ctrl+0x24c>)
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2301      	movs	r3, #1
 800863c:	2207      	movs	r2, #7
 800863e:	2100      	movs	r1, #0
 8008640:	2003      	movs	r0, #3
 8008642:	f000 ff9f 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Y, e_Float32, 1, &acc_gyro_data.acc_y);
 8008646:	4b60      	ldr	r3, [pc, #384]	; (80087c8 <Init_Imu_Ctrl+0x250>)
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	2301      	movs	r3, #1
 800864c:	2207      	movs	r2, #7
 800864e:	2101      	movs	r1, #1
 8008650:	2003      	movs	r0, #3
 8008652:	f000 ff97 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_ACC_Z, e_Float32, 1, &acc_gyro_data.acc_z);
 8008656:	4b5d      	ldr	r3, [pc, #372]	; (80087cc <Init_Imu_Ctrl+0x254>)
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	2301      	movs	r3, #1
 800865c:	2207      	movs	r2, #7
 800865e:	2102      	movs	r1, #2
 8008660:	2003      	movs	r0, #3
 8008662:	f000 ff8f 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_X, e_Float32, 1, &acc_gyro_data.gyr_x);
 8008666:	4b5a      	ldr	r3, [pc, #360]	; (80087d0 <Init_Imu_Ctrl+0x258>)
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	2301      	movs	r3, #1
 800866c:	2207      	movs	r2, #7
 800866e:	2103      	movs	r1, #3
 8008670:	2003      	movs	r0, #3
 8008672:	f000 ff87 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Y, e_Float32, 1, &acc_gyro_data.gyr_y);
 8008676:	4b57      	ldr	r3, [pc, #348]	; (80087d4 <Init_Imu_Ctrl+0x25c>)
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	2301      	movs	r3, #1
 800867c:	2207      	movs	r2, #7
 800867e:	2104      	movs	r1, #4
 8008680:	2003      	movs	r0, #3
 8008682:	f000 ff7f 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GYR_Z, e_Float32, 1, &acc_gyro_data.gyr_z);
 8008686:	4b54      	ldr	r3, [pc, #336]	; (80087d8 <Init_Imu_Ctrl+0x260>)
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	2301      	movs	r3, #1
 800868c:	2207      	movs	r2, #7
 800868e:	2105      	movs	r1, #5
 8008690:	2003      	movs	r0, #3
 8008692:	f000 ff77 	bl	8009584 <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC,          e_Float32, 1, &thigh_angle_params.deg_acc);
 8008696:	4b51      	ldr	r3, [pc, #324]	; (80087dc <Init_Imu_Ctrl+0x264>)
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2301      	movs	r3, #1
 800869c:	2207      	movs	r2, #7
 800869e:	210d      	movs	r1, #13
 80086a0:	2003      	movs	r0, #3
 80086a2:	f000 ff6f 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR,          e_Float32, 1, &thigh_angle_params.deg_gyr);
 80086a6:	4b4e      	ldr	r3, [pc, #312]	; (80087e0 <Init_Imu_Ctrl+0x268>)
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	2301      	movs	r3, #1
 80086ac:	2207      	movs	r2, #7
 80086ae:	210e      	movs	r1, #14
 80086b0:	2003      	movs	r0, #3
 80086b2:	f000 ff67 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_ACC_FILTERED, e_Float32, 1, &thigh_angle_params.deg_acc_filtered);
 80086b6:	4b4b      	ldr	r3, [pc, #300]	; (80087e4 <Init_Imu_Ctrl+0x26c>)
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	2301      	movs	r3, #1
 80086bc:	2207      	movs	r2, #7
 80086be:	210f      	movs	r1, #15
 80086c0:	2003      	movs	r0, #3
 80086c2:	f000 ff5f 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_DEG_GYR_FILTERED, e_Float32, 1, &thigh_angle_params.deg_gyr_filtered);
 80086c6:	4b48      	ldr	r3, [pc, #288]	; (80087e8 <Init_Imu_Ctrl+0x270>)
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	2301      	movs	r3, #1
 80086cc:	2207      	movs	r2, #7
 80086ce:	2110      	movs	r1, #16
 80086d0:	2003      	movs	r0, #3
 80086d2:	f000 ff57 	bl	8009584 <Create_PDO>
//	Create_PDO(TASK_ID_IMU, PDO_ID_DEG_TVCF,             e_Float32, 1, &thigh_angle_params.deg_tvcf_filtered);			// Real application
	Create_PDO(TASK_ID_IMU, PDO_ID_DEG_TVCF,             e_Float32, 1, &thigh_angle_tvcf_demo);							// Only for DEMO
 80086d6:	4b45      	ldr	r3, [pc, #276]	; (80087ec <Init_Imu_Ctrl+0x274>)
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	2301      	movs	r3, #1
 80086dc:	2207      	movs	r2, #7
 80086de:	2111      	movs	r1, #17
 80086e0:	2003      	movs	r0, #3
 80086e2:	f000 ff4f 	bl	8009584 <Create_PDO>

	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_WALKING_STATE, 	e_UInt8, 	1, &walking);
 80086e6:	4b42      	ldr	r3, [pc, #264]	; (80087f0 <Init_Imu_Ctrl+0x278>)
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	2301      	movs	r3, #1
 80086ec:	2201      	movs	r2, #1
 80086ee:	2106      	movs	r1, #6
 80086f0:	2003      	movs	r0, #3
 80086f2:	f000 ff47 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_GAIT_PHASE, 		e_Float32,  1, &gait_params.gait_phase);
 80086f6:	4b3f      	ldr	r3, [pc, #252]	; (80087f4 <Init_Imu_Ctrl+0x27c>)
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	2301      	movs	r3, #1
 80086fc:	2207      	movs	r2, #7
 80086fe:	2107      	movs	r1, #7
 8008700:	2003      	movs	r0, #3
 8008702:	f000 ff3f 	bl	8009584 <Create_PDO>

	// Assist mode //
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_P, e_Float32, 1, &plantar_params.Plantar_ref);
 8008706:	4b3c      	ldr	r3, [pc, #240]	; (80087f8 <Init_Imu_Ctrl+0x280>)
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	2301      	movs	r3, #1
 800870c:	2207      	movs	r2, #7
 800870e:	210b      	movs	r1, #11
 8008710:	2003      	movs	r0, #3
 8008712:	f000 ff37 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_IMU, PDO_ID_IMU_TENSION_D, e_Float32, 1, &dorsi_params.Dorsi_ref);
 8008716:	4b39      	ldr	r3, [pc, #228]	; (80087fc <Init_Imu_Ctrl+0x284>)
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	2301      	movs	r3, #1
 800871c:	2207      	movs	r2, #7
 800871e:	210c      	movs	r1, #12
 8008720:	2003      	movs	r0, #3
 8008722:	f000 ff2f 	bl	8009584 <Create_PDO>

	// SDO
	MSG_COMMON_SDO_CREATE(TASK_ID_IMU)
 8008726:	4b36      	ldr	r3, [pc, #216]	; (8008800 <Init_Imu_Ctrl+0x288>)
 8008728:	2201      	movs	r2, #1
 800872a:	2100      	movs	r1, #0
 800872c:	2003      	movs	r0, #3
 800872e:	f000 ffe3 	bl	80096f8 <Create_SDO>
 8008732:	4b34      	ldr	r3, [pc, #208]	; (8008804 <Init_Imu_Ctrl+0x28c>)
 8008734:	2201      	movs	r2, #1
 8008736:	2101      	movs	r1, #1
 8008738:	2003      	movs	r0, #3
 800873a:	f000 ffdd 	bl	80096f8 <Create_SDO>
 800873e:	4b32      	ldr	r3, [pc, #200]	; (8008808 <Init_Imu_Ctrl+0x290>)
 8008740:	2201      	movs	r2, #1
 8008742:	2102      	movs	r1, #2
 8008744:	2003      	movs	r0, #3
 8008746:	f000 ffd7 	bl	80096f8 <Create_SDO>
 800874a:	4b30      	ldr	r3, [pc, #192]	; (800880c <Init_Imu_Ctrl+0x294>)
 800874c:	2201      	movs	r2, #1
 800874e:	2103      	movs	r1, #3
 8008750:	2003      	movs	r0, #3
 8008752:	f000 ffd1 	bl	80096f8 <Create_SDO>

	Init_6Axis_IMU(&acc_gyro_data);
 8008756:	481b      	ldr	r0, [pc, #108]	; (80087c4 <Init_Imu_Ctrl+0x24c>)
 8008758:	f7fe ff86 	bl	8007668 <Init_6Axis_IMU>
	Init_3Axis_IMU(&mag_data);
 800875c:	482c      	ldr	r0, [pc, #176]	; (8008810 <Init_Imu_Ctrl+0x298>)
 800875e:	f7fe feef 	bl	8007540 <Init_3Axis_IMU>

	Reset_Parameters();
 8008762:	f7ff f9f7 	bl	8007b54 <Reset_Parameters>
	attach_plane = e_LEFT_SAGITAL_DEMO;		// WIDM Attached Plane Selection
 8008766:	4b2b      	ldr	r3, [pc, #172]	; (8008814 <Init_Imu_Ctrl+0x29c>)
 8008768:	2202      	movs	r2, #2
 800876a:	701a      	strb	r2, [r3, #0]
	Set_Init_Parameters(&norm_params, &gait_params, &fuzzy_params, &th_params, &plantar_params, &dorsi_params, &assist_params);
 800876c:	4b2a      	ldr	r3, [pc, #168]	; (8008818 <Init_Imu_Ctrl+0x2a0>)
 800876e:	9302      	str	r3, [sp, #8]
 8008770:	4b2a      	ldr	r3, [pc, #168]	; (800881c <Init_Imu_Ctrl+0x2a4>)
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	4b2a      	ldr	r3, [pc, #168]	; (8008820 <Init_Imu_Ctrl+0x2a8>)
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4b2a      	ldr	r3, [pc, #168]	; (8008824 <Init_Imu_Ctrl+0x2ac>)
 800877a:	4a2b      	ldr	r2, [pc, #172]	; (8008828 <Init_Imu_Ctrl+0x2b0>)
 800877c:	492b      	ldr	r1, [pc, #172]	; (800882c <Init_Imu_Ctrl+0x2b4>)
 800877e:	482c      	ldr	r0, [pc, #176]	; (8008830 <Init_Imu_Ctrl+0x2b8>)
 8008780:	f000 f880 	bl	8008884 <Set_Init_Parameters>
	Calculate_Initial_Thigh_Angle(&thigh_angle_params, &norm_params, &acc_gyro_data, attach_plane);
 8008784:	4b23      	ldr	r3, [pc, #140]	; (8008814 <Init_Imu_Ctrl+0x29c>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	4a0e      	ldr	r2, [pc, #56]	; (80087c4 <Init_Imu_Ctrl+0x24c>)
 800878a:	4929      	ldr	r1, [pc, #164]	; (8008830 <Init_Imu_Ctrl+0x2b8>)
 800878c:	4829      	ldr	r0, [pc, #164]	; (8008834 <Init_Imu_Ctrl+0x2bc>)
 800878e:	f7ff fa77 	bl	8007c80 <Calculate_Initial_Thigh_Angle>

	/* Callback Allocation */
    if (Start_TIM3() > 0) {
 8008792:	f7ff f9a1 	bl	8007ad8 <Start_TIM3>
        //TODO: ERROR PROCESS
    }
    ioif_tim3_callback_ptr = Run_Imu_Ctrl;
 8008796:	4b28      	ldr	r3, [pc, #160]	; (8008838 <Init_Imu_Ctrl+0x2c0>)
 8008798:	4a28      	ldr	r2, [pc, #160]	; (800883c <Init_Imu_Ctrl+0x2c4>)
 800879a:	601a      	str	r2, [r3, #0]
}
 800879c:	bf00      	nop
 800879e:	3740      	adds	r7, #64	; 0x40
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	2400d454 	.word	0x2400d454
 80087a8:	080084d5 	.word	0x080084d5
 80087ac:	08008525 	.word	0x08008525
 80087b0:	0800855d 	.word	0x0800855d
 80087b4:	08008549 	.word	0x08008549
 80087b8:	08008539 	.word	0x08008539
 80087bc:	0800856b 	.word	0x0800856b
 80087c0:	08008225 	.word	0x08008225
 80087c4:	2400d0f4 	.word	0x2400d0f4
 80087c8:	2400d0f8 	.word	0x2400d0f8
 80087cc:	2400d0fc 	.word	0x2400d0fc
 80087d0:	2400d100 	.word	0x2400d100
 80087d4:	2400d104 	.word	0x2400d104
 80087d8:	2400d108 	.word	0x2400d108
 80087dc:	2400d000 	.word	0x2400d000
 80087e0:	2400d004 	.word	0x2400d004
 80087e4:	2400d008 	.word	0x2400d008
 80087e8:	2400d00c 	.word	0x2400d00c
 80087ec:	2400cf20 	.word	0x2400cf20
 80087f0:	240031e4 	.word	0x240031e4
 80087f4:	2400d0e8 	.word	0x2400d0e8
 80087f8:	2400d0bc 	.word	0x2400d0bc
 80087fc:	2400d0a0 	.word	0x2400d0a0
 8008800:	08008329 	.word	0x08008329
 8008804:	08008365 	.word	0x08008365
 8008808:	080083a1 	.word	0x080083a1
 800880c:	0800841d 	.word	0x0800841d
 8008810:	2400d400 	.word	0x2400d400
 8008814:	2400d20c 	.word	0x2400d20c
 8008818:	2400cf70 	.word	0x2400cf70
 800881c:	2400d08c 	.word	0x2400d08c
 8008820:	2400d0a8 	.word	0x2400d0a8
 8008824:	240031e8 	.word	0x240031e8
 8008828:	2400cf30 	.word	0x2400cf30
 800882c:	2400d0e4 	.word	0x2400d0e4
 8008830:	2400d418 	.word	0x2400d418
 8008834:	2400cffc 	.word	0x2400cffc
 8008838:	2400cf18 	.word	0x2400cf18
 800883c:	08008841 	.word	0x08008841

08008840 <Run_Imu_Ctrl>:

void Run_Imu_Ctrl(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0

	uint32_t imu_ctrl_loop_time_cnt_1 = DWT->CYCCNT;
 8008846:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <Run_Imu_Ctrl+0x34>)
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	607b      	str	r3, [r7, #4]

	/*Run Device */
	Run_Task(&imu_ctrl_task);
 800884c:	480a      	ldr	r0, [pc, #40]	; (8008878 <Run_Imu_Ctrl+0x38>)
 800884e:	f002 fda7 	bl	800b3a0 <Run_Task>

	uint32_t imu_ctrl_loop_time_cnt_2 = DWT->CYCCNT;
 8008852:	4b08      	ldr	r3, [pc, #32]	; (8008874 <Run_Imu_Ctrl+0x34>)
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	603b      	str	r3, [r7, #0]

	/* Elapsed Time Check */
	imu_ctrl_task_us = (imu_ctrl_loop_time_cnt_2 - imu_ctrl_loop_time_cnt_1)/480;	// in microsecond
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	4a07      	ldr	r2, [pc, #28]	; (800887c <Run_Imu_Ctrl+0x3c>)
 8008860:	fba2 2303 	umull	r2, r3, r2, r3
 8008864:	0a1b      	lsrs	r3, r3, #8
 8008866:	4a06      	ldr	r2, [pc, #24]	; (8008880 <Run_Imu_Ctrl+0x40>)
 8008868:	6013      	str	r3, [r2, #0]
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	e0001000 	.word	0xe0001000
 8008878:	2400d454 	.word	0x2400d454
 800887c:	88888889 	.word	0x88888889
 8008880:	240031d4 	.word	0x240031d4

08008884 <Set_Init_Parameters>:
 
*/

/* Set Specific Value */
void Set_Init_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params, Fuzzy_Params* t_fuzzy_params, Threshold_Params* t_th_params, Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
	t_norm_params->A_deg = 30.0; //30
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4a37      	ldr	r2, [pc, #220]	; (8008974 <Set_Init_Parameters+0xf0>)
 8008896:	62da      	str	r2, [r3, #44]	; 0x2c
	t_norm_params->A_vel = 400.0; //400
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4a37      	ldr	r2, [pc, #220]	; (8008978 <Set_Init_Parameters+0xf4>)
 800889c:	631a      	str	r2, [r3, #48]	; 0x30

	t_gait_params->gait_period 	  = 1000;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088a4:	801a      	strh	r2, [r3, #0]
	t_gait_params->gait_phase 	  = -100.0;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	4a34      	ldr	r2, [pc, #208]	; (800897c <Set_Init_Parameters+0xf8>)
 80088aa:	605a      	str	r2, [r3, #4]
	t_gait_params->gait_phase_pre = -100.0;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4a33      	ldr	r2, [pc, #204]	; (800897c <Set_Init_Parameters+0xf8>)
 80088b0:	609a      	str	r2, [r3, #8]

	t_fuzzy_params->wl 		= 0.5;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80088b8:	615a      	str	r2, [r3, #20]
	t_fuzzy_params->wh 		= 10.0;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a30      	ldr	r2, [pc, #192]	; (8008980 <Set_Init_Parameters+0xfc>)
 80088be:	619a      	str	r2, [r3, #24]
	t_fuzzy_params->var[0] 	= 8.0;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80088c6:	61da      	str	r2, [r3, #28]
	t_fuzzy_params->var[1] 	= 30.0;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a2a      	ldr	r2, [pc, #168]	; (8008974 <Set_Init_Parameters+0xf0>)
 80088cc:	621a      	str	r2, [r3, #32]
	t_fuzzy_params->var[2] 	= 5.8;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a2c      	ldr	r2, [pc, #176]	; (8008984 <Set_Init_Parameters+0x100>)
 80088d2:	625a      	str	r2, [r3, #36]	; 0x24
	t_fuzzy_params->var[3] 	= 320.0;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a2c      	ldr	r2, [pc, #176]	; (8008988 <Set_Init_Parameters+0x104>)
 80088d8:	629a      	str	r2, [r3, #40]	; 0x28

	t_th_params->deg_th_start	= 5.0;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	4a2b      	ldr	r2, [pc, #172]	; (800898c <Set_Init_Parameters+0x108>)
 80088de:	601a      	str	r2, [r3, #0]
	t_th_params->vel_th_start	= 20.0;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	4a2b      	ldr	r2, [pc, #172]	; (8008990 <Set_Init_Parameters+0x10c>)
 80088e4:	605a      	str	r2, [r3, #4]
	t_th_params->deg_th_stop 	= 5.0;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	4a28      	ldr	r2, [pc, #160]	; (800898c <Set_Init_Parameters+0x108>)
 80088ea:	609a      	str	r2, [r3, #8]
	t_th_params->vel_th_stop 	= 3.0;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	4a29      	ldr	r2, [pc, #164]	; (8008994 <Set_Init_Parameters+0x110>)
 80088f0:	60da      	str	r2, [r3, #12]

	t_plantar_params->t_P_start	  = 35;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	2223      	movs	r2, #35	; 0x23
 80088f6:	801a      	strh	r2, [r3, #0]
	t_plantar_params->t_r_P_end   = 35;
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	2223      	movs	r2, #35	; 0x23
 80088fc:	805a      	strh	r2, [r3, #2]
	t_plantar_params->t_c_P_end   = 55;
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2237      	movs	r2, #55	; 0x37
 8008902:	809a      	strh	r2, [r3, #4]
	t_plantar_params->t_f_P_end   = 60;
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	223c      	movs	r2, #60	; 0x3c
 8008908:	80da      	strh	r2, [r3, #6]
	t_plantar_params->t_r_P       = 100;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2264      	movs	r2, #100	; 0x64
 800890e:	811a      	strh	r2, [r3, #8]
	t_plantar_params->t_c_P 	  = 400;
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008916:	815a      	strh	r2, [r3, #10]
	t_plantar_params->t_f_P 	  = 100;
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2264      	movs	r2, #100	; 0x64
 800891c:	819a      	strh	r2, [r3, #12]
	t_plantar_params->Amplitude_P = 60.0;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	4a1d      	ldr	r2, [pc, #116]	; (8008998 <Set_Init_Parameters+0x114>)
 8008922:	619a      	str	r2, [r3, #24]

	t_dorsi_params->t_D_start 	  = 50;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	2232      	movs	r2, #50	; 0x32
 8008928:	801a      	strh	r2, [r3, #0]
	t_dorsi_params->t_r_D_end 	  = 53;
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	2235      	movs	r2, #53	; 0x35
 800892e:	805a      	strh	r2, [r3, #2]
	t_dorsi_params->t_c_D_end 	  = 70;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2246      	movs	r2, #70	; 0x46
 8008934:	809a      	strh	r2, [r3, #4]
	t_dorsi_params->t_f_D_end 	  = 80;
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	2250      	movs	r2, #80	; 0x50
 800893a:	80da      	strh	r2, [r3, #6]
	t_dorsi_params->t_r_D 		  = 100;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	2264      	movs	r2, #100	; 0x64
 8008940:	811a      	strh	r2, [r3, #8]
	t_dorsi_params->t_c_D 		  = 400;
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008948:	815a      	strh	r2, [r3, #10]
	t_dorsi_params->t_f_D 		  = 100;
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	2264      	movs	r2, #100	; 0x64
 800894e:	819a      	strh	r2, [r3, #12]
	t_dorsi_params->Amplitude_D   = 60.0;
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	4a11      	ldr	r2, [pc, #68]	; (8008998 <Set_Init_Parameters+0x114>)
 8008954:	619a      	str	r2, [r3, #24]

	t_assist_params->t_r_limit 	 = 20;
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	2214      	movs	r2, #20
 800895a:	801a      	strh	r2, [r3, #0]
	t_assist_params->t_f_limit 	 = 20;
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	2214      	movs	r2, #20
 8008960:	805a      	strh	r2, [r3, #2]
	t_assist_params->ref_shape 	 = TRAPEZOIDAL;
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	2200      	movs	r2, #0
 8008966:	711a      	strb	r2, [r3, #4]

}
 8008968:	bf00      	nop
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	41f00000 	.word	0x41f00000
 8008978:	43c80000 	.word	0x43c80000
 800897c:	c2c80000 	.word	0xc2c80000
 8008980:	41200000 	.word	0x41200000
 8008984:	40b9999a 	.word	0x40b9999a
 8008988:	43a00000 	.word	0x43a00000
 800898c:	40a00000 	.word	0x40a00000
 8008990:	41a00000 	.word	0x41a00000
 8008994:	40400000 	.word	0x40400000
 8008998:	42700000 	.word	0x42700000

0800899c <Save_Previous_Value>:


*/

void Save_Previous_Value(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, Gait_Params* t_gait_params)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
	t_sensor_params->accX[1] = t_sensor_params->accX[0];
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	605a      	str	r2, [r3, #4]
	t_sensor_params->accY[1] = t_sensor_params->accY[0];
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	60da      	str	r2, [r3, #12]
	t_sensor_params->gyrZ[1] = t_sensor_params->gyrZ[0];
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	62da      	str	r2, [r3, #44]	; 0x2c

	t_thigh_angle_params->vel_raw[1] = t_thigh_angle_params->vel_raw[0];
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	699a      	ldr	r2, [r3, #24]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	61da      	str	r2, [r3, #28]

	t_thigh_angle_params->deg_tvcf[1] = t_thigh_angle_params->deg_tvcf[0];
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	6a1a      	ldr	r2, [r3, #32]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	625a      	str	r2, [r3, #36]	; 0x24

	t_thigh_angle_params->deg_LPF_1st[1] = t_thigh_angle_params->deg_LPF_1st[0];
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	62da      	str	r2, [r3, #44]	; 0x2c
	t_thigh_angle_params->deg_LPF_2nd[1] = t_thigh_angle_params->deg_LPF_2nd[0];
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	635a      	str	r2, [r3, #52]	; 0x34
	t_thigh_angle_params->vel_LPF_1st[1] = t_thigh_angle_params->vel_LPF_1st[0];
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	63da      	str	r2, [r3, #60]	; 0x3c
	t_thigh_angle_params->vel_LPF_2nd[1] = t_thigh_angle_params->vel_LPF_2nd[0];
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	645a      	str	r2, [r3, #68]	; 0x44

	t_gait_params->gait_phase_pre = t_gait_params->gait_phase;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685a      	ldr	r2, [r3, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	609a      	str	r2, [r3, #8]
}
 80089f8:	bf00      	nop
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <Calculate_Square_Root_Sum>:
                      |___/              |___/

*/

float Calculate_Square_Root_Sum(float t_x, float t_y)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	ed2d 8b02 	vpush	{d8}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008a12:	edc7 0a00 	vstr	s1, [r7]
	return sqrt(pow(t_x, 2) + pow(t_y, 2));
 8008a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008a1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008a22:	eeb0 0b47 	vmov.f64	d0, d7
 8008a26:	f003 fd87 	bl	800c538 <pow>
 8008a2a:	eeb0 8b40 	vmov.f64	d8, d0
 8008a2e:	edd7 7a00 	vldr	s15, [r7]
 8008a32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008a36:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008a3a:	eeb0 0b47 	vmov.f64	d0, d7
 8008a3e:	f003 fd7b 	bl	800c538 <pow>
 8008a42:	eeb0 7b40 	vmov.f64	d7, d0
 8008a46:	ee38 7b07 	vadd.f64	d7, d8, d7
 8008a4a:	eeb0 0b47 	vmov.f64	d0, d7
 8008a4e:	f004 f993 	bl	800cd78 <sqrt>
 8008a52:	eeb0 7b40 	vmov.f64	d7, d0
 8008a56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8008a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	ecbd 8b02 	vpop	{d8}
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <Calculate_Absolute_Value_Float>:

float Calculate_Absolute_Value_Float(float t_value)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	ed87 0a01 	vstr	s0, [r7, #4]
	return fabs(t_value);
 8008a72:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a76:	eef0 7ae7 	vabs.f32	s15, s15
}
 8008a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <Calculate_Delta>:

float Calculate_Delta(float t_current, float t_previous)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008a92:	edc7 0a00 	vstr	s1, [r7]
	return (t_current - t_previous) / IMU_CONTROL_PERIOD;
 8008a96:	ed97 7a01 	vldr	s14, [r7, #4]
 8008a9a:	edd7 7a00 	vldr	s15, [r7]
 8008a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008aa2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008aa6:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8008ac0 <Calculate_Delta+0x38>
 8008aaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008aae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8008ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	d2f1a9fc 	.word	0xd2f1a9fc
 8008ac4:	3f50624d 	.word	0x3f50624d

08008ac8 <Calculate_xbar_Update_mu>:

void Calculate_xbar_Update_mu(float t_var_i, float t_fuzzy_input, float* t_mu)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	ed87 0a03 	vstr	s0, [r7, #12]
 8008ad2:	edc7 0a02 	vstr	s1, [r7, #8]
 8008ad6:	6078      	str	r0, [r7, #4]
	/* t_var_i is measurement value (initially set value in Set_Init_Parameters) */
	float t_xoi = 3 * t_var_i;											// Threshold Value (maybe middle value)
 8008ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008adc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ae4:	edc7 7a07 	vstr	s15, [r7, #28]
	float t_si = log(3) / t_var_i;										// Sensor Sensitivity (natural logarithm)
 8008ae8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008aec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008af0:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8008b60 <Calculate_xbar_Update_mu+0x98>
 8008af4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008af8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008afc:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_xbar = 0.5 * (1 + tanh(t_si * (t_fuzzy_input - t_xoi)));	// Fuzzy Logic Relational Expressions
 8008b00:	ed97 7a02 	vldr	s14, [r7, #8]
 8008b04:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008b18:	eeb0 0b47 	vmov.f64	d0, d7
 8008b1c:	f004 f8d4 	bl	800ccc8 <tanh>
 8008b20:	eeb0 7b40 	vmov.f64	d7, d0
 8008b24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008b28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008b2c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008b30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008b38:	edc7 7a05 	vstr	s15, [r7, #20]
	*t_mu *= (1 - t_xbar);	// Update mu for TVCF cutoff frequency(wc)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	ed93 7a00 	vldr	s14, [r3]
 8008b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b46:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	edc3 7a00 	vstr	s15, [r3]
}
 8008b58:	bf00      	nop
 8008b5a:	3720      	adds	r7, #32
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	7aad030b 	.word	0x7aad030b
 8008b64:	3ff193ea 	.word	0x3ff193ea

08008b68 <Generate_Fuzzy_Input>:

/*
*Generate Fuzzy Logic Input (Acc, Jerk, Angular Velocity, Angular Accerleration)
*/
void Generate_Fuzzy_Input(Sensor_Params* t_sensor_params, Fuzzy_Params* t_fuzzy_params)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
	float t_jerk_x = Calculate_Delta(t_sensor_params->accX[0], t_sensor_params->accX[1]);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	edd3 7a00 	vldr	s15, [r3]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8008b7e:	eef0 0a47 	vmov.f32	s1, s14
 8008b82:	eeb0 0a67 	vmov.f32	s0, s15
 8008b86:	f7ff ff7f 	bl	8008a88 <Calculate_Delta>
 8008b8a:	ed87 0a05 	vstr	s0, [r7, #20]
	float t_jerk_y = Calculate_Delta(t_sensor_params->accY[0], t_sensor_params->accY[1]);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	edd3 7a02 	vldr	s15, [r3, #8]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	ed93 7a03 	vldr	s14, [r3, #12]
 8008b9a:	eef0 0a47 	vmov.f32	s1, s14
 8008b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8008ba2:	f7ff ff71 	bl	8008a88 <Calculate_Delta>
 8008ba6:	ed87 0a04 	vstr	s0, [r7, #16]
	float t_wdot_z = Calculate_Delta(t_sensor_params->gyrZ[0], t_sensor_params->gyrZ[1]);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8008bb6:	eef0 0a47 	vmov.f32	s1, s14
 8008bba:	eeb0 0a67 	vmov.f32	s0, s15
 8008bbe:	f7ff ff63 	bl	8008a88 <Calculate_Delta>
 8008bc2:	ed87 0a03 	vstr	s0, [r7, #12]

	// absolute ACC
	t_fuzzy_params->Fuzzy_input[0] = Calculate_Square_Root_Sum(t_sensor_params->accX[0], t_sensor_params->accY[0]);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	edd3 7a00 	vldr	s15, [r3]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	ed93 7a02 	vldr	s14, [r3, #8]
 8008bd2:	eef0 0a47 	vmov.f32	s1, s14
 8008bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bda:	f7ff ff13 	bl	8008a04 <Calculate_Square_Root_Sum>
 8008bde:	eef0 7a40 	vmov.f32	s15, s0
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	edc3 7a00 	vstr	s15, [r3]
	// absolute Jerk
	t_fuzzy_params->Fuzzy_input[1] = Calculate_Square_Root_Sum(t_jerk_x, t_jerk_y);
 8008be8:	edd7 0a04 	vldr	s1, [r7, #16]
 8008bec:	ed97 0a05 	vldr	s0, [r7, #20]
 8008bf0:	f7ff ff08 	bl	8008a04 <Calculate_Square_Root_Sum>
 8008bf4:	eef0 7a40 	vmov.f32	s15, s0
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	edc3 7a01 	vstr	s15, [r3, #4]
	// absolute Gyr(Angular Velocity)
	t_fuzzy_params->Fuzzy_input[2] = Calculate_Absolute_Value_Float(t_sensor_params->gyrZ[0]);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008c04:	eeb0 0a67 	vmov.f32	s0, s15
 8008c08:	f7ff ff2e 	bl	8008a68 <Calculate_Absolute_Value_Float>
 8008c0c:	eef0 7a40 	vmov.f32	s15, s0
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	edc3 7a02 	vstr	s15, [r3, #8]
	// absolute Wdot(Angular Acceleration)
	t_fuzzy_params->Fuzzy_input[3] = Calculate_Absolute_Value_Float(t_wdot_z);
 8008c16:	ed97 0a03 	vldr	s0, [r7, #12]
 8008c1a:	f7ff ff25 	bl	8008a68 <Calculate_Absolute_Value_Float>
 8008c1e:	eef0 7a40 	vmov.f32	s15, s0
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8008c28:	bf00      	nop
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <Calculate_Fuzzy_Wc>:

/*
*Calculate Wc(CutOff Frequency)
*/
float Calculate_Fuzzy_Wc(Fuzzy_Params* t_fuzzy_params)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
	t_fuzzy_params->wc = 0;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f04f 0200 	mov.w	r2, #0
 8008c3e:	611a      	str	r2, [r3, #16]
	float t_mu = 1;
 8008c40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008c44:	60bb      	str	r3, [r7, #8]

	/* Perform calculations for each fuzzy input (Acc, Jerk, Angular Velocity, Angular Accerleration) */
	for (int i = 0; i < 4; i++) {
 8008c46:	2300      	movs	r3, #0
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	e019      	b.n	8008c80 <Calculate_Fuzzy_Wc+0x50>
		Calculate_xbar_Update_mu(t_fuzzy_params->var[i], t_fuzzy_params->Fuzzy_input[i], &t_mu);
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3306      	adds	r3, #6
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	3304      	adds	r3, #4
 8008c58:	edd3 7a00 	vldr	s15, [r3]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	ed93 7a00 	vldr	s14, [r3]
 8008c68:	f107 0308 	add.w	r3, r7, #8
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	eef0 0a47 	vmov.f32	s1, s14
 8008c72:	eeb0 0a67 	vmov.f32	s0, s15
 8008c76:	f7ff ff27 	bl	8008ac8 <Calculate_xbar_Update_mu>
	for (int i = 0; i < 4; i++) {
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	dde2      	ble.n	8008c4c <Calculate_Fuzzy_Wc+0x1c>
	}

	t_fuzzy_params->wc = t_mu * (t_fuzzy_params->wh) + (1 - t_mu) * (t_fuzzy_params->wl);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	ed93 7a06 	vldr	s14, [r3, #24]
 8008c8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8008c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	edc3 7a04 	vstr	s15, [r3, #16]

	return t_fuzzy_params->wc;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	ee07 3a90 	vmov	s15, r3
}
 8008cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <Perform_LPF_on_Acc>:

/*
*Low pass filtering for deg_acc
*/
float Perform_LPF_on_Acc(float t_curr_acc, float t_prev_filtered_acc, float t_cutoff_frequency, float t_sampling_Period)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b087      	sub	sp, #28
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	ed87 0a03 	vstr	s0, [r7, #12]
 8008cd0:	edc7 0a02 	vstr	s1, [r7, #8]
 8008cd4:	ed87 1a01 	vstr	s2, [r7, #4]
 8008cd8:	edc7 1a00 	vstr	s3, [r7]
	float filtered_acc = (t_cutoff_frequency * t_sampling_Period * t_curr_acc + t_prev_filtered_acc) / (t_cutoff_frequency * t_sampling_Period + 1);
 8008cdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8008ce0:	edd7 7a00 	vldr	s15, [r7]
 8008ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008cec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008cf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8008cf4:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008cf8:	ed97 7a01 	vldr	s14, [r7, #4]
 8008cfc:	edd7 7a00 	vldr	s15, [r7]
 8008d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d10:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_acc;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	ee07 3a90 	vmov	s15, r3
}
 8008d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <Perform_HPF_on_Gyro>:

/*
*High pass filtering + Integral for gyr
*/
float Perform_HPF_on_Gyro(float t_curr_gyro, float t_prev_filtered_gyro, float t_cutoff_frequency, float t_sampling_Period)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8008d32:	edc7 0a02 	vstr	s1, [r7, #8]
 8008d36:	ed87 1a01 	vstr	s2, [r7, #4]
 8008d3a:	edc7 1a00 	vstr	s3, [r7]
	float filtered_gyro = (t_curr_gyro*t_sampling_Period + t_prev_filtered_gyro) / (t_cutoff_frequency * t_sampling_Period + 1);
 8008d3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8008d42:	edd7 7a00 	vldr	s15, [r7]
 8008d46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8008d4e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008d52:	ed97 7a01 	vldr	s14, [r7, #4]
 8008d56:	edd7 7a00 	vldr	s15, [r7]
 8008d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d6a:	edc7 7a05 	vstr	s15, [r7, #20]
	return filtered_gyro;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	ee07 3a90 	vmov	s15, r3
}
 8008d74:	eeb0 0a67 	vmov.f32	s0, s15
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	0000      	movs	r0, r0
 8008d84:	0000      	movs	r0, r0
	...

08008d88 <Run_TVCF>:

/*
*Function to apply a Time Variant Complementary Filter (TVCF) to an angle
*/
void Run_TVCF(Sensor_Params* t_sensor_params, Thigh_Angle_Params* t_thigh_angle_params, float t_cutoff_frequency, float t_sampling_Period, AttachPlane t_attach_plane)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08a      	sub	sp, #40	; 0x28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6178      	str	r0, [r7, #20]
 8008d90:	6139      	str	r1, [r7, #16]
 8008d92:	ed87 0a03 	vstr	s0, [r7, #12]
 8008d96:	edc7 0a02 	vstr	s1, [r7, #8]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	71fb      	strb	r3, [r7, #7]
	/* Calculate the angle using accelerometer measurements and convert it to degrees */
    /* Thigh Angle Degree */
	float t_deg_acc = 0.0;
 8008d9e:	f04f 0300 	mov.w	r3, #0
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
	float t_deg_acc_filtered_update = 0.0;
 8008da4:	f04f 0300 	mov.w	r3, #0
 8008da8:	623b      	str	r3, [r7, #32]
	float t_deg_gyr_filtered_update = 0.0;
 8008daa:	f04f 0300 	mov.w	r3, #0
 8008dae:	61fb      	str	r3, [r7, #28]
	float t_deg_tvcf = 0.0;
 8008db0:	f04f 0300 	mov.w	r3, #0
 8008db4:	61bb      	str	r3, [r7, #24]

	if (t_attach_plane == e_LEFT_SAGITAL){
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d11e      	bne.n	8008dfa <Run_TVCF+0x72>
		t_deg_acc = atan2((t_sensor_params->accY[0])*(-1), (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(-y/-x) : Left Sagital case
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8008dc2:	eef1 7a67 	vneg.f32	s15, s15
 8008dc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	edd3 6a00 	vldr	s13, [r3]
 8008dd0:	eef1 6a66 	vneg.f32	s13, s13
 8008dd4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8008dd8:	eeb0 1b46 	vmov.f64	d1, d6
 8008ddc:	eeb0 0b47 	vmov.f64	d0, d7
 8008de0:	f003 ffc8 	bl	800cd74 <atan2>
 8008de4:	eeb0 7b40 	vmov.f64	d7, d0
 8008de8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8008ee8 <Run_TVCF+0x160>
 8008dec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008df0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008df4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8008df8:	e03e      	b.n	8008e78 <Run_TVCF+0xf0>
	}
    /* Right Thigh Angle Degree */
	else if (t_attach_plane == e_RIGHT_SAGITAL){
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d11c      	bne.n	8008e3a <Run_TVCF+0xb2>
		t_deg_acc = atan2(t_sensor_params->accY[0], (t_sensor_params->accX[0])*(-1)) * (180 / PI);	// arctan(y/-x) : Right Sagital case
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	edd3 7a02 	vldr	s15, [r3, #8]
 8008e06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	edd3 6a00 	vldr	s13, [r3]
 8008e10:	eef1 6a66 	vneg.f32	s13, s13
 8008e14:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8008e18:	eeb0 1b46 	vmov.f64	d1, d6
 8008e1c:	eeb0 0b47 	vmov.f64	d0, d7
 8008e20:	f003 ffa8 	bl	800cd74 <atan2>
 8008e24:	eeb0 7b40 	vmov.f64	d7, d0
 8008e28:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8008ee8 <Run_TVCF+0x160>
 8008e2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008e34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8008e38:	e01e      	b.n	8008e78 <Run_TVCF+0xf0>
	}
    /* Left Thigh Angle Degree - DEMO ver */
	else if (t_attach_plane == e_LEFT_SAGITAL_DEMO){
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d11b      	bne.n	8008e78 <Run_TVCF+0xf0>
		t_deg_acc = atan2(t_sensor_params->accX[0], (t_sensor_params->accY[0])*(-1)) * (180 / PI);	// arctan(x/-y) : Left Sagital DEMO ver case
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	edd3 7a00 	vldr	s15, [r3]
 8008e46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8008e50:	eef1 6a66 	vneg.f32	s13, s13
 8008e54:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8008e58:	eeb0 1b46 	vmov.f64	d1, d6
 8008e5c:	eeb0 0b47 	vmov.f64	d0, d7
 8008e60:	f003 ff88 	bl	800cd74 <atan2>
 8008e64:	eeb0 7b40 	vmov.f64	d7, d0
 8008e68:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008ee8 <Run_TVCF+0x160>
 8008e6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008e74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}


	/* Apply Low Pass Filter (LPF) on accelerometer angle */
	t_deg_acc_filtered_update = Perform_LPF_on_Acc(t_deg_acc, t_thigh_angle_params->deg_acc_filtered, t_cutoff_frequency, t_sampling_Period);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e7e:	edd7 1a02 	vldr	s3, [r7, #8]
 8008e82:	ed97 1a03 	vldr	s2, [r7, #12]
 8008e86:	eef0 0a67 	vmov.f32	s1, s15
 8008e8a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8008e8e:	f7ff ff1a 	bl	8008cc6 <Perform_LPF_on_Acc>
 8008e92:	ed87 0a08 	vstr	s0, [r7, #32]

	/* Apply High Pass Filter (HPF) on gyroscope measurements */
	t_deg_gyr_filtered_update = Perform_HPF_on_Gyro(t_sensor_params->gyrZ[0], t_thigh_angle_params->deg_gyr_filtered, t_cutoff_frequency, t_sampling_Period);
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	ed93 7a04 	vldr	s14, [r3, #16]
 8008ea2:	edd7 1a02 	vldr	s3, [r7, #8]
 8008ea6:	ed97 1a03 	vldr	s2, [r7, #12]
 8008eaa:	eef0 0a47 	vmov.f32	s1, s14
 8008eae:	eeb0 0a67 	vmov.f32	s0, s15
 8008eb2:	f7ff ff39 	bl	8008d28 <Perform_HPF_on_Gyro>
 8008eb6:	ed87 0a07 	vstr	s0, [r7, #28]

	/* Combine filtered accelerometer and gyroscope measurements */
	t_deg_tvcf = t_deg_acc_filtered_update + t_deg_gyr_filtered_update;
 8008eba:	ed97 7a08 	vldr	s14, [r7, #32]
 8008ebe:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ec6:	edc7 7a06 	vstr	s15, [r7, #24]

	t_thigh_angle_params->deg_acc_filtered = t_deg_acc_filtered_update;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	6a3a      	ldr	r2, [r7, #32]
 8008ece:	60da      	str	r2, [r3, #12]
	t_thigh_angle_params->deg_gyr_filtered = t_deg_gyr_filtered_update;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	69fa      	ldr	r2, [r7, #28]
 8008ed4:	611a      	str	r2, [r3, #16]
	t_thigh_angle_params->deg_tvcf_filtered = t_deg_tvcf;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	615a      	str	r2, [r3, #20]
}
 8008edc:	bf00      	nop
 8008ede:	3728      	adds	r7, #40	; 0x28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	7e61df46 	.word	0x7e61df46
 8008eec:	404ca5dc 	.word	0x404ca5dc

08008ef0 <Get_Max_Float>:

/*
*Get Max or Min Value between two variables for Normalization
*/
float Get_Max_Float(float t_x, float t_y)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	ed87 0a01 	vstr	s0, [r7, #4]
 8008efa:	edc7 0a00 	vstr	s1, [r7]
	return (t_x > t_y) ? t_x: t_y;
 8008efe:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f02:	edd7 7a00 	vldr	s15, [r7]
 8008f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0e:	dd01      	ble.n	8008f14 <Get_Max_Float+0x24>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	e000      	b.n	8008f16 <Get_Max_Float+0x26>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	ee07 3a90 	vmov	s15, r3
}
 8008f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <Get_Min_Float>:

float Get_Min_Float(float t_x, float t_y)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f32:	edc7 0a00 	vstr	s1, [r7]
	return (t_x < t_y) ? t_x : t_y;
 8008f36:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f3a:	edd7 7a00 	vldr	s15, [r7]
 8008f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f46:	d501      	bpl.n	8008f4c <Get_Min_Float+0x24>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	e000      	b.n	8008f4e <Get_Min_Float+0x26>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	ee07 3a90 	vmov	s15, r3
}
 8008f52:	eeb0 0a67 	vmov.f32	s0, s15
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <Set_First_Half_Gait_Phase_Parameters>:

void Set_First_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
	t_norm_params->deg_o = t_norm_params->sum_deg / t_norm_params->sum_i;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	edd3 6a02 	vldr	s13, [r3, #8]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	8a1b      	ldrh	r3, [r3, #16]
 8008f74:	ee07 3a90 	vmov	s15, r3
 8008f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	edc3 7a00 	vstr	s15, [r3]
	t_norm_params->vel_o = t_norm_params->sum_vel / t_norm_params->sum_i;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	edd3 6a03 	vldr	s13, [r3, #12]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	8a1b      	ldrh	r3, [r3, #16]
 8008f90:	ee07 3a90 	vmov	s15, r3
 8008f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	edc3 7a01 	vstr	s15, [r3, #4]

	t_gait_params->gait_period = t_norm_params->sum_i;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	8a1a      	ldrh	r2, [r3, #16]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	801a      	strh	r2, [r3, #0]

	t_norm_params->A_deg = (t_norm_params->deg_max - t_norm_params->deg_min) / 2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	ed93 7a05 	vldr	s14, [r3, #20]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	edd3 7a06 	vldr	s15, [r3, #24]
 8008fb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	t_norm_params->A_vel = (t_norm_params->vel_max - t_norm_params->vel_min) / 2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	ed93 7a07 	vldr	s14, [r3, #28]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	edd3 7a08 	vldr	s15, [r3, #32]
 8008fd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fd8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008fdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	t_norm_params->sum_i = 0;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg = 0;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f04f 0200 	mov.w	r2, #0
 8008ff2:	609a      	str	r2, [r3, #8]
	t_norm_params->sum_vel = 0;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f04f 0200 	mov.w	r2, #0
 8008ffa:	60da      	str	r2, [r3, #12]
	t_norm_params->deg_max = 0;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	615a      	str	r2, [r3, #20]
	t_norm_params->vel_max = 0;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	61da      	str	r2, [r3, #28]
	t_norm_params->deg_min = 0;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	619a      	str	r2, [r3, #24]
	t_norm_params->vel_min = 0;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f04f 0200 	mov.w	r2, #0
 800901a:	621a      	str	r2, [r3, #32]
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <Set_Second_Half_Gait_Phase_Parameters>:

void Set_Second_Half_Gait_Phase_Parameters(Normalization_Params* t_norm_params, Thigh_Angle_Params* t_thigh_angle_params)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
	t_norm_params->sum_i++;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8a1b      	ldrh	r3, [r3, #16]
 8009036:	3301      	adds	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	821a      	strh	r2, [r3, #16]
	t_norm_params->sum_deg += t_thigh_angle_params->deg_LPF_2nd[0];
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	ed93 7a02 	vldr	s14, [r3, #8]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800904a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	edc3 7a02 	vstr	s15, [r3, #8]
	t_norm_params->sum_vel += t_thigh_angle_params->vel_LPF_2nd[0];
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	ed93 7a03 	vldr	s14, [r3, #12]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8009060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	edc3 7a03 	vstr	s15, [r3, #12]
	t_norm_params->deg_max = Get_Max_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_max);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	ed93 7a05 	vldr	s14, [r3, #20]
 8009076:	eef0 0a47 	vmov.f32	s1, s14
 800907a:	eeb0 0a67 	vmov.f32	s0, s15
 800907e:	f7ff ff37 	bl	8008ef0 <Get_Max_Float>
 8009082:	eef0 7a40 	vmov.f32	s15, s0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	edc3 7a05 	vstr	s15, [r3, #20]
	t_norm_params->deg_min = Get_Min_Float(t_thigh_angle_params->deg_LPF_2nd[0], t_norm_params->deg_min);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	ed93 7a06 	vldr	s14, [r3, #24]
 8009098:	eef0 0a47 	vmov.f32	s1, s14
 800909c:	eeb0 0a67 	vmov.f32	s0, s15
 80090a0:	f7ff ff42 	bl	8008f28 <Get_Min_Float>
 80090a4:	eef0 7a40 	vmov.f32	s15, s0
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	edc3 7a06 	vstr	s15, [r3, #24]
	t_norm_params->vel_max = Get_Max_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_max);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	ed93 7a07 	vldr	s14, [r3, #28]
 80090ba:	eef0 0a47 	vmov.f32	s1, s14
 80090be:	eeb0 0a67 	vmov.f32	s0, s15
 80090c2:	f7ff ff15 	bl	8008ef0 <Get_Max_Float>
 80090c6:	eef0 7a40 	vmov.f32	s15, s0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	edc3 7a07 	vstr	s15, [r3, #28]
	t_norm_params->vel_min = Get_Min_Float(t_thigh_angle_params->vel_LPF_2nd[0], t_norm_params->vel_min);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	ed93 7a08 	vldr	s14, [r3, #32]
 80090dc:	eef0 0a47 	vmov.f32	s1, s14
 80090e0:	eeb0 0a67 	vmov.f32	s0, s15
 80090e4:	f7ff ff20 	bl	8008f28 <Get_Min_Float>
 80090e8:	eef0 7a40 	vmov.f32	s15, s0
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80090f2:	bf00      	nop
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <Prepare_for_Circular_Normalization>:

/*
*Function to Prepare for Circular Normalization
*/
void Prepare_for_Circular_Normalization(Thigh_Angle_Params* t_thigh_angle_params, Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	60f8      	str	r0, [r7, #12]
 8009102:	60b9      	str	r1, [r7, #8]
 8009104:	607a      	str	r2, [r7, #4]
	if (t_thigh_angle_params->vel_LPF_2nd[0] < 0 && t_thigh_angle_params->vel_LPF_2nd[1] > 0
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800910c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009114:	d521      	bpl.n	800915a <Prepare_for_Circular_Normalization+0x60>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800911c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009124:	dd19      	ble.n	800915a <Prepare_for_Circular_Normalization+0x60>
		&& t_norm_params->sum_i > (t_gait_params->gait_period)*0.5) {
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	8a1b      	ldrh	r3, [r3, #16]
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800913e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009142:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009146:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800914a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914e:	dd04      	ble.n	800915a <Prepare_for_Circular_Normalization+0x60>
		Set_First_Half_Gait_Phase_Parameters(t_norm_params, t_gait_params);
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	68b8      	ldr	r0, [r7, #8]
 8009154:	f7ff ff04 	bl	8008f60 <Set_First_Half_Gait_Phase_Parameters>
 8009158:	e004      	b.n	8009164 <Prepare_for_Circular_Normalization+0x6a>
	}
	else{
		Set_Second_Half_Gait_Phase_Parameters(t_norm_params, t_thigh_angle_params);
 800915a:	68f9      	ldr	r1, [r7, #12]
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f7ff ff63 	bl	8009028 <Set_Second_Half_Gait_Phase_Parameters>
	}
}
 8009162:	bf00      	nop
 8009164:	bf00      	nop
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	0000      	movs	r0, r0
	...

08009170 <Get_Current_Gait_Phase>:

/*
*Function to calculate the current phase of the gait (0~100%)
*/
float Get_Current_Gait_Phase(Normalization_Params* t_norm_params, Gait_Params* t_gait_params)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
	/* Calculate initial phase using atan function */
	float t_gait_phase = atan((-1) * (t_norm_params->vel_norm) / (t_norm_params->deg_norm));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8009180:	eef1 6a67 	vneg.f32	s13, s15
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800918a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800918e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009192:	eeb0 0b47 	vmov.f64	d0, d7
 8009196:	f003 fc93 	bl	800cac0 <atan>
 800919a:	eeb0 7b40 	vmov.f64	d7, d0
 800919e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80091a2:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Adjust phase based on the value of normalized degree */
    if (t_norm_params->deg_norm < 0){
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80091ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b4:	d50c      	bpl.n	80091d0 <Get_Current_Gait_Phase+0x60>
        t_gait_phase += PI;
 80091b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80091ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80091be:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80092c0 <Get_Current_Gait_Phase+0x150>
 80091c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80091c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80091ca:	edc7 7a03 	vstr	s15, [r7, #12]
 80091ce:	e01b      	b.n	8009208 <Get_Current_Gait_Phase+0x98>
    } else if (t_norm_params->deg_norm > 0 && t_norm_params->vel_norm > 0){
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80091d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091de:	dd13      	ble.n	8009208 <Get_Current_Gait_Phase+0x98>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80091e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80091ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ee:	dd0b      	ble.n	8009208 <Get_Current_Gait_Phase+0x98>
        t_gait_phase += 2 * PI;
 80091f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80091f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80091f8:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80092c8 <Get_Current_Gait_Phase+0x158>
 80091fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009200:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009204:	edc7 7a03 	vstr	s15, [r7, #12]
    }

	/* Convert phase from radians to custom scale */
    t_gait_phase = t_gait_phase * 50.0f / PI;
 8009208:	edd7 7a03 	vldr	s15, [r7, #12]
 800920c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80092d8 <Get_Current_Gait_Phase+0x168>
 8009210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009214:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009218:	ed9f 5b29 	vldr	d5, [pc, #164]	; 80092c0 <Get_Current_Gait_Phase+0x150>
 800921c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009220:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009224:	edc7 7a03 	vstr	s15, [r7, #12]
    t_gait_phase -= 12.11;
 8009228:	edd7 7a03 	vldr	s15, [r7, #12]
 800922c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009230:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80092d0 <Get_Current_Gait_Phase+0x160>
 8009234:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009238:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800923c:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Adjust phase if it falls outside the range 0-100 */
    if (t_gait_phase < 0 && t_gait_phase != -100){
 8009240:	edd7 7a03 	vldr	s15, [r7, #12]
 8009244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924c:	d510      	bpl.n	8009270 <Get_Current_Gait_Phase+0x100>
 800924e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009252:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80092dc <Get_Current_Gait_Phase+0x16c>
 8009256:	eef4 7a47 	vcmp.f32	s15, s14
 800925a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925e:	d007      	beq.n	8009270 <Get_Current_Gait_Phase+0x100>
        t_gait_phase += 100;
 8009260:	edd7 7a03 	vldr	s15, [r7, #12]
 8009264:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80092e0 <Get_Current_Gait_Phase+0x170>
 8009268:	ee77 7a87 	vadd.f32	s15, s15, s14
 800926c:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    /* Compare phase with the stored gait phase in gaitInfo */
    if (t_gait_phase > 5 && t_gait_phase < 95){
 8009270:	edd7 7a03 	vldr	s15, [r7, #12]
 8009274:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8009278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800927c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009280:	dd13      	ble.n	80092aa <Get_Current_Gait_Phase+0x13a>
 8009282:	edd7 7a03 	vldr	s15, [r7, #12]
 8009286:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80092e4 <Get_Current_Gait_Phase+0x174>
 800928a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800928e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009292:	d50a      	bpl.n	80092aa <Get_Current_Gait_Phase+0x13a>
        t_gait_phase = Get_Max_Float(t_gait_phase, t_gait_params->gait_phase);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	edd3 7a01 	vldr	s15, [r3, #4]
 800929a:	eef0 0a67 	vmov.f32	s1, s15
 800929e:	ed97 0a03 	vldr	s0, [r7, #12]
 80092a2:	f7ff fe25 	bl	8008ef0 <Get_Max_Float>
 80092a6:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	return t_gait_phase;	// 0 ~ 100%
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	ee07 3a90 	vmov	s15, r3
}
 80092b0:	eeb0 0a67 	vmov.f32	s0, s15
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	f3af 8000 	nop.w
 80092c0:	fc8b007a 	.word	0xfc8b007a
 80092c4:	400921fa 	.word	0x400921fa
 80092c8:	fc8b007a 	.word	0xfc8b007a
 80092cc:	401921fa 	.word	0x401921fa
 80092d0:	eb851eb8 	.word	0xeb851eb8
 80092d4:	40283851 	.word	0x40283851
 80092d8:	42480000 	.word	0x42480000
 80092dc:	c2c80000 	.word	0xc2c80000
 80092e0:	42c80000 	.word	0x42c80000
 80092e4:	42be0000 	.word	0x42be0000

080092e8 <Calculate_Assist_Force_Timing_Params>:

/*
*Function to Calculate timing parameters for Plantar&Dorsi assistance force
*/
static void Calculate_Assist_Force_Timing_Params(uint16_t* t_r, uint16_t* t_c, uint16_t* t_f, uint16_t t_r_end, uint16_t t_start, uint16_t t_c_end, uint16_t t_f_end, uint16_t t_t_r_limit, uint16_t t_t_f_limit, uint16_t t_gait_period)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	807b      	strh	r3, [r7, #2]
	*t_r = (t_r_end - t_start) * t_gait_period / 100;
 80092f6:	887a      	ldrh	r2, [r7, #2]
 80092f8:	8b3b      	ldrh	r3, [r7, #24]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
 8009302:	4a29      	ldr	r2, [pc, #164]	; (80093a8 <Calculate_Assist_Force_Timing_Params+0xc0>)
 8009304:	fb82 1203 	smull	r1, r2, r2, r3
 8009308:	1152      	asrs	r2, r2, #5
 800930a:	17db      	asrs	r3, r3, #31
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	b29a      	uxth	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	801a      	strh	r2, [r3, #0]
	*t_c = (t_c_end - t_r_end) * t_gait_period / 100;
 8009314:	8bba      	ldrh	r2, [r7, #28]
 8009316:	887b      	ldrh	r3, [r7, #2]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800931c:	fb02 f303 	mul.w	r3, r2, r3
 8009320:	4a21      	ldr	r2, [pc, #132]	; (80093a8 <Calculate_Assist_Force_Timing_Params+0xc0>)
 8009322:	fb82 1203 	smull	r1, r2, r2, r3
 8009326:	1152      	asrs	r2, r2, #5
 8009328:	17db      	asrs	r3, r3, #31
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	b29a      	uxth	r2, r3
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	801a      	strh	r2, [r3, #0]
	*t_f = (t_f_end - t_c_end) * t_gait_period / 100;
 8009332:	8c3a      	ldrh	r2, [r7, #32]
 8009334:	8bbb      	ldrh	r3, [r7, #28]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800933a:	fb02 f303 	mul.w	r3, r2, r3
 800933e:	4a1a      	ldr	r2, [pc, #104]	; (80093a8 <Calculate_Assist_Force_Timing_Params+0xc0>)
 8009340:	fb82 1203 	smull	r1, r2, r2, r3
 8009344:	1152      	asrs	r2, r2, #5
 8009346:	17db      	asrs	r3, r3, #31
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	b29a      	uxth	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	801a      	strh	r2, [r3, #0]

	if (*t_r < t_t_r_limit){
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009356:	429a      	cmp	r2, r3
 8009358:	d90d      	bls.n	8009376 <Calculate_Assist_Force_Timing_Params+0x8e>
		*t_c = *t_c - t_t_r_limit + *t_r;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	881a      	ldrh	r2, [r3, #0]
 800935e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	b29a      	uxth	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	4413      	add	r3, r2
 800936a:	b29a      	uxth	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	801a      	strh	r2, [r3, #0]
		*t_r = t_t_r_limit;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009374:	801a      	strh	r2, [r3, #0]
	}
	if (*t_f < t_t_f_limit){
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800937c:	429a      	cmp	r2, r3
 800937e:	d90d      	bls.n	800939c <Calculate_Assist_Force_Timing_Params+0xb4>
		*t_c = *t_c - t_t_f_limit + *t_f;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	881a      	ldrh	r2, [r3, #0]
 8009384:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	b29a      	uxth	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	4413      	add	r3, r2
 8009390:	b29a      	uxth	r2, r3
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	801a      	strh	r2, [r3, #0]
		*t_f = t_t_f_limit;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800939a:	801a      	strh	r2, [r3, #0]
	}
	if (*t_c < 0){
		*t_c = 0;
	}
}
 800939c:	bf00      	nop
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr
 80093a8:	51eb851f 	.word	0x51eb851f

080093ac <Set_Assist_Force_Timing_Params>:
/*
*Function to Set timing parameters for Plantar&Dorsi assistance force(rising, continuous, falling time)
*/

void Set_Assist_Force_Timing_Params(Plantar_Params* t_plantar_params, Dorsi_Params* t_dorsi_params, Assist_Params* t_assist_params, Gait_Params* t_gait_params)
{
 80093ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b0:	b08a      	sub	sp, #40	; 0x28
 80093b2:	af06      	add	r7, sp, #24
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	607a      	str	r2, [r7, #4]
 80093ba:	603b      	str	r3, [r7, #0]
	if (t_gait_params->gait_period > 2000){
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80093c4:	d903      	bls.n	80093ce <Set_Assist_Force_Timing_Params+0x22>
		t_gait_params->gait_period = 2000;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80093cc:	801a      	strh	r2, [r3, #0]
	}

	/* Calculate timing parameters for Plantar assistance force */
	Calculate_Assist_Force_Timing_Params(
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f103 0608 	add.w	r6, r3, #8
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f103 0c0a 	add.w	ip, r3, #10
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f103 0e0c 	add.w	lr, r3, #12
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	8892      	ldrh	r2, [r2, #4]
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	88c9      	ldrh	r1, [r1, #6]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	8800      	ldrh	r0, [r0, #0]
 80093f6:	687c      	ldr	r4, [r7, #4]
 80093f8:	8864      	ldrh	r4, [r4, #2]
 80093fa:	683d      	ldr	r5, [r7, #0]
 80093fc:	882d      	ldrh	r5, [r5, #0]
 80093fe:	9505      	str	r5, [sp, #20]
 8009400:	9404      	str	r4, [sp, #16]
 8009402:	9003      	str	r0, [sp, #12]
 8009404:	9102      	str	r1, [sp, #8]
 8009406:	9201      	str	r2, [sp, #4]
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	4643      	mov	r3, r8
 800940c:	4672      	mov	r2, lr
 800940e:	4661      	mov	r1, ip
 8009410:	4630      	mov	r0, r6
 8009412:	f7ff ff69 	bl	80092e8 <Calculate_Assist_Force_Timing_Params>
            t_assist_params->t_r_limit,    	// Rising time limit
            t_assist_params->t_f_limit,    	// Falling time limit
            t_gait_params->gait_period      // Gait period
	);
	/* Calculate timing parameters for Dorsiflexion assistance force */
	Calculate_Assist_Force_Timing_Params(
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f103 0608 	add.w	r6, r3, #8
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f103 0c0a 	add.w	ip, r3, #10
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f103 0e0c 	add.w	lr, r3, #12
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	8892      	ldrh	r2, [r2, #4]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	88c9      	ldrh	r1, [r1, #6]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	8800      	ldrh	r0, [r0, #0]
 800943e:	687c      	ldr	r4, [r7, #4]
 8009440:	8864      	ldrh	r4, [r4, #2]
 8009442:	683d      	ldr	r5, [r7, #0]
 8009444:	882d      	ldrh	r5, [r5, #0]
 8009446:	9505      	str	r5, [sp, #20]
 8009448:	9404      	str	r4, [sp, #16]
 800944a:	9003      	str	r0, [sp, #12]
 800944c:	9102      	str	r1, [sp, #8]
 800944e:	9201      	str	r2, [sp, #4]
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	4643      	mov	r3, r8
 8009454:	4672      	mov	r2, lr
 8009456:	4661      	mov	r1, ip
 8009458:	4630      	mov	r0, r6
 800945a:	f7ff ff45 	bl	80092e8 <Calculate_Assist_Force_Timing_Params>
			t_dorsi_params->t_f_D_end,     // Dorsi falling end time
            t_assist_params->t_r_limit,    	// Rising time limit
            t_assist_params->t_f_limit,   	// Falling time limit
            t_gait_params->gait_period      // Gait period
	);
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009468 <Get_Msg_Data_Type_Info>:
 */

#include "msg_data_object.h"

MsgDataTypeInfoStruct Get_Msg_Data_Type_Info(MsgDataTypeEnum t_type)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
	MsgDataTypeInfoStruct t_res;

    switch (t_type) {
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	2b09      	cmp	r3, #9
 8009478:	d848      	bhi.n	800950c <Get_Msg_Data_Type_Info+0xa4>
 800947a:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <Get_Msg_Data_Type_Info+0x18>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	080094a9 	.word	0x080094a9
 8009484:	080094b3 	.word	0x080094b3
 8009488:	080094bd 	.word	0x080094bd
 800948c:	080094c7 	.word	0x080094c7
 8009490:	080094d1 	.word	0x080094d1
 8009494:	080094db 	.word	0x080094db
 8009498:	080094e5 	.word	0x080094e5
 800949c:	080094ef 	.word	0x080094ef
 80094a0:	080094f9 	.word	0x080094f9
 80094a4:	08009503 	.word	0x08009503
    case e_Char   : t_res.name = "char"   ; t_res.size = sizeof(char);     break;
 80094a8:	4b20      	ldr	r3, [pc, #128]	; (800952c <Get_Msg_Data_Type_Info+0xc4>)
 80094aa:	60bb      	str	r3, [r7, #8]
 80094ac:	2301      	movs	r3, #1
 80094ae:	733b      	strb	r3, [r7, #12]
 80094b0:	e02d      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt8  : t_res.name = "uint8"  ; t_res.size = sizeof(uint8_t);  break;
 80094b2:	4b1f      	ldr	r3, [pc, #124]	; (8009530 <Get_Msg_Data_Type_Info+0xc8>)
 80094b4:	60bb      	str	r3, [r7, #8]
 80094b6:	2301      	movs	r3, #1
 80094b8:	733b      	strb	r3, [r7, #12]
 80094ba:	e028      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt16 : t_res.name = "uint16" ; t_res.size = sizeof(uint16_t); break;
 80094bc:	4b1d      	ldr	r3, [pc, #116]	; (8009534 <Get_Msg_Data_Type_Info+0xcc>)
 80094be:	60bb      	str	r3, [r7, #8]
 80094c0:	2302      	movs	r3, #2
 80094c2:	733b      	strb	r3, [r7, #12]
 80094c4:	e023      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    case e_UInt32 : t_res.name = "uint32" ; t_res.size = sizeof(uint32_t); break;
 80094c6:	4b1c      	ldr	r3, [pc, #112]	; (8009538 <Get_Msg_Data_Type_Info+0xd0>)
 80094c8:	60bb      	str	r3, [r7, #8]
 80094ca:	2304      	movs	r3, #4
 80094cc:	733b      	strb	r3, [r7, #12]
 80094ce:	e01e      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    case e_Int8   : t_res.name = "int8"   ; t_res.size = sizeof(int8_t);   break;
 80094d0:	4b1a      	ldr	r3, [pc, #104]	; (800953c <Get_Msg_Data_Type_Info+0xd4>)
 80094d2:	60bb      	str	r3, [r7, #8]
 80094d4:	2301      	movs	r3, #1
 80094d6:	733b      	strb	r3, [r7, #12]
 80094d8:	e019      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    case e_Int16  : t_res.name = "int16"  ; t_res.size = sizeof(int16_t);  break;
 80094da:	4b19      	ldr	r3, [pc, #100]	; (8009540 <Get_Msg_Data_Type_Info+0xd8>)
 80094dc:	60bb      	str	r3, [r7, #8]
 80094de:	2302      	movs	r3, #2
 80094e0:	733b      	strb	r3, [r7, #12]
 80094e2:	e014      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    case e_Int32  : t_res.name = "int32"  ; t_res.size = sizeof(int32_t);  break;
 80094e4:	4b17      	ldr	r3, [pc, #92]	; (8009544 <Get_Msg_Data_Type_Info+0xdc>)
 80094e6:	60bb      	str	r3, [r7, #8]
 80094e8:	2304      	movs	r3, #4
 80094ea:	733b      	strb	r3, [r7, #12]
 80094ec:	e00f      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    case e_Float32: t_res.name = "float32"; t_res.size = sizeof(float);    break;
 80094ee:	4b16      	ldr	r3, [pc, #88]	; (8009548 <Get_Msg_Data_Type_Info+0xe0>)
 80094f0:	60bb      	str	r3, [r7, #8]
 80094f2:	2304      	movs	r3, #4
 80094f4:	733b      	strb	r3, [r7, #12]
 80094f6:	e00a      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    case e_Float64: t_res.name = "float64"; t_res.size = sizeof(double);   break;
 80094f8:	4b14      	ldr	r3, [pc, #80]	; (800954c <Get_Msg_Data_Type_Info+0xe4>)
 80094fa:	60bb      	str	r3, [r7, #8]
 80094fc:	2308      	movs	r3, #8
 80094fe:	733b      	strb	r3, [r7, #12]
 8009500:	e005      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    case e_String10: t_res.name = "string10"; t_res.size = 32*sizeof(char);   break;
 8009502:	4b13      	ldr	r3, [pc, #76]	; (8009550 <Get_Msg_Data_Type_Info+0xe8>)
 8009504:	60bb      	str	r3, [r7, #8]
 8009506:	2320      	movs	r3, #32
 8009508:	733b      	strb	r3, [r7, #12]
 800950a:	e000      	b.n	800950e <Get_Msg_Data_Type_Info+0xa6>
    default: break;
 800950c:	bf00      	nop
    }
    return t_res;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	461a      	mov	r2, r3
 8009512:	f107 0308 	add.w	r3, r7, #8
 8009516:	e893 0003 	ldmia.w	r3, {r0, r1}
 800951a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	0800d3a4 	.word	0x0800d3a4
 8009530:	0800d3ac 	.word	0x0800d3ac
 8009534:	0800d3b4 	.word	0x0800d3b4
 8009538:	0800d3bc 	.word	0x0800d3bc
 800953c:	0800d3c4 	.word	0x0800d3c4
 8009540:	0800d3cc 	.word	0x0800d3cc
 8009544:	0800d3d4 	.word	0x0800d3d4
 8009548:	0800d3dc 	.word	0x0800d3dc
 800954c:	0800d3e4 	.word	0x0800d3e4
 8009550:	0800d3ec 	.word	0x0800d3ec

08009554 <Create_DOD>:
                                |__/                                                |__/ 
*/

// Create Data Object & Dictionary
void Create_DOD(uint8_t t_dod_id)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
	msg_dods[t_dod_id].id = t_dod_id;
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	4a07      	ldr	r2, [pc, #28]	; (8009580 <Create_DOD+0x2c>)
 8009562:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8009566:	fb01 f303 	mul.w	r3, r1, r3
 800956a:	4413      	add	r3, r2
 800956c:	3304      	adds	r3, #4
 800956e:	79fa      	ldrb	r2, [r7, #7]
 8009570:	701a      	strb	r2, [r3, #0]
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	240003d0 	.word	0x240003d0

08009584 <Create_PDO>:

void Create_PDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, uint8_t t_size, void* t_addr)
{
 8009584:	b5b0      	push	{r4, r5, r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	4604      	mov	r4, r0
 800958c:	4608      	mov	r0, r1
 800958e:	4611      	mov	r1, r2
 8009590:	461a      	mov	r2, r3
 8009592:	4623      	mov	r3, r4
 8009594:	71fb      	strb	r3, [r7, #7]
 8009596:	4603      	mov	r3, r0
 8009598:	71bb      	strb	r3, [r7, #6]
 800959a:	460b      	mov	r3, r1
 800959c:	717b      	strb	r3, [r7, #5]
 800959e:	4613      	mov	r3, r2
 80095a0:	713b      	strb	r3, [r7, #4]
    msg_dods[t_dod_id].pdos[t_obj_id].id   = t_obj_id;
 80095a2:	79f9      	ldrb	r1, [r7, #7]
 80095a4:	79ba      	ldrb	r2, [r7, #6]
 80095a6:	4853      	ldr	r0, [pc, #332]	; (80096f4 <Create_PDO+0x170>)
 80095a8:	4613      	mov	r3, r2
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	4413      	add	r3, r2
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80095b4:	fb02 f201 	mul.w	r2, r2, r1
 80095b8:	4413      	add	r3, r2
 80095ba:	4403      	add	r3, r0
 80095bc:	3308      	adds	r3, #8
 80095be:	79ba      	ldrb	r2, [r7, #6]
 80095c0:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].type = t_type;
 80095c2:	79f9      	ldrb	r1, [r7, #7]
 80095c4:	79ba      	ldrb	r2, [r7, #6]
 80095c6:	484b      	ldr	r0, [pc, #300]	; (80096f4 <Create_PDO+0x170>)
 80095c8:	4613      	mov	r3, r2
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	4413      	add	r3, r2
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80095d4:	fb02 f201 	mul.w	r2, r2, r1
 80095d8:	4413      	add	r3, r2
 80095da:	4403      	add	r3, r0
 80095dc:	3310      	adds	r3, #16
 80095de:	797a      	ldrb	r2, [r7, #5]
 80095e0:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].size  = t_size;
 80095e2:	79f9      	ldrb	r1, [r7, #7]
 80095e4:	79ba      	ldrb	r2, [r7, #6]
 80095e6:	4843      	ldr	r0, [pc, #268]	; (80096f4 <Create_PDO+0x170>)
 80095e8:	4613      	mov	r3, r2
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	4413      	add	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80095f4:	fb02 f201 	mul.w	r2, r2, r1
 80095f8:	4413      	add	r3, r2
 80095fa:	4403      	add	r3, r0
 80095fc:	3311      	adds	r3, #17
 80095fe:	793a      	ldrb	r2, [r7, #4]
 8009600:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].addr = t_addr;
 8009602:	79f9      	ldrb	r1, [r7, #7]
 8009604:	79ba      	ldrb	r2, [r7, #6]
 8009606:	483b      	ldr	r0, [pc, #236]	; (80096f4 <Create_PDO+0x170>)
 8009608:	4613      	mov	r3, r2
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	4413      	add	r3, r2
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009614:	fb02 f201 	mul.w	r2, r2, r1
 8009618:	4413      	add	r3, r2
 800961a:	4403      	add	r3, r0
 800961c:	3314      	adds	r3, #20
 800961e:	6a3a      	ldr	r2, [r7, #32]
 8009620:	601a      	str	r2, [r3, #0]

    msg_dods[t_dod_id].pdos[t_obj_id].data_size  = Get_Msg_Data_Type_Info(t_type).size * t_size;
 8009622:	f107 0308 	add.w	r3, r7, #8
 8009626:	797a      	ldrb	r2, [r7, #5]
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff ff1c 	bl	8009468 <Get_Msg_Data_Type_Info>
 8009630:	7b3a      	ldrb	r2, [r7, #12]
 8009632:	79f9      	ldrb	r1, [r7, #7]
 8009634:	79bb      	ldrb	r3, [r7, #6]
 8009636:	7938      	ldrb	r0, [r7, #4]
 8009638:	fb10 f202 	smulbb	r2, r0, r2
 800963c:	b2d4      	uxtb	r4, r2
 800963e:	482d      	ldr	r0, [pc, #180]	; (80096f4 <Create_PDO+0x170>)
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	4613      	mov	r3, r2
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	4413      	add	r3, r2
 8009648:	00db      	lsls	r3, r3, #3
 800964a:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800964e:	fb02 f201 	mul.w	r2, r2, r1
 8009652:	4413      	add	r3, r2
 8009654:	4403      	add	r3, r0
 8009656:	3304      	adds	r3, #4
 8009658:	4622      	mov	r2, r4
 800965a:	701a      	strb	r2, [r3, #0]
    msg_dods[t_dod_id].pdos[t_obj_id].last_pub = malloc(msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 800965c:	79f9      	ldrb	r1, [r7, #7]
 800965e:	79bb      	ldrb	r3, [r7, #6]
 8009660:	4824      	ldr	r0, [pc, #144]	; (80096f4 <Create_PDO+0x170>)
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	4613      	mov	r3, r2
 8009666:	005b      	lsls	r3, r3, #1
 8009668:	4413      	add	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009670:	fb02 f201 	mul.w	r2, r2, r1
 8009674:	4413      	add	r3, r2
 8009676:	4403      	add	r3, r0
 8009678:	3304      	adds	r3, #4
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	79fc      	ldrb	r4, [r7, #7]
 800967e:	79bd      	ldrb	r5, [r7, #6]
 8009680:	4618      	mov	r0, r3
 8009682:	f001 ff3d 	bl	800b500 <malloc>
 8009686:	4603      	mov	r3, r0
 8009688:	4618      	mov	r0, r3
 800968a:	491a      	ldr	r1, [pc, #104]	; (80096f4 <Create_PDO+0x170>)
 800968c:	1c6a      	adds	r2, r5, #1
 800968e:	4613      	mov	r3, r2
 8009690:	005b      	lsls	r3, r3, #1
 8009692:	4413      	add	r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800969a:	fb02 f204 	mul.w	r2, r2, r4
 800969e:	4413      	add	r3, r2
 80096a0:	440b      	add	r3, r1
 80096a2:	6018      	str	r0, [r3, #0]

    memset(msg_dods[t_dod_id].pdos[t_obj_id].last_pub, 0xFF, msg_dods[t_dod_id].pdos[t_obj_id].data_size);
 80096a4:	79f9      	ldrb	r1, [r7, #7]
 80096a6:	79bb      	ldrb	r3, [r7, #6]
 80096a8:	4812      	ldr	r0, [pc, #72]	; (80096f4 <Create_PDO+0x170>)
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	4613      	mov	r3, r2
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	4413      	add	r3, r2
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80096b8:	fb02 f201 	mul.w	r2, r2, r1
 80096bc:	4413      	add	r3, r2
 80096be:	4403      	add	r3, r0
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	79f9      	ldrb	r1, [r7, #7]
 80096c4:	79bb      	ldrb	r3, [r7, #6]
 80096c6:	4c0b      	ldr	r4, [pc, #44]	; (80096f4 <Create_PDO+0x170>)
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	4613      	mov	r3, r2
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	4413      	add	r3, r2
 80096d0:	00db      	lsls	r3, r3, #3
 80096d2:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80096d6:	fb02 f201 	mul.w	r2, r2, r1
 80096da:	4413      	add	r3, r2
 80096dc:	4423      	add	r3, r4
 80096de:	3304      	adds	r3, #4
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	21ff      	movs	r1, #255	; 0xff
 80096e6:	f001 ff29 	bl	800b53c <memset>
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bdb0      	pop	{r4, r5, r7, pc}
 80096f2:	bf00      	nop
 80096f4:	240003d0 	.word	0x240003d0

080096f8 <Create_SDO>:

void Create_SDO(uint8_t t_dod_id, uint8_t t_obj_id, MsgDataTypeEnum t_type, MsgSDOCallback t_callback)
{
 80096f8:	b590      	push	{r4, r7, lr}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	4603      	mov	r3, r0
 8009702:	71fb      	strb	r3, [r7, #7]
 8009704:	460b      	mov	r3, r1
 8009706:	71bb      	strb	r3, [r7, #6]
 8009708:	4613      	mov	r3, r2
 800970a:	717b      	strb	r3, [r7, #5]
	msg_dods[t_dod_id].sdos[t_obj_id].id        = t_obj_id;
 800970c:	79f9      	ldrb	r1, [r7, #7]
 800970e:	79ba      	ldrb	r2, [r7, #6]
 8009710:	4840      	ldr	r0, [pc, #256]	; (8009814 <Create_SDO+0x11c>)
 8009712:	4613      	mov	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800971e:	fb02 f201 	mul.w	r2, r2, r1
 8009722:	4413      	add	r3, r2
 8009724:	4403      	add	r3, r0
 8009726:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800972a:	79ba      	ldrb	r2, [r7, #6]
 800972c:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].type      = t_type;
 800972e:	79f9      	ldrb	r1, [r7, #7]
 8009730:	79ba      	ldrb	r2, [r7, #6]
 8009732:	4838      	ldr	r0, [pc, #224]	; (8009814 <Create_SDO+0x11c>)
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009740:	fb02 f201 	mul.w	r2, r2, r1
 8009744:	4413      	add	r3, r2
 8009746:	4403      	add	r3, r0
 8009748:	f203 23d9 	addw	r3, r3, #729	; 0x2d9
 800974c:	797a      	ldrb	r2, [r7, #5]
 800974e:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].callback  = t_callback;
 8009750:	79f9      	ldrb	r1, [r7, #7]
 8009752:	79ba      	ldrb	r2, [r7, #6]
 8009754:	482f      	ldr	r0, [pc, #188]	; (8009814 <Create_SDO+0x11c>)
 8009756:	4613      	mov	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009762:	fb02 f201 	mul.w	r2, r2, r1
 8009766:	4413      	add	r3, r2
 8009768:	4403      	add	r3, r0
 800976a:	f503 7337 	add.w	r3, r3, #732	; 0x2dc
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	601a      	str	r2, [r3, #0]

	msg_dods[t_dod_id].sdos[t_obj_id].args.status = DATA_OBJECT_SDO_IDLE;
 8009772:	79f9      	ldrb	r1, [r7, #7]
 8009774:	79ba      	ldrb	r2, [r7, #6]
 8009776:	4827      	ldr	r0, [pc, #156]	; (8009814 <Create_SDO+0x11c>)
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009784:	fb02 f201 	mul.w	r2, r2, r1
 8009788:	4413      	add	r3, r2
 800978a:	4403      	add	r3, r0
 800978c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8009790:	2202      	movs	r2, #2
 8009792:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.size   = 0;
 8009794:	79f9      	ldrb	r1, [r7, #7]
 8009796:	79ba      	ldrb	r2, [r7, #6]
 8009798:	481e      	ldr	r0, [pc, #120]	; (8009814 <Create_SDO+0x11c>)
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80097a6:	fb02 f201 	mul.w	r2, r2, r1
 80097aa:	4413      	add	r3, r2
 80097ac:	4403      	add	r3, r0
 80097ae:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80097b2:	2200      	movs	r2, #0
 80097b4:	701a      	strb	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data   = NULL;
 80097b6:	79f9      	ldrb	r1, [r7, #7]
 80097b8:	79ba      	ldrb	r2, [r7, #6]
 80097ba:	4816      	ldr	r0, [pc, #88]	; (8009814 <Create_SDO+0x11c>)
 80097bc:	4613      	mov	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80097c8:	fb02 f201 	mul.w	r2, r2, r1
 80097cc:	4413      	add	r3, r2
 80097ce:	4403      	add	r3, r0
 80097d0:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 80097d4:	2200      	movs	r2, #0
 80097d6:	601a      	str	r2, [r3, #0]
	msg_dods[t_dod_id].sdos[t_obj_id].args.data_size = Get_Msg_Data_Type_Info(t_type).size;
 80097d8:	f107 0308 	add.w	r3, r7, #8
 80097dc:	797a      	ldrb	r2, [r7, #5]
 80097de:	4611      	mov	r1, r2
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff fe41 	bl	8009468 <Get_Msg_Data_Type_Info>
 80097e6:	7b3b      	ldrb	r3, [r7, #12]
 80097e8:	79f9      	ldrb	r1, [r7, #7]
 80097ea:	79ba      	ldrb	r2, [r7, #6]
 80097ec:	b29c      	uxth	r4, r3
 80097ee:	4809      	ldr	r0, [pc, #36]	; (8009814 <Create_SDO+0x11c>)
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80097fc:	fb02 f201 	mul.w	r2, r2, r1
 8009800:	4413      	add	r3, r2
 8009802:	4403      	add	r3, r0
 8009804:	f203 23e6 	addw	r3, r3, #742	; 0x2e6
 8009808:	4622      	mov	r2, r4
 800980a:	801a      	strh	r2, [r3, #0]
}
 800980c:	bf00      	nop
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	bd90      	pop	{r4, r7, pc}
 8009814:	240003d0 	.word	0x240003d0

08009818 <Find_PDO>:

MsgPDOStruct* Find_PDO(uint8_t t_dod_id, uint8_t t_id)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	460a      	mov	r2, r1
 8009822:	71fb      	strb	r3, [r7, #7]
 8009824:	4613      	mov	r3, r2
 8009826:	71bb      	strb	r3, [r7, #6]
	return &msg_dods[t_dod_id].pdos[t_id];
 8009828:	79f9      	ldrb	r1, [r7, #7]
 800982a:	79ba      	ldrb	r2, [r7, #6]
 800982c:	4613      	mov	r3, r2
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	4413      	add	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009838:	fb02 f201 	mul.w	r2, r2, r1
 800983c:	4413      	add	r3, r2
 800983e:	3308      	adds	r3, #8
 8009840:	4a03      	ldr	r2, [pc, #12]	; (8009850 <Find_PDO+0x38>)
 8009842:	4413      	add	r3, r2
}
 8009844:	4618      	mov	r0, r3
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	240003d0 	.word	0x240003d0

08009854 <Find_SDO>:

MsgSDOStruct* Find_SDO(uint8_t t_dod_id, uint8_t t_id)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	460a      	mov	r2, r1
 800985e:	71fb      	strb	r3, [r7, #7]
 8009860:	4613      	mov	r3, r2
 8009862:	71bb      	strb	r3, [r7, #6]
	return &msg_dods[t_dod_id].sdos[t_id];
 8009864:	79f9      	ldrb	r1, [r7, #7]
 8009866:	79ba      	ldrb	r2, [r7, #6]
 8009868:	4613      	mov	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8009874:	fb02 f201 	mul.w	r2, r2, r1
 8009878:	4413      	add	r3, r2
 800987a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800987e:	4a04      	ldr	r2, [pc, #16]	; (8009890 <Find_SDO+0x3c>)
 8009880:	4413      	add	r3, r2
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	240003d0 	.word	0x240003d0

08009894 <Set_PDO>:

uint16_t Set_PDO(MsgPDOStruct* t_pdo, void* t_data)
{    
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
    memcpy(t_data, t_pdo->addr, t_pdo->data_size);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68d9      	ldr	r1, [r3, #12]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	7d1b      	ldrb	r3, [r3, #20]
 80098a6:	461a      	mov	r2, r3
 80098a8:	6838      	ldr	r0, [r7, #0]
 80098aa:	f001 fe39 	bl	800b520 <memcpy>
    memcpy(t_pdo->last_pub, t_pdo->addr, t_pdo->data_size);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6918      	ldr	r0, [r3, #16]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68d9      	ldr	r1, [r3, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	7d1b      	ldrb	r3, [r3, #20]
 80098ba:	461a      	mov	r2, r3
 80098bc:	f001 fe30 	bl	800b520 <memcpy>
    return t_pdo->data_size;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	7d1b      	ldrb	r3, [r3, #20]
 80098c4:	b29b      	uxth	r3, r3
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <Get_PDO>:

uint16_t Get_PDO(MsgPDOStruct* t_pdo, void* t_data)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b082      	sub	sp, #8
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	6039      	str	r1, [r7, #0]
    memcpy(t_pdo->addr, t_data, t_pdo->data_size);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68d8      	ldr	r0, [r3, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	7d1b      	ldrb	r3, [r3, #20]
 80098e0:	461a      	mov	r2, r3
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	f001 fe1c 	bl	800b520 <memcpy>
    return t_pdo->data_size;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	7d1b      	ldrb	r3, [r3, #20]
 80098ec:	b29b      	uxth	r3, r3
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <Call_SDO>:

uint16_t Call_SDO(MsgSDOStruct* t_sdo, MsgSDOargs* t_req)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
    if (t_sdo->args.data != NULL) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d007      	beq.n	8009918 <Call_SDO+0x22>
        free(t_sdo->args.data);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	4618      	mov	r0, r3
 800990e:	f001 fdff 	bl	800b510 <free>
        t_sdo->args.data = NULL;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	609a      	str	r2, [r3, #8]
    }

    t_sdo->args.status = DATA_OBJECT_SDO_IDLE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	741a      	strb	r2, [r3, #16]
    t_sdo->callback(t_req, &t_sdo->args);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	3208      	adds	r2, #8
 8009926:	4611      	mov	r1, r2
 8009928:	6838      	ldr	r0, [r7, #0]
 800992a:	4798      	blx	r3
    return t_req->size * t_sdo->args.data_size;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	791b      	ldrb	r3, [r3, #4]
 8009930:	b29a      	uxth	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	89db      	ldrh	r3, [r3, #14]
 8009936:	fb12 f303 	smulbb	r3, r2, r3
 800993a:	b29b      	uxth	r3, r3
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <Set_SDO_args>:

    return &t_sdo->args;
}

uint16_t Set_SDO_args(MsgSDOStruct* t_sdo, MsgSDOargs* t_args)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
    // Copy status
	t_sdo->args.status = t_args->status;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	741a      	strb	r2, [r3, #16]
    
    // Copy size
    int total_size = t_sdo->args.data_size * t_args->size;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	89db      	ldrh	r3, [r3, #14]
 800995c:	461a      	mov	r2, r3
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	791b      	ldrb	r3, [r3, #4]
 8009962:	fb03 f302 	mul.w	r3, r3, r2
 8009966:	60fb      	str	r3, [r7, #12]
    t_sdo->args.size = t_args->size;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	791a      	ldrb	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	731a      	strb	r2, [r3, #12]
    if (total_size <= 0) {
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	dc01      	bgt.n	800997a <Set_SDO_args+0x36>
        return 0;
 8009976:	2300      	movs	r3, #0
 8009978:	e01d      	b.n	80099b6 <Set_SDO_args+0x72>
    }

    // Copy data
    if (t_sdo->args.data != NULL) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d007      	beq.n	8009992 <Set_SDO_args+0x4e>
        free(t_sdo->args.data);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	4618      	mov	r0, r3
 8009988:	f001 fdc2 	bl	800b510 <free>
        t_sdo->args.data = NULL;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	609a      	str	r2, [r3, #8]
    }
    t_sdo->args.data = malloc(total_size);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4618      	mov	r0, r3
 8009996:	f001 fdb3 	bl	800b500 <malloc>
 800999a:	4603      	mov	r3, r0
 800999c:	461a      	mov	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	609a      	str	r2, [r3, #8]
    memcpy(t_sdo->args.data, t_args->data, total_size);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6898      	ldr	r0, [r3, #8]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	4619      	mov	r1, r3
 80099ae:	f001 fdb7 	bl	800b520 <memcpy>

    return total_size;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	b29b      	uxth	r3, r3
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <Convert_Byte_Length>:
//
//    return ((temp1<<3)|(temp2<<2)|(temp3<<1)|(temp4));
//}

static int Convert_Byte_Length(uint8_t t_length)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	4603      	mov	r3, r0
 80099c6:	71fb      	strb	r3, [r7, #7]
    if(t_length == 0 )                       		{return FDCAN_DLC_BYTES_0; }
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <Convert_Byte_Length+0x14>
 80099ce:	2300      	movs	r3, #0
 80099d0:	e06f      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if(t_length == 1 )                  		{return FDCAN_DLC_BYTES_1; }
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d102      	bne.n	80099de <Convert_Byte_Length+0x20>
 80099d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099dc:	e069      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if(t_length == 2 )                  		{return FDCAN_DLC_BYTES_2; }
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d102      	bne.n	80099ea <Convert_Byte_Length+0x2c>
 80099e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80099e8:	e063      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if(t_length == 3 )                  		{return FDCAN_DLC_BYTES_3; }
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d102      	bne.n	80099f6 <Convert_Byte_Length+0x38>
 80099f0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80099f4:	e05d      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if(t_length == 4 )                  		{return FDCAN_DLC_BYTES_4; }
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d102      	bne.n	8009a02 <Convert_Byte_Length+0x44>
 80099fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a00:	e057      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if(t_length == 5 )                  		{return FDCAN_DLC_BYTES_5; }
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	d102      	bne.n	8009a0e <Convert_Byte_Length+0x50>
 8009a08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009a0c:	e051      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if(t_length == 6 )                  		{return FDCAN_DLC_BYTES_6; }
 8009a0e:	79fb      	ldrb	r3, [r7, #7]
 8009a10:	2b06      	cmp	r3, #6
 8009a12:	d102      	bne.n	8009a1a <Convert_Byte_Length+0x5c>
 8009a14:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8009a18:	e04b      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if(t_length == 7 )                  		{return FDCAN_DLC_BYTES_7; }
 8009a1a:	79fb      	ldrb	r3, [r7, #7]
 8009a1c:	2b07      	cmp	r3, #7
 8009a1e:	d102      	bne.n	8009a26 <Convert_Byte_Length+0x68>
 8009a20:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8009a24:	e045      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if(t_length == 8 )                  		{return FDCAN_DLC_BYTES_8; }
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d102      	bne.n	8009a32 <Convert_Byte_Length+0x74>
 8009a2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a30:	e03f      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if((t_length > 8 ) && (t_length <= 12 )) 	{return FDCAN_DLC_BYTES_12; }
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	2b08      	cmp	r3, #8
 8009a36:	d905      	bls.n	8009a44 <Convert_Byte_Length+0x86>
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b0c      	cmp	r3, #12
 8009a3c:	d802      	bhi.n	8009a44 <Convert_Byte_Length+0x86>
 8009a3e:	f44f 2310 	mov.w	r3, #589824	; 0x90000
 8009a42:	e036      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if((t_length > 12 ) && (t_length <= 16 ))	{return FDCAN_DLC_BYTES_16; }
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	2b0c      	cmp	r3, #12
 8009a48:	d905      	bls.n	8009a56 <Convert_Byte_Length+0x98>
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	2b10      	cmp	r3, #16
 8009a4e:	d802      	bhi.n	8009a56 <Convert_Byte_Length+0x98>
 8009a50:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8009a54:	e02d      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if((t_length > 16 ) && (t_length <= 20 ))	{return FDCAN_DLC_BYTES_20; }
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	2b10      	cmp	r3, #16
 8009a5a:	d905      	bls.n	8009a68 <Convert_Byte_Length+0xaa>
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	2b14      	cmp	r3, #20
 8009a60:	d802      	bhi.n	8009a68 <Convert_Byte_Length+0xaa>
 8009a62:	f44f 2330 	mov.w	r3, #720896	; 0xb0000
 8009a66:	e024      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if((t_length > 20 ) && (t_length <= 24 ))	{return FDCAN_DLC_BYTES_24; }
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	2b14      	cmp	r3, #20
 8009a6c:	d905      	bls.n	8009a7a <Convert_Byte_Length+0xbc>
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	2b18      	cmp	r3, #24
 8009a72:	d802      	bhi.n	8009a7a <Convert_Byte_Length+0xbc>
 8009a74:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8009a78:	e01b      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if((t_length > 24 ) && (t_length <= 32 ))	{return FDCAN_DLC_BYTES_32; }
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	2b18      	cmp	r3, #24
 8009a7e:	d905      	bls.n	8009a8c <Convert_Byte_Length+0xce>
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	d802      	bhi.n	8009a8c <Convert_Byte_Length+0xce>
 8009a86:	f44f 2350 	mov.w	r3, #851968	; 0xd0000
 8009a8a:	e012      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if((t_length > 32 ) && (t_length <= 48 ))	{return FDCAN_DLC_BYTES_48; }
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	2b20      	cmp	r3, #32
 8009a90:	d905      	bls.n	8009a9e <Convert_Byte_Length+0xe0>
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	2b30      	cmp	r3, #48	; 0x30
 8009a96:	d802      	bhi.n	8009a9e <Convert_Byte_Length+0xe0>
 8009a98:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8009a9c:	e009      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else if((t_length > 48 ) && (t_length <= 64 ))	{return FDCAN_DLC_BYTES_64; }
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	2b30      	cmp	r3, #48	; 0x30
 8009aa2:	d905      	bls.n	8009ab0 <Convert_Byte_Length+0xf2>
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	2b40      	cmp	r3, #64	; 0x40
 8009aa8:	d802      	bhi.n	8009ab0 <Convert_Byte_Length+0xf2>
 8009aaa:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8009aae:	e000      	b.n	8009ab2 <Convert_Byte_Length+0xf4>
    else                                			{return FDCAN_DLC_BYTES_0; }
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <Get_Header>:

static MsgDataObjectHeader Get_Header(uint8_t* t_byte_arr)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b085      	sub	sp, #20
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	b29b      	uxth	r3, r3
	MsgDataObjectHeader t_header;
    memcpy(&t_header, t_byte_arr, sizeof(MsgDataObjectHeader));
 8009acc:	813b      	strh	r3, [r7, #8]
    return t_header;
 8009ace:	893b      	ldrh	r3, [r7, #8]
 8009ad0:	81bb      	strh	r3, [r7, #12]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	7b3a      	ldrb	r2, [r7, #12]
 8009ad6:	f362 0307 	bfi	r3, r2, #0, #8
 8009ada:	7b7a      	ldrb	r2, [r7, #13]
 8009adc:	f362 230f 	bfi	r3, r2, #8, #8
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <Recv_EMCY>:
    free(t_tx_data);
    t_tx_data = NULL;
}

static void Recv_EMCY(uint8_t* t_byte_arr, uint32_t* t_err_code)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
    memcpy(t_err_code, t_byte_arr, ERR_CODE_SIZE);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	601a      	str	r2, [r3, #0]
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <Convert_Bytes_to_SDO_req>:
 |___/___/ \___/  |_|_\/_/\_\
                             
*/

static MsgSDOargs Convert_Bytes_to_SDO_req(uint8_t* t_byte_arr, uint16_t *t_byte_len)
{
 8009b0c:	b590      	push	{r4, r7, lr}
 8009b0e:	b08b      	sub	sp, #44	; 0x2c
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
	MsgSDOargs t_req;
    *t_byte_len = 0;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	801a      	strh	r2, [r3, #0]

    int t_idx = sizeof(t_req.status);
 8009b1e:	2301      	movs	r3, #1
 8009b20:	627b      	str	r3, [r7, #36]	; 0x24
    int t_len = sizeof(t_req.size);
 8009b22:	2301      	movs	r3, #1
 8009b24:	623b      	str	r3, [r7, #32]

    memcpy(&t_req.size, &t_byte_arr[t_idx], t_len);
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	18d1      	adds	r1, r2, r3
 8009b2c:	6a3a      	ldr	r2, [r7, #32]
 8009b2e:	f107 0314 	add.w	r3, r7, #20
 8009b32:	3304      	adds	r3, #4
 8009b34:	4618      	mov	r0, r3
 8009b36:	f001 fcf3 	bl	800b520 <memcpy>
    *t_byte_len += t_len;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	881a      	ldrh	r2, [r3, #0]
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	4413      	add	r3, r2
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	801a      	strh	r2, [r3, #0]

    t_req.data = &t_byte_arr[t_idx + t_len];
 8009b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	4413      	add	r3, r2
 8009b50:	461a      	mov	r2, r3
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4413      	add	r3, r2
 8009b56:	617b      	str	r3, [r7, #20]

    t_req.status = t_byte_arr[0];
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	b25b      	sxtb	r3, r3
 8009b5e:	773b      	strb	r3, [r7, #28]
    *t_byte_len += 1;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	881b      	ldrh	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	801a      	strh	r2, [r3, #0]

    return t_req;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	461c      	mov	r4, r3
 8009b70:	f107 0314 	add.w	r3, r7, #20
 8009b74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	372c      	adds	r7, #44	; 0x2c
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd90      	pop	{r4, r7, pc}

08009b84 <Read_SDO>:

static int Read_SDO(uint8_t* t_byte_arr)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b090      	sub	sp, #64	; 0x40
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
    int t_byte_read = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	63bb      	str	r3, [r7, #56]	; 0x38
    MsgDataObjectHeader t_header = Get_Header(t_byte_arr);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff ff94 	bl	8009abe <Get_Header>
 8009b96:	4603      	mov	r3, r0
 8009b98:	83bb      	strh	r3, [r7, #28]
    t_byte_read += sizeof(MsgDataObjectHeader);
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	3302      	adds	r3, #2
 8009b9e:	63bb      	str	r3, [r7, #56]	; 0x38

    MsgSDOStruct* t_sdo = Find_SDO(t_header.dod_id, t_header.obj_id);
 8009ba0:	7f3b      	ldrb	r3, [r7, #28]
 8009ba2:	7f7a      	ldrb	r2, [r7, #29]
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7ff fe54 	bl	8009854 <Find_SDO>
 8009bac:	6378      	str	r0, [r7, #52]	; 0x34
    if (t_sdo == NULL) {
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d102      	bne.n	8009bba <Read_SDO+0x36>
        //TODO: Cannot Find SDO ERROR
        return -2;
 8009bb4:	f06f 0301 	mvn.w	r3, #1
 8009bb8:	e0c9      	b.n	8009d4e <Read_SDO+0x1ca>
    }

    uint16_t t_req_bytes = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	837b      	strh	r3, [r7, #26]
    MsgSDOargs t_req = Convert_Bytes_to_SDO_req(t_byte_arr + t_byte_read, &t_req_bytes);
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	18d1      	adds	r1, r2, r3
 8009bc4:	f107 030c 	add.w	r3, r7, #12
 8009bc8:	f107 021a 	add.w	r2, r7, #26
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff ff9d 	bl	8009b0c <Convert_Bytes_to_SDO_req>
    t_req.data_size = t_sdo->args.data_size; // Copy SDO info
 8009bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd4:	89db      	ldrh	r3, [r3, #14]
 8009bd6:	827b      	strh	r3, [r7, #18]
    t_byte_read += t_req_bytes;
 8009bd8:	8b7b      	ldrh	r3, [r7, #26]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	4413      	add	r3, r2
 8009be0:	63bb      	str	r3, [r7, #56]	; 0x38

    uint16_t t_n_bytes = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    if (t_req.status == DATA_OBJECT_SDO_REQU) {
 8009be6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	f040 8095 	bne.w	8009d1a <Read_SDO+0x196>
    	t_n_bytes = Call_SDO(t_sdo, &t_req);
 8009bf0:	f107 030c 	add.w	r3, r7, #12
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bf8:	f7ff fe7d 	bl	80098f6 <Call_SDO>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        cvector_push_back(sdo_res_list, t_header); // Assign Response
 8009c00:	4b55      	ldr	r3, [pc, #340]	; (8009d58 <Read_SDO+0x1d4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d004      	beq.n	8009c12 <Read_SDO+0x8e>
 8009c08:	4b53      	ldr	r3, [pc, #332]	; (8009d58 <Read_SDO+0x1d4>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3b04      	subs	r3, #4
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	e000      	b.n	8009c14 <Read_SDO+0x90>
 8009c12:	2300      	movs	r3, #0
 8009c14:	633b      	str	r3, [r7, #48]	; 0x30
 8009c16:	4b50      	ldr	r3, [pc, #320]	; (8009d58 <Read_SDO+0x1d4>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d004      	beq.n	8009c28 <Read_SDO+0xa4>
 8009c1e:	4b4e      	ldr	r3, [pc, #312]	; (8009d58 <Read_SDO+0x1d4>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8009c26:	e000      	b.n	8009c2a <Read_SDO+0xa6>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d34d      	bcc.n	8009ccc <Read_SDO+0x148>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	3305      	adds	r3, #5
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c38:	4b47      	ldr	r3, [pc, #284]	; (8009d58 <Read_SDO+0x1d4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d020      	beq.n	8009c82 <Read_SDO+0xfe>
 8009c40:	4b45      	ldr	r3, [pc, #276]	; (8009d58 <Read_SDO+0x1d4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3b08      	subs	r3, #8
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
 8009c48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c4c:	f002 f816 	bl	800bc7c <realloc>
 8009c50:	6238      	str	r0, [r7, #32]
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d105      	bne.n	8009c64 <Read_SDO+0xe0>
 8009c58:	4b40      	ldr	r3, [pc, #256]	; (8009d5c <Read_SDO+0x1d8>)
 8009c5a:	4a41      	ldr	r2, [pc, #260]	; (8009d60 <Read_SDO+0x1dc>)
 8009c5c:	2183      	movs	r1, #131	; 0x83
 8009c5e:	4841      	ldr	r0, [pc, #260]	; (8009d64 <Read_SDO+0x1e0>)
 8009c60:	f001 fbf4 	bl	800b44c <__assert_func>
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	3308      	adds	r3, #8
 8009c68:	4a3b      	ldr	r2, [pc, #236]	; (8009d58 <Read_SDO+0x1d4>)
 8009c6a:	6013      	str	r3, [r2, #0]
 8009c6c:	4b3a      	ldr	r3, [pc, #232]	; (8009d58 <Read_SDO+0x1d4>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d02b      	beq.n	8009ccc <Read_SDO+0x148>
 8009c74:	4b38      	ldr	r3, [pc, #224]	; (8009d58 <Read_SDO+0x1d4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3b04      	subs	r3, #4
 8009c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c7c:	3201      	adds	r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	e024      	b.n	8009ccc <Read_SDO+0x148>
 8009c82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c84:	f001 fc3c 	bl	800b500 <malloc>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d105      	bne.n	8009c9e <Read_SDO+0x11a>
 8009c92:	4b35      	ldr	r3, [pc, #212]	; (8009d68 <Read_SDO+0x1e4>)
 8009c94:	4a32      	ldr	r2, [pc, #200]	; (8009d60 <Read_SDO+0x1dc>)
 8009c96:	2183      	movs	r1, #131	; 0x83
 8009c98:	4832      	ldr	r0, [pc, #200]	; (8009d64 <Read_SDO+0x1e0>)
 8009c9a:	f001 fbd7 	bl	800b44c <__assert_func>
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	3308      	adds	r3, #8
 8009ca2:	4a2d      	ldr	r2, [pc, #180]	; (8009d58 <Read_SDO+0x1d4>)
 8009ca4:	6013      	str	r3, [r2, #0]
 8009ca6:	4b2c      	ldr	r3, [pc, #176]	; (8009d58 <Read_SDO+0x1d4>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <Read_SDO+0x136>
 8009cae:	4b2a      	ldr	r3, [pc, #168]	; (8009d58 <Read_SDO+0x1d4>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3b04      	subs	r3, #4
 8009cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb6:	3201      	adds	r2, #1
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	4b27      	ldr	r3, [pc, #156]	; (8009d58 <Read_SDO+0x1d4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d004      	beq.n	8009ccc <Read_SDO+0x148>
 8009cc2:	4b25      	ldr	r3, [pc, #148]	; (8009d58 <Read_SDO+0x1d4>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3b08      	subs	r3, #8
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	4b22      	ldr	r3, [pc, #136]	; (8009d58 <Read_SDO+0x1d4>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	4b21      	ldr	r3, [pc, #132]	; (8009d58 <Read_SDO+0x1d4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <Read_SDO+0x160>
 8009cd8:	4b1f      	ldr	r3, [pc, #124]	; (8009d58 <Read_SDO+0x1d4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3b08      	subs	r3, #8
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	e000      	b.n	8009ce6 <Read_SDO+0x162>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4413      	add	r3, r2
 8009ce8:	461a      	mov	r2, r3
 8009cea:	f107 031c 	add.w	r3, r7, #28
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	8013      	strh	r3, [r2, #0]
 8009cf2:	4b19      	ldr	r3, [pc, #100]	; (8009d58 <Read_SDO+0x1d4>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d024      	beq.n	8009d44 <Read_SDO+0x1c0>
 8009cfa:	4b17      	ldr	r3, [pc, #92]	; (8009d58 <Read_SDO+0x1d4>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d005      	beq.n	8009d0e <Read_SDO+0x18a>
 8009d02:	4b15      	ldr	r3, [pc, #84]	; (8009d58 <Read_SDO+0x1d4>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3b08      	subs	r3, #8
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	e000      	b.n	8009d10 <Read_SDO+0x18c>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4a11      	ldr	r2, [pc, #68]	; (8009d58 <Read_SDO+0x1d4>)
 8009d12:	6812      	ldr	r2, [r2, #0]
 8009d14:	3a08      	subs	r2, #8
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	e014      	b.n	8009d44 <Read_SDO+0x1c0>
    } else if(t_req.status == DATA_OBJECT_SDO_SUCC || t_req.status == DATA_OBJECT_SDO_FAIL) {
 8009d1a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d004      	beq.n	8009d2c <Read_SDO+0x1a8>
 8009d22:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2a:	d108      	bne.n	8009d3e <Read_SDO+0x1ba>
    	t_n_bytes = Set_SDO_args(t_sdo, &t_req);
 8009d2c:	f107 030c 	add.w	r3, r7, #12
 8009d30:	4619      	mov	r1, r3
 8009d32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009d34:	f7ff fe06 	bl	8009944 <Set_SDO_args>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if (t_n_bytes < 0) {
 8009d3c:	e002      	b.n	8009d44 <Read_SDO+0x1c0>
            //TODO: Set SDO Argument ERROR
            return -1;
        }
    } else {
        //TODO: Read SDO Status ERROR
        return -1;
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d42:	e004      	b.n	8009d4e <Read_SDO+0x1ca>
    }

    t_byte_read += t_n_bytes;
 8009d44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d48:	4413      	add	r3, r2
 8009d4a:	63bb      	str	r3, [r7, #56]	; 0x38
    return t_byte_read;
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3740      	adds	r7, #64	; 0x40
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	24003144 	.word	0x24003144
 8009d5c:	0800d3f8 	.word	0x0800d3f8
 8009d60:	0800d464 	.word	0x0800d464
 8009d64:	0800d400 	.word	0x0800d400
 8009d68:	0800d43c 	.word	0x0800d43c

08009d6c <Unpack_SDO>:

static int Unpack_SDO(uint8_t* t_byte_arr)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
    int t_cursor = 0;
 8009d74:	2300      	movs	r3, #0
 8009d76:	617b      	str	r3, [r7, #20]

    // Get # of SDOs
    uint16_t t_n_sdo = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	817b      	strh	r3, [r7, #10]
    memcpy(&t_n_sdo, &t_byte_arr[t_cursor], OBJ_NUMS_SIZE);
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	4413      	add	r3, r2
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	72bb      	strb	r3, [r7, #10]
    t_cursor += OBJ_NUMS_SIZE;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	617b      	str	r3, [r7, #20]

    // Call & Respond SDOs
    if (t_n_sdo > 0) {
 8009d8c:	897b      	ldrh	r3, [r7, #10]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d01f      	beq.n	8009dd2 <Unpack_SDO+0x66>
        for (int i = 0; i < t_n_sdo; ++i) {
 8009d92:	2300      	movs	r3, #0
 8009d94:	613b      	str	r3, [r7, #16]
 8009d96:	e017      	b.n	8009dc8 <Unpack_SDO+0x5c>
            int temp_cursor = Read_SDO(&t_byte_arr[t_cursor]);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fef0 	bl	8009b84 <Read_SDO>
 8009da4:	60f8      	str	r0, [r7, #12]
            if (temp_cursor > 0) {
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	dd04      	ble.n	8009db6 <Unpack_SDO+0x4a>
            	t_cursor += temp_cursor;
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	617b      	str	r3, [r7, #20]
 8009db4:	e005      	b.n	8009dc2 <Unpack_SDO+0x56>
            } else if (temp_cursor < 0) {
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	da02      	bge.n	8009dc2 <Unpack_SDO+0x56>
                //TODO: Unpack SDO ERROR
                return MSG_SDO_FAULT;
 8009dbc:	f06f 0301 	mvn.w	r3, #1
 8009dc0:	e008      	b.n	8009dd4 <Unpack_SDO+0x68>
        for (int i = 0; i < t_n_sdo; ++i) {
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	613b      	str	r3, [r7, #16]
 8009dc8:	897b      	ldrh	r3, [r7, #10]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	dbe2      	blt.n	8009d98 <Unpack_SDO+0x2c>
            }
        }
    }

    return MSG_DO_SUCCESS;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <Convert_SDOres_to_Bytes>:
 |___/___/ \___/    |_| /_/\_\
                              
*/

static int Convert_SDOres_to_Bytes(MsgDataObjectHeader* t_header, uint8_t* t_byte_arr)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
    int t_byte_written = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29a      	uxth	r2, r3
    // Set SDO Header
    memcpy(t_byte_arr, t_header, sizeof(MsgDataObjectHeader));
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	801a      	strh	r2, [r3, #0]
    t_byte_written += sizeof(MsgDataObjectHeader);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	3302      	adds	r3, #2
 8009df8:	617b      	str	r3, [r7, #20]

    // Return Response
    MsgSDOStruct* t_sdo = Find_SDO(t_header->dod_id, t_header->obj_id);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	781a      	ldrb	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f7ff fd25 	bl	8009854 <Find_SDO>
 8009e0a:	6138      	str	r0, [r7, #16]
    if (t_sdo == NULL) {
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d102      	bne.n	8009e18 <Convert_SDOres_to_Bytes+0x3c>
        //TODO: Cannot Find SDO ERROR
        return -2;
 8009e12:	f06f 0301 	mvn.w	r3, #1
 8009e16:	e029      	b.n	8009e6c <Convert_SDOres_to_Bytes+0x90>
    }

    memcpy(t_byte_arr + t_byte_written, &t_sdo->args.status, sizeof(t_sdo->args.status));
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	3210      	adds	r2, #16
 8009e22:	7812      	ldrb	r2, [r2, #0]
 8009e24:	701a      	strb	r2, [r3, #0]
    t_byte_written += sizeof(t_sdo->args.status);
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	617b      	str	r3, [r7, #20]
    memcpy(t_byte_arr + t_byte_written, &t_sdo->args.size,   sizeof(t_sdo->args.size));
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4413      	add	r3, r2
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	320c      	adds	r2, #12
 8009e36:	7812      	ldrb	r2, [r2, #0]
 8009e38:	701a      	strb	r2, [r3, #0]
    t_byte_written += sizeof(t_sdo->args.size);
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	617b      	str	r3, [r7, #20]

    int t_data_len = t_sdo->args.size * t_sdo->args.data_size;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	7b1b      	ldrb	r3, [r3, #12]
 8009e44:	461a      	mov	r2, r3
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	89db      	ldrh	r3, [r3, #14]
 8009e4a:	fb03 f302 	mul.w	r3, r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
    memcpy(t_byte_arr + t_byte_written, t_sdo->args.data, t_data_len);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	18d0      	adds	r0, r2, r3
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f001 fb5f 	bl	800b520 <memcpy>

    t_byte_written += t_data_len;
 8009e62:	697a      	ldr	r2, [r7, #20]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4413      	add	r3, r2
 8009e68:	617b      	str	r3, [r7, #20]

    return t_byte_written;
 8009e6a:	697b      	ldr	r3, [r7, #20]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <Pack_SDO>:

static int Pack_SDO(uint8_t* t_byte_arr, uint8_t* t_byte_len)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08c      	sub	sp, #48	; 0x30
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
	// check send list whether these are empty or not 
	if ((sdo_res_list == NULL) && (sdo_req_list == NULL)){
 8009e7e:	4b53      	ldr	r3, [pc, #332]	; (8009fcc <Pack_SDO+0x158>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d105      	bne.n	8009e92 <Pack_SDO+0x1e>
 8009e86:	4b52      	ldr	r3, [pc, #328]	; (8009fd0 <Pack_SDO+0x15c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <Pack_SDO+0x1e>
		return MSG_SDO_NOTHING;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e098      	b.n	8009fc4 <Pack_SDO+0x150>
	}

	// Message Packaging
    int t_cursor = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Res SDOs
    int t_n_sdo_cursor = t_cursor;
 8009e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e98:	623b      	str	r3, [r7, #32]
    t_cursor += OBJ_NUMS_SIZE;
 8009e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t t_n_sdo = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
    
    if (sdo_res_list != NULL) {
 8009ea4:	4b49      	ldr	r3, [pc, #292]	; (8009fcc <Pack_SDO+0x158>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d03e      	beq.n	8009f2a <Pack_SDO+0xb6>
        for(int i = 0; i < cvector_size(sdo_res_list); ++i) {
 8009eac:	2300      	movs	r3, #0
 8009eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eb0:	e020      	b.n	8009ef4 <Pack_SDO+0x80>
            int temp_cursor = Convert_SDOres_to_Bytes(&sdo_res_list[i], &t_byte_arr[t_cursor]);
 8009eb2:	4b46      	ldr	r3, [pc, #280]	; (8009fcc <Pack_SDO+0x158>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	005b      	lsls	r3, r3, #1
 8009eba:	18d0      	adds	r0, r2, r3
 8009ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	f7ff ff8a 	bl	8009ddc <Convert_SDOres_to_Bytes>
 8009ec8:	61b8      	str	r0, [r7, #24]
            if (temp_cursor > 0) {
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dd08      	ble.n	8009ee2 <Pack_SDO+0x6e>
            	t_cursor += temp_cursor;
 8009ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
                ++t_n_sdo;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	3301      	adds	r3, #1
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	73fb      	strb	r3, [r7, #15]
 8009ee0:	e005      	b.n	8009eee <Pack_SDO+0x7a>
            } else if (temp_cursor < 0) {
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	da02      	bge.n	8009eee <Pack_SDO+0x7a>
                //TODO: Pack Response SDO Error
                return MSG_SDO_FAULT;
 8009ee8:	f06f 0301 	mvn.w	r3, #1
 8009eec:	e06a      	b.n	8009fc4 <Pack_SDO+0x150>
        for(int i = 0; i < cvector_size(sdo_res_list); ++i) {
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ef4:	4b35      	ldr	r3, [pc, #212]	; (8009fcc <Pack_SDO+0x158>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d004      	beq.n	8009f06 <Pack_SDO+0x92>
 8009efc:	4b33      	ldr	r3, [pc, #204]	; (8009fcc <Pack_SDO+0x158>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3b08      	subs	r3, #8
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	e000      	b.n	8009f08 <Pack_SDO+0x94>
 8009f06:	2300      	movs	r3, #0
 8009f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d8d1      	bhi.n	8009eb2 <Pack_SDO+0x3e>
            }
        }
        cvector_free(sdo_res_list);
 8009f0e:	4b2f      	ldr	r3, [pc, #188]	; (8009fcc <Pack_SDO+0x158>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d006      	beq.n	8009f24 <Pack_SDO+0xb0>
 8009f16:	4b2d      	ldr	r3, [pc, #180]	; (8009fcc <Pack_SDO+0x158>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3b08      	subs	r3, #8
 8009f1c:	61fb      	str	r3, [r7, #28]
 8009f1e:	69f8      	ldr	r0, [r7, #28]
 8009f20:	f001 faf6 	bl	800b510 <free>
        sdo_res_list = NULL;
 8009f24:	4b29      	ldr	r3, [pc, #164]	; (8009fcc <Pack_SDO+0x158>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	601a      	str	r2, [r3, #0]
    }

    // Req SDOs
    if (sdo_req_list != NULL) {
 8009f2a:	4b29      	ldr	r3, [pc, #164]	; (8009fd0 <Pack_SDO+0x15c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d03e      	beq.n	8009fb0 <Pack_SDO+0x13c>
        for(int i = 0; i < cvector_size(sdo_req_list); ++i) {
 8009f32:	2300      	movs	r3, #0
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24
 8009f36:	e020      	b.n	8009f7a <Pack_SDO+0x106>
            int temp_cursor = Convert_SDOres_to_Bytes(&sdo_req_list[i], &t_byte_arr[t_cursor]);
 8009f38:	4b25      	ldr	r3, [pc, #148]	; (8009fd0 <Pack_SDO+0x15c>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	18d0      	adds	r0, r2, r3
 8009f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	4413      	add	r3, r2
 8009f48:	4619      	mov	r1, r3
 8009f4a:	f7ff ff47 	bl	8009ddc <Convert_SDOres_to_Bytes>
 8009f4e:	6138      	str	r0, [r7, #16]
            if (temp_cursor > 0) {
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	dd08      	ble.n	8009f68 <Pack_SDO+0xf4>
            	t_cursor += temp_cursor;
 8009f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                ++t_n_sdo;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	3301      	adds	r3, #1
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	73fb      	strb	r3, [r7, #15]
 8009f66:	e005      	b.n	8009f74 <Pack_SDO+0x100>
            } else if (temp_cursor < 0) {
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	da02      	bge.n	8009f74 <Pack_SDO+0x100>
                //TODO: Pack Request SDO Error
                return MSG_SDO_FAULT;
 8009f6e:	f06f 0301 	mvn.w	r3, #1
 8009f72:	e027      	b.n	8009fc4 <Pack_SDO+0x150>
        for(int i = 0; i < cvector_size(sdo_req_list); ++i) {
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	3301      	adds	r3, #1
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
 8009f7a:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <Pack_SDO+0x15c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d004      	beq.n	8009f8c <Pack_SDO+0x118>
 8009f82:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <Pack_SDO+0x15c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3b08      	subs	r3, #8
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	e000      	b.n	8009f8e <Pack_SDO+0x11a>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d8d1      	bhi.n	8009f38 <Pack_SDO+0xc4>
            }
        }
        cvector_free(sdo_req_list);
 8009f94:	4b0e      	ldr	r3, [pc, #56]	; (8009fd0 <Pack_SDO+0x15c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d006      	beq.n	8009faa <Pack_SDO+0x136>
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <Pack_SDO+0x15c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3b08      	subs	r3, #8
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	6978      	ldr	r0, [r7, #20]
 8009fa6:	f001 fab3 	bl	800b510 <free>
        sdo_req_list = NULL;
 8009faa:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <Pack_SDO+0x15c>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]
    }

    // Set # of SDOs
    memcpy(&t_byte_arr[t_n_sdo_cursor], &t_n_sdo, OBJ_NUMS_SIZE);
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	7bfa      	ldrb	r2, [r7, #15]
 8009fb8:	701a      	strb	r2, [r3, #0]

    *t_byte_len = t_cursor;
 8009fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	701a      	strb	r2, [r3, #0]

    return MSG_DO_SUCCESS;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3730      	adds	r7, #48	; 0x30
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	24003144 	.word	0x24003144
 8009fd0:	24000374 	.word	0x24000374

08009fd4 <Send_SDO>:

static int Send_SDO(uint8_t t_dest_node)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	71fb      	strb	r3, [r7, #7]
    uint8_t t_byte_len;
    uint16_t t_identifier = SDO|(node_id<<4)|t_dest_node;
 8009fde:	4b17      	ldr	r3, [pc, #92]	; (800a03c <Send_SDO+0x68>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	b21b      	sxth	r3, r3
 8009fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009fea:	b21a      	sxth	r2, r3
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	b21b      	sxth	r3, r3
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	b21b      	sxth	r3, r3
 8009ff4:	82fb      	strh	r3, [r7, #22]

    int t_check = Pack_SDO(fdcanRxData, &t_byte_len);
 8009ff6:	f107 030f 	add.w	r3, r7, #15
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4810      	ldr	r0, [pc, #64]	; (800a040 <Send_SDO+0x6c>)
 8009ffe:	f7ff ff39 	bl	8009e74 <Pack_SDO>
 800a002:	6138      	str	r0, [r7, #16]

    if(t_check < 0){
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	2b00      	cmp	r3, #0
 800a008:	da01      	bge.n	800a00e <Send_SDO+0x3a>
        //TODO: Send SDO Error
    	return t_check;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	e011      	b.n	800a032 <Send_SDO+0x5e>
    } else if(t_check){
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <Send_SDO+0x44>
    	return t_check;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	e00c      	b.n	800a032 <Send_SDO+0x5e>

    if (t_byte_len > 64) {
        //TODO: TX MESSAGE TOO LONG ERROR 
    }

    if(Send_MSG(t_identifier, t_byte_len, fdcanRxData) != 0){
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	4619      	mov	r1, r3
 800a01c:	8afb      	ldrh	r3, [r7, #22]
 800a01e:	4a08      	ldr	r2, [pc, #32]	; (800a040 <Send_SDO+0x6c>)
 800a020:	4618      	mov	r0, r3
 800a022:	f000 fb3f 	bl	800a6a4 <Send_MSG>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <Send_SDO+0x5c>
        return t_check;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	e000      	b.n	800a032 <Send_SDO+0x5e>
        //TODO: MSG TX ERROR
    }

    return t_check;
 800a030:	693b      	ldr	r3, [r7, #16]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	2400ce40 	.word	0x2400ce40
 800a040:	2400d37c 	.word	0x2400d37c

0800a044 <Convert_Bytes_to_PDO>:
 |_| |___/ \___/  |_|_\/_/\_\
                             
*/

static int Convert_Bytes_to_PDO(uint8_t* t_byte_arr)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
    int t_byte_read = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]

    MsgDataObjectHeader t_header = Get_Header(t_byte_arr);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff fd34 	bl	8009abe <Get_Header>
 800a056:	4603      	mov	r3, r0
 800a058:	81bb      	strh	r3, [r7, #12]
    t_byte_read += sizeof(MsgDataObjectHeader);
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	3302      	adds	r3, #2
 800a05e:	617b      	str	r3, [r7, #20]

    MsgPDOStruct* t_pdo = Find_PDO(t_header.dod_id, t_header.obj_id);
 800a060:	7b3b      	ldrb	r3, [r7, #12]
 800a062:	7b7a      	ldrb	r2, [r7, #13]
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff fbd6 	bl	8009818 <Find_PDO>
 800a06c:	6138      	str	r0, [r7, #16]
    if (t_pdo == NULL) {
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <Convert_Bytes_to_PDO+0x36>
        //TODO: Cannot Find PDO Error
        return -2;
 800a074:	f06f 0301 	mvn.w	r3, #1
 800a078:	e00d      	b.n	800a096 <Convert_Bytes_to_PDO+0x52>
    }

    uint16_t t_n_bytes = Get_PDO(t_pdo, (void*)(t_byte_arr + t_byte_read));
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	4413      	add	r3, r2
 800a080:	4619      	mov	r1, r3
 800a082:	6938      	ldr	r0, [r7, #16]
 800a084:	f7ff fc23 	bl	80098ce <Get_PDO>
 800a088:	4603      	mov	r3, r0
 800a08a:	81fb      	strh	r3, [r7, #14]
    if (t_n_bytes < 0) {
        //TODO: Copy PDO to Receive Error
        return -1;
    }
    t_byte_read += t_n_bytes;
 800a08c:	89fb      	ldrh	r3, [r7, #14]
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	4413      	add	r3, r2
 800a092:	617b      	str	r3, [r7, #20]

    return t_byte_read;
 800a094:	697b      	ldr	r3, [r7, #20]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <Unpack_PDO>:

static int Unpack_PDO(uint8_t* t_byte_arr)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b086      	sub	sp, #24
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
    int t_cursor = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]

    // Get # of PDOs
    uint8_t t_n_pdo = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	72fb      	strb	r3, [r7, #11]
    memcpy(&t_n_pdo, &t_byte_arr[t_cursor], OBJ_NUMS_SIZE);
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	72fb      	strb	r3, [r7, #11]
    t_cursor += OBJ_NUMS_SIZE;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	617b      	str	r3, [r7, #20]

    if (t_n_pdo > 0) {
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d01f      	beq.n	800a104 <Unpack_PDO+0x66>
        for (int i = 0; i < t_n_pdo; ++i) {
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	613b      	str	r3, [r7, #16]
 800a0c8:	e017      	b.n	800a0fa <Unpack_PDO+0x5c>
            int temp_cursor = Convert_Bytes_to_PDO(&t_byte_arr[t_cursor]);
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7ff ffb7 	bl	800a044 <Convert_Bytes_to_PDO>
 800a0d6:	60f8      	str	r0, [r7, #12]
            if (temp_cursor > 0) {
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	dd04      	ble.n	800a0e8 <Unpack_PDO+0x4a>
            	t_cursor += temp_cursor;
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]
 800a0e6:	e005      	b.n	800a0f4 <Unpack_PDO+0x56>
            } else if (temp_cursor < 0) {
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	da02      	bge.n	800a0f4 <Unpack_PDO+0x56>
                //TODO: Unpack PDO Error
                return MSG_PDO_FAULT;
 800a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f2:	e008      	b.n	800a106 <Unpack_PDO+0x68>
        for (int i = 0; i < t_n_pdo; ++i) {
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	613b      	str	r3, [r7, #16]
 800a0fa:	7afb      	ldrb	r3, [r7, #11]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	4293      	cmp	r3, r2
 800a102:	dbe2      	blt.n	800a0ca <Unpack_PDO+0x2c>
            }
        }
    }

    return MSG_DO_SUCCESS;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <Convert_PDO_to_Bytes>:
 |_| |___/ \___/    |_| /_/\_\
                              
*/

static int Convert_PDO_to_Bytes(MsgDataObjectHeader* t_header, uint8_t* t_byte_arr)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b086      	sub	sp, #24
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	6039      	str	r1, [r7, #0]
    int t_header_size = sizeof(MsgDataObjectHeader);
 800a118:	2302      	movs	r3, #2
 800a11a:	617b      	str	r3, [r7, #20]
    // Publish PDO
    MsgPDOStruct* t_pdo = Find_PDO(t_header->dod_id, t_header->obj_id);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	781a      	ldrb	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	785b      	ldrb	r3, [r3, #1]
 800a124:	4619      	mov	r1, r3
 800a126:	4610      	mov	r0, r2
 800a128:	f7ff fb76 	bl	8009818 <Find_PDO>
 800a12c:	6138      	str	r0, [r7, #16]
    if (t_pdo == NULL) {
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d102      	bne.n	800a13a <Convert_PDO_to_Bytes+0x2c>
        //TODO: Cannot Find PDO
        return -2;
 800a134:	f06f 0301 	mvn.w	r3, #1
 800a138:	e016      	b.n	800a168 <Convert_PDO_to_Bytes+0x5a>
    }

    uint16_t t_n_bytes = Set_PDO(t_pdo, t_byte_arr + t_header_size);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	4413      	add	r3, r2
 800a140:	4619      	mov	r1, r3
 800a142:	6938      	ldr	r0, [r7, #16]
 800a144:	f7ff fba6 	bl	8009894 <Set_PDO>
 800a148:	4603      	mov	r3, r0
 800a14a:	81fb      	strh	r3, [r7, #14]
    if (t_n_bytes < 0) {
        //TODO: Copy PDO to Send 
        return -1;
    } else if (t_n_bytes == 0) { // Nothing to publish
 800a14c:	89fb      	ldrh	r3, [r7, #14]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <Convert_PDO_to_Bytes+0x48>
        return 0;
 800a152:	2300      	movs	r3, #0
 800a154:	e008      	b.n	800a168 <Convert_PDO_to_Bytes+0x5a>
    }

    memcpy(t_byte_arr, t_header, t_header_size);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	461a      	mov	r2, r3
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	6838      	ldr	r0, [r7, #0]
 800a15e:	f001 f9df 	bl	800b520 <memcpy>
    return t_header_size + t_n_bytes;
 800a162:	89fa      	ldrh	r2, [r7, #14]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	4413      	add	r3, r2
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <Pack_PDO>:

static int Pack_PDO(uint8_t* t_byte_arr, uint8_t* t_byte_len)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
	// check send list whether these are empty or not 
    if (pdo_send_list == NULL){
 800a17a:	4b28      	ldr	r3, [pc, #160]	; (800a21c <Pack_PDO+0xac>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <Pack_PDO+0x16>
        return 0;
 800a182:	2300      	movs	r3, #0
 800a184:	e046      	b.n	800a214 <Pack_PDO+0xa4>
    }

    int t_cursor = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	61fb      	str	r3, [r7, #28]

    // Pub PDO
    int t_n_pdo_cursor = t_cursor;
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	617b      	str	r3, [r7, #20]
    t_cursor += OBJ_NUMS_SIZE;
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	3301      	adds	r3, #1
 800a192:	61fb      	str	r3, [r7, #28]

    uint8_t t_n_pdo = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]

    if (pdo_send_list != NULL) {
 800a198:	4b20      	ldr	r3, [pc, #128]	; (800a21c <Pack_PDO+0xac>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d02f      	beq.n	800a200 <Pack_PDO+0x90>
        for(int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	61bb      	str	r3, [r7, #24]
 800a1a4:	e01f      	b.n	800a1e6 <Pack_PDO+0x76>

            int temp_cursor = Convert_PDO_to_Bytes(&pdo_send_list[i], &t_byte_arr[t_cursor]);
 800a1a6:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <Pack_PDO+0xac>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	18d0      	adds	r0, r2, r3
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f7ff ffa9 	bl	800a10e <Convert_PDO_to_Bytes>
 800a1bc:	6138      	str	r0, [r7, #16]
            if (temp_cursor > 0) {
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	dd08      	ble.n	800a1d6 <Pack_PDO+0x66>
            	t_cursor += temp_cursor;
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	61fb      	str	r3, [r7, #28]
                ++t_n_pdo;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	73fb      	strb	r3, [r7, #15]
 800a1d4:	e004      	b.n	800a1e0 <Pack_PDO+0x70>
            } else if (temp_cursor < 0) {
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	da01      	bge.n	800a1e0 <Pack_PDO+0x70>
                //TODO: Pack PDO Error
                return temp_cursor;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	e019      	b.n	800a214 <Pack_PDO+0xa4>
        for(int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	61bb      	str	r3, [r7, #24]
 800a1e6:	4b0d      	ldr	r3, [pc, #52]	; (800a21c <Pack_PDO+0xac>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d004      	beq.n	800a1f8 <Pack_PDO+0x88>
 800a1ee:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <Pack_PDO+0xac>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3b08      	subs	r3, #8
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	e000      	b.n	800a1fa <Pack_PDO+0x8a>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d8d2      	bhi.n	800a1a6 <Pack_PDO+0x36>
            }
        }
    }

    // Set # of PDOs
    memcpy(&t_byte_arr[t_n_pdo_cursor], &t_n_pdo, OBJ_NUMS_SIZE);
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	4413      	add	r3, r2
 800a206:	7bfa      	ldrb	r2, [r7, #15]
 800a208:	701a      	strb	r2, [r3, #0]

    *t_byte_len = t_cursor;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	701a      	strb	r2, [r3, #0]

    return MSG_DO_SUCCESS;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	240003cc 	.word	0x240003cc

0800a220 <Send_PDO>:

static int Send_PDO()
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
    uint8_t t_byte_len;
    uint8_t t_dest_node = NODE_ID_RA;
 800a226:	2307      	movs	r3, #7
 800a228:	737b      	strb	r3, [r7, #13]
    uint16_t t_identifier;

    if(GUI_onoff)	{	t_identifier = GUI_SYNC|GUI_command;	}
 800a22a:	4b1e      	ldr	r3, [pc, #120]	; (800a2a4 <Send_PDO+0x84>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d007      	beq.n	800a242 <Send_PDO+0x22>
 800a232:	4b1d      	ldr	r3, [pc, #116]	; (800a2a8 <Send_PDO+0x88>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	b21b      	sxth	r3, r3
 800a238:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800a23c:	b21b      	sxth	r3, r3
 800a23e:	81fb      	strh	r3, [r7, #14]
 800a240:	e00b      	b.n	800a25a <Send_PDO+0x3a>
    else 			{	t_identifier = PDO|(node_id<<4)|t_dest_node;	}
 800a242:	4b1a      	ldr	r3, [pc, #104]	; (800a2ac <Send_PDO+0x8c>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	b21b      	sxth	r3, r3
 800a24a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a24e:	b21a      	sxth	r2, r3
 800a250:	7b7b      	ldrb	r3, [r7, #13]
 800a252:	b21b      	sxth	r3, r3
 800a254:	4313      	orrs	r3, r2
 800a256:	b21b      	sxth	r3, r3
 800a258:	81fb      	strh	r3, [r7, #14]

    int t_check = Pack_PDO(fdcanTxData, &t_byte_len);
 800a25a:	1dfb      	adds	r3, r7, #7
 800a25c:	4619      	mov	r1, r3
 800a25e:	4814      	ldr	r0, [pc, #80]	; (800a2b0 <Send_PDO+0x90>)
 800a260:	f7ff ff86 	bl	800a170 <Pack_PDO>
 800a264:	60b8      	str	r0, [r7, #8]

    if(t_check != 0){
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <Send_PDO+0x50>
        //TODO: Send PDO Error
    	return t_check;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	e014      	b.n	800a29a <Send_PDO+0x7a>
    } else if(t_check){
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <Send_PDO+0x5a>
    	return t_check;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	e00f      	b.n	800a29a <Send_PDO+0x7a>
    }

    if (t_byte_len != 1){
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d00b      	beq.n	800a298 <Send_PDO+0x78>
		if(Send_MSG(t_identifier, t_byte_len, fdcanTxData) == 0){
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	4619      	mov	r1, r3
 800a284:	89fb      	ldrh	r3, [r7, #14]
 800a286:	4a0a      	ldr	r2, [pc, #40]	; (800a2b0 <Send_PDO+0x90>)
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 fa0b 	bl	800a6a4 <Send_MSG>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d101      	bne.n	800a298 <Send_PDO+0x78>
			return t_check;
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	e000      	b.n	800a29a <Send_PDO+0x7a>
			//TODO: MSG TX ERROR
		}
    }

	return t_check;
 800a298:	68bb      	ldr	r3, [r7, #8]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	2400cf6c 	.word	0x2400cf6c
 800a2a8:	2400cf10 	.word	0x2400cf10
 800a2ac:	2400ce40 	.word	0x2400ce40
 800a2b0:	24003104 	.word	0x24003104

0800a2b4 <Ext_Send_PDO>:

static int Ext_Send_PDO()
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	af00      	add	r7, sp, #0
	if(GUI_command == GET_DIRECTION_SET_DATA){
 800a2b8:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <Ext_Send_PDO+0x20>)
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b1f      	cmp	r3, #31
 800a2be:	d105      	bne.n	800a2cc <Ext_Send_PDO+0x18>
		Send_MSG((uint16_t)(GUI_SYNC|GET_DIRECTION_SET_DONE), 1, (uint8_t*)0);
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	f44f 60a4 	mov.w	r0, #1312	; 0x520
 800a2c8:	f000 f9ec 	bl	800a6a4 <Send_MSG>
	}

	return 0;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	2400cf10 	.word	0x2400cf10

0800a2d8 <Set_PDO_Dummy>:

static int Set_PDO_Dummy()
{
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
	static int t_count = 0;

	test_dummy[0] = comm_loop_cnt;
 800a2dc:	4b19      	ldr	r3, [pc, #100]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a19      	ldr	r2, [pc, #100]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a2e2:	6013      	str	r3, [r2, #0]
	test_dummy[1] = comm_loop_cnt;
 800a2e4:	4b17      	ldr	r3, [pc, #92]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a17      	ldr	r2, [pc, #92]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a2ea:	6053      	str	r3, [r2, #4]
	test_dummy[2] = comm_loop_cnt;
 800a2ec:	4b15      	ldr	r3, [pc, #84]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a15      	ldr	r2, [pc, #84]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a2f2:	6093      	str	r3, [r2, #8]
	test_dummy[3] = comm_loop_cnt;
 800a2f4:	4b13      	ldr	r3, [pc, #76]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a13      	ldr	r2, [pc, #76]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a2fa:	60d3      	str	r3, [r2, #12]
	test_dummy[4] = comm_loop_cnt;
 800a2fc:	4b11      	ldr	r3, [pc, #68]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a11      	ldr	r2, [pc, #68]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a302:	6113      	str	r3, [r2, #16]
	test_dummy[5] = comm_loop_cnt;
 800a304:	4b0f      	ldr	r3, [pc, #60]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a0f      	ldr	r2, [pc, #60]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a30a:	6153      	str	r3, [r2, #20]
	test_dummy[6] = comm_loop_cnt;
 800a30c:	4b0d      	ldr	r3, [pc, #52]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a0d      	ldr	r2, [pc, #52]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a312:	6193      	str	r3, [r2, #24]
	test_dummy[7] = comm_loop_cnt;
 800a314:	4b0b      	ldr	r3, [pc, #44]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a0b      	ldr	r2, [pc, #44]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a31a:	61d3      	str	r3, [r2, #28]
	test_dummy[8] = comm_loop_cnt;
 800a31c:	4b09      	ldr	r3, [pc, #36]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a09      	ldr	r2, [pc, #36]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a322:	6213      	str	r3, [r2, #32]
	test_dummy[9] = comm_loop_cnt;
 800a324:	4b07      	ldr	r3, [pc, #28]	; (800a344 <Set_PDO_Dummy+0x6c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a07      	ldr	r2, [pc, #28]	; (800a348 <Set_PDO_Dummy+0x70>)
 800a32a:	6253      	str	r3, [r2, #36]	; 0x24

	t_count++;
 800a32c:	4b07      	ldr	r3, [pc, #28]	; (800a34c <Set_PDO_Dummy+0x74>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3301      	adds	r3, #1
 800a332:	4a06      	ldr	r2, [pc, #24]	; (800a34c <Set_PDO_Dummy+0x74>)
 800a334:	6013      	str	r3, [r2, #0]

	return 0;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	24000360 	.word	0x24000360
 800a348:	2400d5e4 	.word	0x2400d5e4
 800a34c:	2400009c 	.word	0x2400009c

0800a350 <Check_Trajectory_Error>:

static int Check_Trajectory_Error(uint16_t t_frame_idx)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	80fb      	strh	r3, [r7, #6]
	if((t_frame_idx % D10_TRAJECTORY_ELEMENT_NUMBER) != 0)		{return -1;}
 800a35a:	88fa      	ldrh	r2, [r7, #6]
 800a35c:	4b11      	ldr	r3, [pc, #68]	; (800a3a4 <Check_Trajectory_Error+0x54>)
 800a35e:	fba3 1302 	umull	r1, r3, r3, r2
 800a362:	08d9      	lsrs	r1, r3, #3
 800a364:	460b      	mov	r3, r1
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	440b      	add	r3, r1
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	b29b      	uxth	r3, r3
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <Check_Trajectory_Error+0x2a>
 800a374:	f04f 33ff 	mov.w	r3, #4294967295
 800a378:	e00e      	b.n	800a398 <Check_Trajectory_Error+0x48>
	if( (t_frame_idx - trajectory_buffer.frame_idx) != 0)		{return -2;}
 800a37a:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <Check_Trajectory_Error+0x58>)
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	88fa      	ldrh	r2, [r7, #6]
 800a380:	429a      	cmp	r2, r3
 800a382:	d002      	beq.n	800a38a <Check_Trajectory_Error+0x3a>
 800a384:	f06f 0301 	mvn.w	r3, #1
 800a388:	e006      	b.n	800a398 <Check_Trajectory_Error+0x48>

	trajectory_buffer.frame_idx += D10_TRAJECTORY_ELEMENT_NUMBER;
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <Check_Trajectory_Error+0x58>)
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	330a      	adds	r3, #10
 800a390:	b29a      	uxth	r2, r3
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <Check_Trajectory_Error+0x58>)
 800a394:	801a      	strh	r2, [r3, #0]

	return 0;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	cccccccd 	.word	0xcccccccd
 800a3a8:	240031fc 	.word	0x240031fc

0800a3ac <Assemble_Trajectory>:

static int Assemble_Trajectory(uint8_t* t_byte_arr)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	uint8_t t_cursor, t_check, t_buf;
	uint16_t t_index;
	int8_t t_ack;
    uint16_t t_identifier = TRAJECTORY|(node_id<<4)|NODE_ID_CM;
 800a3b4:	4b2b      	ldr	r3, [pc, #172]	; (800a464 <Assemble_Trajectory+0xb8>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	011b      	lsls	r3, r3, #4
 800a3ba:	b21a      	sxth	r2, r3
 800a3bc:	f240 4301 	movw	r3, #1025	; 0x401
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	b21b      	sxth	r3, r3
 800a3c4:	81fb      	strh	r3, [r7, #14]

	/* Get index */
	t_cursor = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75fb      	strb	r3, [r7, #23]
	memcpy(&t_index, &t_byte_arr[t_cursor], 2);
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	817b      	strh	r3, [r7, #10]
	t_cursor += 2;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	3302      	adds	r3, #2
 800a3da:	75fb      	strb	r3, [r7, #23]

	/* Check Error*/
	t_check = Check_Trajectory_Error(t_index);
 800a3dc:	897b      	ldrh	r3, [r7, #10]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7ff ffb6 	bl	800a350 <Check_Trajectory_Error>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	737b      	strb	r3, [r7, #13]

	if(t_check != 0) {
 800a3e8:	7b7b      	ldrb	r3, [r7, #13]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d005      	beq.n	800a3fa <Assemble_Trajectory+0x4e>
		trajectory_buffer.frame_idx = 0;
 800a3ee:	4b1e      	ldr	r3, [pc, #120]	; (800a468 <Assemble_Trajectory+0xbc>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	801a      	strh	r2, [r3, #0]
		t_ack = -2;
 800a3f4:	23fe      	movs	r3, #254	; 0xfe
 800a3f6:	727b      	strb	r3, [r7, #9]
 800a3f8:	e025      	b.n	800a446 <Assemble_Trajectory+0x9a>
	} else {

		/* Save Buffer */
		for(int i = 0; i < D10_TRAJECTORY_ELEMENT_NUMBER; ++i){
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	613b      	str	r3, [r7, #16]
 800a3fe:	e012      	b.n	800a426 <Assemble_Trajectory+0x7a>
			memcpy(&trajectory_buffer.buff[t_index++], &t_byte_arr[t_cursor], 4);
 800a400:	897b      	ldrh	r3, [r7, #10]
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	b292      	uxth	r2, r2
 800a406:	817a      	strh	r2, [r7, #10]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4a17      	ldr	r2, [pc, #92]	; (800a468 <Assemble_Trajectory+0xbc>)
 800a40c:	4413      	add	r3, r2
 800a40e:	3304      	adds	r3, #4
 800a410:	7dfa      	ldrb	r2, [r7, #23]
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	440a      	add	r2, r1
 800a416:	6812      	ldr	r2, [r2, #0]
 800a418:	601a      	str	r2, [r3, #0]
			t_cursor += 4;
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	3304      	adds	r3, #4
 800a41e:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < D10_TRAJECTORY_ELEMENT_NUMBER; ++i){
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	3301      	adds	r3, #1
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2b09      	cmp	r3, #9
 800a42a:	dde9      	ble.n	800a400 <Assemble_Trajectory+0x54>
		}

		/* Check End of Trajectory */
		if(t_index >= D10_TRAJECTORY_TOTAL_LENGTH){
 800a42c:	897b      	ldrh	r3, [r7, #10]
 800a42e:	f242 720f 	movw	r2, #9999	; 0x270f
 800a432:	4293      	cmp	r3, r2
 800a434:	d905      	bls.n	800a442 <Assemble_Trajectory+0x96>
			t_ack = -1;
 800a436:	23ff      	movs	r3, #255	; 0xff
 800a438:	727b      	strb	r3, [r7, #9]
			trajectory_buffer.frame_idx = 0;
 800a43a:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <Assemble_Trajectory+0xbc>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	801a      	strh	r2, [r3, #0]
 800a440:	e001      	b.n	800a446 <Assemble_Trajectory+0x9a>
		} else {
			t_ack = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	727b      	strb	r3, [r7, #9]
 800a446:	7a7b      	ldrb	r3, [r7, #9]
		}
	}

	/* Send Acknowledgement */
	memcpy(&t_buf, &t_ack, 1);
 800a448:	733b      	strb	r3, [r7, #12]
	Send_MSG(t_identifier, 1, &t_buf);
 800a44a:	f107 020c 	add.w	r2, r7, #12
 800a44e:	89fb      	ldrh	r3, [r7, #14]
 800a450:	2101      	movs	r1, #1
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f926 	bl	800a6a4 <Send_MSG>

	return t_check;
 800a458:	7b7b      	ldrb	r3, [r7, #13]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	2400ce40 	.word	0x2400ce40
 800a468:	240031fc 	.word	0x240031fc

0800a46c <Add_PDO_to_Send>:
                                       |___/                       
*/


static void Add_PDO_to_Send(uint8_t t_dod_id, uint8_t t_obj_id)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08a      	sub	sp, #40	; 0x28
 800a470:	af00      	add	r7, sp, #0
 800a472:	4603      	mov	r3, r0
 800a474:	460a      	mov	r2, r1
 800a476:	71fb      	strb	r3, [r7, #7]
 800a478:	4613      	mov	r3, r2
 800a47a:	71bb      	strb	r3, [r7, #6]
	MsgPDOStruct* temp_pdo = Find_PDO(t_dod_id, t_obj_id);
 800a47c:	79ba      	ldrb	r2, [r7, #6]
 800a47e:	79fb      	ldrb	r3, [r7, #7]
 800a480:	4611      	mov	r1, r2
 800a482:	4618      	mov	r0, r3
 800a484:	f7ff f9c8 	bl	8009818 <Find_PDO>
 800a488:	6238      	str	r0, [r7, #32]
    if (temp_pdo == NULL) {
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 80b9 	beq.w	800a604 <Add_PDO_to_Send+0x198>
        //TODO: Cannot Find PDO Error
        return;
    }

    MsgDataObjectHeader t_pdo = {t_dod_id, t_obj_id};
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	723b      	strb	r3, [r7, #8]
 800a496:	79bb      	ldrb	r3, [r7, #6]
 800a498:	727b      	strb	r3, [r7, #9]

    for (int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800a49a:	2300      	movs	r3, #0
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
 800a49e:	e015      	b.n	800a4cc <Add_PDO_to_Send+0x60>
        if ((pdo_send_list[i].dod_id == t_dod_id) && (pdo_send_list[i].obj_id == t_obj_id)){
 800a4a0:	4b5b      	ldr	r3, [pc, #364]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	4413      	add	r3, r2
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	79fa      	ldrb	r2, [r7, #7]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d109      	bne.n	800a4c6 <Add_PDO_to_Send+0x5a>
 800a4b2:	4b57      	ldr	r3, [pc, #348]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	4413      	add	r3, r2
 800a4bc:	785b      	ldrb	r3, [r3, #1]
 800a4be:	79ba      	ldrb	r2, [r7, #6]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	f000 80a1 	beq.w	800a608 <Add_PDO_to_Send+0x19c>
    for (int i = 0; i < cvector_size(pdo_send_list); ++i) {
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a4cc:	4b50      	ldr	r3, [pc, #320]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d004      	beq.n	800a4de <Add_PDO_to_Send+0x72>
 800a4d4:	4b4e      	ldr	r3, [pc, #312]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3b08      	subs	r3, #8
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	e000      	b.n	800a4e0 <Add_PDO_to_Send+0x74>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d8dc      	bhi.n	800a4a0 <Add_PDO_to_Send+0x34>
            return;
        }
    }
    cvector_push_back(pdo_send_list, t_pdo);
 800a4e6:	4b4a      	ldr	r3, [pc, #296]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d004      	beq.n	800a4f8 <Add_PDO_to_Send+0x8c>
 800a4ee:	4b48      	ldr	r3, [pc, #288]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3b04      	subs	r3, #4
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	e000      	b.n	800a4fa <Add_PDO_to_Send+0x8e>
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	61fb      	str	r3, [r7, #28]
 800a4fc:	4b44      	ldr	r3, [pc, #272]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d004      	beq.n	800a50e <Add_PDO_to_Send+0xa2>
 800a504:	4b42      	ldr	r3, [pc, #264]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800a50c:	e000      	b.n	800a510 <Add_PDO_to_Send+0xa4>
 800a50e:	2300      	movs	r3, #0
 800a510:	69fa      	ldr	r2, [r7, #28]
 800a512:	4293      	cmp	r3, r2
 800a514:	d34f      	bcc.n	800a5b6 <Add_PDO_to_Send+0x14a>
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	3305      	adds	r3, #5
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	61bb      	str	r3, [r7, #24]
 800a51e:	4b3c      	ldr	r3, [pc, #240]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d021      	beq.n	800a56a <Add_PDO_to_Send+0xfe>
 800a526:	4b3a      	ldr	r3, [pc, #232]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3b08      	subs	r3, #8
 800a52c:	613b      	str	r3, [r7, #16]
 800a52e:	69b9      	ldr	r1, [r7, #24]
 800a530:	6938      	ldr	r0, [r7, #16]
 800a532:	f001 fba3 	bl	800bc7c <realloc>
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d106      	bne.n	800a54c <Add_PDO_to_Send+0xe0>
 800a53e:	4b35      	ldr	r3, [pc, #212]	; (800a614 <Add_PDO_to_Send+0x1a8>)
 800a540:	4a35      	ldr	r2, [pc, #212]	; (800a618 <Add_PDO_to_Send+0x1ac>)
 800a542:	f240 211f 	movw	r1, #543	; 0x21f
 800a546:	4835      	ldr	r0, [pc, #212]	; (800a61c <Add_PDO_to_Send+0x1b0>)
 800a548:	f000 ff80 	bl	800b44c <__assert_func>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	3308      	adds	r3, #8
 800a550:	4a2f      	ldr	r2, [pc, #188]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	4b2e      	ldr	r3, [pc, #184]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d02c      	beq.n	800a5b6 <Add_PDO_to_Send+0x14a>
 800a55c:	4b2c      	ldr	r3, [pc, #176]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3b04      	subs	r3, #4
 800a562:	69fa      	ldr	r2, [r7, #28]
 800a564:	3201      	adds	r2, #1
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	e025      	b.n	800a5b6 <Add_PDO_to_Send+0x14a>
 800a56a:	69b8      	ldr	r0, [r7, #24]
 800a56c:	f000 ffc8 	bl	800b500 <malloc>
 800a570:	4603      	mov	r3, r0
 800a572:	617b      	str	r3, [r7, #20]
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d106      	bne.n	800a588 <Add_PDO_to_Send+0x11c>
 800a57a:	4b29      	ldr	r3, [pc, #164]	; (800a620 <Add_PDO_to_Send+0x1b4>)
 800a57c:	4a26      	ldr	r2, [pc, #152]	; (800a618 <Add_PDO_to_Send+0x1ac>)
 800a57e:	f240 211f 	movw	r1, #543	; 0x21f
 800a582:	4826      	ldr	r0, [pc, #152]	; (800a61c <Add_PDO_to_Send+0x1b0>)
 800a584:	f000 ff62 	bl	800b44c <__assert_func>
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	3308      	adds	r3, #8
 800a58c:	4a20      	ldr	r2, [pc, #128]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a58e:	6013      	str	r3, [r2, #0]
 800a590:	4b1f      	ldr	r3, [pc, #124]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <Add_PDO_to_Send+0x138>
 800a598:	4b1d      	ldr	r3, [pc, #116]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3b04      	subs	r3, #4
 800a59e:	69fa      	ldr	r2, [r7, #28]
 800a5a0:	3201      	adds	r2, #1
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <Add_PDO_to_Send+0x14a>
 800a5ac:	4b18      	ldr	r3, [pc, #96]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3b08      	subs	r3, #8
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	4b16      	ldr	r3, [pc, #88]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	4b15      	ldr	r3, [pc, #84]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d005      	beq.n	800a5ce <Add_PDO_to_Send+0x162>
 800a5c2:	4b13      	ldr	r3, [pc, #76]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3b08      	subs	r3, #8
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	e000      	b.n	800a5d0 <Add_PDO_to_Send+0x164>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	4413      	add	r3, r2
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f107 0308 	add.w	r3, r7, #8
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	8013      	strh	r3, [r2, #0]
 800a5dc:	4b0c      	ldr	r3, [pc, #48]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d012      	beq.n	800a60a <Add_PDO_to_Send+0x19e>
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d005      	beq.n	800a5f8 <Add_PDO_to_Send+0x18c>
 800a5ec:	4b08      	ldr	r3, [pc, #32]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3b08      	subs	r3, #8
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	e000      	b.n	800a5fa <Add_PDO_to_Send+0x18e>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	4a05      	ldr	r2, [pc, #20]	; (800a610 <Add_PDO_to_Send+0x1a4>)
 800a5fc:	6812      	ldr	r2, [r2, #0]
 800a5fe:	3a08      	subs	r2, #8
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	e002      	b.n	800a60a <Add_PDO_to_Send+0x19e>
        return;
 800a604:	bf00      	nop
 800a606:	e000      	b.n	800a60a <Add_PDO_to_Send+0x19e>
            return;
 800a608:	bf00      	nop
}
 800a60a:	3728      	adds	r7, #40	; 0x28
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	240003cc 	.word	0x240003cc
 800a614:	0800d3f8 	.word	0x0800d3f8
 800a618:	0800d470 	.word	0x0800d470
 800a61c:	0800d400 	.word	0x0800d400
 800a620:	0800d43c 	.word	0x0800d43c

0800a624 <Clear_PDO_to_Send>:

static void Clear_PDO_to_Send()
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
    cvector_free(pdo_send_list);
 800a62a:	4b09      	ldr	r3, [pc, #36]	; (800a650 <Clear_PDO_to_Send+0x2c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d006      	beq.n	800a640 <Clear_PDO_to_Send+0x1c>
 800a632:	4b07      	ldr	r3, [pc, #28]	; (800a650 <Clear_PDO_to_Send+0x2c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3b08      	subs	r3, #8
 800a638:	607b      	str	r3, [r7, #4]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 ff68 	bl	800b510 <free>
    pdo_send_list = NULL;
 800a640:	4b03      	ldr	r3, [pc, #12]	; (800a650 <Clear_PDO_to_Send+0x2c>)
 800a642:	2200      	movs	r2, #0
 800a644:	601a      	str	r2, [r3, #0]
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	240003cc 	.word	0x240003cc

0800a654 <Send_USB_Trick>:
 |_|  |_\___/__/__/\__,_\__, \___| |_||_\__,_|_||_\__,_|_\___|_|  
                        |___/                                     
*/

static void Send_USB_Trick(uint8_t* t_in_buf, uint32_t t_in_len, uint8_t* t_out_buf)
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
	 * and MD and breaks the sequence of the GUI.
	 *
	 * Therefore, 0x00 is inserted between every byte and sent.
	 * */

	for(int i = 0; i < t_in_len; ++i){
 800a660:	2300      	movs	r3, #0
 800a662:	617b      	str	r3, [r7, #20]
 800a664:	e013      	b.n	800a68e <Send_USB_Trick+0x3a>
		*(t_out_buf + (2*i)) = *(t_in_buf + i);
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	441a      	add	r2, r3
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	005b      	lsls	r3, r3, #1
 800a670:	4619      	mov	r1, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	440b      	add	r3, r1
 800a676:	7812      	ldrb	r2, [r2, #0]
 800a678:	701a      	strb	r2, [r3, #0]
		*(t_out_buf + (2*i+1)) = 0;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	3301      	adds	r3, #1
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	4413      	add	r3, r2
 800a684:	2200      	movs	r2, #0
 800a686:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < t_in_len; ++i){
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	3301      	adds	r3, #1
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	429a      	cmp	r2, r3
 800a694:	d8e7      	bhi.n	800a666 <Send_USB_Trick+0x12>
	}
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <Send_MSG>:

int Send_MSG(uint16_t t_COB_ID, uint32_t t_len, uint8_t* t_tx_data)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b0ba      	sub	sp, #232	; 0xe8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	81fb      	strh	r3, [r7, #14]
	static uint8_t t_fnc_code, t_node_id;
	int t_check = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	uint8_t t_txBuf[67];
	uint8_t t_usb_txBuf[137];

	if(comm_type == e_FDCAN){
 800a6b8:	4b2f      	ldr	r3, [pc, #188]	; (800a778 <Send_MSG+0xd4>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d111      	bne.n	800a6e4 <Send_MSG+0x40>
		if(Transmit_IOIF_Fdcan(t_COB_ID, Convert_Byte_Length(t_len), t_tx_data) != 0){
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff f97a 	bl	80099be <Convert_Byte_Length>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	89fb      	ldrh	r3, [r7, #14]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fd f99e 	bl	8007a14 <Transmit_IOIF_Fdcan>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d045      	beq.n	800a76a <Send_MSG+0xc6>
			return t_check;
 800a6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e2:	e044      	b.n	800a76e <Send_MSG+0xca>
			//TODO: MSG TX ERROR
		}
	} else if(comm_type == e_USB){
 800a6e4:	4b24      	ldr	r3, [pc, #144]	; (800a778 <Send_MSG+0xd4>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d13e      	bne.n	800a76a <Send_MSG+0xc6>

		t_fnc_code = (t_COB_ID & 0xF00) >> 8;
 800a6ec:	89fb      	ldrh	r3, [r7, #14]
 800a6ee:	121b      	asrs	r3, r3, #8
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	f003 030f 	and.w	r3, r3, #15
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	4b20      	ldr	r3, [pc, #128]	; (800a77c <Send_MSG+0xd8>)
 800a6fa:	701a      	strb	r2, [r3, #0]
		t_node_id = (t_COB_ID & 0xFF);
 800a6fc:	89fb      	ldrh	r3, [r7, #14]
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	4b1f      	ldr	r3, [pc, #124]	; (800a780 <Send_MSG+0xdc>)
 800a702:	701a      	strb	r2, [r3, #0]

		memcpy(&t_txBuf[2], t_tx_data, t_len);
 800a704:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a708:	3302      	adds	r3, #2
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 ff06 	bl	800b520 <memcpy>
 800a714:	4b19      	ldr	r3, [pc, #100]	; (800a77c <Send_MSG+0xd8>)
 800a716:	781b      	ldrb	r3, [r3, #0]
		memcpy(t_txBuf, &t_fnc_code, 1);			t_len++;
 800a718:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	3301      	adds	r3, #1
 800a720:	60bb      	str	r3, [r7, #8]
 800a722:	4b17      	ldr	r3, [pc, #92]	; (800a780 <Send_MSG+0xdc>)
 800a724:	781b      	ldrb	r3, [r3, #0]
		memcpy(&t_txBuf[1], &t_node_id, 1);			t_len++;
 800a726:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	3301      	adds	r3, #1
 800a72e:	60bb      	str	r3, [r7, #8]


		Send_USB_Trick(t_txBuf, t_len, t_usb_txBuf);
 800a730:	f107 0214 	add.w	r2, r7, #20
 800a734:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a738:	68b9      	ldr	r1, [r7, #8]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff ff8a 	bl	800a654 <Send_USB_Trick>
		t_len *= 2;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	60bb      	str	r3, [r7, #8]

		t_usb_txBuf[t_len++] = '\r';
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	60ba      	str	r2, [r7, #8]
 800a74c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800a750:	4413      	add	r3, r2
 800a752:	220d      	movs	r2, #13
 800a754:	f803 2cd4 	strb.w	r2, [r3, #-212]
		t_usb_txBuf[t_len++] = '\n';
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	1c5a      	adds	r2, r3, #1
 800a75c:	60ba      	str	r2, [r7, #8]
 800a75e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800a762:	4413      	add	r3, r2
 800a764:	220a      	movs	r2, #10
 800a766:	f803 2cd4 	strb.w	r2, [r3, #-212]
//			return t_check;
//			//TODO: MSG TX ERROR
//		}
	}

	return -1;
 800a76a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a76e:	4618      	mov	r0, r3
 800a770:	37e8      	adds	r7, #232	; 0xe8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	2400d379 	.word	0x2400d379
 800a77c:	240000a0 	.word	0x240000a0
 800a780:	240000a1 	.word	0x240000a1

0800a784 <Fdcan_Rx_Hdlr>:
//
//	return 0;
//}

static int Fdcan_Rx_Hdlr(uint16_t t_wasp_id, uint8_t* t_rx_data)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	4603      	mov	r3, r0
 800a78c:	6039      	str	r1, [r7, #0]
 800a78e:	80fb      	strh	r3, [r7, #6]
    fnc_code = t_wasp_id & 0xF00;
 800a790:	88fb      	ldrh	r3, [r7, #6]
 800a792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a796:	4a24      	ldr	r2, [pc, #144]	; (800a828 <Fdcan_Rx_Hdlr+0xa4>)
 800a798:	6013      	str	r3, [r2, #0]
    ori_node = (t_wasp_id & 0x0F0)>>4;
 800a79a:	88fb      	ldrh	r3, [r7, #6]
 800a79c:	111b      	asrs	r3, r3, #4
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	f003 030f 	and.w	r3, r3, #15
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	4b21      	ldr	r3, [pc, #132]	; (800a82c <Fdcan_Rx_Hdlr+0xa8>)
 800a7a8:	701a      	strb	r2, [r3, #0]

    switch(fnc_code){
 800a7aa:	4b1f      	ldr	r3, [pc, #124]	; (800a828 <Fdcan_Rx_Hdlr+0xa4>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b2:	d02f      	beq.n	800a814 <Fdcan_Rx_Hdlr+0x90>
 800a7b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b8:	d830      	bhi.n	800a81c <Fdcan_Rx_Hdlr+0x98>
 800a7ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7be:	d01b      	beq.n	800a7f8 <Fdcan_Rx_Hdlr+0x74>
 800a7c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7c4:	d82a      	bhi.n	800a81c <Fdcan_Rx_Hdlr+0x98>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <Fdcan_Rx_Hdlr+0x4e>
 800a7ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7ce:	d005      	beq.n	800a7dc <Fdcan_Rx_Hdlr+0x58>
            break;

        case TRAJECTORY:
			Assemble_Trajectory(t_rx_data);
        	break;
        default: break;
 800a7d0:	e024      	b.n	800a81c <Fdcan_Rx_Hdlr+0x98>
            Recv_EMCY(t_rx_data, &err_code);
 800a7d2:	4917      	ldr	r1, [pc, #92]	; (800a830 <Fdcan_Rx_Hdlr+0xac>)
 800a7d4:	6838      	ldr	r0, [r7, #0]
 800a7d6:	f7ff f989 	bl	8009aec <Recv_EMCY>
            break;
 800a7da:	e020      	b.n	800a81e <Fdcan_Rx_Hdlr+0x9a>
            if (Unpack_SDO(t_rx_data) < 0) {
 800a7dc:	6838      	ldr	r0, [r7, #0]
 800a7de:	f7ff fac5 	bl	8009d6c <Unpack_SDO>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	da01      	bge.n	800a7ec <Fdcan_Rx_Hdlr+0x68>
                return SDO_RX_ERR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e019      	b.n	800a820 <Fdcan_Rx_Hdlr+0x9c>
                Send_SDO(ori_node);
 800a7ec:	4b0f      	ldr	r3, [pc, #60]	; (800a82c <Fdcan_Rx_Hdlr+0xa8>)
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fbef 	bl	8009fd4 <Send_SDO>
            break;
 800a7f6:	e012      	b.n	800a81e <Fdcan_Rx_Hdlr+0x9a>
            if (Unpack_PDO(t_rx_data) < 0) {
 800a7f8:	6838      	ldr	r0, [r7, #0]
 800a7fa:	f7ff fc50 	bl	800a09e <Unpack_PDO>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	da01      	bge.n	800a808 <Fdcan_Rx_Hdlr+0x84>
                return PDO_RX_ERR;
 800a804:	2303      	movs	r3, #3
 800a806:	e00b      	b.n	800a820 <Fdcan_Rx_Hdlr+0x9c>
                Send_PDO(ori_node);
 800a808:	4b08      	ldr	r3, [pc, #32]	; (800a82c <Fdcan_Rx_Hdlr+0xa8>)
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7ff fd07 	bl	800a220 <Send_PDO>
            break;
 800a812:	e004      	b.n	800a81e <Fdcan_Rx_Hdlr+0x9a>
			Assemble_Trajectory(t_rx_data);
 800a814:	6838      	ldr	r0, [r7, #0]
 800a816:	f7ff fdc9 	bl	800a3ac <Assemble_Trajectory>
        	break;
 800a81a:	e000      	b.n	800a81e <Fdcan_Rx_Hdlr+0x9a>
        default: break;
 800a81c:	bf00      	nop
    }

    return 0;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	2400cf1c 	.word	0x2400cf1c
 800a82c:	2400d0cc 	.word	0x2400d0cc
 800a830:	2400cf68 	.word	0x2400cf68

0800a834 <Get_State_Callback>:
 \__ \ |) | (_) | | (__/ _` | | | '_ \/ _` / _| / /(_-<
 |___/___/ \___/   \___\__,_|_|_|_.__/\__,_\__|_\_\/__/

*/

MSG_COMMON_SDO_CALLBACK(msg_hdlr_task)
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2201      	movs	r2, #1
 800a842:	711a      	strb	r2, [r3, #4]
 800a844:	2001      	movs	r0, #1
 800a846:	f000 fe5b 	bl	800b500 <malloc>
 800a84a:	4603      	mov	r3, r0
 800a84c:	461a      	mov	r2, r3
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a05      	ldr	r2, [pc, #20]	; (800a86c <Get_State_Callback+0x38>)
 800a858:	7b12      	ldrb	r2, [r2, #12]
 800a85a:	701a      	strb	r2, [r3, #0]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2200      	movs	r2, #0
 800a860:	721a      	strb	r2, [r3, #8]
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	2400ce48 	.word	0x2400ce48

0800a870 <Set_State_Callback>:
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	73fb      	strb	r3, [r7, #15]
 800a882:	7bfb      	ldrb	r3, [r7, #15]
 800a884:	4619      	mov	r1, r3
 800a886:	4808      	ldr	r0, [pc, #32]	; (800a8a8 <Set_State_Callback+0x38>)
 800a888:	f000 fd56 	bl	800b338 <Transition_State>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2200      	movs	r2, #0
 800a896:	711a      	strb	r2, [r3, #4]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2200      	movs	r2, #0
 800a89c:	721a      	strb	r2, [r3, #8]
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	2400ce54 	.word	0x2400ce54

0800a8ac <Get_Routine_Callback>:
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	721a      	strb	r2, [r3, #8]
 800a8bc:	4b19      	ldr	r3, [pc, #100]	; (800a924 <Get_Routine_Callback+0x78>)
 800a8be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	711a      	strb	r2, [r3, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	791b      	ldrb	r3, [r3, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d025      	beq.n	800a91a <Get_Routine_Callback+0x6e>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	88db      	ldrh	r3, [r3, #6]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	791b      	ldrb	r3, [r3, #4]
 800a8d8:	fb03 f302 	mul.w	r3, r3, r2
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fe0f 	bl	800b500 <malloc>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]
 800a8ee:	e00d      	b.n	800a90c <Get_Routine_Callback+0x60>
 800a8f0:	4a0c      	ldr	r2, [pc, #48]	; (800a924 <Get_Routine_Callback+0x78>)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3310      	adds	r3, #16
 800a8f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4413      	add	r3, r2
 800a902:	b2ca      	uxtb	r2, r1
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3301      	adds	r3, #1
 800a90a:	60fb      	str	r3, [r7, #12]
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	791b      	ldrb	r3, [r3, #4]
 800a910:	461a      	mov	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4293      	cmp	r3, r2
 800a916:	dbeb      	blt.n	800a8f0 <Get_Routine_Callback+0x44>
 800a918:	e000      	b.n	800a91c <Get_Routine_Callback+0x70>
 800a91a:	bf00      	nop
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	2400ce48 	.word	0x2400ce48

0800a928 <Set_Routine_Callback>:
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2200      	movs	r2, #0
 800a936:	711a      	strb	r2, [r3, #4]
 800a938:	4828      	ldr	r0, [pc, #160]	; (800a9dc <Set_Routine_Callback+0xb4>)
 800a93a:	f000 fba5 	bl	800b088 <Clear_Routines>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	791b      	ldrb	r3, [r3, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d103      	bne.n	800a94e <Set_Routine_Callback+0x26>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2200      	movs	r2, #0
 800a94a:	721a      	strb	r2, [r3, #8]
 800a94c:	e043      	b.n	800a9d6 <Set_Routine_Callback+0xae>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	88db      	ldrh	r3, [r3, #6]
 800a952:	461a      	mov	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	791b      	ldrb	r3, [r3, #4]
 800a958:	fb03 f302 	mul.w	r3, r3, r2
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 fdcf 	bl	800b500 <malloc>
 800a962:	4603      	mov	r3, r0
 800a964:	461a      	mov	r2, r3
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	e020      	b.n	800a9b2 <Set_Routine_Callback+0x8a>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	4413      	add	r3, r2
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	72fb      	strb	r3, [r7, #11]
 800a97c:	7afb      	ldrb	r3, [r7, #11]
 800a97e:	4619      	mov	r1, r3
 800a980:	4816      	ldr	r0, [pc, #88]	; (800a9dc <Set_Routine_Callback+0xb4>)
 800a982:	f000 fb9d 	bl	800b0c0 <Push_Routine>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10f      	bne.n	800a9ac <Set_Routine_Callback+0x84>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	441a      	add	r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	6819      	ldr	r1, [r3, #0]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	440b      	add	r3, r1
 800a99c:	7812      	ldrb	r2, [r2, #0]
 800a99e:	701a      	strb	r2, [r3, #0]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	791b      	ldrb	r3, [r3, #4]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	711a      	strb	r2, [r3, #4]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	60fb      	str	r3, [r7, #12]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	791b      	ldrb	r3, [r3, #4]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	dbd8      	blt.n	800a970 <Set_Routine_Callback+0x48>
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	791a      	ldrb	r2, [r3, #4]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	791b      	ldrb	r3, [r3, #4]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d002      	beq.n	800a9d0 <Set_Routine_Callback+0xa8>
 800a9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ce:	e000      	b.n	800a9d2 <Set_Routine_Callback+0xaa>
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	721a      	strb	r2, [r3, #8]
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	2400ce88 	.word	0x2400ce88

0800a9e0 <Set_Send_PDO_List>:

static void Set_Send_PDO_List(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
	Clear_PDO_to_Send();
 800a9ea:	f7ff fe1b 	bl	800a624 <Clear_PDO_to_Send>

    int t_cursor = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	617b      	str	r3, [r7, #20]
    uint8_t* t_ids = (uint8_t*)t_req->data;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	613b      	str	r3, [r7, #16]
    while (t_cursor < 2*t_req->size) {
 800a9f8:	e015      	b.n	800aa26 <Set_Send_PDO_List+0x46>
        uint8_t t_dod_id = t_ids[t_cursor++];
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	617a      	str	r2, [r7, #20]
 800aa00:	461a      	mov	r2, r3
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	4413      	add	r3, r2
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	73fb      	strb	r3, [r7, #15]
        uint8_t t_obj_id = t_ids[t_cursor++];
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	617a      	str	r2, [r7, #20]
 800aa10:	461a      	mov	r2, r3
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	4413      	add	r3, r2
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	73bb      	strb	r3, [r7, #14]
        Add_PDO_to_Send(t_dod_id, t_obj_id);
 800aa1a:	7bba      	ldrb	r2, [r7, #14]
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff fd23 	bl	800a46c <Add_PDO_to_Send>
    while (t_cursor < 2*t_req->size) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	791b      	ldrb	r3, [r3, #4]
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	dbe3      	blt.n	800a9fa <Set_Send_PDO_List+0x1a>
    }

    t_res->status = DATA_OBJECT_SDO_SUCC;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2200      	movs	r2, #0
 800aa36:	721a      	strb	r2, [r3, #8]
}
 800aa38:	bf00      	nop
 800aa3a:	3718      	adds	r7, #24
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <Set_MS_Enum>:

static void Set_MS_Enum(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
	memcpy(&MS_enum, t_req->data, 1);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	781a      	ldrb	r2, [r3, #0]
 800aa50:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <Set_MS_Enum+0x2c>)
 800aa52:	701a      	strb	r2, [r3, #0]

	t_res->size = 0;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2200      	movs	r2, #0
 800aa58:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	721a      	strb	r2, [r3, #8]
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	2400cf64 	.word	0x2400cf64

0800aa70 <Set_GUI_COMM_OnOff>:

static void Set_GUI_COMM_OnOff(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	memcpy(&GUI_onoff, t_req->data, 1);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	781a      	ldrb	r2, [r3, #0]
 800aa80:	4b06      	ldr	r3, [pc, #24]	; (800aa9c <Set_GUI_COMM_OnOff+0x2c>)
 800aa82:	701a      	strb	r2, [r3, #0]

	t_res->size = 1;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2201      	movs	r2, #1
 800aa88:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	721a      	strb	r2, [r3, #8]
}
 800aa90:	bf00      	nop
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	2400cf6c 	.word	0x2400cf6c

0800aaa0 <Set_GUI_COMM_Command>:

static void Set_GUI_COMM_Command(MsgSDOargs* t_req, MsgSDOargs* t_res)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
	memcpy(&GUI_command, t_req->data, 1);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	781a      	ldrb	r2, [r3, #0]
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <Set_GUI_COMM_Command+0x2c>)
 800aab2:	701a      	strb	r2, [r3, #0]

	t_res->size = 1;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2201      	movs	r2, #1
 800aab8:	711a      	strb	r2, [r3, #4]
	t_res->status = DATA_OBJECT_SDO_SUCC;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2200      	movs	r2, #0
 800aabe:	721a      	strb	r2, [r3, #8]
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	2400cf10 	.word	0x2400cf10

0800aad0 <StateOff_Ent>:
 |___/\__\__,_|\__\___/__/

*/

static void StateOff_Ent()
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	af00      	add	r7, sp, #0
	GUI_onoff = 0;
 800aad4:	4b05      	ldr	r3, [pc, #20]	; (800aaec <StateOff_Ent+0x1c>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	701a      	strb	r2, [r3, #0]
	GUI_command = 0;
 800aada:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <StateOff_Ent+0x20>)
 800aadc:	2200      	movs	r2, #0
 800aade:	701a      	strb	r2, [r3, #0]
    Transition_State(&msg_hdlr_task.state_machine, e_State_Standby);
 800aae0:	2101      	movs	r1, #1
 800aae2:	4804      	ldr	r0, [pc, #16]	; (800aaf4 <StateOff_Ent+0x24>)
 800aae4:	f000 fc28 	bl	800b338 <Transition_State>
}
 800aae8:	bf00      	nop
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	2400cf6c 	.word	0x2400cf6c
 800aaf0:	2400cf10 	.word	0x2400cf10
 800aaf4:	2400ce54 	.word	0x2400ce54

0800aaf8 <StateStandby_Ent>:

static void StateStandby_Ent()
{}
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	bf00      	nop
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <StateStandby_Run>:

static void StateStandby_Run()
{
 800ab06:	b480      	push	{r7}
 800ab08:	af00      	add	r7, sp, #0

}
 800ab0a:	bf00      	nop
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <StateStandby_Ext>:

static void StateStandby_Ext()
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0
}
 800ab18:	bf00      	nop
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <StateEnable_Ent>:

static void StateEnable_Ent()
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
	comm_loop_cnt = 0;
 800ab28:	4b03      	ldr	r3, [pc, #12]	; (800ab38 <StateEnable_Ent+0x14>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]
	Ent_Routines(&msg_hdlr_task.routine);
 800ab2e:	4803      	ldr	r0, [pc, #12]	; (800ab3c <StateEnable_Ent+0x18>)
 800ab30:	f000 f9f4 	bl	800af1c <Ent_Routines>
}
 800ab34:	bf00      	nop
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	24000360 	.word	0x24000360
 800ab3c:	2400ce88 	.word	0x2400ce88

0800ab40 <StateEnable_Run>:

static void StateEnable_Run()
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
	Run_Routines(&msg_hdlr_task.routine);
 800ab44:	4804      	ldr	r0, [pc, #16]	; (800ab58 <StateEnable_Run+0x18>)
 800ab46:	f000 fa29 	bl	800af9c <Run_Routines>

    comm_loop_cnt++;
 800ab4a:	4b04      	ldr	r3, [pc, #16]	; (800ab5c <StateEnable_Run+0x1c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	4a02      	ldr	r2, [pc, #8]	; (800ab5c <StateEnable_Run+0x1c>)
 800ab52:	6013      	str	r3, [r2, #0]
}
 800ab54:	bf00      	nop
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	2400ce88 	.word	0x2400ce88
 800ab5c:	24000360 	.word	0x24000360

0800ab60 <StateEnable_Ext>:

static void StateEnable_Ext()
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	af00      	add	r7, sp, #0
	Ext_Routines(&msg_hdlr_task.routine);
 800ab64:	4805      	ldr	r0, [pc, #20]	; (800ab7c <StateEnable_Ext+0x1c>)
 800ab66:	f000 fa4f 	bl	800b008 <Ext_Routines>

	GUI_onoff = 0;
 800ab6a:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <StateEnable_Ext+0x20>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	701a      	strb	r2, [r3, #0]
	GUI_command = 0;
 800ab70:	4b04      	ldr	r3, [pc, #16]	; (800ab84 <StateEnable_Ext+0x24>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	701a      	strb	r2, [r3, #0]
}
 800ab76:	bf00      	nop
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	2400ce88 	.word	0x2400ce88
 800ab80:	2400cf6c 	.word	0x2400cf6c
 800ab84:	2400cf10 	.word	0x2400cf10

0800ab88 <StateError_Run>:

static void StateError_Run()
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0

}
 800ab8c:	bf00      	nop
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
	...

0800ab98 <Init_Msg_Hdlr>:
 |_|  |_\__,_|_|_||_|
                     
*/

void Init_Msg_Hdlr()
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b098      	sub	sp, #96	; 0x60
 800ab9c:	af02      	add	r7, sp, #8
	node_id = NODE_ID_LA;
 800ab9e:	4b8b      	ldr	r3, [pc, #556]	; (800adcc <Init_Msg_Hdlr+0x234>)
 800aba0:	2206      	movs	r2, #6
 800aba2:	701a      	strb	r2, [r3, #0]
    ori_node = 0x00;
 800aba4:	4b8a      	ldr	r3, [pc, #552]	; (800add0 <Init_Msg_Hdlr+0x238>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	701a      	strb	r2, [r3, #0]

    uint16_t t_mask = 0x00F;
 800abaa:	230f      	movs	r3, #15
 800abac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    uint32_t t_filter1 = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	653b      	str	r3, [r7, #80]	; 0x50
    uint32_t t_filter2 = NODE_ID_LA;
 800abb4:	2306      	movs	r3, #6
 800abb6:	64fb      	str	r3, [r7, #76]	; 0x4c

    /*Communication Init*/
//    comm_type = Init_IOIF_USB();
    comm_type = e_FDCAN;
 800abb8:	4b86      	ldr	r3, [pc, #536]	; (800add4 <Init_Msg_Hdlr+0x23c>)
 800abba:	2200      	movs	r2, #0
 800abbc:	701a      	strb	r2, [r3, #0]

    if(comm_type == e_FDCAN){
 800abbe:	4b85      	ldr	r3, [pc, #532]	; (800add4 <Init_Msg_Hdlr+0x23c>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d106      	bne.n	800abd4 <Init_Msg_Hdlr+0x3c>
    	Init_IOIF_Fdcan(t_mask, t_filter1, t_filter2);
 800abc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800abca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fc fe8e 	bl	80078f0 <Init_IOIF_Fdcan>
    }

    /*Task Init*/
    Init_Task(&msg_hdlr_task);
 800abd4:	4880      	ldr	r0, [pc, #512]	; (800add8 <Init_Msg_Hdlr+0x240>)
 800abd6:	f000 fbd1 	bl	800b37c <Init_Task>

	/* State Definition */
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Off,      StateOff_Ent,       NULL,    			NULL,   				 true);
 800abda:	1d38      	adds	r0, r7, #4
 800abdc:	2300      	movs	r3, #0
 800abde:	2200      	movs	r2, #0
 800abe0:	497e      	ldr	r1, [pc, #504]	; (800addc <Init_Msg_Hdlr+0x244>)
 800abe2:	f000 faeb 	bl	800b1bc <Create_State_Entity>
 800abe6:	2301      	movs	r3, #1
 800abe8:	9301      	str	r3, [sp, #4]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	1d3b      	adds	r3, r7, #4
 800abf0:	cb0c      	ldmia	r3, {r2, r3}
 800abf2:	2100      	movs	r1, #0
 800abf4:	4878      	ldr	r0, [pc, #480]	; (800add8 <Init_Msg_Hdlr+0x240>)
 800abf6:	f000 fbe0 	bl	800b3ba <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Standby,  StateStandby_Ent,   StateStandby_Run,	StateStandby_Ext,   	false);
 800abfa:	f107 0010 	add.w	r0, r7, #16
 800abfe:	4b78      	ldr	r3, [pc, #480]	; (800ade0 <Init_Msg_Hdlr+0x248>)
 800ac00:	4a78      	ldr	r2, [pc, #480]	; (800ade4 <Init_Msg_Hdlr+0x24c>)
 800ac02:	4979      	ldr	r1, [pc, #484]	; (800ade8 <Init_Msg_Hdlr+0x250>)
 800ac04:	f000 fada 	bl	800b1bc <Create_State_Entity>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9301      	str	r3, [sp, #4]
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	f107 0310 	add.w	r3, r7, #16
 800ac14:	cb0c      	ldmia	r3, {r2, r3}
 800ac16:	2101      	movs	r1, #1
 800ac18:	486f      	ldr	r0, [pc, #444]	; (800add8 <Init_Msg_Hdlr+0x240>)
 800ac1a:	f000 fbce 	bl	800b3ba <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Enable,   StateEnable_Ent,   	StateEnable_Run, 	StateEnable_Ext,   		false);
 800ac1e:	f107 001c 	add.w	r0, r7, #28
 800ac22:	4b72      	ldr	r3, [pc, #456]	; (800adec <Init_Msg_Hdlr+0x254>)
 800ac24:	4a72      	ldr	r2, [pc, #456]	; (800adf0 <Init_Msg_Hdlr+0x258>)
 800ac26:	4973      	ldr	r1, [pc, #460]	; (800adf4 <Init_Msg_Hdlr+0x25c>)
 800ac28:	f000 fac8 	bl	800b1bc <Create_State_Entity>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	f107 031c 	add.w	r3, r7, #28
 800ac38:	cb0c      	ldmia	r3, {r2, r3}
 800ac3a:	2102      	movs	r1, #2
 800ac3c:	4866      	ldr	r0, [pc, #408]	; (800add8 <Init_Msg_Hdlr+0x240>)
 800ac3e:	f000 fbbc 	bl	800b3ba <Set_Task_State_Entity>
	TASK_CREATE_STATE(&msg_hdlr_task, e_State_Error,    NULL,   			StateError_Run,    	NULL,   				false);
 800ac42:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ac46:	2300      	movs	r3, #0
 800ac48:	4a6b      	ldr	r2, [pc, #428]	; (800adf8 <Init_Msg_Hdlr+0x260>)
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	f000 fab6 	bl	800b1bc <Create_State_Entity>
 800ac50:	2300      	movs	r3, #0
 800ac52:	9301      	str	r3, [sp, #4]
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac5c:	cb0c      	ldmia	r3, {r2, r3}
 800ac5e:	2103      	movs	r1, #3
 800ac60:	485d      	ldr	r0, [pc, #372]	; (800add8 <Init_Msg_Hdlr+0x240>)
 800ac62:	f000 fbaa 	bl	800b3ba <Set_Task_State_Entity>

    TASK_CREATE_ROUTINE(&msg_hdlr_task,  ROUTINE_ID_MSG_PDO_SEND, 			NULL, Send_PDO, 		Ext_Send_PDO);
 800ac66:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800ac6a:	4b64      	ldr	r3, [pc, #400]	; (800adfc <Init_Msg_Hdlr+0x264>)
 800ac6c:	4a64      	ldr	r2, [pc, #400]	; (800ae00 <Init_Msg_Hdlr+0x268>)
 800ac6e:	2100      	movs	r1, #0
 800ac70:	f000 f900 	bl	800ae74 <Create_Routine_Entity>
 800ac74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ac7c:	cb0c      	ldmia	r3, {r2, r3}
 800ac7e:	2100      	movs	r1, #0
 800ac80:	4855      	ldr	r0, [pc, #340]	; (800add8 <Init_Msg_Hdlr+0x240>)
 800ac82:	f000 fbc3 	bl	800b40c <Set_Task_Routine_Entity>
    TASK_CREATE_ROUTINE(&msg_hdlr_task,  ROUTINE_ID_MSG_PDO_DUMMY_TEST, 	NULL, Set_PDO_Dummy, 	NULL);
 800ac86:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	4a5d      	ldr	r2, [pc, #372]	; (800ae04 <Init_Msg_Hdlr+0x26c>)
 800ac8e:	2100      	movs	r1, #0
 800ac90:	f000 f8f0 	bl	800ae74 <Create_Routine_Entity>
 800ac94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ac9c:	cb0c      	ldmia	r3, {r2, r3}
 800ac9e:	2101      	movs	r1, #1
 800aca0:	484d      	ldr	r0, [pc, #308]	; (800add8 <Init_Msg_Hdlr+0x240>)
 800aca2:	f000 fbb3 	bl	800b40c <Set_Task_Routine_Entity>

	/* Data Object Definition */
    Create_DOD(TASK_ID_MSG);
 800aca6:	2002      	movs	r0, #2
 800aca8:	f7fe fc54 	bl	8009554 <Create_DOD>

	MSG_COMMON_SDO_CREATE(TASK_ID_MSG)
 800acac:	4b56      	ldr	r3, [pc, #344]	; (800ae08 <Init_Msg_Hdlr+0x270>)
 800acae:	2201      	movs	r2, #1
 800acb0:	2100      	movs	r1, #0
 800acb2:	2002      	movs	r0, #2
 800acb4:	f7fe fd20 	bl	80096f8 <Create_SDO>
 800acb8:	4b54      	ldr	r3, [pc, #336]	; (800ae0c <Init_Msg_Hdlr+0x274>)
 800acba:	2201      	movs	r2, #1
 800acbc:	2101      	movs	r1, #1
 800acbe:	2002      	movs	r0, #2
 800acc0:	f7fe fd1a 	bl	80096f8 <Create_SDO>
 800acc4:	4b52      	ldr	r3, [pc, #328]	; (800ae10 <Init_Msg_Hdlr+0x278>)
 800acc6:	2201      	movs	r2, #1
 800acc8:	2102      	movs	r1, #2
 800acca:	2002      	movs	r0, #2
 800accc:	f7fe fd14 	bl	80096f8 <Create_SDO>
 800acd0:	4b50      	ldr	r3, [pc, #320]	; (800ae14 <Init_Msg_Hdlr+0x27c>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	2103      	movs	r1, #3
 800acd6:	2002      	movs	r0, #2
 800acd8:	f7fe fd0e 	bl	80096f8 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_PDO_LIST, 				e_UInt16, Set_Send_PDO_List);
 800acdc:	4b4e      	ldr	r3, [pc, #312]	; (800ae18 <Init_Msg_Hdlr+0x280>)
 800acde:	2202      	movs	r2, #2
 800ace0:	2104      	movs	r1, #4
 800ace2:	2002      	movs	r0, #2
 800ace4:	f7fe fd08 	bl	80096f8 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_MS_ENUM,  				e_UInt8, Set_MS_Enum);
 800ace8:	4b4c      	ldr	r3, [pc, #304]	; (800ae1c <Init_Msg_Hdlr+0x284>)
 800acea:	2201      	movs	r2, #1
 800acec:	2105      	movs	r1, #5
 800acee:	2002      	movs	r0, #2
 800acf0:	f7fe fd02 	bl	80096f8 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_GUI_COMM_ONOFF,  		e_UInt8, Set_GUI_COMM_OnOff);
 800acf4:	4b4a      	ldr	r3, [pc, #296]	; (800ae20 <Init_Msg_Hdlr+0x288>)
 800acf6:	2201      	movs	r2, #1
 800acf8:	2106      	movs	r1, #6
 800acfa:	2002      	movs	r0, #2
 800acfc:	f7fe fcfc 	bl	80096f8 <Create_SDO>
    Create_SDO(TASK_ID_MSG, SDO_ID_MSG_GUI_COMM_COMMAND,  		e_UInt8, Set_GUI_COMM_Command);
 800ad00:	4b48      	ldr	r3, [pc, #288]	; (800ae24 <Init_Msg_Hdlr+0x28c>)
 800ad02:	2201      	movs	r2, #1
 800ad04:	2107      	movs	r1, #7
 800ad06:	2002      	movs	r0, #2
 800ad08:	f7fe fcf6 	bl	80096f8 <Create_SDO>

	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST1, 					e_Int32, 1, &test_dummy[0]);
 800ad0c:	4b46      	ldr	r3, [pc, #280]	; (800ae28 <Init_Msg_Hdlr+0x290>)
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	2301      	movs	r3, #1
 800ad12:	2206      	movs	r2, #6
 800ad14:	2100      	movs	r1, #0
 800ad16:	2002      	movs	r0, #2
 800ad18:	f7fe fc34 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST2, 					e_Int32, 1, &test_dummy[1]);
 800ad1c:	4b43      	ldr	r3, [pc, #268]	; (800ae2c <Init_Msg_Hdlr+0x294>)
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	2301      	movs	r3, #1
 800ad22:	2206      	movs	r2, #6
 800ad24:	2101      	movs	r1, #1
 800ad26:	2002      	movs	r0, #2
 800ad28:	f7fe fc2c 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST3, 					e_Int32, 1, &test_dummy[2]);
 800ad2c:	4b40      	ldr	r3, [pc, #256]	; (800ae30 <Init_Msg_Hdlr+0x298>)
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	2301      	movs	r3, #1
 800ad32:	2206      	movs	r2, #6
 800ad34:	2102      	movs	r1, #2
 800ad36:	2002      	movs	r0, #2
 800ad38:	f7fe fc24 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST4, 					e_Int32, 1, &test_dummy[3]);
 800ad3c:	4b3d      	ldr	r3, [pc, #244]	; (800ae34 <Init_Msg_Hdlr+0x29c>)
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	2301      	movs	r3, #1
 800ad42:	2206      	movs	r2, #6
 800ad44:	2103      	movs	r1, #3
 800ad46:	2002      	movs	r0, #2
 800ad48:	f7fe fc1c 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST5, 					e_Int32, 1, &test_dummy[4]);
 800ad4c:	4b3a      	ldr	r3, [pc, #232]	; (800ae38 <Init_Msg_Hdlr+0x2a0>)
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	2301      	movs	r3, #1
 800ad52:	2206      	movs	r2, #6
 800ad54:	2104      	movs	r1, #4
 800ad56:	2002      	movs	r0, #2
 800ad58:	f7fe fc14 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST6, 					e_Int32, 1, &test_dummy[5]);
 800ad5c:	4b37      	ldr	r3, [pc, #220]	; (800ae3c <Init_Msg_Hdlr+0x2a4>)
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	2301      	movs	r3, #1
 800ad62:	2206      	movs	r2, #6
 800ad64:	2105      	movs	r1, #5
 800ad66:	2002      	movs	r0, #2
 800ad68:	f7fe fc0c 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST7, 					e_Int32, 1, &test_dummy[6]);
 800ad6c:	4b34      	ldr	r3, [pc, #208]	; (800ae40 <Init_Msg_Hdlr+0x2a8>)
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	2301      	movs	r3, #1
 800ad72:	2206      	movs	r2, #6
 800ad74:	2106      	movs	r1, #6
 800ad76:	2002      	movs	r0, #2
 800ad78:	f7fe fc04 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST8, 					e_Int32, 1, &test_dummy[7]);
 800ad7c:	4b31      	ldr	r3, [pc, #196]	; (800ae44 <Init_Msg_Hdlr+0x2ac>)
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	2301      	movs	r3, #1
 800ad82:	2206      	movs	r2, #6
 800ad84:	2107      	movs	r1, #7
 800ad86:	2002      	movs	r0, #2
 800ad88:	f7fe fbfc 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST9, 					e_Int32, 1, &test_dummy[8]);
 800ad8c:	4b2e      	ldr	r3, [pc, #184]	; (800ae48 <Init_Msg_Hdlr+0x2b0>)
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	2301      	movs	r3, #1
 800ad92:	2206      	movs	r2, #6
 800ad94:	2108      	movs	r1, #8
 800ad96:	2002      	movs	r0, #2
 800ad98:	f7fe fbf4 	bl	8009584 <Create_PDO>
	Create_PDO(TASK_ID_MSG, PDO_ID_MSG_TEST10, 					e_Int32, 1, &test_dummy[9]);
 800ad9c:	4b2b      	ldr	r3, [pc, #172]	; (800ae4c <Init_Msg_Hdlr+0x2b4>)
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	2301      	movs	r3, #1
 800ada2:	2206      	movs	r2, #6
 800ada4:	2109      	movs	r1, #9
 800ada6:	2002      	movs	r0, #2
 800ada8:	f7fe fbec 	bl	8009584 <Create_PDO>

	/* Callback Allocation */
    if(comm_type == e_FDCAN){
 800adac:	4b09      	ldr	r3, [pc, #36]	; (800add4 <Init_Msg_Hdlr+0x23c>)
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d102      	bne.n	800adba <Init_Msg_Hdlr+0x222>
    	fdcan_rx_callback_ptr = Fdcan_Rx_Hdlr;
 800adb4:	4b26      	ldr	r3, [pc, #152]	; (800ae50 <Init_Msg_Hdlr+0x2b8>)
 800adb6:	4a27      	ldr	r2, [pc, #156]	; (800ae54 <Init_Msg_Hdlr+0x2bc>)
 800adb8:	601a      	str	r2, [r3, #0]
    } else {
//    	ioif_usb_rx_callback_ptr = USB_Rx_Hdlr;
    }

    /* Start */
    if(Start_TIM6()>0){
 800adba:	f7fc fe97 	bl	8007aec <Start_TIM6>
        //TODO: ERROR PROCESS
    }
    ioif_tim6_callback_ptr = Run_Msg_Hdlr;
 800adbe:	4b26      	ldr	r3, [pc, #152]	; (800ae58 <Init_Msg_Hdlr+0x2c0>)
 800adc0:	4a26      	ldr	r2, [pc, #152]	; (800ae5c <Init_Msg_Hdlr+0x2c4>)
 800adc2:	601a      	str	r2, [r3, #0]
}
 800adc4:	bf00      	nop
 800adc6:	3758      	adds	r7, #88	; 0x58
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	2400ce40 	.word	0x2400ce40
 800add0:	2400d0cc 	.word	0x2400d0cc
 800add4:	2400d379 	.word	0x2400d379
 800add8:	2400ce48 	.word	0x2400ce48
 800addc:	0800aad1 	.word	0x0800aad1
 800ade0:	0800ab15 	.word	0x0800ab15
 800ade4:	0800ab07 	.word	0x0800ab07
 800ade8:	0800aaf9 	.word	0x0800aaf9
 800adec:	0800ab61 	.word	0x0800ab61
 800adf0:	0800ab41 	.word	0x0800ab41
 800adf4:	0800ab25 	.word	0x0800ab25
 800adf8:	0800ab89 	.word	0x0800ab89
 800adfc:	0800a2b5 	.word	0x0800a2b5
 800ae00:	0800a221 	.word	0x0800a221
 800ae04:	0800a2d9 	.word	0x0800a2d9
 800ae08:	0800a835 	.word	0x0800a835
 800ae0c:	0800a871 	.word	0x0800a871
 800ae10:	0800a8ad 	.word	0x0800a8ad
 800ae14:	0800a929 	.word	0x0800a929
 800ae18:	0800a9e1 	.word	0x0800a9e1
 800ae1c:	0800aa41 	.word	0x0800aa41
 800ae20:	0800aa71 	.word	0x0800aa71
 800ae24:	0800aaa1 	.word	0x0800aaa1
 800ae28:	2400d5e4 	.word	0x2400d5e4
 800ae2c:	2400d5e8 	.word	0x2400d5e8
 800ae30:	2400d5ec 	.word	0x2400d5ec
 800ae34:	2400d5f0 	.word	0x2400d5f0
 800ae38:	2400d5f4 	.word	0x2400d5f4
 800ae3c:	2400d5f8 	.word	0x2400d5f8
 800ae40:	2400d5fc 	.word	0x2400d5fc
 800ae44:	2400d600 	.word	0x2400d600
 800ae48:	2400d604 	.word	0x2400d604
 800ae4c:	2400d608 	.word	0x2400d608
 800ae50:	2400cf78 	.word	0x2400cf78
 800ae54:	0800a785 	.word	0x0800a785
 800ae58:	2400036c 	.word	0x2400036c
 800ae5c:	0800ae61 	.word	0x0800ae61

0800ae60 <Run_Msg_Hdlr>:

void Run_Msg_Hdlr()
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
//	uint32_t msg_hdlr_loop_time_cnt_1 = DWT->CYCCNT;

	Run_Task(&msg_hdlr_task);
 800ae64:	4802      	ldr	r0, [pc, #8]	; (800ae70 <Run_Msg_Hdlr+0x10>)
 800ae66:	f000 fa9b 	bl	800b3a0 <Run_Task>

//	uint32_t msg_hdlr_loop_time_cnt_2 = DWT->CYCCNT;
//	msg_hdlr_loop_time_us = (msg_hdlr_loop_time_cnt_2 - msg_hdlr_loop_time_cnt_1)/480; // microsecond
}
 800ae6a:	bf00      	nop
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2400ce48 	.word	0x2400ce48

0800ae74 <Create_Routine_Entity>:
#include <routine.h>

// Routine Entity
RoutineEntityStruct Create_Routine_Entity(RoutineFncPtr t_ent, RoutineFncPtr t_run, RoutineFncPtr t_ext)
{
 800ae74:	b490      	push	{r4, r7}
 800ae76:	b088      	sub	sp, #32
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	603b      	str	r3, [r7, #0]
    RoutineEntityStruct t_res;
    t_res.on_enter = t_ent;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	617b      	str	r3, [r7, #20]
    t_res.on_run = t_run;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	61bb      	str	r3, [r7, #24]
    t_res.on_exit = t_ext;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	61fb      	str	r3, [r7, #28]
    return t_res;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	461c      	mov	r4, r3
 800ae92:	f107 0314 	add.w	r3, r7, #20
 800ae96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bc90      	pop	{r4, r7}
 800aea6:	4770      	bx	lr

0800aea8 <Init_Routine>:


// DriveRoutine Interface
void Init_Routine(RoutineStruct* t_routine)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	e025      	b.n	800af02 <Init_Routine+0x5a>
    	t_routine->id[i] = 0;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	2100      	movs	r1, #0
 800aebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	t_routine->entities[i].on_enter = NULL;
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	4613      	mov	r3, r2
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	4413      	add	r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	440b      	add	r3, r1
 800aece:	3324      	adds	r3, #36	; 0x24
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_run = NULL;
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	4613      	mov	r3, r2
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	4413      	add	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	440b      	add	r3, r1
 800aee2:	3328      	adds	r3, #40	; 0x28
 800aee4:	2200      	movs	r2, #0
 800aee6:	601a      	str	r2, [r3, #0]
    	t_routine->entities[i].on_exit = NULL;
 800aee8:	6879      	ldr	r1, [r7, #4]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	4613      	mov	r3, r2
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	4413      	add	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	440b      	add	r3, r1
 800aef6:	332c      	adds	r3, #44	; 0x2c
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3301      	adds	r3, #1
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2b07      	cmp	r3, #7
 800af06:	ddd6      	ble.n	800aeb6 <Init_Routine+0xe>
    }
    t_routine->n_id = 0;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	621a      	str	r2, [r3, #32]
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
	...

0800af1c <Ent_Routines>:

int Ent_Routines(RoutineStruct* t_routine)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	static int t_res = 0;
	static int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800af24:	2300      	movs	r3, #0
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	e029      	b.n	800af7e <Ent_Routines+0x62>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af32:	4a18      	ldr	r2, [pc, #96]	; (800af94 <Ent_Routines+0x78>)
 800af34:	6013      	str	r3, [r2, #0]
		if (t_routine->entities[t_id].on_enter) {
 800af36:	4b17      	ldr	r3, [pc, #92]	; (800af94 <Ent_Routines+0x78>)
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	4613      	mov	r3, r2
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	4413      	add	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	440b      	add	r3, r1
 800af46:	3324      	adds	r3, #36	; 0x24
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00d      	beq.n	800af6a <Ent_Routines+0x4e>
			t_res = t_routine->entities[t_id].on_enter();
 800af4e:	4b11      	ldr	r3, [pc, #68]	; (800af94 <Ent_Routines+0x78>)
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	4613      	mov	r3, r2
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	4413      	add	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	440b      	add	r3, r1
 800af5e:	3324      	adds	r3, #36	; 0x24
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4798      	blx	r3
 800af64:	4603      	mov	r3, r0
 800af66:	4a0c      	ldr	r2, [pc, #48]	; (800af98 <Ent_Routines+0x7c>)
 800af68:	6013      	str	r3, [r2, #0]
		}
        if (t_res < 0) {
 800af6a:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <Ent_Routines+0x7c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	da02      	bge.n	800af78 <Ent_Routines+0x5c>
            return t_res;
 800af72:	4b09      	ldr	r3, [pc, #36]	; (800af98 <Ent_Routines+0x7c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	e008      	b.n	800af8a <Ent_Routines+0x6e>
    for (int i = 0; i < t_routine->n_id; i++){
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	3301      	adds	r3, #1
 800af7c:	60fb      	str	r3, [r7, #12]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1a      	ldr	r2, [r3, #32]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	429a      	cmp	r2, r3
 800af86:	d8d0      	bhi.n	800af2a <Ent_Routines+0xe>
        }
    }
    return 0;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	240000a4 	.word	0x240000a4
 800af98:	240000a8 	.word	0x240000a8

0800af9c <Run_Routines>:

int Run_Routines(RoutineStruct* t_routine)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
	int t_res = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	617b      	str	r3, [r7, #20]
	int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800afa8:	2300      	movs	r3, #0
 800afaa:	613b      	str	r3, [r7, #16]
 800afac:	e022      	b.n	800aff4 <Run_Routines+0x58>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb6:	60fb      	str	r3, [r7, #12]
		if (t_routine->entities[t_id].on_run) {
 800afb8:	6879      	ldr	r1, [r7, #4]
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	4613      	mov	r3, r2
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	440b      	add	r3, r1
 800afc6:	3328      	adds	r3, #40	; 0x28
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00a      	beq.n	800afe4 <Run_Routines+0x48>
			t_res = t_routine->entities[t_id].on_run();
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4613      	mov	r3, r2
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	4413      	add	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	440b      	add	r3, r1
 800afdc:	3328      	adds	r3, #40	; 0x28
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4798      	blx	r3
 800afe2:	6178      	str	r0, [r7, #20]
		}
        if (t_res < 0) {
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	da01      	bge.n	800afee <Run_Routines+0x52>
            return t_res;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	e008      	b.n	800b000 <Run_Routines+0x64>
    for (int i = 0; i < t_routine->n_id; i++){
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	3301      	adds	r3, #1
 800aff2:	613b      	str	r3, [r7, #16]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a1a      	ldr	r2, [r3, #32]
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	429a      	cmp	r2, r3
 800affc:	d8d7      	bhi.n	800afae <Run_Routines+0x12>
        }
    }
    return 0;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <Ext_Routines>:

int Ext_Routines(RoutineStruct* t_routine)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
	static int t_res = 0;
	static int t_id;

    for (int i = 0; i < t_routine->n_id; i++){
 800b010:	2300      	movs	r3, #0
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	e029      	b.n	800b06a <Ext_Routines+0x62>
        //TODO: routine func exception handling

    	t_id = t_routine->id[i];
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01e:	4a18      	ldr	r2, [pc, #96]	; (800b080 <Ext_Routines+0x78>)
 800b020:	6013      	str	r3, [r2, #0]
		if (t_routine->entities[t_id].on_exit) {
 800b022:	4b17      	ldr	r3, [pc, #92]	; (800b080 <Ext_Routines+0x78>)
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	4613      	mov	r3, r2
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	440b      	add	r3, r1
 800b032:	332c      	adds	r3, #44	; 0x2c
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00d      	beq.n	800b056 <Ext_Routines+0x4e>
			t_res = t_routine->entities[t_id].on_exit();
 800b03a:	4b11      	ldr	r3, [pc, #68]	; (800b080 <Ext_Routines+0x78>)
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	4613      	mov	r3, r2
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	440b      	add	r3, r1
 800b04a:	332c      	adds	r3, #44	; 0x2c
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4798      	blx	r3
 800b050:	4603      	mov	r3, r0
 800b052:	4a0c      	ldr	r2, [pc, #48]	; (800b084 <Ext_Routines+0x7c>)
 800b054:	6013      	str	r3, [r2, #0]
		}
        if (t_res < 0) {
 800b056:	4b0b      	ldr	r3, [pc, #44]	; (800b084 <Ext_Routines+0x7c>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	da02      	bge.n	800b064 <Ext_Routines+0x5c>
            return t_res;
 800b05e:	4b09      	ldr	r3, [pc, #36]	; (800b084 <Ext_Routines+0x7c>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	e008      	b.n	800b076 <Ext_Routines+0x6e>
    for (int i = 0; i < t_routine->n_id; i++){
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3301      	adds	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a1a      	ldr	r2, [r3, #32]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	429a      	cmp	r2, r3
 800b072:	d8d0      	bhi.n	800b016 <Ext_Routines+0xe>
        }
    }
    return 0;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	240000ac 	.word	0x240000ac
 800b084:	240000b0 	.word	0x240000b0

0800b088 <Clear_Routines>:

void Clear_Routines(RoutineStruct* t_routine)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e008      	b.n	800b0a8 <Clear_Routines+0x20>
    	t_routine->id[i] = ROUTINE_DEFAULT_ID;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	f04f 31ff 	mov.w	r1, #4294967295
 800b09e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < ROUTINE_MAX_ENTITIES; i++) {
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b07      	cmp	r3, #7
 800b0ac:	ddf3      	ble.n	800b096 <Clear_Routines+0xe>
    }
    t_routine->n_id = 0;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	621a      	str	r2, [r3, #32]
}
 800b0b4:	bf00      	nop
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <Push_Routine>:

int Push_Routine(RoutineStruct* t_routine, uint8_t t_id)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
    if (t_routine->n_id >= ROUTINE_MAX_ENTITIES) {
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a1b      	ldr	r3, [r3, #32]
 800b0d0:	2b07      	cmp	r3, #7
 800b0d2:	d902      	bls.n	800b0da <Push_Routine+0x1a>
        return -1;
 800b0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d8:	e01d      	b.n	800b116 <Push_Routine+0x56>
    }

    for(int i = 0; i < t_routine->n_id; i++){
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]
 800b0de:	e00b      	b.n	800b0f8 <Push_Routine+0x38>
    	if(t_routine->id[i] == t_id){return 0;}
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b0e8:	78fb      	ldrb	r3, [r7, #3]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d101      	bne.n	800b0f2 <Push_Routine+0x32>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e011      	b.n	800b116 <Push_Routine+0x56>
    for(int i = 0; i < t_routine->n_id; i++){
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a1a      	ldr	r2, [r3, #32]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d8ee      	bhi.n	800b0e0 <Push_Routine+0x20>
    }
    
    t_routine->id[t_routine->n_id++] = t_id;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	1c59      	adds	r1, r3, #1
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	6211      	str	r1, [r2, #32]
 800b10c:	78f9      	ldrb	r1, [r7, #3]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 0;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
	...

0800b124 <Transition_Map>:

#include "state_machine.h"

// State & Transition Map
static StateEnum Transition_Map(StateEnum t_curr, StateEnum t_cmd)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	460a      	mov	r2, r1
 800b12e:	71fb      	strb	r3, [r7, #7]
 800b130:	4613      	mov	r3, r2
 800b132:	71bb      	strb	r3, [r7, #6]
    if (t_curr == t_cmd) {
 800b134:	79fa      	ldrb	r2, [r7, #7]
 800b136:	79bb      	ldrb	r3, [r7, #6]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d101      	bne.n	800b140 <Transition_Map+0x1c>
        return t_curr;
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	e037      	b.n	800b1b0 <Transition_Map+0x8c>
    }

    switch (t_curr) {
 800b140:	79fb      	ldrb	r3, [r7, #7]
 800b142:	2b03      	cmp	r3, #3
 800b144:	d82a      	bhi.n	800b19c <Transition_Map+0x78>
 800b146:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <Transition_Map+0x28>)
 800b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14c:	0800b15d 	.word	0x0800b15d
 800b150:	0800b167 	.word	0x0800b167
 800b154:	0800b177 	.word	0x0800b177
 800b158:	0800b18d 	.word	0x0800b18d
    /*  |- From State -|  |---------------------------------- To State ----------------------------------| |- If valid -| |else| */
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 800b15c:	79bb      	ldrb	r3, [r7, #6]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d11e      	bne.n	800b1a0 <Transition_Map+0x7c>
 800b162:	79bb      	ldrb	r3, [r7, #6]
 800b164:	e024      	b.n	800b1b0 <Transition_Map+0x8c>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 800b166:	79bb      	ldrb	r3, [r7, #6]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <Transition_Map+0x4e>
 800b16c:	79bb      	ldrb	r3, [r7, #6]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d118      	bne.n	800b1a4 <Transition_Map+0x80>
 800b172:	79bb      	ldrb	r3, [r7, #6]
 800b174:	e01c      	b.n	800b1b0 <Transition_Map+0x8c>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 800b176:	79bb      	ldrb	r3, [r7, #6]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d005      	beq.n	800b188 <Transition_Map+0x64>
 800b17c:	79bb      	ldrb	r3, [r7, #6]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d002      	beq.n	800b188 <Transition_Map+0x64>
 800b182:	79bb      	ldrb	r3, [r7, #6]
 800b184:	2b03      	cmp	r3, #3
 800b186:	d10f      	bne.n	800b1a8 <Transition_Map+0x84>
 800b188:	79bb      	ldrb	r3, [r7, #6]
 800b18a:	e011      	b.n	800b1b0 <Transition_Map+0x8c>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 800b18c:	79bb      	ldrb	r3, [r7, #6]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d002      	beq.n	800b198 <Transition_Map+0x74>
 800b192:	79bb      	ldrb	r3, [r7, #6]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d109      	bne.n	800b1ac <Transition_Map+0x88>
 800b198:	79bb      	ldrb	r3, [r7, #6]
 800b19a:	e009      	b.n	800b1b0 <Transition_Map+0x8c>
    default: break;
 800b19c:	bf00      	nop
 800b19e:	e006      	b.n	800b1ae <Transition_Map+0x8a>
    case e_State_Off:     if (0              	 || t_cmd==e_State_Standby || 0      	            || 0               ) 	 {return t_cmd; } break;
 800b1a0:	bf00      	nop
 800b1a2:	e004      	b.n	800b1ae <Transition_Map+0x8a>
    case e_State_Standby: if (t_cmd==e_State_Off || 0                  	   || t_cmd==e_State_Enable || 0               ) 	 {return t_cmd; } break;
 800b1a4:	bf00      	nop
 800b1a6:	e002      	b.n	800b1ae <Transition_Map+0x8a>
    case e_State_Enable:  if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0         	        || t_cmd==e_State_Error) {return t_cmd; } break;
 800b1a8:	bf00      	nop
 800b1aa:	e000      	b.n	800b1ae <Transition_Map+0x8a>
    case e_State_Error:   if (t_cmd==e_State_Off || t_cmd==e_State_Standby || 0             	    || 0               ) 	 {return t_cmd; } break;
 800b1ac:	bf00      	nop
    }

    return t_curr;
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <Create_State_Entity>:


// State Functions
StateEntityStruct Create_State_Entity(StateFuncPtr t_ent, StateFuncPtr t_run, StateFuncPtr t_ext)
{
 800b1bc:	b490      	push	{r4, r7}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	603b      	str	r3, [r7, #0]
    StateEntityStruct t_res;
    t_res.on_enter = t_ent;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	617b      	str	r3, [r7, #20]
    t_res.on_run =   t_run;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	61bb      	str	r3, [r7, #24]
    t_res.on_exit =  t_ext;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	61fb      	str	r3, [r7, #28]
    return t_res;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	461c      	mov	r4, r3
 800b1da:	f107 0314 	add.w	r3, r7, #20
 800b1de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b1e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	3720      	adds	r7, #32
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc90      	pop	{r4, r7}
 800b1ee:	4770      	bx	lr

0800b1f0 <Init_State_Machine>:


// State Machine Interfaces
void Init_State_Machine(StateMachineStruct* t_sm)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	e020      	b.n	800b240 <Init_State_Machine+0x50>
    	t_sm->entity[i].on_enter = NULL;
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	4613      	mov	r3, r2
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	3304      	adds	r3, #4
 800b20e:	2200      	movs	r2, #0
 800b210:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_run   = NULL;
 800b212:	6879      	ldr	r1, [r7, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	4613      	mov	r3, r2
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	4413      	add	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	440b      	add	r3, r1
 800b220:	3308      	adds	r3, #8
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
    	t_sm->entity[i].on_exit  = NULL;
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	4613      	mov	r3, r2
 800b22c:	005b      	lsls	r3, r3, #1
 800b22e:	4413      	add	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	440b      	add	r3, r1
 800b234:	330c      	adds	r3, #12
 800b236:	2200      	movs	r2, #0
 800b238:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < STATE_MACHINE_N_STATES; i++) {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	3301      	adds	r3, #1
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b03      	cmp	r3, #3
 800b244:	dddb      	ble.n	800b1fe <Init_State_Machine+0xe>
    }
    t_sm->entity_life_cycle = e_StateEntity_Ent;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	709a      	strb	r2, [r3, #2]
}
 800b24c:	bf00      	nop
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <Run_State_Machine>:

void Run_State_Machine(StateMachineStruct* t_sm)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
    switch (t_sm->entity_life_cycle) {
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	789b      	ldrb	r3, [r3, #2]
 800b264:	2b02      	cmp	r3, #2
 800b266:	d041      	beq.n	800b2ec <Run_State_Machine+0x94>
 800b268:	2b02      	cmp	r3, #2
 800b26a:	dc5c      	bgt.n	800b326 <Run_State_Machine+0xce>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <Run_State_Machine+0x1e>
 800b270:	2b01      	cmp	r3, #1
 800b272:	d021      	beq.n	800b2b8 <Run_State_Machine+0x60>
        }
        t_sm->entity_life_cycle = e_StateEntity_Ent;
        break;

    default: // Invalid Lifecycle
        break;
 800b274:	e057      	b.n	800b326 <Run_State_Machine+0xce>
        if (t_sm->entity[t_sm->curr_state].on_enter) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	4619      	mov	r1, r3
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	460b      	mov	r3, r1
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	440b      	add	r3, r1
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4413      	add	r3, r2
 800b288:	3304      	adds	r3, #4
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00b      	beq.n	800b2a8 <Run_State_Machine+0x50>
        	t_sm->entity[t_sm->curr_state].on_enter();
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	4619      	mov	r1, r3
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	440b      	add	r3, r1
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4798      	blx	r3
        if (t_sm->entity_life_cycle == e_StateEntity_Ent){
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	789b      	ldrb	r3, [r3, #2]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d13c      	bne.n	800b32a <Run_State_Machine+0xd2>
        	t_sm->entity_life_cycle = e_StateEntity_Run;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	709a      	strb	r2, [r3, #2]
        break;
 800b2b6:	e038      	b.n	800b32a <Run_State_Machine+0xd2>
        if (t_sm->entity[t_sm->curr_state].on_run) {
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	440b      	add	r3, r1
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4413      	add	r3, r2
 800b2ca:	3308      	adds	r3, #8
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d02d      	beq.n	800b32e <Run_State_Machine+0xd6>
        	t_sm->entity[t_sm->curr_state].on_run();
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	440b      	add	r3, r1
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4798      	blx	r3
        break;
 800b2ea:	e020      	b.n	800b32e <Run_State_Machine+0xd6>
        if (t_sm->entity[t_sm->prev_state].on_exit) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	785b      	ldrb	r3, [r3, #1]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	440b      	add	r3, r1
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	330c      	adds	r3, #12
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00b      	beq.n	800b31e <Run_State_Machine+0xc6>
        	t_sm->entity[t_sm->prev_state].on_exit();
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	785b      	ldrb	r3, [r3, #1]
 800b30a:	4619      	mov	r1, r3
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	460b      	mov	r3, r1
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	440b      	add	r3, r1
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	330c      	adds	r3, #12
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4798      	blx	r3
        t_sm->entity_life_cycle = e_StateEntity_Ent;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	709a      	strb	r2, [r3, #2]
        break;
 800b324:	e004      	b.n	800b330 <Run_State_Machine+0xd8>
        break;
 800b326:	bf00      	nop
 800b328:	e002      	b.n	800b330 <Run_State_Machine+0xd8>
        break;
 800b32a:	bf00      	nop
 800b32c:	e000      	b.n	800b330 <Run_State_Machine+0xd8>
        break;
 800b32e:	bf00      	nop
    }
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <Transition_State>:

void Transition_State(StateMachineStruct* t_sm, StateEnum t_state_cmd)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	70fb      	strb	r3, [r7, #3]
    StateEnum new_state = Transition_Map(t_sm->curr_state, t_state_cmd);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	78fa      	ldrb	r2, [r7, #3]
 800b34a:	4611      	mov	r1, r2
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff fee9 	bl	800b124 <Transition_Map>
 800b352:	4603      	mov	r3, r0
 800b354:	73fb      	strb	r3, [r7, #15]
    if (t_sm->curr_state != new_state) {
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	7bfa      	ldrb	r2, [r7, #15]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d009      	beq.n	800b374 <Transition_State+0x3c>
    	t_sm->prev_state = t_sm->curr_state;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	781a      	ldrb	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	705a      	strb	r2, [r3, #1]
    	t_sm->curr_state = new_state;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	7bfa      	ldrb	r2, [r7, #15]
 800b36c:	701a      	strb	r2, [r3, #0]
    	t_sm->entity_life_cycle = e_StateEntity_Ext;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2202      	movs	r2, #2
 800b372:	709a      	strb	r2, [r3, #2]
    }
}
 800b374:	bf00      	nop
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <Init_Task>:

#include <task.h>

// Device Interface
void Init_Task(TaskStruct* t_task)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
    Init_State_Machine(&t_task->state_machine);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	330c      	adds	r3, #12
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff ff31 	bl	800b1f0 <Init_State_Machine>
    Init_Routine(&t_task->routine);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	3340      	adds	r3, #64	; 0x40
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff fd88 	bl	800aea8 <Init_Routine>
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <Run_Task>:

void Run_Task(TaskStruct* t_task)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
    Run_State_Machine(&t_task->state_machine);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7ff ff53 	bl	800b258 <Run_State_Machine>
}
 800b3b2:	bf00      	nop
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <Set_Task_State_Entity>:

void Set_Task_State_Entity(TaskStruct* t_task, StateEnum t_state, StateEntityStruct t_entity, bool t_is_default)
{
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	f107 0010 	add.w	r0, r7, #16
 800b3c8:	e880 000c 	stmia.w	r0, {r2, r3}
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
	t_task->state_machine.entity[t_state] = t_entity;
 800b3d0:	78fa      	ldrb	r2, [r7, #3]
 800b3d2:	6879      	ldr	r1, [r7, #4]
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	4413      	add	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	440b      	add	r3, r1
 800b3de:	3308      	adds	r3, #8
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	f107 0210 	add.w	r2, r7, #16
 800b3e6:	ca07      	ldmia	r2, {r0, r1, r2}
 800b3e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if (t_is_default) {
 800b3ec:	7f3b      	ldrb	r3, [r7, #28]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d005      	beq.n	800b3fe <Set_Task_State_Entity+0x44>
    	t_task->state_machine.curr_state = t_state;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	78fa      	ldrb	r2, [r7, #3]
 800b3f6:	731a      	strb	r2, [r3, #12]
    	t_task->state_machine.prev_state = t_state;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	78fa      	ldrb	r2, [r7, #3]
 800b3fc:	735a      	strb	r2, [r3, #13]
    }
}
 800b3fe:	bf00      	nop
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	b002      	add	sp, #8
 800b40a:	4770      	bx	lr

0800b40c <Set_Task_Routine_Entity>:

//TODO: id, order range/duplication check
void Set_Task_Routine_Entity(TaskStruct* t_task, int t_id, RoutineEntityStruct t_entity)
{
 800b40c:	b082      	sub	sp, #8
 800b40e:	b480      	push	{r7}
 800b410:	b083      	sub	sp, #12
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	6039      	str	r1, [r7, #0]
 800b418:	f107 0110 	add.w	r1, r7, #16
 800b41c:	e881 000c 	stmia.w	r1, {r2, r3}
	t_task->routine.entities[t_id] = t_entity;
 800b420:	6879      	ldr	r1, [r7, #4]
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	4613      	mov	r3, r2
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	4413      	add	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	440b      	add	r3, r1
 800b42e:	3360      	adds	r3, #96	; 0x60
 800b430:	3304      	adds	r3, #4
 800b432:	f107 0210 	add.w	r2, r7, #16
 800b436:	ca07      	ldmia	r2, {r0, r1, r2}
 800b438:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	b002      	add	sp, #8
 800b448:	4770      	bx	lr
	...

0800b44c <__assert_func>:
 800b44c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b44e:	4614      	mov	r4, r2
 800b450:	461a      	mov	r2, r3
 800b452:	4b09      	ldr	r3, [pc, #36]	; (800b478 <__assert_func+0x2c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4605      	mov	r5, r0
 800b458:	68d8      	ldr	r0, [r3, #12]
 800b45a:	b14c      	cbz	r4, 800b470 <__assert_func+0x24>
 800b45c:	4b07      	ldr	r3, [pc, #28]	; (800b47c <__assert_func+0x30>)
 800b45e:	9100      	str	r1, [sp, #0]
 800b460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b464:	4906      	ldr	r1, [pc, #24]	; (800b480 <__assert_func+0x34>)
 800b466:	462b      	mov	r3, r5
 800b468:	f000 f814 	bl	800b494 <fiprintf>
 800b46c:	f000 fcde 	bl	800be2c <abort>
 800b470:	4b04      	ldr	r3, [pc, #16]	; (800b484 <__assert_func+0x38>)
 800b472:	461c      	mov	r4, r3
 800b474:	e7f3      	b.n	800b45e <__assert_func+0x12>
 800b476:	bf00      	nop
 800b478:	24000010 	.word	0x24000010
 800b47c:	0800d480 	.word	0x0800d480
 800b480:	0800d48d 	.word	0x0800d48d
 800b484:	0800d4bb 	.word	0x0800d4bb

0800b488 <__errno>:
 800b488:	4b01      	ldr	r3, [pc, #4]	; (800b490 <__errno+0x8>)
 800b48a:	6818      	ldr	r0, [r3, #0]
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	24000010 	.word	0x24000010

0800b494 <fiprintf>:
 800b494:	b40e      	push	{r1, r2, r3}
 800b496:	b503      	push	{r0, r1, lr}
 800b498:	4601      	mov	r1, r0
 800b49a:	ab03      	add	r3, sp, #12
 800b49c:	4805      	ldr	r0, [pc, #20]	; (800b4b4 <fiprintf+0x20>)
 800b49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a2:	6800      	ldr	r0, [r0, #0]
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	f000 f925 	bl	800b6f4 <_vfiprintf_r>
 800b4aa:	b002      	add	sp, #8
 800b4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4b0:	b003      	add	sp, #12
 800b4b2:	4770      	bx	lr
 800b4b4:	24000010 	.word	0x24000010

0800b4b8 <__libc_init_array>:
 800b4b8:	b570      	push	{r4, r5, r6, lr}
 800b4ba:	4d0d      	ldr	r5, [pc, #52]	; (800b4f0 <__libc_init_array+0x38>)
 800b4bc:	4c0d      	ldr	r4, [pc, #52]	; (800b4f4 <__libc_init_array+0x3c>)
 800b4be:	1b64      	subs	r4, r4, r5
 800b4c0:	10a4      	asrs	r4, r4, #2
 800b4c2:	2600      	movs	r6, #0
 800b4c4:	42a6      	cmp	r6, r4
 800b4c6:	d109      	bne.n	800b4dc <__libc_init_array+0x24>
 800b4c8:	4d0b      	ldr	r5, [pc, #44]	; (800b4f8 <__libc_init_array+0x40>)
 800b4ca:	4c0c      	ldr	r4, [pc, #48]	; (800b4fc <__libc_init_array+0x44>)
 800b4cc:	f001 ff20 	bl	800d310 <_init>
 800b4d0:	1b64      	subs	r4, r4, r5
 800b4d2:	10a4      	asrs	r4, r4, #2
 800b4d4:	2600      	movs	r6, #0
 800b4d6:	42a6      	cmp	r6, r4
 800b4d8:	d105      	bne.n	800b4e6 <__libc_init_array+0x2e>
 800b4da:	bd70      	pop	{r4, r5, r6, pc}
 800b4dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4e0:	4798      	blx	r3
 800b4e2:	3601      	adds	r6, #1
 800b4e4:	e7ee      	b.n	800b4c4 <__libc_init_array+0xc>
 800b4e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ea:	4798      	blx	r3
 800b4ec:	3601      	adds	r6, #1
 800b4ee:	e7f2      	b.n	800b4d6 <__libc_init_array+0x1e>
 800b4f0:	0800ee80 	.word	0x0800ee80
 800b4f4:	0800ee80 	.word	0x0800ee80
 800b4f8:	0800ee80 	.word	0x0800ee80
 800b4fc:	0800ee84 	.word	0x0800ee84

0800b500 <malloc>:
 800b500:	4b02      	ldr	r3, [pc, #8]	; (800b50c <malloc+0xc>)
 800b502:	4601      	mov	r1, r0
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	f000 b871 	b.w	800b5ec <_malloc_r>
 800b50a:	bf00      	nop
 800b50c:	24000010 	.word	0x24000010

0800b510 <free>:
 800b510:	4b02      	ldr	r3, [pc, #8]	; (800b51c <free+0xc>)
 800b512:	4601      	mov	r1, r0
 800b514:	6818      	ldr	r0, [r3, #0]
 800b516:	f000 b819 	b.w	800b54c <_free_r>
 800b51a:	bf00      	nop
 800b51c:	24000010 	.word	0x24000010

0800b520 <memcpy>:
 800b520:	440a      	add	r2, r1
 800b522:	4291      	cmp	r1, r2
 800b524:	f100 33ff 	add.w	r3, r0, #4294967295
 800b528:	d100      	bne.n	800b52c <memcpy+0xc>
 800b52a:	4770      	bx	lr
 800b52c:	b510      	push	{r4, lr}
 800b52e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b532:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b536:	4291      	cmp	r1, r2
 800b538:	d1f9      	bne.n	800b52e <memcpy+0xe>
 800b53a:	bd10      	pop	{r4, pc}

0800b53c <memset>:
 800b53c:	4402      	add	r2, r0
 800b53e:	4603      	mov	r3, r0
 800b540:	4293      	cmp	r3, r2
 800b542:	d100      	bne.n	800b546 <memset+0xa>
 800b544:	4770      	bx	lr
 800b546:	f803 1b01 	strb.w	r1, [r3], #1
 800b54a:	e7f9      	b.n	800b540 <memset+0x4>

0800b54c <_free_r>:
 800b54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b54e:	2900      	cmp	r1, #0
 800b550:	d048      	beq.n	800b5e4 <_free_r+0x98>
 800b552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b556:	9001      	str	r0, [sp, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f1a1 0404 	sub.w	r4, r1, #4
 800b55e:	bfb8      	it	lt
 800b560:	18e4      	addlt	r4, r4, r3
 800b562:	f000 fe89 	bl	800c278 <__malloc_lock>
 800b566:	4a20      	ldr	r2, [pc, #128]	; (800b5e8 <_free_r+0x9c>)
 800b568:	9801      	ldr	r0, [sp, #4]
 800b56a:	6813      	ldr	r3, [r2, #0]
 800b56c:	4615      	mov	r5, r2
 800b56e:	b933      	cbnz	r3, 800b57e <_free_r+0x32>
 800b570:	6063      	str	r3, [r4, #4]
 800b572:	6014      	str	r4, [r2, #0]
 800b574:	b003      	add	sp, #12
 800b576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b57a:	f000 be83 	b.w	800c284 <__malloc_unlock>
 800b57e:	42a3      	cmp	r3, r4
 800b580:	d90b      	bls.n	800b59a <_free_r+0x4e>
 800b582:	6821      	ldr	r1, [r4, #0]
 800b584:	1862      	adds	r2, r4, r1
 800b586:	4293      	cmp	r3, r2
 800b588:	bf04      	itt	eq
 800b58a:	681a      	ldreq	r2, [r3, #0]
 800b58c:	685b      	ldreq	r3, [r3, #4]
 800b58e:	6063      	str	r3, [r4, #4]
 800b590:	bf04      	itt	eq
 800b592:	1852      	addeq	r2, r2, r1
 800b594:	6022      	streq	r2, [r4, #0]
 800b596:	602c      	str	r4, [r5, #0]
 800b598:	e7ec      	b.n	800b574 <_free_r+0x28>
 800b59a:	461a      	mov	r2, r3
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	b10b      	cbz	r3, 800b5a4 <_free_r+0x58>
 800b5a0:	42a3      	cmp	r3, r4
 800b5a2:	d9fa      	bls.n	800b59a <_free_r+0x4e>
 800b5a4:	6811      	ldr	r1, [r2, #0]
 800b5a6:	1855      	adds	r5, r2, r1
 800b5a8:	42a5      	cmp	r5, r4
 800b5aa:	d10b      	bne.n	800b5c4 <_free_r+0x78>
 800b5ac:	6824      	ldr	r4, [r4, #0]
 800b5ae:	4421      	add	r1, r4
 800b5b0:	1854      	adds	r4, r2, r1
 800b5b2:	42a3      	cmp	r3, r4
 800b5b4:	6011      	str	r1, [r2, #0]
 800b5b6:	d1dd      	bne.n	800b574 <_free_r+0x28>
 800b5b8:	681c      	ldr	r4, [r3, #0]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	6053      	str	r3, [r2, #4]
 800b5be:	4421      	add	r1, r4
 800b5c0:	6011      	str	r1, [r2, #0]
 800b5c2:	e7d7      	b.n	800b574 <_free_r+0x28>
 800b5c4:	d902      	bls.n	800b5cc <_free_r+0x80>
 800b5c6:	230c      	movs	r3, #12
 800b5c8:	6003      	str	r3, [r0, #0]
 800b5ca:	e7d3      	b.n	800b574 <_free_r+0x28>
 800b5cc:	6825      	ldr	r5, [r4, #0]
 800b5ce:	1961      	adds	r1, r4, r5
 800b5d0:	428b      	cmp	r3, r1
 800b5d2:	bf04      	itt	eq
 800b5d4:	6819      	ldreq	r1, [r3, #0]
 800b5d6:	685b      	ldreq	r3, [r3, #4]
 800b5d8:	6063      	str	r3, [r4, #4]
 800b5da:	bf04      	itt	eq
 800b5dc:	1949      	addeq	r1, r1, r5
 800b5de:	6021      	streq	r1, [r4, #0]
 800b5e0:	6054      	str	r4, [r2, #4]
 800b5e2:	e7c7      	b.n	800b574 <_free_r+0x28>
 800b5e4:	b003      	add	sp, #12
 800b5e6:	bd30      	pop	{r4, r5, pc}
 800b5e8:	240000b4 	.word	0x240000b4

0800b5ec <_malloc_r>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	1ccd      	adds	r5, r1, #3
 800b5f0:	f025 0503 	bic.w	r5, r5, #3
 800b5f4:	3508      	adds	r5, #8
 800b5f6:	2d0c      	cmp	r5, #12
 800b5f8:	bf38      	it	cc
 800b5fa:	250c      	movcc	r5, #12
 800b5fc:	2d00      	cmp	r5, #0
 800b5fe:	4606      	mov	r6, r0
 800b600:	db01      	blt.n	800b606 <_malloc_r+0x1a>
 800b602:	42a9      	cmp	r1, r5
 800b604:	d903      	bls.n	800b60e <_malloc_r+0x22>
 800b606:	230c      	movs	r3, #12
 800b608:	6033      	str	r3, [r6, #0]
 800b60a:	2000      	movs	r0, #0
 800b60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b60e:	f000 fe33 	bl	800c278 <__malloc_lock>
 800b612:	4921      	ldr	r1, [pc, #132]	; (800b698 <_malloc_r+0xac>)
 800b614:	680a      	ldr	r2, [r1, #0]
 800b616:	4614      	mov	r4, r2
 800b618:	b99c      	cbnz	r4, 800b642 <_malloc_r+0x56>
 800b61a:	4f20      	ldr	r7, [pc, #128]	; (800b69c <_malloc_r+0xb0>)
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	b923      	cbnz	r3, 800b62a <_malloc_r+0x3e>
 800b620:	4621      	mov	r1, r4
 800b622:	4630      	mov	r0, r6
 800b624:	f000 fb32 	bl	800bc8c <_sbrk_r>
 800b628:	6038      	str	r0, [r7, #0]
 800b62a:	4629      	mov	r1, r5
 800b62c:	4630      	mov	r0, r6
 800b62e:	f000 fb2d 	bl	800bc8c <_sbrk_r>
 800b632:	1c43      	adds	r3, r0, #1
 800b634:	d123      	bne.n	800b67e <_malloc_r+0x92>
 800b636:	230c      	movs	r3, #12
 800b638:	6033      	str	r3, [r6, #0]
 800b63a:	4630      	mov	r0, r6
 800b63c:	f000 fe22 	bl	800c284 <__malloc_unlock>
 800b640:	e7e3      	b.n	800b60a <_malloc_r+0x1e>
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	1b5b      	subs	r3, r3, r5
 800b646:	d417      	bmi.n	800b678 <_malloc_r+0x8c>
 800b648:	2b0b      	cmp	r3, #11
 800b64a:	d903      	bls.n	800b654 <_malloc_r+0x68>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	441c      	add	r4, r3
 800b650:	6025      	str	r5, [r4, #0]
 800b652:	e004      	b.n	800b65e <_malloc_r+0x72>
 800b654:	6863      	ldr	r3, [r4, #4]
 800b656:	42a2      	cmp	r2, r4
 800b658:	bf0c      	ite	eq
 800b65a:	600b      	streq	r3, [r1, #0]
 800b65c:	6053      	strne	r3, [r2, #4]
 800b65e:	4630      	mov	r0, r6
 800b660:	f000 fe10 	bl	800c284 <__malloc_unlock>
 800b664:	f104 000b 	add.w	r0, r4, #11
 800b668:	1d23      	adds	r3, r4, #4
 800b66a:	f020 0007 	bic.w	r0, r0, #7
 800b66e:	1ac2      	subs	r2, r0, r3
 800b670:	d0cc      	beq.n	800b60c <_malloc_r+0x20>
 800b672:	1a1b      	subs	r3, r3, r0
 800b674:	50a3      	str	r3, [r4, r2]
 800b676:	e7c9      	b.n	800b60c <_malloc_r+0x20>
 800b678:	4622      	mov	r2, r4
 800b67a:	6864      	ldr	r4, [r4, #4]
 800b67c:	e7cc      	b.n	800b618 <_malloc_r+0x2c>
 800b67e:	1cc4      	adds	r4, r0, #3
 800b680:	f024 0403 	bic.w	r4, r4, #3
 800b684:	42a0      	cmp	r0, r4
 800b686:	d0e3      	beq.n	800b650 <_malloc_r+0x64>
 800b688:	1a21      	subs	r1, r4, r0
 800b68a:	4630      	mov	r0, r6
 800b68c:	f000 fafe 	bl	800bc8c <_sbrk_r>
 800b690:	3001      	adds	r0, #1
 800b692:	d1dd      	bne.n	800b650 <_malloc_r+0x64>
 800b694:	e7cf      	b.n	800b636 <_malloc_r+0x4a>
 800b696:	bf00      	nop
 800b698:	240000b4 	.word	0x240000b4
 800b69c:	240000b8 	.word	0x240000b8

0800b6a0 <__sfputc_r>:
 800b6a0:	6893      	ldr	r3, [r2, #8]
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	b410      	push	{r4}
 800b6a8:	6093      	str	r3, [r2, #8]
 800b6aa:	da08      	bge.n	800b6be <__sfputc_r+0x1e>
 800b6ac:	6994      	ldr	r4, [r2, #24]
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	db01      	blt.n	800b6b6 <__sfputc_r+0x16>
 800b6b2:	290a      	cmp	r1, #10
 800b6b4:	d103      	bne.n	800b6be <__sfputc_r+0x1e>
 800b6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6ba:	f000 baf7 	b.w	800bcac <__swbuf_r>
 800b6be:	6813      	ldr	r3, [r2, #0]
 800b6c0:	1c58      	adds	r0, r3, #1
 800b6c2:	6010      	str	r0, [r2, #0]
 800b6c4:	7019      	strb	r1, [r3, #0]
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <__sfputs_r>:
 800b6ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d0:	4606      	mov	r6, r0
 800b6d2:	460f      	mov	r7, r1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	18d5      	adds	r5, r2, r3
 800b6d8:	42ac      	cmp	r4, r5
 800b6da:	d101      	bne.n	800b6e0 <__sfputs_r+0x12>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e007      	b.n	800b6f0 <__sfputs_r+0x22>
 800b6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e4:	463a      	mov	r2, r7
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f7ff ffda 	bl	800b6a0 <__sfputc_r>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d1f3      	bne.n	800b6d8 <__sfputs_r+0xa>
 800b6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6f4 <_vfiprintf_r>:
 800b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f8:	460d      	mov	r5, r1
 800b6fa:	b09d      	sub	sp, #116	; 0x74
 800b6fc:	4614      	mov	r4, r2
 800b6fe:	4698      	mov	r8, r3
 800b700:	4606      	mov	r6, r0
 800b702:	b118      	cbz	r0, 800b70c <_vfiprintf_r+0x18>
 800b704:	6983      	ldr	r3, [r0, #24]
 800b706:	b90b      	cbnz	r3, 800b70c <_vfiprintf_r+0x18>
 800b708:	f000 fcb2 	bl	800c070 <__sinit>
 800b70c:	4b89      	ldr	r3, [pc, #548]	; (800b934 <_vfiprintf_r+0x240>)
 800b70e:	429d      	cmp	r5, r3
 800b710:	d11b      	bne.n	800b74a <_vfiprintf_r+0x56>
 800b712:	6875      	ldr	r5, [r6, #4]
 800b714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b716:	07d9      	lsls	r1, r3, #31
 800b718:	d405      	bmi.n	800b726 <_vfiprintf_r+0x32>
 800b71a:	89ab      	ldrh	r3, [r5, #12]
 800b71c:	059a      	lsls	r2, r3, #22
 800b71e:	d402      	bmi.n	800b726 <_vfiprintf_r+0x32>
 800b720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b722:	f000 fd43 	bl	800c1ac <__retarget_lock_acquire_recursive>
 800b726:	89ab      	ldrh	r3, [r5, #12]
 800b728:	071b      	lsls	r3, r3, #28
 800b72a:	d501      	bpl.n	800b730 <_vfiprintf_r+0x3c>
 800b72c:	692b      	ldr	r3, [r5, #16]
 800b72e:	b9eb      	cbnz	r3, 800b76c <_vfiprintf_r+0x78>
 800b730:	4629      	mov	r1, r5
 800b732:	4630      	mov	r0, r6
 800b734:	f000 fb0c 	bl	800bd50 <__swsetup_r>
 800b738:	b1c0      	cbz	r0, 800b76c <_vfiprintf_r+0x78>
 800b73a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b73c:	07dc      	lsls	r4, r3, #31
 800b73e:	d50e      	bpl.n	800b75e <_vfiprintf_r+0x6a>
 800b740:	f04f 30ff 	mov.w	r0, #4294967295
 800b744:	b01d      	add	sp, #116	; 0x74
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	4b7b      	ldr	r3, [pc, #492]	; (800b938 <_vfiprintf_r+0x244>)
 800b74c:	429d      	cmp	r5, r3
 800b74e:	d101      	bne.n	800b754 <_vfiprintf_r+0x60>
 800b750:	68b5      	ldr	r5, [r6, #8]
 800b752:	e7df      	b.n	800b714 <_vfiprintf_r+0x20>
 800b754:	4b79      	ldr	r3, [pc, #484]	; (800b93c <_vfiprintf_r+0x248>)
 800b756:	429d      	cmp	r5, r3
 800b758:	bf08      	it	eq
 800b75a:	68f5      	ldreq	r5, [r6, #12]
 800b75c:	e7da      	b.n	800b714 <_vfiprintf_r+0x20>
 800b75e:	89ab      	ldrh	r3, [r5, #12]
 800b760:	0598      	lsls	r0, r3, #22
 800b762:	d4ed      	bmi.n	800b740 <_vfiprintf_r+0x4c>
 800b764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b766:	f000 fd22 	bl	800c1ae <__retarget_lock_release_recursive>
 800b76a:	e7e9      	b.n	800b740 <_vfiprintf_r+0x4c>
 800b76c:	2300      	movs	r3, #0
 800b76e:	9309      	str	r3, [sp, #36]	; 0x24
 800b770:	2320      	movs	r3, #32
 800b772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b776:	f8cd 800c 	str.w	r8, [sp, #12]
 800b77a:	2330      	movs	r3, #48	; 0x30
 800b77c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b940 <_vfiprintf_r+0x24c>
 800b780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b784:	f04f 0901 	mov.w	r9, #1
 800b788:	4623      	mov	r3, r4
 800b78a:	469a      	mov	sl, r3
 800b78c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b790:	b10a      	cbz	r2, 800b796 <_vfiprintf_r+0xa2>
 800b792:	2a25      	cmp	r2, #37	; 0x25
 800b794:	d1f9      	bne.n	800b78a <_vfiprintf_r+0x96>
 800b796:	ebba 0b04 	subs.w	fp, sl, r4
 800b79a:	d00b      	beq.n	800b7b4 <_vfiprintf_r+0xc0>
 800b79c:	465b      	mov	r3, fp
 800b79e:	4622      	mov	r2, r4
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f7ff ff93 	bl	800b6ce <__sfputs_r>
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	f000 80aa 	beq.w	800b902 <_vfiprintf_r+0x20e>
 800b7ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7b0:	445a      	add	r2, fp
 800b7b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 80a2 	beq.w	800b902 <_vfiprintf_r+0x20e>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7c8:	f10a 0a01 	add.w	sl, sl, #1
 800b7cc:	9304      	str	r3, [sp, #16]
 800b7ce:	9307      	str	r3, [sp, #28]
 800b7d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b7d6:	4654      	mov	r4, sl
 800b7d8:	2205      	movs	r2, #5
 800b7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7de:	4858      	ldr	r0, [pc, #352]	; (800b940 <_vfiprintf_r+0x24c>)
 800b7e0:	f7f4 fd7e 	bl	80002e0 <memchr>
 800b7e4:	9a04      	ldr	r2, [sp, #16]
 800b7e6:	b9d8      	cbnz	r0, 800b820 <_vfiprintf_r+0x12c>
 800b7e8:	06d1      	lsls	r1, r2, #27
 800b7ea:	bf44      	itt	mi
 800b7ec:	2320      	movmi	r3, #32
 800b7ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f2:	0713      	lsls	r3, r2, #28
 800b7f4:	bf44      	itt	mi
 800b7f6:	232b      	movmi	r3, #43	; 0x2b
 800b7f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b800:	2b2a      	cmp	r3, #42	; 0x2a
 800b802:	d015      	beq.n	800b830 <_vfiprintf_r+0x13c>
 800b804:	9a07      	ldr	r2, [sp, #28]
 800b806:	4654      	mov	r4, sl
 800b808:	2000      	movs	r0, #0
 800b80a:	f04f 0c0a 	mov.w	ip, #10
 800b80e:	4621      	mov	r1, r4
 800b810:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b814:	3b30      	subs	r3, #48	; 0x30
 800b816:	2b09      	cmp	r3, #9
 800b818:	d94e      	bls.n	800b8b8 <_vfiprintf_r+0x1c4>
 800b81a:	b1b0      	cbz	r0, 800b84a <_vfiprintf_r+0x156>
 800b81c:	9207      	str	r2, [sp, #28]
 800b81e:	e014      	b.n	800b84a <_vfiprintf_r+0x156>
 800b820:	eba0 0308 	sub.w	r3, r0, r8
 800b824:	fa09 f303 	lsl.w	r3, r9, r3
 800b828:	4313      	orrs	r3, r2
 800b82a:	9304      	str	r3, [sp, #16]
 800b82c:	46a2      	mov	sl, r4
 800b82e:	e7d2      	b.n	800b7d6 <_vfiprintf_r+0xe2>
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	1d19      	adds	r1, r3, #4
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	9103      	str	r1, [sp, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	bfbb      	ittet	lt
 800b83c:	425b      	neglt	r3, r3
 800b83e:	f042 0202 	orrlt.w	r2, r2, #2
 800b842:	9307      	strge	r3, [sp, #28]
 800b844:	9307      	strlt	r3, [sp, #28]
 800b846:	bfb8      	it	lt
 800b848:	9204      	strlt	r2, [sp, #16]
 800b84a:	7823      	ldrb	r3, [r4, #0]
 800b84c:	2b2e      	cmp	r3, #46	; 0x2e
 800b84e:	d10c      	bne.n	800b86a <_vfiprintf_r+0x176>
 800b850:	7863      	ldrb	r3, [r4, #1]
 800b852:	2b2a      	cmp	r3, #42	; 0x2a
 800b854:	d135      	bne.n	800b8c2 <_vfiprintf_r+0x1ce>
 800b856:	9b03      	ldr	r3, [sp, #12]
 800b858:	1d1a      	adds	r2, r3, #4
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	9203      	str	r2, [sp, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	bfb8      	it	lt
 800b862:	f04f 33ff 	movlt.w	r3, #4294967295
 800b866:	3402      	adds	r4, #2
 800b868:	9305      	str	r3, [sp, #20]
 800b86a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b950 <_vfiprintf_r+0x25c>
 800b86e:	7821      	ldrb	r1, [r4, #0]
 800b870:	2203      	movs	r2, #3
 800b872:	4650      	mov	r0, sl
 800b874:	f7f4 fd34 	bl	80002e0 <memchr>
 800b878:	b140      	cbz	r0, 800b88c <_vfiprintf_r+0x198>
 800b87a:	2340      	movs	r3, #64	; 0x40
 800b87c:	eba0 000a 	sub.w	r0, r0, sl
 800b880:	fa03 f000 	lsl.w	r0, r3, r0
 800b884:	9b04      	ldr	r3, [sp, #16]
 800b886:	4303      	orrs	r3, r0
 800b888:	3401      	adds	r4, #1
 800b88a:	9304      	str	r3, [sp, #16]
 800b88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b890:	482c      	ldr	r0, [pc, #176]	; (800b944 <_vfiprintf_r+0x250>)
 800b892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b896:	2206      	movs	r2, #6
 800b898:	f7f4 fd22 	bl	80002e0 <memchr>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	d03f      	beq.n	800b920 <_vfiprintf_r+0x22c>
 800b8a0:	4b29      	ldr	r3, [pc, #164]	; (800b948 <_vfiprintf_r+0x254>)
 800b8a2:	bb1b      	cbnz	r3, 800b8ec <_vfiprintf_r+0x1f8>
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	3307      	adds	r3, #7
 800b8a8:	f023 0307 	bic.w	r3, r3, #7
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	9303      	str	r3, [sp, #12]
 800b8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b2:	443b      	add	r3, r7
 800b8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b6:	e767      	b.n	800b788 <_vfiprintf_r+0x94>
 800b8b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8bc:	460c      	mov	r4, r1
 800b8be:	2001      	movs	r0, #1
 800b8c0:	e7a5      	b.n	800b80e <_vfiprintf_r+0x11a>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	3401      	adds	r4, #1
 800b8c6:	9305      	str	r3, [sp, #20]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	f04f 0c0a 	mov.w	ip, #10
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8d4:	3a30      	subs	r2, #48	; 0x30
 800b8d6:	2a09      	cmp	r2, #9
 800b8d8:	d903      	bls.n	800b8e2 <_vfiprintf_r+0x1ee>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0c5      	beq.n	800b86a <_vfiprintf_r+0x176>
 800b8de:	9105      	str	r1, [sp, #20]
 800b8e0:	e7c3      	b.n	800b86a <_vfiprintf_r+0x176>
 800b8e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e7f0      	b.n	800b8ce <_vfiprintf_r+0x1da>
 800b8ec:	ab03      	add	r3, sp, #12
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	4b16      	ldr	r3, [pc, #88]	; (800b94c <_vfiprintf_r+0x258>)
 800b8f4:	a904      	add	r1, sp, #16
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f3af 8000 	nop.w
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	1c78      	adds	r0, r7, #1
 800b900:	d1d6      	bne.n	800b8b0 <_vfiprintf_r+0x1bc>
 800b902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b904:	07d9      	lsls	r1, r3, #31
 800b906:	d405      	bmi.n	800b914 <_vfiprintf_r+0x220>
 800b908:	89ab      	ldrh	r3, [r5, #12]
 800b90a:	059a      	lsls	r2, r3, #22
 800b90c:	d402      	bmi.n	800b914 <_vfiprintf_r+0x220>
 800b90e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b910:	f000 fc4d 	bl	800c1ae <__retarget_lock_release_recursive>
 800b914:	89ab      	ldrh	r3, [r5, #12]
 800b916:	065b      	lsls	r3, r3, #25
 800b918:	f53f af12 	bmi.w	800b740 <_vfiprintf_r+0x4c>
 800b91c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b91e:	e711      	b.n	800b744 <_vfiprintf_r+0x50>
 800b920:	ab03      	add	r3, sp, #12
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	462a      	mov	r2, r5
 800b926:	4b09      	ldr	r3, [pc, #36]	; (800b94c <_vfiprintf_r+0x258>)
 800b928:	a904      	add	r1, sp, #16
 800b92a:	4630      	mov	r0, r6
 800b92c:	f000 f880 	bl	800ba30 <_printf_i>
 800b930:	e7e4      	b.n	800b8fc <_vfiprintf_r+0x208>
 800b932:	bf00      	nop
 800b934:	0800d514 	.word	0x0800d514
 800b938:	0800d534 	.word	0x0800d534
 800b93c:	0800d4f4 	.word	0x0800d4f4
 800b940:	0800d4c0 	.word	0x0800d4c0
 800b944:	0800d4ca 	.word	0x0800d4ca
 800b948:	00000000 	.word	0x00000000
 800b94c:	0800b6cf 	.word	0x0800b6cf
 800b950:	0800d4c6 	.word	0x0800d4c6

0800b954 <_printf_common>:
 800b954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b958:	4616      	mov	r6, r2
 800b95a:	4699      	mov	r9, r3
 800b95c:	688a      	ldr	r2, [r1, #8]
 800b95e:	690b      	ldr	r3, [r1, #16]
 800b960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b964:	4293      	cmp	r3, r2
 800b966:	bfb8      	it	lt
 800b968:	4613      	movlt	r3, r2
 800b96a:	6033      	str	r3, [r6, #0]
 800b96c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b970:	4607      	mov	r7, r0
 800b972:	460c      	mov	r4, r1
 800b974:	b10a      	cbz	r2, 800b97a <_printf_common+0x26>
 800b976:	3301      	adds	r3, #1
 800b978:	6033      	str	r3, [r6, #0]
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	0699      	lsls	r1, r3, #26
 800b97e:	bf42      	ittt	mi
 800b980:	6833      	ldrmi	r3, [r6, #0]
 800b982:	3302      	addmi	r3, #2
 800b984:	6033      	strmi	r3, [r6, #0]
 800b986:	6825      	ldr	r5, [r4, #0]
 800b988:	f015 0506 	ands.w	r5, r5, #6
 800b98c:	d106      	bne.n	800b99c <_printf_common+0x48>
 800b98e:	f104 0a19 	add.w	sl, r4, #25
 800b992:	68e3      	ldr	r3, [r4, #12]
 800b994:	6832      	ldr	r2, [r6, #0]
 800b996:	1a9b      	subs	r3, r3, r2
 800b998:	42ab      	cmp	r3, r5
 800b99a:	dc26      	bgt.n	800b9ea <_printf_common+0x96>
 800b99c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b9a0:	1e13      	subs	r3, r2, #0
 800b9a2:	6822      	ldr	r2, [r4, #0]
 800b9a4:	bf18      	it	ne
 800b9a6:	2301      	movne	r3, #1
 800b9a8:	0692      	lsls	r2, r2, #26
 800b9aa:	d42b      	bmi.n	800ba04 <_printf_common+0xb0>
 800b9ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	47c0      	blx	r8
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	d01e      	beq.n	800b9f8 <_printf_common+0xa4>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	68e5      	ldr	r5, [r4, #12]
 800b9be:	6832      	ldr	r2, [r6, #0]
 800b9c0:	f003 0306 	and.w	r3, r3, #6
 800b9c4:	2b04      	cmp	r3, #4
 800b9c6:	bf08      	it	eq
 800b9c8:	1aad      	subeq	r5, r5, r2
 800b9ca:	68a3      	ldr	r3, [r4, #8]
 800b9cc:	6922      	ldr	r2, [r4, #16]
 800b9ce:	bf0c      	ite	eq
 800b9d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9d4:	2500      	movne	r5, #0
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	bfc4      	itt	gt
 800b9da:	1a9b      	subgt	r3, r3, r2
 800b9dc:	18ed      	addgt	r5, r5, r3
 800b9de:	2600      	movs	r6, #0
 800b9e0:	341a      	adds	r4, #26
 800b9e2:	42b5      	cmp	r5, r6
 800b9e4:	d11a      	bne.n	800ba1c <_printf_common+0xc8>
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	e008      	b.n	800b9fc <_printf_common+0xa8>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	4652      	mov	r2, sl
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	47c0      	blx	r8
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	d103      	bne.n	800ba00 <_printf_common+0xac>
 800b9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba00:	3501      	adds	r5, #1
 800ba02:	e7c6      	b.n	800b992 <_printf_common+0x3e>
 800ba04:	18e1      	adds	r1, r4, r3
 800ba06:	1c5a      	adds	r2, r3, #1
 800ba08:	2030      	movs	r0, #48	; 0x30
 800ba0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba0e:	4422      	add	r2, r4
 800ba10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba18:	3302      	adds	r3, #2
 800ba1a:	e7c7      	b.n	800b9ac <_printf_common+0x58>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	4622      	mov	r2, r4
 800ba20:	4649      	mov	r1, r9
 800ba22:	4638      	mov	r0, r7
 800ba24:	47c0      	blx	r8
 800ba26:	3001      	adds	r0, #1
 800ba28:	d0e6      	beq.n	800b9f8 <_printf_common+0xa4>
 800ba2a:	3601      	adds	r6, #1
 800ba2c:	e7d9      	b.n	800b9e2 <_printf_common+0x8e>
	...

0800ba30 <_printf_i>:
 800ba30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba34:	460c      	mov	r4, r1
 800ba36:	4691      	mov	r9, r2
 800ba38:	7e27      	ldrb	r7, [r4, #24]
 800ba3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba3c:	2f78      	cmp	r7, #120	; 0x78
 800ba3e:	4680      	mov	r8, r0
 800ba40:	469a      	mov	sl, r3
 800ba42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba46:	d807      	bhi.n	800ba58 <_printf_i+0x28>
 800ba48:	2f62      	cmp	r7, #98	; 0x62
 800ba4a:	d80a      	bhi.n	800ba62 <_printf_i+0x32>
 800ba4c:	2f00      	cmp	r7, #0
 800ba4e:	f000 80d8 	beq.w	800bc02 <_printf_i+0x1d2>
 800ba52:	2f58      	cmp	r7, #88	; 0x58
 800ba54:	f000 80a3 	beq.w	800bb9e <_printf_i+0x16e>
 800ba58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba60:	e03a      	b.n	800bad8 <_printf_i+0xa8>
 800ba62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba66:	2b15      	cmp	r3, #21
 800ba68:	d8f6      	bhi.n	800ba58 <_printf_i+0x28>
 800ba6a:	a001      	add	r0, pc, #4	; (adr r0, 800ba70 <_printf_i+0x40>)
 800ba6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ba70:	0800bac9 	.word	0x0800bac9
 800ba74:	0800badd 	.word	0x0800badd
 800ba78:	0800ba59 	.word	0x0800ba59
 800ba7c:	0800ba59 	.word	0x0800ba59
 800ba80:	0800ba59 	.word	0x0800ba59
 800ba84:	0800ba59 	.word	0x0800ba59
 800ba88:	0800badd 	.word	0x0800badd
 800ba8c:	0800ba59 	.word	0x0800ba59
 800ba90:	0800ba59 	.word	0x0800ba59
 800ba94:	0800ba59 	.word	0x0800ba59
 800ba98:	0800ba59 	.word	0x0800ba59
 800ba9c:	0800bbe9 	.word	0x0800bbe9
 800baa0:	0800bb0d 	.word	0x0800bb0d
 800baa4:	0800bbcb 	.word	0x0800bbcb
 800baa8:	0800ba59 	.word	0x0800ba59
 800baac:	0800ba59 	.word	0x0800ba59
 800bab0:	0800bc0b 	.word	0x0800bc0b
 800bab4:	0800ba59 	.word	0x0800ba59
 800bab8:	0800bb0d 	.word	0x0800bb0d
 800babc:	0800ba59 	.word	0x0800ba59
 800bac0:	0800ba59 	.word	0x0800ba59
 800bac4:	0800bbd3 	.word	0x0800bbd3
 800bac8:	680b      	ldr	r3, [r1, #0]
 800baca:	1d1a      	adds	r2, r3, #4
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	600a      	str	r2, [r1, #0]
 800bad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bad8:	2301      	movs	r3, #1
 800bada:	e0a3      	b.n	800bc24 <_printf_i+0x1f4>
 800badc:	6825      	ldr	r5, [r4, #0]
 800bade:	6808      	ldr	r0, [r1, #0]
 800bae0:	062e      	lsls	r6, r5, #24
 800bae2:	f100 0304 	add.w	r3, r0, #4
 800bae6:	d50a      	bpl.n	800bafe <_printf_i+0xce>
 800bae8:	6805      	ldr	r5, [r0, #0]
 800baea:	600b      	str	r3, [r1, #0]
 800baec:	2d00      	cmp	r5, #0
 800baee:	da03      	bge.n	800baf8 <_printf_i+0xc8>
 800baf0:	232d      	movs	r3, #45	; 0x2d
 800baf2:	426d      	negs	r5, r5
 800baf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baf8:	485e      	ldr	r0, [pc, #376]	; (800bc74 <_printf_i+0x244>)
 800bafa:	230a      	movs	r3, #10
 800bafc:	e019      	b.n	800bb32 <_printf_i+0x102>
 800bafe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bb02:	6805      	ldr	r5, [r0, #0]
 800bb04:	600b      	str	r3, [r1, #0]
 800bb06:	bf18      	it	ne
 800bb08:	b22d      	sxthne	r5, r5
 800bb0a:	e7ef      	b.n	800baec <_printf_i+0xbc>
 800bb0c:	680b      	ldr	r3, [r1, #0]
 800bb0e:	6825      	ldr	r5, [r4, #0]
 800bb10:	1d18      	adds	r0, r3, #4
 800bb12:	6008      	str	r0, [r1, #0]
 800bb14:	0628      	lsls	r0, r5, #24
 800bb16:	d501      	bpl.n	800bb1c <_printf_i+0xec>
 800bb18:	681d      	ldr	r5, [r3, #0]
 800bb1a:	e002      	b.n	800bb22 <_printf_i+0xf2>
 800bb1c:	0669      	lsls	r1, r5, #25
 800bb1e:	d5fb      	bpl.n	800bb18 <_printf_i+0xe8>
 800bb20:	881d      	ldrh	r5, [r3, #0]
 800bb22:	4854      	ldr	r0, [pc, #336]	; (800bc74 <_printf_i+0x244>)
 800bb24:	2f6f      	cmp	r7, #111	; 0x6f
 800bb26:	bf0c      	ite	eq
 800bb28:	2308      	moveq	r3, #8
 800bb2a:	230a      	movne	r3, #10
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb32:	6866      	ldr	r6, [r4, #4]
 800bb34:	60a6      	str	r6, [r4, #8]
 800bb36:	2e00      	cmp	r6, #0
 800bb38:	bfa2      	ittt	ge
 800bb3a:	6821      	ldrge	r1, [r4, #0]
 800bb3c:	f021 0104 	bicge.w	r1, r1, #4
 800bb40:	6021      	strge	r1, [r4, #0]
 800bb42:	b90d      	cbnz	r5, 800bb48 <_printf_i+0x118>
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	d04d      	beq.n	800bbe4 <_printf_i+0x1b4>
 800bb48:	4616      	mov	r6, r2
 800bb4a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb4e:	fb03 5711 	mls	r7, r3, r1, r5
 800bb52:	5dc7      	ldrb	r7, [r0, r7]
 800bb54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb58:	462f      	mov	r7, r5
 800bb5a:	42bb      	cmp	r3, r7
 800bb5c:	460d      	mov	r5, r1
 800bb5e:	d9f4      	bls.n	800bb4a <_printf_i+0x11a>
 800bb60:	2b08      	cmp	r3, #8
 800bb62:	d10b      	bne.n	800bb7c <_printf_i+0x14c>
 800bb64:	6823      	ldr	r3, [r4, #0]
 800bb66:	07df      	lsls	r7, r3, #31
 800bb68:	d508      	bpl.n	800bb7c <_printf_i+0x14c>
 800bb6a:	6923      	ldr	r3, [r4, #16]
 800bb6c:	6861      	ldr	r1, [r4, #4]
 800bb6e:	4299      	cmp	r1, r3
 800bb70:	bfde      	ittt	le
 800bb72:	2330      	movle	r3, #48	; 0x30
 800bb74:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb78:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb7c:	1b92      	subs	r2, r2, r6
 800bb7e:	6122      	str	r2, [r4, #16]
 800bb80:	f8cd a000 	str.w	sl, [sp]
 800bb84:	464b      	mov	r3, r9
 800bb86:	aa03      	add	r2, sp, #12
 800bb88:	4621      	mov	r1, r4
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	f7ff fee2 	bl	800b954 <_printf_common>
 800bb90:	3001      	adds	r0, #1
 800bb92:	d14c      	bne.n	800bc2e <_printf_i+0x1fe>
 800bb94:	f04f 30ff 	mov.w	r0, #4294967295
 800bb98:	b004      	add	sp, #16
 800bb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9e:	4835      	ldr	r0, [pc, #212]	; (800bc74 <_printf_i+0x244>)
 800bba0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	680e      	ldr	r6, [r1, #0]
 800bba8:	061f      	lsls	r7, r3, #24
 800bbaa:	f856 5b04 	ldr.w	r5, [r6], #4
 800bbae:	600e      	str	r6, [r1, #0]
 800bbb0:	d514      	bpl.n	800bbdc <_printf_i+0x1ac>
 800bbb2:	07d9      	lsls	r1, r3, #31
 800bbb4:	bf44      	itt	mi
 800bbb6:	f043 0320 	orrmi.w	r3, r3, #32
 800bbba:	6023      	strmi	r3, [r4, #0]
 800bbbc:	b91d      	cbnz	r5, 800bbc6 <_printf_i+0x196>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	f023 0320 	bic.w	r3, r3, #32
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	2310      	movs	r3, #16
 800bbc8:	e7b0      	b.n	800bb2c <_printf_i+0xfc>
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	f043 0320 	orr.w	r3, r3, #32
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	2378      	movs	r3, #120	; 0x78
 800bbd4:	4828      	ldr	r0, [pc, #160]	; (800bc78 <_printf_i+0x248>)
 800bbd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbda:	e7e3      	b.n	800bba4 <_printf_i+0x174>
 800bbdc:	065e      	lsls	r6, r3, #25
 800bbde:	bf48      	it	mi
 800bbe0:	b2ad      	uxthmi	r5, r5
 800bbe2:	e7e6      	b.n	800bbb2 <_printf_i+0x182>
 800bbe4:	4616      	mov	r6, r2
 800bbe6:	e7bb      	b.n	800bb60 <_printf_i+0x130>
 800bbe8:	680b      	ldr	r3, [r1, #0]
 800bbea:	6826      	ldr	r6, [r4, #0]
 800bbec:	6960      	ldr	r0, [r4, #20]
 800bbee:	1d1d      	adds	r5, r3, #4
 800bbf0:	600d      	str	r5, [r1, #0]
 800bbf2:	0635      	lsls	r5, r6, #24
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	d501      	bpl.n	800bbfc <_printf_i+0x1cc>
 800bbf8:	6018      	str	r0, [r3, #0]
 800bbfa:	e002      	b.n	800bc02 <_printf_i+0x1d2>
 800bbfc:	0671      	lsls	r1, r6, #25
 800bbfe:	d5fb      	bpl.n	800bbf8 <_printf_i+0x1c8>
 800bc00:	8018      	strh	r0, [r3, #0]
 800bc02:	2300      	movs	r3, #0
 800bc04:	6123      	str	r3, [r4, #16]
 800bc06:	4616      	mov	r6, r2
 800bc08:	e7ba      	b.n	800bb80 <_printf_i+0x150>
 800bc0a:	680b      	ldr	r3, [r1, #0]
 800bc0c:	1d1a      	adds	r2, r3, #4
 800bc0e:	600a      	str	r2, [r1, #0]
 800bc10:	681e      	ldr	r6, [r3, #0]
 800bc12:	6862      	ldr	r2, [r4, #4]
 800bc14:	2100      	movs	r1, #0
 800bc16:	4630      	mov	r0, r6
 800bc18:	f7f4 fb62 	bl	80002e0 <memchr>
 800bc1c:	b108      	cbz	r0, 800bc22 <_printf_i+0x1f2>
 800bc1e:	1b80      	subs	r0, r0, r6
 800bc20:	6060      	str	r0, [r4, #4]
 800bc22:	6863      	ldr	r3, [r4, #4]
 800bc24:	6123      	str	r3, [r4, #16]
 800bc26:	2300      	movs	r3, #0
 800bc28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc2c:	e7a8      	b.n	800bb80 <_printf_i+0x150>
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	4632      	mov	r2, r6
 800bc32:	4649      	mov	r1, r9
 800bc34:	4640      	mov	r0, r8
 800bc36:	47d0      	blx	sl
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d0ab      	beq.n	800bb94 <_printf_i+0x164>
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	079b      	lsls	r3, r3, #30
 800bc40:	d413      	bmi.n	800bc6a <_printf_i+0x23a>
 800bc42:	68e0      	ldr	r0, [r4, #12]
 800bc44:	9b03      	ldr	r3, [sp, #12]
 800bc46:	4298      	cmp	r0, r3
 800bc48:	bfb8      	it	lt
 800bc4a:	4618      	movlt	r0, r3
 800bc4c:	e7a4      	b.n	800bb98 <_printf_i+0x168>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	4632      	mov	r2, r6
 800bc52:	4649      	mov	r1, r9
 800bc54:	4640      	mov	r0, r8
 800bc56:	47d0      	blx	sl
 800bc58:	3001      	adds	r0, #1
 800bc5a:	d09b      	beq.n	800bb94 <_printf_i+0x164>
 800bc5c:	3501      	adds	r5, #1
 800bc5e:	68e3      	ldr	r3, [r4, #12]
 800bc60:	9903      	ldr	r1, [sp, #12]
 800bc62:	1a5b      	subs	r3, r3, r1
 800bc64:	42ab      	cmp	r3, r5
 800bc66:	dcf2      	bgt.n	800bc4e <_printf_i+0x21e>
 800bc68:	e7eb      	b.n	800bc42 <_printf_i+0x212>
 800bc6a:	2500      	movs	r5, #0
 800bc6c:	f104 0619 	add.w	r6, r4, #25
 800bc70:	e7f5      	b.n	800bc5e <_printf_i+0x22e>
 800bc72:	bf00      	nop
 800bc74:	0800d4d1 	.word	0x0800d4d1
 800bc78:	0800d4e2 	.word	0x0800d4e2

0800bc7c <realloc>:
 800bc7c:	4b02      	ldr	r3, [pc, #8]	; (800bc88 <realloc+0xc>)
 800bc7e:	460a      	mov	r2, r1
 800bc80:	4601      	mov	r1, r0
 800bc82:	6818      	ldr	r0, [r3, #0]
 800bc84:	f000 bb04 	b.w	800c290 <_realloc_r>
 800bc88:	24000010 	.word	0x24000010

0800bc8c <_sbrk_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d06      	ldr	r5, [pc, #24]	; (800bca8 <_sbrk_r+0x1c>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	4604      	mov	r4, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	602b      	str	r3, [r5, #0]
 800bc98:	f7f5 f8fa 	bl	8000e90 <_sbrk>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_sbrk_r+0x1a>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_sbrk_r+0x1a>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	2400d618 	.word	0x2400d618

0800bcac <__swbuf_r>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	460e      	mov	r6, r1
 800bcb0:	4614      	mov	r4, r2
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	b118      	cbz	r0, 800bcbe <__swbuf_r+0x12>
 800bcb6:	6983      	ldr	r3, [r0, #24]
 800bcb8:	b90b      	cbnz	r3, 800bcbe <__swbuf_r+0x12>
 800bcba:	f000 f9d9 	bl	800c070 <__sinit>
 800bcbe:	4b21      	ldr	r3, [pc, #132]	; (800bd44 <__swbuf_r+0x98>)
 800bcc0:	429c      	cmp	r4, r3
 800bcc2:	d12b      	bne.n	800bd1c <__swbuf_r+0x70>
 800bcc4:	686c      	ldr	r4, [r5, #4]
 800bcc6:	69a3      	ldr	r3, [r4, #24]
 800bcc8:	60a3      	str	r3, [r4, #8]
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	071a      	lsls	r2, r3, #28
 800bcce:	d52f      	bpl.n	800bd30 <__swbuf_r+0x84>
 800bcd0:	6923      	ldr	r3, [r4, #16]
 800bcd2:	b36b      	cbz	r3, 800bd30 <__swbuf_r+0x84>
 800bcd4:	6923      	ldr	r3, [r4, #16]
 800bcd6:	6820      	ldr	r0, [r4, #0]
 800bcd8:	1ac0      	subs	r0, r0, r3
 800bcda:	6963      	ldr	r3, [r4, #20]
 800bcdc:	b2f6      	uxtb	r6, r6
 800bcde:	4283      	cmp	r3, r0
 800bce0:	4637      	mov	r7, r6
 800bce2:	dc04      	bgt.n	800bcee <__swbuf_r+0x42>
 800bce4:	4621      	mov	r1, r4
 800bce6:	4628      	mov	r0, r5
 800bce8:	f000 f92e 	bl	800bf48 <_fflush_r>
 800bcec:	bb30      	cbnz	r0, 800bd3c <__swbuf_r+0x90>
 800bcee:	68a3      	ldr	r3, [r4, #8]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	60a3      	str	r3, [r4, #8]
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	6022      	str	r2, [r4, #0]
 800bcfa:	701e      	strb	r6, [r3, #0]
 800bcfc:	6963      	ldr	r3, [r4, #20]
 800bcfe:	3001      	adds	r0, #1
 800bd00:	4283      	cmp	r3, r0
 800bd02:	d004      	beq.n	800bd0e <__swbuf_r+0x62>
 800bd04:	89a3      	ldrh	r3, [r4, #12]
 800bd06:	07db      	lsls	r3, r3, #31
 800bd08:	d506      	bpl.n	800bd18 <__swbuf_r+0x6c>
 800bd0a:	2e0a      	cmp	r6, #10
 800bd0c:	d104      	bne.n	800bd18 <__swbuf_r+0x6c>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4628      	mov	r0, r5
 800bd12:	f000 f919 	bl	800bf48 <_fflush_r>
 800bd16:	b988      	cbnz	r0, 800bd3c <__swbuf_r+0x90>
 800bd18:	4638      	mov	r0, r7
 800bd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd1c:	4b0a      	ldr	r3, [pc, #40]	; (800bd48 <__swbuf_r+0x9c>)
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d101      	bne.n	800bd26 <__swbuf_r+0x7a>
 800bd22:	68ac      	ldr	r4, [r5, #8]
 800bd24:	e7cf      	b.n	800bcc6 <__swbuf_r+0x1a>
 800bd26:	4b09      	ldr	r3, [pc, #36]	; (800bd4c <__swbuf_r+0xa0>)
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	bf08      	it	eq
 800bd2c:	68ec      	ldreq	r4, [r5, #12]
 800bd2e:	e7ca      	b.n	800bcc6 <__swbuf_r+0x1a>
 800bd30:	4621      	mov	r1, r4
 800bd32:	4628      	mov	r0, r5
 800bd34:	f000 f80c 	bl	800bd50 <__swsetup_r>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d0cb      	beq.n	800bcd4 <__swbuf_r+0x28>
 800bd3c:	f04f 37ff 	mov.w	r7, #4294967295
 800bd40:	e7ea      	b.n	800bd18 <__swbuf_r+0x6c>
 800bd42:	bf00      	nop
 800bd44:	0800d514 	.word	0x0800d514
 800bd48:	0800d534 	.word	0x0800d534
 800bd4c:	0800d4f4 	.word	0x0800d4f4

0800bd50 <__swsetup_r>:
 800bd50:	4b32      	ldr	r3, [pc, #200]	; (800be1c <__swsetup_r+0xcc>)
 800bd52:	b570      	push	{r4, r5, r6, lr}
 800bd54:	681d      	ldr	r5, [r3, #0]
 800bd56:	4606      	mov	r6, r0
 800bd58:	460c      	mov	r4, r1
 800bd5a:	b125      	cbz	r5, 800bd66 <__swsetup_r+0x16>
 800bd5c:	69ab      	ldr	r3, [r5, #24]
 800bd5e:	b913      	cbnz	r3, 800bd66 <__swsetup_r+0x16>
 800bd60:	4628      	mov	r0, r5
 800bd62:	f000 f985 	bl	800c070 <__sinit>
 800bd66:	4b2e      	ldr	r3, [pc, #184]	; (800be20 <__swsetup_r+0xd0>)
 800bd68:	429c      	cmp	r4, r3
 800bd6a:	d10f      	bne.n	800bd8c <__swsetup_r+0x3c>
 800bd6c:	686c      	ldr	r4, [r5, #4]
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd74:	0719      	lsls	r1, r3, #28
 800bd76:	d42c      	bmi.n	800bdd2 <__swsetup_r+0x82>
 800bd78:	06dd      	lsls	r5, r3, #27
 800bd7a:	d411      	bmi.n	800bda0 <__swsetup_r+0x50>
 800bd7c:	2309      	movs	r3, #9
 800bd7e:	6033      	str	r3, [r6, #0]
 800bd80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd84:	81a3      	strh	r3, [r4, #12]
 800bd86:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8a:	e03e      	b.n	800be0a <__swsetup_r+0xba>
 800bd8c:	4b25      	ldr	r3, [pc, #148]	; (800be24 <__swsetup_r+0xd4>)
 800bd8e:	429c      	cmp	r4, r3
 800bd90:	d101      	bne.n	800bd96 <__swsetup_r+0x46>
 800bd92:	68ac      	ldr	r4, [r5, #8]
 800bd94:	e7eb      	b.n	800bd6e <__swsetup_r+0x1e>
 800bd96:	4b24      	ldr	r3, [pc, #144]	; (800be28 <__swsetup_r+0xd8>)
 800bd98:	429c      	cmp	r4, r3
 800bd9a:	bf08      	it	eq
 800bd9c:	68ec      	ldreq	r4, [r5, #12]
 800bd9e:	e7e6      	b.n	800bd6e <__swsetup_r+0x1e>
 800bda0:	0758      	lsls	r0, r3, #29
 800bda2:	d512      	bpl.n	800bdca <__swsetup_r+0x7a>
 800bda4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bda6:	b141      	cbz	r1, 800bdba <__swsetup_r+0x6a>
 800bda8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdac:	4299      	cmp	r1, r3
 800bdae:	d002      	beq.n	800bdb6 <__swsetup_r+0x66>
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f7ff fbcb 	bl	800b54c <_free_r>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	6363      	str	r3, [r4, #52]	; 0x34
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdc0:	81a3      	strh	r3, [r4, #12]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	6063      	str	r3, [r4, #4]
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	f043 0308 	orr.w	r3, r3, #8
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	6923      	ldr	r3, [r4, #16]
 800bdd4:	b94b      	cbnz	r3, 800bdea <__swsetup_r+0x9a>
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bde0:	d003      	beq.n	800bdea <__swsetup_r+0x9a>
 800bde2:	4621      	mov	r1, r4
 800bde4:	4630      	mov	r0, r6
 800bde6:	f000 fa07 	bl	800c1f8 <__smakebuf_r>
 800bdea:	89a0      	ldrh	r0, [r4, #12]
 800bdec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdf0:	f010 0301 	ands.w	r3, r0, #1
 800bdf4:	d00a      	beq.n	800be0c <__swsetup_r+0xbc>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	60a3      	str	r3, [r4, #8]
 800bdfa:	6963      	ldr	r3, [r4, #20]
 800bdfc:	425b      	negs	r3, r3
 800bdfe:	61a3      	str	r3, [r4, #24]
 800be00:	6923      	ldr	r3, [r4, #16]
 800be02:	b943      	cbnz	r3, 800be16 <__swsetup_r+0xc6>
 800be04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be08:	d1ba      	bne.n	800bd80 <__swsetup_r+0x30>
 800be0a:	bd70      	pop	{r4, r5, r6, pc}
 800be0c:	0781      	lsls	r1, r0, #30
 800be0e:	bf58      	it	pl
 800be10:	6963      	ldrpl	r3, [r4, #20]
 800be12:	60a3      	str	r3, [r4, #8]
 800be14:	e7f4      	b.n	800be00 <__swsetup_r+0xb0>
 800be16:	2000      	movs	r0, #0
 800be18:	e7f7      	b.n	800be0a <__swsetup_r+0xba>
 800be1a:	bf00      	nop
 800be1c:	24000010 	.word	0x24000010
 800be20:	0800d514 	.word	0x0800d514
 800be24:	0800d534 	.word	0x0800d534
 800be28:	0800d4f4 	.word	0x0800d4f4

0800be2c <abort>:
 800be2c:	b508      	push	{r3, lr}
 800be2e:	2006      	movs	r0, #6
 800be30:	f000 fa7c 	bl	800c32c <raise>
 800be34:	2001      	movs	r0, #1
 800be36:	f7f4 ffb3 	bl	8000da0 <_exit>
	...

0800be3c <__sflush_r>:
 800be3c:	898a      	ldrh	r2, [r1, #12]
 800be3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be42:	4605      	mov	r5, r0
 800be44:	0710      	lsls	r0, r2, #28
 800be46:	460c      	mov	r4, r1
 800be48:	d458      	bmi.n	800befc <__sflush_r+0xc0>
 800be4a:	684b      	ldr	r3, [r1, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dc05      	bgt.n	800be5c <__sflush_r+0x20>
 800be50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be52:	2b00      	cmp	r3, #0
 800be54:	dc02      	bgt.n	800be5c <__sflush_r+0x20>
 800be56:	2000      	movs	r0, #0
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be5e:	2e00      	cmp	r6, #0
 800be60:	d0f9      	beq.n	800be56 <__sflush_r+0x1a>
 800be62:	2300      	movs	r3, #0
 800be64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be68:	682f      	ldr	r7, [r5, #0]
 800be6a:	602b      	str	r3, [r5, #0]
 800be6c:	d032      	beq.n	800bed4 <__sflush_r+0x98>
 800be6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	075a      	lsls	r2, r3, #29
 800be74:	d505      	bpl.n	800be82 <__sflush_r+0x46>
 800be76:	6863      	ldr	r3, [r4, #4]
 800be78:	1ac0      	subs	r0, r0, r3
 800be7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be7c:	b10b      	cbz	r3, 800be82 <__sflush_r+0x46>
 800be7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be80:	1ac0      	subs	r0, r0, r3
 800be82:	2300      	movs	r3, #0
 800be84:	4602      	mov	r2, r0
 800be86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be88:	6a21      	ldr	r1, [r4, #32]
 800be8a:	4628      	mov	r0, r5
 800be8c:	47b0      	blx	r6
 800be8e:	1c43      	adds	r3, r0, #1
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	d106      	bne.n	800bea2 <__sflush_r+0x66>
 800be94:	6829      	ldr	r1, [r5, #0]
 800be96:	291d      	cmp	r1, #29
 800be98:	d82c      	bhi.n	800bef4 <__sflush_r+0xb8>
 800be9a:	4a2a      	ldr	r2, [pc, #168]	; (800bf44 <__sflush_r+0x108>)
 800be9c:	40ca      	lsrs	r2, r1
 800be9e:	07d6      	lsls	r6, r2, #31
 800bea0:	d528      	bpl.n	800bef4 <__sflush_r+0xb8>
 800bea2:	2200      	movs	r2, #0
 800bea4:	6062      	str	r2, [r4, #4]
 800bea6:	04d9      	lsls	r1, r3, #19
 800bea8:	6922      	ldr	r2, [r4, #16]
 800beaa:	6022      	str	r2, [r4, #0]
 800beac:	d504      	bpl.n	800beb8 <__sflush_r+0x7c>
 800beae:	1c42      	adds	r2, r0, #1
 800beb0:	d101      	bne.n	800beb6 <__sflush_r+0x7a>
 800beb2:	682b      	ldr	r3, [r5, #0]
 800beb4:	b903      	cbnz	r3, 800beb8 <__sflush_r+0x7c>
 800beb6:	6560      	str	r0, [r4, #84]	; 0x54
 800beb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beba:	602f      	str	r7, [r5, #0]
 800bebc:	2900      	cmp	r1, #0
 800bebe:	d0ca      	beq.n	800be56 <__sflush_r+0x1a>
 800bec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bec4:	4299      	cmp	r1, r3
 800bec6:	d002      	beq.n	800bece <__sflush_r+0x92>
 800bec8:	4628      	mov	r0, r5
 800beca:	f7ff fb3f 	bl	800b54c <_free_r>
 800bece:	2000      	movs	r0, #0
 800bed0:	6360      	str	r0, [r4, #52]	; 0x34
 800bed2:	e7c1      	b.n	800be58 <__sflush_r+0x1c>
 800bed4:	6a21      	ldr	r1, [r4, #32]
 800bed6:	2301      	movs	r3, #1
 800bed8:	4628      	mov	r0, r5
 800beda:	47b0      	blx	r6
 800bedc:	1c41      	adds	r1, r0, #1
 800bede:	d1c7      	bne.n	800be70 <__sflush_r+0x34>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d0c4      	beq.n	800be70 <__sflush_r+0x34>
 800bee6:	2b1d      	cmp	r3, #29
 800bee8:	d001      	beq.n	800beee <__sflush_r+0xb2>
 800beea:	2b16      	cmp	r3, #22
 800beec:	d101      	bne.n	800bef2 <__sflush_r+0xb6>
 800beee:	602f      	str	r7, [r5, #0]
 800bef0:	e7b1      	b.n	800be56 <__sflush_r+0x1a>
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bef8:	81a3      	strh	r3, [r4, #12]
 800befa:	e7ad      	b.n	800be58 <__sflush_r+0x1c>
 800befc:	690f      	ldr	r7, [r1, #16]
 800befe:	2f00      	cmp	r7, #0
 800bf00:	d0a9      	beq.n	800be56 <__sflush_r+0x1a>
 800bf02:	0793      	lsls	r3, r2, #30
 800bf04:	680e      	ldr	r6, [r1, #0]
 800bf06:	bf08      	it	eq
 800bf08:	694b      	ldreq	r3, [r1, #20]
 800bf0a:	600f      	str	r7, [r1, #0]
 800bf0c:	bf18      	it	ne
 800bf0e:	2300      	movne	r3, #0
 800bf10:	eba6 0807 	sub.w	r8, r6, r7
 800bf14:	608b      	str	r3, [r1, #8]
 800bf16:	f1b8 0f00 	cmp.w	r8, #0
 800bf1a:	dd9c      	ble.n	800be56 <__sflush_r+0x1a>
 800bf1c:	6a21      	ldr	r1, [r4, #32]
 800bf1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf20:	4643      	mov	r3, r8
 800bf22:	463a      	mov	r2, r7
 800bf24:	4628      	mov	r0, r5
 800bf26:	47b0      	blx	r6
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	dc06      	bgt.n	800bf3a <__sflush_r+0xfe>
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf32:	81a3      	strh	r3, [r4, #12]
 800bf34:	f04f 30ff 	mov.w	r0, #4294967295
 800bf38:	e78e      	b.n	800be58 <__sflush_r+0x1c>
 800bf3a:	4407      	add	r7, r0
 800bf3c:	eba8 0800 	sub.w	r8, r8, r0
 800bf40:	e7e9      	b.n	800bf16 <__sflush_r+0xda>
 800bf42:	bf00      	nop
 800bf44:	20400001 	.word	0x20400001

0800bf48 <_fflush_r>:
 800bf48:	b538      	push	{r3, r4, r5, lr}
 800bf4a:	690b      	ldr	r3, [r1, #16]
 800bf4c:	4605      	mov	r5, r0
 800bf4e:	460c      	mov	r4, r1
 800bf50:	b913      	cbnz	r3, 800bf58 <_fflush_r+0x10>
 800bf52:	2500      	movs	r5, #0
 800bf54:	4628      	mov	r0, r5
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	b118      	cbz	r0, 800bf62 <_fflush_r+0x1a>
 800bf5a:	6983      	ldr	r3, [r0, #24]
 800bf5c:	b90b      	cbnz	r3, 800bf62 <_fflush_r+0x1a>
 800bf5e:	f000 f887 	bl	800c070 <__sinit>
 800bf62:	4b14      	ldr	r3, [pc, #80]	; (800bfb4 <_fflush_r+0x6c>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	d11b      	bne.n	800bfa0 <_fflush_r+0x58>
 800bf68:	686c      	ldr	r4, [r5, #4]
 800bf6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0ef      	beq.n	800bf52 <_fflush_r+0xa>
 800bf72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf74:	07d0      	lsls	r0, r2, #31
 800bf76:	d404      	bmi.n	800bf82 <_fflush_r+0x3a>
 800bf78:	0599      	lsls	r1, r3, #22
 800bf7a:	d402      	bmi.n	800bf82 <_fflush_r+0x3a>
 800bf7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf7e:	f000 f915 	bl	800c1ac <__retarget_lock_acquire_recursive>
 800bf82:	4628      	mov	r0, r5
 800bf84:	4621      	mov	r1, r4
 800bf86:	f7ff ff59 	bl	800be3c <__sflush_r>
 800bf8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf8c:	07da      	lsls	r2, r3, #31
 800bf8e:	4605      	mov	r5, r0
 800bf90:	d4e0      	bmi.n	800bf54 <_fflush_r+0xc>
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	059b      	lsls	r3, r3, #22
 800bf96:	d4dd      	bmi.n	800bf54 <_fflush_r+0xc>
 800bf98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf9a:	f000 f908 	bl	800c1ae <__retarget_lock_release_recursive>
 800bf9e:	e7d9      	b.n	800bf54 <_fflush_r+0xc>
 800bfa0:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <_fflush_r+0x70>)
 800bfa2:	429c      	cmp	r4, r3
 800bfa4:	d101      	bne.n	800bfaa <_fflush_r+0x62>
 800bfa6:	68ac      	ldr	r4, [r5, #8]
 800bfa8:	e7df      	b.n	800bf6a <_fflush_r+0x22>
 800bfaa:	4b04      	ldr	r3, [pc, #16]	; (800bfbc <_fflush_r+0x74>)
 800bfac:	429c      	cmp	r4, r3
 800bfae:	bf08      	it	eq
 800bfb0:	68ec      	ldreq	r4, [r5, #12]
 800bfb2:	e7da      	b.n	800bf6a <_fflush_r+0x22>
 800bfb4:	0800d514 	.word	0x0800d514
 800bfb8:	0800d534 	.word	0x0800d534
 800bfbc:	0800d4f4 	.word	0x0800d4f4

0800bfc0 <std>:
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	b510      	push	{r4, lr}
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	e9c0 3300 	strd	r3, r3, [r0]
 800bfca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfce:	6083      	str	r3, [r0, #8]
 800bfd0:	8181      	strh	r1, [r0, #12]
 800bfd2:	6643      	str	r3, [r0, #100]	; 0x64
 800bfd4:	81c2      	strh	r2, [r0, #14]
 800bfd6:	6183      	str	r3, [r0, #24]
 800bfd8:	4619      	mov	r1, r3
 800bfda:	2208      	movs	r2, #8
 800bfdc:	305c      	adds	r0, #92	; 0x5c
 800bfde:	f7ff faad 	bl	800b53c <memset>
 800bfe2:	4b05      	ldr	r3, [pc, #20]	; (800bff8 <std+0x38>)
 800bfe4:	6263      	str	r3, [r4, #36]	; 0x24
 800bfe6:	4b05      	ldr	r3, [pc, #20]	; (800bffc <std+0x3c>)
 800bfe8:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfea:	4b05      	ldr	r3, [pc, #20]	; (800c000 <std+0x40>)
 800bfec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfee:	4b05      	ldr	r3, [pc, #20]	; (800c004 <std+0x44>)
 800bff0:	6224      	str	r4, [r4, #32]
 800bff2:	6323      	str	r3, [r4, #48]	; 0x30
 800bff4:	bd10      	pop	{r4, pc}
 800bff6:	bf00      	nop
 800bff8:	0800c365 	.word	0x0800c365
 800bffc:	0800c387 	.word	0x0800c387
 800c000:	0800c3bf 	.word	0x0800c3bf
 800c004:	0800c3e3 	.word	0x0800c3e3

0800c008 <_cleanup_r>:
 800c008:	4901      	ldr	r1, [pc, #4]	; (800c010 <_cleanup_r+0x8>)
 800c00a:	f000 b8af 	b.w	800c16c <_fwalk_reent>
 800c00e:	bf00      	nop
 800c010:	0800bf49 	.word	0x0800bf49

0800c014 <__sfmoreglue>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	1e4a      	subs	r2, r1, #1
 800c018:	2568      	movs	r5, #104	; 0x68
 800c01a:	4355      	muls	r5, r2
 800c01c:	460e      	mov	r6, r1
 800c01e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c022:	f7ff fae3 	bl	800b5ec <_malloc_r>
 800c026:	4604      	mov	r4, r0
 800c028:	b140      	cbz	r0, 800c03c <__sfmoreglue+0x28>
 800c02a:	2100      	movs	r1, #0
 800c02c:	e9c0 1600 	strd	r1, r6, [r0]
 800c030:	300c      	adds	r0, #12
 800c032:	60a0      	str	r0, [r4, #8]
 800c034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c038:	f7ff fa80 	bl	800b53c <memset>
 800c03c:	4620      	mov	r0, r4
 800c03e:	bd70      	pop	{r4, r5, r6, pc}

0800c040 <__sfp_lock_acquire>:
 800c040:	4801      	ldr	r0, [pc, #4]	; (800c048 <__sfp_lock_acquire+0x8>)
 800c042:	f000 b8b3 	b.w	800c1ac <__retarget_lock_acquire_recursive>
 800c046:	bf00      	nop
 800c048:	2400d614 	.word	0x2400d614

0800c04c <__sfp_lock_release>:
 800c04c:	4801      	ldr	r0, [pc, #4]	; (800c054 <__sfp_lock_release+0x8>)
 800c04e:	f000 b8ae 	b.w	800c1ae <__retarget_lock_release_recursive>
 800c052:	bf00      	nop
 800c054:	2400d614 	.word	0x2400d614

0800c058 <__sinit_lock_acquire>:
 800c058:	4801      	ldr	r0, [pc, #4]	; (800c060 <__sinit_lock_acquire+0x8>)
 800c05a:	f000 b8a7 	b.w	800c1ac <__retarget_lock_acquire_recursive>
 800c05e:	bf00      	nop
 800c060:	2400d60f 	.word	0x2400d60f

0800c064 <__sinit_lock_release>:
 800c064:	4801      	ldr	r0, [pc, #4]	; (800c06c <__sinit_lock_release+0x8>)
 800c066:	f000 b8a2 	b.w	800c1ae <__retarget_lock_release_recursive>
 800c06a:	bf00      	nop
 800c06c:	2400d60f 	.word	0x2400d60f

0800c070 <__sinit>:
 800c070:	b510      	push	{r4, lr}
 800c072:	4604      	mov	r4, r0
 800c074:	f7ff fff0 	bl	800c058 <__sinit_lock_acquire>
 800c078:	69a3      	ldr	r3, [r4, #24]
 800c07a:	b11b      	cbz	r3, 800c084 <__sinit+0x14>
 800c07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c080:	f7ff bff0 	b.w	800c064 <__sinit_lock_release>
 800c084:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c088:	6523      	str	r3, [r4, #80]	; 0x50
 800c08a:	4b13      	ldr	r3, [pc, #76]	; (800c0d8 <__sinit+0x68>)
 800c08c:	4a13      	ldr	r2, [pc, #76]	; (800c0dc <__sinit+0x6c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	62a2      	str	r2, [r4, #40]	; 0x28
 800c092:	42a3      	cmp	r3, r4
 800c094:	bf04      	itt	eq
 800c096:	2301      	moveq	r3, #1
 800c098:	61a3      	streq	r3, [r4, #24]
 800c09a:	4620      	mov	r0, r4
 800c09c:	f000 f820 	bl	800c0e0 <__sfp>
 800c0a0:	6060      	str	r0, [r4, #4]
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 f81c 	bl	800c0e0 <__sfp>
 800c0a8:	60a0      	str	r0, [r4, #8]
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 f818 	bl	800c0e0 <__sfp>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	60e0      	str	r0, [r4, #12]
 800c0b4:	2104      	movs	r1, #4
 800c0b6:	6860      	ldr	r0, [r4, #4]
 800c0b8:	f7ff ff82 	bl	800bfc0 <std>
 800c0bc:	68a0      	ldr	r0, [r4, #8]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	2109      	movs	r1, #9
 800c0c2:	f7ff ff7d 	bl	800bfc0 <std>
 800c0c6:	68e0      	ldr	r0, [r4, #12]
 800c0c8:	2202      	movs	r2, #2
 800c0ca:	2112      	movs	r1, #18
 800c0cc:	f7ff ff78 	bl	800bfc0 <std>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	61a3      	str	r3, [r4, #24]
 800c0d4:	e7d2      	b.n	800c07c <__sinit+0xc>
 800c0d6:	bf00      	nop
 800c0d8:	0800d4bc 	.word	0x0800d4bc
 800c0dc:	0800c009 	.word	0x0800c009

0800c0e0 <__sfp>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	4607      	mov	r7, r0
 800c0e4:	f7ff ffac 	bl	800c040 <__sfp_lock_acquire>
 800c0e8:	4b1e      	ldr	r3, [pc, #120]	; (800c164 <__sfp+0x84>)
 800c0ea:	681e      	ldr	r6, [r3, #0]
 800c0ec:	69b3      	ldr	r3, [r6, #24]
 800c0ee:	b913      	cbnz	r3, 800c0f6 <__sfp+0x16>
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f7ff ffbd 	bl	800c070 <__sinit>
 800c0f6:	3648      	adds	r6, #72	; 0x48
 800c0f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	d503      	bpl.n	800c108 <__sfp+0x28>
 800c100:	6833      	ldr	r3, [r6, #0]
 800c102:	b30b      	cbz	r3, 800c148 <__sfp+0x68>
 800c104:	6836      	ldr	r6, [r6, #0]
 800c106:	e7f7      	b.n	800c0f8 <__sfp+0x18>
 800c108:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c10c:	b9d5      	cbnz	r5, 800c144 <__sfp+0x64>
 800c10e:	4b16      	ldr	r3, [pc, #88]	; (800c168 <__sfp+0x88>)
 800c110:	60e3      	str	r3, [r4, #12]
 800c112:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c116:	6665      	str	r5, [r4, #100]	; 0x64
 800c118:	f000 f847 	bl	800c1aa <__retarget_lock_init_recursive>
 800c11c:	f7ff ff96 	bl	800c04c <__sfp_lock_release>
 800c120:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c124:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c128:	6025      	str	r5, [r4, #0]
 800c12a:	61a5      	str	r5, [r4, #24]
 800c12c:	2208      	movs	r2, #8
 800c12e:	4629      	mov	r1, r5
 800c130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c134:	f7ff fa02 	bl	800b53c <memset>
 800c138:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c13c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c140:	4620      	mov	r0, r4
 800c142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c144:	3468      	adds	r4, #104	; 0x68
 800c146:	e7d9      	b.n	800c0fc <__sfp+0x1c>
 800c148:	2104      	movs	r1, #4
 800c14a:	4638      	mov	r0, r7
 800c14c:	f7ff ff62 	bl	800c014 <__sfmoreglue>
 800c150:	4604      	mov	r4, r0
 800c152:	6030      	str	r0, [r6, #0]
 800c154:	2800      	cmp	r0, #0
 800c156:	d1d5      	bne.n	800c104 <__sfp+0x24>
 800c158:	f7ff ff78 	bl	800c04c <__sfp_lock_release>
 800c15c:	230c      	movs	r3, #12
 800c15e:	603b      	str	r3, [r7, #0]
 800c160:	e7ee      	b.n	800c140 <__sfp+0x60>
 800c162:	bf00      	nop
 800c164:	0800d4bc 	.word	0x0800d4bc
 800c168:	ffff0001 	.word	0xffff0001

0800c16c <_fwalk_reent>:
 800c16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c170:	4606      	mov	r6, r0
 800c172:	4688      	mov	r8, r1
 800c174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c178:	2700      	movs	r7, #0
 800c17a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c17e:	f1b9 0901 	subs.w	r9, r9, #1
 800c182:	d505      	bpl.n	800c190 <_fwalk_reent+0x24>
 800c184:	6824      	ldr	r4, [r4, #0]
 800c186:	2c00      	cmp	r4, #0
 800c188:	d1f7      	bne.n	800c17a <_fwalk_reent+0xe>
 800c18a:	4638      	mov	r0, r7
 800c18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c190:	89ab      	ldrh	r3, [r5, #12]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d907      	bls.n	800c1a6 <_fwalk_reent+0x3a>
 800c196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c19a:	3301      	adds	r3, #1
 800c19c:	d003      	beq.n	800c1a6 <_fwalk_reent+0x3a>
 800c19e:	4629      	mov	r1, r5
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	47c0      	blx	r8
 800c1a4:	4307      	orrs	r7, r0
 800c1a6:	3568      	adds	r5, #104	; 0x68
 800c1a8:	e7e9      	b.n	800c17e <_fwalk_reent+0x12>

0800c1aa <__retarget_lock_init_recursive>:
 800c1aa:	4770      	bx	lr

0800c1ac <__retarget_lock_acquire_recursive>:
 800c1ac:	4770      	bx	lr

0800c1ae <__retarget_lock_release_recursive>:
 800c1ae:	4770      	bx	lr

0800c1b0 <__swhatbuf_r>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	460e      	mov	r6, r1
 800c1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b8:	2900      	cmp	r1, #0
 800c1ba:	b096      	sub	sp, #88	; 0x58
 800c1bc:	4614      	mov	r4, r2
 800c1be:	461d      	mov	r5, r3
 800c1c0:	da07      	bge.n	800c1d2 <__swhatbuf_r+0x22>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	602b      	str	r3, [r5, #0]
 800c1c6:	89b3      	ldrh	r3, [r6, #12]
 800c1c8:	061a      	lsls	r2, r3, #24
 800c1ca:	d410      	bmi.n	800c1ee <__swhatbuf_r+0x3e>
 800c1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1d0:	e00e      	b.n	800c1f0 <__swhatbuf_r+0x40>
 800c1d2:	466a      	mov	r2, sp
 800c1d4:	f000 f92c 	bl	800c430 <_fstat_r>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	dbf2      	blt.n	800c1c2 <__swhatbuf_r+0x12>
 800c1dc:	9a01      	ldr	r2, [sp, #4]
 800c1de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1e6:	425a      	negs	r2, r3
 800c1e8:	415a      	adcs	r2, r3
 800c1ea:	602a      	str	r2, [r5, #0]
 800c1ec:	e7ee      	b.n	800c1cc <__swhatbuf_r+0x1c>
 800c1ee:	2340      	movs	r3, #64	; 0x40
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	6023      	str	r3, [r4, #0]
 800c1f4:	b016      	add	sp, #88	; 0x58
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}

0800c1f8 <__smakebuf_r>:
 800c1f8:	898b      	ldrh	r3, [r1, #12]
 800c1fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1fc:	079d      	lsls	r5, r3, #30
 800c1fe:	4606      	mov	r6, r0
 800c200:	460c      	mov	r4, r1
 800c202:	d507      	bpl.n	800c214 <__smakebuf_r+0x1c>
 800c204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	6123      	str	r3, [r4, #16]
 800c20c:	2301      	movs	r3, #1
 800c20e:	6163      	str	r3, [r4, #20]
 800c210:	b002      	add	sp, #8
 800c212:	bd70      	pop	{r4, r5, r6, pc}
 800c214:	ab01      	add	r3, sp, #4
 800c216:	466a      	mov	r2, sp
 800c218:	f7ff ffca 	bl	800c1b0 <__swhatbuf_r>
 800c21c:	9900      	ldr	r1, [sp, #0]
 800c21e:	4605      	mov	r5, r0
 800c220:	4630      	mov	r0, r6
 800c222:	f7ff f9e3 	bl	800b5ec <_malloc_r>
 800c226:	b948      	cbnz	r0, 800c23c <__smakebuf_r+0x44>
 800c228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c22c:	059a      	lsls	r2, r3, #22
 800c22e:	d4ef      	bmi.n	800c210 <__smakebuf_r+0x18>
 800c230:	f023 0303 	bic.w	r3, r3, #3
 800c234:	f043 0302 	orr.w	r3, r3, #2
 800c238:	81a3      	strh	r3, [r4, #12]
 800c23a:	e7e3      	b.n	800c204 <__smakebuf_r+0xc>
 800c23c:	4b0d      	ldr	r3, [pc, #52]	; (800c274 <__smakebuf_r+0x7c>)
 800c23e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	6020      	str	r0, [r4, #0]
 800c244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c248:	81a3      	strh	r3, [r4, #12]
 800c24a:	9b00      	ldr	r3, [sp, #0]
 800c24c:	6163      	str	r3, [r4, #20]
 800c24e:	9b01      	ldr	r3, [sp, #4]
 800c250:	6120      	str	r0, [r4, #16]
 800c252:	b15b      	cbz	r3, 800c26c <__smakebuf_r+0x74>
 800c254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c258:	4630      	mov	r0, r6
 800c25a:	f000 f8fb 	bl	800c454 <_isatty_r>
 800c25e:	b128      	cbz	r0, 800c26c <__smakebuf_r+0x74>
 800c260:	89a3      	ldrh	r3, [r4, #12]
 800c262:	f023 0303 	bic.w	r3, r3, #3
 800c266:	f043 0301 	orr.w	r3, r3, #1
 800c26a:	81a3      	strh	r3, [r4, #12]
 800c26c:	89a0      	ldrh	r0, [r4, #12]
 800c26e:	4305      	orrs	r5, r0
 800c270:	81a5      	strh	r5, [r4, #12]
 800c272:	e7cd      	b.n	800c210 <__smakebuf_r+0x18>
 800c274:	0800c009 	.word	0x0800c009

0800c278 <__malloc_lock>:
 800c278:	4801      	ldr	r0, [pc, #4]	; (800c280 <__malloc_lock+0x8>)
 800c27a:	f7ff bf97 	b.w	800c1ac <__retarget_lock_acquire_recursive>
 800c27e:	bf00      	nop
 800c280:	2400d610 	.word	0x2400d610

0800c284 <__malloc_unlock>:
 800c284:	4801      	ldr	r0, [pc, #4]	; (800c28c <__malloc_unlock+0x8>)
 800c286:	f7ff bf92 	b.w	800c1ae <__retarget_lock_release_recursive>
 800c28a:	bf00      	nop
 800c28c:	2400d610 	.word	0x2400d610

0800c290 <_realloc_r>:
 800c290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c292:	4607      	mov	r7, r0
 800c294:	4614      	mov	r4, r2
 800c296:	460e      	mov	r6, r1
 800c298:	b921      	cbnz	r1, 800c2a4 <_realloc_r+0x14>
 800c29a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c29e:	4611      	mov	r1, r2
 800c2a0:	f7ff b9a4 	b.w	800b5ec <_malloc_r>
 800c2a4:	b922      	cbnz	r2, 800c2b0 <_realloc_r+0x20>
 800c2a6:	f7ff f951 	bl	800b54c <_free_r>
 800c2aa:	4625      	mov	r5, r4
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b0:	f000 f8f2 	bl	800c498 <_malloc_usable_size_r>
 800c2b4:	42a0      	cmp	r0, r4
 800c2b6:	d20f      	bcs.n	800c2d8 <_realloc_r+0x48>
 800c2b8:	4621      	mov	r1, r4
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7ff f996 	bl	800b5ec <_malloc_r>
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d0f2      	beq.n	800c2ac <_realloc_r+0x1c>
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	4622      	mov	r2, r4
 800c2ca:	f7ff f929 	bl	800b520 <memcpy>
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	f7ff f93b 	bl	800b54c <_free_r>
 800c2d6:	e7e9      	b.n	800c2ac <_realloc_r+0x1c>
 800c2d8:	4635      	mov	r5, r6
 800c2da:	e7e7      	b.n	800c2ac <_realloc_r+0x1c>

0800c2dc <_raise_r>:
 800c2dc:	291f      	cmp	r1, #31
 800c2de:	b538      	push	{r3, r4, r5, lr}
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	d904      	bls.n	800c2f0 <_raise_r+0x14>
 800c2e6:	2316      	movs	r3, #22
 800c2e8:	6003      	str	r3, [r0, #0]
 800c2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ee:	bd38      	pop	{r3, r4, r5, pc}
 800c2f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2f2:	b112      	cbz	r2, 800c2fa <_raise_r+0x1e>
 800c2f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2f8:	b94b      	cbnz	r3, 800c30e <_raise_r+0x32>
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 f830 	bl	800c360 <_getpid_r>
 800c300:	462a      	mov	r2, r5
 800c302:	4601      	mov	r1, r0
 800c304:	4620      	mov	r0, r4
 800c306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c30a:	f000 b817 	b.w	800c33c <_kill_r>
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d00a      	beq.n	800c328 <_raise_r+0x4c>
 800c312:	1c59      	adds	r1, r3, #1
 800c314:	d103      	bne.n	800c31e <_raise_r+0x42>
 800c316:	2316      	movs	r3, #22
 800c318:	6003      	str	r3, [r0, #0]
 800c31a:	2001      	movs	r0, #1
 800c31c:	e7e7      	b.n	800c2ee <_raise_r+0x12>
 800c31e:	2400      	movs	r4, #0
 800c320:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c324:	4628      	mov	r0, r5
 800c326:	4798      	blx	r3
 800c328:	2000      	movs	r0, #0
 800c32a:	e7e0      	b.n	800c2ee <_raise_r+0x12>

0800c32c <raise>:
 800c32c:	4b02      	ldr	r3, [pc, #8]	; (800c338 <raise+0xc>)
 800c32e:	4601      	mov	r1, r0
 800c330:	6818      	ldr	r0, [r3, #0]
 800c332:	f7ff bfd3 	b.w	800c2dc <_raise_r>
 800c336:	bf00      	nop
 800c338:	24000010 	.word	0x24000010

0800c33c <_kill_r>:
 800c33c:	b538      	push	{r3, r4, r5, lr}
 800c33e:	4d07      	ldr	r5, [pc, #28]	; (800c35c <_kill_r+0x20>)
 800c340:	2300      	movs	r3, #0
 800c342:	4604      	mov	r4, r0
 800c344:	4608      	mov	r0, r1
 800c346:	4611      	mov	r1, r2
 800c348:	602b      	str	r3, [r5, #0]
 800c34a:	f7f4 fd19 	bl	8000d80 <_kill>
 800c34e:	1c43      	adds	r3, r0, #1
 800c350:	d102      	bne.n	800c358 <_kill_r+0x1c>
 800c352:	682b      	ldr	r3, [r5, #0]
 800c354:	b103      	cbz	r3, 800c358 <_kill_r+0x1c>
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	bd38      	pop	{r3, r4, r5, pc}
 800c35a:	bf00      	nop
 800c35c:	2400d618 	.word	0x2400d618

0800c360 <_getpid_r>:
 800c360:	f7f4 bd06 	b.w	8000d70 <_getpid>

0800c364 <__sread>:
 800c364:	b510      	push	{r4, lr}
 800c366:	460c      	mov	r4, r1
 800c368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c36c:	f000 f89c 	bl	800c4a8 <_read_r>
 800c370:	2800      	cmp	r0, #0
 800c372:	bfab      	itete	ge
 800c374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c376:	89a3      	ldrhlt	r3, [r4, #12]
 800c378:	181b      	addge	r3, r3, r0
 800c37a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c37e:	bfac      	ite	ge
 800c380:	6563      	strge	r3, [r4, #84]	; 0x54
 800c382:	81a3      	strhlt	r3, [r4, #12]
 800c384:	bd10      	pop	{r4, pc}

0800c386 <__swrite>:
 800c386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38a:	461f      	mov	r7, r3
 800c38c:	898b      	ldrh	r3, [r1, #12]
 800c38e:	05db      	lsls	r3, r3, #23
 800c390:	4605      	mov	r5, r0
 800c392:	460c      	mov	r4, r1
 800c394:	4616      	mov	r6, r2
 800c396:	d505      	bpl.n	800c3a4 <__swrite+0x1e>
 800c398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39c:	2302      	movs	r3, #2
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f000 f868 	bl	800c474 <_lseek_r>
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3ae:	81a3      	strh	r3, [r4, #12]
 800c3b0:	4632      	mov	r2, r6
 800c3b2:	463b      	mov	r3, r7
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ba:	f000 b817 	b.w	800c3ec <_write_r>

0800c3be <__sseek>:
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c6:	f000 f855 	bl	800c474 <_lseek_r>
 800c3ca:	1c43      	adds	r3, r0, #1
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	bf15      	itete	ne
 800c3d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3da:	81a3      	strheq	r3, [r4, #12]
 800c3dc:	bf18      	it	ne
 800c3de:	81a3      	strhne	r3, [r4, #12]
 800c3e0:	bd10      	pop	{r4, pc}

0800c3e2 <__sclose>:
 800c3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e6:	f000 b813 	b.w	800c410 <_close_r>
	...

0800c3ec <_write_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4d07      	ldr	r5, [pc, #28]	; (800c40c <_write_r+0x20>)
 800c3f0:	4604      	mov	r4, r0
 800c3f2:	4608      	mov	r0, r1
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	602a      	str	r2, [r5, #0]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f7f4 fcf7 	bl	8000dee <_write>
 800c400:	1c43      	adds	r3, r0, #1
 800c402:	d102      	bne.n	800c40a <_write_r+0x1e>
 800c404:	682b      	ldr	r3, [r5, #0]
 800c406:	b103      	cbz	r3, 800c40a <_write_r+0x1e>
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	2400d618 	.word	0x2400d618

0800c410 <_close_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4d06      	ldr	r5, [pc, #24]	; (800c42c <_close_r+0x1c>)
 800c414:	2300      	movs	r3, #0
 800c416:	4604      	mov	r4, r0
 800c418:	4608      	mov	r0, r1
 800c41a:	602b      	str	r3, [r5, #0]
 800c41c:	f7f4 fd03 	bl	8000e26 <_close>
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	d102      	bne.n	800c42a <_close_r+0x1a>
 800c424:	682b      	ldr	r3, [r5, #0]
 800c426:	b103      	cbz	r3, 800c42a <_close_r+0x1a>
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	bd38      	pop	{r3, r4, r5, pc}
 800c42c:	2400d618 	.word	0x2400d618

0800c430 <_fstat_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4d07      	ldr	r5, [pc, #28]	; (800c450 <_fstat_r+0x20>)
 800c434:	2300      	movs	r3, #0
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	4611      	mov	r1, r2
 800c43c:	602b      	str	r3, [r5, #0]
 800c43e:	f7f4 fcfe 	bl	8000e3e <_fstat>
 800c442:	1c43      	adds	r3, r0, #1
 800c444:	d102      	bne.n	800c44c <_fstat_r+0x1c>
 800c446:	682b      	ldr	r3, [r5, #0]
 800c448:	b103      	cbz	r3, 800c44c <_fstat_r+0x1c>
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	bd38      	pop	{r3, r4, r5, pc}
 800c44e:	bf00      	nop
 800c450:	2400d618 	.word	0x2400d618

0800c454 <_isatty_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4d06      	ldr	r5, [pc, #24]	; (800c470 <_isatty_r+0x1c>)
 800c458:	2300      	movs	r3, #0
 800c45a:	4604      	mov	r4, r0
 800c45c:	4608      	mov	r0, r1
 800c45e:	602b      	str	r3, [r5, #0]
 800c460:	f7f4 fcfd 	bl	8000e5e <_isatty>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d102      	bne.n	800c46e <_isatty_r+0x1a>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	b103      	cbz	r3, 800c46e <_isatty_r+0x1a>
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	bd38      	pop	{r3, r4, r5, pc}
 800c470:	2400d618 	.word	0x2400d618

0800c474 <_lseek_r>:
 800c474:	b538      	push	{r3, r4, r5, lr}
 800c476:	4d07      	ldr	r5, [pc, #28]	; (800c494 <_lseek_r+0x20>)
 800c478:	4604      	mov	r4, r0
 800c47a:	4608      	mov	r0, r1
 800c47c:	4611      	mov	r1, r2
 800c47e:	2200      	movs	r2, #0
 800c480:	602a      	str	r2, [r5, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	f7f4 fcf6 	bl	8000e74 <_lseek>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	d102      	bne.n	800c492 <_lseek_r+0x1e>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	b103      	cbz	r3, 800c492 <_lseek_r+0x1e>
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	2400d618 	.word	0x2400d618

0800c498 <_malloc_usable_size_r>:
 800c498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c49c:	1f18      	subs	r0, r3, #4
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	bfbc      	itt	lt
 800c4a2:	580b      	ldrlt	r3, [r1, r0]
 800c4a4:	18c0      	addlt	r0, r0, r3
 800c4a6:	4770      	bx	lr

0800c4a8 <_read_r>:
 800c4a8:	b538      	push	{r3, r4, r5, lr}
 800c4aa:	4d07      	ldr	r5, [pc, #28]	; (800c4c8 <_read_r+0x20>)
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	4608      	mov	r0, r1
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	602a      	str	r2, [r5, #0]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f7f4 fc7c 	bl	8000db4 <_read>
 800c4bc:	1c43      	adds	r3, r0, #1
 800c4be:	d102      	bne.n	800c4c6 <_read_r+0x1e>
 800c4c0:	682b      	ldr	r3, [r5, #0]
 800c4c2:	b103      	cbz	r3, 800c4c6 <_read_r+0x1e>
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	2400d618 	.word	0x2400d618

0800c4cc <checkint>:
 800c4cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4d0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4d8:	dd2b      	ble.n	800c532 <checkint+0x66>
 800c4da:	f240 4333 	movw	r3, #1075	; 0x433
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	dc25      	bgt.n	800c52e <checkint+0x62>
 800c4e2:	1a9b      	subs	r3, r3, r2
 800c4e4:	f1a3 0620 	sub.w	r6, r3, #32
 800c4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ec:	fa02 f606 	lsl.w	r6, r2, r6
 800c4f0:	fa02 f403 	lsl.w	r4, r2, r3
 800c4f4:	f1c3 0520 	rsb	r5, r3, #32
 800c4f8:	4334      	orrs	r4, r6
 800c4fa:	fa22 f505 	lsr.w	r5, r2, r5
 800c4fe:	432c      	orrs	r4, r5
 800c500:	409a      	lsls	r2, r3
 800c502:	ea20 0602 	bic.w	r6, r0, r2
 800c506:	ea21 0704 	bic.w	r7, r1, r4
 800c50a:	ea56 0207 	orrs.w	r2, r6, r7
 800c50e:	f1a3 0420 	sub.w	r4, r3, #32
 800c512:	f1c3 0220 	rsb	r2, r3, #32
 800c516:	d10c      	bne.n	800c532 <checkint+0x66>
 800c518:	40d8      	lsrs	r0, r3
 800c51a:	fa01 f302 	lsl.w	r3, r1, r2
 800c51e:	4318      	orrs	r0, r3
 800c520:	40e1      	lsrs	r1, r4
 800c522:	4308      	orrs	r0, r1
 800c524:	f000 0301 	and.w	r3, r0, #1
 800c528:	f1c3 0002 	rsb	r0, r3, #2
 800c52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c52e:	2002      	movs	r0, #2
 800c530:	e7fc      	b.n	800c52c <checkint+0x60>
 800c532:	2000      	movs	r0, #0
 800c534:	e7fa      	b.n	800c52c <checkint+0x60>
	...

0800c538 <pow>:
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	ed2d 8b0a 	vpush	{d8-d12}
 800c540:	b09b      	sub	sp, #108	; 0x6c
 800c542:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c546:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c54a:	ed8d 1b00 	vstr	d1, [sp]
 800c54e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800c552:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c556:	f109 30ff 	add.w	r0, r9, #4294967295
 800c55a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800c55e:	4288      	cmp	r0, r1
 800c560:	46cc      	mov	ip, r9
 800c562:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800c566:	d806      	bhi.n	800c576 <pow+0x3e>
 800c568:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800c56c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800c570:	297f      	cmp	r1, #127	; 0x7f
 800c572:	f240 81ab 	bls.w	800c8cc <pow+0x394>
 800c576:	19b1      	adds	r1, r6, r6
 800c578:	9104      	str	r1, [sp, #16]
 800c57a:	eb47 0107 	adc.w	r1, r7, r7
 800c57e:	9105      	str	r1, [sp, #20]
 800c580:	9904      	ldr	r1, [sp, #16]
 800c582:	f111 31ff 	adds.w	r1, r1, #4294967295
 800c586:	460a      	mov	r2, r1
 800c588:	9905      	ldr	r1, [sp, #20]
 800c58a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800c58e:	460b      	mov	r3, r1
 800c590:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800c594:	f06f 0001 	mvn.w	r0, #1
 800c598:	4299      	cmp	r1, r3
 800c59a:	bf08      	it	eq
 800c59c:	4290      	cmpeq	r0, r2
 800c59e:	d260      	bcs.n	800c662 <pow+0x12a>
 800c5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	d11a      	bne.n	800c5de <pow+0xa6>
 800c5a8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800c5ac:	1923      	adds	r3, r4, r4
 800c5ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c5b0:	eb42 0302 	adc.w	r3, r2, r2
 800c5b4:	930d      	str	r3, [sp, #52]	; 0x34
 800c5b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c5ba:	4bcf      	ldr	r3, [pc, #828]	; (800c8f8 <pow+0x3c0>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	428b      	cmp	r3, r1
 800c5c0:	bf08      	it	eq
 800c5c2:	4282      	cmpeq	r2, r0
 800c5c4:	f080 8265 	bcs.w	800ca92 <pow+0x55a>
 800c5c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5cc:	ed9d 6b00 	vldr	d6, [sp]
 800c5d0:	ee37 0b06 	vadd.f64	d0, d7, d6
 800c5d4:	b01b      	add	sp, #108	; 0x6c
 800c5d6:	ecbd 8b0a 	vpop	{d8-d12}
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	49c7      	ldr	r1, [pc, #796]	; (800c8fc <pow+0x3c4>)
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	428d      	cmp	r5, r1
 800c5e4:	bf08      	it	eq
 800c5e6:	4284      	cmpeq	r4, r0
 800c5e8:	d10b      	bne.n	800c602 <pow+0xca>
 800c5ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c5ee:	19b3      	adds	r3, r6, r6
 800c5f0:	930e      	str	r3, [sp, #56]	; 0x38
 800c5f2:	eb42 0302 	adc.w	r3, r2, r2
 800c5f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c5fc:	4bbe      	ldr	r3, [pc, #760]	; (800c8f8 <pow+0x3c0>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	e7dd      	b.n	800c5be <pow+0x86>
 800c602:	1921      	adds	r1, r4, r4
 800c604:	9106      	str	r1, [sp, #24]
 800c606:	eb45 0105 	adc.w	r1, r5, r5
 800c60a:	9107      	str	r1, [sp, #28]
 800c60c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c610:	49bb      	ldr	r1, [pc, #748]	; (800c900 <pow+0x3c8>)
 800c612:	2000      	movs	r0, #0
 800c614:	42a1      	cmp	r1, r4
 800c616:	bf08      	it	eq
 800c618:	4298      	cmpeq	r0, r3
 800c61a:	d3d5      	bcc.n	800c5c8 <pow+0x90>
 800c61c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c620:	428c      	cmp	r4, r1
 800c622:	bf08      	it	eq
 800c624:	4283      	cmpeq	r3, r0
 800c626:	d1cf      	bne.n	800c5c8 <pow+0x90>
 800c628:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c62c:	49b5      	ldr	r1, [pc, #724]	; (800c904 <pow+0x3cc>)
 800c62e:	2000      	movs	r0, #0
 800c630:	428c      	cmp	r4, r1
 800c632:	bf08      	it	eq
 800c634:	4283      	cmpeq	r3, r0
 800c636:	f000 822c 	beq.w	800ca92 <pow+0x55a>
 800c63a:	49b3      	ldr	r1, [pc, #716]	; (800c908 <pow+0x3d0>)
 800c63c:	f04f 30ff 	mov.w	r0, #4294967295
 800c640:	42a1      	cmp	r1, r4
 800c642:	bf08      	it	eq
 800c644:	4298      	cmpeq	r0, r3
 800c646:	ea6f 0307 	mvn.w	r3, r7
 800c64a:	bf34      	ite	cc
 800c64c:	2201      	movcc	r2, #1
 800c64e:	2200      	movcs	r2, #0
 800c650:	0fdb      	lsrs	r3, r3, #31
 800c652:	429a      	cmp	r2, r3
 800c654:	f040 821a 	bne.w	800ca8c <pow+0x554>
 800c658:	ed9d 7b00 	vldr	d7, [sp]
 800c65c:	ee27 0b07 	vmul.f64	d0, d7, d7
 800c660:	e7b8      	b.n	800c5d4 <pow+0x9c>
 800c662:	1923      	adds	r3, r4, r4
 800c664:	9308      	str	r3, [sp, #32]
 800c666:	eb45 0305 	adc.w	r3, r5, r5
 800c66a:	9309      	str	r3, [sp, #36]	; 0x24
 800c66c:	9b08      	ldr	r3, [sp, #32]
 800c66e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800c672:	9310      	str	r3, [sp, #64]	; 0x40
 800c674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c676:	f143 33ff 	adc.w	r3, r3, #4294967295
 800c67a:	9311      	str	r3, [sp, #68]	; 0x44
 800c67c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c680:	4299      	cmp	r1, r3
 800c682:	bf08      	it	eq
 800c684:	4290      	cmpeq	r0, r2
 800c686:	d22d      	bcs.n	800c6e4 <pow+0x1ac>
 800c688:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c68c:	2c00      	cmp	r4, #0
 800c68e:	f175 0300 	sbcs.w	r3, r5, #0
 800c692:	ee27 0b07 	vmul.f64	d0, d7, d7
 800c696:	da16      	bge.n	800c6c6 <pow+0x18e>
 800c698:	4630      	mov	r0, r6
 800c69a:	4639      	mov	r1, r7
 800c69c:	f7ff ff16 	bl	800c4cc <checkint>
 800c6a0:	2801      	cmp	r0, #1
 800c6a2:	d110      	bne.n	800c6c6 <pow+0x18e>
 800c6a4:	eeb1 0b40 	vneg.f64	d0, d0
 800c6a8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800c6ac:	4323      	orrs	r3, r4
 800c6ae:	d10c      	bne.n	800c6ca <pow+0x192>
 800c6b0:	2e00      	cmp	r6, #0
 800c6b2:	f177 0300 	sbcs.w	r3, r7, #0
 800c6b6:	da8d      	bge.n	800c5d4 <pow+0x9c>
 800c6b8:	b01b      	add	sp, #108	; 0x6c
 800c6ba:	ecbd 8b0a 	vpop	{d8-d12}
 800c6be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c2:	f000 bc85 	b.w	800cfd0 <__math_divzero>
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	e7ee      	b.n	800c6a8 <pow+0x170>
 800c6ca:	2e00      	cmp	r6, #0
 800c6cc:	f177 0300 	sbcs.w	r3, r7, #0
 800c6d0:	da80      	bge.n	800c5d4 <pow+0x9c>
 800c6d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c6d6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c6da:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800c6de:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800c6e2:	e777      	b.n	800c5d4 <pow+0x9c>
 800c6e4:	2c00      	cmp	r4, #0
 800c6e6:	f175 0300 	sbcs.w	r3, r5, #0
 800c6ea:	da35      	bge.n	800c758 <pow+0x220>
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	4639      	mov	r1, r7
 800c6f0:	f7ff feec 	bl	800c4cc <checkint>
 800c6f4:	b940      	cbnz	r0, 800c708 <pow+0x1d0>
 800c6f6:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c6fa:	b01b      	add	sp, #108	; 0x6c
 800c6fc:	ecbd 8b0a 	vpop	{d8-d12}
 800c700:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	f000 bc7c 	b.w	800d000 <__math_invalid>
 800c708:	2801      	cmp	r0, #1
 800c70a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c70e:	bf14      	ite	ne
 800c710:	2000      	movne	r0, #0
 800c712:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800c716:	461d      	mov	r5, r3
 800c718:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800c71c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800c720:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800c724:	2a7f      	cmp	r2, #127	; 0x7f
 800c726:	d933      	bls.n	800c790 <pow+0x258>
 800c728:	4974      	ldr	r1, [pc, #464]	; (800c8fc <pow+0x3c4>)
 800c72a:	2000      	movs	r0, #0
 800c72c:	428d      	cmp	r5, r1
 800c72e:	bf08      	it	eq
 800c730:	4284      	cmpeq	r4, r0
 800c732:	f000 81ae 	beq.w	800ca92 <pow+0x55a>
 800c736:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d80e      	bhi.n	800c75c <pow+0x224>
 800c73e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c742:	ed9d 7b00 	vldr	d7, [sp]
 800c746:	42a9      	cmp	r1, r5
 800c748:	bf08      	it	eq
 800c74a:	42a0      	cmpeq	r0, r4
 800c74c:	bf34      	ite	cc
 800c74e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800c752:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800c756:	e73d      	b.n	800c5d4 <pow+0x9c>
 800c758:	2000      	movs	r0, #0
 800c75a:	e7df      	b.n	800c71c <pow+0x1e4>
 800c75c:	42a9      	cmp	r1, r5
 800c75e:	bf08      	it	eq
 800c760:	42a0      	cmpeq	r0, r4
 800c762:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c766:	bf2c      	ite	cs
 800c768:	2301      	movcs	r3, #1
 800c76a:	2300      	movcc	r3, #0
 800c76c:	4590      	cmp	r8, r2
 800c76e:	bf8c      	ite	hi
 800c770:	f04f 0800 	movhi.w	r8, #0
 800c774:	f04f 0801 	movls.w	r8, #1
 800c778:	4543      	cmp	r3, r8
 800c77a:	f04f 0000 	mov.w	r0, #0
 800c77e:	f000 80af 	beq.w	800c8e0 <pow+0x3a8>
 800c782:	b01b      	add	sp, #108	; 0x6c
 800c784:	ecbd 8b0a 	vpop	{d8-d12}
 800c788:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78c:	f000 bc18 	b.w	800cfc0 <__math_oflow>
 800c790:	f1bc 0f00 	cmp.w	ip, #0
 800c794:	d10e      	bne.n	800c7b4 <pow+0x27c>
 800c796:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c8f0 <pow+0x3b8>
 800c79a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c79e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c7a2:	ec57 6b17 	vmov	r6, r7, d7
 800c7a6:	4b59      	ldr	r3, [pc, #356]	; (800c90c <pow+0x3d4>)
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c7ae:	1874      	adds	r4, r6, r1
 800c7b0:	eb42 0503 	adc.w	r5, r2, r3
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	18e3      	adds	r3, r4, r3
 800c7b8:	4b55      	ldr	r3, [pc, #340]	; (800c910 <pow+0x3d8>)
 800c7ba:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c7be:	eb45 0303 	adc.w	r3, r5, r3
 800c7c2:	1519      	asrs	r1, r3, #20
 800c7c4:	ee03 1a10 	vmov	s6, r1
 800c7c8:	0d1e      	lsrs	r6, r3, #20
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800c7d0:	0536      	lsls	r6, r6, #20
 800c7d2:	1a63      	subs	r3, r4, r1
 800c7d4:	9312      	str	r3, [sp, #72]	; 0x48
 800c7d6:	eb65 0306 	sbc.w	r3, r5, r6
 800c7da:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7dc:	4b4d      	ldr	r3, [pc, #308]	; (800c914 <pow+0x3dc>)
 800c7de:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800c7e2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c7e6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800c7ea:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c7ee:	ed93 7b00 	vldr	d7, [r3]
 800c7f2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800c7f6:	ed93 4b02 	vldr	d4, [r3, #8]
 800c7fa:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800c7fe:	eea3 5b07 	vfma.f64	d5, d3, d7
 800c802:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800c806:	ee36 9b05 	vadd.f64	d9, d6, d5
 800c80a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800c80e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800c812:	ed93 4b04 	vldr	d4, [r3, #16]
 800c816:	ee35 5b06 	vadd.f64	d5, d5, d6
 800c81a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c81e:	ee26 4b04 	vmul.f64	d4, d6, d4
 800c822:	ed93 3b08 	vldr	d3, [r3, #32]
 800c826:	ee26 0b04 	vmul.f64	d0, d6, d4
 800c82a:	eeb0 8b40 	vmov.f64	d8, d0
 800c82e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800c832:	ed93 4b06 	vldr	d4, [r3, #24]
 800c836:	ee26 ab00 	vmul.f64	d10, d6, d0
 800c83a:	ee39 1b00 	vadd.f64	d1, d9, d0
 800c83e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800c842:	eea6 4b03 	vfma.f64	d4, d6, d3
 800c846:	ee39 9b41 	vsub.f64	d9, d9, d1
 800c84a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800c84e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800c852:	ee39 9b00 	vadd.f64	d9, d9, d0
 800c856:	eea6 3b02 	vfma.f64	d3, d6, d2
 800c85a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800c85e:	ee38 9b09 	vadd.f64	d9, d8, d9
 800c862:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800c866:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800c86a:	ed9d 6b00 	vldr	d6, [sp]
 800c86e:	eea0 3b02 	vfma.f64	d3, d0, d2
 800c872:	eea0 4b03 	vfma.f64	d4, d0, d3
 800c876:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800c87a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800c87e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c882:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c886:	eeb0 3b46 	vmov.f64	d3, d6
 800c88a:	ee31 1b47 	vsub.f64	d1, d1, d7
 800c88e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c892:	ee31 9b09 	vadd.f64	d9, d1, d9
 800c896:	ed9d 6b00 	vldr	d6, [sp]
 800c89a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800c89e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800c8a2:	193c      	adds	r4, r7, r4
 800c8a4:	2c3e      	cmp	r4, #62	; 0x3e
 800c8a6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800c8aa:	eea6 3b09 	vfma.f64	d3, d6, d9
 800c8ae:	d934      	bls.n	800c91a <pow+0x3e2>
 800c8b0:	428c      	cmp	r4, r1
 800c8b2:	da0d      	bge.n	800c8d0 <pow+0x398>
 800c8b4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c8b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8bc:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	f43f ae87 	beq.w	800c5d4 <pow+0x9c>
 800c8c6:	eeb1 0b40 	vneg.f64	d0, d0
 800c8ca:	e683      	b.n	800c5d4 <pow+0x9c>
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	e771      	b.n	800c7b4 <pow+0x27c>
 800c8d0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800c8d4:	d920      	bls.n	800c918 <pow+0x3e0>
 800c8d6:	2a00      	cmp	r2, #0
 800c8d8:	f173 0300 	sbcs.w	r3, r3, #0
 800c8dc:	f6bf af51 	bge.w	800c782 <pow+0x24a>
 800c8e0:	b01b      	add	sp, #108	; 0x6c
 800c8e2:	ecbd 8b0a 	vpop	{d8-d12}
 800c8e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ea:	f000 bb61 	b.w	800cfb0 <__math_uflow>
 800c8ee:	bf00      	nop
 800c8f0:	00000000 	.word	0x00000000
 800c8f4:	43300000 	.word	0x43300000
 800c8f8:	fff00000 	.word	0xfff00000
 800c8fc:	3ff00000 	.word	0x3ff00000
 800c900:	ffe00000 	.word	0xffe00000
 800c904:	7fe00000 	.word	0x7fe00000
 800c908:	7fdfffff 	.word	0x7fdfffff
 800c90c:	fcc00000 	.word	0xfcc00000
 800c910:	c0196aab 	.word	0xc0196aab
 800c914:	0800d558 	.word	0x0800d558
 800c918:	460f      	mov	r7, r1
 800c91a:	4e65      	ldr	r6, [pc, #404]	; (800cab0 <pow+0x578>)
 800c91c:	ed9d 4b02 	vldr	d4, [sp, #8]
 800c920:	ed96 6b02 	vldr	d6, [r6, #8]
 800c924:	ed96 7b00 	vldr	d7, [r6]
 800c928:	eeb0 5b46 	vmov.f64	d5, d6
 800c92c:	eea4 5b07 	vfma.f64	d5, d4, d7
 800c930:	ed8d 5b00 	vstr	d5, [sp]
 800c934:	ee35 6b46 	vsub.f64	d6, d5, d6
 800c938:	eeb0 5b44 	vmov.f64	d5, d4
 800c93c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c940:	ed96 7b04 	vldr	d7, [r6, #16]
 800c944:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800c948:	eea6 5b07 	vfma.f64	d5, d6, d7
 800c94c:	eeb0 7b45 	vmov.f64	d7, d5
 800c950:	ed96 5b06 	vldr	d5, [r6, #24]
 800c954:	1849      	adds	r1, r1, r1
 800c956:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800c95a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800c95e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c962:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800c966:	ee33 3b07 	vadd.f64	d3, d3, d7
 800c96a:	ee23 6b03 	vmul.f64	d6, d3, d3
 800c96e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800c972:	ed96 5b08 	vldr	d5, [r6, #32]
 800c976:	ee33 7b07 	vadd.f64	d7, d3, d7
 800c97a:	1814      	adds	r4, r2, r0
 800c97c:	0365      	lsls	r5, r4, #13
 800c97e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800c982:	eea3 5b04 	vfma.f64	d5, d3, d4
 800c986:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c98a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800c98e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800c992:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800c996:	2000      	movs	r0, #0
 800c998:	eb10 0a04 	adds.w	sl, r0, r4
 800c99c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800c9a0:	eb45 0b0c 	adc.w	fp, r5, ip
 800c9a4:	eea6 7b05 	vfma.f64	d7, d6, d5
 800c9a8:	2f00      	cmp	r7, #0
 800c9aa:	d16a      	bne.n	800ca82 <pow+0x54a>
 800c9ac:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	ea50 0301 	orrs.w	r3, r0, r1
 800c9b6:	f04f 0300 	mov.w	r3, #0
 800c9ba:	d115      	bne.n	800c9e8 <pow+0x4b0>
 800c9bc:	eb1a 0303 	adds.w	r3, sl, r3
 800c9c0:	ee0b 3a10 	vmov	s22, r3
 800c9c4:	4b3b      	ldr	r3, [pc, #236]	; (800cab4 <pow+0x57c>)
 800c9c6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800ca98 <pow+0x560>
 800c9ca:	eb4b 0303 	adc.w	r3, fp, r3
 800c9ce:	ee0b 3a90 	vmov	s23, r3
 800c9d2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800c9d6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800c9da:	b01b      	add	sp, #108	; 0x6c
 800c9dc:	ecbd 8b0a 	vpop	{d8-d12}
 800c9e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e4:	f000 bb24 	b.w	800d030 <__math_check_oflow>
 800c9e8:	eb1a 0303 	adds.w	r3, sl, r3
 800c9ec:	930a      	str	r3, [sp, #40]	; 0x28
 800c9ee:	4b32      	ldr	r3, [pc, #200]	; (800cab8 <pow+0x580>)
 800c9f0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c9f4:	eb4b 0303 	adc.w	r3, fp, r3
 800c9f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9fa:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800c9fe:	ee27 6b05 	vmul.f64	d6, d7, d5
 800ca02:	ee35 7b06 	vadd.f64	d7, d5, d6
 800ca06:	eeb0 3bc7 	vabs.f64	d3, d7
 800ca0a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800ca0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca12:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800caa0 <pow+0x568>
 800ca16:	d52b      	bpl.n	800ca70 <pow+0x538>
 800ca18:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ca1c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ca20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca24:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800ca28:	ee35 6b06 	vadd.f64	d6, d5, d6
 800ca2c:	bf48      	it	mi
 800ca2e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800ca32:	ee37 3b04 	vadd.f64	d3, d7, d4
 800ca36:	ee34 5b43 	vsub.f64	d5, d4, d3
 800ca3a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ca3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ca42:	ee37 7b03 	vadd.f64	d7, d7, d3
 800ca46:	ee37 7b44 	vsub.f64	d7, d7, d4
 800ca4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca52:	d105      	bne.n	800ca60 <pow+0x528>
 800ca54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ca56:	463a      	mov	r2, r7
 800ca58:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800ca5c:	ec43 2b17 	vmov	d7, r2, r3
 800ca60:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800ca64:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800ca68:	ee26 6b00 	vmul.f64	d6, d6, d0
 800ca6c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800ca70:	ee27 0b00 	vmul.f64	d0, d7, d0
 800ca74:	b01b      	add	sp, #108	; 0x6c
 800ca76:	ecbd 8b0a 	vpop	{d8-d12}
 800ca7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7e:	f000 bace 	b.w	800d01e <__math_check_uflow>
 800ca82:	ec4b ab10 	vmov	d0, sl, fp
 800ca86:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ca8a:	e5a3      	b.n	800c5d4 <pow+0x9c>
 800ca8c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800caa8 <pow+0x570>
 800ca90:	e5a0      	b.n	800c5d4 <pow+0x9c>
 800ca92:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ca96:	e59d      	b.n	800c5d4 <pow+0x9c>
 800ca98:	00000000 	.word	0x00000000
 800ca9c:	7f000000 	.word	0x7f000000
 800caa0:	00000000 	.word	0x00000000
 800caa4:	00100000 	.word	0x00100000
	...
 800cab0:	0800e610 	.word	0x0800e610
 800cab4:	c0f00000 	.word	0xc0f00000
 800cab8:	3fe00000 	.word	0x3fe00000
 800cabc:	00000000 	.word	0x00000000

0800cac0 <atan>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	eeb0 7b40 	vmov.f64	d7, d0
 800cac6:	ee17 5a90 	vmov	r5, s15
 800caca:	4b73      	ldr	r3, [pc, #460]	; (800cc98 <atan+0x1d8>)
 800cacc:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cad0:	429c      	cmp	r4, r3
 800cad2:	dd13      	ble.n	800cafc <atan+0x3c>
 800cad4:	4b71      	ldr	r3, [pc, #452]	; (800cc9c <atan+0x1dc>)
 800cad6:	429c      	cmp	r4, r3
 800cad8:	dc03      	bgt.n	800cae2 <atan+0x22>
 800cada:	d107      	bne.n	800caec <atan+0x2c>
 800cadc:	ee10 3a10 	vmov	r3, s0
 800cae0:	b123      	cbz	r3, 800caec <atan+0x2c>
 800cae2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cae6:	eeb0 0b47 	vmov.f64	d0, d7
 800caea:	bd38      	pop	{r3, r4, r5, pc}
 800caec:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800cc28 <atan+0x168>
 800caf0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800cc30 <atan+0x170>
 800caf4:	2d00      	cmp	r5, #0
 800caf6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800cafa:	e7f4      	b.n	800cae6 <atan+0x26>
 800cafc:	4b68      	ldr	r3, [pc, #416]	; (800cca0 <atan+0x1e0>)
 800cafe:	429c      	cmp	r4, r3
 800cb00:	dc11      	bgt.n	800cb26 <atan+0x66>
 800cb02:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cb06:	429c      	cmp	r4, r3
 800cb08:	dc0a      	bgt.n	800cb20 <atan+0x60>
 800cb0a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800cb0e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800cc38 <atan+0x178>
 800cb12:	ee30 6b06 	vadd.f64	d6, d0, d6
 800cb16:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb1e:	dce2      	bgt.n	800cae6 <atan+0x26>
 800cb20:	f04f 33ff 	mov.w	r3, #4294967295
 800cb24:	e013      	b.n	800cb4e <atan+0x8e>
 800cb26:	f000 f8c5 	bl	800ccb4 <fabs>
 800cb2a:	4b5e      	ldr	r3, [pc, #376]	; (800cca4 <atan+0x1e4>)
 800cb2c:	429c      	cmp	r4, r3
 800cb2e:	dc4f      	bgt.n	800cbd0 <atan+0x110>
 800cb30:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cb34:	429c      	cmp	r4, r3
 800cb36:	dc41      	bgt.n	800cbbc <atan+0xfc>
 800cb38:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800cb3c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800cb40:	2300      	movs	r3, #0
 800cb42:	eea0 6b07 	vfma.f64	d6, d0, d7
 800cb46:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cb4a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cb4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800cc40 <atan+0x180>
 800cb52:	ee27 4b07 	vmul.f64	d4, d7, d7
 800cb56:	ee24 5b04 	vmul.f64	d5, d4, d4
 800cb5a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800cc48 <atan+0x188>
 800cb5e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800cb62:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800cc50 <atan+0x190>
 800cb66:	eea3 6b05 	vfma.f64	d6, d3, d5
 800cb6a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800cc58 <atan+0x198>
 800cb6e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800cb72:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800cc60 <atan+0x1a0>
 800cb76:	eea3 6b05 	vfma.f64	d6, d3, d5
 800cb7a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800cc68 <atan+0x1a8>
 800cb7e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800cc70 <atan+0x1b0>
 800cb82:	eea6 3b05 	vfma.f64	d3, d6, d5
 800cb86:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800cc78 <atan+0x1b8>
 800cb8a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800cb8e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800cc80 <atan+0x1c0>
 800cb92:	eea2 6b05 	vfma.f64	d6, d2, d5
 800cb96:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800cc88 <atan+0x1c8>
 800cb9a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800cb9e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800cc90 <atan+0x1d0>
 800cba2:	1c5a      	adds	r2, r3, #1
 800cba4:	eea2 6b05 	vfma.f64	d6, d2, d5
 800cba8:	ee26 6b05 	vmul.f64	d6, d6, d5
 800cbac:	eea3 6b04 	vfma.f64	d6, d3, d4
 800cbb0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cbb4:	d121      	bne.n	800cbfa <atan+0x13a>
 800cbb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cbba:	e794      	b.n	800cae6 <atan+0x26>
 800cbbc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	ee30 6b47 	vsub.f64	d6, d0, d7
 800cbc6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cbca:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cbce:	e7be      	b.n	800cb4e <atan+0x8e>
 800cbd0:	4b35      	ldr	r3, [pc, #212]	; (800cca8 <atan+0x1e8>)
 800cbd2:	429c      	cmp	r4, r3
 800cbd4:	da0b      	bge.n	800cbee <atan+0x12e>
 800cbd6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800cbda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cbde:	ee30 5b47 	vsub.f64	d5, d0, d7
 800cbe2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800cbec:	e7af      	b.n	800cb4e <atan+0x8e>
 800cbee:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cbf8:	e7a9      	b.n	800cb4e <atan+0x8e>
 800cbfa:	4a2c      	ldr	r2, [pc, #176]	; (800ccac <atan+0x1ec>)
 800cbfc:	492c      	ldr	r1, [pc, #176]	; (800ccb0 <atan+0x1f0>)
 800cbfe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cc02:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800cc06:	ed93 5b00 	vldr	d5, [r3]
 800cc0a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cc12:	ed92 6b00 	vldr	d6, [r2]
 800cc16:	2d00      	cmp	r5, #0
 800cc18:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cc1c:	bfb8      	it	lt
 800cc1e:	eeb1 7b47 	vneglt.f64	d7, d7
 800cc22:	e760      	b.n	800cae6 <atan+0x26>
 800cc24:	f3af 8000 	nop.w
 800cc28:	54442d18 	.word	0x54442d18
 800cc2c:	3ff921fb 	.word	0x3ff921fb
 800cc30:	54442d18 	.word	0x54442d18
 800cc34:	bff921fb 	.word	0xbff921fb
 800cc38:	8800759c 	.word	0x8800759c
 800cc3c:	7e37e43c 	.word	0x7e37e43c
 800cc40:	e322da11 	.word	0xe322da11
 800cc44:	3f90ad3a 	.word	0x3f90ad3a
 800cc48:	24760deb 	.word	0x24760deb
 800cc4c:	3fa97b4b 	.word	0x3fa97b4b
 800cc50:	a0d03d51 	.word	0xa0d03d51
 800cc54:	3fb10d66 	.word	0x3fb10d66
 800cc58:	c54c206e 	.word	0xc54c206e
 800cc5c:	3fb745cd 	.word	0x3fb745cd
 800cc60:	920083ff 	.word	0x920083ff
 800cc64:	3fc24924 	.word	0x3fc24924
 800cc68:	5555550d 	.word	0x5555550d
 800cc6c:	3fd55555 	.word	0x3fd55555
 800cc70:	52defd9a 	.word	0x52defd9a
 800cc74:	bfadde2d 	.word	0xbfadde2d
 800cc78:	2c6a6c2f 	.word	0x2c6a6c2f
 800cc7c:	bfa2b444 	.word	0xbfa2b444
 800cc80:	af749a6d 	.word	0xaf749a6d
 800cc84:	bfb3b0f2 	.word	0xbfb3b0f2
 800cc88:	fe231671 	.word	0xfe231671
 800cc8c:	bfbc71c6 	.word	0xbfbc71c6
 800cc90:	9998ebc4 	.word	0x9998ebc4
 800cc94:	bfc99999 	.word	0xbfc99999
 800cc98:	440fffff 	.word	0x440fffff
 800cc9c:	7ff00000 	.word	0x7ff00000
 800cca0:	3fdbffff 	.word	0x3fdbffff
 800cca4:	3ff2ffff 	.word	0x3ff2ffff
 800cca8:	40038000 	.word	0x40038000
 800ccac:	0800e5a0 	.word	0x0800e5a0
 800ccb0:	0800e5c0 	.word	0x0800e5c0

0800ccb4 <fabs>:
 800ccb4:	ec51 0b10 	vmov	r0, r1, d0
 800ccb8:	ee10 2a10 	vmov	r2, s0
 800ccbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccc0:	ec43 2b10 	vmov	d0, r2, r3
 800ccc4:	4770      	bx	lr
	...

0800ccc8 <tanh>:
 800ccc8:	b510      	push	{r4, lr}
 800ccca:	eeb0 6b40 	vmov.f64	d6, d0
 800ccce:	ee16 4a90 	vmov	r4, s13
 800ccd2:	4a25      	ldr	r2, [pc, #148]	; (800cd68 <tanh+0xa0>)
 800ccd4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	ed2d 8b02 	vpush	{d8}
 800ccde:	dd0c      	ble.n	800ccfa <tanh+0x32>
 800cce0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cce4:	ee80 7b06 	vdiv.f64	d7, d0, d6
 800cce8:	2c00      	cmp	r4, #0
 800ccea:	bfac      	ite	ge
 800ccec:	ee37 0b00 	vaddge.f64	d0, d7, d0
 800ccf0:	ee37 0b40 	vsublt.f64	d0, d7, d0
 800ccf4:	ecbd 8b02 	vpop	{d8}
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	4a1c      	ldr	r2, [pc, #112]	; (800cd6c <tanh+0xa4>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	dc30      	bgt.n	800cd62 <tanh+0x9a>
 800cd00:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 800cd04:	da06      	bge.n	800cd14 <tanh+0x4c>
 800cd06:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cd0a:	ee30 7b07 	vadd.f64	d7, d0, d7
 800cd0e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800cd12:	e7ef      	b.n	800ccf4 <tanh+0x2c>
 800cd14:	4a16      	ldr	r2, [pc, #88]	; (800cd70 <tanh+0xa8>)
 800cd16:	eeb0 8b00 	vmov.f64	d8, #0	; 0x40000000  2.0
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	dd12      	ble.n	800cd44 <tanh+0x7c>
 800cd1e:	f7ff ffc9 	bl	800ccb4 <fabs>
 800cd22:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cd26:	f000 f997 	bl	800d058 <expm1>
 800cd2a:	ee30 0b08 	vadd.f64	d0, d0, d8
 800cd2e:	ee88 7b00 	vdiv.f64	d7, d8, d0
 800cd32:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cd36:	ee30 0b47 	vsub.f64	d0, d0, d7
 800cd3a:	2c00      	cmp	r4, #0
 800cd3c:	bfb8      	it	lt
 800cd3e:	eeb1 0b40 	vneglt.f64	d0, d0
 800cd42:	e7d7      	b.n	800ccf4 <tanh+0x2c>
 800cd44:	f7ff ffb6 	bl	800ccb4 <fabs>
 800cd48:	eeb8 7b00 	vmov.f64	d7, #128	; 0xc0000000 -2.0
 800cd4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cd50:	f000 f982 	bl	800d058 <expm1>
 800cd54:	eeb1 6b40 	vneg.f64	d6, d0
 800cd58:	ee30 8b08 	vadd.f64	d8, d0, d8
 800cd5c:	ee86 0b08 	vdiv.f64	d0, d6, d8
 800cd60:	e7eb      	b.n	800cd3a <tanh+0x72>
 800cd62:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cd66:	e7e8      	b.n	800cd3a <tanh+0x72>
 800cd68:	7fefffff 	.word	0x7fefffff
 800cd6c:	4035ffff 	.word	0x4035ffff
 800cd70:	3fefffff 	.word	0x3fefffff

0800cd74 <atan2>:
 800cd74:	f000 b82c 	b.w	800cdd0 <__ieee754_atan2>

0800cd78 <sqrt>:
 800cd78:	b508      	push	{r3, lr}
 800cd7a:	ed2d 8b04 	vpush	{d8-d9}
 800cd7e:	eeb0 8b40 	vmov.f64	d8, d0
 800cd82:	f000 f8f3 	bl	800cf6c <__ieee754_sqrt>
 800cd86:	4b10      	ldr	r3, [pc, #64]	; (800cdc8 <sqrt+0x50>)
 800cd88:	f993 3000 	ldrsb.w	r3, [r3]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	d011      	beq.n	800cdb4 <sqrt+0x3c>
 800cd90:	eeb4 8b48 	vcmp.f64	d8, d8
 800cd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd98:	d60c      	bvs.n	800cdb4 <sqrt+0x3c>
 800cd9a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 800cdc0 <sqrt+0x48>
 800cd9e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800cda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda6:	d505      	bpl.n	800cdb4 <sqrt+0x3c>
 800cda8:	f7fe fb6e 	bl	800b488 <__errno>
 800cdac:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800cdb0:	2321      	movs	r3, #33	; 0x21
 800cdb2:	6003      	str	r3, [r0, #0]
 800cdb4:	ecbd 8b04 	vpop	{d8-d9}
 800cdb8:	bd08      	pop	{r3, pc}
 800cdba:	bf00      	nop
 800cdbc:	f3af 8000 	nop.w
	...
 800cdc8:	24000074 	.word	0x24000074
 800cdcc:	00000000 	.word	0x00000000

0800cdd0 <__ieee754_atan2>:
 800cdd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdd2:	ee11 6a10 	vmov	r6, s2
 800cdd6:	ee11 0a90 	vmov	r0, s3
 800cdda:	4273      	negs	r3, r6
 800cddc:	4f60      	ldr	r7, [pc, #384]	; (800cf60 <__ieee754_atan2+0x190>)
 800cdde:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800cde2:	4333      	orrs	r3, r6
 800cde4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cde8:	42bb      	cmp	r3, r7
 800cdea:	ed8d 0b00 	vstr	d0, [sp]
 800cdee:	d80b      	bhi.n	800ce08 <__ieee754_atan2+0x38>
 800cdf0:	e9dd c500 	ldrd	ip, r5, [sp]
 800cdf4:	f1cc 0100 	rsb	r1, ip, #0
 800cdf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cdfc:	ea41 010c 	orr.w	r1, r1, ip
 800ce00:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800ce04:	42b9      	cmp	r1, r7
 800ce06:	d906      	bls.n	800ce16 <__ieee754_atan2+0x46>
 800ce08:	ed9d 7b00 	vldr	d7, [sp]
 800ce0c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800ce10:	ed8d 7b00 	vstr	d7, [sp]
 800ce14:	e054      	b.n	800cec0 <__ieee754_atan2+0xf0>
 800ce16:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800ce1a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800ce1e:	4331      	orrs	r1, r6
 800ce20:	d104      	bne.n	800ce2c <__ieee754_atan2+0x5c>
 800ce22:	b003      	add	sp, #12
 800ce24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce28:	f7ff be4a 	b.w	800cac0 <atan>
 800ce2c:	1784      	asrs	r4, r0, #30
 800ce2e:	f004 0402 	and.w	r4, r4, #2
 800ce32:	ea53 010c 	orrs.w	r1, r3, ip
 800ce36:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800ce3a:	d109      	bne.n	800ce50 <__ieee754_atan2+0x80>
 800ce3c:	2c02      	cmp	r4, #2
 800ce3e:	d069      	beq.n	800cf14 <__ieee754_atan2+0x144>
 800ce40:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800cf28 <__ieee754_atan2+0x158>
 800ce44:	ed9d 6b00 	vldr	d6, [sp]
 800ce48:	2c03      	cmp	r4, #3
 800ce4a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800ce4e:	e7df      	b.n	800ce10 <__ieee754_atan2+0x40>
 800ce50:	ea52 0106 	orrs.w	r1, r2, r6
 800ce54:	d107      	bne.n	800ce66 <__ieee754_atan2+0x96>
 800ce56:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800cf30 <__ieee754_atan2+0x160>
 800ce5a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800cf38 <__ieee754_atan2+0x168>
 800ce5e:	2d00      	cmp	r5, #0
 800ce60:	fe26 7b07 	vselge.f64	d7, d6, d7
 800ce64:	e7d4      	b.n	800ce10 <__ieee754_atan2+0x40>
 800ce66:	42ba      	cmp	r2, r7
 800ce68:	d10f      	bne.n	800ce8a <__ieee754_atan2+0xba>
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	f104 34ff 	add.w	r4, r4, #4294967295
 800ce70:	d107      	bne.n	800ce82 <__ieee754_atan2+0xb2>
 800ce72:	2c02      	cmp	r4, #2
 800ce74:	d851      	bhi.n	800cf1a <__ieee754_atan2+0x14a>
 800ce76:	4b3b      	ldr	r3, [pc, #236]	; (800cf64 <__ieee754_atan2+0x194>)
 800ce78:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ce7c:	ed94 7b00 	vldr	d7, [r4]
 800ce80:	e7c6      	b.n	800ce10 <__ieee754_atan2+0x40>
 800ce82:	2c02      	cmp	r4, #2
 800ce84:	d84c      	bhi.n	800cf20 <__ieee754_atan2+0x150>
 800ce86:	4b38      	ldr	r3, [pc, #224]	; (800cf68 <__ieee754_atan2+0x198>)
 800ce88:	e7f6      	b.n	800ce78 <__ieee754_atan2+0xa8>
 800ce8a:	42bb      	cmp	r3, r7
 800ce8c:	d0e3      	beq.n	800ce56 <__ieee754_atan2+0x86>
 800ce8e:	1a9b      	subs	r3, r3, r2
 800ce90:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ce94:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ce98:	da16      	bge.n	800cec8 <__ieee754_atan2+0xf8>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	da01      	bge.n	800cea2 <__ieee754_atan2+0xd2>
 800ce9e:	323c      	adds	r2, #60	; 0x3c
 800cea0:	db17      	blt.n	800ced2 <__ieee754_atan2+0x102>
 800cea2:	ed9d 7b00 	vldr	d7, [sp]
 800cea6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800ceaa:	f7ff ff03 	bl	800ccb4 <fabs>
 800ceae:	f7ff fe07 	bl	800cac0 <atan>
 800ceb2:	ed8d 0b00 	vstr	d0, [sp]
 800ceb6:	2c01      	cmp	r4, #1
 800ceb8:	d00e      	beq.n	800ced8 <__ieee754_atan2+0x108>
 800ceba:	2c02      	cmp	r4, #2
 800cebc:	d014      	beq.n	800cee8 <__ieee754_atan2+0x118>
 800cebe:	b9f4      	cbnz	r4, 800cefe <__ieee754_atan2+0x12e>
 800cec0:	ed9d 0b00 	vldr	d0, [sp]
 800cec4:	b003      	add	sp, #12
 800cec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800cf30 <__ieee754_atan2+0x160>
 800cecc:	ed8d 7b00 	vstr	d7, [sp]
 800ced0:	e7f1      	b.n	800ceb6 <__ieee754_atan2+0xe6>
 800ced2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 800cf40 <__ieee754_atan2+0x170>
 800ced6:	e7f9      	b.n	800cecc <__ieee754_atan2+0xfc>
 800ced8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cedc:	9901      	ldr	r1, [sp, #4]
 800cede:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cee2:	e9cd 2300 	strd	r2, r3, [sp]
 800cee6:	e7eb      	b.n	800cec0 <__ieee754_atan2+0xf0>
 800cee8:	ed9d 6b00 	vldr	d6, [sp]
 800ceec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cf48 <__ieee754_atan2+0x178>
 800cef0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cef4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 800cf50 <__ieee754_atan2+0x180>
 800cef8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cefc:	e788      	b.n	800ce10 <__ieee754_atan2+0x40>
 800cefe:	ed9d 6b00 	vldr	d6, [sp]
 800cf02:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800cf48 <__ieee754_atan2+0x178>
 800cf06:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cf0a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800cf50 <__ieee754_atan2+0x180>
 800cf0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cf12:	e77d      	b.n	800ce10 <__ieee754_atan2+0x40>
 800cf14:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800cf50 <__ieee754_atan2+0x180>
 800cf18:	e77a      	b.n	800ce10 <__ieee754_atan2+0x40>
 800cf1a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800cf58 <__ieee754_atan2+0x188>
 800cf1e:	e777      	b.n	800ce10 <__ieee754_atan2+0x40>
 800cf20:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800cf40 <__ieee754_atan2+0x170>
 800cf24:	e774      	b.n	800ce10 <__ieee754_atan2+0x40>
 800cf26:	bf00      	nop
 800cf28:	54442d18 	.word	0x54442d18
 800cf2c:	c00921fb 	.word	0xc00921fb
 800cf30:	54442d18 	.word	0x54442d18
 800cf34:	3ff921fb 	.word	0x3ff921fb
 800cf38:	54442d18 	.word	0x54442d18
 800cf3c:	bff921fb 	.word	0xbff921fb
	...
 800cf48:	33145c07 	.word	0x33145c07
 800cf4c:	3ca1a626 	.word	0x3ca1a626
 800cf50:	54442d18 	.word	0x54442d18
 800cf54:	400921fb 	.word	0x400921fb
 800cf58:	54442d18 	.word	0x54442d18
 800cf5c:	3fe921fb 	.word	0x3fe921fb
 800cf60:	7ff00000 	.word	0x7ff00000
 800cf64:	0800e5e0 	.word	0x0800e5e0
 800cf68:	0800e5f8 	.word	0x0800e5f8

0800cf6c <__ieee754_sqrt>:
 800cf6c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800cf70:	4770      	bx	lr

0800cf72 <with_errno>:
 800cf72:	b513      	push	{r0, r1, r4, lr}
 800cf74:	4604      	mov	r4, r0
 800cf76:	ed8d 0b00 	vstr	d0, [sp]
 800cf7a:	f7fe fa85 	bl	800b488 <__errno>
 800cf7e:	ed9d 0b00 	vldr	d0, [sp]
 800cf82:	6004      	str	r4, [r0, #0]
 800cf84:	b002      	add	sp, #8
 800cf86:	bd10      	pop	{r4, pc}

0800cf88 <xflow>:
 800cf88:	b082      	sub	sp, #8
 800cf8a:	b158      	cbz	r0, 800cfa4 <xflow+0x1c>
 800cf8c:	eeb1 7b40 	vneg.f64	d7, d0
 800cf90:	ed8d 7b00 	vstr	d7, [sp]
 800cf94:	ed9d 7b00 	vldr	d7, [sp]
 800cf98:	2022      	movs	r0, #34	; 0x22
 800cf9a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cf9e:	b002      	add	sp, #8
 800cfa0:	f7ff bfe7 	b.w	800cf72 <with_errno>
 800cfa4:	eeb0 7b40 	vmov.f64	d7, d0
 800cfa8:	e7f2      	b.n	800cf90 <xflow+0x8>
 800cfaa:	0000      	movs	r0, r0
 800cfac:	0000      	movs	r0, r0
	...

0800cfb0 <__math_uflow>:
 800cfb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfb8 <__math_uflow+0x8>
 800cfb4:	f7ff bfe8 	b.w	800cf88 <xflow>
 800cfb8:	00000000 	.word	0x00000000
 800cfbc:	10000000 	.word	0x10000000

0800cfc0 <__math_oflow>:
 800cfc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfc8 <__math_oflow+0x8>
 800cfc4:	f7ff bfe0 	b.w	800cf88 <xflow>
 800cfc8:	00000000 	.word	0x00000000
 800cfcc:	70000000 	.word	0x70000000

0800cfd0 <__math_divzero>:
 800cfd0:	b082      	sub	sp, #8
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cfd8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800cfdc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800cfe0:	ed8d 7b00 	vstr	d7, [sp]
 800cfe4:	ed9d 0b00 	vldr	d0, [sp]
 800cfe8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800cff8 <__math_divzero+0x28>
 800cfec:	2022      	movs	r0, #34	; 0x22
 800cfee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800cff2:	b002      	add	sp, #8
 800cff4:	f7ff bfbd 	b.w	800cf72 <with_errno>
	...

0800d000 <__math_invalid>:
 800d000:	eeb0 7b40 	vmov.f64	d7, d0
 800d004:	eeb4 7b47 	vcmp.f64	d7, d7
 800d008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800d010:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800d014:	d602      	bvs.n	800d01c <__math_invalid+0x1c>
 800d016:	2021      	movs	r0, #33	; 0x21
 800d018:	f7ff bfab 	b.w	800cf72 <with_errno>
 800d01c:	4770      	bx	lr

0800d01e <__math_check_uflow>:
 800d01e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d026:	d102      	bne.n	800d02e <__math_check_uflow+0x10>
 800d028:	2022      	movs	r0, #34	; 0x22
 800d02a:	f7ff bfa2 	b.w	800cf72 <with_errno>
 800d02e:	4770      	bx	lr

0800d030 <__math_check_oflow>:
 800d030:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800d050 <__math_check_oflow+0x20>
 800d034:	eeb0 7bc0 	vabs.f64	d7, d0
 800d038:	eeb4 7b46 	vcmp.f64	d7, d6
 800d03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d040:	dd02      	ble.n	800d048 <__math_check_oflow+0x18>
 800d042:	2022      	movs	r0, #34	; 0x22
 800d044:	f7ff bf95 	b.w	800cf72 <with_errno>
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	f3af 8000 	nop.w
 800d050:	ffffffff 	.word	0xffffffff
 800d054:	7fefffff 	.word	0x7fefffff

0800d058 <expm1>:
 800d058:	b417      	push	{r0, r1, r2, r4}
 800d05a:	ee10 2a90 	vmov	r2, s1
 800d05e:	49a6      	ldr	r1, [pc, #664]	; (800d2f8 <expm1+0x2a0>)
 800d060:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d064:	428b      	cmp	r3, r1
 800d066:	d932      	bls.n	800d0ce <expm1+0x76>
 800d068:	49a4      	ldr	r1, [pc, #656]	; (800d2fc <expm1+0x2a4>)
 800d06a:	428b      	cmp	r3, r1
 800d06c:	d921      	bls.n	800d0b2 <expm1+0x5a>
 800d06e:	49a4      	ldr	r1, [pc, #656]	; (800d300 <expm1+0x2a8>)
 800d070:	428b      	cmp	r3, r1
 800d072:	d911      	bls.n	800d098 <expm1+0x40>
 800d074:	ee10 1a10 	vmov	r1, s0
 800d078:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800d07c:	430b      	orrs	r3, r1
 800d07e:	d005      	beq.n	800d08c <expm1+0x34>
 800d080:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d084:	b003      	add	sp, #12
 800d086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	2a00      	cmp	r2, #0
 800d08e:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800d092:	fe20 0b07 	vselge.f64	d0, d0, d7
 800d096:	e7f5      	b.n	800d084 <expm1+0x2c>
 800d098:	ed9f 7b7f 	vldr	d7, [pc, #508]	; 800d298 <expm1+0x240>
 800d09c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0a4:	dd05      	ble.n	800d0b2 <expm1+0x5a>
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	b003      	add	sp, #12
 800d0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ae:	f7ff bf87 	b.w	800cfc0 <__math_oflow>
 800d0b2:	2a00      	cmp	r2, #0
 800d0b4:	da5d      	bge.n	800d172 <expm1+0x11a>
 800d0b6:	ed9f 7b7a 	vldr	d7, [pc, #488]	; 800d2a0 <expm1+0x248>
 800d0ba:	ee30 7b07 	vadd.f64	d7, d0, d7
 800d0be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c6:	d554      	bpl.n	800d172 <expm1+0x11a>
 800d0c8:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800d0cc:	e7da      	b.n	800d084 <expm1+0x2c>
 800d0ce:	498d      	ldr	r1, [pc, #564]	; (800d304 <expm1+0x2ac>)
 800d0d0:	428b      	cmp	r3, r1
 800d0d2:	d96a      	bls.n	800d1aa <expm1+0x152>
 800d0d4:	498c      	ldr	r1, [pc, #560]	; (800d308 <expm1+0x2b0>)
 800d0d6:	428b      	cmp	r3, r1
 800d0d8:	d84b      	bhi.n	800d172 <expm1+0x11a>
 800d0da:	2a00      	cmp	r2, #0
 800d0dc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800d2a8 <expm1+0x250>
 800d0e0:	db40      	blt.n	800d164 <expm1+0x10c>
 800d0e2:	ee30 6b46 	vsub.f64	d6, d0, d6
 800d0e6:	ed9f 5b72 	vldr	d5, [pc, #456]	; 800d2b0 <expm1+0x258>
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	ee36 0b45 	vsub.f64	d0, d6, d5
 800d0f0:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d0f4:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d0f8:	ed9f 4b6f 	vldr	d4, [pc, #444]	; 800d2b8 <expm1+0x260>
 800d0fc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d100:	ee20 2b03 	vmul.f64	d2, d0, d3
 800d104:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800d2c0 <expm1+0x268>
 800d108:	ee20 6b02 	vmul.f64	d6, d0, d2
 800d10c:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d110:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800d2c8 <expm1+0x270>
 800d114:	eea5 4b06 	vfma.f64	d4, d5, d6
 800d118:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 800d2d0 <expm1+0x278>
 800d11c:	eea4 5b06 	vfma.f64	d5, d4, d6
 800d120:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800d2d8 <expm1+0x280>
 800d124:	eea5 4b06 	vfma.f64	d4, d5, d6
 800d128:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800d12c:	eeb0 1b45 	vmov.f64	d1, d5
 800d130:	eea4 1b06 	vfma.f64	d1, d4, d6
 800d134:	eeb0 4b41 	vmov.f64	d4, d1
 800d138:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800d13c:	eea2 1b44 	vfms.f64	d1, d2, d4
 800d140:	ee34 2b41 	vsub.f64	d2, d4, d1
 800d144:	eeb1 4b08 	vmov.f64	d4, #24	; 0x40c00000  6.0
 800d148:	eea0 4b41 	vfms.f64	d4, d0, d1
 800d14c:	eeb0 1b44 	vmov.f64	d1, d4
 800d150:	ee82 4b01 	vdiv.f64	d4, d2, d1
 800d154:	ee24 4b06 	vmul.f64	d4, d4, d6
 800d158:	bbab      	cbnz	r3, 800d1c6 <expm1+0x16e>
 800d15a:	ee90 6b04 	vfnms.f64	d6, d0, d4
 800d15e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d162:	e78f      	b.n	800d084 <expm1+0x2c>
 800d164:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 800d2e0 <expm1+0x288>
 800d168:	ee30 6b06 	vadd.f64	d6, d0, d6
 800d16c:	f04f 33ff 	mov.w	r3, #4294967295
 800d170:	e7bc      	b.n	800d0ec <expm1+0x94>
 800d172:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 800d176:	2a00      	cmp	r2, #0
 800d178:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d17c:	fe27 7b06 	vselge.f64	d7, d7, d6
 800d180:	ed9f 6b59 	vldr	d6, [pc, #356]	; 800d2e8 <expm1+0x290>
 800d184:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 800d2b0 <expm1+0x258>
 800d188:	ee00 7b06 	vmla.f64	d7, d0, d6
 800d18c:	ed9f 6b46 	vldr	d6, [pc, #280]	; 800d2a8 <expm1+0x250>
 800d190:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d194:	ee17 3a90 	vmov	r3, s15
 800d198:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d19c:	eea7 0b46 	vfms.f64	d0, d7, d6
 800d1a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d1a4:	eeb0 6b40 	vmov.f64	d6, d0
 800d1a8:	e7a0      	b.n	800d0ec <expm1+0x94>
 800d1aa:	4a58      	ldr	r2, [pc, #352]	; (800d30c <expm1+0x2b4>)
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d808      	bhi.n	800d1c2 <expm1+0x16a>
 800d1b0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800d2f0 <expm1+0x298>
 800d1b4:	ee30 7b07 	vadd.f64	d7, d0, d7
 800d1b8:	ee37 7b47 	vsub.f64	d7, d7, d7
 800d1bc:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d1c0:	e760      	b.n	800d084 <expm1+0x2c>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e798      	b.n	800d0f8 <expm1+0xa0>
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	ee34 4b47 	vsub.f64	d4, d4, d7
 800d1cc:	ee94 7b00 	vfnms.f64	d7, d4, d0
 800d1d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d1d4:	d106      	bne.n	800d1e4 <expm1+0x18c>
 800d1d6:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d1da:	eebe 0b00 	vmov.f64	d0, #224	; 0xbf000000 -0.5
 800d1de:	eea7 0b03 	vfma.f64	d0, d7, d3
 800d1e2:	e74f      	b.n	800d084 <expm1+0x2c>
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d118      	bne.n	800d21a <expm1+0x1c2>
 800d1e8:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 800d1ec:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f4:	d508      	bpl.n	800d208 <expm1+0x1b0>
 800d1f6:	ee30 0b03 	vadd.f64	d0, d0, d3
 800d1fa:	ee37 0b40 	vsub.f64	d0, d7, d0
 800d1fe:	eeb8 7b00 	vmov.f64	d7, #128	; 0xc0000000 -2.0
 800d202:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d206:	e73d      	b.n	800d084 <expm1+0x2c>
 800d208:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d20c:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800d210:	eea0 5b07 	vfma.f64	d5, d0, d7
 800d214:	eeb0 0b45 	vmov.f64	d0, d5
 800d218:	e734      	b.n	800d084 <expm1+0x2c>
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	2a39      	cmp	r2, #57	; 0x39
 800d21e:	ea4f 5403 	mov.w	r4, r3, lsl #20
 800d222:	d90e      	bls.n	800d242 <expm1+0x1ea>
 800d224:	ee37 0b40 	vsub.f64	d0, d7, d0
 800d228:	ee35 7b40 	vsub.f64	d7, d5, d0
 800d22c:	ed8d 7b00 	vstr	d7, [sp]
 800d230:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d234:	9901      	ldr	r1, [sp, #4]
 800d236:	1863      	adds	r3, r4, r1
 800d238:	ec43 2b10 	vmov	d0, r2, r3
 800d23c:	ee30 0b45 	vsub.f64	d0, d0, d5
 800d240:	e720      	b.n	800d084 <expm1+0x2c>
 800d242:	2b13      	cmp	r3, #19
 800d244:	f04f 0000 	mov.w	r0, #0
 800d248:	dc16      	bgt.n	800d278 <expm1+0x220>
 800d24a:	ee37 0b40 	vsub.f64	d0, d7, d0
 800d24e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d252:	fa42 f303 	asr.w	r3, r2, r3
 800d256:	f1c3 517f 	rsb	r1, r3, #1069547520	; 0x3fc00000
 800d25a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800d25e:	ec41 0b16 	vmov	d6, r0, r1
 800d262:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d266:	ed8d 7b00 	vstr	d7, [sp]
 800d26a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d26e:	9901      	ldr	r1, [sp, #4]
 800d270:	1863      	adds	r3, r4, r1
 800d272:	ec43 2b10 	vmov	d0, r2, r3
 800d276:	e705      	b.n	800d084 <expm1+0x2c>
 800d278:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800d27c:	3303      	adds	r3, #3
 800d27e:	0519      	lsls	r1, r3, #20
 800d280:	ec41 0b16 	vmov	d6, r0, r1
 800d284:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d288:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d28c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d290:	e7e9      	b.n	800d266 <expm1+0x20e>
 800d292:	bf00      	nop
 800d294:	f3af 8000 	nop.w
 800d298:	fefa39ef 	.word	0xfefa39ef
 800d29c:	40862e42 	.word	0x40862e42
 800d2a0:	c2f8f359 	.word	0xc2f8f359
 800d2a4:	01a56e1f 	.word	0x01a56e1f
 800d2a8:	fee00000 	.word	0xfee00000
 800d2ac:	3fe62e42 	.word	0x3fe62e42
 800d2b0:	35793c76 	.word	0x35793c76
 800d2b4:	3dea39ef 	.word	0x3dea39ef
 800d2b8:	6e09c32d 	.word	0x6e09c32d
 800d2bc:	be8afdb7 	.word	0xbe8afdb7
 800d2c0:	86e65239 	.word	0x86e65239
 800d2c4:	3ed0cfca 	.word	0x3ed0cfca
 800d2c8:	9eaadbb7 	.word	0x9eaadbb7
 800d2cc:	bf14ce19 	.word	0xbf14ce19
 800d2d0:	19fe5585 	.word	0x19fe5585
 800d2d4:	3f5a01a0 	.word	0x3f5a01a0
 800d2d8:	111110f4 	.word	0x111110f4
 800d2dc:	bfa11111 	.word	0xbfa11111
 800d2e0:	35793c76 	.word	0x35793c76
 800d2e4:	bdea39ef 	.word	0xbdea39ef
 800d2e8:	652b82fe 	.word	0x652b82fe
 800d2ec:	3ff71547 	.word	0x3ff71547
 800d2f0:	8800759c 	.word	0x8800759c
 800d2f4:	7e37e43c 	.word	0x7e37e43c
 800d2f8:	40436879 	.word	0x40436879
 800d2fc:	40862e41 	.word	0x40862e41
 800d300:	7fefffff 	.word	0x7fefffff
 800d304:	3fd62e42 	.word	0x3fd62e42
 800d308:	3ff0a2b1 	.word	0x3ff0a2b1
 800d30c:	3c8fffff 	.word	0x3c8fffff

0800d310 <_init>:
 800d310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d312:	bf00      	nop
 800d314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d316:	bc08      	pop	{r3}
 800d318:	469e      	mov	lr, r3
 800d31a:	4770      	bx	lr

0800d31c <_fini>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	bf00      	nop
 800d320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d322:	bc08      	pop	{r3}
 800d324:	469e      	mov	lr, r3
 800d326:	4770      	bx	lr
